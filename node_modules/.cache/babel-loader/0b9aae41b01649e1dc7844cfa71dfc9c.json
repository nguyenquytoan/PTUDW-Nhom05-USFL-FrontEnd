{"ast":null,"code":"var test = require('tape');\n\nvar stringify = require('../');\n\ntest('replace root', function (t) {\n  t.plan(1);\n  var obj = {\n    a: 1,\n    b: 2,\n    c: false\n  };\n\n  var replacer = function (key, value) {\n    return 'one';\n  };\n\n  t.equal(stringify(obj, {\n    replacer: replacer\n  }), '\"one\"');\n});\ntest('replace numbers', function (t) {\n  t.plan(1);\n  var obj = {\n    a: 1,\n    b: 2,\n    c: false\n  };\n\n  var replacer = function (key, value) {\n    if (value === 1) return 'one';\n    if (value === 2) return 'two';\n    return value;\n  };\n\n  t.equal(stringify(obj, {\n    replacer: replacer\n  }), '{\"a\":\"one\",\"b\":\"two\",\"c\":false}');\n});\ntest('replace with object', function (t) {\n  t.plan(1);\n  var obj = {\n    a: 1,\n    b: 2,\n    c: false\n  };\n\n  var replacer = function (key, value) {\n    if (key === 'b') return {\n      d: 1\n    };\n    if (value === 1) return 'one';\n    return value;\n  };\n\n  t.equal(stringify(obj, {\n    replacer: replacer\n  }), '{\"a\":\"one\",\"b\":{\"d\":\"one\"},\"c\":false}');\n});\ntest('replace with undefined', function (t) {\n  t.plan(1);\n  var obj = {\n    a: 1,\n    b: 2,\n    c: false\n  };\n\n  var replacer = function (key, value) {\n    if (value === false) return;\n    return value;\n  };\n\n  t.equal(stringify(obj, {\n    replacer: replacer\n  }), '{\"a\":1,\"b\":2}');\n});\ntest('replace with array', function (t) {\n  t.plan(1);\n  var obj = {\n    a: 1,\n    b: 2,\n    c: false\n  };\n\n  var replacer = function (key, value) {\n    if (key === 'b') return ['one', 'two'];\n    return value;\n  };\n\n  t.equal(stringify(obj, {\n    replacer: replacer\n  }), '{\"a\":1,\"b\":[\"one\",\"two\"],\"c\":false}');\n});\ntest('replace array item', function (t) {\n  t.plan(1);\n  var obj = {\n    a: 1,\n    b: 2,\n    c: [1, 2]\n  };\n\n  var replacer = function (key, value) {\n    if (value === 1) return 'one';\n    if (value === 2) return 'two';\n    return value;\n  };\n\n  t.equal(stringify(obj, {\n    replacer: replacer\n  }), '{\"a\":\"one\",\"b\":\"two\",\"c\":[\"one\",\"two\"]}');\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/json-stable-stringify-without-jsonify/test/replacer.js"],"names":["test","require","stringify","t","plan","obj","a","b","c","replacer","key","value","equal","d"],"mappings":"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","sourcesContent":["var test = require('tape');\nvar stringify = require('../');\n\ntest('replace root', function (t) {\n\tt.plan(1);\n\n\tvar obj = { a: 1, b: 2, c: false };\n\tvar replacer = function(key, value) { return 'one'; };\n\n\tt.equal(stringify(obj, { replacer: replacer }), '\"one\"');\n});\n\ntest('replace numbers', function (t) {\n\tt.plan(1);\n\n\tvar obj = { a: 1, b: 2, c: false };\n\tvar replacer = function(key, value) {\n\t\tif(value === 1) return 'one';\n\t\tif(value === 2) return 'two';\n\t\treturn value;\n\t};\n\n\tt.equal(stringify(obj, { replacer: replacer }), '{\"a\":\"one\",\"b\":\"two\",\"c\":false}');\n});\n\ntest('replace with object', function (t) {\n\tt.plan(1);\n\n\tvar obj = { a: 1, b: 2, c: false };\n\tvar replacer = function(key, value) {\n\t\tif(key === 'b') return { d: 1 };\n\t\tif(value === 1) return 'one';\n\t\treturn value;\n\t};\n\n\tt.equal(stringify(obj, { replacer: replacer }), '{\"a\":\"one\",\"b\":{\"d\":\"one\"},\"c\":false}');\n});\n\ntest('replace with undefined', function (t) {\n\tt.plan(1);\n\n\tvar obj = { a: 1, b: 2, c: false };\n\tvar replacer = function(key, value) {\n\t\tif(value === false) return;\n\t\treturn value;\n\t};\n\n\tt.equal(stringify(obj, { replacer: replacer }), '{\"a\":1,\"b\":2}');\n});\n\ntest('replace with array', function (t) {\n\tt.plan(1);\n\n\tvar obj = { a: 1, b: 2, c: false };\n\tvar replacer = function(key, value) {\n\t\tif(key === 'b') return ['one', 'two'];\n\t\treturn value;\n\t};\n\n\tt.equal(stringify(obj, { replacer: replacer }), '{\"a\":1,\"b\":[\"one\",\"two\"],\"c\":false}');\n});\n\ntest('replace array item', function (t) {\n\tt.plan(1);\n\n\tvar obj = { a: 1, b: 2, c: [1,2] };\n\tvar replacer = function(key, value) {\n\t\tif(value === 1) return 'one';\n\t\tif(value === 2) return 'two';\n\t\treturn value;\n\t};\n\n\tt.equal(stringify(obj, { replacer: replacer }), '{\"a\":\"one\",\"b\":\"two\",\"c\":[\"one\",\"two\"]}');\n});\n"]},"metadata":{},"sourceType":"script"}