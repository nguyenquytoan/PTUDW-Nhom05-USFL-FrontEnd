{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst isAbsoluteUrl = require('is-absolute-url');\n\nconst defaultTo = require('./defaultTo');\n\nfunction createConfig(config, argv, {\n  port\n}) {\n  const firstWpOpt = Array.isArray(config) ? config[0] : config;\n  const options = firstWpOpt.devServer || {}; // This updates both config and firstWpOpt\n\n  firstWpOpt.mode = defaultTo(firstWpOpt.mode, 'development');\n\n  if (argv.bonjour) {\n    options.bonjour = true;\n  }\n\n  if (argv.host && (argv.host !== 'localhost' || !options.host)) {\n    options.host = argv.host;\n  }\n\n  if (argv.allowedHosts) {\n    options.allowedHosts = argv.allowedHosts.split(',');\n  }\n\n  if (argv.public) {\n    options.public = argv.public;\n  }\n\n  if (argv.socket) {\n    options.socket = argv.socket;\n  }\n\n  if (argv.sockHost) {\n    options.sockHost = argv.sockHost;\n  }\n\n  if (argv.sockPath) {\n    options.sockPath = argv.sockPath;\n  }\n\n  if (argv.sockPort) {\n    options.sockPort = argv.sockPort;\n  }\n\n  if (argv.liveReload === false) {\n    options.liveReload = false;\n  }\n\n  if (argv.profile) {\n    options.profile = argv.profile;\n  }\n\n  if (argv.progress) {\n    options.progress = argv.progress;\n  }\n\n  if (argv.overlay) {\n    options.overlay = argv.overlay;\n  }\n\n  if (!options.publicPath) {\n    // eslint-disable-next-line\n    options.publicPath = firstWpOpt.output && firstWpOpt.output.publicPath || '';\n\n    if (!isAbsoluteUrl(String(options.publicPath)) && options.publicPath[0] !== '/') {\n      options.publicPath = `/${options.publicPath}`;\n    }\n  }\n\n  if (!options.filename && firstWpOpt.output && firstWpOpt.output.filename) {\n    options.filename = firstWpOpt.output && firstWpOpt.output.filename;\n  }\n\n  if (!options.watchOptions && firstWpOpt.watchOptions) {\n    options.watchOptions = firstWpOpt.watchOptions;\n  }\n\n  if (argv.stdin) {\n    process.stdin.on('end', () => {\n      // eslint-disable-next-line no-process-exit\n      process.exit(0);\n    });\n    process.stdin.resume();\n  } // TODO https://github.com/webpack/webpack-dev-server/issues/616 (v4)\n  // We should prefer CLI arg under config, now we always prefer `hot` from `devServer`\n\n\n  if (!options.hot) {\n    options.hot = argv.hot;\n  } // TODO https://github.com/webpack/webpack-dev-server/issues/616 (v4)\n  // We should prefer CLI arg under config, now we always prefer `hotOnly` from `devServer`\n\n\n  if (!options.hotOnly) {\n    options.hotOnly = argv.hotOnly;\n  } // TODO https://github.com/webpack/webpack-dev-server/issues/616 (v4)\n  // We should prefer CLI arg under config, now we always prefer `clientLogLevel` from `devServer`\n\n\n  if (!options.clientLogLevel && argv.clientLogLevel) {\n    options.clientLogLevel = argv.clientLogLevel;\n  }\n\n  if (argv.contentBase) {\n    options.contentBase = argv.contentBase;\n\n    if (Array.isArray(options.contentBase)) {\n      options.contentBase = options.contentBase.map(p => path.resolve(p));\n    } else if (/^[0-9]$/.test(options.contentBase)) {\n      options.contentBase = +options.contentBase;\n    } else if (!isAbsoluteUrl(String(options.contentBase))) {\n      options.contentBase = path.resolve(options.contentBase);\n    }\n  } // It is possible to disable the contentBase by using\n  // `--no-content-base`, which results in arg[\"content-base\"] = false\n  else if (argv.contentBase === false) {\n      options.contentBase = false;\n    }\n\n  if (argv.watchContentBase) {\n    options.watchContentBase = true;\n  }\n\n  if (!options.stats) {\n    options.stats = defaultTo(firstWpOpt.stats, {\n      cached: false,\n      cachedAssets: false\n    });\n  }\n\n  if (typeof options.stats === 'object' && typeof options.stats.colors === 'undefined' && argv.color) {\n    options.stats = Object.assign({}, options.stats, {\n      colors: argv.color\n    });\n  }\n\n  if (argv.lazy) {\n    options.lazy = true;\n  } // TODO remove in `v4`\n\n\n  if (!argv.info) {\n    options.noInfo = true;\n  } // TODO remove in `v4`\n\n\n  if (argv.quiet) {\n    options.quiet = true;\n  }\n\n  if (argv.https) {\n    options.https = true;\n  }\n\n  if (argv.http2) {\n    options.http2 = true;\n  }\n\n  if (argv.key) {\n    options.key = argv.key;\n  }\n\n  if (argv.cert) {\n    options.cert = argv.cert;\n  }\n\n  if (argv.cacert) {\n    options.ca = argv.cacert;\n  }\n\n  if (argv.pfx) {\n    options.pfx = argv.pfx;\n  }\n\n  if (argv.pfxPassphrase) {\n    options.pfxPassphrase = argv.pfxPassphrase;\n  }\n\n  if (argv.inline === false) {\n    options.inline = false;\n  }\n\n  if (argv.historyApiFallback) {\n    options.historyApiFallback = true;\n  }\n\n  if (argv.compress) {\n    options.compress = true;\n  }\n\n  if (argv.disableHostCheck) {\n    options.disableHostCheck = true;\n  }\n\n  if (argv.openPage) {\n    options.open = true;\n    options.openPage = argv.openPage.split(',');\n  }\n\n  if (typeof argv.open !== 'undefined') {\n    options.open = argv.open !== '' ? argv.open : true;\n  }\n\n  if (options.open && !options.openPage) {\n    options.openPage = '';\n  }\n\n  if (argv.useLocalIp) {\n    options.useLocalIp = true;\n  } // Kind of weird, but ensures prior behavior isn't broken in cases\n  // that wouldn't throw errors. E.g. both argv.port and options.port\n  // were specified, but since argv.port is 8080, options.port will be\n  // tried first instead.\n\n\n  options.port = argv.port === port ? defaultTo(options.port, argv.port) : defaultTo(argv.port, options.port);\n  return options;\n}\n\nmodule.exports = createConfig;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/webpack-dev-server/lib/utils/createConfig.js"],"names":["path","require","isAbsoluteUrl","defaultTo","createConfig","config","argv","port","firstWpOpt","Array","isArray","options","devServer","mode","bonjour","host","allowedHosts","split","public","socket","sockHost","sockPath","sockPort","liveReload","profile","progress","overlay","publicPath","output","String","filename","watchOptions","stdin","process","on","exit","resume","hot","hotOnly","clientLogLevel","contentBase","map","p","resolve","test","watchContentBase","stats","cached","cachedAssets","colors","color","Object","assign","lazy","info","noInfo","quiet","https","http2","key","cert","cacert","ca","pfx","pfxPassphrase","inline","historyApiFallback","compress","disableHostCheck","openPage","open","useLocalIp","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst path = require('path');\nconst isAbsoluteUrl = require('is-absolute-url');\nconst defaultTo = require('./defaultTo');\n\nfunction createConfig(config, argv, { port }) {\n  const firstWpOpt = Array.isArray(config) ? config[0] : config;\n  const options = firstWpOpt.devServer || {};\n\n  // This updates both config and firstWpOpt\n  firstWpOpt.mode = defaultTo(firstWpOpt.mode, 'development');\n\n  if (argv.bonjour) {\n    options.bonjour = true;\n  }\n\n  if (argv.host && (argv.host !== 'localhost' || !options.host)) {\n    options.host = argv.host;\n  }\n\n  if (argv.allowedHosts) {\n    options.allowedHosts = argv.allowedHosts.split(',');\n  }\n\n  if (argv.public) {\n    options.public = argv.public;\n  }\n\n  if (argv.socket) {\n    options.socket = argv.socket;\n  }\n\n  if (argv.sockHost) {\n    options.sockHost = argv.sockHost;\n  }\n\n  if (argv.sockPath) {\n    options.sockPath = argv.sockPath;\n  }\n\n  if (argv.sockPort) {\n    options.sockPort = argv.sockPort;\n  }\n\n  if (argv.liveReload === false) {\n    options.liveReload = false;\n  }\n\n  if (argv.profile) {\n    options.profile = argv.profile;\n  }\n\n  if (argv.progress) {\n    options.progress = argv.progress;\n  }\n\n  if (argv.overlay) {\n    options.overlay = argv.overlay;\n  }\n\n  if (!options.publicPath) {\n    // eslint-disable-next-line\n    options.publicPath =\n      (firstWpOpt.output && firstWpOpt.output.publicPath) || '';\n\n    if (\n      !isAbsoluteUrl(String(options.publicPath)) &&\n      options.publicPath[0] !== '/'\n    ) {\n      options.publicPath = `/${options.publicPath}`;\n    }\n  }\n\n  if (!options.filename && firstWpOpt.output && firstWpOpt.output.filename) {\n    options.filename = firstWpOpt.output && firstWpOpt.output.filename;\n  }\n\n  if (!options.watchOptions && firstWpOpt.watchOptions) {\n    options.watchOptions = firstWpOpt.watchOptions;\n  }\n\n  if (argv.stdin) {\n    process.stdin.on('end', () => {\n      // eslint-disable-next-line no-process-exit\n      process.exit(0);\n    });\n\n    process.stdin.resume();\n  }\n\n  // TODO https://github.com/webpack/webpack-dev-server/issues/616 (v4)\n  // We should prefer CLI arg under config, now we always prefer `hot` from `devServer`\n  if (!options.hot) {\n    options.hot = argv.hot;\n  }\n\n  // TODO https://github.com/webpack/webpack-dev-server/issues/616 (v4)\n  // We should prefer CLI arg under config, now we always prefer `hotOnly` from `devServer`\n  if (!options.hotOnly) {\n    options.hotOnly = argv.hotOnly;\n  }\n\n  // TODO https://github.com/webpack/webpack-dev-server/issues/616 (v4)\n  // We should prefer CLI arg under config, now we always prefer `clientLogLevel` from `devServer`\n  if (!options.clientLogLevel && argv.clientLogLevel) {\n    options.clientLogLevel = argv.clientLogLevel;\n  }\n\n  if (argv.contentBase) {\n    options.contentBase = argv.contentBase;\n\n    if (Array.isArray(options.contentBase)) {\n      options.contentBase = options.contentBase.map((p) => path.resolve(p));\n    } else if (/^[0-9]$/.test(options.contentBase)) {\n      options.contentBase = +options.contentBase;\n    } else if (!isAbsoluteUrl(String(options.contentBase))) {\n      options.contentBase = path.resolve(options.contentBase);\n    }\n  }\n  // It is possible to disable the contentBase by using\n  // `--no-content-base`, which results in arg[\"content-base\"] = false\n  else if (argv.contentBase === false) {\n    options.contentBase = false;\n  }\n\n  if (argv.watchContentBase) {\n    options.watchContentBase = true;\n  }\n\n  if (!options.stats) {\n    options.stats = defaultTo(firstWpOpt.stats, {\n      cached: false,\n      cachedAssets: false,\n    });\n  }\n\n  if (\n    typeof options.stats === 'object' &&\n    typeof options.stats.colors === 'undefined' &&\n    argv.color\n  ) {\n    options.stats = Object.assign({}, options.stats, { colors: argv.color });\n  }\n\n  if (argv.lazy) {\n    options.lazy = true;\n  }\n\n  // TODO remove in `v4`\n  if (!argv.info) {\n    options.noInfo = true;\n  }\n\n  // TODO remove in `v4`\n  if (argv.quiet) {\n    options.quiet = true;\n  }\n\n  if (argv.https) {\n    options.https = true;\n  }\n\n  if (argv.http2) {\n    options.http2 = true;\n  }\n\n  if (argv.key) {\n    options.key = argv.key;\n  }\n\n  if (argv.cert) {\n    options.cert = argv.cert;\n  }\n\n  if (argv.cacert) {\n    options.ca = argv.cacert;\n  }\n\n  if (argv.pfx) {\n    options.pfx = argv.pfx;\n  }\n\n  if (argv.pfxPassphrase) {\n    options.pfxPassphrase = argv.pfxPassphrase;\n  }\n\n  if (argv.inline === false) {\n    options.inline = false;\n  }\n\n  if (argv.historyApiFallback) {\n    options.historyApiFallback = true;\n  }\n\n  if (argv.compress) {\n    options.compress = true;\n  }\n\n  if (argv.disableHostCheck) {\n    options.disableHostCheck = true;\n  }\n\n  if (argv.openPage) {\n    options.open = true;\n    options.openPage = argv.openPage.split(',');\n  }\n\n  if (typeof argv.open !== 'undefined') {\n    options.open = argv.open !== '' ? argv.open : true;\n  }\n\n  if (options.open && !options.openPage) {\n    options.openPage = '';\n  }\n\n  if (argv.useLocalIp) {\n    options.useLocalIp = true;\n  }\n\n  // Kind of weird, but ensures prior behavior isn't broken in cases\n  // that wouldn't throw errors. E.g. both argv.port and options.port\n  // were specified, but since argv.port is 8080, options.port will be\n  // tried first instead.\n  options.port =\n    argv.port === port\n      ? defaultTo(options.port, argv.port)\n      : defaultTo(argv.port, options.port);\n\n  return options;\n}\n\nmodule.exports = createConfig;\n"]},"metadata":{},"sourceType":"script"}