{"ast":null,"code":"'use strict';\n\nconst createConfig = require('./createConfig');\n\nconst defaultPort = require('./defaultPort');\n\nconst findPort = require('./findPort');\n\nfunction processOptions(config, argv, callback) {\n  // processOptions {Promise}\n  if (typeof config.then === 'function') {\n    config.then(conf => processOptions(conf, argv, callback)).catch(err => {\n      // eslint-disable-next-line no-console\n      console.error(err.stack || err); // eslint-disable-next-line no-process-exit\n\n      process.exit(1);\n    });\n    return;\n  } // Taken out of yargs because we must know if\n  // it wasn't given by the user, in which case\n  // we should use portfinder.\n\n\n  const options = createConfig(config, argv, {\n    port: defaultPort\n  });\n\n  if (options.socket) {\n    callback(config, options);\n  } else {\n    findPort(options.port).then(port => {\n      options.port = port;\n      callback(config, options);\n    }).catch(err => {\n      // eslint-disable-next-line no-console\n      console.error(err.stack || err); // eslint-disable-next-line no-process-exit\n\n      process.exit(1);\n    });\n  }\n}\n\nmodule.exports = processOptions;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/webpack-dev-server/lib/utils/processOptions.js"],"names":["createConfig","require","defaultPort","findPort","processOptions","config","argv","callback","then","conf","catch","err","console","error","stack","process","exit","options","port","socket","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAxB;;AAEA,SAASG,cAAT,CAAwBC,MAAxB,EAAgCC,IAAhC,EAAsCC,QAAtC,EAAgD;AAC9C;AACA,MAAI,OAAOF,MAAM,CAACG,IAAd,KAAuB,UAA3B,EAAuC;AACrCH,IAAAA,MAAM,CACHG,IADH,CACSC,IAAD,IAAUL,cAAc,CAACK,IAAD,EAAOH,IAAP,EAAaC,QAAb,CADhC,EAEGG,KAFH,CAEUC,GAAD,IAAS;AACd;AACAC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,KAAJ,IAAaH,GAA3B,EAFc,CAGd;;AACAI,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD,KAPH;AASA;AACD,GAb6C,CAe9C;AACA;AACA;;;AACA,QAAMC,OAAO,GAAGjB,YAAY,CAACK,MAAD,EAASC,IAAT,EAAe;AAAEY,IAAAA,IAAI,EAAEhB;AAAR,GAAf,CAA5B;;AAEA,MAAIe,OAAO,CAACE,MAAZ,EAAoB;AAClBZ,IAAAA,QAAQ,CAACF,MAAD,EAASY,OAAT,CAAR;AACD,GAFD,MAEO;AACLd,IAAAA,QAAQ,CAACc,OAAO,CAACC,IAAT,CAAR,CACGV,IADH,CACSU,IAAD,IAAU;AACdD,MAAAA,OAAO,CAACC,IAAR,GAAeA,IAAf;AACAX,MAAAA,QAAQ,CAACF,MAAD,EAASY,OAAT,CAAR;AACD,KAJH,EAKGP,KALH,CAKUC,GAAD,IAAS;AACd;AACAC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,KAAJ,IAAaH,GAA3B,EAFc,CAGd;;AACAI,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD,KAVH;AAWD;AACF;;AAEDI,MAAM,CAACC,OAAP,GAAiBjB,cAAjB","sourcesContent":["'use strict';\n\nconst createConfig = require('./createConfig');\nconst defaultPort = require('./defaultPort');\nconst findPort = require('./findPort');\n\nfunction processOptions(config, argv, callback) {\n  // processOptions {Promise}\n  if (typeof config.then === 'function') {\n    config\n      .then((conf) => processOptions(conf, argv, callback))\n      .catch((err) => {\n        // eslint-disable-next-line no-console\n        console.error(err.stack || err);\n        // eslint-disable-next-line no-process-exit\n        process.exit(1);\n      });\n\n    return;\n  }\n\n  // Taken out of yargs because we must know if\n  // it wasn't given by the user, in which case\n  // we should use portfinder.\n  const options = createConfig(config, argv, { port: defaultPort });\n\n  if (options.socket) {\n    callback(config, options);\n  } else {\n    findPort(options.port)\n      .then((port) => {\n        options.port = port;\n        callback(config, options);\n      })\n      .catch((err) => {\n        // eslint-disable-next-line no-console\n        console.error(err.stack || err);\n        // eslint-disable-next-line no-process-exit\n        process.exit(1);\n      });\n  }\n}\n\nmodule.exports = processOptions;\n"]},"metadata":{},"sourceType":"script"}