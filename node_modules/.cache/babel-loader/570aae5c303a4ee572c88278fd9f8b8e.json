{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _svgo = require('svgo');\n\nvar _svgo2 = _interopRequireDefault(_svgo);\n\nvar _isSvg = require('is-svg');\n\nvar _isSvg2 = _interopRequireDefault(_isSvg);\n\nvar _url = require('./lib/url');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst PLUGIN = 'postcss-svgo';\nconst dataURI = /data:image\\/svg\\+xml(;((charset=)?utf-8|base64))?,/i;\nconst dataURIBase64 = /data:image\\/svg\\+xml;base64,/i;\n\nfunction minifyPromise(decl, getSvgo, opts) {\n  const promises = [];\n  const parsed = (0, _postcssValueParser2.default)(decl.value);\n  decl.value = parsed.walk(node => {\n    if (node.type !== 'function' || node.value.toLowerCase() !== 'url' || !node.nodes.length) {\n      return;\n    }\n\n    let {\n      value,\n      quote\n    } = node.nodes[0];\n    let isBase64, isUriEncoded;\n    let svg = value.replace(dataURI, '');\n\n    if (dataURIBase64.test(value)) {\n      svg = Buffer.from(svg, 'base64').toString('utf8');\n      isBase64 = true;\n    } else {\n      let decodedUri;\n\n      try {\n        decodedUri = (0, _url.decode)(svg);\n        isUriEncoded = decodedUri !== svg;\n      } catch (e) {\n        // Swallow exception if we cannot decode the value\n        isUriEncoded = false;\n      }\n\n      if (isUriEncoded) {\n        svg = decodedUri;\n      }\n\n      if (opts.encode !== undefined) {\n        isUriEncoded = opts.encode;\n      }\n    }\n\n    if (!(0, _isSvg2.default)(svg)) {\n      return;\n    }\n\n    promises.push(getSvgo().optimize(svg).then(result => {\n      let data, optimizedValue;\n\n      if (isBase64) {\n        data = Buffer.from(result.data).toString('base64');\n        optimizedValue = 'data:image/svg+xml;base64,' + data;\n      } else {\n        data = isUriEncoded ? (0, _url.encode)(result.data) : result.data; // Should always encode # otherwise we yield a broken SVG\n        // in Firefox (works in Chrome however). See this issue:\n        // https://github.com/cssnano/cssnano/issues/245\n\n        data = data.replace(/#/g, '%23');\n        optimizedValue = 'data:image/svg+xml;charset=utf-8,' + data;\n        quote = isUriEncoded ? '\"' : '\\'';\n      }\n\n      node.nodes[0] = Object.assign({}, node.nodes[0], {\n        value: optimizedValue,\n        quote: quote,\n        type: 'string',\n        before: '',\n        after: ''\n      });\n    }).catch(error => {\n      throw new Error(`${PLUGIN}: ${error}`);\n    }));\n    return false;\n  });\n  return Promise.all(promises).then(() => decl.value = decl.value.toString());\n}\n\nexports.default = _postcss2.default.plugin(PLUGIN, (opts = {}) => {\n  let svgo = null;\n\n  const getSvgo = () => {\n    if (!svgo) {\n      svgo = new _svgo2.default(opts);\n    }\n\n    return svgo;\n  };\n\n  return css => {\n    return new Promise((resolve, reject) => {\n      const svgoQueue = [];\n      css.walkDecls(decl => {\n        if (!dataURI.test(decl.value)) {\n          return;\n        }\n\n        svgoQueue.push(minifyPromise(decl, getSvgo, opts));\n      });\n      return Promise.all(svgoQueue).then(resolve, reject);\n    });\n  };\n});\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-svgo/dist/index.js"],"names":["Object","defineProperty","exports","value","_postcss","require","_postcss2","_interopRequireDefault","_postcssValueParser","_postcssValueParser2","_svgo","_svgo2","_isSvg","_isSvg2","_url","obj","__esModule","default","PLUGIN","dataURI","dataURIBase64","minifyPromise","decl","getSvgo","opts","promises","parsed","walk","node","type","toLowerCase","nodes","length","quote","isBase64","isUriEncoded","svg","replace","test","Buffer","from","toString","decodedUri","decode","e","encode","undefined","push","optimize","then","result","data","optimizedValue","assign","before","after","catch","error","Error","Promise","all","plugin","svgo","css","resolve","reject","svgoQueue","walkDecls","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _svgo = require('svgo');\n\nvar _svgo2 = _interopRequireDefault(_svgo);\n\nvar _isSvg = require('is-svg');\n\nvar _isSvg2 = _interopRequireDefault(_isSvg);\n\nvar _url = require('./lib/url');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst PLUGIN = 'postcss-svgo';\nconst dataURI = /data:image\\/svg\\+xml(;((charset=)?utf-8|base64))?,/i;\nconst dataURIBase64 = /data:image\\/svg\\+xml;base64,/i;\n\nfunction minifyPromise(decl, getSvgo, opts) {\n    const promises = [];\n    const parsed = (0, _postcssValueParser2.default)(decl.value);\n\n    decl.value = parsed.walk(node => {\n        if (node.type !== 'function' || node.value.toLowerCase() !== 'url' || !node.nodes.length) {\n            return;\n        }\n\n        let { value, quote } = node.nodes[0];\n        let isBase64, isUriEncoded;\n        let svg = value.replace(dataURI, '');\n\n        if (dataURIBase64.test(value)) {\n            svg = Buffer.from(svg, 'base64').toString('utf8');\n            isBase64 = true;\n        } else {\n            let decodedUri;\n\n            try {\n                decodedUri = (0, _url.decode)(svg);\n                isUriEncoded = decodedUri !== svg;\n            } catch (e) {\n                // Swallow exception if we cannot decode the value\n                isUriEncoded = false;\n            }\n\n            if (isUriEncoded) {\n                svg = decodedUri;\n            }\n\n            if (opts.encode !== undefined) {\n                isUriEncoded = opts.encode;\n            }\n        }\n\n        if (!(0, _isSvg2.default)(svg)) {\n            return;\n        }\n\n        promises.push(getSvgo().optimize(svg).then(result => {\n            let data, optimizedValue;\n\n            if (isBase64) {\n                data = Buffer.from(result.data).toString('base64');\n                optimizedValue = 'data:image/svg+xml;base64,' + data;\n            } else {\n                data = isUriEncoded ? (0, _url.encode)(result.data) : result.data;\n                // Should always encode # otherwise we yield a broken SVG\n                // in Firefox (works in Chrome however). See this issue:\n                // https://github.com/cssnano/cssnano/issues/245\n                data = data.replace(/#/g, '%23');\n                optimizedValue = 'data:image/svg+xml;charset=utf-8,' + data;\n                quote = isUriEncoded ? '\"' : '\\'';\n            }\n\n            node.nodes[0] = Object.assign({}, node.nodes[0], {\n                value: optimizedValue,\n                quote: quote,\n                type: 'string',\n                before: '',\n                after: ''\n            });\n        }).catch(error => {\n            throw new Error(`${PLUGIN}: ${error}`);\n        }));\n\n        return false;\n    });\n\n    return Promise.all(promises).then(() => decl.value = decl.value.toString());\n}\n\nexports.default = _postcss2.default.plugin(PLUGIN, (opts = {}) => {\n    let svgo = null;\n\n    const getSvgo = () => {\n        if (!svgo) {\n            svgo = new _svgo2.default(opts);\n        }\n\n        return svgo;\n    };\n\n    return css => {\n        return new Promise((resolve, reject) => {\n            const svgoQueue = [];\n\n            css.walkDecls(decl => {\n                if (!dataURI.test(decl.value)) {\n                    return;\n                }\n\n                svgoQueue.push(minifyPromise(decl, getSvgo, opts));\n            });\n\n            return Promise.all(svgoQueue).then(resolve, reject);\n        });\n    };\n});\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}