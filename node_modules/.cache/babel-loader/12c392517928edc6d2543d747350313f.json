{"ast":null,"code":"'use strict';\n\nmodule.exports = readdirSync;\n\nconst DirectoryReader = require('../directory-reader');\n\nlet syncFacade = {\n  fs: require('./fs'),\n  forEach: require('./for-each'),\n  sync: true\n};\n/**\n * Returns the buffered output from a synchronous {@link DirectoryReader}.\n *\n * @param {string} dir\n * @param {object} [options]\n * @param {object} internalOptions\n */\n\nfunction readdirSync(dir, options, internalOptions) {\n  internalOptions.facade = syncFacade;\n  let reader = new DirectoryReader(dir, options, internalOptions);\n  let stream = reader.stream;\n  let results = [];\n  let data = stream.read();\n\n  while (data !== null) {\n    results.push(data);\n    data = stream.read();\n  }\n\n  return results;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/@mrmlnc/readdir-enhanced/lib/sync/index.js"],"names":["module","exports","readdirSync","DirectoryReader","require","syncFacade","fs","forEach","sync","dir","options","internalOptions","facade","reader","stream","results","data","read","push"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,WAAjB;;AAEA,MAAMC,eAAe,GAAGC,OAAO,CAAC,qBAAD,CAA/B;;AAEA,IAAIC,UAAU,GAAG;AACfC,EAAAA,EAAE,EAAEF,OAAO,CAAC,MAAD,CADI;AAEfG,EAAAA,OAAO,EAAEH,OAAO,CAAC,YAAD,CAFD;AAGfI,EAAAA,IAAI,EAAE;AAHS,CAAjB;AAMA;;;;;;;;AAOA,SAASN,WAAT,CAAsBO,GAAtB,EAA2BC,OAA3B,EAAoCC,eAApC,EAAqD;AACnDA,EAAAA,eAAe,CAACC,MAAhB,GAAyBP,UAAzB;AAEA,MAAIQ,MAAM,GAAG,IAAIV,eAAJ,CAAoBM,GAApB,EAAyBC,OAAzB,EAAkCC,eAAlC,CAAb;AACA,MAAIG,MAAM,GAAGD,MAAM,CAACC,MAApB;AAEA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,IAAI,GAAGF,MAAM,CAACG,IAAP,EAAX;;AACA,SAAOD,IAAI,KAAK,IAAhB,EAAsB;AACpBD,IAAAA,OAAO,CAACG,IAAR,CAAaF,IAAb;AACAA,IAAAA,IAAI,GAAGF,MAAM,CAACG,IAAP,EAAP;AACD;;AAED,SAAOF,OAAP;AACD","sourcesContent":["'use strict';\n\nmodule.exports = readdirSync;\n\nconst DirectoryReader = require('../directory-reader');\n\nlet syncFacade = {\n  fs: require('./fs'),\n  forEach: require('./for-each'),\n  sync: true\n};\n\n/**\n * Returns the buffered output from a synchronous {@link DirectoryReader}.\n *\n * @param {string} dir\n * @param {object} [options]\n * @param {object} internalOptions\n */\nfunction readdirSync (dir, options, internalOptions) {\n  internalOptions.facade = syncFacade;\n\n  let reader = new DirectoryReader(dir, options, internalOptions);\n  let stream = reader.stream;\n\n  let results = [];\n  let data = stream.read();\n  while (data !== null) {\n    results.push(data);\n    data = stream.read();\n  }\n\n  return results;\n}\n"]},"metadata":{},"sourceType":"script"}