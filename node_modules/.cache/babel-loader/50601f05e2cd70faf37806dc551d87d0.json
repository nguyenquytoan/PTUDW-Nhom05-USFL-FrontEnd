{"ast":null,"code":"/**\n * @fileoverview Rule to disallow unused labels.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unused labels\",\n      category: \"Best Practices\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-unused-labels\"\n    },\n    schema: [],\n    fixable: \"code\",\n    messages: {\n      unused: \"'{{name}}:' is defined but never used.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    let scopeInfo = null;\n    /**\n     * Adds a scope info to the stack.\n     * @param {ASTNode} node A node to add. This is a LabeledStatement.\n     * @returns {void}\n     */\n\n    function enterLabeledScope(node) {\n      scopeInfo = {\n        label: node.label.name,\n        used: false,\n        upper: scopeInfo\n      };\n    }\n    /**\n     * Removes the top of the stack.\n     * At the same time, this reports the label if it's never used.\n     * @param {ASTNode} node A node to report. This is a LabeledStatement.\n     * @returns {void}\n     */\n\n\n    function exitLabeledScope(node) {\n      if (!scopeInfo.used) {\n        context.report({\n          node: node.label,\n          messageId: \"unused\",\n          data: node.label,\n\n          fix(fixer) {\n            /*\n             * Only perform a fix if there are no comments between the label and the body. This will be the case\n             * when there is exactly one token/comment (the \":\") between the label and the body.\n             */\n            if (sourceCode.getTokenAfter(node.label, {\n              includeComments: true\n            }) === sourceCode.getTokenBefore(node.body, {\n              includeComments: true\n            })) {\n              return fixer.removeRange([node.range[0], node.body.range[0]]);\n            }\n\n            return null;\n          }\n\n        });\n      }\n\n      scopeInfo = scopeInfo.upper;\n    }\n    /**\n     * Marks the label of a given node as used.\n     * @param {ASTNode} node A node to mark. This is a BreakStatement or\n     *      ContinueStatement.\n     * @returns {void}\n     */\n\n\n    function markAsUsed(node) {\n      if (!node.label) {\n        return;\n      }\n\n      const label = node.label.name;\n      let info = scopeInfo;\n\n      while (info) {\n        if (info.label === label) {\n          info.used = true;\n          break;\n        }\n\n        info = info.upper;\n      }\n    }\n\n    return {\n      LabeledStatement: enterLabeledScope,\n      \"LabeledStatement:exit\": exitLabeledScope,\n      BreakStatement: markAsUsed,\n      ContinueStatement: markAsUsed\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-unused-labels.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","fixable","messages","unused","create","context","sourceCode","getSourceCode","scopeInfo","enterLabeledScope","node","label","name","used","upper","exitLabeledScope","report","messageId","data","fix","fixer","getTokenAfter","includeComments","getTokenBefore","body","removeRange","range","markAsUsed","info","LabeledStatement","BreakStatement","ContinueStatement"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,wBADX;AAEFC,MAAAA,QAAQ,EAAE,gBAFR;AAGFC,MAAAA,WAAW,EAAE,IAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,EAVN;AAYFC,IAAAA,OAAO,EAAE,MAZP;AAcFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,MAAM,EAAE;AADF;AAdR,GADO;;AAoBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;AACA,QAAIC,SAAS,GAAG,IAAhB;AAEA;;;;;;AAKA,aAASC,iBAAT,CAA2BC,IAA3B,EAAiC;AAC7BF,MAAAA,SAAS,GAAG;AACRG,QAAAA,KAAK,EAAED,IAAI,CAACC,KAAL,CAAWC,IADV;AAERC,QAAAA,IAAI,EAAE,KAFE;AAGRC,QAAAA,KAAK,EAAEN;AAHC,OAAZ;AAKH;AAED;;;;;;;;AAMA,aAASO,gBAAT,CAA0BL,IAA1B,EAAgC;AAC5B,UAAI,CAACF,SAAS,CAACK,IAAf,EAAqB;AACjBR,QAAAA,OAAO,CAACW,MAAR,CAAe;AACXN,UAAAA,IAAI,EAAEA,IAAI,CAACC,KADA;AAEXM,UAAAA,SAAS,EAAE,QAFA;AAGXC,UAAAA,IAAI,EAAER,IAAI,CAACC,KAHA;;AAIXQ,UAAAA,GAAG,CAACC,KAAD,EAAQ;AAEP;;;;AAIA,gBAAId,UAAU,CAACe,aAAX,CAAyBX,IAAI,CAACC,KAA9B,EAAqC;AAAEW,cAAAA,eAAe,EAAE;AAAnB,aAArC,MACIhB,UAAU,CAACiB,cAAX,CAA0Bb,IAAI,CAACc,IAA/B,EAAqC;AAAEF,cAAAA,eAAe,EAAE;AAAnB,aAArC,CADR,EACyE;AACrE,qBAAOF,KAAK,CAACK,WAAN,CAAkB,CAACf,IAAI,CAACgB,KAAL,CAAW,CAAX,CAAD,EAAgBhB,IAAI,CAACc,IAAL,CAAUE,KAAV,CAAgB,CAAhB,CAAhB,CAAlB,CAAP;AACH;;AAED,mBAAO,IAAP;AACH;;AAhBU,SAAf;AAkBH;;AAEDlB,MAAAA,SAAS,GAAGA,SAAS,CAACM,KAAtB;AACH;AAED;;;;;;;;AAMA,aAASa,UAAT,CAAoBjB,IAApB,EAA0B;AACtB,UAAI,CAACA,IAAI,CAACC,KAAV,EAAiB;AACb;AACH;;AAED,YAAMA,KAAK,GAAGD,IAAI,CAACC,KAAL,CAAWC,IAAzB;AACA,UAAIgB,IAAI,GAAGpB,SAAX;;AAEA,aAAOoB,IAAP,EAAa;AACT,YAAIA,IAAI,CAACjB,KAAL,KAAeA,KAAnB,EAA0B;AACtBiB,UAAAA,IAAI,CAACf,IAAL,GAAY,IAAZ;AACA;AACH;;AACDe,QAAAA,IAAI,GAAGA,IAAI,CAACd,KAAZ;AACH;AACJ;;AAED,WAAO;AACHe,MAAAA,gBAAgB,EAAEpB,iBADf;AAEH,+BAAyBM,gBAFtB;AAGHe,MAAAA,cAAc,EAAEH,UAHb;AAIHI,MAAAA,iBAAiB,EAAEJ;AAJhB,KAAP;AAMH;;AAjGY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to disallow unused labels.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow unused labels\",\n            category: \"Best Practices\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-unused-labels\"\n        },\n\n        schema: [],\n\n        fixable: \"code\",\n\n        messages: {\n            unused: \"'{{name}}:' is defined but never used.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        let scopeInfo = null;\n\n        /**\n         * Adds a scope info to the stack.\n         * @param {ASTNode} node A node to add. This is a LabeledStatement.\n         * @returns {void}\n         */\n        function enterLabeledScope(node) {\n            scopeInfo = {\n                label: node.label.name,\n                used: false,\n                upper: scopeInfo\n            };\n        }\n\n        /**\n         * Removes the top of the stack.\n         * At the same time, this reports the label if it's never used.\n         * @param {ASTNode} node A node to report. This is a LabeledStatement.\n         * @returns {void}\n         */\n        function exitLabeledScope(node) {\n            if (!scopeInfo.used) {\n                context.report({\n                    node: node.label,\n                    messageId: \"unused\",\n                    data: node.label,\n                    fix(fixer) {\n\n                        /*\n                         * Only perform a fix if there are no comments between the label and the body. This will be the case\n                         * when there is exactly one token/comment (the \":\") between the label and the body.\n                         */\n                        if (sourceCode.getTokenAfter(node.label, { includeComments: true }) ===\n                                sourceCode.getTokenBefore(node.body, { includeComments: true })) {\n                            return fixer.removeRange([node.range[0], node.body.range[0]]);\n                        }\n\n                        return null;\n                    }\n                });\n            }\n\n            scopeInfo = scopeInfo.upper;\n        }\n\n        /**\n         * Marks the label of a given node as used.\n         * @param {ASTNode} node A node to mark. This is a BreakStatement or\n         *      ContinueStatement.\n         * @returns {void}\n         */\n        function markAsUsed(node) {\n            if (!node.label) {\n                return;\n            }\n\n            const label = node.label.name;\n            let info = scopeInfo;\n\n            while (info) {\n                if (info.label === label) {\n                    info.used = true;\n                    break;\n                }\n                info = info.upper;\n            }\n        }\n\n        return {\n            LabeledStatement: enterLabeledScope,\n            \"LabeledStatement:exit\": exitLabeledScope,\n            BreakStatement: markAsUsed,\n            ContinueStatement: markAsUsed\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}