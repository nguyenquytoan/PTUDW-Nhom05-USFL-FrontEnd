{"ast":null,"code":"/**\n * @fileoverview Rule to enforce requiring named capture groups in regular expression.\n * @author Pig Fang <https://github.com/g-plane>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n  CALL,\n  CONSTRUCT,\n  ReferenceTracker,\n  getStringIfConstant\n} = require(\"eslint-utils\");\n\nconst regexpp = require(\"regexpp\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst parser = new regexpp.RegExpParser(); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce using named capture group in regular expression\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/prefer-named-capture-group\"\n    },\n    schema: [],\n    messages: {\n      required: \"Capture group '{{group}}' should be converted to a named or non-capturing group.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * Function to check regular expression.\n     * @param {string} pattern The regular expression pattern to be check.\n     * @param {ASTNode} node AST node which contains regular expression.\n     * @param {boolean} uFlag Flag indicates whether unicode mode is enabled or not.\n     * @returns {void}\n     */\n    function checkRegex(pattern, node, uFlag) {\n      let ast;\n\n      try {\n        ast = parser.parsePattern(pattern, 0, pattern.length, uFlag);\n      } catch (_) {\n        // ignore regex syntax errors\n        return;\n      }\n\n      regexpp.visitRegExpAST(ast, {\n        onCapturingGroupEnter(group) {\n          if (!group.name) {\n            context.report({\n              node,\n              messageId: \"required\",\n              data: {\n                group: group.raw\n              }\n            });\n          }\n        }\n\n      });\n    }\n\n    return {\n      Literal(node) {\n        if (node.regex) {\n          checkRegex(node.regex.pattern, node, node.regex.flags.includes(\"u\"));\n        }\n      },\n\n      Program() {\n        const scope = context.getScope();\n        const tracker = new ReferenceTracker(scope);\n        const traceMap = {\n          RegExp: {\n            [CALL]: true,\n            [CONSTRUCT]: true\n          }\n        };\n\n        for (const {\n          node\n        } of tracker.iterateGlobalReferences(traceMap)) {\n          const regex = getStringIfConstant(node.arguments[0]);\n          const flags = getStringIfConstant(node.arguments[1]);\n\n          if (regex) {\n            checkRegex(regex, node, flags && flags.includes(\"u\"));\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/prefer-named-capture-group.js"],"names":["CALL","CONSTRUCT","ReferenceTracker","getStringIfConstant","require","regexpp","parser","RegExpParser","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","required","create","context","checkRegex","pattern","node","uFlag","ast","parsePattern","length","_","visitRegExpAST","onCapturingGroupEnter","group","name","report","messageId","data","raw","Literal","regex","flags","includes","Program","scope","getScope","tracker","traceMap","RegExp","iterateGlobalReferences","arguments"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to enforce requiring named capture groups in regular expression.\n * @author Pig Fang <https://github.com/g-plane>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n    CALL,\n    CONSTRUCT,\n    ReferenceTracker,\n    getStringIfConstant\n} = require(\"eslint-utils\");\nconst regexpp = require(\"regexpp\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst parser = new regexpp.RegExpParser();\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce using named capture group in regular expression\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/prefer-named-capture-group\"\n        },\n\n        schema: [],\n\n        messages: {\n            required: \"Capture group '{{group}}' should be converted to a named or non-capturing group.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Function to check regular expression.\n         * @param {string} pattern The regular expression pattern to be check.\n         * @param {ASTNode} node AST node which contains regular expression.\n         * @param {boolean} uFlag Flag indicates whether unicode mode is enabled or not.\n         * @returns {void}\n         */\n        function checkRegex(pattern, node, uFlag) {\n            let ast;\n\n            try {\n                ast = parser.parsePattern(pattern, 0, pattern.length, uFlag);\n            } catch (_) {\n\n                // ignore regex syntax errors\n                return;\n            }\n\n            regexpp.visitRegExpAST(ast, {\n                onCapturingGroupEnter(group) {\n                    if (!group.name) {\n                        context.report({\n                            node,\n                            messageId: \"required\",\n                            data: {\n                                group: group.raw\n                            }\n                        });\n                    }\n                }\n            });\n        }\n\n        return {\n            Literal(node) {\n                if (node.regex) {\n                    checkRegex(node.regex.pattern, node, node.regex.flags.includes(\"u\"));\n                }\n            },\n            Program() {\n                const scope = context.getScope();\n                const tracker = new ReferenceTracker(scope);\n                const traceMap = {\n                    RegExp: {\n                        [CALL]: true,\n                        [CONSTRUCT]: true\n                    }\n                };\n\n                for (const { node } of tracker.iterateGlobalReferences(traceMap)) {\n                    const regex = getStringIfConstant(node.arguments[0]);\n                    const flags = getStringIfConstant(node.arguments[1]);\n\n                    if (regex) {\n                        checkRegex(regex, node, flags && flags.includes(\"u\"));\n                    }\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}