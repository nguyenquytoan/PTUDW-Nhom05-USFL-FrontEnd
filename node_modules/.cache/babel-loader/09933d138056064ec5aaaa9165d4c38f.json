{"ast":null,"code":"'use strict';\n\nconst mimicFn = require('mimic-fn');\n\nconst isPromise = require('p-is-promise');\n\nconst mapAgeCleaner = require('map-age-cleaner');\n\nconst cacheStore = new WeakMap();\n\nconst defaultCacheKey = (...arguments_) => {\n  if (arguments_.length === 0) {\n    return '__defaultKey';\n  }\n\n  if (arguments_.length === 1) {\n    const [firstArgument] = arguments_;\n\n    if (firstArgument === null || firstArgument === undefined || typeof firstArgument !== 'function' && typeof firstArgument !== 'object') {\n      return firstArgument;\n    }\n  }\n\n  return JSON.stringify(arguments_);\n};\n\nconst mem = (fn, options) => {\n  options = Object.assign({\n    cacheKey: defaultCacheKey,\n    cache: new Map(),\n    cachePromiseRejection: false\n  }, options);\n\n  if (typeof options.maxAge === 'number') {\n    mapAgeCleaner(options.cache);\n  }\n\n  const {\n    cache\n  } = options;\n  options.maxAge = options.maxAge || 0;\n\n  const setData = (key, data) => {\n    cache.set(key, {\n      data,\n      maxAge: Date.now() + options.maxAge\n    });\n  };\n\n  const memoized = function (...arguments_) {\n    const key = options.cacheKey(...arguments_);\n\n    if (cache.has(key)) {\n      return cache.get(key).data;\n    }\n\n    const cacheItem = fn.call(this, ...arguments_);\n    setData(key, cacheItem);\n\n    if (isPromise(cacheItem) && options.cachePromiseRejection === false) {\n      // Remove rejected promises from cache unless `cachePromiseRejection` is set to `true`\n      cacheItem.catch(() => cache.delete(key));\n    }\n\n    return cacheItem;\n  };\n\n  try {\n    // The below call will throw in some host environments\n    // See https://github.com/sindresorhus/mimic-fn/issues/10\n    mimicFn(memoized, fn);\n  } catch (_) {}\n\n  cacheStore.set(memoized, options.cache);\n  return memoized;\n};\n\nmodule.exports = mem; // TODO: Remove this for the next major release\n\nmodule.exports.default = mem;\n\nmodule.exports.clear = fn => {\n  const cache = cacheStore.get(fn);\n\n  if (cache && typeof cache.clear === 'function') {\n    cache.clear();\n  }\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/mem/index.js"],"names":["mimicFn","require","isPromise","mapAgeCleaner","cacheStore","WeakMap","defaultCacheKey","arguments_","length","firstArgument","undefined","JSON","stringify","mem","fn","options","Object","assign","cacheKey","cache","Map","cachePromiseRejection","maxAge","setData","key","data","set","Date","now","memoized","has","get","cacheItem","call","catch","delete","_","module","exports","default","clear"],"mappings":"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","sourcesContent":["'use strict';\nconst mimicFn = require('mimic-fn');\nconst isPromise = require('p-is-promise');\nconst mapAgeCleaner = require('map-age-cleaner');\n\nconst cacheStore = new WeakMap();\n\nconst defaultCacheKey = (...arguments_) => {\n\tif (arguments_.length === 0) {\n\t\treturn '__defaultKey';\n\t}\n\n\tif (arguments_.length === 1) {\n\t\tconst [firstArgument] = arguments_;\n\t\tif (\n\t\t\tfirstArgument === null ||\n\t\t\tfirstArgument === undefined ||\n\t\t\t(typeof firstArgument !== 'function' && typeof firstArgument !== 'object')\n\t\t) {\n\t\t\treturn firstArgument;\n\t\t}\n\t}\n\n\treturn JSON.stringify(arguments_);\n};\n\nconst mem = (fn, options) => {\n\toptions = Object.assign({\n\t\tcacheKey: defaultCacheKey,\n\t\tcache: new Map(),\n\t\tcachePromiseRejection: false\n\t}, options);\n\n\tif (typeof options.maxAge === 'number') {\n\t\tmapAgeCleaner(options.cache);\n\t}\n\n\tconst {cache} = options;\n\toptions.maxAge = options.maxAge || 0;\n\n\tconst setData = (key, data) => {\n\t\tcache.set(key, {\n\t\t\tdata,\n\t\t\tmaxAge: Date.now() + options.maxAge\n\t\t});\n\t};\n\n\tconst memoized = function (...arguments_) {\n\t\tconst key = options.cacheKey(...arguments_);\n\n\t\tif (cache.has(key)) {\n\t\t\treturn cache.get(key).data;\n\t\t}\n\n\t\tconst cacheItem = fn.call(this, ...arguments_);\n\n\t\tsetData(key, cacheItem);\n\n\t\tif (isPromise(cacheItem) && options.cachePromiseRejection === false) {\n\t\t\t// Remove rejected promises from cache unless `cachePromiseRejection` is set to `true`\n\t\t\tcacheItem.catch(() => cache.delete(key));\n\t\t}\n\n\t\treturn cacheItem;\n\t};\n\n\ttry {\n\t\t// The below call will throw in some host environments\n\t\t// See https://github.com/sindresorhus/mimic-fn/issues/10\n\t\tmimicFn(memoized, fn);\n\t} catch (_) {}\n\n\tcacheStore.set(memoized, options.cache);\n\n\treturn memoized;\n};\n\nmodule.exports = mem;\n// TODO: Remove this for the next major release\nmodule.exports.default = mem;\n\nmodule.exports.clear = fn => {\n\tconst cache = cacheStore.get(fn);\n\n\tif (cache && typeof cache.clear === 'function') {\n\t\tcache.clear();\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}