{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _cosmiconfig = require('cosmiconfig');\n\nvar _cosmiconfig2 = _interopRequireDefault(_cosmiconfig);\n\nvar _isResolvable = require('is-resolvable');\n\nvar _isResolvable2 = _interopRequireDefault(_isResolvable);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst cssnano = 'cssnano';\n\nfunction initializePlugin(plugin, css, result) {\n  if (Array.isArray(plugin)) {\n    const [processor, opts] = plugin;\n\n    if (typeof opts === 'undefined' || typeof opts === 'object' && !opts.exclude || typeof opts === 'boolean' && opts === true) {\n      return Promise.resolve(processor(opts)(css, result));\n    }\n  } else {\n    return Promise.resolve(plugin()(css, result));\n  } // Handle excluded plugins\n\n\n  return Promise.resolve();\n}\n/*\n * preset can be one of four possibilities:\n * preset = 'default'\n * preset = ['default', {}]\n * preset = function <- to be invoked\n * preset = {plugins: []} <- already invoked function\n */\n\n\nfunction resolvePreset(preset) {\n  let fn, options;\n\n  if (Array.isArray(preset)) {\n    fn = preset[0];\n    options = preset[1];\n  } else {\n    fn = preset;\n    options = {};\n  } // For JS setups where we invoked the preset already\n\n\n  if (preset.plugins) {\n    return Promise.resolve(preset.plugins);\n  } // Provide an alias for the default preset, as it is built-in.\n\n\n  if (fn === 'default') {\n    return Promise.resolve(require('cssnano-preset-default')(options).plugins);\n  } // For non-JS setups; we'll need to invoke the preset ourselves.\n\n\n  if (typeof fn === 'function') {\n    return Promise.resolve(fn(options).plugins);\n  } // Try loading a preset from node_modules\n\n\n  if ((0, _isResolvable2.default)(fn)) {\n    return Promise.resolve(require(fn)(options).plugins);\n  }\n\n  const sugar = `cssnano-preset-${fn}`; // Try loading a preset from node_modules (sugar)\n\n  if ((0, _isResolvable2.default)(sugar)) {\n    return Promise.resolve(require(sugar)(options).plugins);\n  } // If all else fails, we probably have a typo in the config somewhere\n\n\n  throw new Error(`Cannot load preset \"${fn}\". Please check your configuration for errors and try again.`);\n}\n/*\n * cssnano will look for configuration firstly as options passed\n * directly to it, and failing this it will use cosmiconfig to\n * load an external file.\n */\n\n\nfunction resolveConfig(css, result, options) {\n  if (options.preset) {\n    return resolvePreset(options.preset);\n  }\n\n  const inputFile = css.source && css.source.input && css.source.input.file;\n  let searchPath = inputFile ? _path2.default.dirname(inputFile) : process.cwd();\n  let configPath = null;\n\n  if (options.configFile) {\n    searchPath = null;\n    configPath = _path2.default.resolve(process.cwd(), options.configFile);\n  }\n\n  const configExplorer = (0, _cosmiconfig2.default)(cssnano);\n  const searchForConfig = configPath ? configExplorer.load(configPath) : configExplorer.search(searchPath);\n  return searchForConfig.then(config => {\n    if (config === null) {\n      return resolvePreset('default');\n    }\n\n    return resolvePreset(config.config.preset || config.config);\n  });\n}\n\nexports.default = _postcss2.default.plugin(cssnano, (options = {}) => {\n  return (css, result) => {\n    return resolveConfig(css, result, options).then(plugins => {\n      return plugins.reduce((promise, plugin) => {\n        return promise.then(initializePlugin.bind(null, plugin, css, result));\n      }, Promise.resolve());\n    });\n  };\n});\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/cssnano/dist/index.js"],"names":["Object","defineProperty","exports","value","_path","require","_path2","_interopRequireDefault","_postcss","_postcss2","_cosmiconfig","_cosmiconfig2","_isResolvable","_isResolvable2","obj","__esModule","default","cssnano","initializePlugin","plugin","css","result","Array","isArray","processor","opts","exclude","Promise","resolve","resolvePreset","preset","fn","options","plugins","sugar","Error","resolveConfig","inputFile","source","input","file","searchPath","dirname","process","cwd","configPath","configFile","configExplorer","searchForConfig","load","search","then","config","reduce","promise","bind","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _cosmiconfig = require('cosmiconfig');\n\nvar _cosmiconfig2 = _interopRequireDefault(_cosmiconfig);\n\nvar _isResolvable = require('is-resolvable');\n\nvar _isResolvable2 = _interopRequireDefault(_isResolvable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst cssnano = 'cssnano';\n\nfunction initializePlugin(plugin, css, result) {\n    if (Array.isArray(plugin)) {\n        const [processor, opts] = plugin;\n        if (typeof opts === 'undefined' || typeof opts === 'object' && !opts.exclude || typeof opts === 'boolean' && opts === true) {\n            return Promise.resolve(processor(opts)(css, result));\n        }\n    } else {\n        return Promise.resolve(plugin()(css, result));\n    }\n    // Handle excluded plugins\n    return Promise.resolve();\n}\n\n/*\n * preset can be one of four possibilities:\n * preset = 'default'\n * preset = ['default', {}]\n * preset = function <- to be invoked\n * preset = {plugins: []} <- already invoked function\n */\n\nfunction resolvePreset(preset) {\n    let fn, options;\n    if (Array.isArray(preset)) {\n        fn = preset[0];\n        options = preset[1];\n    } else {\n        fn = preset;\n        options = {};\n    }\n    // For JS setups where we invoked the preset already\n    if (preset.plugins) {\n        return Promise.resolve(preset.plugins);\n    }\n    // Provide an alias for the default preset, as it is built-in.\n    if (fn === 'default') {\n        return Promise.resolve(require('cssnano-preset-default')(options).plugins);\n    }\n    // For non-JS setups; we'll need to invoke the preset ourselves.\n    if (typeof fn === 'function') {\n        return Promise.resolve(fn(options).plugins);\n    }\n    // Try loading a preset from node_modules\n    if ((0, _isResolvable2.default)(fn)) {\n        return Promise.resolve(require(fn)(options).plugins);\n    }\n    const sugar = `cssnano-preset-${fn}`;\n    // Try loading a preset from node_modules (sugar)\n    if ((0, _isResolvable2.default)(sugar)) {\n        return Promise.resolve(require(sugar)(options).plugins);\n    }\n    // If all else fails, we probably have a typo in the config somewhere\n    throw new Error(`Cannot load preset \"${fn}\". Please check your configuration for errors and try again.`);\n}\n\n/*\n * cssnano will look for configuration firstly as options passed\n * directly to it, and failing this it will use cosmiconfig to\n * load an external file.\n */\n\nfunction resolveConfig(css, result, options) {\n    if (options.preset) {\n        return resolvePreset(options.preset);\n    }\n\n    const inputFile = css.source && css.source.input && css.source.input.file;\n    let searchPath = inputFile ? _path2.default.dirname(inputFile) : process.cwd();\n    let configPath = null;\n\n    if (options.configFile) {\n        searchPath = null;\n        configPath = _path2.default.resolve(process.cwd(), options.configFile);\n    }\n\n    const configExplorer = (0, _cosmiconfig2.default)(cssnano);\n    const searchForConfig = configPath ? configExplorer.load(configPath) : configExplorer.search(searchPath);\n\n    return searchForConfig.then(config => {\n        if (config === null) {\n            return resolvePreset('default');\n        }\n        return resolvePreset(config.config.preset || config.config);\n    });\n}\n\nexports.default = _postcss2.default.plugin(cssnano, (options = {}) => {\n    return (css, result) => {\n        return resolveConfig(css, result, options).then(plugins => {\n            return plugins.reduce((promise, plugin) => {\n                return promise.then(initializePlugin.bind(null, plugin, css, result));\n            }, Promise.resolve());\n        });\n    };\n});\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}