{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromIdentifier;\nvar JS_RESERVED = {\n  Array: Array,\n  Date: Date,\n  Infinity: Infinity,\n  Math: Math,\n  Number: Number,\n  Object: Object,\n  String: String,\n  undefined: undefined\n};\n/**\n * Extractor function for a Identifier type value node.\n * An Identifier is usually a reference to a variable.\n * Just return variable name to determine its existence.\n *\n * @param - value - AST Value object with type `Identifier`\n * @returns - The extracted value converted to correct type.\n */\n\nfunction extractValueFromIdentifier(value) {\n  var name = value.name;\n\n  if (Object.hasOwnProperty.call(JS_RESERVED, name)) {\n    return JS_RESERVED[name];\n  }\n\n  return name;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/lib/values/expressions/Identifier.js"],"names":["Object","defineProperty","exports","value","default","extractValueFromIdentifier","JS_RESERVED","Array","Date","Infinity","Math","Number","String","undefined","name","hasOwnProperty","call"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,0BAAlB;AACA,IAAIC,WAAW,GAAG;AAChBC,EAAAA,KAAK,EAAEA,KADS;AAEhBC,EAAAA,IAAI,EAAEA,IAFU;AAGhBC,EAAAA,QAAQ,EAAEA,QAHM;AAIhBC,EAAAA,IAAI,EAAEA,IAJU;AAKhBC,EAAAA,MAAM,EAAEA,MALQ;AAMhBX,EAAAA,MAAM,EAAEA,MANQ;AAOhBY,EAAAA,MAAM,EAAEA,MAPQ;AAQhBC,EAAAA,SAAS,EAAEA;AARK,CAAlB;AAWA;;;;;;;;;AAQA,SAASR,0BAAT,CAAoCF,KAApC,EAA2C;AACzC,MAAIW,IAAI,GAAGX,KAAK,CAACW,IAAjB;;AAGA,MAAId,MAAM,CAACe,cAAP,CAAsBC,IAAtB,CAA2BV,WAA3B,EAAwCQ,IAAxC,CAAJ,EAAmD;AACjD,WAAOR,WAAW,CAACQ,IAAD,CAAlB;AACD;;AAED,SAAOA,IAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromIdentifier;\nvar JS_RESERVED = {\n  Array: Array,\n  Date: Date,\n  Infinity: Infinity,\n  Math: Math,\n  Number: Number,\n  Object: Object,\n  String: String,\n  undefined: undefined\n};\n\n/**\n * Extractor function for a Identifier type value node.\n * An Identifier is usually a reference to a variable.\n * Just return variable name to determine its existence.\n *\n * @param - value - AST Value object with type `Identifier`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromIdentifier(value) {\n  var name = value.name;\n\n\n  if (Object.hasOwnProperty.call(JS_RESERVED, name)) {\n    return JS_RESERVED[name];\n  }\n\n  return name;\n}"]},"metadata":{},"sourceType":"script"}