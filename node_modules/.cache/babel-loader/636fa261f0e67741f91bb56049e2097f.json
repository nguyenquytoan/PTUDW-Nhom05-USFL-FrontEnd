{"ast":null,"code":"/**\n * @fileoverview Enforce spacing between rest and spread operators and their expressions.\n * @author Kai Cataldo\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce spacing between rest and spread operators and their expressions\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/rest-spread-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }]\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode(),\n          alwaysSpace = context.options[0] === \"always\"; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Checks whitespace between rest/spread operators and their expressions\n     * @param {ASTNode} node The node to check\n     * @returns {void}\n     */\n\n    function checkWhiteSpace(node) {\n      const operator = sourceCode.getFirstToken(node),\n            nextToken = sourceCode.getTokenAfter(operator),\n            hasWhitespace = sourceCode.isSpaceBetweenTokens(operator, nextToken);\n      let type;\n\n      switch (node.type) {\n        case \"SpreadElement\":\n          type = \"spread\";\n\n          if (node.parent.type === \"ObjectExpression\") {\n            type += \" property\";\n          }\n\n          break;\n\n        case \"RestElement\":\n          type = \"rest\";\n\n          if (node.parent.type === \"ObjectPattern\") {\n            type += \" property\";\n          }\n\n          break;\n\n        case \"ExperimentalSpreadProperty\":\n          type = \"spread property\";\n          break;\n\n        case \"ExperimentalRestProperty\":\n          type = \"rest property\";\n          break;\n\n        default:\n          return;\n      }\n\n      if (alwaysSpace && !hasWhitespace) {\n        context.report({\n          node,\n          loc: {\n            line: operator.loc.end.line,\n            column: operator.loc.end.column\n          },\n          message: \"Expected whitespace after {{type}} operator.\",\n          data: {\n            type\n          },\n\n          fix(fixer) {\n            return fixer.replaceTextRange([operator.range[1], nextToken.range[0]], \" \");\n          }\n\n        });\n      } else if (!alwaysSpace && hasWhitespace) {\n        context.report({\n          node,\n          loc: {\n            line: operator.loc.end.line,\n            column: operator.loc.end.column\n          },\n          message: \"Unexpected whitespace after {{type}} operator.\",\n          data: {\n            type\n          },\n\n          fix(fixer) {\n            return fixer.removeRange([operator.range[1], nextToken.range[0]]);\n          }\n\n        });\n      }\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      SpreadElement: checkWhiteSpace,\n      RestElement: checkWhiteSpace,\n      ExperimentalSpreadProperty: checkWhiteSpace,\n      ExperimentalRestProperty: checkWhiteSpace\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/rest-spread-spacing.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","create","context","sourceCode","getSourceCode","alwaysSpace","options","checkWhiteSpace","node","operator","getFirstToken","nextToken","getTokenAfter","hasWhitespace","isSpaceBetweenTokens","parent","report","loc","line","end","column","message","data","fix","fixer","replaceTextRange","range","removeRange","SpreadElement","RestElement","ExperimentalSpreadProperty","ExperimentalRestProperty"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Enforce spacing between rest and spread operators and their expressions.\n * @author Kai Cataldo\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce spacing between rest and spread operators and their expressions\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/rest-spread-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            }\n        ]\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode(),\n            alwaysSpace = context.options[0] === \"always\";\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Checks whitespace between rest/spread operators and their expressions\n         * @param {ASTNode} node The node to check\n         * @returns {void}\n         */\n        function checkWhiteSpace(node) {\n            const operator = sourceCode.getFirstToken(node),\n                nextToken = sourceCode.getTokenAfter(operator),\n                hasWhitespace = sourceCode.isSpaceBetweenTokens(operator, nextToken);\n            let type;\n\n            switch (node.type) {\n                case \"SpreadElement\":\n                    type = \"spread\";\n                    if (node.parent.type === \"ObjectExpression\") {\n                        type += \" property\";\n                    }\n                    break;\n                case \"RestElement\":\n                    type = \"rest\";\n                    if (node.parent.type === \"ObjectPattern\") {\n                        type += \" property\";\n                    }\n                    break;\n                case \"ExperimentalSpreadProperty\":\n                    type = \"spread property\";\n                    break;\n                case \"ExperimentalRestProperty\":\n                    type = \"rest property\";\n                    break;\n                default:\n                    return;\n            }\n\n            if (alwaysSpace && !hasWhitespace) {\n                context.report({\n                    node,\n                    loc: {\n                        line: operator.loc.end.line,\n                        column: operator.loc.end.column\n                    },\n                    message: \"Expected whitespace after {{type}} operator.\",\n                    data: {\n                        type\n                    },\n                    fix(fixer) {\n                        return fixer.replaceTextRange([operator.range[1], nextToken.range[0]], \" \");\n                    }\n                });\n            } else if (!alwaysSpace && hasWhitespace) {\n                context.report({\n                    node,\n                    loc: {\n                        line: operator.loc.end.line,\n                        column: operator.loc.end.column\n                    },\n                    message: \"Unexpected whitespace after {{type}} operator.\",\n                    data: {\n                        type\n                    },\n                    fix(fixer) {\n                        return fixer.removeRange([operator.range[1], nextToken.range[0]]);\n                    }\n                });\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            SpreadElement: checkWhiteSpace,\n            RestElement: checkWhiteSpace,\n            ExperimentalSpreadProperty: checkWhiteSpace,\n            ExperimentalRestProperty: checkWhiteSpace\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}