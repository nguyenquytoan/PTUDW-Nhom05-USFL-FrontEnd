{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _1 = require(\".\");\n\nvar TEST_CASES = [[\"\", \"\"], [\"test\", \"test\"], [\"test string\", \"test-string\"], [\"Test String\", \"test-string\"], [\"TestV2\", \"test-v2\"], [\"version 1.2.10\", \"version-1-2-10\"], [\"version 1.21.0\", \"version-1-21-0\"]];\ndescribe(\"param case\", function () {\n  var _loop_1 = function (input, result) {\n    it(input + \" -> \" + result, function () {\n      expect(_1.paramCase(input)).toEqual(result);\n    });\n  };\n\n  for (var _i = 0, TEST_CASES_1 = TEST_CASES; _i < TEST_CASES_1.length; _i++) {\n    var _a = TEST_CASES_1[_i],\n        input = _a[0],\n        result = _a[1];\n\n    _loop_1(input, result);\n  }\n});","map":{"version":3,"sources":["../src/index.spec.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,EAAA,GAAA,OAAA,CAAA,GAAA,CAAA;;AAEA,IAAM,UAAU,GAAuB,CACrC,CAAC,EAAD,EAAK,EAAL,CADqC,EAErC,CAAC,MAAD,EAAS,MAAT,CAFqC,EAGrC,CAAC,aAAD,EAAgB,aAAhB,CAHqC,EAIrC,CAAC,aAAD,EAAgB,aAAhB,CAJqC,EAKrC,CAAC,QAAD,EAAW,SAAX,CALqC,EAMrC,CAAC,gBAAD,EAAmB,gBAAnB,CANqC,EAOrC,CAAC,gBAAD,EAAmB,gBAAnB,CAPqC,CAAvC;AAUA,QAAQ,CAAC,YAAD,EAAe,YAAA;0BACT,K,EAAO,M,EAAM;AACvB,IAAA,EAAE,CAAI,KAAK,GAAA,MAAL,GAAY,MAAhB,EAA0B,YAAA;AAC1B,MAAA,MAAM,CAAC,EAAA,CAAA,SAAA,CAAU,KAAV,CAAD,CAAN,CAAyB,OAAzB,CAAiC,MAAjC;AACD,KAFC,CAAF;;;AADF,OAA8B,IAAA,EAAA,GAAA,CAAA,EAAA,YAAA,GAAA,UAA9B,EAA8B,EAAA,GAAA,YAAA,CAAA,MAA9B,EAA8B,EAAA,EAA9B,EAAwC;AAA7B,QAAA,EAAA,GAAA,YAAA,CAAA,EAAA,CAAA;AAAA,QAAC,KAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,QAAQ,MAAA,GAAA,EAAA,CAAA,CAAA,CAAR;;YAAC,K,EAAO,M;AAIlB;AACF,CANO,CAAR","sourcesContent":["import { paramCase } from \".\";\n\nconst TEST_CASES: [string, string][] = [\n  [\"\", \"\"],\n  [\"test\", \"test\"],\n  [\"test string\", \"test-string\"],\n  [\"Test String\", \"test-string\"],\n  [\"TestV2\", \"test-v2\"],\n  [\"version 1.2.10\", \"version-1-2-10\"],\n  [\"version 1.21.0\", \"version-1-21-0\"]\n];\n\ndescribe(\"param case\", () => {\n  for (const [input, result] of TEST_CASES) {\n    it(`${input} -> ${result}`, () => {\n      expect(paramCase(input)).toEqual(result);\n    });\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}