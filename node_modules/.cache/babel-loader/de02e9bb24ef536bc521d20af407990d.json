{"ast":null,"code":"var cookieParser = require('cookie-parser');\n\nvar basicAuth = require('basic-auth');\n\nvar express = require('express');\n\nvar fs = require('fs');\n\nvar http = require('http');\n\nvar path = require('path');\n\nvar url = require('url');\n\nvar app = express();\nvar server = http.createServer(app); // Otherwise, use 'application/octet-stream'\n\nvar copiesMimeTypes = {\n  '/basic.txt': 'text/plain'\n};\nvar maxDelay = 5000; // ms\n// This should make sure bodies aren't cached\n// so the streaming tests always pass\n\napp.use(function (req, res, next) {\n  res.setHeader('Cache-Control', 'no-store');\n  next();\n});\napp.get('/testHeaders', function (req, res) {\n  var parsed = url.parse(req.url, true); // Values in query parameters are sent as response headers\n\n  Object.keys(parsed.query).forEach(function (key) {\n    res.setHeader('Test-' + key, parsed.query[key]);\n  });\n  res.setHeader('Content-Type', 'application/json');\n  res.setHeader('Cache-Control', 'no-cache'); // Request headers are sent in the body as json\n\n  var reqHeaders = {};\n  Object.keys(req.headers).forEach(function (key) {\n    key = key.toLowerCase();\n\n    if (key.indexOf('test-') === 0) {\n      // different browsers format request headers with multiple values\n      // slightly differently, so normalize\n      reqHeaders[key] = req.headers[key].replace(', ', ',');\n    }\n  });\n  var body = JSON.stringify(reqHeaders);\n  res.setHeader('Content-Length', body.length);\n  res.write(body);\n  res.end();\n});\napp.get('/cookie', cookieParser(), function (req, res) {\n  res.setHeader('Content-Type', 'text/plain');\n  res.write('hello=' + req.cookies.hello);\n  res.end();\n});\napp.get('/auth', function (req, res) {\n  var user = basicAuth(req);\n\n  if (!user || user.name !== 'TestUser' || user.pass !== 'trustno1') {\n    res.setHeader('WWW-Authenticate', 'Basic realm=\"example\"');\n    res.end('Access denied');\n  } else {\n    res.setHeader('Content-Type', 'text/plain');\n    res.write('You\\'re in!');\n    res.end();\n  }\n});\napp.post('/echo', function (req, res) {\n  res.setHeader('Content-Type', 'application/octet-stream');\n  req.pipe(res);\n});\napp.use('/verifyEmpty', function (req, res) {\n  var empty = true;\n  req.on('data', function (buf) {\n    if (buf.length > 0) {\n      empty = false;\n    }\n  });\n  req.on('end', function () {\n    res.setHeader('Content-Type', 'text/plain');\n\n    if (empty) {\n      res.end('empty');\n    } else {\n      res.end('not empty');\n    }\n  });\n});\napp.use(function (req, res, next) {\n  var parsed = url.parse(req.url, true);\n\n  if ('copies' in parsed.query) {\n    var totalCopies = parseInt(parsed.query.copies, 10);\n\n    function fail() {\n      res.statusCode = 500;\n      res.end();\n    }\n\n    fs.readFile(path.join(__dirname, 'static', parsed.pathname), function (err, data) {\n      if (err) return fail();\n      var mimeType = copiesMimeTypes[parsed.pathname] || 'application/octet-stream';\n      res.setHeader('Content-Type', mimeType);\n      res.setHeader('Content-Length', data.length * totalCopies);\n      var pieceDelay = maxDelay / totalCopies;\n      if (pieceDelay > 100) pieceDelay = 100;\n\n      function write(copies) {\n        if (copies === 0) return res.end();\n        res.write(data, function (err) {\n          if (err) return fail();\n          setTimeout(write.bind(null, copies - 1), pieceDelay);\n        });\n      }\n\n      write(totalCopies);\n    });\n    return;\n  }\n\n  next();\n});\napp.use(express.static(path.join(__dirname, 'static')));\nvar port = parseInt(process.env.AIRTAP_PORT) || 8199;\nconsole.log('Test server listening on port', port);\nserver.listen(port);","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/stream-http/test/server/index.js"],"names":["cookieParser","require","basicAuth","express","fs","http","path","url","app","server","createServer","copiesMimeTypes","maxDelay","use","req","res","next","setHeader","get","parsed","parse","Object","keys","query","forEach","key","reqHeaders","headers","toLowerCase","indexOf","replace","body","JSON","stringify","length","write","end","cookies","hello","user","name","pass","post","pipe","empty","on","buf","totalCopies","parseInt","copies","fail","statusCode","readFile","join","__dirname","pathname","err","data","mimeType","pieceDelay","setTimeout","bind","static","port","process","env","AIRTAP_PORT","console","log","listen"],"mappings":"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","sourcesContent":["var cookieParser = require('cookie-parser')\nvar basicAuth = require('basic-auth')\nvar express = require('express')\nvar fs = require('fs')\nvar http = require('http')\nvar path = require('path')\nvar url = require('url')\n\nvar app = express()\nvar server = http.createServer(app)\n\n// Otherwise, use 'application/octet-stream'\nvar copiesMimeTypes = {\n\t'/basic.txt': 'text/plain'\n}\n\nvar maxDelay = 5000 // ms\n\n// This should make sure bodies aren't cached\n// so the streaming tests always pass\napp.use(function (req, res, next) {\n\tres.setHeader('Cache-Control', 'no-store')\n\tnext()\n})\n\napp.get('/testHeaders', function (req, res) {\n\tvar parsed = url.parse(req.url, true)\n\n\t// Values in query parameters are sent as response headers\n\tObject.keys(parsed.query).forEach(function (key) {\n\t\tres.setHeader('Test-' + key, parsed.query[key])\n\t})\n\n\tres.setHeader('Content-Type', 'application/json')\n\tres.setHeader('Cache-Control', 'no-cache')\n\n\t// Request headers are sent in the body as json\n\tvar reqHeaders = {}\n\tObject.keys(req.headers).forEach(function (key) {\n\t\tkey = key.toLowerCase()\n\t\tif (key.indexOf('test-') === 0) {\n\t\t\t// different browsers format request headers with multiple values\n\t\t\t// slightly differently, so normalize\n\t\t\treqHeaders[key] = req.headers[key].replace(', ', ',')\n\t\t}\n\t})\n\n\tvar body = JSON.stringify(reqHeaders)\n\tres.setHeader('Content-Length', body.length)\n\tres.write(body)\n\tres.end()\n})\n\napp.get('/cookie', cookieParser(), function (req, res) {\n\tres.setHeader('Content-Type', 'text/plain')\n\tres.write('hello=' + req.cookies.hello)\n\tres.end()\n})\n\napp.get('/auth', function (req, res) {\n\tvar user = basicAuth(req)\n\n\tif (!user || user.name !== 'TestUser' || user.pass !== 'trustno1') {\n\t\tres.setHeader('WWW-Authenticate', 'Basic realm=\"example\"')\n\t\tres.end('Access denied')\n\t} else {\n\t\tres.setHeader('Content-Type', 'text/plain')\n\t\tres.write('You\\'re in!')\n\t\tres.end()\n\t}\n})\n\napp.post('/echo', function (req, res) {\n\tres.setHeader('Content-Type', 'application/octet-stream')\n\treq.pipe(res)\n})\n\napp.use('/verifyEmpty', function (req, res) {\n\tvar empty = true\n\treq.on('data', function (buf) {\n\t\tif (buf.length > 0) {\n\t\t\tempty = false\n\t\t}\n\t})\n\treq.on('end', function () {\n\t\tres.setHeader('Content-Type', 'text/plain')\n\n\t\tif (empty) {\n\t\t\tres.end('empty')\n\t\t} else {\n\t\t\tres.end('not empty')\n\t\t}\n\t})\n})\n\napp.use(function (req, res, next) {\n\tvar parsed = url.parse(req.url, true)\n\n\tif ('copies' in parsed.query) {\n\t\tvar totalCopies = parseInt(parsed.query.copies, 10)\n\t\tfunction fail () {\n\t\t\tres.statusCode = 500\n\t\t\tres.end()\n\t\t}\n\t\tfs.readFile(path.join(__dirname, 'static', parsed.pathname), function (err, data) {\n\t\t\tif (err)\n\t\t\t\treturn fail()\n\n\t\t\tvar mimeType = copiesMimeTypes[parsed.pathname] || 'application/octet-stream'\n\t\t\tres.setHeader('Content-Type', mimeType)\n\t\t\tres.setHeader('Content-Length', data.length * totalCopies)\n\t\t\tvar pieceDelay = maxDelay / totalCopies\n\t\t\tif (pieceDelay > 100)\n\t\t\t\tpieceDelay = 100\n\n\t\t\tfunction write (copies) {\n\t\t\t\tif (copies === 0) \n\t\t\t\t\treturn res.end()\n\n\t\t\t\tres.write(data, function (err) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\treturn fail()\n\t\t\t\t\tsetTimeout(write.bind(null, copies - 1), pieceDelay)\n\t\t\t\t})\n\t\t\t}\n\t\t\twrite(totalCopies)\n\t\t})\n\t\treturn\n\t}\n\tnext()\n})\n\napp.use(express.static(path.join(__dirname, 'static')))\n\nvar port = parseInt(process.env.AIRTAP_PORT) || 8199\nconsole.log('Test server listening on port', port)\nserver.listen(port)\n"]},"metadata":{},"sourceType":"script"}