{"ast":null,"code":"/**\n * @fileoverview Rule to flag comparisons to null without a type-checking\n * operator.\n * @author Ian Christian Myers\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `null` comparisons without type-checking operators\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-eq-null\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Use '===' to compare with null.\"\n    }\n  },\n\n  create(context) {\n    return {\n      BinaryExpression(node) {\n        const badOperator = node.operator === \"==\" || node.operator === \"!=\";\n\n        if (node.right.type === \"Literal\" && node.right.raw === \"null\" && badOperator || node.left.type === \"Literal\" && node.left.raw === \"null\" && badOperator) {\n          context.report({\n            node,\n            messageId: \"unexpected\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-eq-null.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","BinaryExpression","node","badOperator","operator","right","raw","left","report","messageId"],"mappings":"AAAA;;;;;AAMA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,6DADX;AAEFC,MAAAA,QAAQ,EAAE,gBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,EAVN;AAYFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN;AAZR,GADO;;AAkBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,WAAO;AAEHC,MAAAA,gBAAgB,CAACC,IAAD,EAAO;AACnB,cAAMC,WAAW,GAAGD,IAAI,CAACE,QAAL,KAAkB,IAAlB,IAA0BF,IAAI,CAACE,QAAL,KAAkB,IAAhE;;AAEA,YAAIF,IAAI,CAACG,KAAL,CAAWf,IAAX,KAAoB,SAApB,IAAiCY,IAAI,CAACG,KAAL,CAAWC,GAAX,KAAmB,MAApD,IAA8DH,WAA9D,IACID,IAAI,CAACK,IAAL,CAAUjB,IAAV,KAAmB,SAAnB,IAAgCY,IAAI,CAACK,IAAL,CAAUD,GAAV,KAAkB,MAAlD,IAA4DH,WADpE,EACiF;AAC7EH,UAAAA,OAAO,CAACQ,MAAR,CAAe;AAAEN,YAAAA,IAAF;AAAQO,YAAAA,SAAS,EAAE;AAAnB,WAAf;AACH;AACJ;;AATE,KAAP;AAYH;;AAhCY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to flag comparisons to null without a type-checking\n * operator.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow `null` comparisons without type-checking operators\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-eq-null\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Use '===' to compare with null.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n\n            BinaryExpression(node) {\n                const badOperator = node.operator === \"==\" || node.operator === \"!=\";\n\n                if (node.right.type === \"Literal\" && node.right.raw === \"null\" && badOperator ||\n                        node.left.type === \"Literal\" && node.left.raw === \"null\" && badOperator) {\n                    context.report({ node, messageId: \"unexpected\" });\n                }\n            }\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}