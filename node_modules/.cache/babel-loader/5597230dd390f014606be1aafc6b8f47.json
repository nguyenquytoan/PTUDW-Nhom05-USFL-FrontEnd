{"ast":null,"code":"/**\n * @fileoverview Restrict usage of specified globals.\n * @author Benoît Zugmeyer\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst DEFAULT_MESSAGE_TEMPLATE = \"Unexpected use of '{{name}}'.\",\n      CUSTOM_MESSAGE_TEMPLATE = \"Unexpected use of '{{name}}'. {{customMessage}}\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow specified global variables\",\n      category: \"Variables\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-restricted-globals\"\n    },\n    schema: {\n      type: \"array\",\n      items: {\n        oneOf: [{\n          type: \"string\"\n        }, {\n          type: \"object\",\n          properties: {\n            name: {\n              type: \"string\"\n            },\n            message: {\n              type: \"string\"\n            }\n          },\n          required: [\"name\"],\n          additionalProperties: false\n        }]\n      },\n      uniqueItems: true,\n      minItems: 0\n    }\n  },\n\n  create(context) {\n    // If no globals are restricted, we don't need to do anything\n    if (context.options.length === 0) {\n      return {};\n    }\n\n    const restrictedGlobalMessages = context.options.reduce((memo, option) => {\n      if (typeof option === \"string\") {\n        memo[option] = null;\n      } else {\n        memo[option.name] = option.message;\n      }\n\n      return memo;\n    }, {});\n    /**\n     * Report a variable to be used as a restricted global.\n     * @param {Reference} reference the variable reference\n     * @returns {void}\n     * @private\n     */\n\n    function reportReference(reference) {\n      const name = reference.identifier.name,\n            customMessage = restrictedGlobalMessages[name],\n            message = customMessage ? CUSTOM_MESSAGE_TEMPLATE : DEFAULT_MESSAGE_TEMPLATE;\n      context.report({\n        node: reference.identifier,\n        message,\n        data: {\n          name,\n          customMessage\n        }\n      });\n    }\n    /**\n     * Check if the given name is a restricted global name.\n     * @param {string} name name of a variable\n     * @returns {boolean} whether the variable is a restricted global or not\n     * @private\n     */\n\n\n    function isRestricted(name) {\n      return Object.prototype.hasOwnProperty.call(restrictedGlobalMessages, name);\n    }\n\n    return {\n      Program() {\n        const scope = context.getScope(); // Report variables declared elsewhere (ex: variables defined as \"global\" by eslint)\n\n        scope.variables.forEach(variable => {\n          if (!variable.defs.length && isRestricted(variable.name)) {\n            variable.references.forEach(reportReference);\n          }\n        }); // Report variables not declared at all\n\n        scope.through.forEach(reference => {\n          if (isRestricted(reference.identifier.name)) {\n            reportReference(reference);\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-restricted-globals.js"],"names":["DEFAULT_MESSAGE_TEMPLATE","CUSTOM_MESSAGE_TEMPLATE","module","exports","meta","type","docs","description","category","recommended","url","schema","items","oneOf","properties","name","message","required","additionalProperties","uniqueItems","minItems","create","context","options","length","restrictedGlobalMessages","reduce","memo","option","reportReference","reference","identifier","customMessage","report","node","data","isRestricted","Object","prototype","hasOwnProperty","call","Program","scope","getScope","variables","forEach","variable","defs","references","through"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Restrict usage of specified globals.\n * @author Benoît Zugmeyer\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst DEFAULT_MESSAGE_TEMPLATE = \"Unexpected use of '{{name}}'.\",\n    CUSTOM_MESSAGE_TEMPLATE = \"Unexpected use of '{{name}}'. {{customMessage}}\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow specified global variables\",\n            category: \"Variables\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-restricted-globals\"\n        },\n\n        schema: {\n            type: \"array\",\n            items: {\n                oneOf: [\n                    {\n                        type: \"string\"\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            name: { type: \"string\" },\n                            message: { type: \"string\" }\n                        },\n                        required: [\"name\"],\n                        additionalProperties: false\n                    }\n                ]\n            },\n            uniqueItems: true,\n            minItems: 0\n        }\n    },\n\n    create(context) {\n\n        // If no globals are restricted, we don't need to do anything\n        if (context.options.length === 0) {\n            return {};\n        }\n\n        const restrictedGlobalMessages = context.options.reduce((memo, option) => {\n            if (typeof option === \"string\") {\n                memo[option] = null;\n            } else {\n                memo[option.name] = option.message;\n            }\n\n            return memo;\n        }, {});\n\n        /**\n         * Report a variable to be used as a restricted global.\n         * @param {Reference} reference the variable reference\n         * @returns {void}\n         * @private\n         */\n        function reportReference(reference) {\n            const name = reference.identifier.name,\n                customMessage = restrictedGlobalMessages[name],\n                message = customMessage\n                    ? CUSTOM_MESSAGE_TEMPLATE\n                    : DEFAULT_MESSAGE_TEMPLATE;\n\n            context.report({\n                node: reference.identifier,\n                message,\n                data: {\n                    name,\n                    customMessage\n                }\n            });\n        }\n\n        /**\n         * Check if the given name is a restricted global name.\n         * @param {string} name name of a variable\n         * @returns {boolean} whether the variable is a restricted global or not\n         * @private\n         */\n        function isRestricted(name) {\n            return Object.prototype.hasOwnProperty.call(restrictedGlobalMessages, name);\n        }\n\n        return {\n            Program() {\n                const scope = context.getScope();\n\n                // Report variables declared elsewhere (ex: variables defined as \"global\" by eslint)\n                scope.variables.forEach(variable => {\n                    if (!variable.defs.length && isRestricted(variable.name)) {\n                        variable.references.forEach(reportReference);\n                    }\n                });\n\n                // Report variables not declared at all\n                scope.through.forEach(reference => {\n                    if (isRestricted(reference.identifier.name)) {\n                        reportReference(reference);\n                    }\n                });\n\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}