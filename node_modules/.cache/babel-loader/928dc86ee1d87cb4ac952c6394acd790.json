{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromBinaryExpression;\n/**\n * Extractor function for a BinaryExpression type value node.\n * A binary expression has a left and right side separated by an operator\n * such as `a + b`.\n *\n * @param - value - AST Value object with type `BinaryExpression`\n * @returns - The extracted value converted to correct type.\n */\n\nfunction extractValueFromBinaryExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('./index.js').default;\n\n  var operator = value.operator,\n      left = value.left,\n      right = value.right;\n  var leftVal = getValue(left);\n  var rightVal = getValue(right);\n\n  switch (operator) {\n    case '==':\n      return leftVal == rightVal;\n    // eslint-disable-line\n\n    case '!=':\n      return leftVal != rightVal;\n    // eslint-disable-line\n\n    case '===':\n      return leftVal === rightVal;\n\n    case '!==':\n      return leftVal !== rightVal;\n\n    case '<':\n      return leftVal < rightVal;\n\n    case '<=':\n      return leftVal <= rightVal;\n\n    case '>':\n      return leftVal > rightVal;\n\n    case '>=':\n      return leftVal >= rightVal;\n\n    case '<<':\n      return leftVal << rightVal;\n    // eslint-disable-line no-bitwise\n\n    case '>>':\n      return leftVal >> rightVal;\n    // eslint-disable-line no-bitwise\n\n    case '>>>':\n      return leftVal >>> rightVal;\n    // eslint-disable-line no-bitwise\n\n    case '+':\n      return leftVal + rightVal;\n\n    case '-':\n      return leftVal - rightVal;\n\n    case '*':\n      return leftVal * rightVal;\n\n    case '/':\n      return leftVal / rightVal;\n\n    case '%':\n      return leftVal % rightVal;\n\n    case '|':\n      return leftVal | rightVal;\n    // eslint-disable-line no-bitwise\n\n    case '^':\n      return leftVal ^ rightVal;\n    // eslint-disable-line no-bitwise\n\n    case '&':\n      return leftVal & rightVal;\n    // eslint-disable-line no-bitwise\n\n    case 'in':\n      try {\n        return leftVal in rightVal;\n      } catch (err) {\n        return false;\n      }\n\n    case 'instanceof':\n      if (typeof rightVal !== 'function') {\n        return false;\n      }\n\n      return leftVal instanceof rightVal;\n\n    default:\n      return undefined;\n  }\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/lib/values/expressions/BinaryExpression.js"],"names":["Object","defineProperty","exports","value","default","extractValueFromBinaryExpression","getValue","require","operator","left","right","leftVal","rightVal","err","undefined"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,gCAAlB;AACA;;;;;;;;;AAQA,SAASA,gCAAT,CAA0CF,KAA1C,EAAiD;AAC/C;AACA,MAAIG,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBH,OAArC;;AACA,MAAII,QAAQ,GAAGL,KAAK,CAACK,QAArB;AAAA,MACIC,IAAI,GAAGN,KAAK,CAACM,IADjB;AAAA,MAEIC,KAAK,GAAGP,KAAK,CAACO,KAFlB;AAIA,MAAIC,OAAO,GAAGL,QAAQ,CAACG,IAAD,CAAtB;AACA,MAAIG,QAAQ,GAAGN,QAAQ,CAACI,KAAD,CAAvB;;AAEA,UAAQF,QAAR;AACE,SAAK,IAAL;AACE,aAAOG,OAAO,IAAIC,QAAlB;AAA4B;;AAC9B,SAAK,IAAL;AACE,aAAOD,OAAO,IAAIC,QAAlB;AAA4B;;AAC9B,SAAK,KAAL;AACE,aAAOD,OAAO,KAAKC,QAAnB;;AACF,SAAK,KAAL;AACE,aAAOD,OAAO,KAAKC,QAAnB;;AACF,SAAK,GAAL;AACE,aAAOD,OAAO,GAAGC,QAAjB;;AACF,SAAK,IAAL;AACE,aAAOD,OAAO,IAAIC,QAAlB;;AACF,SAAK,GAAL;AACE,aAAOD,OAAO,GAAGC,QAAjB;;AACF,SAAK,IAAL;AACE,aAAOD,OAAO,IAAIC,QAAlB;;AACF,SAAK,IAAL;AACE,aAAOD,OAAO,IAAIC,QAAlB;AAA4B;;AAC9B,SAAK,IAAL;AACE,aAAOD,OAAO,IAAIC,QAAlB;AAA4B;;AAC9B,SAAK,KAAL;AACE,aAAOD,OAAO,KAAKC,QAAnB;AAA6B;;AAC/B,SAAK,GAAL;AACE,aAAOD,OAAO,GAAGC,QAAjB;;AACF,SAAK,GAAL;AACE,aAAOD,OAAO,GAAGC,QAAjB;;AACF,SAAK,GAAL;AACE,aAAOD,OAAO,GAAGC,QAAjB;;AACF,SAAK,GAAL;AACE,aAAOD,OAAO,GAAGC,QAAjB;;AACF,SAAK,GAAL;AACE,aAAOD,OAAO,GAAGC,QAAjB;;AACF,SAAK,GAAL;AACE,aAAOD,OAAO,GAAGC,QAAjB;AAA2B;;AAC7B,SAAK,GAAL;AACE,aAAOD,OAAO,GAAGC,QAAjB;AAA2B;;AAC7B,SAAK,GAAL;AACE,aAAOD,OAAO,GAAGC,QAAjB;AAA2B;;AAC7B,SAAK,IAAL;AACE,UAAI;AACF,eAAOD,OAAO,IAAIC,QAAlB;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,eAAO,KAAP;AACD;;AACH,SAAK,YAAL;AACE,UAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AAClC,eAAO,KAAP;AACD;;AACD,aAAOD,OAAO,YAAYC,QAA1B;;AACF;AACE,aAAOE,SAAP;AAnDJ;AAqDD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromBinaryExpression;\n/**\n * Extractor function for a BinaryExpression type value node.\n * A binary expression has a left and right side separated by an operator\n * such as `a + b`.\n *\n * @param - value - AST Value object with type `BinaryExpression`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromBinaryExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('./index.js').default;\n  var operator = value.operator,\n      left = value.left,\n      right = value.right;\n\n  var leftVal = getValue(left);\n  var rightVal = getValue(right);\n\n  switch (operator) {\n    case '==':\n      return leftVal == rightVal; // eslint-disable-line\n    case '!=':\n      return leftVal != rightVal; // eslint-disable-line\n    case '===':\n      return leftVal === rightVal;\n    case '!==':\n      return leftVal !== rightVal;\n    case '<':\n      return leftVal < rightVal;\n    case '<=':\n      return leftVal <= rightVal;\n    case '>':\n      return leftVal > rightVal;\n    case '>=':\n      return leftVal >= rightVal;\n    case '<<':\n      return leftVal << rightVal; // eslint-disable-line no-bitwise\n    case '>>':\n      return leftVal >> rightVal; // eslint-disable-line no-bitwise\n    case '>>>':\n      return leftVal >>> rightVal; // eslint-disable-line no-bitwise\n    case '+':\n      return leftVal + rightVal;\n    case '-':\n      return leftVal - rightVal;\n    case '*':\n      return leftVal * rightVal;\n    case '/':\n      return leftVal / rightVal;\n    case '%':\n      return leftVal % rightVal;\n    case '|':\n      return leftVal | rightVal; // eslint-disable-line no-bitwise\n    case '^':\n      return leftVal ^ rightVal; // eslint-disable-line no-bitwise\n    case '&':\n      return leftVal & rightVal; // eslint-disable-line no-bitwise\n    case 'in':\n      try {\n        return leftVal in rightVal;\n      } catch (err) {\n        return false;\n      }\n    case 'instanceof':\n      if (typeof rightVal !== 'function') {\n        return false;\n      }\n      return leftVal instanceof rightVal;\n    default:\n      return undefined;\n  }\n}"]},"metadata":{},"sourceType":"script"}