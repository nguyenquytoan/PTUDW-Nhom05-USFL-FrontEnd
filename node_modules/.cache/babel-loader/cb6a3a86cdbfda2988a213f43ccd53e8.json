{"ast":null,"code":"/**\n * Extractor function for a CallExpression type value node.\n * A call expression looks like `bar()`\n * This will return `bar` as the value to indicate its existence,\n * since we can not execute the function bar in a static environment.\n *\n * @param - value - AST Value object with type `CallExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromCallExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('./index.js').default;\n\n  return getValue(value.callee);\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/src/values/expressions/CallExpression.js"],"names":["extractValueFromCallExpression","value","getValue","require","default","callee"],"mappings":"AAAA;;;;;;;;;AASA,eAAe,SAASA,8BAAT,CAAwCC,KAAxC,EAA+C;AAC5D;AACA,QAAMC,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBC,OAAvC;;AACA,SAAOF,QAAQ,CAACD,KAAK,CAACI,MAAP,CAAf;AACD","sourcesContent":["/**\n * Extractor function for a CallExpression type value node.\n * A call expression looks like `bar()`\n * This will return `bar` as the value to indicate its existence,\n * since we can not execute the function bar in a static environment.\n *\n * @param - value - AST Value object with type `CallExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromCallExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('./index.js').default;\n  return getValue(value.callee);\n}\n"]},"metadata":{},"sourceType":"module"}