{"ast":null,"code":"/**\n * @fileoverview Rule to check for max length on a line.\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nconst OPTIONS_SCHEMA = {\n  type: \"object\",\n  properties: {\n    code: {\n      type: \"integer\",\n      minimum: 0\n    },\n    comments: {\n      type: \"integer\",\n      minimum: 0\n    },\n    tabWidth: {\n      type: \"integer\",\n      minimum: 0\n    },\n    ignorePattern: {\n      type: \"string\"\n    },\n    ignoreComments: {\n      type: \"boolean\"\n    },\n    ignoreStrings: {\n      type: \"boolean\"\n    },\n    ignoreUrls: {\n      type: \"boolean\"\n    },\n    ignoreTemplateLiterals: {\n      type: \"boolean\"\n    },\n    ignoreRegExpLiterals: {\n      type: \"boolean\"\n    },\n    ignoreTrailingComments: {\n      type: \"boolean\"\n    }\n  },\n  additionalProperties: false\n};\nconst OPTIONS_OR_INTEGER_SCHEMA = {\n  anyOf: [OPTIONS_SCHEMA, {\n    type: \"integer\",\n    minimum: 0\n  }]\n}; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce a maximum line length\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-len\"\n    },\n    schema: [OPTIONS_OR_INTEGER_SCHEMA, OPTIONS_OR_INTEGER_SCHEMA, OPTIONS_SCHEMA],\n    messages: {\n      max: \"This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.\",\n      maxComment: \"This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}.\"\n    }\n  },\n\n  create(context) {\n    /*\n     * Inspired by http://tools.ietf.org/html/rfc3986#appendix-B, however:\n     * - They're matching an entire string that we know is a URI\n     * - We're matching part of a string where we think there *might* be a URL\n     * - We're only concerned about URLs, as picking out any URI would cause\n     *   too many false positives\n     * - We don't care about matching the entire URL, any small segment is fine\n     */\n    const URL_REGEXP = /[^:/?#]:\\/\\/[^?#]/u;\n    const sourceCode = context.getSourceCode();\n    /**\n     * Computes the length of a line that may contain tabs. The width of each\n     * tab will be the number of spaces to the next tab stop.\n     * @param {string} line The line.\n     * @param {int} tabWidth The width of each tab stop in spaces.\n     * @returns {int} The computed line length.\n     * @private\n     */\n\n    function computeLineLength(line, tabWidth) {\n      let extraCharacterCount = 0;\n      line.replace(/\\t/gu, (match, offset) => {\n        const totalOffset = offset + extraCharacterCount,\n              previousTabStopOffset = tabWidth ? totalOffset % tabWidth : 0,\n              spaceCount = tabWidth - previousTabStopOffset;\n        extraCharacterCount += spaceCount - 1; // -1 for the replaced tab\n      });\n      return Array.from(line).length + extraCharacterCount;\n    } // The options object must be the last option specified…\n\n\n    const options = Object.assign({}, context.options[context.options.length - 1]); // …but max code length…\n\n    if (typeof context.options[0] === \"number\") {\n      options.code = context.options[0];\n    } // …and tabWidth can be optionally specified directly as integers.\n\n\n    if (typeof context.options[1] === \"number\") {\n      options.tabWidth = context.options[1];\n    }\n\n    const maxLength = typeof options.code === \"number\" ? options.code : 80,\n          tabWidth = typeof options.tabWidth === \"number\" ? options.tabWidth : 4,\n          ignoreComments = !!options.ignoreComments,\n          ignoreStrings = !!options.ignoreStrings,\n          ignoreTemplateLiterals = !!options.ignoreTemplateLiterals,\n          ignoreRegExpLiterals = !!options.ignoreRegExpLiterals,\n          ignoreTrailingComments = !!options.ignoreTrailingComments || !!options.ignoreComments,\n          ignoreUrls = !!options.ignoreUrls,\n          maxCommentLength = options.comments;\n    let ignorePattern = options.ignorePattern || null;\n\n    if (ignorePattern) {\n      ignorePattern = new RegExp(ignorePattern, \"u\");\n    } //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Tells if a given comment is trailing: it starts on the current line and\n     * extends to or past the end of the current line.\n     * @param {string} line The source line we want to check for a trailing comment on\n     * @param {number} lineNumber The one-indexed line number for line\n     * @param {ASTNode} comment The comment to inspect\n     * @returns {boolean} If the comment is trailing on the given line\n     */\n\n\n    function isTrailingComment(line, lineNumber, comment) {\n      return comment && comment.loc.start.line === lineNumber && lineNumber <= comment.loc.end.line && (comment.loc.end.line > lineNumber || comment.loc.end.column === line.length);\n    }\n    /**\n     * Tells if a comment encompasses the entire line.\n     * @param {string} line The source line with a trailing comment\n     * @param {number} lineNumber The one-indexed line number this is on\n     * @param {ASTNode} comment The comment to remove\n     * @returns {boolean} If the comment covers the entire line\n     */\n\n\n    function isFullLineComment(line, lineNumber, comment) {\n      const start = comment.loc.start,\n            end = comment.loc.end,\n            isFirstTokenOnLine = !line.slice(0, comment.loc.start.column).trim();\n      return comment && (start.line < lineNumber || start.line === lineNumber && isFirstTokenOnLine) && (end.line > lineNumber || end.line === lineNumber && end.column === line.length);\n    }\n    /**\n     * Gets the line after the comment and any remaining trailing whitespace is\n     * stripped.\n     * @param {string} line The source line with a trailing comment\n     * @param {ASTNode} comment The comment to remove\n     * @returns {string} Line without comment and trailing whitepace\n     */\n\n\n    function stripTrailingComment(line, comment) {\n      // loc.column is zero-indexed\n      return line.slice(0, comment.loc.start.column).replace(/\\s+$/u, \"\");\n    }\n    /**\n     * Ensure that an array exists at [key] on `object`, and add `value` to it.\n     * @param {Object} object the object to mutate\n     * @param {string} key the object's key\n     * @param {*} value the value to add\n     * @returns {void}\n     * @private\n     */\n\n\n    function ensureArrayAndPush(object, key, value) {\n      if (!Array.isArray(object[key])) {\n        object[key] = [];\n      }\n\n      object[key].push(value);\n    }\n    /**\n     * Retrieves an array containing all strings (\" or ') in the source code.\n     * @returns {ASTNode[]} An array of string nodes.\n     */\n\n\n    function getAllStrings() {\n      return sourceCode.ast.tokens.filter(token => token.type === \"String\" || token.type === \"JSXText\" && sourceCode.getNodeByRangeIndex(token.range[0] - 1).type === \"JSXAttribute\");\n    }\n    /**\n     * Retrieves an array containing all template literals in the source code.\n     * @returns {ASTNode[]} An array of template literal nodes.\n     */\n\n\n    function getAllTemplateLiterals() {\n      return sourceCode.ast.tokens.filter(token => token.type === \"Template\");\n    }\n    /**\n     * Retrieves an array containing all RegExp literals in the source code.\n     * @returns {ASTNode[]} An array of RegExp literal nodes.\n     */\n\n\n    function getAllRegExpLiterals() {\n      return sourceCode.ast.tokens.filter(token => token.type === \"RegularExpression\");\n    }\n    /**\n     * A reducer to group an AST node by line number, both start and end.\n     * @param {Object} acc the accumulator\n     * @param {ASTNode} node the AST node in question\n     * @returns {Object} the modified accumulator\n     * @private\n     */\n\n\n    function groupByLineNumber(acc, node) {\n      for (let i = node.loc.start.line; i <= node.loc.end.line; ++i) {\n        ensureArrayAndPush(acc, i, node);\n      }\n\n      return acc;\n    }\n    /**\n     * Check the program for max length\n     * @param {ASTNode} node Node to examine\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkProgramForMaxLength(node) {\n      // split (honors line-ending)\n      const lines = sourceCode.lines,\n            // list of comments to ignore\n      comments = ignoreComments || maxCommentLength || ignoreTrailingComments ? sourceCode.getAllComments() : []; // we iterate over comments in parallel with the lines\n\n      let commentsIndex = 0;\n      const strings = getAllStrings();\n      const stringsByLine = strings.reduce(groupByLineNumber, {});\n      const templateLiterals = getAllTemplateLiterals();\n      const templateLiteralsByLine = templateLiterals.reduce(groupByLineNumber, {});\n      const regExpLiterals = getAllRegExpLiterals();\n      const regExpLiteralsByLine = regExpLiterals.reduce(groupByLineNumber, {});\n      lines.forEach((line, i) => {\n        // i is zero-indexed, line numbers are one-indexed\n        const lineNumber = i + 1;\n        /*\n         * if we're checking comment length; we need to know whether this\n         * line is a comment\n         */\n\n        let lineIsComment = false;\n        let textToMeasure;\n        /*\n         * We can short-circuit the comment checks if we're already out of\n         * comments to check.\n         */\n\n        if (commentsIndex < comments.length) {\n          let comment = null; // iterate over comments until we find one past the current line\n\n          do {\n            comment = comments[++commentsIndex];\n          } while (comment && comment.loc.start.line <= lineNumber); // and step back by one\n\n\n          comment = comments[--commentsIndex];\n\n          if (isFullLineComment(line, lineNumber, comment)) {\n            lineIsComment = true;\n            textToMeasure = line;\n          } else if (ignoreTrailingComments && isTrailingComment(line, lineNumber, comment)) {\n            textToMeasure = stripTrailingComment(line, comment); // ignore multiple trailing comments in the same line\n\n            let lastIndex = commentsIndex;\n\n            while (isTrailingComment(textToMeasure, lineNumber, comments[--lastIndex])) {\n              textToMeasure = stripTrailingComment(textToMeasure, comments[lastIndex]);\n            }\n          } else {\n            textToMeasure = line;\n          }\n        } else {\n          textToMeasure = line;\n        }\n\n        if (ignorePattern && ignorePattern.test(textToMeasure) || ignoreUrls && URL_REGEXP.test(textToMeasure) || ignoreStrings && stringsByLine[lineNumber] || ignoreTemplateLiterals && templateLiteralsByLine[lineNumber] || ignoreRegExpLiterals && regExpLiteralsByLine[lineNumber]) {\n          // ignore this line\n          return;\n        }\n\n        const lineLength = computeLineLength(textToMeasure, tabWidth);\n        const commentLengthApplies = lineIsComment && maxCommentLength;\n\n        if (lineIsComment && ignoreComments) {\n          return;\n        }\n\n        if (commentLengthApplies) {\n          if (lineLength > maxCommentLength) {\n            context.report({\n              node,\n              loc: {\n                line: lineNumber,\n                column: 0\n              },\n              messageId: \"maxComment\",\n              data: {\n                lineLength,\n                maxCommentLength\n              }\n            });\n          }\n        } else if (lineLength > maxLength) {\n          context.report({\n            node,\n            loc: {\n              line: lineNumber,\n              column: 0\n            },\n            messageId: \"max\",\n            data: {\n              lineLength,\n              maxLength\n            }\n          });\n        }\n      });\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      Program: checkProgramForMaxLength\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/max-len.js"],"names":["OPTIONS_SCHEMA","type","properties","code","minimum","comments","tabWidth","ignorePattern","ignoreComments","ignoreStrings","ignoreUrls","ignoreTemplateLiterals","ignoreRegExpLiterals","ignoreTrailingComments","additionalProperties","OPTIONS_OR_INTEGER_SCHEMA","anyOf","module","exports","meta","docs","description","category","recommended","url","schema","messages","max","maxComment","create","context","URL_REGEXP","sourceCode","getSourceCode","computeLineLength","line","extraCharacterCount","replace","match","offset","totalOffset","previousTabStopOffset","spaceCount","Array","from","length","options","Object","assign","maxLength","maxCommentLength","RegExp","isTrailingComment","lineNumber","comment","loc","start","end","column","isFullLineComment","isFirstTokenOnLine","slice","trim","stripTrailingComment","ensureArrayAndPush","object","key","value","isArray","push","getAllStrings","ast","tokens","filter","token","getNodeByRangeIndex","range","getAllTemplateLiterals","getAllRegExpLiterals","groupByLineNumber","acc","node","i","checkProgramForMaxLength","lines","getAllComments","commentsIndex","strings","stringsByLine","reduce","templateLiterals","templateLiteralsByLine","regExpLiterals","regExpLiteralsByLine","forEach","lineIsComment","textToMeasure","lastIndex","test","lineLength","commentLengthApplies","report","messageId","data","Program"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEA,MAAMA,cAAc,GAAG;AACnBC,EAAAA,IAAI,EAAE,QADa;AAEnBC,EAAAA,UAAU,EAAE;AACRC,IAAAA,IAAI,EAAE;AACFF,MAAAA,IAAI,EAAE,SADJ;AAEFG,MAAAA,OAAO,EAAE;AAFP,KADE;AAKRC,IAAAA,QAAQ,EAAE;AACNJ,MAAAA,IAAI,EAAE,SADA;AAENG,MAAAA,OAAO,EAAE;AAFH,KALF;AASRE,IAAAA,QAAQ,EAAE;AACNL,MAAAA,IAAI,EAAE,SADA;AAENG,MAAAA,OAAO,EAAE;AAFH,KATF;AAaRG,IAAAA,aAAa,EAAE;AACXN,MAAAA,IAAI,EAAE;AADK,KAbP;AAgBRO,IAAAA,cAAc,EAAE;AACZP,MAAAA,IAAI,EAAE;AADM,KAhBR;AAmBRQ,IAAAA,aAAa,EAAE;AACXR,MAAAA,IAAI,EAAE;AADK,KAnBP;AAsBRS,IAAAA,UAAU,EAAE;AACRT,MAAAA,IAAI,EAAE;AADE,KAtBJ;AAyBRU,IAAAA,sBAAsB,EAAE;AACpBV,MAAAA,IAAI,EAAE;AADc,KAzBhB;AA4BRW,IAAAA,oBAAoB,EAAE;AAClBX,MAAAA,IAAI,EAAE;AADY,KA5Bd;AA+BRY,IAAAA,sBAAsB,EAAE;AACpBZ,MAAAA,IAAI,EAAE;AADc;AA/BhB,GAFO;AAqCnBa,EAAAA,oBAAoB,EAAE;AArCH,CAAvB;AAwCA,MAAMC,yBAAyB,GAAG;AAC9BC,EAAAA,KAAK,EAAE,CACHhB,cADG,EAEH;AACIC,IAAAA,IAAI,EAAE,SADV;AAEIG,IAAAA,OAAO,EAAE;AAFb,GAFG;AADuB,CAAlC,C,CAUA;AACA;AACA;;AAEAa,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFlB,IAAAA,IAAI,EAAE,QADJ;AAGFmB,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,+BADX;AAEFC,MAAAA,QAAQ,EAAE,kBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,CACJV,yBADI,EAEJA,yBAFI,EAGJf,cAHI,CAVN;AAeF0B,IAAAA,QAAQ,EAAE;AACNC,MAAAA,GAAG,EAAE,6EADC;AAENC,MAAAA,UAAU,EAAE;AAFN;AAfR,GADO;;AAsBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;;;;;;;;AAQA,UAAMC,UAAU,GAAG,oBAAnB;AAEA,UAAMC,UAAU,GAAGF,OAAO,CAACG,aAAR,EAAnB;AAEA;;;;;;;;;AAQA,aAASC,iBAAT,CAA2BC,IAA3B,EAAiC7B,QAAjC,EAA2C;AACvC,UAAI8B,mBAAmB,GAAG,CAA1B;AAEAD,MAAAA,IAAI,CAACE,OAAL,CAAa,MAAb,EAAqB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,cAAMC,WAAW,GAAGD,MAAM,GAAGH,mBAA7B;AAAA,cACIK,qBAAqB,GAAGnC,QAAQ,GAAGkC,WAAW,GAAGlC,QAAjB,GAA4B,CADhE;AAAA,cAEIoC,UAAU,GAAGpC,QAAQ,GAAGmC,qBAF5B;AAIAL,QAAAA,mBAAmB,IAAIM,UAAU,GAAG,CAApC,CALoC,CAKG;AAC1C,OAND;AAOA,aAAOC,KAAK,CAACC,IAAN,CAAWT,IAAX,EAAiBU,MAAjB,GAA0BT,mBAAjC;AACH,KAjCW,CAmCZ;;;AACA,UAAMU,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBlB,OAAO,CAACgB,OAAR,CAAgBhB,OAAO,CAACgB,OAAR,CAAgBD,MAAhB,GAAyB,CAAzC,CAAlB,CAAhB,CApCY,CAsCZ;;AACA,QAAI,OAAOf,OAAO,CAACgB,OAAR,CAAgB,CAAhB,CAAP,KAA8B,QAAlC,EAA4C;AACxCA,MAAAA,OAAO,CAAC3C,IAAR,GAAe2B,OAAO,CAACgB,OAAR,CAAgB,CAAhB,CAAf;AACH,KAzCW,CA2CZ;;;AACA,QAAI,OAAOhB,OAAO,CAACgB,OAAR,CAAgB,CAAhB,CAAP,KAA8B,QAAlC,EAA4C;AACxCA,MAAAA,OAAO,CAACxC,QAAR,GAAmBwB,OAAO,CAACgB,OAAR,CAAgB,CAAhB,CAAnB;AACH;;AAED,UAAMG,SAAS,GAAG,OAAOH,OAAO,CAAC3C,IAAf,KAAwB,QAAxB,GAAmC2C,OAAO,CAAC3C,IAA3C,GAAkD,EAApE;AAAA,UACIG,QAAQ,GAAG,OAAOwC,OAAO,CAACxC,QAAf,KAA4B,QAA5B,GAAuCwC,OAAO,CAACxC,QAA/C,GAA0D,CADzE;AAAA,UAEIE,cAAc,GAAG,CAAC,CAACsC,OAAO,CAACtC,cAF/B;AAAA,UAGIC,aAAa,GAAG,CAAC,CAACqC,OAAO,CAACrC,aAH9B;AAAA,UAIIE,sBAAsB,GAAG,CAAC,CAACmC,OAAO,CAACnC,sBAJvC;AAAA,UAKIC,oBAAoB,GAAG,CAAC,CAACkC,OAAO,CAAClC,oBALrC;AAAA,UAMIC,sBAAsB,GAAG,CAAC,CAACiC,OAAO,CAACjC,sBAAV,IAAoC,CAAC,CAACiC,OAAO,CAACtC,cAN3E;AAAA,UAOIE,UAAU,GAAG,CAAC,CAACoC,OAAO,CAACpC,UAP3B;AAAA,UAQIwC,gBAAgB,GAAGJ,OAAO,CAACzC,QAR/B;AASA,QAAIE,aAAa,GAAGuC,OAAO,CAACvC,aAAR,IAAyB,IAA7C;;AAEA,QAAIA,aAAJ,EAAmB;AACfA,MAAAA,aAAa,GAAG,IAAI4C,MAAJ,CAAW5C,aAAX,EAA0B,GAA1B,CAAhB;AACH,KA7DW,CA+DZ;AACA;AACA;;AAEA;;;;;;;;;;AAQA,aAAS6C,iBAAT,CAA2BjB,IAA3B,EAAiCkB,UAAjC,EAA6CC,OAA7C,EAAsD;AAClD,aAAOA,OAAO,IACTA,OAAO,CAACC,GAAR,CAAYC,KAAZ,CAAkBrB,IAAlB,KAA2BkB,UAA3B,IAAyCA,UAAU,IAAIC,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAAgBtB,IADrE,KAEFmB,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAAgBtB,IAAhB,GAAuBkB,UAAvB,IAAqCC,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAAgBC,MAAhB,KAA2BvB,IAAI,CAACU,MAFnE,CAAP;AAGH;AAED;;;;;;;;;AAOA,aAASc,iBAAT,CAA2BxB,IAA3B,EAAiCkB,UAAjC,EAA6CC,OAA7C,EAAsD;AAClD,YAAME,KAAK,GAAGF,OAAO,CAACC,GAAR,CAAYC,KAA1B;AAAA,YACIC,GAAG,GAAGH,OAAO,CAACC,GAAR,CAAYE,GADtB;AAAA,YAEIG,kBAAkB,GAAG,CAACzB,IAAI,CAAC0B,KAAL,CAAW,CAAX,EAAcP,OAAO,CAACC,GAAR,CAAYC,KAAZ,CAAkBE,MAAhC,EAAwCI,IAAxC,EAF1B;AAIA,aAAOR,OAAO,KACTE,KAAK,CAACrB,IAAN,GAAakB,UAAb,IAA4BG,KAAK,CAACrB,IAAN,KAAekB,UAAf,IAA6BO,kBADhD,CAAP,KAEFH,GAAG,CAACtB,IAAJ,GAAWkB,UAAX,IAA0BI,GAAG,CAACtB,IAAJ,KAAakB,UAAb,IAA2BI,GAAG,CAACC,MAAJ,KAAevB,IAAI,CAACU,MAFvE,CAAP;AAGH;AAED;;;;;;;;;AAOA,aAASkB,oBAAT,CAA8B5B,IAA9B,EAAoCmB,OAApC,EAA6C;AAEzC;AACA,aAAOnB,IAAI,CAAC0B,KAAL,CAAW,CAAX,EAAcP,OAAO,CAACC,GAAR,CAAYC,KAAZ,CAAkBE,MAAhC,EAAwCrB,OAAxC,CAAgD,OAAhD,EAAyD,EAAzD,CAAP;AACH;AAED;;;;;;;;;;AAQA,aAAS2B,kBAAT,CAA4BC,MAA5B,EAAoCC,GAApC,EAAyCC,KAAzC,EAAgD;AAC5C,UAAI,CAACxB,KAAK,CAACyB,OAAN,CAAcH,MAAM,CAACC,GAAD,CAApB,CAAL,EAAiC;AAC7BD,QAAAA,MAAM,CAACC,GAAD,CAAN,GAAc,EAAd;AACH;;AACDD,MAAAA,MAAM,CAACC,GAAD,CAAN,CAAYG,IAAZ,CAAiBF,KAAjB;AACH;AAED;;;;;;AAIA,aAASG,aAAT,GAAyB;AACrB,aAAOtC,UAAU,CAACuC,GAAX,CAAeC,MAAf,CAAsBC,MAAtB,CAA6BC,KAAK,IAAKA,KAAK,CAACzE,IAAN,KAAe,QAAf,IACzCyE,KAAK,CAACzE,IAAN,KAAe,SAAf,IAA4B+B,UAAU,CAAC2C,mBAAX,CAA+BD,KAAK,CAACE,KAAN,CAAY,CAAZ,IAAiB,CAAhD,EAAmD3E,IAAnD,KAA4D,cADtF,CAAP;AAEH;AAED;;;;;;AAIA,aAAS4E,sBAAT,GAAkC;AAC9B,aAAO7C,UAAU,CAACuC,GAAX,CAAeC,MAAf,CAAsBC,MAAtB,CAA6BC,KAAK,IAAIA,KAAK,CAACzE,IAAN,KAAe,UAArD,CAAP;AACH;AAGD;;;;;;AAIA,aAAS6E,oBAAT,GAAgC;AAC5B,aAAO9C,UAAU,CAACuC,GAAX,CAAeC,MAAf,CAAsBC,MAAtB,CAA6BC,KAAK,IAAIA,KAAK,CAACzE,IAAN,KAAe,mBAArD,CAAP;AACH;AAGD;;;;;;;;;AAOA,aAAS8E,iBAAT,CAA2BC,GAA3B,EAAgCC,IAAhC,EAAsC;AAClC,WAAK,IAAIC,CAAC,GAAGD,IAAI,CAAC1B,GAAL,CAASC,KAAT,CAAerB,IAA5B,EAAkC+C,CAAC,IAAID,IAAI,CAAC1B,GAAL,CAASE,GAAT,CAAatB,IAApD,EAA0D,EAAE+C,CAA5D,EAA+D;AAC3DlB,QAAAA,kBAAkB,CAACgB,GAAD,EAAME,CAAN,EAASD,IAAT,CAAlB;AACH;;AACD,aAAOD,GAAP;AACH;AAED;;;;;;;;AAMA,aAASG,wBAAT,CAAkCF,IAAlC,EAAwC;AAEpC;AACA,YAAMG,KAAK,GAAGpD,UAAU,CAACoD,KAAzB;AAAA,YAEI;AACA/E,MAAAA,QAAQ,GAAGG,cAAc,IAAI0C,gBAAlB,IAAsCrC,sBAAtC,GAA+DmB,UAAU,CAACqD,cAAX,EAA/D,GAA6F,EAH5G,CAHoC,CAQpC;;AACA,UAAIC,aAAa,GAAG,CAApB;AAEA,YAAMC,OAAO,GAAGjB,aAAa,EAA7B;AACA,YAAMkB,aAAa,GAAGD,OAAO,CAACE,MAAR,CAAeV,iBAAf,EAAkC,EAAlC,CAAtB;AAEA,YAAMW,gBAAgB,GAAGb,sBAAsB,EAA/C;AACA,YAAMc,sBAAsB,GAAGD,gBAAgB,CAACD,MAAjB,CAAwBV,iBAAxB,EAA2C,EAA3C,CAA/B;AAEA,YAAMa,cAAc,GAAGd,oBAAoB,EAA3C;AACA,YAAMe,oBAAoB,GAAGD,cAAc,CAACH,MAAf,CAAsBV,iBAAtB,EAAyC,EAAzC,CAA7B;AAEAK,MAAAA,KAAK,CAACU,OAAN,CAAc,CAAC3D,IAAD,EAAO+C,CAAP,KAAa;AAEvB;AACA,cAAM7B,UAAU,GAAG6B,CAAC,GAAG,CAAvB;AAEA;;;;;AAIA,YAAIa,aAAa,GAAG,KAApB;AACA,YAAIC,aAAJ;AAEA;;;;;AAIA,YAAIV,aAAa,GAAGjF,QAAQ,CAACwC,MAA7B,EAAqC;AACjC,cAAIS,OAAO,GAAG,IAAd,CADiC,CAGjC;;AACA,aAAG;AACCA,YAAAA,OAAO,GAAGjD,QAAQ,CAAC,EAAEiF,aAAH,CAAlB;AACH,WAFD,QAEShC,OAAO,IAAIA,OAAO,CAACC,GAAR,CAAYC,KAAZ,CAAkBrB,IAAlB,IAA0BkB,UAF9C,EAJiC,CAQjC;;;AACAC,UAAAA,OAAO,GAAGjD,QAAQ,CAAC,EAAEiF,aAAH,CAAlB;;AAEA,cAAI3B,iBAAiB,CAACxB,IAAD,EAAOkB,UAAP,EAAmBC,OAAnB,CAArB,EAAkD;AAC9CyC,YAAAA,aAAa,GAAG,IAAhB;AACAC,YAAAA,aAAa,GAAG7D,IAAhB;AACH,WAHD,MAGO,IAAItB,sBAAsB,IAAIuC,iBAAiB,CAACjB,IAAD,EAAOkB,UAAP,EAAmBC,OAAnB,CAA/C,EAA4E;AAC/E0C,YAAAA,aAAa,GAAGjC,oBAAoB,CAAC5B,IAAD,EAAOmB,OAAP,CAApC,CAD+E,CAG/E;;AACA,gBAAI2C,SAAS,GAAGX,aAAhB;;AAEA,mBAAOlC,iBAAiB,CAAC4C,aAAD,EAAgB3C,UAAhB,EAA4BhD,QAAQ,CAAC,EAAE4F,SAAH,CAApC,CAAxB,EAA4E;AACxED,cAAAA,aAAa,GAAGjC,oBAAoB,CAACiC,aAAD,EAAgB3F,QAAQ,CAAC4F,SAAD,CAAxB,CAApC;AACH;AACJ,WATM,MASA;AACHD,YAAAA,aAAa,GAAG7D,IAAhB;AACH;AACJ,SA1BD,MA0BO;AACH6D,UAAAA,aAAa,GAAG7D,IAAhB;AACH;;AACD,YAAI5B,aAAa,IAAIA,aAAa,CAAC2F,IAAd,CAAmBF,aAAnB,CAAjB,IACAtF,UAAU,IAAIqB,UAAU,CAACmE,IAAX,CAAgBF,aAAhB,CADd,IAEAvF,aAAa,IAAI+E,aAAa,CAACnC,UAAD,CAF9B,IAGA1C,sBAAsB,IAAIgF,sBAAsB,CAACtC,UAAD,CAHhD,IAIAzC,oBAAoB,IAAIiF,oBAAoB,CAACxC,UAAD,CAJhD,EAKE;AAEE;AACA;AACH;;AAED,cAAM8C,UAAU,GAAGjE,iBAAiB,CAAC8D,aAAD,EAAgB1F,QAAhB,CAApC;AACA,cAAM8F,oBAAoB,GAAGL,aAAa,IAAI7C,gBAA9C;;AAEA,YAAI6C,aAAa,IAAIvF,cAArB,EAAqC;AACjC;AACH;;AAED,YAAI4F,oBAAJ,EAA0B;AACtB,cAAID,UAAU,GAAGjD,gBAAjB,EAAmC;AAC/BpB,YAAAA,OAAO,CAACuE,MAAR,CAAe;AACXpB,cAAAA,IADW;AAEX1B,cAAAA,GAAG,EAAE;AAAEpB,gBAAAA,IAAI,EAAEkB,UAAR;AAAoBK,gBAAAA,MAAM,EAAE;AAA5B,eAFM;AAGX4C,cAAAA,SAAS,EAAE,YAHA;AAIXC,cAAAA,IAAI,EAAE;AACFJ,gBAAAA,UADE;AAEFjD,gBAAAA;AAFE;AAJK,aAAf;AASH;AACJ,SAZD,MAYO,IAAIiD,UAAU,GAAGlD,SAAjB,EAA4B;AAC/BnB,UAAAA,OAAO,CAACuE,MAAR,CAAe;AACXpB,YAAAA,IADW;AAEX1B,YAAAA,GAAG,EAAE;AAAEpB,cAAAA,IAAI,EAAEkB,UAAR;AAAoBK,cAAAA,MAAM,EAAE;AAA5B,aAFM;AAGX4C,YAAAA,SAAS,EAAE,KAHA;AAIXC,YAAAA,IAAI,EAAE;AACFJ,cAAAA,UADE;AAEFlD,cAAAA;AAFE;AAJK,WAAf;AASH;AACJ,OAtFD;AAuFH,KAxRW,CA2RZ;AACA;AACA;;;AAEA,WAAO;AACHuD,MAAAA,OAAO,EAAErB;AADN,KAAP;AAIH;;AAzTY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to check for max length on a line.\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nconst OPTIONS_SCHEMA = {\n    type: \"object\",\n    properties: {\n        code: {\n            type: \"integer\",\n            minimum: 0\n        },\n        comments: {\n            type: \"integer\",\n            minimum: 0\n        },\n        tabWidth: {\n            type: \"integer\",\n            minimum: 0\n        },\n        ignorePattern: {\n            type: \"string\"\n        },\n        ignoreComments: {\n            type: \"boolean\"\n        },\n        ignoreStrings: {\n            type: \"boolean\"\n        },\n        ignoreUrls: {\n            type: \"boolean\"\n        },\n        ignoreTemplateLiterals: {\n            type: \"boolean\"\n        },\n        ignoreRegExpLiterals: {\n            type: \"boolean\"\n        },\n        ignoreTrailingComments: {\n            type: \"boolean\"\n        }\n    },\n    additionalProperties: false\n};\n\nconst OPTIONS_OR_INTEGER_SCHEMA = {\n    anyOf: [\n        OPTIONS_SCHEMA,\n        {\n            type: \"integer\",\n            minimum: 0\n        }\n    ]\n};\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce a maximum line length\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/max-len\"\n        },\n\n        schema: [\n            OPTIONS_OR_INTEGER_SCHEMA,\n            OPTIONS_OR_INTEGER_SCHEMA,\n            OPTIONS_SCHEMA\n        ],\n        messages: {\n            max: \"This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.\",\n            maxComment: \"This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}.\"\n        }\n    },\n\n    create(context) {\n\n        /*\n         * Inspired by http://tools.ietf.org/html/rfc3986#appendix-B, however:\n         * - They're matching an entire string that we know is a URI\n         * - We're matching part of a string where we think there *might* be a URL\n         * - We're only concerned about URLs, as picking out any URI would cause\n         *   too many false positives\n         * - We don't care about matching the entire URL, any small segment is fine\n         */\n        const URL_REGEXP = /[^:/?#]:\\/\\/[^?#]/u;\n\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Computes the length of a line that may contain tabs. The width of each\n         * tab will be the number of spaces to the next tab stop.\n         * @param {string} line The line.\n         * @param {int} tabWidth The width of each tab stop in spaces.\n         * @returns {int} The computed line length.\n         * @private\n         */\n        function computeLineLength(line, tabWidth) {\n            let extraCharacterCount = 0;\n\n            line.replace(/\\t/gu, (match, offset) => {\n                const totalOffset = offset + extraCharacterCount,\n                    previousTabStopOffset = tabWidth ? totalOffset % tabWidth : 0,\n                    spaceCount = tabWidth - previousTabStopOffset;\n\n                extraCharacterCount += spaceCount - 1; // -1 for the replaced tab\n            });\n            return Array.from(line).length + extraCharacterCount;\n        }\n\n        // The options object must be the last option specified…\n        const options = Object.assign({}, context.options[context.options.length - 1]);\n\n        // …but max code length…\n        if (typeof context.options[0] === \"number\") {\n            options.code = context.options[0];\n        }\n\n        // …and tabWidth can be optionally specified directly as integers.\n        if (typeof context.options[1] === \"number\") {\n            options.tabWidth = context.options[1];\n        }\n\n        const maxLength = typeof options.code === \"number\" ? options.code : 80,\n            tabWidth = typeof options.tabWidth === \"number\" ? options.tabWidth : 4,\n            ignoreComments = !!options.ignoreComments,\n            ignoreStrings = !!options.ignoreStrings,\n            ignoreTemplateLiterals = !!options.ignoreTemplateLiterals,\n            ignoreRegExpLiterals = !!options.ignoreRegExpLiterals,\n            ignoreTrailingComments = !!options.ignoreTrailingComments || !!options.ignoreComments,\n            ignoreUrls = !!options.ignoreUrls,\n            maxCommentLength = options.comments;\n        let ignorePattern = options.ignorePattern || null;\n\n        if (ignorePattern) {\n            ignorePattern = new RegExp(ignorePattern, \"u\");\n        }\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Tells if a given comment is trailing: it starts on the current line and\n         * extends to or past the end of the current line.\n         * @param {string} line The source line we want to check for a trailing comment on\n         * @param {number} lineNumber The one-indexed line number for line\n         * @param {ASTNode} comment The comment to inspect\n         * @returns {boolean} If the comment is trailing on the given line\n         */\n        function isTrailingComment(line, lineNumber, comment) {\n            return comment &&\n                (comment.loc.start.line === lineNumber && lineNumber <= comment.loc.end.line) &&\n                (comment.loc.end.line > lineNumber || comment.loc.end.column === line.length);\n        }\n\n        /**\n         * Tells if a comment encompasses the entire line.\n         * @param {string} line The source line with a trailing comment\n         * @param {number} lineNumber The one-indexed line number this is on\n         * @param {ASTNode} comment The comment to remove\n         * @returns {boolean} If the comment covers the entire line\n         */\n        function isFullLineComment(line, lineNumber, comment) {\n            const start = comment.loc.start,\n                end = comment.loc.end,\n                isFirstTokenOnLine = !line.slice(0, comment.loc.start.column).trim();\n\n            return comment &&\n                (start.line < lineNumber || (start.line === lineNumber && isFirstTokenOnLine)) &&\n                (end.line > lineNumber || (end.line === lineNumber && end.column === line.length));\n        }\n\n        /**\n         * Gets the line after the comment and any remaining trailing whitespace is\n         * stripped.\n         * @param {string} line The source line with a trailing comment\n         * @param {ASTNode} comment The comment to remove\n         * @returns {string} Line without comment and trailing whitepace\n         */\n        function stripTrailingComment(line, comment) {\n\n            // loc.column is zero-indexed\n            return line.slice(0, comment.loc.start.column).replace(/\\s+$/u, \"\");\n        }\n\n        /**\n         * Ensure that an array exists at [key] on `object`, and add `value` to it.\n         * @param {Object} object the object to mutate\n         * @param {string} key the object's key\n         * @param {*} value the value to add\n         * @returns {void}\n         * @private\n         */\n        function ensureArrayAndPush(object, key, value) {\n            if (!Array.isArray(object[key])) {\n                object[key] = [];\n            }\n            object[key].push(value);\n        }\n\n        /**\n         * Retrieves an array containing all strings (\" or ') in the source code.\n         * @returns {ASTNode[]} An array of string nodes.\n         */\n        function getAllStrings() {\n            return sourceCode.ast.tokens.filter(token => (token.type === \"String\" ||\n                (token.type === \"JSXText\" && sourceCode.getNodeByRangeIndex(token.range[0] - 1).type === \"JSXAttribute\")));\n        }\n\n        /**\n         * Retrieves an array containing all template literals in the source code.\n         * @returns {ASTNode[]} An array of template literal nodes.\n         */\n        function getAllTemplateLiterals() {\n            return sourceCode.ast.tokens.filter(token => token.type === \"Template\");\n        }\n\n\n        /**\n         * Retrieves an array containing all RegExp literals in the source code.\n         * @returns {ASTNode[]} An array of RegExp literal nodes.\n         */\n        function getAllRegExpLiterals() {\n            return sourceCode.ast.tokens.filter(token => token.type === \"RegularExpression\");\n        }\n\n\n        /**\n         * A reducer to group an AST node by line number, both start and end.\n         * @param {Object} acc the accumulator\n         * @param {ASTNode} node the AST node in question\n         * @returns {Object} the modified accumulator\n         * @private\n         */\n        function groupByLineNumber(acc, node) {\n            for (let i = node.loc.start.line; i <= node.loc.end.line; ++i) {\n                ensureArrayAndPush(acc, i, node);\n            }\n            return acc;\n        }\n\n        /**\n         * Check the program for max length\n         * @param {ASTNode} node Node to examine\n         * @returns {void}\n         * @private\n         */\n        function checkProgramForMaxLength(node) {\n\n            // split (honors line-ending)\n            const lines = sourceCode.lines,\n\n                // list of comments to ignore\n                comments = ignoreComments || maxCommentLength || ignoreTrailingComments ? sourceCode.getAllComments() : [];\n\n            // we iterate over comments in parallel with the lines\n            let commentsIndex = 0;\n\n            const strings = getAllStrings();\n            const stringsByLine = strings.reduce(groupByLineNumber, {});\n\n            const templateLiterals = getAllTemplateLiterals();\n            const templateLiteralsByLine = templateLiterals.reduce(groupByLineNumber, {});\n\n            const regExpLiterals = getAllRegExpLiterals();\n            const regExpLiteralsByLine = regExpLiterals.reduce(groupByLineNumber, {});\n\n            lines.forEach((line, i) => {\n\n                // i is zero-indexed, line numbers are one-indexed\n                const lineNumber = i + 1;\n\n                /*\n                 * if we're checking comment length; we need to know whether this\n                 * line is a comment\n                 */\n                let lineIsComment = false;\n                let textToMeasure;\n\n                /*\n                 * We can short-circuit the comment checks if we're already out of\n                 * comments to check.\n                 */\n                if (commentsIndex < comments.length) {\n                    let comment = null;\n\n                    // iterate over comments until we find one past the current line\n                    do {\n                        comment = comments[++commentsIndex];\n                    } while (comment && comment.loc.start.line <= lineNumber);\n\n                    // and step back by one\n                    comment = comments[--commentsIndex];\n\n                    if (isFullLineComment(line, lineNumber, comment)) {\n                        lineIsComment = true;\n                        textToMeasure = line;\n                    } else if (ignoreTrailingComments && isTrailingComment(line, lineNumber, comment)) {\n                        textToMeasure = stripTrailingComment(line, comment);\n\n                        // ignore multiple trailing comments in the same line\n                        let lastIndex = commentsIndex;\n\n                        while (isTrailingComment(textToMeasure, lineNumber, comments[--lastIndex])) {\n                            textToMeasure = stripTrailingComment(textToMeasure, comments[lastIndex]);\n                        }\n                    } else {\n                        textToMeasure = line;\n                    }\n                } else {\n                    textToMeasure = line;\n                }\n                if (ignorePattern && ignorePattern.test(textToMeasure) ||\n                    ignoreUrls && URL_REGEXP.test(textToMeasure) ||\n                    ignoreStrings && stringsByLine[lineNumber] ||\n                    ignoreTemplateLiterals && templateLiteralsByLine[lineNumber] ||\n                    ignoreRegExpLiterals && regExpLiteralsByLine[lineNumber]\n                ) {\n\n                    // ignore this line\n                    return;\n                }\n\n                const lineLength = computeLineLength(textToMeasure, tabWidth);\n                const commentLengthApplies = lineIsComment && maxCommentLength;\n\n                if (lineIsComment && ignoreComments) {\n                    return;\n                }\n\n                if (commentLengthApplies) {\n                    if (lineLength > maxCommentLength) {\n                        context.report({\n                            node,\n                            loc: { line: lineNumber, column: 0 },\n                            messageId: \"maxComment\",\n                            data: {\n                                lineLength,\n                                maxCommentLength\n                            }\n                        });\n                    }\n                } else if (lineLength > maxLength) {\n                    context.report({\n                        node,\n                        loc: { line: lineNumber, column: 0 },\n                        messageId: \"max\",\n                        data: {\n                            lineLength,\n                            maxLength\n                        }\n                    });\n                }\n            });\n        }\n\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            Program: checkProgramForMaxLength\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}