{"ast":null,"code":"/**\n * Extractor function for a UnaryExpression type value node.\n * A unary expression is an expression with a unary operator.\n * For example, !\"foobar\" will evaluate to false, so this will return false.\n *\n * @param - value - AST Value object with type `UnaryExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromUnaryExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('./index.js').default;\n\n  const {\n    operator,\n    argument\n  } = value;\n\n  switch (operator) {\n    case '-':\n      return -getValue(argument);\n\n    case '+':\n      return +getValue(argument);\n    // eslint-disable-line no-implicit-coercion\n\n    case '!':\n      return !getValue(argument);\n\n    case '~':\n      return ~getValue(argument);\n    // eslint-disable-line no-bitwise\n\n    case 'delete':\n      // I believe delete statements evaluate to true.\n      return true;\n\n    case 'typeof':\n    case 'void':\n    default:\n      return undefined;\n  }\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/src/values/expressions/UnaryExpression.js"],"names":["extractValueFromUnaryExpression","value","getValue","require","default","operator","argument","undefined"],"mappings":"AAAA;;;;;;;;AAQA,eAAe,SAASA,+BAAT,CAAyCC,KAAzC,EAAgD;AAC7D;AACA,QAAMC,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBC,OAAvC;;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBL,KAA/B;;AAEA,UAAQI,QAAR;AACE,SAAK,GAAL;AACE,aAAO,CAACH,QAAQ,CAACI,QAAD,CAAhB;;AACF,SAAK,GAAL;AACE,aAAO,CAACJ,QAAQ,CAACI,QAAD,CAAhB;AAA4B;;AAC9B,SAAK,GAAL;AACE,aAAO,CAACJ,QAAQ,CAACI,QAAD,CAAhB;;AACF,SAAK,GAAL;AACE,aAAO,CAACJ,QAAQ,CAACI,QAAD,CAAhB;AAA4B;;AAC9B,SAAK,QAAL;AACE;AACA,aAAO,IAAP;;AACF,SAAK,QAAL;AACA,SAAK,MAAL;AACA;AACE,aAAOC,SAAP;AAfJ;AAiBD","sourcesContent":["/**\n * Extractor function for a UnaryExpression type value node.\n * A unary expression is an expression with a unary operator.\n * For example, !\"foobar\" will evaluate to false, so this will return false.\n *\n * @param - value - AST Value object with type `UnaryExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromUnaryExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('./index.js').default;\n  const { operator, argument } = value;\n\n  switch (operator) {\n    case '-':\n      return -getValue(argument);\n    case '+':\n      return +getValue(argument); // eslint-disable-line no-implicit-coercion\n    case '!':\n      return !getValue(argument);\n    case '~':\n      return ~getValue(argument); // eslint-disable-line no-bitwise\n    case 'delete':\n      // I believe delete statements evaluate to true.\n      return true;\n    case 'typeof':\n    case 'void':\n    default:\n      return undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}