{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * Creates new custom importers that use the given `resourcePath` if libsass calls the custom importer with `prev`\n * being 'stdin'.\n *\n * Why do we need this? We have to use the `data` option of node-sass in order to compile our sass because\n * the `resourcePath` might not be an actual file on disk. When using the `data` option, libsass uses the string\n * 'stdin' instead of a filename.\n *\n * We have to fix this behavior in order to provide a consistent experience to the webpack user.\n *\n * @param {Function|Array<Function>} importer\n * @param {string} resourcePath\n * @returns {Array<Function>}\n */\n\nfunction proxyCustomImporters(importer, resourcePath) {\n  return [].concat(importer).map( // eslint-disable-next-line no-shadow\n  importer => function customImporter() {\n    return importer.apply(this, // eslint-disable-next-line prefer-rest-params\n    Array.from(arguments).map((arg, i) => i === 1 && arg === 'stdin' ? resourcePath : arg));\n  });\n}\n\nvar _default = proxyCustomImporters;\nexports.default = _default;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/sass-loader/dist/proxyCustomImporters.js"],"names":["Object","defineProperty","exports","value","default","proxyCustomImporters","importer","resourcePath","concat","map","customImporter","apply","Array","from","arguments","arg","i","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AAEA;;;;;;;;;;;;;;;AAcA,SAASC,oBAAT,CAA8BC,QAA9B,EAAwCC,YAAxC,EAAsD;AACpD,SAAO,GAAGC,MAAH,CAAUF,QAAV,EAAoBG,GAApB,EAAyB;AAChCH,EAAAA,QAAQ,IAAI,SAASI,cAAT,GAA0B;AACpC,WAAOJ,QAAQ,CAACK,KAAT,CAAe,IAAf,EAAqB;AAC5BC,IAAAA,KAAK,CAACC,IAAN,CAAWC,SAAX,EAAsBL,GAAtB,CAA0B,CAACM,GAAD,EAAMC,CAAN,KAAYA,CAAC,KAAK,CAAN,IAAWD,GAAG,KAAK,OAAnB,GAA6BR,YAA7B,GAA4CQ,GAAlF,CADO,CAAP;AAED,GAJM,CAAP;AAKD;;AAED,IAAIE,QAAQ,GAAGZ,oBAAf;AACAH,OAAO,CAACE,OAAR,GAAkBa,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Creates new custom importers that use the given `resourcePath` if libsass calls the custom importer with `prev`\n * being 'stdin'.\n *\n * Why do we need this? We have to use the `data` option of node-sass in order to compile our sass because\n * the `resourcePath` might not be an actual file on disk. When using the `data` option, libsass uses the string\n * 'stdin' instead of a filename.\n *\n * We have to fix this behavior in order to provide a consistent experience to the webpack user.\n *\n * @param {Function|Array<Function>} importer\n * @param {string} resourcePath\n * @returns {Array<Function>}\n */\nfunction proxyCustomImporters(importer, resourcePath) {\n  return [].concat(importer).map( // eslint-disable-next-line no-shadow\n  importer => function customImporter() {\n    return importer.apply(this, // eslint-disable-next-line prefer-rest-params\n    Array.from(arguments).map((arg, i) => i === 1 && arg === 'stdin' ? resourcePath : arg));\n  });\n}\n\nvar _default = proxyCustomImporters;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}