{"ast":null,"code":"\"use strict\";\n\nvar logMethods = [\"trace\", \"debug\", \"info\", \"warn\", \"error\"];\n\nfunction getConsoleMethod(logMethodName) {\n  if (logMethodName === 'debug') {\n    return console.log;\n  } else {\n    return console[logMethodName];\n  }\n}\n\ndefine(['../lib/loglevel'], function (log) {\n  var originalConsole = window.console;\n  describe(\"Basic log levels changing tests:\", function () {\n    beforeEach(function () {\n      window.console = {};\n\n      for (var ii = 0; ii < logMethods.length; ii++) {\n        window.console[logMethods[ii]] = jasmine.createSpy(logMethods[ii]);\n      }\n\n      window.console.log = jasmine.createSpy('log');\n    });\n    afterEach(function () {\n      window.console = originalConsole;\n    });\n    describe(\"log.enableAll()\", function () {\n      it(\"enables all log methods\", function () {\n        log.enableAll(false);\n\n        for (var ii = 0; ii < logMethods.length; ii++) {\n          var method = logMethods[ii];\n          log[method](\"a log message\");\n          expect(getConsoleMethod(method)).toHaveBeenCalled();\n        }\n      });\n    });\n    describe(\"log.disableAll()\", function () {\n      it(\"disables all log methods\", function () {\n        log.disableAll(false);\n\n        for (var ii = 0; ii < logMethods.length; ii++) {\n          var method = logMethods[ii];\n          log[method](\"a log message\");\n          expect(getConsoleMethod(method)).not.toHaveBeenCalled();\n        }\n      });\n    });\n    describe(\"log.setLevel() throws errors if given\", function () {\n      it(\"no level argument\", function () {\n        expect(function () {\n          log.setLevel();\n        }).toThrow(\"log.setLevel() called with invalid level: undefined\");\n      });\n      it(\"a null level argument\", function () {\n        expect(function () {\n          log.setLevel(null);\n        }).toThrow(\"log.setLevel() called with invalid level: null\");\n      });\n      it(\"an undefined level argument\", function () {\n        expect(function () {\n          log.setLevel(undefined);\n        }).toThrow(\"log.setLevel() called with invalid level: undefined\");\n      });\n      it(\"an invalid log level index\", function () {\n        expect(function () {\n          log.setLevel(-1);\n        }).toThrow(\"log.setLevel() called with invalid level: -1\");\n      });\n      it(\"an invalid log level name\", function () {\n        expect(function () {\n          log.setLevel(\"InvalidLevelName\");\n        }).toThrow(\"log.setLevel() called with invalid level: InvalidLevelName\");\n      });\n    });\n    describe(\"setting log level by name\", function () {\n      function itCanSetLogLevelTo(level) {\n        it(\"can set log level to \" + level, function () {\n          log.setLevel(level, false);\n          log[level](\"log message\");\n          expect(getConsoleMethod(level)).toHaveBeenCalled();\n        });\n      }\n\n      itCanSetLogLevelTo(\"trace\");\n      itCanSetLogLevelTo(\"debug\");\n      itCanSetLogLevelTo(\"info\");\n      itCanSetLogLevelTo(\"warn\");\n      itCanSetLogLevelTo(\"error\");\n    });\n    describe(\"log level settings\", function () {\n      describe(\"log.trace\", function () {\n        it(\"is enabled at trace level\", function () {\n          log.setLevel(log.levels.TRACE);\n          log.trace(\"a log message\");\n          expect(console.trace).toHaveBeenCalled();\n        });\n        it(\"is disabled at debug level\", function () {\n          log.setLevel(log.levels.DEBUG);\n          log.trace(\"a log message\");\n          expect(console.trace).not.toHaveBeenCalled();\n        });\n        it(\"is disabled at silent level\", function () {\n          log.setLevel(log.levels.SILENT);\n          log.trace(\"a log message\");\n          expect(console.trace).not.toHaveBeenCalled();\n        });\n      });\n      describe(\"log.debug\", function () {\n        it(\"is enabled at trace level\", function () {\n          log.setLevel(log.levels.TRACE);\n          log.debug(\"a log message\");\n          expect(console.log).toHaveBeenCalled();\n        });\n        it(\"is enabled at debug level\", function () {\n          log.setLevel(log.levels.DEBUG);\n          log.debug(\"a log message\");\n          expect(console.log).toHaveBeenCalled();\n        });\n        it(\"is disabled at info level\", function () {\n          log.setLevel(log.levels.INFO);\n          log.debug(\"a log message\");\n          expect(console.log).not.toHaveBeenCalled();\n        });\n        it(\"is disabled at silent level\", function () {\n          log.setLevel(log.levels.SILENT);\n          log.debug(\"a log message\");\n          expect(console.log).not.toHaveBeenCalled();\n        });\n      });\n      describe(\"log.log\", function () {\n        it(\"is enabled at trace level\", function () {\n          log.setLevel(log.levels.TRACE);\n          log.log(\"a log message\");\n          expect(console.log).toHaveBeenCalled();\n        });\n        it(\"is enabled at debug level\", function () {\n          log.setLevel(log.levels.DEBUG);\n          log.log(\"a log message\");\n          expect(console.log).toHaveBeenCalled();\n        });\n        it(\"is disabled at info level\", function () {\n          log.setLevel(log.levels.INFO);\n          log.log(\"a log message\");\n          expect(console.log).not.toHaveBeenCalled();\n        });\n        it(\"is disabled at silent level\", function () {\n          log.setLevel(log.levels.SILENT);\n          log.log(\"a log message\");\n          expect(console.log).not.toHaveBeenCalled();\n        });\n      });\n      describe(\"log.info\", function () {\n        it(\"is enabled at debug level\", function () {\n          log.setLevel(log.levels.DEBUG);\n          log.info(\"a log message\");\n          expect(console.info).toHaveBeenCalled();\n        });\n        it(\"is enabled at info level\", function () {\n          log.setLevel(log.levels.INFO);\n          log.info(\"a log message\");\n          expect(console.info).toHaveBeenCalled();\n        });\n        it(\"is disabled at warn level\", function () {\n          log.setLevel(log.levels.WARN);\n          log.info(\"a log message\");\n          expect(console.info).not.toHaveBeenCalled();\n        });\n        it(\"is disabled at silent level\", function () {\n          log.setLevel(log.levels.SILENT);\n          log.info(\"a log message\");\n          expect(console.info).not.toHaveBeenCalled();\n        });\n      });\n      describe(\"log.warn\", function () {\n        it(\"is enabled at info level\", function () {\n          log.setLevel(log.levels.INFO);\n          log.warn(\"a log message\");\n          expect(console.warn).toHaveBeenCalled();\n        });\n        it(\"is enabled at warn level\", function () {\n          log.setLevel(log.levels.WARN);\n          log.warn(\"a log message\");\n          expect(console.warn).toHaveBeenCalled();\n        });\n        it(\"is disabled at error level\", function () {\n          log.setLevel(log.levels.ERROR);\n          log.warn(\"a log message\");\n          expect(console.warn).not.toHaveBeenCalled();\n        });\n        it(\"is disabled at silent level\", function () {\n          log.setLevel(log.levels.SILENT);\n          log.warn(\"a log message\");\n          expect(console.warn).not.toHaveBeenCalled();\n        });\n      });\n      describe(\"log.error\", function () {\n        it(\"is enabled at warn level\", function () {\n          log.setLevel(log.levels.WARN);\n          log.error(\"a log message\");\n          expect(console.error).toHaveBeenCalled();\n        });\n        it(\"is enabled at error level\", function () {\n          log.setLevel(log.levels.ERROR);\n          log.error(\"a log message\");\n          expect(console.error).toHaveBeenCalled();\n        });\n        it(\"is disabled at silent level\", function () {\n          log.setLevel(log.levels.SILENT);\n          log.error(\"a log message\");\n          expect(console.error).not.toHaveBeenCalled();\n        });\n      });\n    });\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/loglevel/test/level-setting-test.js"],"names":["logMethods","getConsoleMethod","logMethodName","console","log","define","originalConsole","window","describe","beforeEach","ii","length","jasmine","createSpy","afterEach","it","enableAll","method","expect","toHaveBeenCalled","disableAll","not","setLevel","toThrow","undefined","itCanSetLogLevelTo","level","levels","TRACE","trace","DEBUG","SILENT","debug","INFO","info","WARN","warn","ERROR","error"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar logMethods = [\n    \"trace\",\n    \"debug\",\n    \"info\",\n    \"warn\",\n    \"error\"\n];\n\nfunction getConsoleMethod(logMethodName) {\n    if (logMethodName === 'debug') {\n        return console.log;\n    } else {\n        return console[logMethodName];\n    }\n}\n\ndefine(['../lib/loglevel'], function(log) {\n    var originalConsole = window.console;\n\n    describe(\"Basic log levels changing tests:\", function() {\n        beforeEach(function() {\n            window.console = {};\n\n            for (var ii = 0; ii < logMethods.length; ii++) {\n                window.console[logMethods[ii]] = jasmine.createSpy(logMethods[ii]);\n            }\n\n            window.console.log = jasmine.createSpy('log');\n        });\n\n        afterEach(function() {\n            window.console = originalConsole;\n        });\n\n        describe(\"log.enableAll()\", function() {\n            it(\"enables all log methods\", function() {\n                log.enableAll(false);\n\n                for (var ii = 0; ii < logMethods.length; ii++) {\n                    var method = logMethods[ii];\n                    log[method](\"a log message\");\n\n                    expect(getConsoleMethod(method)).toHaveBeenCalled();\n                }\n            });\n        });\n\n        describe(\"log.disableAll()\", function() {\n            it(\"disables all log methods\", function() {\n                log.disableAll(false);\n\n                for (var ii = 0; ii < logMethods.length; ii++) {\n                    var method = logMethods[ii];\n                    log[method](\"a log message\");\n\n                    expect(getConsoleMethod(method)).not.toHaveBeenCalled();\n                }\n            });\n        });\n\n        describe(\"log.setLevel() throws errors if given\", function() {\n            it(\"no level argument\", function() {\n                expect(function() {\n                    log.setLevel();\n                }).toThrow(\"log.setLevel() called with invalid level: undefined\");\n            });\n\n            it(\"a null level argument\", function() {\n                expect(function() {\n                    log.setLevel(null);\n                }).toThrow(\"log.setLevel() called with invalid level: null\");\n            });\n\n            it(\"an undefined level argument\", function() {\n                expect(function() {\n                    log.setLevel(undefined);\n                }).toThrow(\"log.setLevel() called with invalid level: undefined\");\n            });\n\n            it(\"an invalid log level index\", function() {\n                expect(function() {\n                    log.setLevel(-1);\n                }).toThrow(\"log.setLevel() called with invalid level: -1\");\n            });\n\n            it(\"an invalid log level name\", function() {\n                expect(function() {\n                    log.setLevel(\"InvalidLevelName\");\n                }).toThrow(\"log.setLevel() called with invalid level: InvalidLevelName\");\n            });\n        });\n\n        describe(\"setting log level by name\", function() {\n            function itCanSetLogLevelTo(level) {\n                it(\"can set log level to \" + level, function() {\n                    log.setLevel(level, false);\n\n                    log[level](\"log message\");\n                    expect(getConsoleMethod(level)).toHaveBeenCalled();\n                });\n            }\n\n            itCanSetLogLevelTo(\"trace\");\n            itCanSetLogLevelTo(\"debug\");\n            itCanSetLogLevelTo(\"info\");\n            itCanSetLogLevelTo(\"warn\");\n            itCanSetLogLevelTo(\"error\");\n        });\n\n        describe(\"log level settings\", function() {\n            describe(\"log.trace\", function() {\n                it(\"is enabled at trace level\", function() {\n                    log.setLevel(log.levels.TRACE);\n\n                    log.trace(\"a log message\");\n                    expect(console.trace).toHaveBeenCalled();\n                });\n\n                it(\"is disabled at debug level\", function() {\n                    log.setLevel(log.levels.DEBUG);\n\n                    log.trace(\"a log message\");\n                    expect(console.trace).not.toHaveBeenCalled();\n                });\n\n                it(\"is disabled at silent level\", function() {\n                    log.setLevel(log.levels.SILENT);\n\n                    log.trace(\"a log message\");\n                    expect(console.trace).not.toHaveBeenCalled();\n                });\n            });\n\n            describe(\"log.debug\", function() {\n                it(\"is enabled at trace level\", function() {\n                    log.setLevel(log.levels.TRACE);\n\n                    log.debug(\"a log message\");\n                    expect(console.log).toHaveBeenCalled();\n                });\n\n                it(\"is enabled at debug level\", function() {\n                    log.setLevel(log.levels.DEBUG);\n\n                    log.debug(\"a log message\");\n                    expect(console.log).toHaveBeenCalled();\n                });\n\n                it(\"is disabled at info level\", function() {\n                    log.setLevel(log.levels.INFO);\n\n                    log.debug(\"a log message\");\n                    expect(console.log).not.toHaveBeenCalled();\n                });\n\n                it(\"is disabled at silent level\", function() {\n                    log.setLevel(log.levels.SILENT);\n\n                    log.debug(\"a log message\");\n                    expect(console.log).not.toHaveBeenCalled();\n                });\n            });\n\n            describe(\"log.log\", function() {\n                it(\"is enabled at trace level\", function() {\n                    log.setLevel(log.levels.TRACE);\n\n                    log.log(\"a log message\");\n                    expect(console.log).toHaveBeenCalled();\n                });\n\n                it(\"is enabled at debug level\", function() {\n                    log.setLevel(log.levels.DEBUG);\n\n                    log.log(\"a log message\");\n                    expect(console.log).toHaveBeenCalled();\n                });\n\n                it(\"is disabled at info level\", function() {\n                    log.setLevel(log.levels.INFO);\n\n                    log.log(\"a log message\");\n                    expect(console.log).not.toHaveBeenCalled();\n                });\n\n                it(\"is disabled at silent level\", function() {\n                    log.setLevel(log.levels.SILENT);\n\n                    log.log(\"a log message\");\n                    expect(console.log).not.toHaveBeenCalled();\n                });\n            });\n\n            describe(\"log.info\", function() {\n                it(\"is enabled at debug level\", function() {\n                    log.setLevel(log.levels.DEBUG);\n\n                    log.info(\"a log message\");\n                    expect(console.info).toHaveBeenCalled();\n                });\n\n                it(\"is enabled at info level\", function() {\n                    log.setLevel(log.levels.INFO);\n\n                    log.info(\"a log message\");\n                    expect(console.info).toHaveBeenCalled();\n                });\n\n                it(\"is disabled at warn level\", function() {\n                    log.setLevel(log.levels.WARN);\n\n                    log.info(\"a log message\");\n                    expect(console.info).not.toHaveBeenCalled();\n                });\n\n                it(\"is disabled at silent level\", function() {\n                    log.setLevel(log.levels.SILENT);\n\n                    log.info(\"a log message\");\n                    expect(console.info).not.toHaveBeenCalled();\n                });\n            });\n\n            describe(\"log.warn\", function() {\n                it(\"is enabled at info level\", function() {\n                    log.setLevel(log.levels.INFO);\n\n                    log.warn(\"a log message\");\n                    expect(console.warn).toHaveBeenCalled();\n                });\n\n                it(\"is enabled at warn level\", function() {\n                    log.setLevel(log.levels.WARN);\n\n                    log.warn(\"a log message\");\n                    expect(console.warn).toHaveBeenCalled();\n                });\n\n                it(\"is disabled at error level\", function() {\n                    log.setLevel(log.levels.ERROR);\n\n                    log.warn(\"a log message\");\n                    expect(console.warn).not.toHaveBeenCalled();\n                });\n\n                it(\"is disabled at silent level\", function() {\n                    log.setLevel(log.levels.SILENT);\n\n                    log.warn(\"a log message\");\n                    expect(console.warn).not.toHaveBeenCalled();\n                });\n            });\n\n            describe(\"log.error\", function() {\n                it(\"is enabled at warn level\", function() {\n                    log.setLevel(log.levels.WARN);\n\n                    log.error(\"a log message\");\n                    expect(console.error).toHaveBeenCalled();\n                });\n\n                it(\"is enabled at error level\", function() {\n                    log.setLevel(log.levels.ERROR);\n\n                    log.error(\"a log message\");\n                    expect(console.error).toHaveBeenCalled();\n                });\n\n                it(\"is disabled at silent level\", function() {\n                    log.setLevel(log.levels.SILENT);\n\n                    log.error(\"a log message\");\n                    expect(console.error).not.toHaveBeenCalled();\n                });\n            });\n        });\n    });\n});\n\n"]},"metadata":{},"sourceType":"script"}