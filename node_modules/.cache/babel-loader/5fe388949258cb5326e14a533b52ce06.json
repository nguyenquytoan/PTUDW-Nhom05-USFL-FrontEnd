{"ast":null,"code":"this.workbox = this.workbox || {};\n\nthis.workbox.core = function (exports) {\n  'use strict';\n\n  try {\n    self['workbox:core:4.3.1'] && _();\n  } catch (e) {} // eslint-disable-line\n\n  /*\n    Copyright 2019 Google LLC\n    Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n\n  const logger = (() => {\n    let inGroup = false;\n    const methodToColorMap = {\n      debug: `#7f8c8d`,\n      // Gray\n      log: `#2ecc71`,\n      // Green\n      warn: `#f39c12`,\n      // Yellow\n      error: `#c0392b`,\n      // Red\n      groupCollapsed: `#3498db`,\n      // Blue\n      groupEnd: null // No colored prefix on groupEnd\n\n    };\n\n    const print = function (method, args) {\n      if (method === 'groupCollapsed') {\n        // Safari doesn't print all console.groupCollapsed() arguments:\n        // https://bugs.webkit.org/show_bug.cgi?id=182754\n        if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n          console[method](...args);\n          return;\n        }\n      }\n\n      const styles = [`background: ${methodToColorMap[method]}`, `border-radius: 0.5em`, `color: white`, `font-weight: bold`, `padding: 2px 0.5em`]; // When in a group, the workbox prefix is not displayed.\n\n      const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n      console[method](...logPrefix, ...args);\n\n      if (method === 'groupCollapsed') {\n        inGroup = true;\n      }\n\n      if (method === 'groupEnd') {\n        inGroup = false;\n      }\n    };\n\n    const api = {};\n\n    for (const method of Object.keys(methodToColorMap)) {\n      api[method] = (...args) => {\n        print(method, args);\n      };\n    }\n\n    return api;\n  })();\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n\n  const messages = {\n    'invalid-value': ({\n      paramName,\n      validValueDescription,\n      value\n    }) => {\n      if (!paramName || !validValueDescription) {\n        throw new Error(`Unexpected input to 'invalid-value' error.`);\n      }\n\n      return `The '${paramName}' parameter was given a value with an ` + `unexpected value. ${validValueDescription} Received a value of ` + `${JSON.stringify(value)}.`;\n    },\n    'not-in-sw': ({\n      moduleName\n    }) => {\n      if (!moduleName) {\n        throw new Error(`Unexpected input to 'not-in-sw' error.`);\n      }\n\n      return `The '${moduleName}' must be used in a service worker.`;\n    },\n    'not-an-array': ({\n      moduleName,\n      className,\n      funcName,\n      paramName\n    }) => {\n      if (!moduleName || !className || !funcName || !paramName) {\n        throw new Error(`Unexpected input to 'not-an-array' error.`);\n      }\n\n      return `The parameter '${paramName}' passed into ` + `'${moduleName}.${className}.${funcName}()' must be an array.`;\n    },\n    'incorrect-type': ({\n      expectedType,\n      paramName,\n      moduleName,\n      className,\n      funcName\n    }) => {\n      if (!expectedType || !paramName || !moduleName || !funcName) {\n        throw new Error(`Unexpected input to 'incorrect-type' error.`);\n      }\n\n      return `The parameter '${paramName}' passed into ` + `'${moduleName}.${className ? className + '.' : ''}` + `${funcName}()' must be of type ${expectedType}.`;\n    },\n    'incorrect-class': ({\n      expectedClass,\n      paramName,\n      moduleName,\n      className,\n      funcName,\n      isReturnValueProblem\n    }) => {\n      if (!expectedClass || !moduleName || !funcName) {\n        throw new Error(`Unexpected input to 'incorrect-class' error.`);\n      }\n\n      if (isReturnValueProblem) {\n        return `The return value from ` + `'${moduleName}.${className ? className + '.' : ''}${funcName}()' ` + `must be an instance of class ${expectedClass.name}.`;\n      }\n\n      return `The parameter '${paramName}' passed into ` + `'${moduleName}.${className ? className + '.' : ''}${funcName}()' ` + `must be an instance of class ${expectedClass.name}.`;\n    },\n    'missing-a-method': ({\n      expectedMethod,\n      paramName,\n      moduleName,\n      className,\n      funcName\n    }) => {\n      if (!expectedMethod || !paramName || !moduleName || !className || !funcName) {\n        throw new Error(`Unexpected input to 'missing-a-method' error.`);\n      }\n\n      return `${moduleName}.${className}.${funcName}() expected the ` + `'${paramName}' parameter to expose a '${expectedMethod}' method.`;\n    },\n    'add-to-cache-list-unexpected-type': ({\n      entry\n    }) => {\n      return `An unexpected entry was passed to ` + `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` + `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` + `strings with one or more characters, objects with a url property or ` + `Request objects.`;\n    },\n    'add-to-cache-list-conflicting-entries': ({\n      firstEntry,\n      secondEntry\n    }) => {\n      if (!firstEntry || !secondEntry) {\n        throw new Error(`Unexpected input to ` + `'add-to-cache-list-duplicate-entries' error.`);\n      }\n\n      return `Two of the entries passed to ` + `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` + `${firstEntry._entryId} but different revision details. Workbox is ` + `is unable to cache and version the asset correctly. Please remove one ` + `of the entries.`;\n    },\n    'plugin-error-request-will-fetch': ({\n      thrownError\n    }) => {\n      if (!thrownError) {\n        throw new Error(`Unexpected input to ` + `'plugin-error-request-will-fetch', error.`);\n      }\n\n      return `An error was thrown by a plugins 'requestWillFetch()' method. ` + `The thrown error message was: '${thrownError.message}'.`;\n    },\n    'invalid-cache-name': ({\n      cacheNameId,\n      value\n    }) => {\n      if (!cacheNameId) {\n        throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n      }\n\n      return `You must provide a name containing at least one character for ` + `setCacheDeatils({${cacheNameId}: '...'}). Received a value of ` + `'${JSON.stringify(value)}'`;\n    },\n    'unregister-route-but-not-found-with-method': ({\n      method\n    }) => {\n      if (!method) {\n        throw new Error(`Unexpected input to ` + `'unregister-route-but-not-found-with-method' error.`);\n      }\n\n      return `The route you're trying to unregister was not  previously ` + `registered for the method type '${method}'.`;\n    },\n    'unregister-route-route-not-registered': () => {\n      return `The route you're trying to unregister was not previously ` + `registered.`;\n    },\n    'queue-replay-failed': ({\n      name\n    }) => {\n      return `Replaying the background sync queue '${name}' failed.`;\n    },\n    'duplicate-queue-name': ({\n      name\n    }) => {\n      return `The Queue name '${name}' is already being used. ` + `All instances of backgroundSync.Queue must be given unique names.`;\n    },\n    'expired-test-without-max-age': ({\n      methodName,\n      paramName\n    }) => {\n      return `The '${methodName}()' method can only be used when the ` + `'${paramName}' is used in the constructor.`;\n    },\n    'unsupported-route-type': ({\n      moduleName,\n      className,\n      funcName,\n      paramName\n    }) => {\n      return `The supplied '${paramName}' parameter was an unsupported type. ` + `Please check the docs for ${moduleName}.${className}.${funcName} for ` + `valid input types.`;\n    },\n    'not-array-of-class': ({\n      value,\n      expectedClass,\n      moduleName,\n      className,\n      funcName,\n      paramName\n    }) => {\n      return `The supplied '${paramName}' parameter must be an array of ` + `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` + `Please check the call to ${moduleName}.${className}.${funcName}() ` + `to fix the issue.`;\n    },\n    'max-entries-or-age-required': ({\n      moduleName,\n      className,\n      funcName\n    }) => {\n      return `You must define either config.maxEntries or config.maxAgeSeconds` + `in ${moduleName}.${className}.${funcName}`;\n    },\n    'statuses-or-headers-required': ({\n      moduleName,\n      className,\n      funcName\n    }) => {\n      return `You must define either config.statuses or config.headers` + `in ${moduleName}.${className}.${funcName}`;\n    },\n    'invalid-string': ({\n      moduleName,\n      className,\n      funcName,\n      paramName\n    }) => {\n      if (!paramName || !moduleName || !funcName) {\n        throw new Error(`Unexpected input to 'invalid-string' error.`);\n      }\n\n      return `When using strings, the '${paramName}' parameter must start with ` + `'http' (for cross-origin matches) or '/' (for same-origin matches). ` + `Please see the docs for ${moduleName}.${funcName}() for ` + `more info.`;\n    },\n    'channel-name-required': () => {\n      return `You must provide a channelName to construct a ` + `BroadcastCacheUpdate instance.`;\n    },\n    'invalid-responses-are-same-args': () => {\n      return `The arguments passed into responsesAreSame() appear to be ` + `invalid. Please ensure valid Responses are used.`;\n    },\n    'expire-custom-caches-only': () => {\n      return `You must provide a 'cacheName' property when using the ` + `expiration plugin with a runtime caching strategy.`;\n    },\n    'unit-must-be-bytes': ({\n      normalizedRangeHeader\n    }) => {\n      if (!normalizedRangeHeader) {\n        throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n      }\n\n      return `The 'unit' portion of the Range header must be set to 'bytes'. ` + `The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    'single-range-only': ({\n      normalizedRangeHeader\n    }) => {\n      if (!normalizedRangeHeader) {\n        throw new Error(`Unexpected input to 'single-range-only' error.`);\n      }\n\n      return `Multiple ranges are not supported. Please use a  single start ` + `value, and optional end value. The Range header provided was ` + `\"${normalizedRangeHeader}\"`;\n    },\n    'invalid-range-values': ({\n      normalizedRangeHeader\n    }) => {\n      if (!normalizedRangeHeader) {\n        throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n      }\n\n      return `The Range header is missing both start and end values. At least ` + `one of those values is needed. The Range header provided was ` + `\"${normalizedRangeHeader}\"`;\n    },\n    'no-range-header': () => {\n      return `No Range header was found in the Request provided.`;\n    },\n    'range-not-satisfiable': ({\n      size,\n      start,\n      end\n    }) => {\n      return `The start (${start}) and end (${end}) values in the Range are ` + `not satisfiable by the cached response, which is ${size} bytes.`;\n    },\n    'attempt-to-cache-non-get-request': ({\n      url,\n      method\n    }) => {\n      return `Unable to cache '${url}' because it is a '${method}' request and ` + `only 'GET' requests can be cached.`;\n    },\n    'cache-put-with-no-response': ({\n      url\n    }) => {\n      return `There was an attempt to cache '${url}' but the response was not ` + `defined.`;\n    },\n    'no-response': ({\n      url,\n      error\n    }) => {\n      let message = `The strategy could not generate a response for '${url}'.`;\n\n      if (error) {\n        message += ` The underlying error is ${error}.`;\n      }\n\n      return message;\n    },\n    'bad-precaching-response': ({\n      url,\n      status\n    }) => {\n      return `The precaching request for '${url}' failed with an HTTP ` + `status of ${status}.`;\n    }\n  };\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  const generatorFunction = (code, ...args) => {\n    const message = messages[code];\n\n    if (!message) {\n      throw new Error(`Unable to find message for code '${code}'.`);\n    }\n\n    return message(...args);\n  };\n\n  const messageGenerator = generatorFunction;\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * Workbox errors should be thrown with this class.\n   * This allows use to ensure the type easily in tests,\n   * helps developers identify errors from workbox\n   * easily and allows use to optimise error\n   * messages correctly.\n   *\n   * @private\n   */\n\n  class WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n      let message = messageGenerator(errorCode, details);\n      super(message);\n      this.name = errorCode;\n      this.details = details;\n    }\n\n  }\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /*\n   * This method returns true if the current context is a service worker.\n   */\n\n\n  const isSWEnv = moduleName => {\n    if (!('ServiceWorkerGlobalScope' in self)) {\n      throw new WorkboxError('not-in-sw', {\n        moduleName\n      });\n    }\n  };\n  /*\n   * This method throws if the supplied value is not an array.\n   * The destructed values are required to produce a meaningful error for users.\n   * The destructed and restructured object is so it's clear what is\n   * needed.\n   */\n\n\n  const isArray = (value, {\n    moduleName,\n    className,\n    funcName,\n    paramName\n  }) => {\n    if (!Array.isArray(value)) {\n      throw new WorkboxError('not-an-array', {\n        moduleName,\n        className,\n        funcName,\n        paramName\n      });\n    }\n  };\n\n  const hasMethod = (object, expectedMethod, {\n    moduleName,\n    className,\n    funcName,\n    paramName\n  }) => {\n    const type = typeof object[expectedMethod];\n\n    if (type !== 'function') {\n      throw new WorkboxError('missing-a-method', {\n        paramName,\n        expectedMethod,\n        moduleName,\n        className,\n        funcName\n      });\n    }\n  };\n\n  const isType = (object, expectedType, {\n    moduleName,\n    className,\n    funcName,\n    paramName\n  }) => {\n    if (typeof object !== expectedType) {\n      throw new WorkboxError('incorrect-type', {\n        paramName,\n        expectedType,\n        moduleName,\n        className,\n        funcName\n      });\n    }\n  };\n\n  const isInstance = (object, expectedClass, {\n    moduleName,\n    className,\n    funcName,\n    paramName,\n    isReturnValueProblem\n  }) => {\n    if (!(object instanceof expectedClass)) {\n      throw new WorkboxError('incorrect-class', {\n        paramName,\n        expectedClass,\n        moduleName,\n        className,\n        funcName,\n        isReturnValueProblem\n      });\n    }\n  };\n\n  const isOneOf = (value, validValues, {\n    paramName\n  }) => {\n    if (!validValues.includes(value)) {\n      throw new WorkboxError('invalid-value', {\n        paramName,\n        value,\n        validValueDescription: `Valid values are ${JSON.stringify(validValues)}.`\n      });\n    }\n  };\n\n  const isArrayOfClass = (value, expectedClass, {\n    moduleName,\n    className,\n    funcName,\n    paramName\n  }) => {\n    const error = new WorkboxError('not-array-of-class', {\n      value,\n      expectedClass,\n      moduleName,\n      className,\n      funcName,\n      paramName\n    });\n\n    if (!Array.isArray(value)) {\n      throw error;\n    }\n\n    for (let item of value) {\n      if (!(item instanceof expectedClass)) {\n        throw error;\n      }\n    }\n  };\n\n  const finalAssertExports = {\n    hasMethod,\n    isArray,\n    isInstance,\n    isOneOf,\n    isSWEnv,\n    isType,\n    isArrayOfClass\n  };\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  const quotaErrorCallbacks = new Set();\n  /*\n    Copyright 2019 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * Adds a function to the set of quotaErrorCallbacks that will be executed if\n   * there's a quota error.\n   *\n   * @param {Function} callback\n   * @memberof workbox.core\n   */\n\n  function registerQuotaErrorCallback(callback) {\n    {\n      finalAssertExports.isType(callback, 'function', {\n        moduleName: 'workbox-core',\n        funcName: 'register',\n        paramName: 'callback'\n      });\n    }\n    quotaErrorCallbacks.add(callback);\n    {\n      logger.log('Registered a callback to respond to quota errors.', callback);\n    }\n  }\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n\n  const _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: self.registration.scope\n  };\n\n  const _createCacheName = cacheName => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix].filter(value => value.length > 0).join('-');\n  };\n\n  const cacheNames = {\n    updateDetails: details => {\n      Object.keys(_cacheNameDetails).forEach(key => {\n        if (typeof details[key] !== 'undefined') {\n          _cacheNameDetails[key] = details[key];\n        }\n      });\n    },\n    getGoogleAnalyticsName: userCacheName => {\n      return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: userCacheName => {\n      return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n      return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: userCacheName => {\n      return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n      return _cacheNameDetails.suffix;\n    }\n  };\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  const getFriendlyURL = url => {\n    const urlObj = new URL(url, location);\n\n    if (urlObj.origin === location.origin) {\n      return urlObj.pathname;\n    }\n\n    return urlObj.href;\n  };\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * Runs all of the callback functions, one at a time sequentially, in the order\n   * in which they were registered.\n   *\n   * @memberof workbox.core\n   * @private\n   */\n\n\n  async function executeQuotaErrorCallbacks() {\n    {\n      logger.log(`About to run ${quotaErrorCallbacks.size} ` + `callbacks to clean up caches.`);\n    }\n\n    for (const callback of quotaErrorCallbacks) {\n      await callback();\n      {\n        logger.log(callback, 'is complete.');\n      }\n    }\n\n    {\n      logger.log('Finished running callbacks.');\n    }\n  }\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n\n  const pluginEvents = {\n    CACHE_DID_UPDATE: 'cacheDidUpdate',\n    CACHE_KEY_WILL_BE_USED: 'cacheKeyWillBeUsed',\n    CACHE_WILL_UPDATE: 'cacheWillUpdate',\n    CACHED_RESPONSE_WILL_BE_USED: 'cachedResponseWillBeUsed',\n    FETCH_DID_FAIL: 'fetchDidFail',\n    FETCH_DID_SUCCEED: 'fetchDidSucceed',\n    REQUEST_WILL_FETCH: 'requestWillFetch'\n  };\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  const pluginUtils = {\n    filter: (plugins, callbackName) => {\n      return plugins.filter(plugin => callbackName in plugin);\n    }\n  };\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * Wrapper around cache.put().\n   *\n   * Will call `cacheDidUpdate` on plugins if the cache was updated, using\n   * `matchOptions` when determining what the old entry is.\n   *\n   * @param {Object} options\n   * @param {string} options.cacheName\n   * @param {Request} options.request\n   * @param {Response} options.response\n   * @param {Event} [options.event]\n   * @param {Array<Object>} [options.plugins=[]]\n   * @param {Object} [options.matchOptions]\n   *\n   * @private\n   * @memberof module:workbox-core\n   */\n\n  const putWrapper = async ({\n    cacheName,\n    request,\n    response,\n    event,\n    plugins = [],\n    matchOptions\n  } = {}) => {\n    {\n      if (request.method && request.method !== 'GET') {\n        throw new WorkboxError('attempt-to-cache-non-get-request', {\n          url: getFriendlyURL(request.url),\n          method: request.method\n        });\n      }\n    }\n    const effectiveRequest = await _getEffectiveRequest({\n      plugins,\n      request,\n      mode: 'write'\n    });\n\n    if (!response) {\n      {\n        logger.error(`Cannot cache non-existent response for ` + `'${getFriendlyURL(effectiveRequest.url)}'.`);\n      }\n      throw new WorkboxError('cache-put-with-no-response', {\n        url: getFriendlyURL(effectiveRequest.url)\n      });\n    }\n\n    let responseToCache = await _isResponseSafeToCache({\n      event,\n      plugins,\n      response,\n      request: effectiveRequest\n    });\n\n    if (!responseToCache) {\n      {\n        logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' will ` + `not be cached.`, responseToCache);\n      }\n      return;\n    }\n\n    const cache = await caches.open(cacheName);\n    const updatePlugins = pluginUtils.filter(plugins, pluginEvents.CACHE_DID_UPDATE);\n    let oldResponse = updatePlugins.length > 0 ? await matchWrapper({\n      cacheName,\n      matchOptions,\n      request: effectiveRequest\n    }) : null;\n    {\n      logger.debug(`Updating the '${cacheName}' cache with a new Response for ` + `${getFriendlyURL(effectiveRequest.url)}.`);\n    }\n\n    try {\n      await cache.put(effectiveRequest, responseToCache);\n    } catch (error) {\n      // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n      if (error.name === 'QuotaExceededError') {\n        await executeQuotaErrorCallbacks();\n      }\n\n      throw error;\n    }\n\n    for (let plugin of updatePlugins) {\n      await plugin[pluginEvents.CACHE_DID_UPDATE].call(plugin, {\n        cacheName,\n        event,\n        oldResponse,\n        newResponse: responseToCache,\n        request: effectiveRequest\n      });\n    }\n  };\n  /**\n   * This is a wrapper around cache.match().\n   *\n   * @param {Object} options\n   * @param {string} options.cacheName Name of the cache to match against.\n   * @param {Request} options.request The Request that will be used to look up\n   *     cache entries.\n   * @param {Event} [options.event] The event that propted the action.\n   * @param {Object} [options.matchOptions] Options passed to cache.match().\n   * @param {Array<Object>} [options.plugins=[]] Array of plugins.\n   * @return {Response} A cached response if available.\n   *\n   * @private\n   * @memberof module:workbox-core\n   */\n\n\n  const matchWrapper = async ({\n    cacheName,\n    request,\n    event,\n    matchOptions,\n    plugins = []\n  }) => {\n    const cache = await caches.open(cacheName);\n    const effectiveRequest = await _getEffectiveRequest({\n      plugins,\n      request,\n      mode: 'read'\n    });\n    let cachedResponse = await cache.match(effectiveRequest, matchOptions);\n    {\n      if (cachedResponse) {\n        logger.debug(`Found a cached response in '${cacheName}'.`);\n      } else {\n        logger.debug(`No cached response found in '${cacheName}'.`);\n      }\n    }\n\n    for (const plugin of plugins) {\n      if (pluginEvents.CACHED_RESPONSE_WILL_BE_USED in plugin) {\n        cachedResponse = await plugin[pluginEvents.CACHED_RESPONSE_WILL_BE_USED].call(plugin, {\n          cacheName,\n          event,\n          matchOptions,\n          cachedResponse,\n          request: effectiveRequest\n        });\n        {\n          if (cachedResponse) {\n            finalAssertExports.isInstance(cachedResponse, Response, {\n              moduleName: 'Plugin',\n              funcName: pluginEvents.CACHED_RESPONSE_WILL_BE_USED,\n              isReturnValueProblem: true\n            });\n          }\n        }\n      }\n    }\n\n    return cachedResponse;\n  };\n  /**\n   * This method will call cacheWillUpdate on the available plugins (or use\n   * status === 200) to determine if the Response is safe and valid to cache.\n   *\n   * @param {Object} options\n   * @param {Request} options.request\n   * @param {Response} options.response\n   * @param {Event} [options.event]\n   * @param {Array<Object>} [options.plugins=[]]\n   * @return {Promise<Response>}\n   *\n   * @private\n   * @memberof module:workbox-core\n   */\n\n\n  const _isResponseSafeToCache = async ({\n    request,\n    response,\n    event,\n    plugins\n  }) => {\n    let responseToCache = response;\n    let pluginsUsed = false;\n\n    for (let plugin of plugins) {\n      if (pluginEvents.CACHE_WILL_UPDATE in plugin) {\n        pluginsUsed = true;\n        responseToCache = await plugin[pluginEvents.CACHE_WILL_UPDATE].call(plugin, {\n          request,\n          response: responseToCache,\n          event\n        });\n        {\n          if (responseToCache) {\n            finalAssertExports.isInstance(responseToCache, Response, {\n              moduleName: 'Plugin',\n              funcName: pluginEvents.CACHE_WILL_UPDATE,\n              isReturnValueProblem: true\n            });\n          }\n        }\n\n        if (!responseToCache) {\n          break;\n        }\n      }\n    }\n\n    if (!pluginsUsed) {\n      {\n        if (!responseToCache.status === 200) {\n          if (responseToCache.status === 0) {\n            logger.warn(`The response for '${request.url}' is an opaque ` + `response. The caching strategy that you're using will not ` + `cache opaque responses by default.`);\n          } else {\n            logger.debug(`The response for '${request.url}' returned ` + `a status code of '${response.status}' and won't be cached as a ` + `result.`);\n          }\n        }\n      }\n      responseToCache = responseToCache.status === 200 ? responseToCache : null;\n    }\n\n    return responseToCache ? responseToCache : null;\n  };\n  /**\n   * Checks the list of plugins for the cacheKeyWillBeUsed callback, and\n   * executes any of those callbacks found in sequence. The final `Request` object\n   * returned by the last plugin is treated as the cache key for cache reads\n   * and/or writes.\n   *\n   * @param {Object} options\n   * @param {Request} options.request\n   * @param {string} options.mode\n   * @param {Array<Object>} [options.plugins=[]]\n   * @return {Promise<Request>}\n   *\n   * @private\n   * @memberof module:workbox-core\n   */\n\n\n  const _getEffectiveRequest = async ({\n    request,\n    mode,\n    plugins\n  }) => {\n    const cacheKeyWillBeUsedPlugins = pluginUtils.filter(plugins, pluginEvents.CACHE_KEY_WILL_BE_USED);\n    let effectiveRequest = request;\n\n    for (const plugin of cacheKeyWillBeUsedPlugins) {\n      effectiveRequest = await plugin[pluginEvents.CACHE_KEY_WILL_BE_USED].call(plugin, {\n        mode,\n        request: effectiveRequest\n      });\n\n      if (typeof effectiveRequest === 'string') {\n        effectiveRequest = new Request(effectiveRequest);\n      }\n\n      {\n        finalAssertExports.isInstance(effectiveRequest, Request, {\n          moduleName: 'Plugin',\n          funcName: pluginEvents.CACHE_KEY_WILL_BE_USED,\n          isReturnValueProblem: true\n        });\n      }\n    }\n\n    return effectiveRequest;\n  };\n\n  const cacheWrapper = {\n    put: putWrapper,\n    match: matchWrapper\n  };\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * A class that wraps common IndexedDB functionality in a promise-based API.\n   * It exposes all the underlying power and functionality of IndexedDB, but\n   * wraps the most commonly used features in a way that's much simpler to use.\n   *\n   * @private\n   */\n\n  class DBWrapper {\n    /**\n     * @param {string} name\n     * @param {number} version\n     * @param {Object=} [callback]\n     * @param {!Function} [callbacks.onupgradeneeded]\n     * @param {!Function} [callbacks.onversionchange] Defaults to\n     *     DBWrapper.prototype._onversionchange when not specified.\n     * @private\n     */\n    constructor(name, version, {\n      onupgradeneeded,\n      onversionchange = this._onversionchange\n    } = {}) {\n      this._name = name;\n      this._version = version;\n      this._onupgradeneeded = onupgradeneeded;\n      this._onversionchange = onversionchange; // If this is null, it means the database isn't open.\n\n      this._db = null;\n    }\n    /**\n     * Returns the IDBDatabase instance (not normally needed).\n     *\n     * @private\n     */\n\n\n    get db() {\n      return this._db;\n    }\n    /**\n     * Opens a connected to an IDBDatabase, invokes any onupgradedneeded\n     * callback, and added an onversionchange callback to the database.\n     *\n     * @return {IDBDatabase}\n     * @private\n     */\n\n\n    async open() {\n      if (this._db) return;\n      this._db = await new Promise((resolve, reject) => {\n        // This flag is flipped to true if the timeout callback runs prior\n        // to the request failing or succeeding. Note: we use a timeout instead\n        // of an onblocked handler since there are cases where onblocked will\n        // never never run. A timeout better handles all possible scenarios:\n        // https://github.com/w3c/IndexedDB/issues/223\n        let openRequestTimedOut = false;\n        setTimeout(() => {\n          openRequestTimedOut = true;\n          reject(new Error('The open request was blocked and timed out'));\n        }, this.OPEN_TIMEOUT);\n        const openRequest = indexedDB.open(this._name, this._version);\n\n        openRequest.onerror = () => reject(openRequest.error);\n\n        openRequest.onupgradeneeded = evt => {\n          if (openRequestTimedOut) {\n            openRequest.transaction.abort();\n            evt.target.result.close();\n          } else if (this._onupgradeneeded) {\n            this._onupgradeneeded(evt);\n          }\n        };\n\n        openRequest.onsuccess = ({\n          target\n        }) => {\n          const db = target.result;\n\n          if (openRequestTimedOut) {\n            db.close();\n          } else {\n            db.onversionchange = this._onversionchange.bind(this);\n            resolve(db);\n          }\n        };\n      });\n      return this;\n    }\n    /**\n     * Polyfills the native `getKey()` method. Note, this is overridden at\n     * runtime if the browser supports the native method.\n     *\n     * @param {string} storeName\n     * @param {*} query\n     * @return {Array}\n     * @private\n     */\n\n\n    async getKey(storeName, query) {\n      return (await this.getAllKeys(storeName, query, 1))[0];\n    }\n    /**\n     * Polyfills the native `getAll()` method. Note, this is overridden at\n     * runtime if the browser supports the native method.\n     *\n     * @param {string} storeName\n     * @param {*} query\n     * @param {number} count\n     * @return {Array}\n     * @private\n     */\n\n\n    async getAll(storeName, query, count) {\n      return await this.getAllMatching(storeName, {\n        query,\n        count\n      });\n    }\n    /**\n     * Polyfills the native `getAllKeys()` method. Note, this is overridden at\n     * runtime if the browser supports the native method.\n     *\n     * @param {string} storeName\n     * @param {*} query\n     * @param {number} count\n     * @return {Array}\n     * @private\n     */\n\n\n    async getAllKeys(storeName, query, count) {\n      return (await this.getAllMatching(storeName, {\n        query,\n        count,\n        includeKeys: true\n      })).map(({\n        key\n      }) => key);\n    }\n    /**\n     * Supports flexible lookup in an object store by specifying an index,\n     * query, direction, and count. This method returns an array of objects\n     * with the signature .\n     *\n     * @param {string} storeName\n     * @param {Object} [opts]\n     * @param {string} [opts.index] The index to use (if specified).\n     * @param {*} [opts.query]\n     * @param {IDBCursorDirection} [opts.direction]\n     * @param {number} [opts.count] The max number of results to return.\n     * @param {boolean} [opts.includeKeys] When true, the structure of the\n     *     returned objects is changed from an array of values to an array of\n     *     objects in the form {key, primaryKey, value}.\n     * @return {Array}\n     * @private\n     */\n\n\n    async getAllMatching(storeName, {\n      index,\n      query = null,\n      // IE errors if query === `undefined`.\n      direction = 'next',\n      count,\n      includeKeys\n    } = {}) {\n      return await this.transaction([storeName], 'readonly', (txn, done) => {\n        const store = txn.objectStore(storeName);\n        const target = index ? store.index(index) : store;\n        const results = [];\n\n        target.openCursor(query, direction).onsuccess = ({\n          target\n        }) => {\n          const cursor = target.result;\n\n          if (cursor) {\n            const {\n              primaryKey,\n              key,\n              value\n            } = cursor;\n            results.push(includeKeys ? {\n              primaryKey,\n              key,\n              value\n            } : value);\n\n            if (count && results.length >= count) {\n              done(results);\n            } else {\n              cursor.continue();\n            }\n          } else {\n            done(results);\n          }\n        };\n      });\n    }\n    /**\n     * Accepts a list of stores, a transaction type, and a callback and\n     * performs a transaction. A promise is returned that resolves to whatever\n     * value the callback chooses. The callback holds all the transaction logic\n     * and is invoked with two arguments:\n     *   1. The IDBTransaction object\n     *   2. A `done` function, that's used to resolve the promise when\n     *      when the transaction is done, if passed a value, the promise is\n     *      resolved to that value.\n     *\n     * @param {Array<string>} storeNames An array of object store names\n     *     involved in the transaction.\n     * @param {string} type Can be `readonly` or `readwrite`.\n     * @param {!Function} callback\n     * @return {*} The result of the transaction ran by the callback.\n     * @private\n     */\n\n\n    async transaction(storeNames, type, callback) {\n      await this.open();\n      return await new Promise((resolve, reject) => {\n        const txn = this._db.transaction(storeNames, type);\n\n        txn.onabort = ({\n          target\n        }) => reject(target.error);\n\n        txn.oncomplete = () => resolve();\n\n        callback(txn, value => resolve(value));\n      });\n    }\n    /**\n     * Delegates async to a native IDBObjectStore method.\n     *\n     * @param {string} method The method name.\n     * @param {string} storeName The object store name.\n     * @param {string} type Can be `readonly` or `readwrite`.\n     * @param {...*} args The list of args to pass to the native method.\n     * @return {*} The result of the transaction.\n     * @private\n     */\n\n\n    async _call(method, storeName, type, ...args) {\n      const callback = (txn, done) => {\n        txn.objectStore(storeName)[method](...args).onsuccess = ({\n          target\n        }) => {\n          done(target.result);\n        };\n      };\n\n      return await this.transaction([storeName], type, callback);\n    }\n    /**\n     * The default onversionchange handler, which closes the database so other\n     * connections can open without being blocked.\n     *\n     * @private\n     */\n\n\n    _onversionchange() {\n      this.close();\n    }\n    /**\n     * Closes the connection opened by `DBWrapper.open()`. Generally this method\n     * doesn't need to be called since:\n     *   1. It's usually better to keep a connection open since opening\n     *      a new connection is somewhat slow.\n     *   2. Connections are automatically closed when the reference is\n     *      garbage collected.\n     * The primary use case for needing to close a connection is when another\n     * reference (typically in another tab) needs to upgrade it and would be\n     * blocked by the current, open connection.\n     *\n     * @private\n     */\n\n\n    close() {\n      if (this._db) {\n        this._db.close();\n\n        this._db = null;\n      }\n    }\n\n  } // Exposed to let users modify the default timeout on a per-instance\n  // or global basis.\n\n\n  DBWrapper.prototype.OPEN_TIMEOUT = 2000; // Wrap native IDBObjectStore methods according to their mode.\n\n  const methodsToWrap = {\n    'readonly': ['get', 'count', 'getKey', 'getAll', 'getAllKeys'],\n    'readwrite': ['add', 'put', 'clear', 'delete']\n  };\n\n  for (const [mode, methods] of Object.entries(methodsToWrap)) {\n    for (const method of methods) {\n      if (method in IDBObjectStore.prototype) {\n        // Don't use arrow functions here since we're outside of the class.\n        DBWrapper.prototype[method] = async function (storeName, ...args) {\n          return await this._call(method, storeName, mode, ...args);\n        };\n      }\n    }\n  }\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * The Deferred class composes Promises in a way that allows for them to be\n   * resolved or rejected from outside the constructor. In most cases promises\n   * should be used directly, but Deferreds can be necessary when the logic to\n   * resolve a promise must be separate.\n   *\n   * @private\n   */\n\n\n  class Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n      this.promise = new Promise((resolve, reject) => {\n        this.resolve = resolve;\n        this.reject = reject;\n      });\n    }\n\n  }\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * Deletes the database.\n   * Note: this is exported separately from the DBWrapper module because most\n   * usages of IndexedDB in workbox dont need deleting, and this way it can be\n   * reused in tests to delete databases without creating DBWrapper instances.\n   *\n   * @param {string} name The database name.\n   * @private\n   */\n\n\n  const deleteDatabase = async name => {\n    await new Promise((resolve, reject) => {\n      const request = indexedDB.deleteDatabase(name);\n\n      request.onerror = ({\n        target\n      }) => {\n        reject(target.error);\n      };\n\n      request.onblocked = () => {\n        reject(new Error('Delete blocked'));\n      };\n\n      request.onsuccess = () => {\n        resolve();\n      };\n    });\n  };\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * Wrapper around the fetch API.\n   *\n   * Will call requestWillFetch on available plugins.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request\n   * @param {Object} [options.fetchOptions]\n   * @param {Event} [options.event]\n   * @param {Array<Object>} [options.plugins=[]]\n   * @return {Promise<Response>}\n   *\n   * @private\n   * @memberof module:workbox-core\n   */\n\n\n  const wrappedFetch = async ({\n    request,\n    fetchOptions,\n    event,\n    plugins = []\n  }) => {\n    // We *should* be able to call `await event.preloadResponse` even if it's\n    // undefined, but for some reason, doing so leads to errors in our Node unit\n    // tests. To work around that, explicitly check preloadResponse's value first.\n    if (event && event.preloadResponse) {\n      const possiblePreloadResponse = await event.preloadResponse;\n\n      if (possiblePreloadResponse) {\n        {\n          logger.log(`Using a preloaded navigation response for ` + `'${getFriendlyURL(request.url)}'`);\n        }\n        return possiblePreloadResponse;\n      }\n    }\n\n    if (typeof request === 'string') {\n      request = new Request(request);\n    }\n\n    {\n      finalAssertExports.isInstance(request, Request, {\n        paramName: request,\n        expectedClass: 'Request',\n        moduleName: 'workbox-core',\n        className: 'fetchWrapper',\n        funcName: 'wrappedFetch'\n      });\n    }\n    const failedFetchPlugins = pluginUtils.filter(plugins, pluginEvents.FETCH_DID_FAIL); // If there is a fetchDidFail plugin, we need to save a clone of the\n    // original request before it's either modified by a requestWillFetch\n    // plugin or before the original request's body is consumed via fetch().\n\n    const originalRequest = failedFetchPlugins.length > 0 ? request.clone() : null;\n\n    try {\n      for (let plugin of plugins) {\n        if (pluginEvents.REQUEST_WILL_FETCH in plugin) {\n          request = await plugin[pluginEvents.REQUEST_WILL_FETCH].call(plugin, {\n            request: request.clone(),\n            event\n          });\n          {\n            if (request) {\n              finalAssertExports.isInstance(request, Request, {\n                moduleName: 'Plugin',\n                funcName: pluginEvents.CACHED_RESPONSE_WILL_BE_USED,\n                isReturnValueProblem: true\n              });\n            }\n          }\n        }\n      }\n    } catch (err) {\n      throw new WorkboxError('plugin-error-request-will-fetch', {\n        thrownError: err\n      });\n    } // The request can be altered by plugins with `requestWillFetch` making\n    // the original request (Most likely from a `fetch` event) to be different\n    // to the Request we make. Pass both to `fetchDidFail` to aid debugging.\n\n\n    let pluginFilteredRequest = request.clone();\n\n    try {\n      let fetchResponse; // See https://github.com/GoogleChrome/workbox/issues/1796\n\n      if (request.mode === 'navigate') {\n        fetchResponse = await fetch(request);\n      } else {\n        fetchResponse = await fetch(request, fetchOptions);\n      }\n\n      {\n        logger.debug(`Network request for ` + `'${getFriendlyURL(request.url)}' returned a response with ` + `status '${fetchResponse.status}'.`);\n      }\n\n      for (const plugin of plugins) {\n        if (pluginEvents.FETCH_DID_SUCCEED in plugin) {\n          fetchResponse = await plugin[pluginEvents.FETCH_DID_SUCCEED].call(plugin, {\n            event,\n            request: pluginFilteredRequest,\n            response: fetchResponse\n          });\n          {\n            if (fetchResponse) {\n              finalAssertExports.isInstance(fetchResponse, Response, {\n                moduleName: 'Plugin',\n                funcName: pluginEvents.FETCH_DID_SUCCEED,\n                isReturnValueProblem: true\n              });\n            }\n          }\n        }\n      }\n\n      return fetchResponse;\n    } catch (error) {\n      {\n        logger.error(`Network request for ` + `'${getFriendlyURL(request.url)}' threw an error.`, error);\n      }\n\n      for (const plugin of failedFetchPlugins) {\n        await plugin[pluginEvents.FETCH_DID_FAIL].call(plugin, {\n          error,\n          event,\n          originalRequest: originalRequest.clone(),\n          request: pluginFilteredRequest.clone()\n        });\n      }\n\n      throw error;\n    }\n  };\n\n  const fetchWrapper = {\n    fetch: wrappedFetch\n  };\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  var _private = /*#__PURE__*/Object.freeze({\n    assert: finalAssertExports,\n    cacheNames: cacheNames,\n    cacheWrapper: cacheWrapper,\n    DBWrapper: DBWrapper,\n    Deferred: Deferred,\n    deleteDatabase: deleteDatabase,\n    executeQuotaErrorCallbacks: executeQuotaErrorCallbacks,\n    fetchWrapper: fetchWrapper,\n    getFriendlyURL: getFriendlyURL,\n    logger: logger,\n    WorkboxError: WorkboxError\n  });\n  /*\n    Copyright 2019 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * Claim any currently available clients once the service worker\n   * becomes active. This is normally used in conjunction with `skipWaiting()`.\n   *\n   * @alias workbox.core.clientsClaim\n   */\n\n\n  const clientsClaim = () => {\n    addEventListener('activate', () => clients.claim());\n  };\n  /*\n    Copyright 2019 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * Get the current cache names and prefix/suffix used by Workbox.\n   *\n   * `cacheNames.precache` is used for precached assets,\n   * `cacheNames.googleAnalytics` is used by `workbox-google-analytics` to\n   * store `analytics.js`, and `cacheNames.runtime` is used for everything else.\n   *\n   * `cacheNames.prefix` can be used to retrieve just the current prefix value.\n   * `cacheNames.suffix` can be used to retrieve just the current suffix value.\n   *\n   * @return {Object} An object with `precache`, `runtime`, `prefix`, and\n   *     `googleAnalytics` properties.\n   *\n   * @alias workbox.core.cacheNames\n   */\n\n\n  const cacheNames$1 = {\n    get googleAnalytics() {\n      return cacheNames.getGoogleAnalyticsName();\n    },\n\n    get precache() {\n      return cacheNames.getPrecacheName();\n    },\n\n    get prefix() {\n      return cacheNames.getPrefix();\n    },\n\n    get runtime() {\n      return cacheNames.getRuntimeName();\n    },\n\n    get suffix() {\n      return cacheNames.getSuffix();\n    }\n\n  };\n  /*\n    Copyright 2019 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * Modifies the default cache names used by the Workbox packages.\n   * Cache names are generated as `<prefix>-<Cache Name>-<suffix>`.\n   *\n   * @param {Object} details\n   * @param {Object} [details.prefix] The string to add to the beginning of\n   *     the precache and runtime cache names.\n   * @param {Object} [details.suffix] The string to add to the end of\n   *     the precache and runtime cache names.\n   * @param {Object} [details.precache] The cache name to use for precache\n   *     caching.\n   * @param {Object} [details.runtime] The cache name to use for runtime caching.\n   * @param {Object} [details.googleAnalytics] The cache name to use for\n   *     `workbox-google-analytics` caching.\n   *\n   * @alias workbox.core.setCacheNameDetails\n   */\n\n  const setCacheNameDetails = details => {\n    {\n      Object.keys(details).forEach(key => {\n        finalAssertExports.isType(details[key], 'string', {\n          moduleName: 'workbox-core',\n          funcName: 'setCacheNameDetails',\n          paramName: `details.${key}`\n        });\n      });\n\n      if ('precache' in details && details.precache.length === 0) {\n        throw new WorkboxError('invalid-cache-name', {\n          cacheNameId: 'precache',\n          value: details.precache\n        });\n      }\n\n      if ('runtime' in details && details.runtime.length === 0) {\n        throw new WorkboxError('invalid-cache-name', {\n          cacheNameId: 'runtime',\n          value: details.runtime\n        });\n      }\n\n      if ('googleAnalytics' in details && details.googleAnalytics.length === 0) {\n        throw new WorkboxError('invalid-cache-name', {\n          cacheNameId: 'googleAnalytics',\n          value: details.googleAnalytics\n        });\n      }\n    }\n    cacheNames.updateDetails(details);\n  };\n  /*\n    Copyright 2019 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * Force a service worker to become active, instead of waiting. This is\n   * normally used in conjunction with `clientsClaim()`.\n   *\n   * @alias workbox.core.skipWaiting\n   */\n\n\n  const skipWaiting = () => {\n    // We need to explicitly call `self.skipWaiting()` here because we're\n    // shadowing `skipWaiting` with this local function.\n    addEventListener('install', () => self.skipWaiting());\n  };\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n\n  try {\n    self.workbox.v = self.workbox.v || {};\n  } catch (errer) {} // NOOP\n\n\n  exports._private = _private;\n  exports.clientsClaim = clientsClaim;\n  exports.cacheNames = cacheNames$1;\n  exports.registerQuotaErrorCallback = registerQuotaErrorCallback;\n  exports.setCacheNameDetails = setCacheNameDetails;\n  exports.skipWaiting = skipWaiting;\n  return exports;\n}({});","map":{"version":3,"sources":["../_version.mjs","../_private/logger.mjs","../models/messages/messages.mjs","../models/messages/messageGenerator.mjs","../_private/WorkboxError.mjs","../_private/assert.mjs","../models/quotaErrorCallbacks.mjs","../registerQuotaErrorCallback.mjs","../_private/cacheNames.mjs","../_private/getFriendlyURL.mjs","../_private/executeQuotaErrorCallbacks.mjs","../models/pluginEvents.mjs","../utils/pluginUtils.mjs","../_private/cacheWrapper.mjs","../_private/DBWrapper.mjs","../_private/Deferred.mjs","../_private/deleteDatabase.mjs","../_private/fetchWrapper.mjs","../_private.mjs","../clientsClaim.mjs","../cacheNames.mjs","../setCacheNameDetails.mjs","../skipWaiting.mjs","../index.mjs"],"names":["self","_","logger","inGroup","methodToColorMap","debug","log","warn","error","groupCollapsed","groupEnd","print","method","navigator","console","styles","logPrefix","api","Object","messages","value","paramName","validValueDescription","JSON","moduleName","className","funcName","expectedType","isReturnValueProblem","expectedClass","name","expectedMethod","entry","secondEntry","firstEntry","_entryId","thrownError","message","cacheNameId","methodName","normalizedRangeHeader","end","start","size","url","status","generatorFunction","code","messageGenerator","constructor","isSWEnv","isArray","Array","hasMethod","type","object","isType","isInstance","isOneOf","validValues","isArrayOfClass","item","finalAssertExports","quotaErrorCallbacks","assert","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","scope","_createCacheName","cacheName","cacheNames","updateDetails","details","key","getGoogleAnalyticsName","userCacheName","getPrecacheName","getPrefix","getRuntimeName","getSuffix","getFriendlyURL","urlObj","location","callback","pluginEvents","CACHE_DID_UPDATE","CACHE_KEY_WILL_BE_USED","CACHE_WILL_UPDATE","CACHED_RESPONSE_WILL_BE_USED","FETCH_DID_FAIL","FETCH_DID_SUCCEED","REQUEST_WILL_FETCH","pluginUtils","filter","plugins","plugin","callbackName","putWrapper","matchOptions","request","effectiveRequest","_getEffectiveRequest","mode","responseToCache","_isResponseSafeToCache","cache","caches","updatePlugins","oldResponse","matchWrapper","executeQuotaErrorCallbacks","newResponse","cachedResponse","pluginsUsed","response","event","cacheKeyWillBeUsedPlugins","cacheWrapper","put","match","onversionchange","_onversionchange","openRequestTimedOut","setTimeout","reject","openRequest","indexedDB","evt","target","db","resolve","count","includeKeys","query","direction","store","txn","index","results","cursor","done","close","DBWrapper","methodsToWrap","IDBObjectStore","deleteDatabase","wrappedFetch","possiblePreloadResponse","failedFetchPlugins","originalRequest","err","pluginFilteredRequest","fetchResponse","fetch","fetchWrapper","clientsClaim","addEventListener","clients","_cacheNames","setCacheNameDetails","skipWaiting"],"mappings":"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","sourcesContent":["try{self['workbox:core:4.3.1']&&_()}catch(e){}// eslint-disable-line","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n\nconst logger = process.env.NODE_ENV === 'production' ? null : (() => {\n  let inGroup = false;\n\n  const methodToColorMap = {\n    debug: `#7f8c8d`, // Gray\n    log: `#2ecc71`, // Green\n    warn: `#f39c12`, // Yellow\n    error: `#c0392b`, // Red\n    groupCollapsed: `#3498db`, // Blue\n    groupEnd: null, // No colored prefix on groupEnd\n  };\n\n  const print = function(method, args) {\n    if (method === 'groupCollapsed') {\n      // Safari doesn't print all console.groupCollapsed() arguments:\n      // https://bugs.webkit.org/show_bug.cgi?id=182754\n      if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n        console[method](...args);\n        return;\n      }\n    }\n\n    const styles = [\n      `background: ${methodToColorMap[method]}`,\n      `border-radius: 0.5em`,\n      `color: white`,\n      `font-weight: bold`,\n      `padding: 2px 0.5em`,\n    ];\n\n    // When in a group, the workbox prefix is not displayed.\n    const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n\n    console[method](...logPrefix, ...args);\n\n    if (method === 'groupCollapsed') {\n      inGroup = true;\n    }\n    if (method === 'groupEnd') {\n      inGroup = false;\n    }\n  };\n\n  const api = {};\n  for (const method of Object.keys(methodToColorMap)) {\n    api[method] = (...args) => {\n      print(method, args);\n    };\n  }\n\n  return api;\n})();\n\nexport {logger};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../../_version.mjs';\n\n\nexport const messages = {\n  'invalid-value': ({paramName, validValueDescription, value}) => {\n    if (!paramName || !validValueDescription) {\n      throw new Error(`Unexpected input to 'invalid-value' error.`);\n    }\n    return `The '${paramName}' parameter was given a value with an ` +\n      `unexpected value. ${validValueDescription} Received a value of ` +\n      `${JSON.stringify(value)}.`;\n  },\n\n  'not-in-sw': ({moduleName}) => {\n    if (!moduleName) {\n      throw new Error(`Unexpected input to 'not-in-sw' error.`);\n    }\n    return `The '${moduleName}' must be used in a service worker.`;\n  },\n\n  'not-an-array': ({moduleName, className, funcName, paramName}) => {\n    if (!moduleName || !className || !funcName || !paramName) {\n      throw new Error(`Unexpected input to 'not-an-array' error.`);\n    }\n    return `The parameter '${paramName}' passed into ` +\n      `'${moduleName}.${className}.${funcName}()' must be an array.`;\n  },\n\n  'incorrect-type': ({expectedType, paramName, moduleName, className,\n    funcName}) => {\n    if (!expectedType || !paramName || !moduleName || !funcName) {\n      throw new Error(`Unexpected input to 'incorrect-type' error.`);\n    }\n    return `The parameter '${paramName}' passed into ` +\n      `'${moduleName}.${className ? (className + '.') : ''}` +\n      `${funcName}()' must be of type ${expectedType}.`;\n  },\n\n  'incorrect-class': ({expectedClass, paramName, moduleName, className,\n    funcName, isReturnValueProblem}) => {\n    if (!expectedClass || !moduleName || !funcName) {\n      throw new Error(`Unexpected input to 'incorrect-class' error.`);\n    }\n\n    if (isReturnValueProblem) {\n      return `The return value from ` +\n        `'${moduleName}.${className ? (className + '.') : ''}${funcName}()' ` +\n        `must be an instance of class ${expectedClass.name}.`;\n    }\n\n    return `The parameter '${paramName}' passed into ` +\n      `'${moduleName}.${className ? (className + '.') : ''}${funcName}()' ` +\n      `must be an instance of class ${expectedClass.name}.`;\n  },\n\n  'missing-a-method': ({expectedMethod, paramName, moduleName, className,\n    funcName}) => {\n    if (!expectedMethod || !paramName || !moduleName || !className\n        || !funcName) {\n      throw new Error(`Unexpected input to 'missing-a-method' error.`);\n    }\n    return `${moduleName}.${className}.${funcName}() expected the ` +\n      `'${paramName}' parameter to expose a '${expectedMethod}' method.`;\n  },\n\n  'add-to-cache-list-unexpected-type': ({entry}) => {\n    return `An unexpected entry was passed to ` +\n    `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` +\n    `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` +\n    `strings with one or more characters, objects with a url property or ` +\n    `Request objects.`;\n  },\n\n  'add-to-cache-list-conflicting-entries': ({firstEntry, secondEntry}) => {\n    if (!firstEntry || !secondEntry) {\n      throw new Error(`Unexpected input to ` +\n        `'add-to-cache-list-duplicate-entries' error.`);\n    }\n\n    return `Two of the entries passed to ` +\n      `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n      `${firstEntry._entryId} but different revision details. Workbox is ` +\n      `is unable to cache and version the asset correctly. Please remove one ` +\n      `of the entries.`;\n  },\n\n  'plugin-error-request-will-fetch': ({thrownError}) => {\n    if (!thrownError) {\n      throw new Error(`Unexpected input to ` +\n        `'plugin-error-request-will-fetch', error.`);\n    }\n\n    return `An error was thrown by a plugins 'requestWillFetch()' method. ` +\n      `The thrown error message was: '${thrownError.message}'.`;\n  },\n\n  'invalid-cache-name': ({cacheNameId, value}) => {\n    if (!cacheNameId) {\n      throw new Error(\n          `Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n    }\n\n    return `You must provide a name containing at least one character for ` +\n      `setCacheDeatils({${cacheNameId}: '...'}). Received a value of ` +\n      `'${JSON.stringify(value)}'`;\n  },\n\n  'unregister-route-but-not-found-with-method': ({method}) => {\n    if (!method) {\n      throw new Error(`Unexpected input to ` +\n        `'unregister-route-but-not-found-with-method' error.`);\n    }\n\n    return `The route you're trying to unregister was not  previously ` +\n      `registered for the method type '${method}'.`;\n  },\n\n  'unregister-route-route-not-registered': () => {\n    return `The route you're trying to unregister was not previously ` +\n      `registered.`;\n  },\n\n  'queue-replay-failed': ({name}) => {\n    return `Replaying the background sync queue '${name}' failed.`;\n  },\n\n  'duplicate-queue-name': ({name}) => {\n    return `The Queue name '${name}' is already being used. ` +\n        `All instances of backgroundSync.Queue must be given unique names.`;\n  },\n\n  'expired-test-without-max-age': ({methodName, paramName}) => {\n    return `The '${methodName}()' method can only be used when the ` +\n      `'${paramName}' is used in the constructor.`;\n  },\n\n  'unsupported-route-type': ({moduleName, className, funcName, paramName}) => {\n    return `The supplied '${paramName}' parameter was an unsupported type. ` +\n      `Please check the docs for ${moduleName}.${className}.${funcName} for ` +\n      `valid input types.`;\n  },\n\n  'not-array-of-class': ({value, expectedClass,\n    moduleName, className, funcName, paramName}) => {\n    return `The supplied '${paramName}' parameter must be an array of ` +\n      `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` +\n      `Please check the call to ${moduleName}.${className}.${funcName}() ` +\n      `to fix the issue.`;\n  },\n\n  'max-entries-or-age-required': ({moduleName, className, funcName}) => {\n    return `You must define either config.maxEntries or config.maxAgeSeconds` +\n      `in ${moduleName}.${className}.${funcName}`;\n  },\n\n  'statuses-or-headers-required': ({moduleName, className, funcName}) => {\n    return `You must define either config.statuses or config.headers` +\n      `in ${moduleName}.${className}.${funcName}`;\n  },\n\n  'invalid-string': ({moduleName, className, funcName, paramName}) => {\n    if (!paramName || !moduleName || !funcName) {\n      throw new Error(`Unexpected input to 'invalid-string' error.`);\n    }\n    return `When using strings, the '${paramName}' parameter must start with ` +\n      `'http' (for cross-origin matches) or '/' (for same-origin matches). ` +\n      `Please see the docs for ${moduleName}.${funcName}() for ` +\n      `more info.`;\n  },\n\n  'channel-name-required': () => {\n    return `You must provide a channelName to construct a ` +\n    `BroadcastCacheUpdate instance.`;\n  },\n\n  'invalid-responses-are-same-args': () => {\n    return `The arguments passed into responsesAreSame() appear to be ` +\n      `invalid. Please ensure valid Responses are used.`;\n  },\n\n  'expire-custom-caches-only': () => {\n    return `You must provide a 'cacheName' property when using the ` +\n      `expiration plugin with a runtime caching strategy.`;\n  },\n\n  'unit-must-be-bytes': ({normalizedRangeHeader}) => {\n    if (!normalizedRangeHeader) {\n      throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n    }\n    return `The 'unit' portion of the Range header must be set to 'bytes'. ` +\n      `The Range header provided was \"${normalizedRangeHeader}\"`;\n  },\n\n  'single-range-only': ({normalizedRangeHeader}) => {\n    if (!normalizedRangeHeader) {\n      throw new Error(`Unexpected input to 'single-range-only' error.`);\n    }\n    return `Multiple ranges are not supported. Please use a  single start ` +\n      `value, and optional end value. The Range header provided was ` +\n      `\"${normalizedRangeHeader}\"`;\n  },\n\n  'invalid-range-values': ({normalizedRangeHeader}) => {\n    if (!normalizedRangeHeader) {\n      throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n    }\n    return `The Range header is missing both start and end values. At least ` +\n      `one of those values is needed. The Range header provided was ` +\n      `\"${normalizedRangeHeader}\"`;\n  },\n\n  'no-range-header': () => {\n    return `No Range header was found in the Request provided.`;\n  },\n\n  'range-not-satisfiable': ({size, start, end}) => {\n    return `The start (${start}) and end (${end}) values in the Range are ` +\n      `not satisfiable by the cached response, which is ${size} bytes.`;\n  },\n\n  'attempt-to-cache-non-get-request': ({url, method}) => {\n    return `Unable to cache '${url}' because it is a '${method}' request and ` +\n      `only 'GET' requests can be cached.`;\n  },\n\n  'cache-put-with-no-response': ({url}) => {\n    return `There was an attempt to cache '${url}' but the response was not ` +\n      `defined.`;\n  },\n\n  'no-response': ({url, error}) => {\n    let message = `The strategy could not generate a response for '${url}'.`;\n    if (error) {\n      message += ` The underlying error is ${error}.`;\n    }\n    return message;\n  },\n\n  'bad-precaching-response': ({url, status}) => {\n    return `The precaching request for '${url}' failed with an HTTP ` +\n      `status of ${status}.`;\n  },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {messages} from './messages.mjs';\nimport '../../_version.mjs';\n\nconst fallback = (code, ...args) => {\n  let msg = code;\n  if (args.length > 0) {\n    msg += ` :: ${JSON.stringify(args)}`;\n  }\n  return msg;\n};\n\nconst generatorFunction = (code, ...args) => {\n  const message = messages[code];\n  if (!message) {\n    throw new Error(`Unable to find message for code '${code}'.`);\n  }\n\n  return message(...args);\n};\n\nexport const messageGenerator = (process.env.NODE_ENV === 'production') ?\n    fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {messageGenerator} from '../models/messages/messageGenerator.mjs';\nimport '../_version.mjs';\n\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n  /**\n   *\n   * @param {string} errorCode The error code that\n   * identifies this particular error.\n   * @param {Object=} details Any relevant arguments\n   * that will help developers identify issues should\n   * be added as a key on the context object.\n   */\n  constructor(errorCode, details) {\n    let message = messageGenerator(errorCode, details);\n\n    super(message);\n\n    this.name = errorCode;\n    this.details = details;\n  }\n}\n\nexport {WorkboxError};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {WorkboxError} from '../_private/WorkboxError.mjs';\nimport '../_version.mjs';\n\n/*\n * This method returns true if the current context is a service worker.\n */\nconst isSWEnv = (moduleName) => {\n  if (!('ServiceWorkerGlobalScope' in self)) {\n    throw new WorkboxError('not-in-sw', {moduleName});\n  }\n};\n\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, {moduleName, className, funcName, paramName}) => {\n  if (!Array.isArray(value)) {\n    throw new WorkboxError('not-an-array', {\n      moduleName,\n      className,\n      funcName,\n      paramName,\n    });\n  }\n};\n\nconst hasMethod = (object, expectedMethod,\n    {moduleName, className, funcName, paramName}) => {\n  const type = typeof object[expectedMethod];\n  if (type !== 'function') {\n    throw new WorkboxError('missing-a-method', {paramName, expectedMethod,\n      moduleName, className, funcName});\n  }\n};\n\nconst isType = (object, expectedType,\n    {moduleName, className, funcName, paramName}) => {\n  if (typeof object !== expectedType) {\n    throw new WorkboxError('incorrect-type', {paramName, expectedType,\n      moduleName, className, funcName});\n  }\n};\n\nconst isInstance = (object, expectedClass,\n    {moduleName, className, funcName,\n      paramName, isReturnValueProblem}) => {\n  if (!(object instanceof expectedClass)) {\n    throw new WorkboxError('incorrect-class', {paramName, expectedClass,\n      moduleName, className, funcName, isReturnValueProblem});\n  }\n};\n\nconst isOneOf = (value, validValues, {paramName}) => {\n  if (!validValues.includes(value)) {\n    throw new WorkboxError('invalid-value', {\n      paramName,\n      value,\n      validValueDescription: `Valid values are ${JSON.stringify(validValues)}.`,\n    });\n  }\n};\n\nconst isArrayOfClass = (value, expectedClass,\n    {moduleName, className, funcName, paramName}) => {\n  const error = new WorkboxError('not-array-of-class', {\n    value, expectedClass,\n    moduleName, className, funcName, paramName,\n  });\n  if (!Array.isArray(value)) {\n    throw error;\n  }\n\n  for (let item of value) {\n    if (!(item instanceof expectedClass)) {\n      throw error;\n    }\n  }\n};\n\nconst finalAssertExports = process.env.NODE_ENV === 'production' ? null : {\n  hasMethod,\n  isArray,\n  isInstance,\n  isOneOf,\n  isSWEnv,\n  isType,\n  isArrayOfClass,\n};\n\nexport {finalAssertExports as assert};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n\n// Callbacks to be executed whenever there's a quota error.\nconst quotaErrorCallbacks = new Set();\n\nexport {quotaErrorCallbacks};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {logger} from './_private/logger.mjs';\nimport {assert} from './_private/assert.mjs';\nimport {quotaErrorCallbacks} from './models/quotaErrorCallbacks.mjs';\nimport './_version.mjs';\n\n\n/**\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\n * there's a quota error.\n *\n * @param {Function} callback\n * @memberof workbox.core\n */\nfunction registerQuotaErrorCallback(callback) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert.isType(callback, 'function', {\n      moduleName: 'workbox-core',\n      funcName: 'register',\n      paramName: 'callback',\n    });\n  }\n\n  quotaErrorCallbacks.add(callback);\n\n  if (process.env.NODE_ENV !== 'production') {\n    logger.log('Registered a callback to respond to quota errors.', callback);\n  }\n}\n\nexport {registerQuotaErrorCallback};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n\nconst _cacheNameDetails = {\n  googleAnalytics: 'googleAnalytics',\n  precache: 'precache-v2',\n  prefix: 'workbox',\n  runtime: 'runtime',\n  suffix: self.registration.scope,\n};\n\nconst _createCacheName = (cacheName) => {\n  return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n      .filter((value) => value.length > 0)\n      .join('-');\n};\n\nexport const cacheNames = {\n  updateDetails: (details) => {\n    Object.keys(_cacheNameDetails).forEach((key) => {\n      if (typeof details[key] !== 'undefined') {\n        _cacheNameDetails[key] = details[key];\n      }\n    });\n  },\n  getGoogleAnalyticsName: (userCacheName) => {\n    return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n  },\n  getPrecacheName: (userCacheName) => {\n    return userCacheName || _createCacheName(_cacheNameDetails.precache);\n  },\n  getPrefix: () => {\n    return _cacheNameDetails.prefix;\n  },\n  getRuntimeName: (userCacheName) => {\n    return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n  },\n  getSuffix: () => {\n    return _cacheNameDetails.suffix;\n  },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\nconst getFriendlyURL = (url) => {\n  const urlObj = new URL(url, location);\n  if (urlObj.origin === location.origin) {\n    return urlObj.pathname;\n  }\n  return urlObj.href;\n};\n\nexport {getFriendlyURL};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {logger} from '../_private/logger.mjs';\nimport {quotaErrorCallbacks} from '../models/quotaErrorCallbacks.mjs';\nimport '../_version.mjs';\n\n\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox.core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n  if (process.env.NODE_ENV !== 'production') {\n    logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n        `callbacks to clean up caches.`);\n  }\n\n  for (const callback of quotaErrorCallbacks) {\n    await callback();\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log(callback, 'is complete.');\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    logger.log('Finished running callbacks.');\n  }\n}\n\nexport {executeQuotaErrorCallbacks};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n\nexport const pluginEvents = {\n  CACHE_DID_UPDATE: 'cacheDidUpdate',\n  CACHE_KEY_WILL_BE_USED: 'cacheKeyWillBeUsed',\n  CACHE_WILL_UPDATE: 'cacheWillUpdate',\n  CACHED_RESPONSE_WILL_BE_USED: 'cachedResponseWillBeUsed',\n  FETCH_DID_FAIL: 'fetchDidFail',\n  FETCH_DID_SUCCEED: 'fetchDidSucceed',\n  REQUEST_WILL_FETCH: 'requestWillFetch',\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\nexport const pluginUtils = {\n  filter: (plugins, callbackName) => {\n    return plugins.filter((plugin) => callbackName in plugin);\n  },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {WorkboxError} from './WorkboxError.mjs';\nimport {assert} from './assert.mjs';\nimport {getFriendlyURL} from './getFriendlyURL.mjs';\nimport {logger} from './logger.mjs';\nimport {executeQuotaErrorCallbacks} from './executeQuotaErrorCallbacks.mjs';\nimport {pluginEvents} from '../models/pluginEvents.mjs';\nimport {pluginUtils} from '../utils/pluginUtils.mjs';\nimport '../_version.mjs';\n\n\n/**\n * Wrapper around cache.put().\n *\n * Will call `cacheDidUpdate` on plugins if the cache was updated, using\n * `matchOptions` when determining what the old entry is.\n *\n * @param {Object} options\n * @param {string} options.cacheName\n * @param {Request} options.request\n * @param {Response} options.response\n * @param {Event} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @param {Object} [options.matchOptions]\n *\n * @private\n * @memberof module:workbox-core\n */\nconst putWrapper = async ({\n  cacheName,\n  request,\n  response,\n  event,\n  plugins = [],\n  matchOptions,\n} = {}) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (request.method && request.method !== 'GET') {\n      throw new WorkboxError('attempt-to-cache-non-get-request', {\n        url: getFriendlyURL(request.url),\n        method: request.method,\n      });\n    }\n  }\n\n  const effectiveRequest = await _getEffectiveRequest({\n    plugins, request, mode: 'write'});\n\n  if (!response) {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.error(`Cannot cache non-existent response for ` +\n        `'${getFriendlyURL(effectiveRequest.url)}'.`);\n    }\n\n    throw new WorkboxError('cache-put-with-no-response', {\n      url: getFriendlyURL(effectiveRequest.url),\n    });\n  }\n\n  let responseToCache = await _isResponseSafeToCache({\n    event,\n    plugins,\n    response,\n    request: effectiveRequest,\n  });\n\n  if (!responseToCache) {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' will ` +\n      `not be cached.`, responseToCache);\n    }\n    return;\n  }\n\n  const cache = await caches.open(cacheName);\n\n  const updatePlugins = pluginUtils.filter(\n      plugins, pluginEvents.CACHE_DID_UPDATE);\n\n  let oldResponse = updatePlugins.length > 0 ?\n      await matchWrapper({cacheName, matchOptions, request: effectiveRequest}) :\n      null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    logger.debug(`Updating the '${cacheName}' cache with a new Response for ` +\n      `${getFriendlyURL(effectiveRequest.url)}.`);\n  }\n\n  try {\n    await cache.put(effectiveRequest, responseToCache);\n  } catch (error) {\n    // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n    if (error.name === 'QuotaExceededError') {\n      await executeQuotaErrorCallbacks();\n    }\n    throw error;\n  }\n\n  for (let plugin of updatePlugins) {\n    await plugin[pluginEvents.CACHE_DID_UPDATE].call(plugin, {\n      cacheName,\n      event,\n      oldResponse,\n      newResponse: responseToCache,\n      request: effectiveRequest,\n    });\n  }\n};\n\n/**\n * This is a wrapper around cache.match().\n *\n * @param {Object} options\n * @param {string} options.cacheName Name of the cache to match against.\n * @param {Request} options.request The Request that will be used to look up\n *     cache entries.\n * @param {Event} [options.event] The event that propted the action.\n * @param {Object} [options.matchOptions] Options passed to cache.match().\n * @param {Array<Object>} [options.plugins=[]] Array of plugins.\n * @return {Response} A cached response if available.\n *\n * @private\n * @memberof module:workbox-core\n */\nconst matchWrapper = async ({\n  cacheName,\n  request,\n  event,\n  matchOptions,\n  plugins = [],\n}) => {\n  const cache = await caches.open(cacheName);\n\n  const effectiveRequest = await _getEffectiveRequest({\n    plugins, request, mode: 'read'});\n\n  let cachedResponse = await cache.match(effectiveRequest, matchOptions);\n  if (process.env.NODE_ENV !== 'production') {\n    if (cachedResponse) {\n      logger.debug(`Found a cached response in '${cacheName}'.`);\n    } else {\n      logger.debug(`No cached response found in '${cacheName}'.`);\n    }\n  }\n\n  for (const plugin of plugins) {\n    if (pluginEvents.CACHED_RESPONSE_WILL_BE_USED in plugin) {\n      cachedResponse = await plugin[pluginEvents.CACHED_RESPONSE_WILL_BE_USED]\n          .call(plugin, {\n            cacheName,\n            event,\n            matchOptions,\n            cachedResponse,\n            request: effectiveRequest,\n          });\n      if (process.env.NODE_ENV !== 'production') {\n        if (cachedResponse) {\n          assert.isInstance(cachedResponse, Response, {\n            moduleName: 'Plugin',\n            funcName: pluginEvents.CACHED_RESPONSE_WILL_BE_USED,\n            isReturnValueProblem: true,\n          });\n        }\n      }\n    }\n  }\n\n  return cachedResponse;\n};\n\n/**\n * This method will call cacheWillUpdate on the available plugins (or use\n * status === 200) to determine if the Response is safe and valid to cache.\n *\n * @param {Object} options\n * @param {Request} options.request\n * @param {Response} options.response\n * @param {Event} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst _isResponseSafeToCache = async ({request, response, event, plugins}) => {\n  let responseToCache = response;\n  let pluginsUsed = false;\n  for (let plugin of plugins) {\n    if (pluginEvents.CACHE_WILL_UPDATE in plugin) {\n      pluginsUsed = true;\n      responseToCache = await plugin[pluginEvents.CACHE_WILL_UPDATE]\n          .call(plugin, {\n            request,\n            response: responseToCache,\n            event,\n          });\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (responseToCache) {\n          assert.isInstance(responseToCache, Response, {\n            moduleName: 'Plugin',\n            funcName: pluginEvents.CACHE_WILL_UPDATE,\n            isReturnValueProblem: true,\n          });\n        }\n      }\n\n      if (!responseToCache) {\n        break;\n      }\n    }\n  }\n\n  if (!pluginsUsed) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!responseToCache.status === 200) {\n        if (responseToCache.status === 0) {\n          logger.warn(`The response for '${request.url}' is an opaque ` +\n            `response. The caching strategy that you're using will not ` +\n            `cache opaque responses by default.`);\n        } else {\n          logger.debug(`The response for '${request.url}' returned ` +\n          `a status code of '${response.status}' and won't be cached as a ` +\n          `result.`);\n        }\n      }\n    }\n    responseToCache = responseToCache.status === 200 ? responseToCache : null;\n  }\n\n  return responseToCache ? responseToCache : null;\n};\n\n/**\n * Checks the list of plugins for the cacheKeyWillBeUsed callback, and\n * executes any of those callbacks found in sequence. The final `Request` object\n * returned by the last plugin is treated as the cache key for cache reads\n * and/or writes.\n *\n * @param {Object} options\n * @param {Request} options.request\n * @param {string} options.mode\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Request>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst _getEffectiveRequest = async ({request, mode, plugins}) => {\n  const cacheKeyWillBeUsedPlugins = pluginUtils.filter(\n      plugins, pluginEvents.CACHE_KEY_WILL_BE_USED);\n\n  let effectiveRequest = request;\n  for (const plugin of cacheKeyWillBeUsedPlugins) {\n    effectiveRequest = await plugin[pluginEvents.CACHE_KEY_WILL_BE_USED].call(\n        plugin, {mode, request: effectiveRequest});\n\n    if (typeof effectiveRequest === 'string') {\n      effectiveRequest = new Request(effectiveRequest);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(effectiveRequest, Request, {\n        moduleName: 'Plugin',\n        funcName: pluginEvents.CACHE_KEY_WILL_BE_USED,\n        isReturnValueProblem: true,\n      });\n    }\n  }\n\n  return effectiveRequest;\n};\n\nexport const cacheWrapper = {\n  put: putWrapper,\n  match: matchWrapper,\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n\n/**\n * A class that wraps common IndexedDB functionality in a promise-based API.\n * It exposes all the underlying power and functionality of IndexedDB, but\n * wraps the most commonly used features in a way that's much simpler to use.\n *\n * @private\n */\nexport class DBWrapper {\n  /**\n   * @param {string} name\n   * @param {number} version\n   * @param {Object=} [callback]\n   * @param {!Function} [callbacks.onupgradeneeded]\n   * @param {!Function} [callbacks.onversionchange] Defaults to\n   *     DBWrapper.prototype._onversionchange when not specified.\n   * @private\n   */\n  constructor(name, version, {\n    onupgradeneeded,\n    onversionchange = this._onversionchange,\n  } = {}) {\n    this._name = name;\n    this._version = version;\n    this._onupgradeneeded = onupgradeneeded;\n    this._onversionchange = onversionchange;\n\n    // If this is null, it means the database isn't open.\n    this._db = null;\n  }\n\n  /**\n   * Returns the IDBDatabase instance (not normally needed).\n   *\n   * @private\n   */\n  get db() {\n    return this._db;\n  }\n\n  /**\n   * Opens a connected to an IDBDatabase, invokes any onupgradedneeded\n   * callback, and added an onversionchange callback to the database.\n   *\n   * @return {IDBDatabase}\n   * @private\n   */\n  async open() {\n    if (this._db) return;\n\n    this._db = await new Promise((resolve, reject) => {\n      // This flag is flipped to true if the timeout callback runs prior\n      // to the request failing or succeeding. Note: we use a timeout instead\n      // of an onblocked handler since there are cases where onblocked will\n      // never never run. A timeout better handles all possible scenarios:\n      // https://github.com/w3c/IndexedDB/issues/223\n      let openRequestTimedOut = false;\n      setTimeout(() => {\n        openRequestTimedOut = true;\n        reject(new Error('The open request was blocked and timed out'));\n      }, this.OPEN_TIMEOUT);\n\n      const openRequest = indexedDB.open(this._name, this._version);\n      openRequest.onerror = () => reject(openRequest.error);\n      openRequest.onupgradeneeded = (evt) => {\n        if (openRequestTimedOut) {\n          openRequest.transaction.abort();\n          evt.target.result.close();\n        } else if (this._onupgradeneeded) {\n          this._onupgradeneeded(evt);\n        }\n      };\n      openRequest.onsuccess = ({target}) => {\n        const db = target.result;\n        if (openRequestTimedOut) {\n          db.close();\n        } else {\n          db.onversionchange = this._onversionchange.bind(this);\n          resolve(db);\n        }\n      };\n    });\n\n    return this;\n  }\n\n  /**\n   * Polyfills the native `getKey()` method. Note, this is overridden at\n   * runtime if the browser supports the native method.\n   *\n   * @param {string} storeName\n   * @param {*} query\n   * @return {Array}\n   * @private\n   */\n  async getKey(storeName, query) {\n    return (await this.getAllKeys(storeName, query, 1))[0];\n  }\n\n  /**\n   * Polyfills the native `getAll()` method. Note, this is overridden at\n   * runtime if the browser supports the native method.\n   *\n   * @param {string} storeName\n   * @param {*} query\n   * @param {number} count\n   * @return {Array}\n   * @private\n   */\n  async getAll(storeName, query, count) {\n    return await this.getAllMatching(storeName, {query, count});\n  }\n\n\n  /**\n   * Polyfills the native `getAllKeys()` method. Note, this is overridden at\n   * runtime if the browser supports the native method.\n   *\n   * @param {string} storeName\n   * @param {*} query\n   * @param {number} count\n   * @return {Array}\n   * @private\n   */\n  async getAllKeys(storeName, query, count) {\n    return (await this.getAllMatching(\n        storeName, {query, count, includeKeys: true})).map(({key}) => key);\n  }\n\n  /**\n   * Supports flexible lookup in an object store by specifying an index,\n   * query, direction, and count. This method returns an array of objects\n   * with the signature .\n   *\n   * @param {string} storeName\n   * @param {Object} [opts]\n   * @param {string} [opts.index] The index to use (if specified).\n   * @param {*} [opts.query]\n   * @param {IDBCursorDirection} [opts.direction]\n   * @param {number} [opts.count] The max number of results to return.\n   * @param {boolean} [opts.includeKeys] When true, the structure of the\n   *     returned objects is changed from an array of values to an array of\n   *     objects in the form {key, primaryKey, value}.\n   * @return {Array}\n   * @private\n   */\n  async getAllMatching(storeName, {\n    index,\n    query = null, // IE errors if query === `undefined`.\n    direction = 'next',\n    count,\n    includeKeys,\n  } = {}) {\n    return await this.transaction([storeName], 'readonly', (txn, done) => {\n      const store = txn.objectStore(storeName);\n      const target = index ? store.index(index) : store;\n      const results = [];\n\n      target.openCursor(query, direction).onsuccess = ({target}) => {\n        const cursor = target.result;\n        if (cursor) {\n          const {primaryKey, key, value} = cursor;\n          results.push(includeKeys ? {primaryKey, key, value} : value);\n          if (count && results.length >= count) {\n            done(results);\n          } else {\n            cursor.continue();\n          }\n        } else {\n          done(results);\n        }\n      };\n    });\n  }\n\n  /**\n   * Accepts a list of stores, a transaction type, and a callback and\n   * performs a transaction. A promise is returned that resolves to whatever\n   * value the callback chooses. The callback holds all the transaction logic\n   * and is invoked with two arguments:\n   *   1. The IDBTransaction object\n   *   2. A `done` function, that's used to resolve the promise when\n   *      when the transaction is done, if passed a value, the promise is\n   *      resolved to that value.\n   *\n   * @param {Array<string>} storeNames An array of object store names\n   *     involved in the transaction.\n   * @param {string} type Can be `readonly` or `readwrite`.\n   * @param {!Function} callback\n   * @return {*} The result of the transaction ran by the callback.\n   * @private\n   */\n  async transaction(storeNames, type, callback) {\n    await this.open();\n    return await new Promise((resolve, reject) => {\n      const txn = this._db.transaction(storeNames, type);\n      txn.onabort = ({target}) => reject(target.error);\n      txn.oncomplete = () => resolve();\n\n      callback(txn, (value) => resolve(value));\n    });\n  }\n\n  /**\n   * Delegates async to a native IDBObjectStore method.\n   *\n   * @param {string} method The method name.\n   * @param {string} storeName The object store name.\n   * @param {string} type Can be `readonly` or `readwrite`.\n   * @param {...*} args The list of args to pass to the native method.\n   * @return {*} The result of the transaction.\n   * @private\n   */\n  async _call(method, storeName, type, ...args) {\n    const callback = (txn, done) => {\n      txn.objectStore(storeName)[method](...args).onsuccess = ({target}) => {\n        done(target.result);\n      };\n    };\n\n    return await this.transaction([storeName], type, callback);\n  }\n\n  /**\n   * The default onversionchange handler, which closes the database so other\n   * connections can open without being blocked.\n   *\n   * @private\n   */\n  _onversionchange() {\n    this.close();\n  }\n\n  /**\n   * Closes the connection opened by `DBWrapper.open()`. Generally this method\n   * doesn't need to be called since:\n   *   1. It's usually better to keep a connection open since opening\n   *      a new connection is somewhat slow.\n   *   2. Connections are automatically closed when the reference is\n   *      garbage collected.\n   * The primary use case for needing to close a connection is when another\n   * reference (typically in another tab) needs to upgrade it and would be\n   * blocked by the current, open connection.\n   *\n   * @private\n   */\n  close() {\n    if (this._db) {\n      this._db.close();\n      this._db = null;\n    }\n  }\n}\n\n// Exposed to let users modify the default timeout on a per-instance\n// or global basis.\nDBWrapper.prototype.OPEN_TIMEOUT = 2000;\n\n// Wrap native IDBObjectStore methods according to their mode.\nconst methodsToWrap = {\n  'readonly': ['get', 'count', 'getKey', 'getAll', 'getAllKeys'],\n  'readwrite': ['add', 'put', 'clear', 'delete'],\n};\nfor (const [mode, methods] of Object.entries(methodsToWrap)) {\n  for (const method of methods) {\n    if (method in IDBObjectStore.prototype) {\n      // Don't use arrow functions here since we're outside of the class.\n      DBWrapper.prototype[method] = async function(storeName, ...args) {\n        return await this._call(method, storeName, mode, ...args);\n      };\n    }\n  }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nexport class Deferred {\n  /**\n   * Creates a promise and exposes its resolve and reject functions as methods.\n   */\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n\n/**\n * Deletes the database.\n * Note: this is exported separately from the DBWrapper module because most\n * usages of IndexedDB in workbox dont need deleting, and this way it can be\n * reused in tests to delete databases without creating DBWrapper instances.\n *\n * @param {string} name The database name.\n * @private\n */\nexport const deleteDatabase = async (name) => {\n  await new Promise((resolve, reject) => {\n    const request = indexedDB.deleteDatabase(name);\n    request.onerror = ({target}) => {\n      reject(target.error);\n    };\n    request.onblocked = () => {\n      reject(new Error('Delete blocked'));\n    };\n    request.onsuccess = () => {\n      resolve();\n    };\n  });\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {WorkboxError} from './WorkboxError.mjs';\nimport {logger} from './logger.mjs';\nimport {assert} from './assert.mjs';\nimport {getFriendlyURL} from '../_private/getFriendlyURL.mjs';\nimport {pluginEvents} from '../models/pluginEvents.mjs';\nimport {pluginUtils} from '../utils/pluginUtils.mjs';\nimport '../_version.mjs';\n\n/**\n * Wrapper around the fetch API.\n *\n * Will call requestWillFetch on available plugins.\n *\n * @param {Object} options\n * @param {Request|string} options.request\n * @param {Object} [options.fetchOptions]\n * @param {Event} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst wrappedFetch = async ({\n  request,\n  fetchOptions,\n  event,\n  plugins = []}) => {\n  // We *should* be able to call `await event.preloadResponse` even if it's\n  // undefined, but for some reason, doing so leads to errors in our Node unit\n  // tests. To work around that, explicitly check preloadResponse's value first.\n  if (event && event.preloadResponse) {\n    const possiblePreloadResponse = await event.preloadResponse;\n    if (possiblePreloadResponse) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.log(`Using a preloaded navigation response for ` +\n          `'${getFriendlyURL(request.url)}'`);\n      }\n      return possiblePreloadResponse;\n    }\n  }\n\n  if (typeof request === 'string') {\n    request = new Request(request);\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert.isInstance(request, Request, {\n      paramName: request,\n      expectedClass: 'Request',\n      moduleName: 'workbox-core',\n      className: 'fetchWrapper',\n      funcName: 'wrappedFetch',\n    });\n  }\n\n  const failedFetchPlugins = pluginUtils.filter(\n      plugins, pluginEvents.FETCH_DID_FAIL);\n\n  // If there is a fetchDidFail plugin, we need to save a clone of the\n  // original request before it's either modified by a requestWillFetch\n  // plugin or before the original request's body is consumed via fetch().\n  const originalRequest = failedFetchPlugins.length > 0 ?\n    request.clone() : null;\n\n  try {\n    for (let plugin of plugins) {\n      if (pluginEvents.REQUEST_WILL_FETCH in plugin) {\n        request = await plugin[pluginEvents.REQUEST_WILL_FETCH].call(plugin, {\n          request: request.clone(),\n          event,\n        });\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (request) {\n            assert.isInstance(request, Request, {\n              moduleName: 'Plugin',\n              funcName: pluginEvents.CACHED_RESPONSE_WILL_BE_USED,\n              isReturnValueProblem: true,\n            });\n          }\n        }\n      }\n    }\n  } catch (err) {\n    throw new WorkboxError('plugin-error-request-will-fetch', {\n      thrownError: err,\n    });\n  }\n\n  // The request can be altered by plugins with `requestWillFetch` making\n  // the original request (Most likely from a `fetch` event) to be different\n  // to the Request we make. Pass both to `fetchDidFail` to aid debugging.\n  let pluginFilteredRequest = request.clone();\n\n  try {\n    let fetchResponse;\n\n    // See https://github.com/GoogleChrome/workbox/issues/1796\n    if (request.mode === 'navigate') {\n      fetchResponse = await fetch(request);\n    } else {\n      fetchResponse = await fetch(request, fetchOptions);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.debug(`Network request for `+\n      `'${getFriendlyURL(request.url)}' returned a response with ` +\n      `status '${fetchResponse.status}'.`);\n    }\n\n    for (const plugin of plugins) {\n      if (pluginEvents.FETCH_DID_SUCCEED in plugin) {\n        fetchResponse = await plugin[pluginEvents.FETCH_DID_SUCCEED]\n            .call(plugin, {\n              event,\n              request: pluginFilteredRequest,\n              response: fetchResponse,\n            });\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (fetchResponse) {\n            assert.isInstance(fetchResponse, Response, {\n              moduleName: 'Plugin',\n              funcName: pluginEvents.FETCH_DID_SUCCEED,\n              isReturnValueProblem: true,\n            });\n          }\n        }\n      }\n    }\n\n    return fetchResponse;\n  } catch (error) {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.error(`Network request for `+\n      `'${getFriendlyURL(request.url)}' threw an error.`, error);\n    }\n\n    for (const plugin of failedFetchPlugins) {\n      await plugin[pluginEvents.FETCH_DID_FAIL].call(plugin, {\n        error,\n        event,\n        originalRequest: originalRequest.clone(),\n        request: pluginFilteredRequest.clone(),\n      });\n    }\n\n    throw error;\n  }\n};\n\nconst fetchWrapper = {\n  fetch: wrappedFetch,\n};\n\nexport {fetchWrapper};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n// We either expose defaults or we expose every named export.\nimport {assert} from './_private/assert.mjs';\nimport {cacheNames} from './_private/cacheNames.mjs';\nimport {cacheWrapper} from './_private/cacheWrapper.mjs';\nimport {DBWrapper} from './_private/DBWrapper.mjs';\nimport {Deferred} from './_private/Deferred.mjs';\nimport {deleteDatabase} from './_private/deleteDatabase.mjs';\nimport {executeQuotaErrorCallbacks} from './_private/executeQuotaErrorCallbacks.mjs';\nimport {fetchWrapper} from './_private/fetchWrapper.mjs';\nimport {getFriendlyURL} from './_private/getFriendlyURL.mjs';\nimport {logger} from './_private/logger.mjs';\nimport {WorkboxError} from './_private/WorkboxError.mjs';\n\nimport './_version.mjs';\n\nexport {\n  assert,\n  cacheNames,\n  cacheWrapper,\n  DBWrapper,\n  Deferred,\n  deleteDatabase,\n  executeQuotaErrorCallbacks,\n  fetchWrapper,\n  getFriendlyURL,\n  logger,\n  WorkboxError,\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport './_version.mjs';\n\n\n/**\n * Claim any currently available clients once the service worker\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\n *\n * @alias workbox.core.clientsClaim\n */\nexport const clientsClaim = () => {\n  addEventListener('activate', () => clients.claim());\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {cacheNames as _cacheNames} from './_private/cacheNames.mjs';\nimport './_version.mjs';\n\n\n/**\n * Get the current cache names and prefix/suffix used by Workbox.\n *\n * `cacheNames.precache` is used for precached assets,\n * `cacheNames.googleAnalytics` is used by `workbox-google-analytics` to\n * store `analytics.js`, and `cacheNames.runtime` is used for everything else.\n *\n * `cacheNames.prefix` can be used to retrieve just the current prefix value.\n * `cacheNames.suffix` can be used to retrieve just the current suffix value.\n *\n * @return {Object} An object with `precache`, `runtime`, `prefix`, and\n *     `googleAnalytics` properties.\n *\n * @alias workbox.core.cacheNames\n */\nexport const cacheNames = {\n  get googleAnalytics() {\n    return _cacheNames.getGoogleAnalyticsName();\n  },\n  get precache() {\n    return _cacheNames.getPrecacheName();\n  },\n  get prefix() {\n    return _cacheNames.getPrefix();\n  },\n  get runtime() {\n    return _cacheNames.getRuntimeName();\n  },\n  get suffix() {\n    return _cacheNames.getSuffix();\n  },\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from './_private/assert.mjs';\nimport {cacheNames} from './_private/cacheNames.mjs';\nimport {WorkboxError} from './_private/WorkboxError.mjs';\nimport './_version.mjs';\n\n\n/**\n * Modifies the default cache names used by the Workbox packages.\n * Cache names are generated as `<prefix>-<Cache Name>-<suffix>`.\n *\n * @param {Object} details\n * @param {Object} [details.prefix] The string to add to the beginning of\n *     the precache and runtime cache names.\n * @param {Object} [details.suffix] The string to add to the end of\n *     the precache and runtime cache names.\n * @param {Object} [details.precache] The cache name to use for precache\n *     caching.\n * @param {Object} [details.runtime] The cache name to use for runtime caching.\n * @param {Object} [details.googleAnalytics] The cache name to use for\n *     `workbox-google-analytics` caching.\n *\n * @alias workbox.core.setCacheNameDetails\n */\nexport const setCacheNameDetails = (details) => {\n  if (process.env.NODE_ENV !== 'production') {\n    Object.keys(details).forEach((key) => {\n      assert.isType(details[key], 'string', {\n        moduleName: 'workbox-core',\n        funcName: 'setCacheNameDetails',\n        paramName: `details.${key}`,\n      });\n    });\n\n    if ('precache' in details && details.precache.length === 0) {\n      throw new WorkboxError('invalid-cache-name', {\n        cacheNameId: 'precache',\n        value: details.precache,\n      });\n    }\n\n    if ('runtime' in details && details.runtime.length === 0) {\n      throw new WorkboxError('invalid-cache-name', {\n        cacheNameId: 'runtime',\n        value: details.runtime,\n      });\n    }\n\n    if ('googleAnalytics' in details && details.googleAnalytics.length === 0) {\n      throw new WorkboxError('invalid-cache-name', {\n        cacheNameId: 'googleAnalytics',\n        value: details.googleAnalytics,\n      });\n    }\n  }\n\n  cacheNames.updateDetails(details);\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport './_version.mjs';\n\n\n/**\n * Force a service worker to become active, instead of waiting. This is\n * normally used in conjunction with `clientsClaim()`.\n *\n * @alias workbox.core.skipWaiting\n */\nexport const skipWaiting = () => {\n  // We need to explicitly call `self.skipWaiting()` here because we're\n  // shadowing `skipWaiting` with this local function.\n  addEventListener('install', () => self.skipWaiting());\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {registerQuotaErrorCallback} from './registerQuotaErrorCallback.mjs';\nimport * as _private from './_private.mjs';\nimport {clientsClaim} from './clientsClaim.mjs';\nimport {cacheNames} from './cacheNames.mjs';\nimport {setCacheNameDetails} from './setCacheNameDetails.mjs';\nimport {skipWaiting} from './skipWaiting.mjs';\nimport './_version.mjs';\n\n\n// Give our version strings something to hang off of.\ntry {\n  self.workbox.v = self.workbox.v || {};\n} catch (errer) {\n  // NOOP\n}\n\n/**\n * All of the Workbox service worker libraries use workbox-core for shared\n * code as well as setting default values that need to be shared (like cache\n * names).\n *\n * @namespace workbox.core\n */\n\nexport {\n  _private,\n  clientsClaim,\n  cacheNames,\n  registerQuotaErrorCallback,\n  setCacheNameDetails,\n  skipWaiting,\n};\n"]},"metadata":{},"sourceType":"script"}