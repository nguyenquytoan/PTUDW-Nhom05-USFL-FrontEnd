{"ast":null,"code":"/**\n * @fileoverview A rule to control the style of variable initializations.\n * @author Colin Ihrig\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given node is a for loop.\n * @param {ASTNode} block A node to check.\n * @returns {boolean} `true` when the node is a for loop.\n */\n\nfunction isForLoop(block) {\n  return block.type === \"ForInStatement\" || block.type === \"ForOfStatement\" || block.type === \"ForStatement\";\n}\n/**\n * Checks whether or not a given declarator node has its initializer.\n * @param {ASTNode} node A declarator node to check.\n * @returns {boolean} `true` when the node has its initializer.\n */\n\n\nfunction isInitialized(node) {\n  const declaration = node.parent;\n  const block = declaration.parent;\n\n  if (isForLoop(block)) {\n    if (block.type === \"ForStatement\") {\n      return block.init === declaration;\n    }\n\n    return block.left === declaration;\n  }\n\n  return Boolean(node.init);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require or disallow initialization in variable declarations\",\n      category: \"Variables\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/init-declarations\"\n    },\n    schema: {\n      anyOf: [{\n        type: \"array\",\n        items: [{\n          enum: [\"always\"]\n        }],\n        minItems: 0,\n        maxItems: 1\n      }, {\n        type: \"array\",\n        items: [{\n          enum: [\"never\"]\n        }, {\n          type: \"object\",\n          properties: {\n            ignoreForLoopInit: {\n              type: \"boolean\"\n            }\n          },\n          additionalProperties: false\n        }],\n        minItems: 0,\n        maxItems: 2\n      }]\n    },\n    messages: {\n      initialized: \"Variable '{{idName}}' should be initialized on declaration.\",\n      notInitialized: \"Variable '{{idName}}' should not be initialized on declaration.\"\n    }\n  },\n\n  create(context) {\n    const MODE_ALWAYS = \"always\",\n          MODE_NEVER = \"never\";\n    const mode = context.options[0] || MODE_ALWAYS;\n    const params = context.options[1] || {}; //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n      \"VariableDeclaration:exit\"(node) {\n        const kind = node.kind,\n              declarations = node.declarations;\n\n        for (let i = 0; i < declarations.length; ++i) {\n          const declaration = declarations[i],\n                id = declaration.id,\n                initialized = isInitialized(declaration),\n                isIgnoredForLoop = params.ignoreForLoopInit && isForLoop(node.parent);\n          let messageId = \"\";\n\n          if (mode === MODE_ALWAYS && !initialized) {\n            messageId = \"initialized\";\n          } else if (mode === MODE_NEVER && kind !== \"const\" && initialized && !isIgnoredForLoop) {\n            messageId = \"notInitialized\";\n          }\n\n          if (id.type === \"Identifier\" && messageId) {\n            context.report({\n              node: declaration,\n              messageId,\n              data: {\n                idName: id.name\n              }\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/init-declarations.js"],"names":["isForLoop","block","type","isInitialized","node","declaration","parent","init","left","Boolean","module","exports","meta","docs","description","category","recommended","url","schema","anyOf","items","enum","minItems","maxItems","properties","ignoreForLoopInit","additionalProperties","messages","initialized","notInitialized","create","context","MODE_ALWAYS","MODE_NEVER","mode","options","params","kind","declarations","i","length","id","isIgnoredForLoop","messageId","report","data","idName","name"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEA;;;;;;AAKA,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,SAAOA,KAAK,CAACC,IAAN,KAAe,gBAAf,IACPD,KAAK,CAACC,IAAN,KAAe,gBADR,IAEPD,KAAK,CAACC,IAAN,KAAe,cAFf;AAGH;AAED;;;;;;;AAKA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,QAAMC,WAAW,GAAGD,IAAI,CAACE,MAAzB;AACA,QAAML,KAAK,GAAGI,WAAW,CAACC,MAA1B;;AAEA,MAAIN,SAAS,CAACC,KAAD,CAAb,EAAsB;AAClB,QAAIA,KAAK,CAACC,IAAN,KAAe,cAAnB,EAAmC;AAC/B,aAAOD,KAAK,CAACM,IAAN,KAAeF,WAAtB;AACH;;AACD,WAAOJ,KAAK,CAACO,IAAN,KAAeH,WAAtB;AACH;;AACD,SAAOI,OAAO,CAACL,IAAI,CAACG,IAAN,CAAd;AACH,C,CAED;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFV,IAAAA,IAAI,EAAE,YADJ;AAGFW,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,6DADX;AAEFC,MAAAA,QAAQ,EAAE,WAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE;AACJC,MAAAA,KAAK,EAAE,CACH;AACIjB,QAAAA,IAAI,EAAE,OADV;AAEIkB,QAAAA,KAAK,EAAE,CACH;AACIC,UAAAA,IAAI,EAAE,CAAC,QAAD;AADV,SADG,CAFX;AAOIC,QAAAA,QAAQ,EAAE,CAPd;AAQIC,QAAAA,QAAQ,EAAE;AARd,OADG,EAWH;AACIrB,QAAAA,IAAI,EAAE,OADV;AAEIkB,QAAAA,KAAK,EAAE,CACH;AACIC,UAAAA,IAAI,EAAE,CAAC,OAAD;AADV,SADG,EAIH;AACInB,UAAAA,IAAI,EAAE,QADV;AAEIsB,UAAAA,UAAU,EAAE;AACRC,YAAAA,iBAAiB,EAAE;AACfvB,cAAAA,IAAI,EAAE;AADS;AADX,WAFhB;AAOIwB,UAAAA,oBAAoB,EAAE;AAP1B,SAJG,CAFX;AAgBIJ,QAAAA,QAAQ,EAAE,CAhBd;AAiBIC,QAAAA,QAAQ,EAAE;AAjBd,OAXG;AADH,KAVN;AA2CFI,IAAAA,QAAQ,EAAE;AACNC,MAAAA,WAAW,EAAE,6DADP;AAENC,MAAAA,cAAc,EAAE;AAFV;AA3CR,GADO;;AAkDbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,UAAMC,WAAW,GAAG,QAApB;AAAA,UACIC,UAAU,GAAG,OADjB;AAGA,UAAMC,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgB,CAAhB,KAAsBH,WAAnC;AACA,UAAMI,MAAM,GAAGL,OAAO,CAACI,OAAR,CAAgB,CAAhB,KAAsB,EAArC,CANY,CAQZ;AACA;AACA;;AAEA,WAAO;AACH,iCAA2B/B,IAA3B,EAAiC;AAE7B,cAAMiC,IAAI,GAAGjC,IAAI,CAACiC,IAAlB;AAAA,cACIC,YAAY,GAAGlC,IAAI,CAACkC,YADxB;;AAGA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACE,MAAjC,EAAyC,EAAED,CAA3C,EAA8C;AAC1C,gBAAMlC,WAAW,GAAGiC,YAAY,CAACC,CAAD,CAAhC;AAAA,gBACIE,EAAE,GAAGpC,WAAW,CAACoC,EADrB;AAAA,gBAEIb,WAAW,GAAGzB,aAAa,CAACE,WAAD,CAF/B;AAAA,gBAGIqC,gBAAgB,GAAGN,MAAM,CAACX,iBAAP,IAA4BzB,SAAS,CAACI,IAAI,CAACE,MAAN,CAH5D;AAIA,cAAIqC,SAAS,GAAG,EAAhB;;AAEA,cAAIT,IAAI,KAAKF,WAAT,IAAwB,CAACJ,WAA7B,EAA0C;AACtCe,YAAAA,SAAS,GAAG,aAAZ;AACH,WAFD,MAEO,IAAIT,IAAI,KAAKD,UAAT,IAAuBI,IAAI,KAAK,OAAhC,IAA2CT,WAA3C,IAA0D,CAACc,gBAA/D,EAAiF;AACpFC,YAAAA,SAAS,GAAG,gBAAZ;AACH;;AAED,cAAIF,EAAE,CAACvC,IAAH,KAAY,YAAZ,IAA4ByC,SAAhC,EAA2C;AACvCZ,YAAAA,OAAO,CAACa,MAAR,CAAe;AACXxC,cAAAA,IAAI,EAAEC,WADK;AAEXsC,cAAAA,SAFW;AAGXE,cAAAA,IAAI,EAAE;AACFC,gBAAAA,MAAM,EAAEL,EAAE,CAACM;AADT;AAHK,aAAf;AAOH;AACJ;AACJ;;AA7BE,KAAP;AA+BH;;AA7FY,CAAjB","sourcesContent":["/**\n * @fileoverview A rule to control the style of variable initializations.\n * @author Colin Ihrig\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given node is a for loop.\n * @param {ASTNode} block A node to check.\n * @returns {boolean} `true` when the node is a for loop.\n */\nfunction isForLoop(block) {\n    return block.type === \"ForInStatement\" ||\n    block.type === \"ForOfStatement\" ||\n    block.type === \"ForStatement\";\n}\n\n/**\n * Checks whether or not a given declarator node has its initializer.\n * @param {ASTNode} node A declarator node to check.\n * @returns {boolean} `true` when the node has its initializer.\n */\nfunction isInitialized(node) {\n    const declaration = node.parent;\n    const block = declaration.parent;\n\n    if (isForLoop(block)) {\n        if (block.type === \"ForStatement\") {\n            return block.init === declaration;\n        }\n        return block.left === declaration;\n    }\n    return Boolean(node.init);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require or disallow initialization in variable declarations\",\n            category: \"Variables\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/init-declarations\"\n        },\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\"]\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 1\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"never\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                ignoreForLoopInit: {\n                                    type: \"boolean\"\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        },\n        messages: {\n            initialized: \"Variable '{{idName}}' should be initialized on declaration.\",\n            notInitialized: \"Variable '{{idName}}' should not be initialized on declaration.\"\n        }\n    },\n\n    create(context) {\n\n        const MODE_ALWAYS = \"always\",\n            MODE_NEVER = \"never\";\n\n        const mode = context.options[0] || MODE_ALWAYS;\n        const params = context.options[1] || {};\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            \"VariableDeclaration:exit\"(node) {\n\n                const kind = node.kind,\n                    declarations = node.declarations;\n\n                for (let i = 0; i < declarations.length; ++i) {\n                    const declaration = declarations[i],\n                        id = declaration.id,\n                        initialized = isInitialized(declaration),\n                        isIgnoredForLoop = params.ignoreForLoopInit && isForLoop(node.parent);\n                    let messageId = \"\";\n\n                    if (mode === MODE_ALWAYS && !initialized) {\n                        messageId = \"initialized\";\n                    } else if (mode === MODE_NEVER && kind !== \"const\" && initialized && !isIgnoredForLoop) {\n                        messageId = \"notInitialized\";\n                    }\n\n                    if (id.type === \"Identifier\" && messageId) {\n                        context.report({\n                            node: declaration,\n                            messageId,\n                            data: {\n                                idName: id.name\n                            }\n                        });\n                    }\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}