{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('./acorn')) : typeof define === 'function' && define.amd ? define(['exports', './acorn'], factory) : factory((global.acorn = global.acorn || {}, global.acorn.loose = {}), global.acorn);\n})(this, function (exports, __acorn) {\n  'use strict';\n\n  function noop() {} // Registered plugins\n\n\n  var pluginsLoose = {};\n\n  var LooseParser = function LooseParser(input, options) {\n    if (options === void 0) options = {};\n    this.toks = __acorn.tokenizer(input, options);\n    this.options = this.toks.options;\n    this.input = this.toks.input;\n    this.tok = this.last = {\n      type: __acorn.tokTypes.eof,\n      start: 0,\n      end: 0\n    };\n    this.tok.validateRegExpFlags = noop;\n    this.tok.validateRegExpPattern = noop;\n\n    if (this.options.locations) {\n      var here = this.toks.curPosition();\n      this.tok.loc = new __acorn.SourceLocation(this.toks, here, here);\n    }\n\n    this.ahead = []; // Tokens ahead\n\n    this.context = []; // Indentation contexted\n\n    this.curIndent = 0;\n    this.curLineStart = 0;\n    this.nextLineStart = this.lineEnd(this.curLineStart) + 1;\n    this.inAsync = false;\n    this.inFunction = false; // Load plugins\n\n    this.options.pluginsLoose = options.pluginsLoose || {};\n    this.loadPlugins(this.options.pluginsLoose);\n  };\n\n  LooseParser.prototype.startNode = function startNode() {\n    return new __acorn.Node(this.toks, this.tok.start, this.options.locations ? this.tok.loc.start : null);\n  };\n\n  LooseParser.prototype.storeCurrentPos = function storeCurrentPos() {\n    return this.options.locations ? [this.tok.start, this.tok.loc.start] : this.tok.start;\n  };\n\n  LooseParser.prototype.startNodeAt = function startNodeAt(pos) {\n    if (this.options.locations) {\n      return new __acorn.Node(this.toks, pos[0], pos[1]);\n    } else {\n      return new __acorn.Node(this.toks, pos);\n    }\n  };\n\n  LooseParser.prototype.finishNode = function finishNode(node, type) {\n    node.type = type;\n    node.end = this.last.end;\n\n    if (this.options.locations) {\n      node.loc.end = this.last.loc.end;\n    }\n\n    if (this.options.ranges) {\n      node.range[1] = this.last.end;\n    }\n\n    return node;\n  };\n\n  LooseParser.prototype.dummyNode = function dummyNode(type) {\n    var dummy = this.startNode();\n    dummy.type = type;\n    dummy.end = dummy.start;\n\n    if (this.options.locations) {\n      dummy.loc.end = dummy.loc.start;\n    }\n\n    if (this.options.ranges) {\n      dummy.range[1] = dummy.start;\n    }\n\n    this.last = {\n      type: __acorn.tokTypes.name,\n      start: dummy.start,\n      end: dummy.start,\n      loc: dummy.loc\n    };\n    return dummy;\n  };\n\n  LooseParser.prototype.dummyIdent = function dummyIdent() {\n    var dummy = this.dummyNode(\"Identifier\");\n    dummy.name = \"✖\";\n    return dummy;\n  };\n\n  LooseParser.prototype.dummyString = function dummyString() {\n    var dummy = this.dummyNode(\"Literal\");\n    dummy.value = dummy.raw = \"✖\";\n    return dummy;\n  };\n\n  LooseParser.prototype.eat = function eat(type) {\n    if (this.tok.type === type) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  LooseParser.prototype.isContextual = function isContextual(name) {\n    return this.tok.type === __acorn.tokTypes.name && this.tok.value === name;\n  };\n\n  LooseParser.prototype.eatContextual = function eatContextual(name) {\n    return this.tok.value === name && this.eat(__acorn.tokTypes.name);\n  };\n\n  LooseParser.prototype.canInsertSemicolon = function canInsertSemicolon() {\n    return this.tok.type === __acorn.tokTypes.eof || this.tok.type === __acorn.tokTypes.braceR || __acorn.lineBreak.test(this.input.slice(this.last.end, this.tok.start));\n  };\n\n  LooseParser.prototype.semicolon = function semicolon() {\n    return this.eat(__acorn.tokTypes.semi);\n  };\n\n  LooseParser.prototype.expect = function expect(type) {\n    var this$1 = this;\n\n    if (this.eat(type)) {\n      return true;\n    }\n\n    for (var i = 1; i <= 2; i++) {\n      if (this$1.lookAhead(i).type === type) {\n        for (var j = 0; j < i; j++) {\n          this$1.next();\n        }\n\n        return true;\n      }\n    }\n  };\n\n  LooseParser.prototype.pushCx = function pushCx() {\n    this.context.push(this.curIndent);\n  };\n\n  LooseParser.prototype.popCx = function popCx() {\n    this.curIndent = this.context.pop();\n  };\n\n  LooseParser.prototype.lineEnd = function lineEnd(pos) {\n    while (pos < this.input.length && !__acorn.isNewLine(this.input.charCodeAt(pos))) {\n      ++pos;\n    }\n\n    return pos;\n  };\n\n  LooseParser.prototype.indentationAfter = function indentationAfter(pos) {\n    var this$1 = this;\n\n    for (var count = 0;; ++pos) {\n      var ch = this$1.input.charCodeAt(pos);\n\n      if (ch === 32) {\n        ++count;\n      } else if (ch === 9) {\n        count += this$1.options.tabSize;\n      } else {\n        return count;\n      }\n    }\n  };\n\n  LooseParser.prototype.closes = function closes(closeTok, indent, line, blockHeuristic) {\n    if (this.tok.type === closeTok || this.tok.type === __acorn.tokTypes.eof) {\n      return true;\n    }\n\n    return line !== this.curLineStart && this.curIndent < indent && this.tokenStartsLine() && (!blockHeuristic || this.nextLineStart >= this.input.length || this.indentationAfter(this.nextLineStart) < indent);\n  };\n\n  LooseParser.prototype.tokenStartsLine = function tokenStartsLine() {\n    var this$1 = this;\n\n    for (var p = this.tok.start - 1; p >= this.curLineStart; --p) {\n      var ch = this$1.input.charCodeAt(p);\n\n      if (ch !== 9 && ch !== 32) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  LooseParser.prototype.extend = function extend(name, f) {\n    this[name] = f(this[name]);\n  };\n\n  LooseParser.prototype.loadPlugins = function loadPlugins(pluginConfigs) {\n    var this$1 = this;\n\n    for (var name in pluginConfigs) {\n      var plugin = pluginsLoose[name];\n\n      if (!plugin) {\n        throw new Error(\"Plugin '\" + name + \"' not found\");\n      }\n\n      plugin(this$1, pluginConfigs[name]);\n    }\n  };\n\n  LooseParser.prototype.parse = function parse() {\n    this.next();\n    return this.parseTopLevel();\n  };\n\n  var lp = LooseParser.prototype;\n\n  function isSpace(ch) {\n    return ch < 14 && ch > 8 || ch === 32 || ch === 160 || __acorn.isNewLine(ch);\n  }\n\n  lp.next = function () {\n    var this$1 = this;\n    this.last = this.tok;\n\n    if (this.ahead.length) {\n      this.tok = this.ahead.shift();\n    } else {\n      this.tok = this.readToken();\n    }\n\n    if (this.tok.start >= this.nextLineStart) {\n      while (this.tok.start >= this.nextLineStart) {\n        this$1.curLineStart = this$1.nextLineStart;\n        this$1.nextLineStart = this$1.lineEnd(this$1.curLineStart) + 1;\n      }\n\n      this.curIndent = this.indentationAfter(this.curLineStart);\n    }\n  };\n\n  lp.readToken = function () {\n    var this$1 = this;\n\n    for (;;) {\n      try {\n        this$1.toks.next();\n\n        if (this$1.toks.type === __acorn.tokTypes.dot && this$1.input.substr(this$1.toks.end, 1) === \".\" && this$1.options.ecmaVersion >= 6) {\n          this$1.toks.end++;\n          this$1.toks.type = __acorn.tokTypes.ellipsis;\n        }\n\n        return new __acorn.Token(this$1.toks);\n      } catch (e) {\n        if (!(e instanceof SyntaxError)) {\n          throw e;\n        } // Try to skip some text, based on the error message, and then continue\n\n\n        var msg = e.message,\n            pos = e.raisedAt,\n            replace = true;\n\n        if (/unterminated/i.test(msg)) {\n          pos = this$1.lineEnd(e.pos + 1);\n\n          if (/string/.test(msg)) {\n            replace = {\n              start: e.pos,\n              end: pos,\n              type: __acorn.tokTypes.string,\n              value: this$1.input.slice(e.pos + 1, pos)\n            };\n          } else if (/regular expr/i.test(msg)) {\n            var re = this$1.input.slice(e.pos, pos);\n\n            try {\n              re = new RegExp(re);\n            } catch (e) {\n              /* ignore compilation error due to new syntax */\n            }\n\n            replace = {\n              start: e.pos,\n              end: pos,\n              type: __acorn.tokTypes.regexp,\n              value: re\n            };\n          } else if (/template/.test(msg)) {\n            replace = {\n              start: e.pos,\n              end: pos,\n              type: __acorn.tokTypes.template,\n              value: this$1.input.slice(e.pos, pos)\n            };\n          } else {\n            replace = false;\n          }\n        } else if (/invalid (unicode|regexp|number)|expecting unicode|octal literal|is reserved|directly after number|expected number in radix/i.test(msg)) {\n          while (pos < this.input.length && !isSpace(this.input.charCodeAt(pos))) {\n            ++pos;\n          }\n        } else if (/character escape|expected hexadecimal/i.test(msg)) {\n          while (pos < this.input.length) {\n            var ch = this$1.input.charCodeAt(pos++);\n\n            if (ch === 34 || ch === 39 || __acorn.isNewLine(ch)) {\n              break;\n            }\n          }\n        } else if (/unexpected character/i.test(msg)) {\n          pos++;\n          replace = false;\n        } else if (/regular expression/i.test(msg)) {\n          replace = true;\n        } else {\n          throw e;\n        }\n\n        this$1.resetTo(pos);\n\n        if (replace === true) {\n          replace = {\n            start: pos,\n            end: pos,\n            type: __acorn.tokTypes.name,\n            value: \"✖\"\n          };\n        }\n\n        if (replace) {\n          if (this$1.options.locations) {\n            replace.loc = new __acorn.SourceLocation(this$1.toks, __acorn.getLineInfo(this$1.input, replace.start), __acorn.getLineInfo(this$1.input, replace.end));\n          }\n\n          return replace;\n        }\n      }\n    }\n  };\n\n  lp.resetTo = function (pos) {\n    var this$1 = this;\n    this.toks.pos = pos;\n    var ch = this.input.charAt(pos - 1);\n    this.toks.exprAllowed = !ch || /[[{(,;:?/*=+\\-~!|&%^<>]/.test(ch) || /[enwfd]/.test(ch) && /\\b(case|else|return|throw|new|in|(instance|type)?of|delete|void)$/.test(this.input.slice(pos - 10, pos));\n\n    if (this.options.locations) {\n      this.toks.curLine = 1;\n      this.toks.lineStart = __acorn.lineBreakG.lastIndex = 0;\n      var match;\n\n      while ((match = __acorn.lineBreakG.exec(this.input)) && match.index < pos) {\n        ++this$1.toks.curLine;\n        this$1.toks.lineStart = match.index + match[0].length;\n      }\n    }\n  };\n\n  lp.lookAhead = function (n) {\n    var this$1 = this;\n\n    while (n > this.ahead.length) {\n      this$1.ahead.push(this$1.readToken());\n    }\n\n    return this.ahead[n - 1];\n  };\n\n  function isDummy(node) {\n    return node.name === \"✖\";\n  }\n\n  var lp$1 = LooseParser.prototype;\n\n  lp$1.parseTopLevel = function () {\n    var this$1 = this;\n    var node = this.startNodeAt(this.options.locations ? [0, __acorn.getLineInfo(this.input, 0)] : 0);\n    node.body = [];\n\n    while (this.tok.type !== __acorn.tokTypes.eof) {\n      node.body.push(this$1.parseStatement());\n    }\n\n    this.toks.adaptDirectivePrologue(node.body);\n    this.last = this.tok;\n\n    if (this.options.ecmaVersion >= 6) {\n      node.sourceType = this.options.sourceType;\n    }\n\n    return this.finishNode(node, \"Program\");\n  };\n\n  lp$1.parseStatement = function () {\n    var this$1 = this;\n    var starttype = this.tok.type,\n        node = this.startNode(),\n        kind;\n\n    if (this.toks.isLet()) {\n      starttype = __acorn.tokTypes._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case __acorn.tokTypes._break:\n      case __acorn.tokTypes._continue:\n        this.next();\n        var isBreak = starttype === __acorn.tokTypes._break;\n\n        if (this.semicolon() || this.canInsertSemicolon()) {\n          node.label = null;\n        } else {\n          node.label = this.tok.type === __acorn.tokTypes.name ? this.parseIdent() : null;\n          this.semicolon();\n        }\n\n        return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n\n      case __acorn.tokTypes._debugger:\n        this.next();\n        this.semicolon();\n        return this.finishNode(node, \"DebuggerStatement\");\n\n      case __acorn.tokTypes._do:\n        this.next();\n        node.body = this.parseStatement();\n        node.test = this.eat(__acorn.tokTypes._while) ? this.parseParenExpression() : this.dummyIdent();\n        this.semicolon();\n        return this.finishNode(node, \"DoWhileStatement\");\n\n      case __acorn.tokTypes._for:\n        this.next(); // `for` keyword\n\n        var isAwait = this.options.ecmaVersion >= 9 && this.inAsync && this.eatContextual(\"await\");\n        this.pushCx();\n        this.expect(__acorn.tokTypes.parenL);\n\n        if (this.tok.type === __acorn.tokTypes.semi) {\n          return this.parseFor(node, null);\n        }\n\n        var isLet = this.toks.isLet();\n\n        if (isLet || this.tok.type === __acorn.tokTypes._var || this.tok.type === __acorn.tokTypes._const) {\n          var init$1 = this.parseVar(true, isLet ? \"let\" : this.tok.value);\n\n          if (init$1.declarations.length === 1 && (this.tok.type === __acorn.tokTypes._in || this.isContextual(\"of\"))) {\n            if (this.options.ecmaVersion >= 9 && this.tok.type !== __acorn.tokTypes._in) {\n              node.await = isAwait;\n            }\n\n            return this.parseForIn(node, init$1);\n          }\n\n          return this.parseFor(node, init$1);\n        }\n\n        var init = this.parseExpression(true);\n\n        if (this.tok.type === __acorn.tokTypes._in || this.isContextual(\"of\")) {\n          if (this.options.ecmaVersion >= 9 && this.tok.type !== __acorn.tokTypes._in) {\n            node.await = isAwait;\n          }\n\n          return this.parseForIn(node, this.toAssignable(init));\n        }\n\n        return this.parseFor(node, init);\n\n      case __acorn.tokTypes._function:\n        this.next();\n        return this.parseFunction(node, true);\n\n      case __acorn.tokTypes._if:\n        this.next();\n        node.test = this.parseParenExpression();\n        node.consequent = this.parseStatement();\n        node.alternate = this.eat(__acorn.tokTypes._else) ? this.parseStatement() : null;\n        return this.finishNode(node, \"IfStatement\");\n\n      case __acorn.tokTypes._return:\n        this.next();\n\n        if (this.eat(__acorn.tokTypes.semi) || this.canInsertSemicolon()) {\n          node.argument = null;\n        } else {\n          node.argument = this.parseExpression();\n          this.semicolon();\n        }\n\n        return this.finishNode(node, \"ReturnStatement\");\n\n      case __acorn.tokTypes._switch:\n        var blockIndent = this.curIndent,\n            line = this.curLineStart;\n        this.next();\n        node.discriminant = this.parseParenExpression();\n        node.cases = [];\n        this.pushCx();\n        this.expect(__acorn.tokTypes.braceL);\n        var cur;\n\n        while (!this.closes(__acorn.tokTypes.braceR, blockIndent, line, true)) {\n          if (this$1.tok.type === __acorn.tokTypes._case || this$1.tok.type === __acorn.tokTypes._default) {\n            var isCase = this$1.tok.type === __acorn.tokTypes._case;\n\n            if (cur) {\n              this$1.finishNode(cur, \"SwitchCase\");\n            }\n\n            node.cases.push(cur = this$1.startNode());\n            cur.consequent = [];\n            this$1.next();\n\n            if (isCase) {\n              cur.test = this$1.parseExpression();\n            } else {\n              cur.test = null;\n            }\n\n            this$1.expect(__acorn.tokTypes.colon);\n          } else {\n            if (!cur) {\n              node.cases.push(cur = this$1.startNode());\n              cur.consequent = [];\n              cur.test = null;\n            }\n\n            cur.consequent.push(this$1.parseStatement());\n          }\n        }\n\n        if (cur) {\n          this.finishNode(cur, \"SwitchCase\");\n        }\n\n        this.popCx();\n        this.eat(__acorn.tokTypes.braceR);\n        return this.finishNode(node, \"SwitchStatement\");\n\n      case __acorn.tokTypes._throw:\n        this.next();\n        node.argument = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(node, \"ThrowStatement\");\n\n      case __acorn.tokTypes._try:\n        this.next();\n        node.block = this.parseBlock();\n        node.handler = null;\n\n        if (this.tok.type === __acorn.tokTypes._catch) {\n          var clause = this.startNode();\n          this.next();\n\n          if (this.eat(__acorn.tokTypes.parenL)) {\n            clause.param = this.toAssignable(this.parseExprAtom(), true);\n            this.expect(__acorn.tokTypes.parenR);\n          } else {\n            clause.param = null;\n          }\n\n          clause.body = this.parseBlock();\n          node.handler = this.finishNode(clause, \"CatchClause\");\n        }\n\n        node.finalizer = this.eat(__acorn.tokTypes._finally) ? this.parseBlock() : null;\n\n        if (!node.handler && !node.finalizer) {\n          return node.block;\n        }\n\n        return this.finishNode(node, \"TryStatement\");\n\n      case __acorn.tokTypes._var:\n      case __acorn.tokTypes._const:\n        return this.parseVar(false, kind || this.tok.value);\n\n      case __acorn.tokTypes._while:\n        this.next();\n        node.test = this.parseParenExpression();\n        node.body = this.parseStatement();\n        return this.finishNode(node, \"WhileStatement\");\n\n      case __acorn.tokTypes._with:\n        this.next();\n        node.object = this.parseParenExpression();\n        node.body = this.parseStatement();\n        return this.finishNode(node, \"WithStatement\");\n\n      case __acorn.tokTypes.braceL:\n        return this.parseBlock();\n\n      case __acorn.tokTypes.semi:\n        this.next();\n        return this.finishNode(node, \"EmptyStatement\");\n\n      case __acorn.tokTypes._class:\n        return this.parseClass(true);\n\n      case __acorn.tokTypes._import:\n        return this.parseImport();\n\n      case __acorn.tokTypes._export:\n        return this.parseExport();\n\n      default:\n        if (this.toks.isAsyncFunction()) {\n          this.next();\n          this.next();\n          return this.parseFunction(node, true, true);\n        }\n\n        var expr = this.parseExpression();\n\n        if (isDummy(expr)) {\n          this.next();\n\n          if (this.tok.type === __acorn.tokTypes.eof) {\n            return this.finishNode(node, \"EmptyStatement\");\n          }\n\n          return this.parseStatement();\n        } else if (starttype === __acorn.tokTypes.name && expr.type === \"Identifier\" && this.eat(__acorn.tokTypes.colon)) {\n          node.body = this.parseStatement();\n          node.label = expr;\n          return this.finishNode(node, \"LabeledStatement\");\n        } else {\n          node.expression = expr;\n          this.semicolon();\n          return this.finishNode(node, \"ExpressionStatement\");\n        }\n\n    }\n  };\n\n  lp$1.parseBlock = function () {\n    var this$1 = this;\n    var node = this.startNode();\n    this.pushCx();\n    this.expect(__acorn.tokTypes.braceL);\n    var blockIndent = this.curIndent,\n        line = this.curLineStart;\n    node.body = [];\n\n    while (!this.closes(__acorn.tokTypes.braceR, blockIndent, line, true)) {\n      node.body.push(this$1.parseStatement());\n    }\n\n    this.popCx();\n    this.eat(__acorn.tokTypes.braceR);\n    return this.finishNode(node, \"BlockStatement\");\n  };\n\n  lp$1.parseFor = function (node, init) {\n    node.init = init;\n    node.test = node.update = null;\n\n    if (this.eat(__acorn.tokTypes.semi) && this.tok.type !== __acorn.tokTypes.semi) {\n      node.test = this.parseExpression();\n    }\n\n    if (this.eat(__acorn.tokTypes.semi) && this.tok.type !== __acorn.tokTypes.parenR) {\n      node.update = this.parseExpression();\n    }\n\n    this.popCx();\n    this.expect(__acorn.tokTypes.parenR);\n    node.body = this.parseStatement();\n    return this.finishNode(node, \"ForStatement\");\n  };\n\n  lp$1.parseForIn = function (node, init) {\n    var type = this.tok.type === __acorn.tokTypes._in ? \"ForInStatement\" : \"ForOfStatement\";\n    this.next();\n    node.left = init;\n    node.right = this.parseExpression();\n    this.popCx();\n    this.expect(__acorn.tokTypes.parenR);\n    node.body = this.parseStatement();\n    return this.finishNode(node, type);\n  };\n\n  lp$1.parseVar = function (noIn, kind) {\n    var this$1 = this;\n    var node = this.startNode();\n    node.kind = kind;\n    this.next();\n    node.declarations = [];\n\n    do {\n      var decl = this$1.startNode();\n      decl.id = this$1.options.ecmaVersion >= 6 ? this$1.toAssignable(this$1.parseExprAtom(), true) : this$1.parseIdent();\n      decl.init = this$1.eat(__acorn.tokTypes.eq) ? this$1.parseMaybeAssign(noIn) : null;\n      node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"));\n    } while (this.eat(__acorn.tokTypes.comma));\n\n    if (!node.declarations.length) {\n      var decl$1 = this.startNode();\n      decl$1.id = this.dummyIdent();\n      node.declarations.push(this.finishNode(decl$1, \"VariableDeclarator\"));\n    }\n\n    if (!noIn) {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"VariableDeclaration\");\n  };\n\n  lp$1.parseClass = function (isStatement) {\n    var this$1 = this;\n    var node = this.startNode();\n    this.next();\n\n    if (this.tok.type === __acorn.tokTypes.name) {\n      node.id = this.parseIdent();\n    } else if (isStatement === true) {\n      node.id = this.dummyIdent();\n    } else {\n      node.id = null;\n    }\n\n    node.superClass = this.eat(__acorn.tokTypes._extends) ? this.parseExpression() : null;\n    node.body = this.startNode();\n    node.body.body = [];\n    this.pushCx();\n    var indent = this.curIndent + 1,\n        line = this.curLineStart;\n    this.eat(__acorn.tokTypes.braceL);\n\n    if (this.curIndent + 1 < indent) {\n      indent = this.curIndent;\n      line = this.curLineStart;\n    }\n\n    while (!this.closes(__acorn.tokTypes.braceR, indent, line)) {\n      if (this$1.semicolon()) {\n        continue;\n      }\n\n      var method = this$1.startNode(),\n          isGenerator = void 0,\n          isAsync = void 0;\n\n      if (this$1.options.ecmaVersion >= 6) {\n        method.static = false;\n        isGenerator = this$1.eat(__acorn.tokTypes.star);\n      }\n\n      this$1.parsePropertyName(method);\n\n      if (isDummy(method.key)) {\n        if (isDummy(this$1.parseMaybeAssign())) {\n          this$1.next();\n        }\n\n        this$1.eat(__acorn.tokTypes.comma);\n        continue;\n      }\n\n      if (method.key.type === \"Identifier\" && !method.computed && method.key.name === \"static\" && this$1.tok.type !== __acorn.tokTypes.parenL && this$1.tok.type !== __acorn.tokTypes.braceL) {\n        method.static = true;\n        isGenerator = this$1.eat(__acorn.tokTypes.star);\n        this$1.parsePropertyName(method);\n      } else {\n        method.static = false;\n      }\n\n      if (!method.computed && method.key.type === \"Identifier\" && method.key.name === \"async\" && this$1.tok.type !== __acorn.tokTypes.parenL && !this$1.canInsertSemicolon()) {\n        isAsync = true;\n        isGenerator = this$1.options.ecmaVersion >= 9 && this$1.eat(__acorn.tokTypes.star);\n        this$1.parsePropertyName(method);\n      } else {\n        isAsync = false;\n      }\n\n      if (this$1.options.ecmaVersion >= 5 && method.key.type === \"Identifier\" && !method.computed && (method.key.name === \"get\" || method.key.name === \"set\") && this$1.tok.type !== __acorn.tokTypes.parenL && this$1.tok.type !== __acorn.tokTypes.braceL) {\n        method.kind = method.key.name;\n        this$1.parsePropertyName(method);\n        method.value = this$1.parseMethod(false);\n      } else {\n        if (!method.computed && !method.static && !isGenerator && !isAsync && (method.key.type === \"Identifier\" && method.key.name === \"constructor\" || method.key.type === \"Literal\" && method.key.value === \"constructor\")) {\n          method.kind = \"constructor\";\n        } else {\n          method.kind = \"method\";\n        }\n\n        method.value = this$1.parseMethod(isGenerator, isAsync);\n      }\n\n      node.body.body.push(this$1.finishNode(method, \"MethodDefinition\"));\n    }\n\n    this.popCx();\n\n    if (!this.eat(__acorn.tokTypes.braceR)) {\n      // If there is no closing brace, make the node span to the start\n      // of the next token (this is useful for Tern)\n      this.last.end = this.tok.start;\n\n      if (this.options.locations) {\n        this.last.loc.end = this.tok.loc.start;\n      }\n    }\n\n    this.semicolon();\n    this.finishNode(node.body, \"ClassBody\");\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  };\n\n  lp$1.parseFunction = function (node, isStatement, isAsync) {\n    var oldInAsync = this.inAsync,\n        oldInFunction = this.inFunction;\n    this.initFunction(node);\n\n    if (this.options.ecmaVersion >= 6) {\n      node.generator = this.eat(__acorn.tokTypes.star);\n    }\n\n    if (this.options.ecmaVersion >= 8) {\n      node.async = !!isAsync;\n    }\n\n    if (this.tok.type === __acorn.tokTypes.name) {\n      node.id = this.parseIdent();\n    } else if (isStatement === true) {\n      node.id = this.dummyIdent();\n    }\n\n    this.inAsync = node.async;\n    this.inFunction = true;\n    node.params = this.parseFunctionParams();\n    node.body = this.parseBlock();\n    this.toks.adaptDirectivePrologue(node.body.body);\n    this.inAsync = oldInAsync;\n    this.inFunction = oldInFunction;\n    return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n  };\n\n  lp$1.parseExport = function () {\n    var node = this.startNode();\n    this.next();\n\n    if (this.eat(__acorn.tokTypes.star)) {\n      node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : this.dummyString();\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    if (this.eat(__acorn.tokTypes._default)) {\n      // export default (function foo() {}) // This is FunctionExpression.\n      var isAsync;\n\n      if (this.tok.type === __acorn.tokTypes._function || (isAsync = this.toks.isAsyncFunction())) {\n        var fNode = this.startNode();\n        this.next();\n\n        if (isAsync) {\n          this.next();\n        }\n\n        node.declaration = this.parseFunction(fNode, \"nullableID\", isAsync);\n      } else if (this.tok.type === __acorn.tokTypes._class) {\n        node.declaration = this.parseClass(\"nullableID\");\n      } else {\n        node.declaration = this.parseMaybeAssign();\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    if (this.tok.type.keyword || this.toks.isLet() || this.toks.isAsyncFunction()) {\n      node.declaration = this.parseStatement();\n      node.specifiers = [];\n      node.source = null;\n    } else {\n      node.declaration = null;\n      node.specifiers = this.parseExportSpecifierList();\n      node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null;\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ExportNamedDeclaration\");\n  };\n\n  lp$1.parseImport = function () {\n    var node = this.startNode();\n    this.next();\n\n    if (this.tok.type === __acorn.tokTypes.string) {\n      node.specifiers = [];\n      node.source = this.parseExprAtom();\n    } else {\n      var elt;\n\n      if (this.tok.type === __acorn.tokTypes.name && this.tok.value !== \"from\") {\n        elt = this.startNode();\n        elt.local = this.parseIdent();\n        this.finishNode(elt, \"ImportDefaultSpecifier\");\n        this.eat(__acorn.tokTypes.comma);\n      }\n\n      node.specifiers = this.parseImportSpecifierList();\n      node.source = this.eatContextual(\"from\") && this.tok.type === __acorn.tokTypes.string ? this.parseExprAtom() : this.dummyString();\n\n      if (elt) {\n        node.specifiers.unshift(elt);\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  };\n\n  lp$1.parseImportSpecifierList = function () {\n    var this$1 = this;\n    var elts = [];\n\n    if (this.tok.type === __acorn.tokTypes.star) {\n      var elt = this.startNode();\n      this.next();\n      elt.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent();\n      elts.push(this.finishNode(elt, \"ImportNamespaceSpecifier\"));\n    } else {\n      var indent = this.curIndent,\n          line = this.curLineStart,\n          continuedLine = this.nextLineStart;\n      this.pushCx();\n      this.eat(__acorn.tokTypes.braceL);\n\n      if (this.curLineStart > continuedLine) {\n        continuedLine = this.curLineStart;\n      }\n\n      while (!this.closes(__acorn.tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n        var elt$1 = this$1.startNode();\n\n        if (this$1.eat(__acorn.tokTypes.star)) {\n          elt$1.local = this$1.eatContextual(\"as\") ? this$1.parseIdent() : this$1.dummyIdent();\n          this$1.finishNode(elt$1, \"ImportNamespaceSpecifier\");\n        } else {\n          if (this$1.isContextual(\"from\")) {\n            break;\n          }\n\n          elt$1.imported = this$1.parseIdent();\n\n          if (isDummy(elt$1.imported)) {\n            break;\n          }\n\n          elt$1.local = this$1.eatContextual(\"as\") ? this$1.parseIdent() : elt$1.imported;\n          this$1.finishNode(elt$1, \"ImportSpecifier\");\n        }\n\n        elts.push(elt$1);\n        this$1.eat(__acorn.tokTypes.comma);\n      }\n\n      this.eat(__acorn.tokTypes.braceR);\n      this.popCx();\n    }\n\n    return elts;\n  };\n\n  lp$1.parseExportSpecifierList = function () {\n    var this$1 = this;\n    var elts = [];\n    var indent = this.curIndent,\n        line = this.curLineStart,\n        continuedLine = this.nextLineStart;\n    this.pushCx();\n    this.eat(__acorn.tokTypes.braceL);\n\n    if (this.curLineStart > continuedLine) {\n      continuedLine = this.curLineStart;\n    }\n\n    while (!this.closes(__acorn.tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n      if (this$1.isContextual(\"from\")) {\n        break;\n      }\n\n      var elt = this$1.startNode();\n      elt.local = this$1.parseIdent();\n\n      if (isDummy(elt.local)) {\n        break;\n      }\n\n      elt.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent() : elt.local;\n      this$1.finishNode(elt, \"ExportSpecifier\");\n      elts.push(elt);\n      this$1.eat(__acorn.tokTypes.comma);\n    }\n\n    this.eat(__acorn.tokTypes.braceR);\n    this.popCx();\n    return elts;\n  };\n\n  var lp$2 = LooseParser.prototype;\n\n  lp$2.checkLVal = function (expr) {\n    if (!expr) {\n      return expr;\n    }\n\n    switch (expr.type) {\n      case \"Identifier\":\n      case \"MemberExpression\":\n        return expr;\n\n      case \"ParenthesizedExpression\":\n        expr.expression = this.checkLVal(expr.expression);\n        return expr;\n\n      default:\n        return this.dummyIdent();\n    }\n  };\n\n  lp$2.parseExpression = function (noIn) {\n    var this$1 = this;\n    var start = this.storeCurrentPos();\n    var expr = this.parseMaybeAssign(noIn);\n\n    if (this.tok.type === __acorn.tokTypes.comma) {\n      var node = this.startNodeAt(start);\n      node.expressions = [expr];\n\n      while (this.eat(__acorn.tokTypes.comma)) {\n        node.expressions.push(this$1.parseMaybeAssign(noIn));\n      }\n\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  };\n\n  lp$2.parseParenExpression = function () {\n    this.pushCx();\n    this.expect(__acorn.tokTypes.parenL);\n    var val = this.parseExpression();\n    this.popCx();\n    this.expect(__acorn.tokTypes.parenR);\n    return val;\n  };\n\n  lp$2.parseMaybeAssign = function (noIn) {\n    if (this.toks.isContextual(\"yield\")) {\n      var node = this.startNode();\n      this.next();\n\n      if (this.semicolon() || this.canInsertSemicolon() || this.tok.type !== __acorn.tokTypes.star && !this.tok.type.startsExpr) {\n        node.delegate = false;\n        node.argument = null;\n      } else {\n        node.delegate = this.eat(__acorn.tokTypes.star);\n        node.argument = this.parseMaybeAssign();\n      }\n\n      return this.finishNode(node, \"YieldExpression\");\n    }\n\n    var start = this.storeCurrentPos();\n    var left = this.parseMaybeConditional(noIn);\n\n    if (this.tok.type.isAssign) {\n      var node$1 = this.startNodeAt(start);\n      node$1.operator = this.tok.value;\n      node$1.left = this.tok.type === __acorn.tokTypes.eq ? this.toAssignable(left) : this.checkLVal(left);\n      this.next();\n      node$1.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node$1, \"AssignmentExpression\");\n    }\n\n    return left;\n  };\n\n  lp$2.parseMaybeConditional = function (noIn) {\n    var start = this.storeCurrentPos();\n    var expr = this.parseExprOps(noIn);\n\n    if (this.eat(__acorn.tokTypes.question)) {\n      var node = this.startNodeAt(start);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      node.alternate = this.expect(__acorn.tokTypes.colon) ? this.parseMaybeAssign(noIn) : this.dummyIdent();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  };\n\n  lp$2.parseExprOps = function (noIn) {\n    var start = this.storeCurrentPos();\n    var indent = this.curIndent,\n        line = this.curLineStart;\n    return this.parseExprOp(this.parseMaybeUnary(false), start, -1, noIn, indent, line);\n  };\n\n  lp$2.parseExprOp = function (left, start, minPrec, noIn, indent, line) {\n    if (this.curLineStart !== line && this.curIndent < indent && this.tokenStartsLine()) {\n      return left;\n    }\n\n    var prec = this.tok.type.binop;\n\n    if (prec != null && (!noIn || this.tok.type !== __acorn.tokTypes._in)) {\n      if (prec > minPrec) {\n        var node = this.startNodeAt(start);\n        node.left = left;\n        node.operator = this.tok.value;\n        this.next();\n\n        if (this.curLineStart !== line && this.curIndent < indent && this.tokenStartsLine()) {\n          node.right = this.dummyIdent();\n        } else {\n          var rightStart = this.storeCurrentPos();\n          node.right = this.parseExprOp(this.parseMaybeUnary(false), rightStart, prec, noIn, indent, line);\n        }\n\n        this.finishNode(node, /&&|\\|\\|/.test(node.operator) ? \"LogicalExpression\" : \"BinaryExpression\");\n        return this.parseExprOp(node, start, minPrec, noIn, indent, line);\n      }\n    }\n\n    return left;\n  };\n\n  lp$2.parseMaybeUnary = function (sawUnary) {\n    var this$1 = this;\n    var start = this.storeCurrentPos(),\n        expr;\n\n    if (this.options.ecmaVersion >= 8 && this.toks.isContextual(\"await\") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {\n      expr = this.parseAwait();\n      sawUnary = true;\n    } else if (this.tok.type.prefix) {\n      var node = this.startNode(),\n          update = this.tok.type === __acorn.tokTypes.incDec;\n\n      if (!update) {\n        sawUnary = true;\n      }\n\n      node.operator = this.tok.value;\n      node.prefix = true;\n      this.next();\n      node.argument = this.parseMaybeUnary(true);\n\n      if (update) {\n        node.argument = this.checkLVal(node.argument);\n      }\n\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    } else if (this.tok.type === __acorn.tokTypes.ellipsis) {\n      var node$1 = this.startNode();\n      this.next();\n      node$1.argument = this.parseMaybeUnary(sawUnary);\n      expr = this.finishNode(node$1, \"SpreadElement\");\n    } else {\n      expr = this.parseExprSubscripts();\n\n      while (this.tok.type.postfix && !this.canInsertSemicolon()) {\n        var node$2 = this$1.startNodeAt(start);\n        node$2.operator = this$1.tok.value;\n        node$2.prefix = false;\n        node$2.argument = this$1.checkLVal(expr);\n        this$1.next();\n        expr = this$1.finishNode(node$2, \"UpdateExpression\");\n      }\n    }\n\n    if (!sawUnary && this.eat(__acorn.tokTypes.starstar)) {\n      var node$3 = this.startNodeAt(start);\n      node$3.operator = \"**\";\n      node$3.left = expr;\n      node$3.right = this.parseMaybeUnary(false);\n      return this.finishNode(node$3, \"BinaryExpression\");\n    }\n\n    return expr;\n  };\n\n  lp$2.parseExprSubscripts = function () {\n    var start = this.storeCurrentPos();\n    return this.parseSubscripts(this.parseExprAtom(), start, false, this.curIndent, this.curLineStart);\n  };\n\n  lp$2.parseSubscripts = function (base, start, noCalls, startIndent, line) {\n    var this$1 = this;\n\n    for (;;) {\n      if (this$1.curLineStart !== line && this$1.curIndent <= startIndent && this$1.tokenStartsLine()) {\n        if (this$1.tok.type === __acorn.tokTypes.dot && this$1.curIndent === startIndent) {\n          --startIndent;\n        } else {\n          return base;\n        }\n      }\n\n      var maybeAsyncArrow = base.type === \"Identifier\" && base.name === \"async\" && !this$1.canInsertSemicolon();\n\n      if (this$1.eat(__acorn.tokTypes.dot)) {\n        var node = this$1.startNodeAt(start);\n        node.object = base;\n\n        if (this$1.curLineStart !== line && this$1.curIndent <= startIndent && this$1.tokenStartsLine()) {\n          node.property = this$1.dummyIdent();\n        } else {\n          node.property = this$1.parsePropertyAccessor() || this$1.dummyIdent();\n        }\n\n        node.computed = false;\n        base = this$1.finishNode(node, \"MemberExpression\");\n      } else if (this$1.tok.type === __acorn.tokTypes.bracketL) {\n        this$1.pushCx();\n        this$1.next();\n        var node$1 = this$1.startNodeAt(start);\n        node$1.object = base;\n        node$1.property = this$1.parseExpression();\n        node$1.computed = true;\n        this$1.popCx();\n        this$1.expect(__acorn.tokTypes.bracketR);\n        base = this$1.finishNode(node$1, \"MemberExpression\");\n      } else if (!noCalls && this$1.tok.type === __acorn.tokTypes.parenL) {\n        var exprList = this$1.parseExprList(__acorn.tokTypes.parenR);\n\n        if (maybeAsyncArrow && this$1.eat(__acorn.tokTypes.arrow)) {\n          return this$1.parseArrowExpression(this$1.startNodeAt(start), exprList, true);\n        }\n\n        var node$2 = this$1.startNodeAt(start);\n        node$2.callee = base;\n        node$2.arguments = exprList;\n        base = this$1.finishNode(node$2, \"CallExpression\");\n      } else if (this$1.tok.type === __acorn.tokTypes.backQuote) {\n        var node$3 = this$1.startNodeAt(start);\n        node$3.tag = base;\n        node$3.quasi = this$1.parseTemplate();\n        base = this$1.finishNode(node$3, \"TaggedTemplateExpression\");\n      } else {\n        return base;\n      }\n    }\n  };\n\n  lp$2.parseExprAtom = function () {\n    var node;\n\n    switch (this.tok.type) {\n      case __acorn.tokTypes._this:\n      case __acorn.tokTypes._super:\n        var type = this.tok.type === __acorn.tokTypes._this ? \"ThisExpression\" : \"Super\";\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, type);\n\n      case __acorn.tokTypes.name:\n        var start = this.storeCurrentPos();\n        var id = this.parseIdent();\n        var isAsync = false;\n\n        if (id.name === \"async\" && !this.canInsertSemicolon()) {\n          if (this.eat(__acorn.tokTypes._function)) {\n            return this.parseFunction(this.startNodeAt(start), false, true);\n          }\n\n          if (this.tok.type === __acorn.tokTypes.name) {\n            id = this.parseIdent();\n            isAsync = true;\n          }\n        }\n\n        return this.eat(__acorn.tokTypes.arrow) ? this.parseArrowExpression(this.startNodeAt(start), [id], isAsync) : id;\n\n      case __acorn.tokTypes.regexp:\n        node = this.startNode();\n        var val = this.tok.value;\n        node.regex = {\n          pattern: val.pattern,\n          flags: val.flags\n        };\n        node.value = val.value;\n        node.raw = this.input.slice(this.tok.start, this.tok.end);\n        this.next();\n        return this.finishNode(node, \"Literal\");\n\n      case __acorn.tokTypes.num:\n      case __acorn.tokTypes.string:\n        node = this.startNode();\n        node.value = this.tok.value;\n        node.raw = this.input.slice(this.tok.start, this.tok.end);\n        this.next();\n        return this.finishNode(node, \"Literal\");\n\n      case __acorn.tokTypes._null:\n      case __acorn.tokTypes._true:\n      case __acorn.tokTypes._false:\n        node = this.startNode();\n        node.value = this.tok.type === __acorn.tokTypes._null ? null : this.tok.type === __acorn.tokTypes._true;\n        node.raw = this.tok.type.keyword;\n        this.next();\n        return this.finishNode(node, \"Literal\");\n\n      case __acorn.tokTypes.parenL:\n        var parenStart = this.storeCurrentPos();\n        this.next();\n        var inner = this.parseExpression();\n        this.expect(__acorn.tokTypes.parenR);\n\n        if (this.eat(__acorn.tokTypes.arrow)) {\n          // (a,)=>a // SequenceExpression makes dummy in the last hole. Drop the dummy.\n          var params = inner.expressions || [inner];\n\n          if (params.length && isDummy(params[params.length - 1])) {\n            params.pop();\n          }\n\n          return this.parseArrowExpression(this.startNodeAt(parenStart), params);\n        }\n\n        if (this.options.preserveParens) {\n          var par = this.startNodeAt(parenStart);\n          par.expression = inner;\n          inner = this.finishNode(par, \"ParenthesizedExpression\");\n        }\n\n        return inner;\n\n      case __acorn.tokTypes.bracketL:\n        node = this.startNode();\n        node.elements = this.parseExprList(__acorn.tokTypes.bracketR, true);\n        return this.finishNode(node, \"ArrayExpression\");\n\n      case __acorn.tokTypes.braceL:\n        return this.parseObj();\n\n      case __acorn.tokTypes._class:\n        return this.parseClass(false);\n\n      case __acorn.tokTypes._function:\n        node = this.startNode();\n        this.next();\n        return this.parseFunction(node, false);\n\n      case __acorn.tokTypes._new:\n        return this.parseNew();\n\n      case __acorn.tokTypes.backQuote:\n        return this.parseTemplate();\n\n      default:\n        return this.dummyIdent();\n    }\n  };\n\n  lp$2.parseNew = function () {\n    var node = this.startNode(),\n        startIndent = this.curIndent,\n        line = this.curLineStart;\n    var meta = this.parseIdent(true);\n\n    if (this.options.ecmaVersion >= 6 && this.eat(__acorn.tokTypes.dot)) {\n      node.meta = meta;\n      node.property = this.parseIdent(true);\n      return this.finishNode(node, \"MetaProperty\");\n    }\n\n    var start = this.storeCurrentPos();\n    node.callee = this.parseSubscripts(this.parseExprAtom(), start, true, startIndent, line);\n\n    if (this.tok.type === __acorn.tokTypes.parenL) {\n      node.arguments = this.parseExprList(__acorn.tokTypes.parenR);\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  };\n\n  lp$2.parseTemplateElement = function () {\n    var elem = this.startNode(); // The loose parser accepts invalid unicode escapes even in untagged templates.\n\n    if (this.tok.type === __acorn.tokTypes.invalidTemplate) {\n      elem.value = {\n        raw: this.tok.value,\n        cooked: null\n      };\n    } else {\n      elem.value = {\n        raw: this.input.slice(this.tok.start, this.tok.end).replace(/\\r\\n?/g, \"\\n\"),\n        cooked: this.tok.value\n      };\n    }\n\n    this.next();\n    elem.tail = this.tok.type === __acorn.tokTypes.backQuote;\n    return this.finishNode(elem, \"TemplateElement\");\n  };\n\n  lp$2.parseTemplate = function () {\n    var this$1 = this;\n    var node = this.startNode();\n    this.next();\n    node.expressions = [];\n    var curElt = this.parseTemplateElement();\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this$1.next();\n      node.expressions.push(this$1.parseExpression());\n\n      if (this$1.expect(__acorn.tokTypes.braceR)) {\n        curElt = this$1.parseTemplateElement();\n      } else {\n        curElt = this$1.startNode();\n        curElt.value = {\n          cooked: \"\",\n          raw: \"\"\n        };\n        curElt.tail = true;\n        this$1.finishNode(curElt, \"TemplateElement\");\n      }\n\n      node.quasis.push(curElt);\n    }\n\n    this.expect(__acorn.tokTypes.backQuote);\n    return this.finishNode(node, \"TemplateLiteral\");\n  };\n\n  lp$2.parseObj = function () {\n    var this$1 = this;\n    var node = this.startNode();\n    node.properties = [];\n    this.pushCx();\n    var indent = this.curIndent + 1,\n        line = this.curLineStart;\n    this.eat(__acorn.tokTypes.braceL);\n\n    if (this.curIndent + 1 < indent) {\n      indent = this.curIndent;\n      line = this.curLineStart;\n    }\n\n    while (!this.closes(__acorn.tokTypes.braceR, indent, line)) {\n      var prop = this$1.startNode(),\n          isGenerator = void 0,\n          isAsync = void 0,\n          start = void 0;\n\n      if (this$1.options.ecmaVersion >= 9 && this$1.eat(__acorn.tokTypes.ellipsis)) {\n        prop.argument = this$1.parseMaybeAssign();\n        node.properties.push(this$1.finishNode(prop, \"SpreadElement\"));\n        this$1.eat(__acorn.tokTypes.comma);\n        continue;\n      }\n\n      if (this$1.options.ecmaVersion >= 6) {\n        start = this$1.storeCurrentPos();\n        prop.method = false;\n        prop.shorthand = false;\n        isGenerator = this$1.eat(__acorn.tokTypes.star);\n      }\n\n      this$1.parsePropertyName(prop);\n\n      if (this$1.toks.isAsyncProp(prop)) {\n        isAsync = true;\n        isGenerator = this$1.options.ecmaVersion >= 9 && this$1.eat(__acorn.tokTypes.star);\n        this$1.parsePropertyName(prop);\n      } else {\n        isAsync = false;\n      }\n\n      if (isDummy(prop.key)) {\n        if (isDummy(this$1.parseMaybeAssign())) {\n          this$1.next();\n        }\n\n        this$1.eat(__acorn.tokTypes.comma);\n        continue;\n      }\n\n      if (this$1.eat(__acorn.tokTypes.colon)) {\n        prop.kind = \"init\";\n        prop.value = this$1.parseMaybeAssign();\n      } else if (this$1.options.ecmaVersion >= 6 && (this$1.tok.type === __acorn.tokTypes.parenL || this$1.tok.type === __acorn.tokTypes.braceL)) {\n        prop.kind = \"init\";\n        prop.method = true;\n        prop.value = this$1.parseMethod(isGenerator, isAsync);\n      } else if (this$1.options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" && !prop.computed && (prop.key.name === \"get\" || prop.key.name === \"set\") && this$1.tok.type !== __acorn.tokTypes.comma && this$1.tok.type !== __acorn.tokTypes.braceR && this$1.tok.type !== __acorn.tokTypes.eq) {\n        prop.kind = prop.key.name;\n        this$1.parsePropertyName(prop);\n        prop.value = this$1.parseMethod(false);\n      } else {\n        prop.kind = \"init\";\n\n        if (this$1.options.ecmaVersion >= 6) {\n          if (this$1.eat(__acorn.tokTypes.eq)) {\n            var assign = this$1.startNodeAt(start);\n            assign.operator = \"=\";\n            assign.left = prop.key;\n            assign.right = this$1.parseMaybeAssign();\n            prop.value = this$1.finishNode(assign, \"AssignmentExpression\");\n          } else {\n            prop.value = prop.key;\n          }\n        } else {\n          prop.value = this$1.dummyIdent();\n        }\n\n        prop.shorthand = true;\n      }\n\n      node.properties.push(this$1.finishNode(prop, \"Property\"));\n      this$1.eat(__acorn.tokTypes.comma);\n    }\n\n    this.popCx();\n\n    if (!this.eat(__acorn.tokTypes.braceR)) {\n      // If there is no closing brace, make the node span to the start\n      // of the next token (this is useful for Tern)\n      this.last.end = this.tok.start;\n\n      if (this.options.locations) {\n        this.last.loc.end = this.tok.loc.start;\n      }\n    }\n\n    return this.finishNode(node, \"ObjectExpression\");\n  };\n\n  lp$2.parsePropertyName = function (prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(__acorn.tokTypes.bracketL)) {\n        prop.computed = true;\n        prop.key = this.parseExpression();\n        this.expect(__acorn.tokTypes.bracketR);\n        return;\n      } else {\n        prop.computed = false;\n      }\n    }\n\n    var key = this.tok.type === __acorn.tokTypes.num || this.tok.type === __acorn.tokTypes.string ? this.parseExprAtom() : this.parseIdent();\n    prop.key = key || this.dummyIdent();\n  };\n\n  lp$2.parsePropertyAccessor = function () {\n    if (this.tok.type === __acorn.tokTypes.name || this.tok.type.keyword) {\n      return this.parseIdent();\n    }\n  };\n\n  lp$2.parseIdent = function () {\n    var name = this.tok.type === __acorn.tokTypes.name ? this.tok.value : this.tok.type.keyword;\n\n    if (!name) {\n      return this.dummyIdent();\n    }\n\n    var node = this.startNode();\n    this.next();\n    node.name = name;\n    return this.finishNode(node, \"Identifier\");\n  };\n\n  lp$2.initFunction = function (node) {\n    node.id = null;\n    node.params = [];\n\n    if (this.options.ecmaVersion >= 6) {\n      node.generator = false;\n      node.expression = false;\n    }\n\n    if (this.options.ecmaVersion >= 8) {\n      node.async = false;\n    }\n  }; // Convert existing expression atom to assignable pattern\n  // if possible.\n\n\n  lp$2.toAssignable = function (node, binding) {\n    var this$1 = this;\n\n    if (!node || node.type === \"Identifier\" || node.type === \"MemberExpression\" && !binding) {// Okay\n    } else if (node.type === \"ParenthesizedExpression\") {\n      this.toAssignable(node.expression, binding);\n    } else if (this.options.ecmaVersion < 6) {\n      return this.dummyIdent();\n    } else if (node.type === \"ObjectExpression\") {\n      node.type = \"ObjectPattern\";\n\n      for (var i = 0, list = node.properties; i < list.length; i += 1) {\n        var prop = list[i];\n        this$1.toAssignable(prop, binding);\n      }\n    } else if (node.type === \"ArrayExpression\") {\n      node.type = \"ArrayPattern\";\n      this.toAssignableList(node.elements, binding);\n    } else if (node.type === \"Property\") {\n      this.toAssignable(node.value, binding);\n    } else if (node.type === \"SpreadElement\") {\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, binding);\n    } else if (node.type === \"AssignmentExpression\") {\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n    } else {\n      return this.dummyIdent();\n    }\n\n    return node;\n  };\n\n  lp$2.toAssignableList = function (exprList, binding) {\n    var this$1 = this;\n\n    for (var i = 0, list = exprList; i < list.length; i += 1) {\n      var expr = list[i];\n      this$1.toAssignable(expr, binding);\n    }\n\n    return exprList;\n  };\n\n  lp$2.parseFunctionParams = function (params) {\n    params = this.parseExprList(__acorn.tokTypes.parenR);\n    return this.toAssignableList(params, true);\n  };\n\n  lp$2.parseMethod = function (isGenerator, isAsync) {\n    var node = this.startNode(),\n        oldInAsync = this.inAsync,\n        oldInFunction = this.inFunction;\n    this.initFunction(node);\n\n    if (this.options.ecmaVersion >= 6) {\n      node.generator = !!isGenerator;\n    }\n\n    if (this.options.ecmaVersion >= 8) {\n      node.async = !!isAsync;\n    }\n\n    this.inAsync = node.async;\n    this.inFunction = true;\n    node.params = this.parseFunctionParams();\n    node.body = this.parseBlock();\n    this.toks.adaptDirectivePrologue(node.body.body);\n    this.inAsync = oldInAsync;\n    this.inFunction = oldInFunction;\n    return this.finishNode(node, \"FunctionExpression\");\n  };\n\n  lp$2.parseArrowExpression = function (node, params, isAsync) {\n    var oldInAsync = this.inAsync,\n        oldInFunction = this.inFunction;\n    this.initFunction(node);\n\n    if (this.options.ecmaVersion >= 8) {\n      node.async = !!isAsync;\n    }\n\n    this.inAsync = node.async;\n    this.inFunction = true;\n    node.params = this.toAssignableList(params, true);\n    node.expression = this.tok.type !== __acorn.tokTypes.braceL;\n\n    if (node.expression) {\n      node.body = this.parseMaybeAssign();\n    } else {\n      node.body = this.parseBlock();\n      this.toks.adaptDirectivePrologue(node.body.body);\n    }\n\n    this.inAsync = oldInAsync;\n    this.inFunction = oldInFunction;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  };\n\n  lp$2.parseExprList = function (close, allowEmpty) {\n    var this$1 = this;\n    this.pushCx();\n    var indent = this.curIndent,\n        line = this.curLineStart,\n        elts = [];\n    this.next(); // Opening bracket\n\n    while (!this.closes(close, indent + 1, line)) {\n      if (this$1.eat(__acorn.tokTypes.comma)) {\n        elts.push(allowEmpty ? null : this$1.dummyIdent());\n        continue;\n      }\n\n      var elt = this$1.parseMaybeAssign();\n\n      if (isDummy(elt)) {\n        if (this$1.closes(close, indent, line)) {\n          break;\n        }\n\n        this$1.next();\n      } else {\n        elts.push(elt);\n      }\n\n      this$1.eat(__acorn.tokTypes.comma);\n    }\n\n    this.popCx();\n\n    if (!this.eat(close)) {\n      // If there is no closing brace, make the node span to the start\n      // of the next token (this is useful for Tern)\n      this.last.end = this.tok.start;\n\n      if (this.options.locations) {\n        this.last.loc.end = this.tok.loc.start;\n      }\n    }\n\n    return elts;\n  };\n\n  lp$2.parseAwait = function () {\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeUnary();\n    return this.finishNode(node, \"AwaitExpression\");\n  }; // Acorn: Loose parser\n  //\n  // This module provides an alternative parser (`parse_dammit`) that\n  // exposes that same interface as `parse`, but will try to parse\n  // anything as JavaScript, repairing syntax error the best it can.\n  // There are circumstances in which it will raise an error and give\n  // up, but they are very rare. The resulting AST will be a mostly\n  // valid JavaScript AST (as per the [Mozilla parser API][api], except\n  // that:\n  //\n  // - Return outside functions is allowed\n  //\n  // - Label consistency (no conflicts, break only to existing labels)\n  //   is not enforced.\n  //\n  // - Bogus Identifier nodes with a name of `\"✖\"` are inserted whenever\n  //   the parser got too confused to return anything meaningful.\n  //\n  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n  //\n  // The expected use for this is to *first* try `acorn.parse`, and only\n  // if that fails switch to `parse_dammit`. The loose parser might\n  // parse badly indented code incorrectly, so **don't** use it as\n  // your default parser.\n  //\n  // Quite a lot of acorn.js is duplicated here. The alternative was to\n  // add a *lot* of extra cruft to that file, making it less readable\n  // and slower. Copying and editing the code allowed me to make\n  // invasive changes and simplifications without creating a complicated\n  // tangle.\n\n\n  __acorn.defaultOptions.tabSize = 4; // eslint-disable-next-line camelcase\n\n  function parse_dammit(input, options) {\n    return new LooseParser(input, options).parse();\n  }\n\n  __acorn.addLooseExports(parse_dammit, LooseParser, pluginsLoose);\n\n  exports.parse_dammit = parse_dammit;\n  exports.LooseParser = LooseParser;\n  exports.pluginsLoose = pluginsLoose;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsdom/node_modules/acorn/dist/acorn_loose.js"],"names":["global","factory","exports","module","require","define","amd","acorn","loose","__acorn","noop","pluginsLoose","LooseParser","input","options","toks","tokenizer","tok","last","type","tokTypes","eof","start","end","validateRegExpFlags","validateRegExpPattern","locations","here","curPosition","loc","SourceLocation","ahead","context","curIndent","curLineStart","nextLineStart","lineEnd","inAsync","inFunction","loadPlugins","prototype","startNode","Node","storeCurrentPos","startNodeAt","pos","finishNode","node","ranges","range","dummyNode","dummy","name","dummyIdent","dummyString","value","raw","eat","next","isContextual","eatContextual","canInsertSemicolon","braceR","lineBreak","test","slice","semicolon","semi","expect","this$1","i","lookAhead","j","pushCx","push","popCx","pop","length","isNewLine","charCodeAt","indentationAfter","count","ch","tabSize","closes","closeTok","indent","line","blockHeuristic","tokenStartsLine","p","extend","f","pluginConfigs","plugin","Error","parse","parseTopLevel","lp","isSpace","shift","readToken","dot","substr","ecmaVersion","ellipsis","Token","e","SyntaxError","msg","message","raisedAt","replace","string","re","RegExp","regexp","template","resetTo","getLineInfo","charAt","exprAllowed","curLine","lineStart","lineBreakG","lastIndex","match","exec","index","n","isDummy","lp$1","body","parseStatement","adaptDirectivePrologue","sourceType","starttype","kind","isLet","_var","_break","_continue","isBreak","label","parseIdent","_debugger","_do","_while","parseParenExpression","_for","isAwait","parenL","parseFor","_const","init$1","parseVar","declarations","_in","await","parseForIn","init","parseExpression","toAssignable","_function","parseFunction","_if","consequent","alternate","_else","_return","argument","_switch","blockIndent","discriminant","cases","braceL","cur","_case","_default","isCase","colon","_throw","_try","block","parseBlock","handler","_catch","clause","param","parseExprAtom","parenR","finalizer","_finally","_with","object","_class","parseClass","_import","parseImport","_export","parseExport","isAsyncFunction","expr","expression","update","left","right","noIn","decl","id","eq","parseMaybeAssign","comma","decl$1","isStatement","superClass","_extends","method","isGenerator","isAsync","static","star","parsePropertyName","key","computed","parseMethod","oldInAsync","oldInFunction","initFunction","generator","async","params","parseFunctionParams","source","fNode","declaration","keyword","specifiers","parseExportSpecifierList","elt","local","parseImportSpecifierList","unshift","elts","continuedLine","elt$1","imported","exported","lp$2","checkLVal","expressions","val","startsExpr","delegate","parseMaybeConditional","isAssign","node$1","operator","parseExprOps","question","parseExprOp","parseMaybeUnary","minPrec","prec","binop","rightStart","sawUnary","allowAwaitOutsideFunction","parseAwait","prefix","incDec","parseExprSubscripts","postfix","node$2","starstar","node$3","parseSubscripts","base","noCalls","startIndent","maybeAsyncArrow","property","parsePropertyAccessor","bracketL","bracketR","exprList","parseExprList","arrow","parseArrowExpression","callee","arguments","backQuote","tag","quasi","parseTemplate","_this","_super","regex","pattern","flags","num","_null","_true","_false","parenStart","inner","preserveParens","par","elements","parseObj","_new","parseNew","meta","parseTemplateElement","elem","invalidTemplate","cooked","tail","curElt","quasis","properties","prop","shorthand","isAsyncProp","assign","binding","list","toAssignableList","close","allowEmpty","defaultOptions","parse_dammit","addLooseExports","Object","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('./acorn')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', './acorn'], factory) :\n\t(factory((global.acorn = global.acorn || {}, global.acorn.loose = {}),global.acorn));\n}(this, (function (exports,__acorn) { 'use strict';\n\nfunction noop() {}\n\n// Registered plugins\nvar pluginsLoose = {};\n\nvar LooseParser = function LooseParser(input, options) {\n  if ( options === void 0 ) options = {};\n\n  this.toks = __acorn.tokenizer(input, options);\n  this.options = this.toks.options;\n  this.input = this.toks.input;\n  this.tok = this.last = {type: __acorn.tokTypes.eof, start: 0, end: 0};\n  this.tok.validateRegExpFlags = noop;\n  this.tok.validateRegExpPattern = noop;\n  if (this.options.locations) {\n    var here = this.toks.curPosition();\n    this.tok.loc = new __acorn.SourceLocation(this.toks, here, here);\n  }\n  this.ahead = []; // Tokens ahead\n  this.context = []; // Indentation contexted\n  this.curIndent = 0;\n  this.curLineStart = 0;\n  this.nextLineStart = this.lineEnd(this.curLineStart) + 1;\n  this.inAsync = false;\n  this.inFunction = false;\n  // Load plugins\n  this.options.pluginsLoose = options.pluginsLoose || {};\n  this.loadPlugins(this.options.pluginsLoose);\n};\n\nLooseParser.prototype.startNode = function startNode () {\n  return new __acorn.Node(this.toks, this.tok.start, this.options.locations ? this.tok.loc.start : null)\n};\n\nLooseParser.prototype.storeCurrentPos = function storeCurrentPos () {\n  return this.options.locations ? [this.tok.start, this.tok.loc.start] : this.tok.start\n};\n\nLooseParser.prototype.startNodeAt = function startNodeAt (pos) {\n  if (this.options.locations) {\n    return new __acorn.Node(this.toks, pos[0], pos[1])\n  } else {\n    return new __acorn.Node(this.toks, pos)\n  }\n};\n\nLooseParser.prototype.finishNode = function finishNode (node, type) {\n  node.type = type;\n  node.end = this.last.end;\n  if (this.options.locations)\n    { node.loc.end = this.last.loc.end; }\n  if (this.options.ranges)\n    { node.range[1] = this.last.end; }\n  return node\n};\n\nLooseParser.prototype.dummyNode = function dummyNode (type) {\n  var dummy = this.startNode();\n  dummy.type = type;\n  dummy.end = dummy.start;\n  if (this.options.locations)\n    { dummy.loc.end = dummy.loc.start; }\n  if (this.options.ranges)\n    { dummy.range[1] = dummy.start; }\n  this.last = {type: __acorn.tokTypes.name, start: dummy.start, end: dummy.start, loc: dummy.loc};\n  return dummy\n};\n\nLooseParser.prototype.dummyIdent = function dummyIdent () {\n  var dummy = this.dummyNode(\"Identifier\");\n  dummy.name = \"✖\";\n  return dummy\n};\n\nLooseParser.prototype.dummyString = function dummyString () {\n  var dummy = this.dummyNode(\"Literal\");\n  dummy.value = dummy.raw = \"✖\";\n  return dummy\n};\n\nLooseParser.prototype.eat = function eat (type) {\n  if (this.tok.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\nLooseParser.prototype.isContextual = function isContextual (name) {\n  return this.tok.type === __acorn.tokTypes.name && this.tok.value === name\n};\n\nLooseParser.prototype.eatContextual = function eatContextual (name) {\n  return this.tok.value === name && this.eat(__acorn.tokTypes.name)\n};\n\nLooseParser.prototype.canInsertSemicolon = function canInsertSemicolon () {\n  return this.tok.type === __acorn.tokTypes.eof || this.tok.type === __acorn.tokTypes.braceR ||\n    __acorn.lineBreak.test(this.input.slice(this.last.end, this.tok.start))\n};\n\nLooseParser.prototype.semicolon = function semicolon () {\n  return this.eat(__acorn.tokTypes.semi)\n};\n\nLooseParser.prototype.expect = function expect (type) {\n    var this$1 = this;\n\n  if (this.eat(type)) { return true }\n  for (var i = 1; i <= 2; i++) {\n    if (this$1.lookAhead(i).type === type) {\n      for (var j = 0; j < i; j++) { this$1.next(); }\n      return true\n    }\n  }\n};\n\nLooseParser.prototype.pushCx = function pushCx () {\n  this.context.push(this.curIndent);\n};\n\nLooseParser.prototype.popCx = function popCx () {\n  this.curIndent = this.context.pop();\n};\n\nLooseParser.prototype.lineEnd = function lineEnd (pos) {\n  while (pos < this.input.length && !__acorn.isNewLine(this.input.charCodeAt(pos))) { ++pos; }\n  return pos\n};\n\nLooseParser.prototype.indentationAfter = function indentationAfter (pos) {\n    var this$1 = this;\n\n  for (var count = 0;; ++pos) {\n    var ch = this$1.input.charCodeAt(pos);\n    if (ch === 32) { ++count; }\n    else if (ch === 9) { count += this$1.options.tabSize; }\n    else { return count }\n  }\n};\n\nLooseParser.prototype.closes = function closes (closeTok, indent, line, blockHeuristic) {\n  if (this.tok.type === closeTok || this.tok.type === __acorn.tokTypes.eof) { return true }\n  return line !== this.curLineStart && this.curIndent < indent && this.tokenStartsLine() &&\n    (!blockHeuristic || this.nextLineStart >= this.input.length ||\n     this.indentationAfter(this.nextLineStart) < indent)\n};\n\nLooseParser.prototype.tokenStartsLine = function tokenStartsLine () {\n    var this$1 = this;\n\n  for (var p = this.tok.start - 1; p >= this.curLineStart; --p) {\n    var ch = this$1.input.charCodeAt(p);\n    if (ch !== 9 && ch !== 32) { return false }\n  }\n  return true\n};\n\nLooseParser.prototype.extend = function extend (name, f) {\n  this[name] = f(this[name]);\n};\n\nLooseParser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n    var this$1 = this;\n\n  for (var name in pluginConfigs) {\n    var plugin = pluginsLoose[name];\n    if (!plugin) { throw new Error(\"Plugin '\" + name + \"' not found\") }\n    plugin(this$1, pluginConfigs[name]);\n  }\n};\n\nLooseParser.prototype.parse = function parse () {\n  this.next();\n  return this.parseTopLevel()\n};\n\nvar lp = LooseParser.prototype;\n\nfunction isSpace(ch) {\n  return (ch < 14 && ch > 8) || ch === 32 || ch === 160 || __acorn.isNewLine(ch)\n}\n\nlp.next = function() {\n  var this$1 = this;\n\n  this.last = this.tok;\n  if (this.ahead.length)\n    { this.tok = this.ahead.shift(); }\n  else\n    { this.tok = this.readToken(); }\n\n  if (this.tok.start >= this.nextLineStart) {\n    while (this.tok.start >= this.nextLineStart) {\n      this$1.curLineStart = this$1.nextLineStart;\n      this$1.nextLineStart = this$1.lineEnd(this$1.curLineStart) + 1;\n    }\n    this.curIndent = this.indentationAfter(this.curLineStart);\n  }\n};\n\nlp.readToken = function() {\n  var this$1 = this;\n\n  for (;;) {\n    try {\n      this$1.toks.next();\n      if (this$1.toks.type === __acorn.tokTypes.dot &&\n          this$1.input.substr(this$1.toks.end, 1) === \".\" &&\n          this$1.options.ecmaVersion >= 6) {\n        this$1.toks.end++;\n        this$1.toks.type = __acorn.tokTypes.ellipsis;\n      }\n      return new __acorn.Token(this$1.toks)\n    } catch (e) {\n      if (!(e instanceof SyntaxError)) { throw e }\n\n      // Try to skip some text, based on the error message, and then continue\n      var msg = e.message, pos = e.raisedAt, replace = true;\n      if (/unterminated/i.test(msg)) {\n        pos = this$1.lineEnd(e.pos + 1);\n        if (/string/.test(msg)) {\n          replace = {start: e.pos, end: pos, type: __acorn.tokTypes.string, value: this$1.input.slice(e.pos + 1, pos)};\n        } else if (/regular expr/i.test(msg)) {\n          var re = this$1.input.slice(e.pos, pos);\n          try { re = new RegExp(re); } catch (e) { /* ignore compilation error due to new syntax */ }\n          replace = {start: e.pos, end: pos, type: __acorn.tokTypes.regexp, value: re};\n        } else if (/template/.test(msg)) {\n          replace = {\n            start: e.pos,\n            end: pos,\n            type: __acorn.tokTypes.template,\n            value: this$1.input.slice(e.pos, pos)\n          };\n        } else {\n          replace = false;\n        }\n      } else if (/invalid (unicode|regexp|number)|expecting unicode|octal literal|is reserved|directly after number|expected number in radix/i.test(msg)) {\n        while (pos < this.input.length && !isSpace(this.input.charCodeAt(pos))) { ++pos; }\n      } else if (/character escape|expected hexadecimal/i.test(msg)) {\n        while (pos < this.input.length) {\n          var ch = this$1.input.charCodeAt(pos++);\n          if (ch === 34 || ch === 39 || __acorn.isNewLine(ch)) { break }\n        }\n      } else if (/unexpected character/i.test(msg)) {\n        pos++;\n        replace = false;\n      } else if (/regular expression/i.test(msg)) {\n        replace = true;\n      } else {\n        throw e\n      }\n      this$1.resetTo(pos);\n      if (replace === true) { replace = {start: pos, end: pos, type: __acorn.tokTypes.name, value: \"✖\"}; }\n      if (replace) {\n        if (this$1.options.locations)\n          { replace.loc = new __acorn.SourceLocation(\n            this$1.toks,\n            __acorn.getLineInfo(this$1.input, replace.start),\n            __acorn.getLineInfo(this$1.input, replace.end)); }\n        return replace\n      }\n    }\n  }\n};\n\nlp.resetTo = function(pos) {\n  var this$1 = this;\n\n  this.toks.pos = pos;\n  var ch = this.input.charAt(pos - 1);\n  this.toks.exprAllowed = !ch || /[[{(,;:?/*=+\\-~!|&%^<>]/.test(ch) ||\n    /[enwfd]/.test(ch) &&\n    /\\b(case|else|return|throw|new|in|(instance|type)?of|delete|void)$/.test(this.input.slice(pos - 10, pos));\n\n  if (this.options.locations) {\n    this.toks.curLine = 1;\n    this.toks.lineStart = __acorn.lineBreakG.lastIndex = 0;\n    var match;\n    while ((match = __acorn.lineBreakG.exec(this.input)) && match.index < pos) {\n      ++this$1.toks.curLine;\n      this$1.toks.lineStart = match.index + match[0].length;\n    }\n  }\n};\n\nlp.lookAhead = function(n) {\n  var this$1 = this;\n\n  while (n > this.ahead.length)\n    { this$1.ahead.push(this$1.readToken()); }\n  return this.ahead[n - 1]\n};\n\nfunction isDummy(node) { return node.name === \"✖\" }\n\nvar lp$1 = LooseParser.prototype;\n\nlp$1.parseTopLevel = function() {\n  var this$1 = this;\n\n  var node = this.startNodeAt(this.options.locations ? [0, __acorn.getLineInfo(this.input, 0)] : 0);\n  node.body = [];\n  while (this.tok.type !== __acorn.tokTypes.eof) { node.body.push(this$1.parseStatement()); }\n  this.toks.adaptDirectivePrologue(node.body);\n  this.last = this.tok;\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n  return this.finishNode(node, \"Program\")\n};\n\nlp$1.parseStatement = function() {\n  var this$1 = this;\n\n  var starttype = this.tok.type, node = this.startNode(), kind;\n\n  if (this.toks.isLet()) {\n    starttype = __acorn.tokTypes._var;\n    kind = \"let\";\n  }\n\n  switch (starttype) {\n  case __acorn.tokTypes._break: case __acorn.tokTypes._continue:\n    this.next();\n    var isBreak = starttype === __acorn.tokTypes._break;\n    if (this.semicolon() || this.canInsertSemicolon()) {\n      node.label = null;\n    } else {\n      node.label = this.tok.type === __acorn.tokTypes.name ? this.parseIdent() : null;\n      this.semicolon();\n    }\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n\n  case __acorn.tokTypes._debugger:\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\")\n\n  case __acorn.tokTypes._do:\n    this.next();\n    node.body = this.parseStatement();\n    node.test = this.eat(__acorn.tokTypes._while) ? this.parseParenExpression() : this.dummyIdent();\n    this.semicolon();\n    return this.finishNode(node, \"DoWhileStatement\")\n\n  case __acorn.tokTypes._for:\n    this.next(); // `for` keyword\n    var isAwait = this.options.ecmaVersion >= 9 && this.inAsync && this.eatContextual(\"await\");\n\n    this.pushCx();\n    this.expect(__acorn.tokTypes.parenL);\n    if (this.tok.type === __acorn.tokTypes.semi) { return this.parseFor(node, null) }\n    var isLet = this.toks.isLet();\n    if (isLet || this.tok.type === __acorn.tokTypes._var || this.tok.type === __acorn.tokTypes._const) {\n      var init$1 = this.parseVar(true, isLet ? \"let\" : this.tok.value);\n      if (init$1.declarations.length === 1 && (this.tok.type === __acorn.tokTypes._in || this.isContextual(\"of\"))) {\n        if (this.options.ecmaVersion >= 9 && this.tok.type !== __acorn.tokTypes._in) {\n          node.await = isAwait;\n        }\n        return this.parseForIn(node, init$1)\n      }\n      return this.parseFor(node, init$1)\n    }\n    var init = this.parseExpression(true);\n    if (this.tok.type === __acorn.tokTypes._in || this.isContextual(\"of\")) {\n      if (this.options.ecmaVersion >= 9 && this.tok.type !== __acorn.tokTypes._in) {\n        node.await = isAwait;\n      }\n      return this.parseForIn(node, this.toAssignable(init))\n    }\n    return this.parseFor(node, init)\n\n  case __acorn.tokTypes._function:\n    this.next();\n    return this.parseFunction(node, true)\n\n  case __acorn.tokTypes._if:\n    this.next();\n    node.test = this.parseParenExpression();\n    node.consequent = this.parseStatement();\n    node.alternate = this.eat(__acorn.tokTypes._else) ? this.parseStatement() : null;\n    return this.finishNode(node, \"IfStatement\")\n\n  case __acorn.tokTypes._return:\n    this.next();\n    if (this.eat(__acorn.tokTypes.semi) || this.canInsertSemicolon()) { node.argument = null; }\n    else { node.argument = this.parseExpression(); this.semicolon(); }\n    return this.finishNode(node, \"ReturnStatement\")\n\n  case __acorn.tokTypes._switch:\n    var blockIndent = this.curIndent, line = this.curLineStart;\n    this.next();\n    node.discriminant = this.parseParenExpression();\n    node.cases = [];\n    this.pushCx();\n    this.expect(__acorn.tokTypes.braceL);\n\n    var cur;\n    while (!this.closes(__acorn.tokTypes.braceR, blockIndent, line, true)) {\n      if (this$1.tok.type === __acorn.tokTypes._case || this$1.tok.type === __acorn.tokTypes._default) {\n        var isCase = this$1.tok.type === __acorn.tokTypes._case;\n        if (cur) { this$1.finishNode(cur, \"SwitchCase\"); }\n        node.cases.push(cur = this$1.startNode());\n        cur.consequent = [];\n        this$1.next();\n        if (isCase) { cur.test = this$1.parseExpression(); }\n        else { cur.test = null; }\n        this$1.expect(__acorn.tokTypes.colon);\n      } else {\n        if (!cur) {\n          node.cases.push(cur = this$1.startNode());\n          cur.consequent = [];\n          cur.test = null;\n        }\n        cur.consequent.push(this$1.parseStatement());\n      }\n    }\n    if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n    this.popCx();\n    this.eat(__acorn.tokTypes.braceR);\n    return this.finishNode(node, \"SwitchStatement\")\n\n  case __acorn.tokTypes._throw:\n    this.next();\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\")\n\n  case __acorn.tokTypes._try:\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n    if (this.tok.type === __acorn.tokTypes._catch) {\n      var clause = this.startNode();\n      this.next();\n      if (this.eat(__acorn.tokTypes.parenL)) {\n        clause.param = this.toAssignable(this.parseExprAtom(), true);\n        this.expect(__acorn.tokTypes.parenR);\n      } else {\n        clause.param = null;\n      }\n      clause.body = this.parseBlock();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n    node.finalizer = this.eat(__acorn.tokTypes._finally) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer) { return node.block }\n    return this.finishNode(node, \"TryStatement\")\n\n  case __acorn.tokTypes._var:\n  case __acorn.tokTypes._const:\n    return this.parseVar(false, kind || this.tok.value)\n\n  case __acorn.tokTypes._while:\n    this.next();\n    node.test = this.parseParenExpression();\n    node.body = this.parseStatement();\n    return this.finishNode(node, \"WhileStatement\")\n\n  case __acorn.tokTypes._with:\n    this.next();\n    node.object = this.parseParenExpression();\n    node.body = this.parseStatement();\n    return this.finishNode(node, \"WithStatement\")\n\n  case __acorn.tokTypes.braceL:\n    return this.parseBlock()\n\n  case __acorn.tokTypes.semi:\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\")\n\n  case __acorn.tokTypes._class:\n    return this.parseClass(true)\n\n  case __acorn.tokTypes._import:\n    return this.parseImport()\n\n  case __acorn.tokTypes._export:\n    return this.parseExport()\n\n  default:\n    if (this.toks.isAsyncFunction()) {\n      this.next();\n      this.next();\n      return this.parseFunction(node, true, true)\n    }\n    var expr = this.parseExpression();\n    if (isDummy(expr)) {\n      this.next();\n      if (this.tok.type === __acorn.tokTypes.eof) { return this.finishNode(node, \"EmptyStatement\") }\n      return this.parseStatement()\n    } else if (starttype === __acorn.tokTypes.name && expr.type === \"Identifier\" && this.eat(__acorn.tokTypes.colon)) {\n      node.body = this.parseStatement();\n      node.label = expr;\n      return this.finishNode(node, \"LabeledStatement\")\n    } else {\n      node.expression = expr;\n      this.semicolon();\n      return this.finishNode(node, \"ExpressionStatement\")\n    }\n  }\n};\n\nlp$1.parseBlock = function() {\n  var this$1 = this;\n\n  var node = this.startNode();\n  this.pushCx();\n  this.expect(__acorn.tokTypes.braceL);\n  var blockIndent = this.curIndent, line = this.curLineStart;\n  node.body = [];\n  while (!this.closes(__acorn.tokTypes.braceR, blockIndent, line, true))\n    { node.body.push(this$1.parseStatement()); }\n  this.popCx();\n  this.eat(__acorn.tokTypes.braceR);\n  return this.finishNode(node, \"BlockStatement\")\n};\n\nlp$1.parseFor = function(node, init) {\n  node.init = init;\n  node.test = node.update = null;\n  if (this.eat(__acorn.tokTypes.semi) && this.tok.type !== __acorn.tokTypes.semi) { node.test = this.parseExpression(); }\n  if (this.eat(__acorn.tokTypes.semi) && this.tok.type !== __acorn.tokTypes.parenR) { node.update = this.parseExpression(); }\n  this.popCx();\n  this.expect(__acorn.tokTypes.parenR);\n  node.body = this.parseStatement();\n  return this.finishNode(node, \"ForStatement\")\n};\n\nlp$1.parseForIn = function(node, init) {\n  var type = this.tok.type === __acorn.tokTypes._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  node.left = init;\n  node.right = this.parseExpression();\n  this.popCx();\n  this.expect(__acorn.tokTypes.parenR);\n  node.body = this.parseStatement();\n  return this.finishNode(node, type)\n};\n\nlp$1.parseVar = function(noIn, kind) {\n  var this$1 = this;\n\n  var node = this.startNode();\n  node.kind = kind;\n  this.next();\n  node.declarations = [];\n  do {\n    var decl = this$1.startNode();\n    decl.id = this$1.options.ecmaVersion >= 6 ? this$1.toAssignable(this$1.parseExprAtom(), true) : this$1.parseIdent();\n    decl.init = this$1.eat(__acorn.tokTypes.eq) ? this$1.parseMaybeAssign(noIn) : null;\n    node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"));\n  } while (this.eat(__acorn.tokTypes.comma))\n  if (!node.declarations.length) {\n    var decl$1 = this.startNode();\n    decl$1.id = this.dummyIdent();\n    node.declarations.push(this.finishNode(decl$1, \"VariableDeclarator\"));\n  }\n  if (!noIn) { this.semicolon(); }\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\nlp$1.parseClass = function(isStatement) {\n  var this$1 = this;\n\n  var node = this.startNode();\n  this.next();\n  if (this.tok.type === __acorn.tokTypes.name) { node.id = this.parseIdent(); }\n  else if (isStatement === true) { node.id = this.dummyIdent(); }\n  else { node.id = null; }\n  node.superClass = this.eat(__acorn.tokTypes._extends) ? this.parseExpression() : null;\n  node.body = this.startNode();\n  node.body.body = [];\n  this.pushCx();\n  var indent = this.curIndent + 1, line = this.curLineStart;\n  this.eat(__acorn.tokTypes.braceL);\n  if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart; }\n  while (!this.closes(__acorn.tokTypes.braceR, indent, line)) {\n    if (this$1.semicolon()) { continue }\n    var method = this$1.startNode(), isGenerator = (void 0), isAsync = (void 0);\n    if (this$1.options.ecmaVersion >= 6) {\n      method.static = false;\n      isGenerator = this$1.eat(__acorn.tokTypes.star);\n    }\n    this$1.parsePropertyName(method);\n    if (isDummy(method.key)) { if (isDummy(this$1.parseMaybeAssign())) { this$1.next(); } this$1.eat(__acorn.tokTypes.comma); continue }\n    if (method.key.type === \"Identifier\" && !method.computed && method.key.name === \"static\" &&\n        (this$1.tok.type !== __acorn.tokTypes.parenL && this$1.tok.type !== __acorn.tokTypes.braceL)) {\n      method.static = true;\n      isGenerator = this$1.eat(__acorn.tokTypes.star);\n      this$1.parsePropertyName(method);\n    } else {\n      method.static = false;\n    }\n    if (!method.computed &&\n        method.key.type === \"Identifier\" && method.key.name === \"async\" && this$1.tok.type !== __acorn.tokTypes.parenL &&\n        !this$1.canInsertSemicolon()) {\n      isAsync = true;\n      isGenerator = this$1.options.ecmaVersion >= 9 && this$1.eat(__acorn.tokTypes.star);\n      this$1.parsePropertyName(method);\n    } else {\n      isAsync = false;\n    }\n    if (this$1.options.ecmaVersion >= 5 && method.key.type === \"Identifier\" &&\n        !method.computed && (method.key.name === \"get\" || method.key.name === \"set\") &&\n        this$1.tok.type !== __acorn.tokTypes.parenL && this$1.tok.type !== __acorn.tokTypes.braceL) {\n      method.kind = method.key.name;\n      this$1.parsePropertyName(method);\n      method.value = this$1.parseMethod(false);\n    } else {\n      if (!method.computed && !method.static && !isGenerator && !isAsync && (\n        method.key.type === \"Identifier\" && method.key.name === \"constructor\" ||\n          method.key.type === \"Literal\" && method.key.value === \"constructor\")) {\n        method.kind = \"constructor\";\n      } else {\n        method.kind = \"method\";\n      }\n      method.value = this$1.parseMethod(isGenerator, isAsync);\n    }\n    node.body.body.push(this$1.finishNode(method, \"MethodDefinition\"));\n  }\n  this.popCx();\n  if (!this.eat(__acorn.tokTypes.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start;\n    if (this.options.locations) { this.last.loc.end = this.tok.loc.start; }\n  }\n  this.semicolon();\n  this.finishNode(node.body, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\nlp$1.parseFunction = function(node, isStatement, isAsync) {\n  var oldInAsync = this.inAsync, oldInFunction = this.inFunction;\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = this.eat(__acorn.tokTypes.star);\n  }\n  if (this.options.ecmaVersion >= 8) {\n    node.async = !!isAsync;\n  }\n  if (this.tok.type === __acorn.tokTypes.name) { node.id = this.parseIdent(); }\n  else if (isStatement === true) { node.id = this.dummyIdent(); }\n  this.inAsync = node.async;\n  this.inFunction = true;\n  node.params = this.parseFunctionParams();\n  node.body = this.parseBlock();\n  this.toks.adaptDirectivePrologue(node.body.body);\n  this.inAsync = oldInAsync;\n  this.inFunction = oldInFunction;\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\nlp$1.parseExport = function() {\n  var node = this.startNode();\n  this.next();\n  if (this.eat(__acorn.tokTypes.star)) {\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : this.dummyString();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(__acorn.tokTypes._default)) {\n    // export default (function foo() {}) // This is FunctionExpression.\n    var isAsync;\n    if (this.tok.type === __acorn.tokTypes._function || (isAsync = this.toks.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      node.declaration = this.parseFunction(fNode, \"nullableID\", isAsync);\n    } else if (this.tok.type === __acorn.tokTypes._class) {\n      node.declaration = this.parseClass(\"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  if (this.tok.type.keyword || this.toks.isLet() || this.toks.isAsyncFunction()) {\n    node.declaration = this.parseStatement();\n    node.specifiers = [];\n    node.source = null;\n  } else {\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifierList();\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null;\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\nlp$1.parseImport = function() {\n  var node = this.startNode();\n  this.next();\n  if (this.tok.type === __acorn.tokTypes.string) {\n    node.specifiers = [];\n    node.source = this.parseExprAtom();\n  } else {\n    var elt;\n    if (this.tok.type === __acorn.tokTypes.name && this.tok.value !== \"from\") {\n      elt = this.startNode();\n      elt.local = this.parseIdent();\n      this.finishNode(elt, \"ImportDefaultSpecifier\");\n      this.eat(__acorn.tokTypes.comma);\n    }\n    node.specifiers = this.parseImportSpecifierList();\n    node.source = this.eatContextual(\"from\") && this.tok.type === __acorn.tokTypes.string ? this.parseExprAtom() : this.dummyString();\n    if (elt) { node.specifiers.unshift(elt); }\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\nlp$1.parseImportSpecifierList = function() {\n  var this$1 = this;\n\n  var elts = [];\n  if (this.tok.type === __acorn.tokTypes.star) {\n    var elt = this.startNode();\n    this.next();\n    elt.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent();\n    elts.push(this.finishNode(elt, \"ImportNamespaceSpecifier\"));\n  } else {\n    var indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart;\n    this.pushCx();\n    this.eat(__acorn.tokTypes.braceL);\n    if (this.curLineStart > continuedLine) { continuedLine = this.curLineStart; }\n    while (!this.closes(__acorn.tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n      var elt$1 = this$1.startNode();\n      if (this$1.eat(__acorn.tokTypes.star)) {\n        elt$1.local = this$1.eatContextual(\"as\") ? this$1.parseIdent() : this$1.dummyIdent();\n        this$1.finishNode(elt$1, \"ImportNamespaceSpecifier\");\n      } else {\n        if (this$1.isContextual(\"from\")) { break }\n        elt$1.imported = this$1.parseIdent();\n        if (isDummy(elt$1.imported)) { break }\n        elt$1.local = this$1.eatContextual(\"as\") ? this$1.parseIdent() : elt$1.imported;\n        this$1.finishNode(elt$1, \"ImportSpecifier\");\n      }\n      elts.push(elt$1);\n      this$1.eat(__acorn.tokTypes.comma);\n    }\n    this.eat(__acorn.tokTypes.braceR);\n    this.popCx();\n  }\n  return elts\n};\n\nlp$1.parseExportSpecifierList = function() {\n  var this$1 = this;\n\n  var elts = [];\n  var indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart;\n  this.pushCx();\n  this.eat(__acorn.tokTypes.braceL);\n  if (this.curLineStart > continuedLine) { continuedLine = this.curLineStart; }\n  while (!this.closes(__acorn.tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n    if (this$1.isContextual(\"from\")) { break }\n    var elt = this$1.startNode();\n    elt.local = this$1.parseIdent();\n    if (isDummy(elt.local)) { break }\n    elt.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent() : elt.local;\n    this$1.finishNode(elt, \"ExportSpecifier\");\n    elts.push(elt);\n    this$1.eat(__acorn.tokTypes.comma);\n  }\n  this.eat(__acorn.tokTypes.braceR);\n  this.popCx();\n  return elts\n};\n\nvar lp$2 = LooseParser.prototype;\n\nlp$2.checkLVal = function(expr) {\n  if (!expr) { return expr }\n  switch (expr.type) {\n  case \"Identifier\":\n  case \"MemberExpression\":\n    return expr\n\n  case \"ParenthesizedExpression\":\n    expr.expression = this.checkLVal(expr.expression);\n    return expr\n\n  default:\n    return this.dummyIdent()\n  }\n};\n\nlp$2.parseExpression = function(noIn) {\n  var this$1 = this;\n\n  var start = this.storeCurrentPos();\n  var expr = this.parseMaybeAssign(noIn);\n  if (this.tok.type === __acorn.tokTypes.comma) {\n    var node = this.startNodeAt(start);\n    node.expressions = [expr];\n    while (this.eat(__acorn.tokTypes.comma)) { node.expressions.push(this$1.parseMaybeAssign(noIn)); }\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\nlp$2.parseParenExpression = function() {\n  this.pushCx();\n  this.expect(__acorn.tokTypes.parenL);\n  var val = this.parseExpression();\n  this.popCx();\n  this.expect(__acorn.tokTypes.parenR);\n  return val\n};\n\nlp$2.parseMaybeAssign = function(noIn) {\n  if (this.toks.isContextual(\"yield\")) {\n    var node = this.startNode();\n    this.next();\n    if (this.semicolon() || this.canInsertSemicolon() || (this.tok.type !== __acorn.tokTypes.star && !this.tok.type.startsExpr)) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(__acorn.tokTypes.star);\n      node.argument = this.parseMaybeAssign();\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  }\n\n  var start = this.storeCurrentPos();\n  var left = this.parseMaybeConditional(noIn);\n  if (this.tok.type.isAssign) {\n    var node$1 = this.startNodeAt(start);\n    node$1.operator = this.tok.value;\n    node$1.left = this.tok.type === __acorn.tokTypes.eq ? this.toAssignable(left) : this.checkLVal(left);\n    this.next();\n    node$1.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node$1, \"AssignmentExpression\")\n  }\n  return left\n};\n\nlp$2.parseMaybeConditional = function(noIn) {\n  var start = this.storeCurrentPos();\n  var expr = this.parseExprOps(noIn);\n  if (this.eat(__acorn.tokTypes.question)) {\n    var node = this.startNodeAt(start);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    node.alternate = this.expect(__acorn.tokTypes.colon) ? this.parseMaybeAssign(noIn) : this.dummyIdent();\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\nlp$2.parseExprOps = function(noIn) {\n  var start = this.storeCurrentPos();\n  var indent = this.curIndent, line = this.curLineStart;\n  return this.parseExprOp(this.parseMaybeUnary(false), start, -1, noIn, indent, line)\n};\n\nlp$2.parseExprOp = function(left, start, minPrec, noIn, indent, line) {\n  if (this.curLineStart !== line && this.curIndent < indent && this.tokenStartsLine()) { return left }\n  var prec = this.tok.type.binop;\n  if (prec != null && (!noIn || this.tok.type !== __acorn.tokTypes._in)) {\n    if (prec > minPrec) {\n      var node = this.startNodeAt(start);\n      node.left = left;\n      node.operator = this.tok.value;\n      this.next();\n      if (this.curLineStart !== line && this.curIndent < indent && this.tokenStartsLine()) {\n        node.right = this.dummyIdent();\n      } else {\n        var rightStart = this.storeCurrentPos();\n        node.right = this.parseExprOp(this.parseMaybeUnary(false), rightStart, prec, noIn, indent, line);\n      }\n      this.finishNode(node, /&&|\\|\\|/.test(node.operator) ? \"LogicalExpression\" : \"BinaryExpression\");\n      return this.parseExprOp(node, start, minPrec, noIn, indent, line)\n    }\n  }\n  return left\n};\n\nlp$2.parseMaybeUnary = function(sawUnary) {\n  var this$1 = this;\n\n  var start = this.storeCurrentPos(), expr;\n  if (this.options.ecmaVersion >= 8 && this.toks.isContextual(\"await\") &&\n    (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))\n  ) {\n    expr = this.parseAwait();\n    sawUnary = true;\n  } else if (this.tok.type.prefix) {\n    var node = this.startNode(), update = this.tok.type === __acorn.tokTypes.incDec;\n    if (!update) { sawUnary = true; }\n    node.operator = this.tok.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(true);\n    if (update) { node.argument = this.checkLVal(node.argument); }\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else if (this.tok.type === __acorn.tokTypes.ellipsis) {\n    var node$1 = this.startNode();\n    this.next();\n    node$1.argument = this.parseMaybeUnary(sawUnary);\n    expr = this.finishNode(node$1, \"SpreadElement\");\n  } else {\n    expr = this.parseExprSubscripts();\n    while (this.tok.type.postfix && !this.canInsertSemicolon()) {\n      var node$2 = this$1.startNodeAt(start);\n      node$2.operator = this$1.tok.value;\n      node$2.prefix = false;\n      node$2.argument = this$1.checkLVal(expr);\n      this$1.next();\n      expr = this$1.finishNode(node$2, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(__acorn.tokTypes.starstar)) {\n    var node$3 = this.startNodeAt(start);\n    node$3.operator = \"**\";\n    node$3.left = expr;\n    node$3.right = this.parseMaybeUnary(false);\n    return this.finishNode(node$3, \"BinaryExpression\")\n  }\n\n  return expr\n};\n\nlp$2.parseExprSubscripts = function() {\n  var start = this.storeCurrentPos();\n  return this.parseSubscripts(this.parseExprAtom(), start, false, this.curIndent, this.curLineStart)\n};\n\nlp$2.parseSubscripts = function(base, start, noCalls, startIndent, line) {\n  var this$1 = this;\n\n  for (;;) {\n    if (this$1.curLineStart !== line && this$1.curIndent <= startIndent && this$1.tokenStartsLine()) {\n      if (this$1.tok.type === __acorn.tokTypes.dot && this$1.curIndent === startIndent)\n        { --startIndent; }\n      else\n        { return base }\n    }\n\n    var maybeAsyncArrow = base.type === \"Identifier\" && base.name === \"async\" && !this$1.canInsertSemicolon();\n\n    if (this$1.eat(__acorn.tokTypes.dot)) {\n      var node = this$1.startNodeAt(start);\n      node.object = base;\n      if (this$1.curLineStart !== line && this$1.curIndent <= startIndent && this$1.tokenStartsLine())\n        { node.property = this$1.dummyIdent(); }\n      else\n        { node.property = this$1.parsePropertyAccessor() || this$1.dummyIdent(); }\n      node.computed = false;\n      base = this$1.finishNode(node, \"MemberExpression\");\n    } else if (this$1.tok.type === __acorn.tokTypes.bracketL) {\n      this$1.pushCx();\n      this$1.next();\n      var node$1 = this$1.startNodeAt(start);\n      node$1.object = base;\n      node$1.property = this$1.parseExpression();\n      node$1.computed = true;\n      this$1.popCx();\n      this$1.expect(__acorn.tokTypes.bracketR);\n      base = this$1.finishNode(node$1, \"MemberExpression\");\n    } else if (!noCalls && this$1.tok.type === __acorn.tokTypes.parenL) {\n      var exprList = this$1.parseExprList(__acorn.tokTypes.parenR);\n      if (maybeAsyncArrow && this$1.eat(__acorn.tokTypes.arrow))\n        { return this$1.parseArrowExpression(this$1.startNodeAt(start), exprList, true) }\n      var node$2 = this$1.startNodeAt(start);\n      node$2.callee = base;\n      node$2.arguments = exprList;\n      base = this$1.finishNode(node$2, \"CallExpression\");\n    } else if (this$1.tok.type === __acorn.tokTypes.backQuote) {\n      var node$3 = this$1.startNodeAt(start);\n      node$3.tag = base;\n      node$3.quasi = this$1.parseTemplate();\n      base = this$1.finishNode(node$3, \"TaggedTemplateExpression\");\n    } else {\n      return base\n    }\n  }\n};\n\nlp$2.parseExprAtom = function() {\n  var node;\n  switch (this.tok.type) {\n  case __acorn.tokTypes._this:\n  case __acorn.tokTypes._super:\n    var type = this.tok.type === __acorn.tokTypes._this ? \"ThisExpression\" : \"Super\";\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, type)\n\n  case __acorn.tokTypes.name:\n    var start = this.storeCurrentPos();\n    var id = this.parseIdent();\n    var isAsync = false;\n    if (id.name === \"async\" && !this.canInsertSemicolon()) {\n      if (this.eat(__acorn.tokTypes._function))\n        { return this.parseFunction(this.startNodeAt(start), false, true) }\n      if (this.tok.type === __acorn.tokTypes.name) {\n        id = this.parseIdent();\n        isAsync = true;\n      }\n    }\n    return this.eat(__acorn.tokTypes.arrow) ? this.parseArrowExpression(this.startNodeAt(start), [id], isAsync) : id\n\n  case __acorn.tokTypes.regexp:\n    node = this.startNode();\n    var val = this.tok.value;\n    node.regex = {pattern: val.pattern, flags: val.flags};\n    node.value = val.value;\n    node.raw = this.input.slice(this.tok.start, this.tok.end);\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case __acorn.tokTypes.num: case __acorn.tokTypes.string:\n    node = this.startNode();\n    node.value = this.tok.value;\n    node.raw = this.input.slice(this.tok.start, this.tok.end);\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case __acorn.tokTypes._null: case __acorn.tokTypes._true: case __acorn.tokTypes._false:\n    node = this.startNode();\n    node.value = this.tok.type === __acorn.tokTypes._null ? null : this.tok.type === __acorn.tokTypes._true;\n    node.raw = this.tok.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case __acorn.tokTypes.parenL:\n    var parenStart = this.storeCurrentPos();\n    this.next();\n    var inner = this.parseExpression();\n    this.expect(__acorn.tokTypes.parenR);\n    if (this.eat(__acorn.tokTypes.arrow)) {\n      // (a,)=>a // SequenceExpression makes dummy in the last hole. Drop the dummy.\n      var params = inner.expressions || [inner];\n      if (params.length && isDummy(params[params.length - 1]))\n        { params.pop(); }\n      return this.parseArrowExpression(this.startNodeAt(parenStart), params)\n    }\n    if (this.options.preserveParens) {\n      var par = this.startNodeAt(parenStart);\n      par.expression = inner;\n      inner = this.finishNode(par, \"ParenthesizedExpression\");\n    }\n    return inner\n\n  case __acorn.tokTypes.bracketL:\n    node = this.startNode();\n    node.elements = this.parseExprList(__acorn.tokTypes.bracketR, true);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case __acorn.tokTypes.braceL:\n    return this.parseObj()\n\n  case __acorn.tokTypes._class:\n    return this.parseClass(false)\n\n  case __acorn.tokTypes._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, false)\n\n  case __acorn.tokTypes._new:\n    return this.parseNew()\n\n  case __acorn.tokTypes.backQuote:\n    return this.parseTemplate()\n\n  default:\n    return this.dummyIdent()\n  }\n};\n\nlp$2.parseNew = function() {\n  var node = this.startNode(), startIndent = this.curIndent, line = this.curLineStart;\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(__acorn.tokTypes.dot)) {\n    node.meta = meta;\n    node.property = this.parseIdent(true);\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var start = this.storeCurrentPos();\n  node.callee = this.parseSubscripts(this.parseExprAtom(), start, true, startIndent, line);\n  if (this.tok.type === __acorn.tokTypes.parenL) {\n    node.arguments = this.parseExprList(__acorn.tokTypes.parenR);\n  } else {\n    node.arguments = [];\n  }\n  return this.finishNode(node, \"NewExpression\")\n};\n\nlp$2.parseTemplateElement = function() {\n  var elem = this.startNode();\n\n  // The loose parser accepts invalid unicode escapes even in untagged templates.\n  if (this.tok.type === __acorn.tokTypes.invalidTemplate) {\n    elem.value = {\n      raw: this.tok.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.tok.start, this.tok.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.tok.value\n    };\n  }\n  this.next();\n  elem.tail = this.tok.type === __acorn.tokTypes.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\nlp$2.parseTemplate = function() {\n  var this$1 = this;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement();\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    this$1.next();\n    node.expressions.push(this$1.parseExpression());\n    if (this$1.expect(__acorn.tokTypes.braceR)) {\n      curElt = this$1.parseTemplateElement();\n    } else {\n      curElt = this$1.startNode();\n      curElt.value = {cooked: \"\", raw: \"\"};\n      curElt.tail = true;\n      this$1.finishNode(curElt, \"TemplateElement\");\n    }\n    node.quasis.push(curElt);\n  }\n  this.expect(__acorn.tokTypes.backQuote);\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\nlp$2.parseObj = function() {\n  var this$1 = this;\n\n  var node = this.startNode();\n  node.properties = [];\n  this.pushCx();\n  var indent = this.curIndent + 1, line = this.curLineStart;\n  this.eat(__acorn.tokTypes.braceL);\n  if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart; }\n  while (!this.closes(__acorn.tokTypes.braceR, indent, line)) {\n    var prop = this$1.startNode(), isGenerator = (void 0), isAsync = (void 0), start = (void 0);\n    if (this$1.options.ecmaVersion >= 9 && this$1.eat(__acorn.tokTypes.ellipsis)) {\n      prop.argument = this$1.parseMaybeAssign();\n      node.properties.push(this$1.finishNode(prop, \"SpreadElement\"));\n      this$1.eat(__acorn.tokTypes.comma);\n      continue\n    }\n    if (this$1.options.ecmaVersion >= 6) {\n      start = this$1.storeCurrentPos();\n      prop.method = false;\n      prop.shorthand = false;\n      isGenerator = this$1.eat(__acorn.tokTypes.star);\n    }\n    this$1.parsePropertyName(prop);\n    if (this$1.toks.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this$1.options.ecmaVersion >= 9 && this$1.eat(__acorn.tokTypes.star);\n      this$1.parsePropertyName(prop);\n    } else {\n      isAsync = false;\n    }\n    if (isDummy(prop.key)) { if (isDummy(this$1.parseMaybeAssign())) { this$1.next(); } this$1.eat(__acorn.tokTypes.comma); continue }\n    if (this$1.eat(__acorn.tokTypes.colon)) {\n      prop.kind = \"init\";\n      prop.value = this$1.parseMaybeAssign();\n    } else if (this$1.options.ecmaVersion >= 6 && (this$1.tok.type === __acorn.tokTypes.parenL || this$1.tok.type === __acorn.tokTypes.braceL)) {\n      prop.kind = \"init\";\n      prop.method = true;\n      prop.value = this$1.parseMethod(isGenerator, isAsync);\n    } else if (this$1.options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" &&\n               !prop.computed && (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this$1.tok.type !== __acorn.tokTypes.comma && this$1.tok.type !== __acorn.tokTypes.braceR && this$1.tok.type !== __acorn.tokTypes.eq)) {\n      prop.kind = prop.key.name;\n      this$1.parsePropertyName(prop);\n      prop.value = this$1.parseMethod(false);\n    } else {\n      prop.kind = \"init\";\n      if (this$1.options.ecmaVersion >= 6) {\n        if (this$1.eat(__acorn.tokTypes.eq)) {\n          var assign = this$1.startNodeAt(start);\n          assign.operator = \"=\";\n          assign.left = prop.key;\n          assign.right = this$1.parseMaybeAssign();\n          prop.value = this$1.finishNode(assign, \"AssignmentExpression\");\n        } else {\n          prop.value = prop.key;\n        }\n      } else {\n        prop.value = this$1.dummyIdent();\n      }\n      prop.shorthand = true;\n    }\n    node.properties.push(this$1.finishNode(prop, \"Property\"));\n    this$1.eat(__acorn.tokTypes.comma);\n  }\n  this.popCx();\n  if (!this.eat(__acorn.tokTypes.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start;\n    if (this.options.locations) { this.last.loc.end = this.tok.loc.start; }\n  }\n  return this.finishNode(node, \"ObjectExpression\")\n};\n\nlp$2.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(__acorn.tokTypes.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseExpression();\n      this.expect(__acorn.tokTypes.bracketR);\n      return\n    } else {\n      prop.computed = false;\n    }\n  }\n  var key = (this.tok.type === __acorn.tokTypes.num || this.tok.type === __acorn.tokTypes.string) ? this.parseExprAtom() : this.parseIdent();\n  prop.key = key || this.dummyIdent();\n};\n\nlp$2.parsePropertyAccessor = function() {\n  if (this.tok.type === __acorn.tokTypes.name || this.tok.type.keyword) { return this.parseIdent() }\n};\n\nlp$2.parseIdent = function() {\n  var name = this.tok.type === __acorn.tokTypes.name ? this.tok.value : this.tok.type.keyword;\n  if (!name) { return this.dummyIdent() }\n  var node = this.startNode();\n  this.next();\n  node.name = name;\n  return this.finishNode(node, \"Identifier\")\n};\n\nlp$2.initFunction = function(node) {\n  node.id = null;\n  node.params = [];\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = false; }\n};\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\nlp$2.toAssignable = function(node, binding) {\n  var this$1 = this;\n\n  if (!node || node.type === \"Identifier\" || (node.type === \"MemberExpression\" && !binding)) {\n    // Okay\n  } else if (node.type === \"ParenthesizedExpression\") {\n    this.toAssignable(node.expression, binding);\n  } else if (this.options.ecmaVersion < 6) {\n    return this.dummyIdent()\n  } else if (node.type === \"ObjectExpression\") {\n    node.type = \"ObjectPattern\";\n    for (var i = 0, list = node.properties; i < list.length; i += 1)\n      {\n      var prop = list[i];\n\n      this$1.toAssignable(prop, binding);\n    }\n  } else if (node.type === \"ArrayExpression\") {\n    node.type = \"ArrayPattern\";\n    this.toAssignableList(node.elements, binding);\n  } else if (node.type === \"Property\") {\n    this.toAssignable(node.value, binding);\n  } else if (node.type === \"SpreadElement\") {\n    node.type = \"RestElement\";\n    this.toAssignable(node.argument, binding);\n  } else if (node.type === \"AssignmentExpression\") {\n    node.type = \"AssignmentPattern\";\n    delete node.operator;\n  } else {\n    return this.dummyIdent()\n  }\n  return node\n};\n\nlp$2.toAssignableList = function(exprList, binding) {\n  var this$1 = this;\n\n  for (var i = 0, list = exprList; i < list.length; i += 1)\n    {\n    var expr = list[i];\n\n    this$1.toAssignable(expr, binding);\n  }\n  return exprList\n};\n\nlp$2.parseFunctionParams = function(params) {\n  params = this.parseExprList(__acorn.tokTypes.parenR);\n  return this.toAssignableList(params, true)\n};\n\nlp$2.parseMethod = function(isGenerator, isAsync) {\n  var node = this.startNode(), oldInAsync = this.inAsync, oldInFunction = this.inFunction;\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = !!isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n  this.inAsync = node.async;\n  this.inFunction = true;\n  node.params = this.parseFunctionParams();\n  node.body = this.parseBlock();\n  this.toks.adaptDirectivePrologue(node.body.body);\n  this.inAsync = oldInAsync;\n  this.inFunction = oldInFunction;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\nlp$2.parseArrowExpression = function(node, params, isAsync) {\n  var oldInAsync = this.inAsync, oldInFunction = this.inFunction;\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n  this.inAsync = node.async;\n  this.inFunction = true;\n  node.params = this.toAssignableList(params, true);\n  node.expression = this.tok.type !== __acorn.tokTypes.braceL;\n  if (node.expression) {\n    node.body = this.parseMaybeAssign();\n  } else {\n    node.body = this.parseBlock();\n    this.toks.adaptDirectivePrologue(node.body.body);\n  }\n  this.inAsync = oldInAsync;\n  this.inFunction = oldInFunction;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\nlp$2.parseExprList = function(close, allowEmpty) {\n  var this$1 = this;\n\n  this.pushCx();\n  var indent = this.curIndent, line = this.curLineStart, elts = [];\n  this.next(); // Opening bracket\n  while (!this.closes(close, indent + 1, line)) {\n    if (this$1.eat(__acorn.tokTypes.comma)) {\n      elts.push(allowEmpty ? null : this$1.dummyIdent());\n      continue\n    }\n    var elt = this$1.parseMaybeAssign();\n    if (isDummy(elt)) {\n      if (this$1.closes(close, indent, line)) { break }\n      this$1.next();\n    } else {\n      elts.push(elt);\n    }\n    this$1.eat(__acorn.tokTypes.comma);\n  }\n  this.popCx();\n  if (!this.eat(close)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start;\n    if (this.options.locations) { this.last.loc.end = this.tok.loc.start; }\n  }\n  return elts\n};\n\nlp$2.parseAwait = function() {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary();\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\n// Acorn: Loose parser\n//\n// This module provides an alternative parser (`parse_dammit`) that\n// exposes that same interface as `parse`, but will try to parse\n// anything as JavaScript, repairing syntax error the best it can.\n// There are circumstances in which it will raise an error and give\n// up, but they are very rare. The resulting AST will be a mostly\n// valid JavaScript AST (as per the [Mozilla parser API][api], except\n// that:\n//\n// - Return outside functions is allowed\n//\n// - Label consistency (no conflicts, break only to existing labels)\n//   is not enforced.\n//\n// - Bogus Identifier nodes with a name of `\"✖\"` are inserted whenever\n//   the parser got too confused to return anything meaningful.\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n//\n// The expected use for this is to *first* try `acorn.parse`, and only\n// if that fails switch to `parse_dammit`. The loose parser might\n// parse badly indented code incorrectly, so **don't** use it as\n// your default parser.\n//\n// Quite a lot of acorn.js is duplicated here. The alternative was to\n// add a *lot* of extra cruft to that file, making it less readable\n// and slower. Copying and editing the code allowed me to make\n// invasive changes and simplifications without creating a complicated\n// tangle.\n\n__acorn.defaultOptions.tabSize = 4;\n\n// eslint-disable-next-line camelcase\nfunction parse_dammit(input, options) {\n  return new LooseParser(input, options).parse()\n}\n\n__acorn.addLooseExports(parse_dammit, LooseParser, pluginsLoose);\n\nexports.parse_dammit = parse_dammit;\nexports.LooseParser = LooseParser;\nexports.pluginsLoose = pluginsLoose;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]},"metadata":{},"sourceType":"script"}