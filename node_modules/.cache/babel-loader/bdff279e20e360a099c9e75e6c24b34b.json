{"ast":null,"code":"import getValue, { getLiteralValue } from './values';\n\nconst extractValue = (attribute, extractor) => {\n  if (attribute && attribute.type === 'JSXAttribute') {\n    if (attribute.value === null) {\n      // Null valued attributes imply truthiness.\n      // For example: <div aria-hidden />\n      // See: https://facebook.github.io/react/docs/jsx-in-depth.html#boolean-attributes\n      return true;\n    }\n\n    return extractor(attribute.value);\n  }\n\n  return undefined;\n};\n/**\n * Returns the value of a given attribute.\n * Different types of attributes have their associated\n * values in different properties on the object.\n *\n * This function should return the most *closely* associated\n * value with the intention of the JSX.\n *\n * @param attribute - The JSXAttribute collected by AST parser.\n */\n\n\nexport default function getPropValue(attribute) {\n  return extractValue(attribute, getValue);\n}\n/**\n * Returns the value of a given attribute.\n * Different types of attributes have their associated\n * values in different properties on the object.\n *\n * This function should return a value only if we can extract\n * a literal value from its attribute (i.e. values that have generic\n * types in JavaScript - strings, numbers, booleans, etc.)\n *\n * @param attribute - The JSXAttribute collected by AST parser.\n */\n\nexport function getLiteralPropValue(attribute) {\n  return extractValue(attribute, getLiteralValue);\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/src/getPropValue.js"],"names":["getValue","getLiteralValue","extractValue","attribute","extractor","type","value","undefined","getPropValue","getLiteralPropValue"],"mappings":"AAAA,OAAOA,QAAP,IAAmBC,eAAnB,QAA0C,UAA1C;;AAEA,MAAMC,YAAY,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AAC7C,MAAID,SAAS,IAAIA,SAAS,CAACE,IAAV,KAAmB,cAApC,EAAoD;AAClD,QAAIF,SAAS,CAACG,KAAV,KAAoB,IAAxB,EAA8B;AAC5B;AACA;AACA;AACA,aAAO,IAAP;AACD;;AAED,WAAOF,SAAS,CAACD,SAAS,CAACG,KAAX,CAAhB;AACD;;AAED,SAAOC,SAAP;AACD,CAbD;AAeA;;;;;;;;;;;;AAUA,eAAe,SAASC,YAAT,CAAsBL,SAAtB,EAAiC;AAC9C,SAAOD,YAAY,CAACC,SAAD,EAAYH,QAAZ,CAAnB;AACD;AAED;;;;;;;;;;;;AAWA,OAAO,SAASS,mBAAT,CAA6BN,SAA7B,EAAwC;AAC7C,SAAOD,YAAY,CAACC,SAAD,EAAYF,eAAZ,CAAnB;AACD","sourcesContent":["import getValue, { getLiteralValue } from './values';\n\nconst extractValue = (attribute, extractor) => {\n  if (attribute && attribute.type === 'JSXAttribute') {\n    if (attribute.value === null) {\n      // Null valued attributes imply truthiness.\n      // For example: <div aria-hidden />\n      // See: https://facebook.github.io/react/docs/jsx-in-depth.html#boolean-attributes\n      return true;\n    }\n\n    return extractor(attribute.value);\n  }\n\n  return undefined;\n};\n\n/**\n * Returns the value of a given attribute.\n * Different types of attributes have their associated\n * values in different properties on the object.\n *\n * This function should return the most *closely* associated\n * value with the intention of the JSX.\n *\n * @param attribute - The JSXAttribute collected by AST parser.\n */\nexport default function getPropValue(attribute) {\n  return extractValue(attribute, getValue);\n}\n\n/**\n * Returns the value of a given attribute.\n * Different types of attributes have their associated\n * values in different properties on the object.\n *\n * This function should return a value only if we can extract\n * a literal value from its attribute (i.e. values that have generic\n * types in JavaScript - strings, numbers, booleans, etc.)\n *\n * @param attribute - The JSXAttribute collected by AST parser.\n */\nexport function getLiteralPropValue(attribute) {\n  return extractValue(attribute, getLiteralValue);\n}\n"]},"metadata":{},"sourceType":"module"}