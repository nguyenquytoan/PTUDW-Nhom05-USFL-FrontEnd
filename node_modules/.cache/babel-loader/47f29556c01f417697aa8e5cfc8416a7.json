{"ast":null,"code":"/****\n * The MIT License\n *\n * Copyright (c) 2015 Marco Ziccardi\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n ****/\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define('timsort', ['exports'], factory);\n  } else if (typeof exports !== 'undefined') {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.timsort = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  exports.__esModule = true;\n  exports.sort = sort;\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n\n  var DEFAULT_MIN_MERGE = 32;\n  var DEFAULT_MIN_GALLOPING = 7;\n  var DEFAULT_TMP_STORAGE_LENGTH = 256;\n  var POWERS_OF_TEN = [1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9];\n\n  function log10(x) {\n    if (x < 1e5) {\n      if (x < 1e2) {\n        return x < 1e1 ? 0 : 1;\n      }\n\n      if (x < 1e4) {\n        return x < 1e3 ? 2 : 3;\n      }\n\n      return 4;\n    }\n\n    if (x < 1e7) {\n      return x < 1e6 ? 5 : 6;\n    }\n\n    if (x < 1e9) {\n      return x < 1e8 ? 7 : 8;\n    }\n\n    return 9;\n  }\n\n  function alphabeticalCompare(a, b) {\n    if (a === b) {\n      return 0;\n    }\n\n    if (~~a === a && ~~b === b) {\n      if (a === 0 || b === 0) {\n        return a < b ? -1 : 1;\n      }\n\n      if (a < 0 || b < 0) {\n        if (b >= 0) {\n          return -1;\n        }\n\n        if (a >= 0) {\n          return 1;\n        }\n\n        a = -a;\n        b = -b;\n      }\n\n      var al = log10(a);\n      var bl = log10(b);\n      var t = 0;\n\n      if (al < bl) {\n        a *= POWERS_OF_TEN[bl - al - 1];\n        b /= 10;\n        t = -1;\n      } else if (al > bl) {\n        b *= POWERS_OF_TEN[al - bl - 1];\n        a /= 10;\n        t = 1;\n      }\n\n      if (a === b) {\n        return t;\n      }\n\n      return a < b ? -1 : 1;\n    }\n\n    var aStr = String(a);\n    var bStr = String(b);\n\n    if (aStr === bStr) {\n      return 0;\n    }\n\n    return aStr < bStr ? -1 : 1;\n  }\n\n  function minRunLength(n) {\n    var r = 0;\n\n    while (n >= DEFAULT_MIN_MERGE) {\n      r |= n & 1;\n      n >>= 1;\n    }\n\n    return n + r;\n  }\n\n  function makeAscendingRun(array, lo, hi, compare) {\n    var runHi = lo + 1;\n\n    if (runHi === hi) {\n      return 1;\n    }\n\n    if (compare(array[runHi++], array[lo]) < 0) {\n      while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\n        runHi++;\n      }\n\n      reverseRun(array, lo, runHi);\n    } else {\n      while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\n        runHi++;\n      }\n    }\n\n    return runHi - lo;\n  }\n\n  function reverseRun(array, lo, hi) {\n    hi--;\n\n    while (lo < hi) {\n      var t = array[lo];\n      array[lo++] = array[hi];\n      array[hi--] = t;\n    }\n  }\n\n  function binaryInsertionSort(array, lo, hi, start, compare) {\n    if (start === lo) {\n      start++;\n    }\n\n    for (; start < hi; start++) {\n      var pivot = array[start];\n      var left = lo;\n      var right = start;\n\n      while (left < right) {\n        var mid = left + right >>> 1;\n\n        if (compare(pivot, array[mid]) < 0) {\n          right = mid;\n        } else {\n          left = mid + 1;\n        }\n      }\n\n      var n = start - left;\n\n      switch (n) {\n        case 3:\n          array[left + 3] = array[left + 2];\n\n        case 2:\n          array[left + 2] = array[left + 1];\n\n        case 1:\n          array[left + 1] = array[left];\n          break;\n\n        default:\n          while (n > 0) {\n            array[left + n] = array[left + n - 1];\n            n--;\n          }\n\n      }\n\n      array[left] = pivot;\n    }\n  }\n\n  function gallopLeft(value, array, start, length, hint, compare) {\n    var lastOffset = 0;\n    var maxOffset = 0;\n    var offset = 1;\n\n    if (compare(value, array[start + hint]) > 0) {\n      maxOffset = length - hint;\n\n      while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      lastOffset += hint;\n      offset += hint;\n    } else {\n      maxOffset = hint + 1;\n\n      while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      var tmp = lastOffset;\n      lastOffset = hint - offset;\n      offset = hint - tmp;\n    }\n\n    lastOffset++;\n\n    while (lastOffset < offset) {\n      var m = lastOffset + (offset - lastOffset >>> 1);\n\n      if (compare(value, array[start + m]) > 0) {\n        lastOffset = m + 1;\n      } else {\n        offset = m;\n      }\n    }\n\n    return offset;\n  }\n\n  function gallopRight(value, array, start, length, hint, compare) {\n    var lastOffset = 0;\n    var maxOffset = 0;\n    var offset = 1;\n\n    if (compare(value, array[start + hint]) < 0) {\n      maxOffset = hint + 1;\n\n      while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      var tmp = lastOffset;\n      lastOffset = hint - offset;\n      offset = hint - tmp;\n    } else {\n      maxOffset = length - hint;\n\n      while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      lastOffset += hint;\n      offset += hint;\n    }\n\n    lastOffset++;\n\n    while (lastOffset < offset) {\n      var m = lastOffset + (offset - lastOffset >>> 1);\n\n      if (compare(value, array[start + m]) < 0) {\n        offset = m;\n      } else {\n        lastOffset = m + 1;\n      }\n    }\n\n    return offset;\n  }\n\n  var TimSort = function () {\n    function TimSort(array, compare) {\n      _classCallCheck(this, TimSort);\n\n      this.array = null;\n      this.compare = null;\n      this.minGallop = DEFAULT_MIN_GALLOPING;\n      this.length = 0;\n      this.tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;\n      this.stackLength = 0;\n      this.runStart = null;\n      this.runLength = null;\n      this.stackSize = 0;\n      this.array = array;\n      this.compare = compare;\n      this.length = array.length;\n\n      if (this.length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {\n        this.tmpStorageLength = this.length >>> 1;\n      }\n\n      this.tmp = new Array(this.tmpStorageLength);\n      this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40;\n      this.runStart = new Array(this.stackLength);\n      this.runLength = new Array(this.stackLength);\n    }\n\n    TimSort.prototype.pushRun = function pushRun(runStart, runLength) {\n      this.runStart[this.stackSize] = runStart;\n      this.runLength[this.stackSize] = runLength;\n      this.stackSize += 1;\n    };\n\n    TimSort.prototype.mergeRuns = function mergeRuns() {\n      while (this.stackSize > 1) {\n        var n = this.stackSize - 2;\n\n        if (n >= 1 && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1] || n >= 2 && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]) {\n          if (this.runLength[n - 1] < this.runLength[n + 1]) {\n            n--;\n          }\n        } else if (this.runLength[n] > this.runLength[n + 1]) {\n          break;\n        }\n\n        this.mergeAt(n);\n      }\n    };\n\n    TimSort.prototype.forceMergeRuns = function forceMergeRuns() {\n      while (this.stackSize > 1) {\n        var n = this.stackSize - 2;\n\n        if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {\n          n--;\n        }\n\n        this.mergeAt(n);\n      }\n    };\n\n    TimSort.prototype.mergeAt = function mergeAt(i) {\n      var compare = this.compare;\n      var array = this.array;\n      var start1 = this.runStart[i];\n      var length1 = this.runLength[i];\n      var start2 = this.runStart[i + 1];\n      var length2 = this.runLength[i + 1];\n      this.runLength[i] = length1 + length2;\n\n      if (i === this.stackSize - 3) {\n        this.runStart[i + 1] = this.runStart[i + 2];\n        this.runLength[i + 1] = this.runLength[i + 2];\n      }\n\n      this.stackSize--;\n      var k = gallopRight(array[start2], array, start1, length1, 0, compare);\n      start1 += k;\n      length1 -= k;\n\n      if (length1 === 0) {\n        return;\n      }\n\n      length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);\n\n      if (length2 === 0) {\n        return;\n      }\n\n      if (length1 <= length2) {\n        this.mergeLow(start1, length1, start2, length2);\n      } else {\n        this.mergeHigh(start1, length1, start2, length2);\n      }\n    };\n\n    TimSort.prototype.mergeLow = function mergeLow(start1, length1, start2, length2) {\n      var compare = this.compare;\n      var array = this.array;\n      var tmp = this.tmp;\n      var i = 0;\n\n      for (i = 0; i < length1; i++) {\n        tmp[i] = array[start1 + i];\n      }\n\n      var cursor1 = 0;\n      var cursor2 = start2;\n      var dest = start1;\n      array[dest++] = array[cursor2++];\n\n      if (--length2 === 0) {\n        for (i = 0; i < length1; i++) {\n          array[dest + i] = tmp[cursor1 + i];\n        }\n\n        return;\n      }\n\n      if (length1 === 1) {\n        for (i = 0; i < length2; i++) {\n          array[dest + i] = array[cursor2 + i];\n        }\n\n        array[dest + length2] = tmp[cursor1];\n        return;\n      }\n\n      var minGallop = this.minGallop;\n\n      while (true) {\n        var count1 = 0;\n        var count2 = 0;\n        var exit = false;\n\n        do {\n          if (compare(array[cursor2], tmp[cursor1]) < 0) {\n            array[dest++] = array[cursor2++];\n            count2++;\n            count1 = 0;\n\n            if (--length2 === 0) {\n              exit = true;\n              break;\n            }\n          } else {\n            array[dest++] = tmp[cursor1++];\n            count1++;\n            count2 = 0;\n\n            if (--length1 === 1) {\n              exit = true;\n              break;\n            }\n          }\n        } while ((count1 | count2) < minGallop);\n\n        if (exit) {\n          break;\n        }\n\n        do {\n          count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);\n\n          if (count1 !== 0) {\n            for (i = 0; i < count1; i++) {\n              array[dest + i] = tmp[cursor1 + i];\n            }\n\n            dest += count1;\n            cursor1 += count1;\n            length1 -= count1;\n\n            if (length1 <= 1) {\n              exit = true;\n              break;\n            }\n          }\n\n          array[dest++] = array[cursor2++];\n\n          if (--length2 === 0) {\n            exit = true;\n            break;\n          }\n\n          count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);\n\n          if (count2 !== 0) {\n            for (i = 0; i < count2; i++) {\n              array[dest + i] = array[cursor2 + i];\n            }\n\n            dest += count2;\n            cursor2 += count2;\n            length2 -= count2;\n\n            if (length2 === 0) {\n              exit = true;\n              break;\n            }\n          }\n\n          array[dest++] = tmp[cursor1++];\n\n          if (--length1 === 1) {\n            exit = true;\n            break;\n          }\n\n          minGallop--;\n        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n        if (exit) {\n          break;\n        }\n\n        if (minGallop < 0) {\n          minGallop = 0;\n        }\n\n        minGallop += 2;\n      }\n\n      this.minGallop = minGallop;\n\n      if (minGallop < 1) {\n        this.minGallop = 1;\n      }\n\n      if (length1 === 1) {\n        for (i = 0; i < length2; i++) {\n          array[dest + i] = array[cursor2 + i];\n        }\n\n        array[dest + length2] = tmp[cursor1];\n      } else if (length1 === 0) {\n        throw new Error('mergeLow preconditions were not respected');\n      } else {\n        for (i = 0; i < length1; i++) {\n          array[dest + i] = tmp[cursor1 + i];\n        }\n      }\n    };\n\n    TimSort.prototype.mergeHigh = function mergeHigh(start1, length1, start2, length2) {\n      var compare = this.compare;\n      var array = this.array;\n      var tmp = this.tmp;\n      var i = 0;\n\n      for (i = 0; i < length2; i++) {\n        tmp[i] = array[start2 + i];\n      }\n\n      var cursor1 = start1 + length1 - 1;\n      var cursor2 = length2 - 1;\n      var dest = start2 + length2 - 1;\n      var customCursor = 0;\n      var customDest = 0;\n      array[dest--] = array[cursor1--];\n\n      if (--length1 === 0) {\n        customCursor = dest - (length2 - 1);\n\n        for (i = 0; i < length2; i++) {\n          array[customCursor + i] = tmp[i];\n        }\n\n        return;\n      }\n\n      if (length2 === 1) {\n        dest -= length1;\n        cursor1 -= length1;\n        customDest = dest + 1;\n        customCursor = cursor1 + 1;\n\n        for (i = length1 - 1; i >= 0; i--) {\n          array[customDest + i] = array[customCursor + i];\n        }\n\n        array[dest] = tmp[cursor2];\n        return;\n      }\n\n      var minGallop = this.minGallop;\n\n      while (true) {\n        var count1 = 0;\n        var count2 = 0;\n        var exit = false;\n\n        do {\n          if (compare(tmp[cursor2], array[cursor1]) < 0) {\n            array[dest--] = array[cursor1--];\n            count1++;\n            count2 = 0;\n\n            if (--length1 === 0) {\n              exit = true;\n              break;\n            }\n          } else {\n            array[dest--] = tmp[cursor2--];\n            count2++;\n            count1 = 0;\n\n            if (--length2 === 1) {\n              exit = true;\n              break;\n            }\n          }\n        } while ((count1 | count2) < minGallop);\n\n        if (exit) {\n          break;\n        }\n\n        do {\n          count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);\n\n          if (count1 !== 0) {\n            dest -= count1;\n            cursor1 -= count1;\n            length1 -= count1;\n            customDest = dest + 1;\n            customCursor = cursor1 + 1;\n\n            for (i = count1 - 1; i >= 0; i--) {\n              array[customDest + i] = array[customCursor + i];\n            }\n\n            if (length1 === 0) {\n              exit = true;\n              break;\n            }\n          }\n\n          array[dest--] = tmp[cursor2--];\n\n          if (--length2 === 1) {\n            exit = true;\n            break;\n          }\n\n          count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);\n\n          if (count2 !== 0) {\n            dest -= count2;\n            cursor2 -= count2;\n            length2 -= count2;\n            customDest = dest + 1;\n            customCursor = cursor2 + 1;\n\n            for (i = 0; i < count2; i++) {\n              array[customDest + i] = tmp[customCursor + i];\n            }\n\n            if (length2 <= 1) {\n              exit = true;\n              break;\n            }\n          }\n\n          array[dest--] = array[cursor1--];\n\n          if (--length1 === 0) {\n            exit = true;\n            break;\n          }\n\n          minGallop--;\n        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n        if (exit) {\n          break;\n        }\n\n        if (minGallop < 0) {\n          minGallop = 0;\n        }\n\n        minGallop += 2;\n      }\n\n      this.minGallop = minGallop;\n\n      if (minGallop < 1) {\n        this.minGallop = 1;\n      }\n\n      if (length2 === 1) {\n        dest -= length1;\n        cursor1 -= length1;\n        customDest = dest + 1;\n        customCursor = cursor1 + 1;\n\n        for (i = length1 - 1; i >= 0; i--) {\n          array[customDest + i] = array[customCursor + i];\n        }\n\n        array[dest] = tmp[cursor2];\n      } else if (length2 === 0) {\n        throw new Error('mergeHigh preconditions were not respected');\n      } else {\n        customCursor = dest - (length2 - 1);\n\n        for (i = 0; i < length2; i++) {\n          array[customCursor + i] = tmp[i];\n        }\n      }\n    };\n\n    return TimSort;\n  }();\n\n  function sort(array, compare, lo, hi) {\n    if (!Array.isArray(array)) {\n      throw new TypeError('Can only sort arrays');\n    }\n\n    if (!compare) {\n      compare = alphabeticalCompare;\n    } else if (typeof compare !== 'function') {\n      hi = lo;\n      lo = compare;\n      compare = alphabeticalCompare;\n    }\n\n    if (!lo) {\n      lo = 0;\n    }\n\n    if (!hi) {\n      hi = array.length;\n    }\n\n    var remaining = hi - lo;\n\n    if (remaining < 2) {\n      return;\n    }\n\n    var runLength = 0;\n\n    if (remaining < DEFAULT_MIN_MERGE) {\n      runLength = makeAscendingRun(array, lo, hi, compare);\n      binaryInsertionSort(array, lo, hi, lo + runLength, compare);\n      return;\n    }\n\n    var ts = new TimSort(array, compare);\n    var minRun = minRunLength(remaining);\n\n    do {\n      runLength = makeAscendingRun(array, lo, hi, compare);\n\n      if (runLength < minRun) {\n        var force = remaining;\n\n        if (force > minRun) {\n          force = minRun;\n        }\n\n        binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);\n        runLength = force;\n      }\n\n      ts.pushRun(lo, runLength);\n      ts.mergeRuns();\n      remaining -= runLength;\n      lo += runLength;\n    } while (remaining !== 0);\n\n    ts.forceMergeRuns();\n  }\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/timsort/build/timsort.js"],"names":["global","factory","define","amd","exports","mod","timsort","__esModule","sort","_classCallCheck","instance","Constructor","TypeError","DEFAULT_MIN_MERGE","DEFAULT_MIN_GALLOPING","DEFAULT_TMP_STORAGE_LENGTH","POWERS_OF_TEN","log10","x","alphabeticalCompare","a","b","al","bl","t","aStr","String","bStr","minRunLength","n","r","makeAscendingRun","array","lo","hi","compare","runHi","reverseRun","binaryInsertionSort","start","pivot","left","right","mid","gallopLeft","value","length","hint","lastOffset","maxOffset","offset","tmp","m","gallopRight","TimSort","minGallop","tmpStorageLength","stackLength","runStart","runLength","stackSize","Array","prototype","pushRun","mergeRuns","mergeAt","forceMergeRuns","i","start1","length1","start2","length2","k","mergeLow","mergeHigh","cursor1","cursor2","dest","count1","count2","exit","Error","customCursor","customDest","isArray","remaining","ts","minRun","force"],"mappings":"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","sourcesContent":["/****\n * The MIT License\n *\n * Copyright (c) 2015 Marco Ziccardi\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n ****/\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define('timsort', ['exports'], factory);\n  } else if (typeof exports !== 'undefined') {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.timsort = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  exports.__esModule = true;\n  exports.sort = sort;\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n\n  var DEFAULT_MIN_MERGE = 32;\n\n  var DEFAULT_MIN_GALLOPING = 7;\n\n  var DEFAULT_TMP_STORAGE_LENGTH = 256;\n\n  var POWERS_OF_TEN = [1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9];\n\n  function log10(x) {\n    if (x < 1e5) {\n      if (x < 1e2) {\n        return x < 1e1 ? 0 : 1;\n      }\n\n      if (x < 1e4) {\n        return x < 1e3 ? 2 : 3;\n      }\n\n      return 4;\n    }\n\n    if (x < 1e7) {\n      return x < 1e6 ? 5 : 6;\n    }\n\n    if (x < 1e9) {\n      return x < 1e8 ? 7 : 8;\n    }\n\n    return 9;\n  }\n\n  function alphabeticalCompare(a, b) {\n    if (a === b) {\n      return 0;\n    }\n\n    if (~ ~a === a && ~ ~b === b) {\n      if (a === 0 || b === 0) {\n        return a < b ? -1 : 1;\n      }\n\n      if (a < 0 || b < 0) {\n        if (b >= 0) {\n          return -1;\n        }\n\n        if (a >= 0) {\n          return 1;\n        }\n\n        a = -a;\n        b = -b;\n      }\n\n      var al = log10(a);\n      var bl = log10(b);\n\n      var t = 0;\n\n      if (al < bl) {\n        a *= POWERS_OF_TEN[bl - al - 1];\n        b /= 10;\n        t = -1;\n      } else if (al > bl) {\n        b *= POWERS_OF_TEN[al - bl - 1];\n        a /= 10;\n        t = 1;\n      }\n\n      if (a === b) {\n        return t;\n      }\n\n      return a < b ? -1 : 1;\n    }\n\n    var aStr = String(a);\n    var bStr = String(b);\n\n    if (aStr === bStr) {\n      return 0;\n    }\n\n    return aStr < bStr ? -1 : 1;\n  }\n\n  function minRunLength(n) {\n    var r = 0;\n\n    while (n >= DEFAULT_MIN_MERGE) {\n      r |= n & 1;\n      n >>= 1;\n    }\n\n    return n + r;\n  }\n\n  function makeAscendingRun(array, lo, hi, compare) {\n    var runHi = lo + 1;\n\n    if (runHi === hi) {\n      return 1;\n    }\n\n    if (compare(array[runHi++], array[lo]) < 0) {\n      while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\n        runHi++;\n      }\n\n      reverseRun(array, lo, runHi);\n    } else {\n      while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\n        runHi++;\n      }\n    }\n\n    return runHi - lo;\n  }\n\n  function reverseRun(array, lo, hi) {\n    hi--;\n\n    while (lo < hi) {\n      var t = array[lo];\n      array[lo++] = array[hi];\n      array[hi--] = t;\n    }\n  }\n\n  function binaryInsertionSort(array, lo, hi, start, compare) {\n    if (start === lo) {\n      start++;\n    }\n\n    for (; start < hi; start++) {\n      var pivot = array[start];\n\n      var left = lo;\n      var right = start;\n\n      while (left < right) {\n        var mid = left + right >>> 1;\n\n        if (compare(pivot, array[mid]) < 0) {\n          right = mid;\n        } else {\n          left = mid + 1;\n        }\n      }\n\n      var n = start - left;\n\n      switch (n) {\n        case 3:\n          array[left + 3] = array[left + 2];\n\n        case 2:\n          array[left + 2] = array[left + 1];\n\n        case 1:\n          array[left + 1] = array[left];\n          break;\n        default:\n          while (n > 0) {\n            array[left + n] = array[left + n - 1];\n            n--;\n          }\n      }\n\n      array[left] = pivot;\n    }\n  }\n\n  function gallopLeft(value, array, start, length, hint, compare) {\n    var lastOffset = 0;\n    var maxOffset = 0;\n    var offset = 1;\n\n    if (compare(value, array[start + hint]) > 0) {\n      maxOffset = length - hint;\n\n      while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      lastOffset += hint;\n      offset += hint;\n    } else {\n      maxOffset = hint + 1;\n      while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      var tmp = lastOffset;\n      lastOffset = hint - offset;\n      offset = hint - tmp;\n    }\n\n    lastOffset++;\n    while (lastOffset < offset) {\n      var m = lastOffset + (offset - lastOffset >>> 1);\n\n      if (compare(value, array[start + m]) > 0) {\n        lastOffset = m + 1;\n      } else {\n        offset = m;\n      }\n    }\n    return offset;\n  }\n\n  function gallopRight(value, array, start, length, hint, compare) {\n    var lastOffset = 0;\n    var maxOffset = 0;\n    var offset = 1;\n\n    if (compare(value, array[start + hint]) < 0) {\n      maxOffset = hint + 1;\n\n      while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      var tmp = lastOffset;\n      lastOffset = hint - offset;\n      offset = hint - tmp;\n    } else {\n      maxOffset = length - hint;\n\n      while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      lastOffset += hint;\n      offset += hint;\n    }\n\n    lastOffset++;\n\n    while (lastOffset < offset) {\n      var m = lastOffset + (offset - lastOffset >>> 1);\n\n      if (compare(value, array[start + m]) < 0) {\n        offset = m;\n      } else {\n        lastOffset = m + 1;\n      }\n    }\n\n    return offset;\n  }\n\n  var TimSort = (function () {\n    function TimSort(array, compare) {\n      _classCallCheck(this, TimSort);\n\n      this.array = null;\n      this.compare = null;\n      this.minGallop = DEFAULT_MIN_GALLOPING;\n      this.length = 0;\n      this.tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;\n      this.stackLength = 0;\n      this.runStart = null;\n      this.runLength = null;\n      this.stackSize = 0;\n\n      this.array = array;\n      this.compare = compare;\n\n      this.length = array.length;\n\n      if (this.length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {\n        this.tmpStorageLength = this.length >>> 1;\n      }\n\n      this.tmp = new Array(this.tmpStorageLength);\n\n      this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40;\n\n      this.runStart = new Array(this.stackLength);\n      this.runLength = new Array(this.stackLength);\n    }\n\n    TimSort.prototype.pushRun = function pushRun(runStart, runLength) {\n      this.runStart[this.stackSize] = runStart;\n      this.runLength[this.stackSize] = runLength;\n      this.stackSize += 1;\n    };\n\n    TimSort.prototype.mergeRuns = function mergeRuns() {\n      while (this.stackSize > 1) {\n        var n = this.stackSize - 2;\n\n        if (n >= 1 && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1] || n >= 2 && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]) {\n\n          if (this.runLength[n - 1] < this.runLength[n + 1]) {\n            n--;\n          }\n        } else if (this.runLength[n] > this.runLength[n + 1]) {\n          break;\n        }\n        this.mergeAt(n);\n      }\n    };\n\n    TimSort.prototype.forceMergeRuns = function forceMergeRuns() {\n      while (this.stackSize > 1) {\n        var n = this.stackSize - 2;\n\n        if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {\n          n--;\n        }\n\n        this.mergeAt(n);\n      }\n    };\n\n    TimSort.prototype.mergeAt = function mergeAt(i) {\n      var compare = this.compare;\n      var array = this.array;\n\n      var start1 = this.runStart[i];\n      var length1 = this.runLength[i];\n      var start2 = this.runStart[i + 1];\n      var length2 = this.runLength[i + 1];\n\n      this.runLength[i] = length1 + length2;\n\n      if (i === this.stackSize - 3) {\n        this.runStart[i + 1] = this.runStart[i + 2];\n        this.runLength[i + 1] = this.runLength[i + 2];\n      }\n\n      this.stackSize--;\n\n      var k = gallopRight(array[start2], array, start1, length1, 0, compare);\n      start1 += k;\n      length1 -= k;\n\n      if (length1 === 0) {\n        return;\n      }\n\n      length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);\n\n      if (length2 === 0) {\n        return;\n      }\n\n      if (length1 <= length2) {\n        this.mergeLow(start1, length1, start2, length2);\n      } else {\n        this.mergeHigh(start1, length1, start2, length2);\n      }\n    };\n\n    TimSort.prototype.mergeLow = function mergeLow(start1, length1, start2, length2) {\n\n      var compare = this.compare;\n      var array = this.array;\n      var tmp = this.tmp;\n      var i = 0;\n\n      for (i = 0; i < length1; i++) {\n        tmp[i] = array[start1 + i];\n      }\n\n      var cursor1 = 0;\n      var cursor2 = start2;\n      var dest = start1;\n\n      array[dest++] = array[cursor2++];\n\n      if (--length2 === 0) {\n        for (i = 0; i < length1; i++) {\n          array[dest + i] = tmp[cursor1 + i];\n        }\n        return;\n      }\n\n      if (length1 === 1) {\n        for (i = 0; i < length2; i++) {\n          array[dest + i] = array[cursor2 + i];\n        }\n        array[dest + length2] = tmp[cursor1];\n        return;\n      }\n\n      var minGallop = this.minGallop;\n\n      while (true) {\n        var count1 = 0;\n        var count2 = 0;\n        var exit = false;\n\n        do {\n          if (compare(array[cursor2], tmp[cursor1]) < 0) {\n            array[dest++] = array[cursor2++];\n            count2++;\n            count1 = 0;\n\n            if (--length2 === 0) {\n              exit = true;\n              break;\n            }\n          } else {\n            array[dest++] = tmp[cursor1++];\n            count1++;\n            count2 = 0;\n            if (--length1 === 1) {\n              exit = true;\n              break;\n            }\n          }\n        } while ((count1 | count2) < minGallop);\n\n        if (exit) {\n          break;\n        }\n\n        do {\n          count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);\n\n          if (count1 !== 0) {\n            for (i = 0; i < count1; i++) {\n              array[dest + i] = tmp[cursor1 + i];\n            }\n\n            dest += count1;\n            cursor1 += count1;\n            length1 -= count1;\n            if (length1 <= 1) {\n              exit = true;\n              break;\n            }\n          }\n\n          array[dest++] = array[cursor2++];\n\n          if (--length2 === 0) {\n            exit = true;\n            break;\n          }\n\n          count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);\n\n          if (count2 !== 0) {\n            for (i = 0; i < count2; i++) {\n              array[dest + i] = array[cursor2 + i];\n            }\n\n            dest += count2;\n            cursor2 += count2;\n            length2 -= count2;\n\n            if (length2 === 0) {\n              exit = true;\n              break;\n            }\n          }\n          array[dest++] = tmp[cursor1++];\n\n          if (--length1 === 1) {\n            exit = true;\n            break;\n          }\n\n          minGallop--;\n        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n        if (exit) {\n          break;\n        }\n\n        if (minGallop < 0) {\n          minGallop = 0;\n        }\n\n        minGallop += 2;\n      }\n\n      this.minGallop = minGallop;\n\n      if (minGallop < 1) {\n        this.minGallop = 1;\n      }\n\n      if (length1 === 1) {\n        for (i = 0; i < length2; i++) {\n          array[dest + i] = array[cursor2 + i];\n        }\n        array[dest + length2] = tmp[cursor1];\n      } else if (length1 === 0) {\n        throw new Error('mergeLow preconditions were not respected');\n      } else {\n        for (i = 0; i < length1; i++) {\n          array[dest + i] = tmp[cursor1 + i];\n        }\n      }\n    };\n\n    TimSort.prototype.mergeHigh = function mergeHigh(start1, length1, start2, length2) {\n      var compare = this.compare;\n      var array = this.array;\n      var tmp = this.tmp;\n      var i = 0;\n\n      for (i = 0; i < length2; i++) {\n        tmp[i] = array[start2 + i];\n      }\n\n      var cursor1 = start1 + length1 - 1;\n      var cursor2 = length2 - 1;\n      var dest = start2 + length2 - 1;\n      var customCursor = 0;\n      var customDest = 0;\n\n      array[dest--] = array[cursor1--];\n\n      if (--length1 === 0) {\n        customCursor = dest - (length2 - 1);\n\n        for (i = 0; i < length2; i++) {\n          array[customCursor + i] = tmp[i];\n        }\n\n        return;\n      }\n\n      if (length2 === 1) {\n        dest -= length1;\n        cursor1 -= length1;\n        customDest = dest + 1;\n        customCursor = cursor1 + 1;\n\n        for (i = length1 - 1; i >= 0; i--) {\n          array[customDest + i] = array[customCursor + i];\n        }\n\n        array[dest] = tmp[cursor2];\n        return;\n      }\n\n      var minGallop = this.minGallop;\n\n      while (true) {\n        var count1 = 0;\n        var count2 = 0;\n        var exit = false;\n\n        do {\n          if (compare(tmp[cursor2], array[cursor1]) < 0) {\n            array[dest--] = array[cursor1--];\n            count1++;\n            count2 = 0;\n            if (--length1 === 0) {\n              exit = true;\n              break;\n            }\n          } else {\n            array[dest--] = tmp[cursor2--];\n            count2++;\n            count1 = 0;\n            if (--length2 === 1) {\n              exit = true;\n              break;\n            }\n          }\n        } while ((count1 | count2) < minGallop);\n\n        if (exit) {\n          break;\n        }\n\n        do {\n          count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);\n\n          if (count1 !== 0) {\n            dest -= count1;\n            cursor1 -= count1;\n            length1 -= count1;\n            customDest = dest + 1;\n            customCursor = cursor1 + 1;\n\n            for (i = count1 - 1; i >= 0; i--) {\n              array[customDest + i] = array[customCursor + i];\n            }\n\n            if (length1 === 0) {\n              exit = true;\n              break;\n            }\n          }\n\n          array[dest--] = tmp[cursor2--];\n\n          if (--length2 === 1) {\n            exit = true;\n            break;\n          }\n\n          count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);\n\n          if (count2 !== 0) {\n            dest -= count2;\n            cursor2 -= count2;\n            length2 -= count2;\n            customDest = dest + 1;\n            customCursor = cursor2 + 1;\n\n            for (i = 0; i < count2; i++) {\n              array[customDest + i] = tmp[customCursor + i];\n            }\n\n            if (length2 <= 1) {\n              exit = true;\n              break;\n            }\n          }\n\n          array[dest--] = array[cursor1--];\n\n          if (--length1 === 0) {\n            exit = true;\n            break;\n          }\n\n          minGallop--;\n        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n        if (exit) {\n          break;\n        }\n\n        if (minGallop < 0) {\n          minGallop = 0;\n        }\n\n        minGallop += 2;\n      }\n\n      this.minGallop = minGallop;\n\n      if (minGallop < 1) {\n        this.minGallop = 1;\n      }\n\n      if (length2 === 1) {\n        dest -= length1;\n        cursor1 -= length1;\n        customDest = dest + 1;\n        customCursor = cursor1 + 1;\n\n        for (i = length1 - 1; i >= 0; i--) {\n          array[customDest + i] = array[customCursor + i];\n        }\n\n        array[dest] = tmp[cursor2];\n      } else if (length2 === 0) {\n        throw new Error('mergeHigh preconditions were not respected');\n      } else {\n        customCursor = dest - (length2 - 1);\n        for (i = 0; i < length2; i++) {\n          array[customCursor + i] = tmp[i];\n        }\n      }\n    };\n\n    return TimSort;\n  })();\n\n  function sort(array, compare, lo, hi) {\n    if (!Array.isArray(array)) {\n      throw new TypeError('Can only sort arrays');\n    }\n\n    if (!compare) {\n      compare = alphabeticalCompare;\n    } else if (typeof compare !== 'function') {\n      hi = lo;\n      lo = compare;\n      compare = alphabeticalCompare;\n    }\n\n    if (!lo) {\n      lo = 0;\n    }\n    if (!hi) {\n      hi = array.length;\n    }\n\n    var remaining = hi - lo;\n\n    if (remaining < 2) {\n      return;\n    }\n\n    var runLength = 0;\n\n    if (remaining < DEFAULT_MIN_MERGE) {\n      runLength = makeAscendingRun(array, lo, hi, compare);\n      binaryInsertionSort(array, lo, hi, lo + runLength, compare);\n      return;\n    }\n\n    var ts = new TimSort(array, compare);\n\n    var minRun = minRunLength(remaining);\n\n    do {\n      runLength = makeAscendingRun(array, lo, hi, compare);\n      if (runLength < minRun) {\n        var force = remaining;\n        if (force > minRun) {\n          force = minRun;\n        }\n\n        binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);\n        runLength = force;\n      }\n\n      ts.pushRun(lo, runLength);\n      ts.mergeRuns();\n\n      remaining -= runLength;\n      lo += runLength;\n    } while (remaining !== 0);\n\n    ts.forceMergeRuns();\n  }\n});\n"]},"metadata":{},"sourceType":"script"}