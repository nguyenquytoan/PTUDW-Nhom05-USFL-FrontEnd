{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _importsToResolve = _interopRequireDefault(require(\"./importsToResolve\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @name PromisedResolve\n * @type {Function}\n * @param {string} dir\n * @param {string} request\n * @returns Promise\n */\n\n/**\n * @name Importer\n * @type {Function}\n * @param {string} url\n * @param {string} prev\n * @param {Function<Error, string>} done\n */\n\n\nconst matchCss = /\\.css$/i;\n/**\n * Returns an importer that uses webpack's resolving algorithm.\n *\n * It's important that the returned function has the correct number of arguments\n * (based on whether the call is sync or async) because otherwise node-sass doesn't exit.\n *\n * @param {string} resourcePath\n * @param {PromisedResolve} resolve\n * @param {Function<string>} addNormalizedDependency\n * @returns {Importer}\n */\n\nfunction webpackImporter(resourcePath, resolve, addNormalizedDependency) {\n  function dirContextFrom(fileContext) {\n    return _path.default.dirname( // The first file is 'stdin' when we're using the data option\n    fileContext === 'stdin' ? resourcePath : fileContext);\n  } // eslint-disable-next-line no-shadow\n\n\n  function startResolving(dir, importsToResolve) {\n    return importsToResolve.length === 0 ? Promise.reject() : resolve(dir, importsToResolve[0]).then(resolvedFile => {\n      // Add the resolvedFilename as dependency. Although we're also using stats.includedFiles, this might come\n      // in handy when an error occurs. In this case, we don't get stats.includedFiles from node-sass.\n      addNormalizedDependency(resolvedFile);\n      return {\n        // By removing the CSS file extension, we trigger node-sass to include the CSS file instead of just linking it.\n        file: resolvedFile.replace(matchCss, '')\n      };\n    }, () => {\n      const [, ...tailResult] = importsToResolve;\n      return startResolving(dir, tailResult);\n    });\n  }\n\n  return (url, prev, done) => {\n    startResolving(dirContextFrom(prev), (0, _importsToResolve.default)(url)) // Catch all resolving errors, return the original file and pass responsibility back to other custom importers\n    .catch(() => {\n      return {\n        file: url\n      };\n    }).then(done);\n  };\n}\n\nvar _default = webpackImporter;\nexports.default = _default;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/sass-loader/dist/webpackImporter.js"],"names":["Object","defineProperty","exports","value","default","_path","_interopRequireDefault","require","_importsToResolve","obj","__esModule","matchCss","webpackImporter","resourcePath","resolve","addNormalizedDependency","dirContextFrom","fileContext","dirname","startResolving","dir","importsToResolve","length","Promise","reject","then","resolvedFile","file","replace","tailResult","url","prev","done","catch","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGC,sBAAsB,CAACC,OAAO,CAAC,MAAD,CAAR,CAAlC;;AAEA,IAAIC,iBAAiB,GAAGF,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAA9C;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEL,IAAAA,OAAO,EAAEK;AAAX,GAArC;AAAwD;AAE/F;;;;;;;;AAQA;;;;;;;;;AAOA,MAAME,QAAQ,GAAG,SAAjB;AACA;;;;;;;;;;;;AAYA,SAASC,eAAT,CAAyBC,YAAzB,EAAuCC,OAAvC,EAAgDC,uBAAhD,EAAyE;AACvE,WAASC,cAAT,CAAwBC,WAAxB,EAAqC;AACnC,WAAOZ,KAAK,CAACD,OAAN,CAAcc,OAAd,EAAuB;AAC9BD,IAAAA,WAAW,KAAK,OAAhB,GAA0BJ,YAA1B,GAAyCI,WADlC,CAAP;AAED,GAJsE,CAIrE;;;AAGF,WAASE,cAAT,CAAwBC,GAAxB,EAA6BC,gBAA7B,EAA+C;AAC7C,WAAOA,gBAAgB,CAACC,MAAjB,KAA4B,CAA5B,GAAgCC,OAAO,CAACC,MAAR,EAAhC,GAAmDV,OAAO,CAACM,GAAD,EAAMC,gBAAgB,CAAC,CAAD,CAAtB,CAAP,CAAkCI,IAAlC,CAAuCC,YAAY,IAAI;AAC/G;AACA;AACAX,MAAAA,uBAAuB,CAACW,YAAD,CAAvB;AACA,aAAO;AACL;AACAC,QAAAA,IAAI,EAAED,YAAY,CAACE,OAAb,CAAqBjB,QAArB,EAA+B,EAA/B;AAFD,OAAP;AAID,KARyD,EAQvD,MAAM;AACP,YAAM,GAAG,GAAGkB,UAAN,IAAoBR,gBAA1B;AACA,aAAOF,cAAc,CAACC,GAAD,EAAMS,UAAN,CAArB;AACD,KAXyD,CAA1D;AAYD;;AAED,SAAO,CAACC,GAAD,EAAMC,IAAN,EAAYC,IAAZ,KAAqB;AAC1Bb,IAAAA,cAAc,CAACH,cAAc,CAACe,IAAD,CAAf,EAAuB,CAAC,GAAGvB,iBAAiB,CAACJ,OAAtB,EAA+B0B,GAA/B,CAAvB,CAAd,CAA0E;AAA1E,KACCG,KADD,CACO,MAAM;AACX,aAAO;AACLN,QAAAA,IAAI,EAAEG;AADD,OAAP;AAGD,KALD,EAKGL,IALH,CAKQO,IALR;AAMD,GAPD;AAQD;;AAED,IAAIE,QAAQ,GAAGtB,eAAf;AACAV,OAAO,CAACE,OAAR,GAAkB8B,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _importsToResolve = _interopRequireDefault(require(\"./importsToResolve\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name PromisedResolve\n * @type {Function}\n * @param {string} dir\n * @param {string} request\n * @returns Promise\n */\n\n/**\n * @name Importer\n * @type {Function}\n * @param {string} url\n * @param {string} prev\n * @param {Function<Error, string>} done\n */\nconst matchCss = /\\.css$/i;\n/**\n * Returns an importer that uses webpack's resolving algorithm.\n *\n * It's important that the returned function has the correct number of arguments\n * (based on whether the call is sync or async) because otherwise node-sass doesn't exit.\n *\n * @param {string} resourcePath\n * @param {PromisedResolve} resolve\n * @param {Function<string>} addNormalizedDependency\n * @returns {Importer}\n */\n\nfunction webpackImporter(resourcePath, resolve, addNormalizedDependency) {\n  function dirContextFrom(fileContext) {\n    return _path.default.dirname( // The first file is 'stdin' when we're using the data option\n    fileContext === 'stdin' ? resourcePath : fileContext);\n  } // eslint-disable-next-line no-shadow\n\n\n  function startResolving(dir, importsToResolve) {\n    return importsToResolve.length === 0 ? Promise.reject() : resolve(dir, importsToResolve[0]).then(resolvedFile => {\n      // Add the resolvedFilename as dependency. Although we're also using stats.includedFiles, this might come\n      // in handy when an error occurs. In this case, we don't get stats.includedFiles from node-sass.\n      addNormalizedDependency(resolvedFile);\n      return {\n        // By removing the CSS file extension, we trigger node-sass to include the CSS file instead of just linking it.\n        file: resolvedFile.replace(matchCss, '')\n      };\n    }, () => {\n      const [, ...tailResult] = importsToResolve;\n      return startResolving(dir, tailResult);\n    });\n  }\n\n  return (url, prev, done) => {\n    startResolving(dirContextFrom(prev), (0, _importsToResolve.default)(url)) // Catch all resolving errors, return the original file and pass responsibility back to other custom importers\n    .catch(() => {\n      return {\n        file: url\n      };\n    }).then(done);\n  };\n}\n\nvar _default = webpackImporter;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}