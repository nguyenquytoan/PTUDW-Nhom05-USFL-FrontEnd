{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _realpathNative() {\n  const data = require('realpath-native');\n\n  _realpathNative = function _realpathNative() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _console() {\n  const data = require('@jest/console');\n\n  _console = function _console() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _exit() {\n  const data = _interopRequireDefault(require('exit'));\n\n  _exit = function _exit() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _gracefulFs() {\n  const data = _interopRequireDefault(require('graceful-fs'));\n\n  _gracefulFs = function _gracefulFs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWatcher() {\n  const data = require('jest-watcher');\n\n  _jestWatcher = function _jestWatcher() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _testResult() {\n  const data = require('@jest/test-result');\n\n  _testResult = function _testResult() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _getNoTestsFoundMessage = _interopRequireDefault(require('./getNoTestsFoundMessage'));\n\nvar _runGlobalHook = _interopRequireDefault(require('./runGlobalHook'));\n\nvar _SearchSource = _interopRequireDefault(require('./SearchSource'));\n\nvar _TestScheduler = _interopRequireDefault(require('./TestScheduler'));\n\nvar _collectHandles = _interopRequireDefault(require('./collectHandles'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nconst getTestPaths = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (globalConfig, context, outputStream, changedFiles, jestHooks, filter) {\n    const source = new _SearchSource.default(context);\n    const data = yield source.getTestPaths(globalConfig, changedFiles, filter);\n\n    if (!data.tests.length && globalConfig.onlyChanged && data.noSCM) {\n      new (_console().CustomConsole)(outputStream, outputStream).log('Jest can only find uncommitted changed files in a git or hg ' + 'repository. If you make your project a git or hg ' + 'repository (`git init` or `hg init`), Jest will be able ' + 'to only run tests related to files changed since the last ' + 'commit.');\n    }\n\n    const shouldTestArray = yield Promise.all(data.tests.map(test => jestHooks.shouldRunTestSuite({\n      config: test.context.config,\n      duration: test.duration,\n      testPath: test.path\n    })));\n    const filteredTests = data.tests.filter((_test, i) => shouldTestArray[i]);\n    return _objectSpread({}, data, {\n      allTests: filteredTests.length,\n      tests: filteredTests\n    });\n  });\n\n  return function getTestPaths(_x, _x2, _x3, _x4, _x5, _x6) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst processResults = (runResults, options) => {\n  const outputFile = options.outputFile,\n        isJSON = options.json,\n        onComplete = options.onComplete,\n        outputStream = options.outputStream,\n        testResultsProcessor = options.testResultsProcessor,\n        collectHandles = options.collectHandles;\n\n  if (collectHandles) {\n    runResults.openHandles = collectHandles();\n  } else {\n    runResults.openHandles = [];\n  }\n\n  if (testResultsProcessor) {\n    runResults = require(testResultsProcessor)(runResults);\n  }\n\n  if (isJSON) {\n    if (outputFile) {\n      const cwd = (0, _realpathNative().sync)(process.cwd());\n\n      const filePath = _path().default.resolve(cwd, outputFile);\n\n      _gracefulFs().default.writeFileSync(filePath, JSON.stringify((0, _jestUtil().formatTestResults)(runResults)));\n\n      outputStream.write(`Test results written to: ${_path().default.relative(cwd, filePath)}\\n`);\n    } else {\n      process.stdout.write(JSON.stringify((0, _jestUtil().formatTestResults)(runResults)));\n    }\n  }\n\n  return onComplete && onComplete(runResults);\n};\n\nconst testSchedulerContext = {\n  firstRun: true,\n  previousSuccess: true\n};\n\nvar _default = /*#__PURE__*/function () {\n  var _runJest = _asyncToGenerator(function* ({\n    contexts,\n    globalConfig,\n    outputStream,\n    testWatcher,\n    jestHooks = new (_jestWatcher().JestHook)().getEmitter(),\n    startRun,\n    changedFilesPromise,\n    onComplete,\n    failedTestsCache,\n    filter\n  }) {\n    const Sequencer = (0, _jestUtil().interopRequireDefault)(require(globalConfig.testSequencer)).default;\n    const sequencer = new Sequencer();\n    let allTests = [];\n\n    if (changedFilesPromise && globalConfig.watch) {\n      const _ref2 = yield changedFilesPromise,\n            repos = _ref2.repos;\n\n      const noSCM = Object.keys(repos).every(scm => repos[scm].size === 0);\n\n      if (noSCM) {\n        process.stderr.write('\\n' + _chalk().default.bold('--watch') + ' is not supported without git/hg, please use --watchAll ' + '\\n');\n        (0, _exit().default)(1);\n      }\n    }\n\n    const testRunData = yield Promise.all(contexts.map( /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (context) {\n        const matches = yield getTestPaths(globalConfig, context, outputStream, changedFilesPromise && (yield changedFilesPromise), jestHooks, filter);\n        allTests = allTests.concat(matches.tests);\n        return {\n          context,\n          matches\n        };\n      });\n\n      return function (_x8) {\n        return _ref3.apply(this, arguments);\n      };\n    }()));\n    allTests = yield sequencer.sort(allTests);\n\n    if (globalConfig.listTests) {\n      const testsPaths = Array.from(new Set(allTests.map(test => test.path)));\n\n      if (globalConfig.json) {\n        console.log(JSON.stringify(testsPaths));\n      } else {\n        console.log(testsPaths.join('\\n'));\n      }\n\n      onComplete && onComplete((0, _testResult().makeEmptyAggregatedTestResult)());\n      return null;\n    }\n\n    if (globalConfig.onlyFailures && failedTestsCache) {\n      allTests = failedTestsCache.filterTests(allTests);\n      globalConfig = failedTestsCache.updateConfig(globalConfig);\n    }\n\n    const hasTests = allTests.length > 0;\n\n    if (!hasTests) {\n      const noTestsFoundMessage = (0, _getNoTestsFoundMessage.default)(testRunData, globalConfig);\n\n      if (globalConfig.passWithNoTests || globalConfig.findRelatedTests || globalConfig.lastCommit || globalConfig.onlyChanged) {\n        new (_console().CustomConsole)(outputStream, outputStream).log(noTestsFoundMessage);\n      } else {\n        new (_console().CustomConsole)(outputStream, outputStream).error(noTestsFoundMessage);\n        (0, _exit().default)(1);\n      }\n    } else if (allTests.length === 1 && globalConfig.silent !== true && globalConfig.verbose !== false) {\n      const newConfig = _objectSpread({}, globalConfig, {\n        verbose: true\n      });\n\n      globalConfig = Object.freeze(newConfig);\n    }\n\n    let collectHandles;\n\n    if (globalConfig.detectOpenHandles) {\n      collectHandles = (0, _collectHandles.default)();\n    }\n\n    if (hasTests) {\n      yield (0, _runGlobalHook.default)({\n        allTests,\n        globalConfig,\n        moduleName: 'globalSetup'\n      });\n    }\n\n    if (changedFilesPromise) {\n      testSchedulerContext.changedFiles = (yield changedFilesPromise).changedFiles;\n    }\n\n    const results = yield new _TestScheduler.default(globalConfig, {\n      startRun\n    }, testSchedulerContext).scheduleTests(allTests, testWatcher);\n    sequencer.cacheResults(allTests, results);\n\n    if (hasTests) {\n      yield (0, _runGlobalHook.default)({\n        allTests,\n        globalConfig,\n        moduleName: 'globalTeardown'\n      });\n    }\n\n    return processResults(results, {\n      collectHandles,\n      json: globalConfig.json,\n      onComplete,\n      outputFile: globalConfig.outputFile,\n      outputStream,\n      testResultsProcessor: globalConfig.testResultsProcessor\n    });\n  });\n\n  function runJest(_x7) {\n    return _runJest.apply(this, arguments);\n  }\n\n  return runJest;\n}();\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/@jest/core/build/runJest.js"],"names":["Object","defineProperty","exports","value","default","_path","data","_interopRequireDefault","require","_chalk","_realpathNative","_console","_jestUtil","_exit","_gracefulFs","_jestWatcher","_testResult","_getNoTestsFoundMessage","_runGlobalHook","_SearchSource","_TestScheduler","_collectHandles","obj","__esModule","_objectSpread","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","configurable","writable","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","args","apply","err","undefined","getTestPaths","_ref","globalConfig","context","outputStream","changedFiles","jestHooks","tests","onlyChanged","noSCM","CustomConsole","log","shouldTestArray","all","map","test","shouldRunTestSuite","config","duration","testPath","path","filteredTests","_test","allTests","_x","_x2","_x3","_x4","_x5","_x6","processResults","runResults","options","outputFile","isJSON","json","onComplete","testResultsProcessor","collectHandles","openHandles","cwd","sync","process","filePath","writeFileSync","JSON","stringify","formatTestResults","write","relative","stdout","testSchedulerContext","firstRun","previousSuccess","_default","_runJest","contexts","testWatcher","JestHook","getEmitter","startRun","changedFilesPromise","failedTestsCache","Sequencer","interopRequireDefault","testSequencer","sequencer","watch","_ref2","repos","every","scm","size","stderr","bold","testRunData","_ref3","matches","_x8","sort","listTests","testsPaths","Array","from","Set","console","join","makeEmptyAggregatedTestResult","onlyFailures","filterTests","updateConfig","hasTests","noTestsFoundMessage","passWithNoTests","findRelatedTests","lastCommit","silent","verbose","newConfig","freeze","detectOpenHandles","moduleName","results","scheduleTests","cacheResults","runJest","_x7"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _realpathNative() {\n  const data = require('realpath-native');\n\n  _realpathNative = function _realpathNative() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _console() {\n  const data = require('@jest/console');\n\n  _console = function _console() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _exit() {\n  const data = _interopRequireDefault(require('exit'));\n\n  _exit = function _exit() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _gracefulFs() {\n  const data = _interopRequireDefault(require('graceful-fs'));\n\n  _gracefulFs = function _gracefulFs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWatcher() {\n  const data = require('jest-watcher');\n\n  _jestWatcher = function _jestWatcher() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _testResult() {\n  const data = require('@jest/test-result');\n\n  _testResult = function _testResult() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _getNoTestsFoundMessage = _interopRequireDefault(\n  require('./getNoTestsFoundMessage')\n);\n\nvar _runGlobalHook = _interopRequireDefault(require('./runGlobalHook'));\n\nvar _SearchSource = _interopRequireDefault(require('./SearchSource'));\n\nvar _TestScheduler = _interopRequireDefault(require('./TestScheduler'));\n\nvar _collectHandles = _interopRequireDefault(require('./collectHandles'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(\n        Object.getOwnPropertySymbols(source).filter(function(sym) {\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        })\n      );\n    }\n    ownKeys.forEach(function(key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function() {\n    var self = this,\n      args = arguments;\n    return new Promise(function(resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);\n      }\n      _next(undefined);\n    });\n  };\n}\n\nconst getTestPaths =\n  /*#__PURE__*/\n  (function() {\n    var _ref = _asyncToGenerator(function*(\n      globalConfig,\n      context,\n      outputStream,\n      changedFiles,\n      jestHooks,\n      filter\n    ) {\n      const source = new _SearchSource.default(context);\n      const data = yield source.getTestPaths(\n        globalConfig,\n        changedFiles,\n        filter\n      );\n\n      if (!data.tests.length && globalConfig.onlyChanged && data.noSCM) {\n        new (_console()).CustomConsole(outputStream, outputStream).log(\n          'Jest can only find uncommitted changed files in a git or hg ' +\n            'repository. If you make your project a git or hg ' +\n            'repository (`git init` or `hg init`), Jest will be able ' +\n            'to only run tests related to files changed since the last ' +\n            'commit.'\n        );\n      }\n\n      const shouldTestArray = yield Promise.all(\n        data.tests.map(test =>\n          jestHooks.shouldRunTestSuite({\n            config: test.context.config,\n            duration: test.duration,\n            testPath: test.path\n          })\n        )\n      );\n      const filteredTests = data.tests.filter((_test, i) => shouldTestArray[i]);\n      return _objectSpread({}, data, {\n        allTests: filteredTests.length,\n        tests: filteredTests\n      });\n    });\n\n    return function getTestPaths(_x, _x2, _x3, _x4, _x5, _x6) {\n      return _ref.apply(this, arguments);\n    };\n  })();\n\nconst processResults = (runResults, options) => {\n  const outputFile = options.outputFile,\n    isJSON = options.json,\n    onComplete = options.onComplete,\n    outputStream = options.outputStream,\n    testResultsProcessor = options.testResultsProcessor,\n    collectHandles = options.collectHandles;\n\n  if (collectHandles) {\n    runResults.openHandles = collectHandles();\n  } else {\n    runResults.openHandles = [];\n  }\n\n  if (testResultsProcessor) {\n    runResults = require(testResultsProcessor)(runResults);\n  }\n\n  if (isJSON) {\n    if (outputFile) {\n      const cwd = (0, _realpathNative().sync)(process.cwd());\n\n      const filePath = _path().default.resolve(cwd, outputFile);\n\n      _gracefulFs().default.writeFileSync(\n        filePath,\n        JSON.stringify((0, _jestUtil().formatTestResults)(runResults))\n      );\n\n      outputStream.write(\n        `Test results written to: ${_path().default.relative(cwd, filePath)}\\n`\n      );\n    } else {\n      process.stdout.write(\n        JSON.stringify((0, _jestUtil().formatTestResults)(runResults))\n      );\n    }\n  }\n\n  return onComplete && onComplete(runResults);\n};\n\nconst testSchedulerContext = {\n  firstRun: true,\n  previousSuccess: true\n};\n\nvar _default =\n  /*#__PURE__*/\n  (function() {\n    var _runJest = _asyncToGenerator(function*({\n      contexts,\n      globalConfig,\n      outputStream,\n      testWatcher,\n      jestHooks = new (_jestWatcher()).JestHook().getEmitter(),\n      startRun,\n      changedFilesPromise,\n      onComplete,\n      failedTestsCache,\n      filter\n    }) {\n      const Sequencer = (0, _jestUtil().interopRequireDefault)(\n        require(globalConfig.testSequencer)\n      ).default;\n      const sequencer = new Sequencer();\n      let allTests = [];\n\n      if (changedFilesPromise && globalConfig.watch) {\n        const _ref2 = yield changedFilesPromise,\n          repos = _ref2.repos;\n\n        const noSCM = Object.keys(repos).every(scm => repos[scm].size === 0);\n\n        if (noSCM) {\n          process.stderr.write(\n            '\\n' +\n              _chalk().default.bold('--watch') +\n              ' is not supported without git/hg, please use --watchAll ' +\n              '\\n'\n          );\n          (0, _exit().default)(1);\n        }\n      }\n\n      const testRunData = yield Promise.all(\n        contexts.map(\n          /*#__PURE__*/\n          (function() {\n            var _ref3 = _asyncToGenerator(function*(context) {\n              const matches = yield getTestPaths(\n                globalConfig,\n                context,\n                outputStream,\n                changedFilesPromise && (yield changedFilesPromise),\n                jestHooks,\n                filter\n              );\n              allTests = allTests.concat(matches.tests);\n              return {\n                context,\n                matches\n              };\n            });\n\n            return function(_x8) {\n              return _ref3.apply(this, arguments);\n            };\n          })()\n        )\n      );\n      allTests = yield sequencer.sort(allTests);\n\n      if (globalConfig.listTests) {\n        const testsPaths = Array.from(new Set(allTests.map(test => test.path)));\n\n        if (globalConfig.json) {\n          console.log(JSON.stringify(testsPaths));\n        } else {\n          console.log(testsPaths.join('\\n'));\n        }\n\n        onComplete &&\n          onComplete((0, _testResult().makeEmptyAggregatedTestResult)());\n        return null;\n      }\n\n      if (globalConfig.onlyFailures && failedTestsCache) {\n        allTests = failedTestsCache.filterTests(allTests);\n        globalConfig = failedTestsCache.updateConfig(globalConfig);\n      }\n\n      const hasTests = allTests.length > 0;\n\n      if (!hasTests) {\n        const noTestsFoundMessage = (0, _getNoTestsFoundMessage.default)(\n          testRunData,\n          globalConfig\n        );\n\n        if (\n          globalConfig.passWithNoTests ||\n          globalConfig.findRelatedTests ||\n          globalConfig.lastCommit ||\n          globalConfig.onlyChanged\n        ) {\n          new (_console()).CustomConsole(outputStream, outputStream).log(\n            noTestsFoundMessage\n          );\n        } else {\n          new (_console()).CustomConsole(outputStream, outputStream).error(\n            noTestsFoundMessage\n          );\n          (0, _exit().default)(1);\n        }\n      } else if (\n        allTests.length === 1 &&\n        globalConfig.silent !== true &&\n        globalConfig.verbose !== false\n      ) {\n        const newConfig = _objectSpread({}, globalConfig, {\n          verbose: true\n        });\n\n        globalConfig = Object.freeze(newConfig);\n      }\n\n      let collectHandles;\n\n      if (globalConfig.detectOpenHandles) {\n        collectHandles = (0, _collectHandles.default)();\n      }\n\n      if (hasTests) {\n        yield (0, _runGlobalHook.default)({\n          allTests,\n          globalConfig,\n          moduleName: 'globalSetup'\n        });\n      }\n\n      if (changedFilesPromise) {\n        testSchedulerContext.changedFiles = (yield changedFilesPromise).changedFiles;\n      }\n\n      const results = yield new _TestScheduler.default(\n        globalConfig,\n        {\n          startRun\n        },\n        testSchedulerContext\n      ).scheduleTests(allTests, testWatcher);\n      sequencer.cacheResults(allTests, results);\n\n      if (hasTests) {\n        yield (0, _runGlobalHook.default)({\n          allTests,\n          globalConfig,\n          moduleName: 'globalTeardown'\n        });\n      }\n\n      return processResults(results, {\n        collectHandles,\n        json: globalConfig.json,\n        onComplete,\n        outputFile: globalConfig.outputFile,\n        outputStream,\n        testResultsProcessor: globalConfig.testResultsProcessor\n      });\n    });\n\n    function runJest(_x7) {\n      return _runJest.apply(this, arguments);\n    }\n\n    return runJest;\n  })();\n\nexports.default = _default;\n"]},"metadata":{},"sourceType":"script"}