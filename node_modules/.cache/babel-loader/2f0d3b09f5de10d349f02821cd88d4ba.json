{"ast":null,"code":"'use strict';\n/**\n * SVGO is a Nodejs-based tool for optimizing SVG vector graphics files.\n *\n * @see https://github.com/svg/svgo\n *\n * @author Kir Belevich <kir@soulshine.in> (https://github.com/deepsweet)\n * @copyright © 2012 Kir Belevich\n * @license MIT https://raw.githubusercontent.com/svg/svgo/master/LICENSE\n */\n\nvar CONFIG = require('./svgo/config.js'),\n    SVG2JS = require('./svgo/svg2js.js'),\n    PLUGINS = require('./svgo/plugins.js'),\n    JSAPI = require('./svgo/jsAPI.js'),\n    encodeSVGDatauri = require('./svgo/tools.js').encodeSVGDatauri,\n    JS2SVG = require('./svgo/js2svg.js');\n\nvar SVGO = function (config) {\n  this.config = CONFIG(config);\n};\n\nSVGO.prototype.optimize = function (svgstr, info) {\n  info = info || {};\n  return new Promise((resolve, reject) => {\n    if (this.config.error) {\n      reject(this.config.error);\n      return;\n    }\n\n    var config = this.config,\n        maxPassCount = config.multipass ? 10 : 1,\n        counter = 0,\n        prevResultSize = Number.POSITIVE_INFINITY,\n        optimizeOnceCallback = svgjs => {\n      if (svgjs.error) {\n        reject(svgjs.error);\n        return;\n      }\n\n      info.multipassCount = counter;\n\n      if (++counter < maxPassCount && svgjs.data.length < prevResultSize) {\n        prevResultSize = svgjs.data.length;\n\n        this._optimizeOnce(svgjs.data, info, optimizeOnceCallback);\n      } else {\n        if (config.datauri) {\n          svgjs.data = encodeSVGDatauri(svgjs.data, config.datauri);\n        }\n\n        if (info && info.path) {\n          svgjs.path = info.path;\n        }\n\n        resolve(svgjs);\n      }\n    };\n\n    this._optimizeOnce(svgstr, info, optimizeOnceCallback);\n  });\n};\n\nSVGO.prototype._optimizeOnce = function (svgstr, info, callback) {\n  var config = this.config;\n  SVG2JS(svgstr, function (svgjs) {\n    if (svgjs.error) {\n      callback(svgjs);\n      return;\n    }\n\n    svgjs = PLUGINS(svgjs, info, config.plugins);\n    callback(JS2SVG(svgjs, config.js2svg));\n  });\n};\n/**\n * The factory that creates a content item with the helper methods.\n *\n * @param {Object} data which passed to jsAPI constructor\n * @returns {JSAPI} content item\n */\n\n\nSVGO.prototype.createContentItem = function (data) {\n  return new JSAPI(data);\n};\n\nSVGO.Config = CONFIG;\nmodule.exports = SVGO; // Offer ES module interop compatibility.\n\nmodule.exports.default = SVGO;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/svgo/lib/svgo.js"],"names":["CONFIG","require","SVG2JS","PLUGINS","JSAPI","encodeSVGDatauri","JS2SVG","SVGO","config","prototype","optimize","svgstr","info","Promise","resolve","reject","error","maxPassCount","multipass","counter","prevResultSize","Number","POSITIVE_INFINITY","optimizeOnceCallback","svgjs","multipassCount","data","length","_optimizeOnce","datauri","path","callback","plugins","js2svg","createContentItem","Config","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * SVGO is a Nodejs-based tool for optimizing SVG vector graphics files.\n *\n * @see https://github.com/svg/svgo\n *\n * @author Kir Belevich <kir@soulshine.in> (https://github.com/deepsweet)\n * @copyright © 2012 Kir Belevich\n * @license MIT https://raw.githubusercontent.com/svg/svgo/master/LICENSE\n */\n\nvar CONFIG = require('./svgo/config.js'),\n    SVG2JS = require('./svgo/svg2js.js'),\n    PLUGINS = require('./svgo/plugins.js'),\n    JSAPI = require('./svgo/jsAPI.js'),\n    encodeSVGDatauri = require('./svgo/tools.js').encodeSVGDatauri,\n    JS2SVG = require('./svgo/js2svg.js');\n\nvar SVGO = function(config) {\n    this.config = CONFIG(config);\n};\n\nSVGO.prototype.optimize = function(svgstr, info) {\n    info = info || {};\n    return new Promise((resolve, reject) => {\n        if (this.config.error) {\n            reject(this.config.error);\n            return;\n        }\n\n        var config = this.config,\n            maxPassCount = config.multipass ? 10 : 1,\n            counter = 0,\n            prevResultSize = Number.POSITIVE_INFINITY,\n            optimizeOnceCallback = (svgjs) => {\n                if (svgjs.error) {\n                    reject(svgjs.error);\n                    return;\n                }\n\n                info.multipassCount = counter;\n                if (++counter < maxPassCount && svgjs.data.length < prevResultSize) {\n                    prevResultSize = svgjs.data.length;\n                    this._optimizeOnce(svgjs.data, info, optimizeOnceCallback);\n                } else {\n                    if (config.datauri) {\n                        svgjs.data = encodeSVGDatauri(svgjs.data, config.datauri);\n                    }\n                    if (info && info.path) {\n                        svgjs.path = info.path;\n                    }\n                    resolve(svgjs);\n                }\n            };\n\n        this._optimizeOnce(svgstr, info, optimizeOnceCallback);\n    });\n};\n\nSVGO.prototype._optimizeOnce = function(svgstr, info, callback) {\n    var config = this.config;\n\n    SVG2JS(svgstr, function(svgjs) {\n        if (svgjs.error) {\n            callback(svgjs);\n            return;\n        }\n\n        svgjs = PLUGINS(svgjs, info, config.plugins);\n\n        callback(JS2SVG(svgjs, config.js2svg));\n    });\n};\n\n/**\n * The factory that creates a content item with the helper methods.\n *\n * @param {Object} data which passed to jsAPI constructor\n * @returns {JSAPI} content item\n */\nSVGO.prototype.createContentItem = function(data) {\n    return new JSAPI(data);\n};\n\nSVGO.Config = CONFIG;\n\nmodule.exports = SVGO;\n// Offer ES module interop compatibility.\nmodule.exports.default = SVGO;\n"]},"metadata":{},"sourceType":"script"}