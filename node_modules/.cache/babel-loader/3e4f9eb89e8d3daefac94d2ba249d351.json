{"ast":null,"code":"import parser from 'postcss-selector-parser';\nimport fs from 'fs';\nimport path from 'path';\nimport postcss from 'postcss';\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n/* Return a Selectors AST from a Selectors String\n/* ========================================================================== */\n\n\nvar getSelectorsAstFromSelectorsString = selectorString => {\n  let selectorAST;\n  parser(selectors => {\n    selectorAST = selectors;\n  }).processSync(selectorString);\n  return selectorAST;\n};\n\nvar getCustomSelectors = (root, opts) => {\n  // initialize custom selectors\n  const customSelectors = {}; // for each custom selector atrule that is a child of the css root\n\n  root.nodes.slice().forEach(node => {\n    if (isCustomSelector(node)) {\n      // extract the name and selectors from the params of the custom selector\n      const _node$params$match = node.params.match(customSelectorParamsRegExp),\n            _node$params$match2 = _slicedToArray(_node$params$match, 3),\n            name = _node$params$match2[1],\n            selectors = _node$params$match2[2]; // write the parsed selectors to the custom selector\n\n\n      customSelectors[name] = getSelectorsAstFromSelectorsString(selectors); // conditionally remove the custom selector atrule\n\n      if (!Object(opts).preserve) {\n        node.remove();\n      }\n    }\n  });\n  return customSelectors;\n}; // match the custom selector name\n\n\nconst customSelectorNameRegExp = /^custom-selector$/i; // match the custom selector params\n\nconst customSelectorParamsRegExp = /^(:--[A-z][\\w-]*)\\s+([\\W\\w]+)\\s*$/; // whether the atrule is a custom selector\n\nconst isCustomSelector = node => node.type === 'atrule' && customSelectorNameRegExp.test(node.name) && customSelectorParamsRegExp.test(node.params); // return transformed selectors, replacing custom pseudo selectors with custom selectors\n\n\nfunction transformSelectorList(selectorList, customSelectors) {\n  let index = selectorList.nodes.length - 1;\n\n  while (index >= 0) {\n    const transformedSelectors = transformSelector(selectorList.nodes[index], customSelectors);\n\n    if (transformedSelectors.length) {\n      selectorList.nodes.splice(index, 1, ...transformedSelectors);\n    }\n\n    --index;\n  }\n\n  return selectorList;\n} // return custom pseudo selectors replaced with custom selectors\n\n\nfunction transformSelector(selector, customSelectors) {\n  const transpiledSelectors = [];\n\n  for (const index in selector.nodes) {\n    const _selector$nodes$index = selector.nodes[index],\n          value = _selector$nodes$index.value,\n          nodes = _selector$nodes$index.nodes;\n\n    if (value in customSelectors) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = customSelectors[value].nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          const replacementSelector = _step.value;\n          const selectorClone = selector.clone();\n          selectorClone.nodes.splice(index, 1, ...replacementSelector.clone().nodes.map(node => {\n            // use spacing from the current usage\n            node.spaces = _objectSpread({}, selector.nodes[index].spaces);\n            return node;\n          }));\n          const retranspiledSelectors = transformSelector(selectorClone, customSelectors);\n          adjustNodesBySelectorEnds(selectorClone.nodes, Number(index));\n\n          if (retranspiledSelectors.length) {\n            transpiledSelectors.push(...retranspiledSelectors);\n          } else {\n            transpiledSelectors.push(selectorClone);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return transpiledSelectors;\n    } else if (nodes && nodes.length) {\n      transformSelectorList(selector.nodes[index], customSelectors);\n    }\n  }\n\n  return transpiledSelectors;\n} // match selectors by difficult-to-separate ends\n\n\nconst withoutSelectorStartMatch = /^(tag|universal)$/;\nconst withoutSelectorEndMatch = /^(class|id|pseudo|tag|universal)$/;\n\nconst isWithoutSelectorStart = node => withoutSelectorStartMatch.test(Object(node).type);\n\nconst isWithoutSelectorEnd = node => withoutSelectorEndMatch.test(Object(node).type); // adjust nodes by selector ends (so that .class:--h1 becomes h1.class rather than .classh1)\n\n\nconst adjustNodesBySelectorEnds = (nodes, index) => {\n  if (index && isWithoutSelectorStart(nodes[index]) && isWithoutSelectorEnd(nodes[index - 1])) {\n    let safeIndex = index - 1;\n\n    while (safeIndex && isWithoutSelectorEnd(nodes[safeIndex])) {\n      --safeIndex;\n    }\n\n    if (safeIndex < index) {\n      const node = nodes.splice(index, 1)[0];\n      nodes.splice(safeIndex, 0, node);\n      nodes[safeIndex].spaces.before = nodes[safeIndex + 1].spaces.before;\n      nodes[safeIndex + 1].spaces.before = '';\n\n      if (nodes[index]) {\n        nodes[index].spaces.after = nodes[safeIndex].spaces.after;\n        nodes[safeIndex].spaces.after = '';\n      }\n    }\n  }\n};\n\nvar transformRules = (root, customSelectors, opts) => {\n  root.walkRules(customPseudoRegExp, rule => {\n    const selector = parser(selectors => {\n      transformSelectorList(selectors, customSelectors, opts);\n    }).processSync(rule.selector);\n\n    if (opts.preserve) {\n      rule.cloneBefore({\n        selector\n      });\n    } else {\n      rule.selector = selector;\n    }\n  });\n};\n\nconst customPseudoRegExp = /:--[A-z][\\w-]*/;\n/* Import Custom Selectors from CSS AST\n/* ========================================================================== */\n\nfunction importCustomSelectorsFromCSSAST(root) {\n  return getCustomSelectors(root);\n}\n/* Import Custom Selectors from CSS File\n/* ========================================================================== */\n\n\nfunction importCustomSelectorsFromCSSFile(_x) {\n  return _importCustomSelectorsFromCSSFile.apply(this, arguments);\n}\n/* Import Custom Selectors from Object\n/* ========================================================================== */\n\n\nfunction _importCustomSelectorsFromCSSFile() {\n  _importCustomSelectorsFromCSSFile = _asyncToGenerator(function* (from) {\n    const css = yield readFile(path.resolve(from));\n    const root = postcss.parse(css, {\n      from: path.resolve(from)\n    });\n    return importCustomSelectorsFromCSSAST(root);\n  });\n  return _importCustomSelectorsFromCSSFile.apply(this, arguments);\n}\n\nfunction importCustomSelectorsFromObject(object) {\n  const customSelectors = Object.assign({}, Object(object).customSelectors || Object(object)['custom-selectors']);\n\n  for (const key in customSelectors) {\n    customSelectors[key] = getSelectorsAstFromSelectorsString(customSelectors[key]);\n  }\n\n  return customSelectors;\n}\n/* Import Custom Selectors from JSON file\n/* ========================================================================== */\n\n\nfunction importCustomSelectorsFromJSONFile(_x2) {\n  return _importCustomSelectorsFromJSONFile.apply(this, arguments);\n}\n/* Import Custom Selectors from JS file\n/* ========================================================================== */\n\n\nfunction _importCustomSelectorsFromJSONFile() {\n  _importCustomSelectorsFromJSONFile = _asyncToGenerator(function* (from) {\n    const object = yield readJSON(path.resolve(from));\n    return importCustomSelectorsFromObject(object);\n  });\n  return _importCustomSelectorsFromJSONFile.apply(this, arguments);\n}\n\nfunction importCustomSelectorsFromJSFile(_x3) {\n  return _importCustomSelectorsFromJSFile.apply(this, arguments);\n}\n/* Import Custom Selectors from Sources\n/* ========================================================================== */\n\n\nfunction _importCustomSelectorsFromJSFile() {\n  _importCustomSelectorsFromJSFile = _asyncToGenerator(function* (from) {\n    const object = yield import(path.resolve(from));\n    return importCustomSelectorsFromObject(object);\n  });\n  return _importCustomSelectorsFromJSFile.apply(this, arguments);\n}\n\nfunction importCustomSelectorsFromSources(sources) {\n  return sources.map(source => {\n    if (source instanceof Promise) {\n      return source;\n    } else if (source instanceof Function) {\n      return source();\n    } // read the source as an object\n\n\n    const opts = source === Object(source) ? source : {\n      from: String(source)\n    }; // skip objects with custom selectors\n\n    if (Object(opts).customSelectors || Object(opts)['custom-selectors']) {\n      return opts;\n    } // source pathname\n\n\n    const from = String(opts.from || ''); // type of file being read from\n\n    const type = (opts.type || path.extname(from).slice(1)).toLowerCase();\n    return {\n      type,\n      from\n    };\n  }).reduce( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (customSelectors, source) {\n      const _ref2 = yield source,\n            type = _ref2.type,\n            from = _ref2.from;\n\n      if (type === 'ast') {\n        return Object.assign(customSelectors, importCustomSelectorsFromCSSAST(from));\n      }\n\n      if (type === 'css') {\n        return Object.assign(customSelectors, yield importCustomSelectorsFromCSSFile(from));\n      }\n\n      if (type === 'js') {\n        return Object.assign(customSelectors, yield importCustomSelectorsFromJSFile(from));\n      }\n\n      if (type === 'json') {\n        return Object.assign(customSelectors, yield importCustomSelectorsFromJSONFile(from));\n      }\n\n      return Object.assign(customSelectors, importCustomSelectorsFromObject(yield source));\n    });\n\n    return function (_x4, _x5) {\n      return _ref.apply(this, arguments);\n    };\n  }(), {});\n}\n/* Helper utilities\n/* ========================================================================== */\n\n\nconst readFile = from => new Promise((resolve, reject) => {\n  fs.readFile(from, 'utf8', (error, result) => {\n    if (error) {\n      reject(error);\n    } else {\n      resolve(result);\n    }\n  });\n});\n\nconst readJSON = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (from) {\n    return JSON.parse(yield readFile(from));\n  });\n\n  return function readJSON(_x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n/* Import Custom Selectors from CSS File\n/* ========================================================================== */\n\n\nfunction exportCustomSelectorsToCssFile(_x, _x2) {\n  return _exportCustomSelectorsToCssFile.apply(this, arguments);\n}\n/* Import Custom Selectors from JSON file\n/* ========================================================================== */\n\n\nfunction _exportCustomSelectorsToCssFile() {\n  _exportCustomSelectorsToCssFile = _asyncToGenerator(function* (to, customSelectors) {\n    const cssContent = Object.keys(customSelectors).reduce((cssLines, name) => {\n      cssLines.push(`@custom-selector ${name} ${customSelectors[name]};`);\n      return cssLines;\n    }, []).join('\\n');\n    const css = `${cssContent}\\n`;\n    yield writeFile(to, css);\n  });\n  return _exportCustomSelectorsToCssFile.apply(this, arguments);\n}\n\nfunction exportCustomSelectorsToJsonFile(_x3, _x4) {\n  return _exportCustomSelectorsToJsonFile.apply(this, arguments);\n}\n/* Import Custom Selectors from Common JS file\n/* ========================================================================== */\n\n\nfunction _exportCustomSelectorsToJsonFile() {\n  _exportCustomSelectorsToJsonFile = _asyncToGenerator(function* (to, customSelectors) {\n    const jsonContent = JSON.stringify({\n      'custom-selectors': customSelectors\n    }, null, '  ');\n    const json = `${jsonContent}\\n`;\n    yield writeFile(to, json);\n  });\n  return _exportCustomSelectorsToJsonFile.apply(this, arguments);\n}\n\nfunction exportCustomSelectorsToCjsFile(_x5, _x6) {\n  return _exportCustomSelectorsToCjsFile.apply(this, arguments);\n}\n/* Import Custom Selectors from Module JS file\n/* ========================================================================== */\n\n\nfunction _exportCustomSelectorsToCjsFile() {\n  _exportCustomSelectorsToCjsFile = _asyncToGenerator(function* (to, customSelectors) {\n    const jsContents = Object.keys(customSelectors).reduce((jsLines, name) => {\n      jsLines.push(`\\t\\t'${escapeForJS(name)}': '${escapeForJS(customSelectors[name])}'`);\n      return jsLines;\n    }, []).join(',\\n');\n    const js = `module.exports = {\\n\\tcustomSelectors: {\\n${jsContents}\\n\\t}\\n};\\n`;\n    yield writeFile(to, js);\n  });\n  return _exportCustomSelectorsToCjsFile.apply(this, arguments);\n}\n\nfunction exportCustomSelectorsToMjsFile(_x7, _x8) {\n  return _exportCustomSelectorsToMjsFile.apply(this, arguments);\n}\n/* Export Custom Selectors to Destinations\n/* ========================================================================== */\n\n\nfunction _exportCustomSelectorsToMjsFile() {\n  _exportCustomSelectorsToMjsFile = _asyncToGenerator(function* (to, customSelectors) {\n    const mjsContents = Object.keys(customSelectors).reduce((mjsLines, name) => {\n      mjsLines.push(`\\t'${escapeForJS(name)}': '${escapeForJS(customSelectors[name])}'`);\n      return mjsLines;\n    }, []).join(',\\n');\n    const mjs = `export const customSelectors = {\\n${mjsContents}\\n};\\n`;\n    yield writeFile(to, mjs);\n  });\n  return _exportCustomSelectorsToMjsFile.apply(this, arguments);\n}\n\nfunction exportCustomSelectorsToDestinations(customSelectors, destinations) {\n  return Promise.all(destinations.map( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (destination) {\n      if (destination instanceof Function) {\n        yield destination(defaultCustomSelectorsToJSON(customSelectors));\n      } else {\n        // read the destination as an object\n        const opts = destination === Object(destination) ? destination : {\n          to: String(destination)\n        }; // transformer for custom selectors into a JSON-compatible object\n\n        const toJSON = opts.toJSON || defaultCustomSelectorsToJSON;\n\n        if ('customSelectors' in opts) {\n          // write directly to an object as customSelectors\n          opts.customSelectors = toJSON(customSelectors);\n        } else if ('custom-selectors' in opts) {\n          // write directly to an object as custom-selectors\n          opts['custom-selectors'] = toJSON(customSelectors);\n        } else {\n          // destination pathname\n          const to = String(opts.to || ''); // type of file being written to\n\n          const type = (opts.type || path.extname(opts.to).slice(1)).toLowerCase(); // transformed custom selectors\n\n          const customSelectorsJSON = toJSON(customSelectors);\n\n          if (type === 'css') {\n            yield exportCustomSelectorsToCssFile(to, customSelectorsJSON);\n          }\n\n          if (type === 'js') {\n            yield exportCustomSelectorsToCjsFile(to, customSelectorsJSON);\n          }\n\n          if (type === 'json') {\n            yield exportCustomSelectorsToJsonFile(to, customSelectorsJSON);\n          }\n\n          if (type === 'mjs') {\n            yield exportCustomSelectorsToMjsFile(to, customSelectorsJSON);\n          }\n        }\n      }\n    });\n\n    return function (_x9) {\n      return _ref.apply(this, arguments);\n    };\n  }()));\n}\n/* Helper utilities\n/* ========================================================================== */\n\n\nconst defaultCustomSelectorsToJSON = customSelectors => {\n  return Object.keys(customSelectors).reduce((customSelectorsJSON, key) => {\n    customSelectorsJSON[key] = String(customSelectors[key]);\n    return customSelectorsJSON;\n  }, {});\n};\n\nconst writeFile = (to, text) => new Promise((resolve, reject) => {\n  fs.writeFile(to, text, error => {\n    if (error) {\n      reject(error);\n    } else {\n      resolve();\n    }\n  });\n});\n\nconst escapeForJS = string => string.replace(/\\\\([\\s\\S])|(')/g, '\\\\$1$2').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n\nvar index = postcss.plugin('postcss-custom-selectors', opts => {\n  // whether to preserve custom selectors and rules using them\n  const preserve = Boolean(Object(opts).preserve); // sources to import custom selectors from\n\n  const importFrom = [].concat(Object(opts).importFrom || []); // destinations to export custom selectors to\n\n  const exportTo = [].concat(Object(opts).exportTo || []); // promise any custom selectors are imported\n\n  const customSelectorsPromise = importCustomSelectorsFromSources(importFrom);\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (root) {\n      const customProperties = Object.assign(yield customSelectorsPromise, getCustomSelectors(root, {\n        preserve\n      }));\n      yield exportCustomSelectorsToDestinations(customProperties, exportTo);\n      transformRules(root, customProperties, {\n        preserve\n      });\n    });\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n});\nexport default index;","map":{"version":3,"sources":["lib/selectors-ast-from-selectors-string.js","lib/custom-selectors-from-root.js","lib/transform-selectors-by-custom-selectors.js","lib/transform-rules.js","lib/import-from.js","lib/export-to.js","index.js"],"names":["selectorString","parser","selectors","selectorAST","customSelectors","root","node","isCustomSelector","name","getASTFromSelectors","Object","customSelectorNameRegExp","customSelectorParamsRegExp","index","selectorList","transformedSelectors","transformSelector","transpiledSelectors","selector","value","nodes","replacementSelector","selectorClone","retranspiledSelectors","adjustNodesBySelectorEnds","Number","transformSelectorList","withoutSelectorStartMatch","withoutSelectorEndMatch","isWithoutSelectorStart","isWithoutSelectorEnd","safeIndex","rule","transformSelectorsByCustomSelectors","opts","customPseudoRegExp","getCustomSelectors","importCustomSelectorsFromCSSFile","css","readFile","path","from","importCustomSelectorsFromCSSAST","getSelectorsAstFromSelectorsString","importCustomSelectorsFromJSONFile","object","readJSON","importCustomSelectorsFromObject","importCustomSelectorsFromJSFile","source","String","type","fs","reject","resolve","JSON","exportCustomSelectorsToCssFile","cssContent","cssLines","writeFile","exportCustomSelectorsToJsonFile","jsonContent","json","exportCustomSelectorsToCjsFile","jsContents","jsLines","escapeForJS","js","exportCustomSelectorsToMjsFile","mjsContents","mjsLines","mjs","destination","defaultCustomSelectorsToJSON","to","toJSON","customSelectorsJSON","error","string","preserve","Boolean","importFrom","exportTo","customSelectorsPromise","importCustomSelectorsFromSources","customProperties","exportCustomSelectorsToDestinations","transformRules"],"mappings":"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","sourcesContent":["import parser from 'postcss-selector-parser';\n\n/* Return a Selectors AST from a Selectors String\n/* ========================================================================== */\n\nexport default selectorString => {\n\tlet selectorAST;\n\n\tparser(selectors => {\n\t\tselectorAST = selectors\n\t}).processSync(selectorString);\n\n\treturn selectorAST;\n};\n","import getASTFromSelectors from './selectors-ast-from-selectors-string';\n\n// return custom selectors from the css root, conditionally removing them\nexport default (root, opts) => {\n\t// initialize custom selectors\n\tconst customSelectors = {};\n\n\t// for each custom selector atrule that is a child of the css root\n\troot.nodes.slice().forEach(node => {\n\t\tif (isCustomSelector(node)) {\n\t\t\t// extract the name and selectors from the params of the custom selector\n\t\t\tconst [, name, selectors] = node.params.match(customSelectorParamsRegExp);\n\n\t\t\t// write the parsed selectors to the custom selector\n\t\t\tcustomSelectors[name] = getASTFromSelectors(selectors);\n\n\t\t\t// conditionally remove the custom selector atrule\n\t\t\tif (!Object(opts).preserve) {\n\t\t\t\tnode.remove();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn customSelectors;\n};\n\n// match the custom selector name\nconst customSelectorNameRegExp = /^custom-selector$/i;\n\n// match the custom selector params\nconst customSelectorParamsRegExp = /^(:--[A-z][\\w-]*)\\s+([\\W\\w]+)\\s*$/;\n\n// whether the atrule is a custom selector\nconst isCustomSelector = node => node.type === 'atrule' && customSelectorNameRegExp.test(node.name) && customSelectorParamsRegExp.test(node.params);\n","// return transformed selectors, replacing custom pseudo selectors with custom selectors\nexport default function transformSelectorList(selectorList, customSelectors) {\n\tlet index = selectorList.nodes.length - 1;\n\n\twhile (index >= 0) {\n\t\tconst transformedSelectors = transformSelector(selectorList.nodes[index], customSelectors);\n\n\t\tif (transformedSelectors.length) {\n\t\t\tselectorList.nodes.splice(index, 1, ...transformedSelectors);\n\t\t}\n\n\t\t--index;\n\t}\n\n\treturn selectorList;\n}\n\n// return custom pseudo selectors replaced with custom selectors\nfunction transformSelector(selector, customSelectors) {\n\tconst transpiledSelectors = [];\n\n\tfor (const index in selector.nodes) {\n\t\tconst { value, nodes } = selector.nodes[index];\n\n\t\tif (value in customSelectors) {\n\t\t\tfor (const replacementSelector of customSelectors[value].nodes) {\n\t\t\t\tconst selectorClone = selector.clone();\n\n\t\t\t\tselectorClone.nodes.splice(index, 1, ...replacementSelector.clone().nodes.map(node => {\n\t\t\t\t\t// use spacing from the current usage\n\t\t\t\t\tnode.spaces = { ...selector.nodes[index].spaces };\n\n\t\t\t\t\treturn node;\n\t\t\t\t}));\n\n\t\t\t\tconst retranspiledSelectors = transformSelector(selectorClone, customSelectors);\n\n\t\t\t\tadjustNodesBySelectorEnds(selectorClone.nodes, Number(index));\n\n\t\t\t\tif (retranspiledSelectors.length) {\n\t\t\t\t\ttranspiledSelectors.push(...retranspiledSelectors);\n\t\t\t\t} else {\n\t\t\t\t\ttranspiledSelectors.push(selectorClone);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn transpiledSelectors;\n\t\t} else if (nodes && nodes.length) {\n\t\t\ttransformSelectorList(selector.nodes[index], customSelectors);\n\t\t}\n\t}\n\n\treturn transpiledSelectors;\n}\n\n// match selectors by difficult-to-separate ends\nconst withoutSelectorStartMatch = /^(tag|universal)$/;\nconst withoutSelectorEndMatch = /^(class|id|pseudo|tag|universal)$/;\n\nconst isWithoutSelectorStart = node => withoutSelectorStartMatch.test(Object(node).type);\nconst isWithoutSelectorEnd = node => withoutSelectorEndMatch.test(Object(node).type);\n\n// adjust nodes by selector ends (so that .class:--h1 becomes h1.class rather than .classh1)\nconst adjustNodesBySelectorEnds = (nodes, index) => {\n\tif (index && isWithoutSelectorStart(nodes[index]) && isWithoutSelectorEnd(nodes[index - 1])) {\n\t\tlet safeIndex = index - 1;\n\n\t\twhile (safeIndex && isWithoutSelectorEnd(nodes[safeIndex])) {\n\t\t\t--safeIndex;\n\t\t}\n\n\t\tif (safeIndex < index) {\n\t\t\tconst node = nodes.splice(index, 1)[0];\n\n\t\t\tnodes.splice(safeIndex, 0, node);\n\n\t\t\tnodes[safeIndex].spaces.before = nodes[safeIndex + 1].spaces.before;\n\t\t\tnodes[safeIndex + 1].spaces.before = '';\n\n\t\t\tif (nodes[index]) {\n\t\t\t\tnodes[index].spaces.after = nodes[safeIndex].spaces.after;\n\t\t\t\tnodes[safeIndex].spaces.after = '';\n\t\t\t}\n\t\t}\n\t}\n};\n\n","import parser from 'postcss-selector-parser';\nimport transformSelectorsByCustomSelectors from './transform-selectors-by-custom-selectors';\n\n// transform custom pseudo selectors with custom selectors\nexport default (root, customSelectors, opts) => {\n\troot.walkRules(customPseudoRegExp, rule => {\n\t\tconst selector = parser(selectors => {\n\t\t\ttransformSelectorsByCustomSelectors(selectors, customSelectors, opts)\n\t\t}).processSync(rule.selector);\n\n\t\tif (opts.preserve) {\n\t\t\trule.cloneBefore({ selector });\n\t\t} else {\n\t\t\trule.selector = selector;\n\t\t}\n\t});\n};\n\nconst customPseudoRegExp = /:--[A-z][\\w-]*/;\n","import fs from 'fs';\nimport path from 'path';\nimport postcss from 'postcss';\nimport getSelectorsAstFromSelectorsString from './selectors-ast-from-selectors-string';\nimport getCustomSelectors from './custom-selectors-from-root';\n\n/* Import Custom Selectors from CSS AST\n/* ========================================================================== */\n\nfunction importCustomSelectorsFromCSSAST(root) {\n\treturn getCustomSelectors(root);\n}\n\n/* Import Custom Selectors from CSS File\n/* ========================================================================== */\n\nasync function importCustomSelectorsFromCSSFile(from) {\n\tconst css = await readFile(path.resolve(from));\n\tconst root = postcss.parse(css, { from: path.resolve(from) });\n\n\treturn importCustomSelectorsFromCSSAST(root);\n}\n\n/* Import Custom Selectors from Object\n/* ========================================================================== */\n\nfunction importCustomSelectorsFromObject(object) {\n\tconst customSelectors = Object.assign(\n\t\t{},\n\t\tObject(object).customSelectors || Object(object)['custom-selectors']\n\t);\n\n\tfor (const key in customSelectors) {\n\t\tcustomSelectors[key] = getSelectorsAstFromSelectorsString(customSelectors[key]);\n\t}\n\n\treturn customSelectors;\n}\n\n/* Import Custom Selectors from JSON file\n/* ========================================================================== */\n\nasync function importCustomSelectorsFromJSONFile(from) {\n\tconst object = await readJSON(path.resolve(from));\n\n\treturn importCustomSelectorsFromObject(object);\n}\n\n/* Import Custom Selectors from JS file\n/* ========================================================================== */\n\nasync function importCustomSelectorsFromJSFile(from) {\n\tconst object = await import(path.resolve(from));\n\n\treturn importCustomSelectorsFromObject(object);\n}\n\n/* Import Custom Selectors from Sources\n/* ========================================================================== */\n\nexport default function importCustomSelectorsFromSources(sources) {\n\treturn sources.map(source => {\n\t\tif (source instanceof Promise) {\n\t\t\treturn source;\n\t\t} else if (source instanceof Function) {\n\t\t\treturn source();\n\t\t}\n\n\t\t// read the source as an object\n\t\tconst opts = source === Object(source) ? source : { from: String(source) };\n\n\t\t// skip objects with custom selectors\n\t\tif (Object(opts).customSelectors || Object(opts)['custom-selectors']) {\n\t\t\treturn opts\n\t\t}\n\n\t\t// source pathname\n\t\tconst from = String(opts.from || '');\n\n\t\t// type of file being read from\n\t\tconst type = (opts.type || path.extname(from).slice(1)).toLowerCase();\n\n\t\treturn { type, from };\n\t}).reduce(async (customSelectors, source) => {\n\t\tconst { type, from } = await source;\n\n\t\tif (type === 'ast') {\n\t\t\treturn Object.assign(customSelectors, importCustomSelectorsFromCSSAST(from));\n\t\t}\n\n\t\tif (type === 'css') {\n\t\t\treturn Object.assign(customSelectors, await importCustomSelectorsFromCSSFile(from));\n\t\t}\n\n\t\tif (type === 'js') {\n\t\t\treturn Object.assign(customSelectors, await importCustomSelectorsFromJSFile(from));\n\t\t}\n\n\t\tif (type === 'json') {\n\t\t\treturn Object.assign(customSelectors, await importCustomSelectorsFromJSONFile(from));\n\t\t}\n\n\t\treturn Object.assign(customSelectors, importCustomSelectorsFromObject(await source));\n\t}, {});\n}\n\n/* Helper utilities\n/* ========================================================================== */\n\nconst readFile = from => new Promise((resolve, reject) => {\n\tfs.readFile(from, 'utf8', (error, result) => {\n\t\tif (error) {\n\t\t\treject(error);\n\t\t} else {\n\t\t\tresolve(result);\n\t\t}\n\t});\n});\n\nconst readJSON = async from => JSON.parse(await readFile(from));\n","import fs from 'fs';\nimport path from 'path';\n\n/* Import Custom Selectors from CSS File\n/* ========================================================================== */\n\nasync function exportCustomSelectorsToCssFile(to, customSelectors) {\n\tconst cssContent = Object.keys(customSelectors).reduce((cssLines, name) => {\n\t\tcssLines.push(`@custom-selector ${name} ${customSelectors[name]};`);\n\n\t\treturn cssLines;\n\t}, []).join('\\n');\n\tconst css = `${cssContent}\\n`;\n\n\tawait writeFile(to, css);\n}\n\n/* Import Custom Selectors from JSON file\n/* ========================================================================== */\n\nasync function exportCustomSelectorsToJsonFile(to, customSelectors) {\n\tconst jsonContent = JSON.stringify({\n\t\t'custom-selectors': customSelectors\n\t}, null, '  ');\n\tconst json = `${jsonContent}\\n`;\n\n\tawait writeFile(to, json);\n}\n\n/* Import Custom Selectors from Common JS file\n/* ========================================================================== */\n\nasync function exportCustomSelectorsToCjsFile(to, customSelectors) {\n\tconst jsContents = Object.keys(customSelectors).reduce((jsLines, name) => {\n\t\tjsLines.push(`\\t\\t'${escapeForJS(name)}': '${escapeForJS(customSelectors[name])}'`);\n\n\t\treturn jsLines;\n\t}, []).join(',\\n');\n\tconst js = `module.exports = {\\n\\tcustomSelectors: {\\n${jsContents}\\n\\t}\\n};\\n`;\n\n\tawait writeFile(to, js);\n}\n\n/* Import Custom Selectors from Module JS file\n/* ========================================================================== */\n\nasync function exportCustomSelectorsToMjsFile(to, customSelectors) {\n\tconst mjsContents = Object.keys(customSelectors).reduce((mjsLines, name) => {\n\t\tmjsLines.push(`\\t'${escapeForJS(name)}': '${escapeForJS(customSelectors[name])}'`);\n\n\t\treturn mjsLines;\n\t}, []).join(',\\n');\n\tconst mjs = `export const customSelectors = {\\n${mjsContents}\\n};\\n`;\n\n\tawait writeFile(to, mjs);\n}\n\n/* Export Custom Selectors to Destinations\n/* ========================================================================== */\n\nexport default function exportCustomSelectorsToDestinations(customSelectors, destinations) {\n\treturn Promise.all(destinations.map(async destination => {\n\t\tif (destination instanceof Function) {\n\t\t\tawait destination(defaultCustomSelectorsToJSON(customSelectors));\n\t\t} else {\n\t\t\t// read the destination as an object\n\t\t\tconst opts = destination === Object(destination) ? destination : { to: String(destination) };\n\n\t\t\t// transformer for custom selectors into a JSON-compatible object\n\t\t\tconst toJSON = opts.toJSON || defaultCustomSelectorsToJSON;\n\n\t\t\tif ('customSelectors' in opts) {\n\t\t\t\t// write directly to an object as customSelectors\n\t\t\t\topts.customSelectors = toJSON(customSelectors);\n\t\t\t} else if ('custom-selectors' in opts) {\n\t\t\t\t// write directly to an object as custom-selectors\n\t\t\t\topts['custom-selectors'] = toJSON(customSelectors);\n\t\t\t} else {\n\t\t\t\t// destination pathname\n\t\t\t\tconst to = String(opts.to || '');\n\n\t\t\t\t// type of file being written to\n\t\t\t\tconst type = (opts.type || path.extname(opts.to).slice(1)).toLowerCase();\n\n\t\t\t\t// transformed custom selectors\n\t\t\t\tconst customSelectorsJSON = toJSON(customSelectors);\n\n\t\t\t\tif (type === 'css') {\n\t\t\t\t\tawait exportCustomSelectorsToCssFile(to, customSelectorsJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'js') {\n\t\t\t\t\tawait exportCustomSelectorsToCjsFile(to, customSelectorsJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'json') {\n\t\t\t\t\tawait exportCustomSelectorsToJsonFile(to, customSelectorsJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'mjs') {\n\t\t\t\t\tawait exportCustomSelectorsToMjsFile(to, customSelectorsJSON);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}));\n}\n\n/* Helper utilities\n/* ========================================================================== */\n\nconst defaultCustomSelectorsToJSON = customSelectors => {\n\treturn Object.keys(customSelectors).reduce((customSelectorsJSON, key) => {\n\t\tcustomSelectorsJSON[key] = String(customSelectors[key]);\n\n\t\treturn customSelectorsJSON;\n\t}, {});\n};\n\nconst writeFile = (to, text) => new Promise((resolve, reject) => {\n\tfs.writeFile(to, text, error => {\n\t\tif (error) {\n\t\t\treject(error);\n\t\t} else {\n\t\t\tresolve();\n\t\t}\n\t});\n});\n\nconst escapeForJS = string => string.replace(/\\\\([\\s\\S])|(')/g, '\\\\$1$2').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n","import postcss from 'postcss';\nimport getCustomSelectors from './lib/custom-selectors-from-root';\nimport transformRules from './lib/transform-rules';\nimport importCustomSelectorsFromSources from './lib/import-from';\nimport exportCustomSelectorsToDestinations from './lib/export-to';\n\nexport default postcss.plugin('postcss-custom-selectors', opts => {\n\t// whether to preserve custom selectors and rules using them\n\tconst preserve = Boolean(Object(opts).preserve);\n\n\t// sources to import custom selectors from\n\tconst importFrom = [].concat(Object(opts).importFrom || []);\n\n\t// destinations to export custom selectors to\n\tconst exportTo = [].concat(Object(opts).exportTo || []);\n\n\t// promise any custom selectors are imported\n\tconst customSelectorsPromise = importCustomSelectorsFromSources(importFrom);\n\n\treturn async root => {\n\t\tconst customProperties = Object.assign(\n\t\t\tawait customSelectorsPromise,\n\t\t\tgetCustomSelectors(root, { preserve })\n\t\t);\n\n\t\tawait exportCustomSelectorsToDestinations(customProperties, exportTo);\n\n\t\ttransformRules(root, customProperties, { preserve });\n\t};\n});\n"]},"metadata":{},"sourceType":"module"}