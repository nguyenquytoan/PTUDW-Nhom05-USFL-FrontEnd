{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getPropValue;\nexports.getLiteralPropValue = getLiteralPropValue;\n\nvar _values = require('./values');\n\nvar _values2 = _interopRequireDefault(_values);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar extractValue = function extractValue(attribute, extractor) {\n  if (attribute && attribute.type === 'JSXAttribute') {\n    if (attribute.value === null) {\n      // Null valued attributes imply truthiness.\n      // For example: <div aria-hidden />\n      // See: https://facebook.github.io/react/docs/jsx-in-depth.html#boolean-attributes\n      return true;\n    }\n\n    return extractor(attribute.value);\n  }\n\n  return undefined;\n};\n/**\n * Returns the value of a given attribute.\n * Different types of attributes have their associated\n * values in different properties on the object.\n *\n * This function should return the most *closely* associated\n * value with the intention of the JSX.\n *\n * @param attribute - The JSXAttribute collected by AST parser.\n */\n\n\nfunction getPropValue(attribute) {\n  return extractValue(attribute, _values2.default);\n}\n/**\n * Returns the value of a given attribute.\n * Different types of attributes have their associated\n * values in different properties on the object.\n *\n * This function should return a value only if we can extract\n * a literal value from its attribute (i.e. values that have generic\n * types in JavaScript - strings, numbers, booleans, etc.)\n *\n * @param attribute - The JSXAttribute collected by AST parser.\n */\n\n\nfunction getLiteralPropValue(attribute) {\n  return extractValue(attribute, _values.getLiteralValue);\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/lib/getPropValue.js"],"names":["Object","defineProperty","exports","value","default","getPropValue","getLiteralPropValue","_values","require","_values2","_interopRequireDefault","obj","__esModule","extractValue","attribute","extractor","type","undefined","getLiteralValue"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,YAAlB;AACAH,OAAO,CAACI,mBAAR,GAA8BA,mBAA9B;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB;;AAEA,IAAIC,QAAQ,GAAGC,sBAAsB,CAACH,OAAD,CAArC;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEP,IAAAA,OAAO,EAAEO;AAAX,GAArC;AAAwD;;AAE/F,IAAIE,YAAY,GAAG,SAASA,YAAT,CAAsBC,SAAtB,EAAiCC,SAAjC,EAA4C;AAC7D,MAAID,SAAS,IAAIA,SAAS,CAACE,IAAV,KAAmB,cAApC,EAAoD;AAClD,QAAIF,SAAS,CAACX,KAAV,KAAoB,IAAxB,EAA8B;AAC5B;AACA;AACA;AACA,aAAO,IAAP;AACD;;AAED,WAAOY,SAAS,CAACD,SAAS,CAACX,KAAX,CAAhB;AACD;;AAED,SAAOc,SAAP;AACD,CAbD;AAeA;;;;;;;;;;;;AAUA,SAASZ,YAAT,CAAsBS,SAAtB,EAAiC;AAC/B,SAAOD,YAAY,CAACC,SAAD,EAAYL,QAAQ,CAACL,OAArB,CAAnB;AACD;AAED;;;;;;;;;;;;;AAWA,SAASE,mBAAT,CAA6BQ,SAA7B,EAAwC;AACtC,SAAOD,YAAY,CAACC,SAAD,EAAYP,OAAO,CAACW,eAApB,CAAnB;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getPropValue;\nexports.getLiteralPropValue = getLiteralPropValue;\n\nvar _values = require('./values');\n\nvar _values2 = _interopRequireDefault(_values);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar extractValue = function extractValue(attribute, extractor) {\n  if (attribute && attribute.type === 'JSXAttribute') {\n    if (attribute.value === null) {\n      // Null valued attributes imply truthiness.\n      // For example: <div aria-hidden />\n      // See: https://facebook.github.io/react/docs/jsx-in-depth.html#boolean-attributes\n      return true;\n    }\n\n    return extractor(attribute.value);\n  }\n\n  return undefined;\n};\n\n/**\n * Returns the value of a given attribute.\n * Different types of attributes have their associated\n * values in different properties on the object.\n *\n * This function should return the most *closely* associated\n * value with the intention of the JSX.\n *\n * @param attribute - The JSXAttribute collected by AST parser.\n */\nfunction getPropValue(attribute) {\n  return extractValue(attribute, _values2.default);\n}\n\n/**\n * Returns the value of a given attribute.\n * Different types of attributes have their associated\n * values in different properties on the object.\n *\n * This function should return a value only if we can extract\n * a literal value from its attribute (i.e. values that have generic\n * types in JavaScript - strings, numbers, booleans, etc.)\n *\n * @param attribute - The JSXAttribute collected by AST parser.\n */\nfunction getLiteralPropValue(attribute) {\n  return extractValue(attribute, _values.getLiteralValue);\n}"]},"metadata":{},"sourceType":"script"}