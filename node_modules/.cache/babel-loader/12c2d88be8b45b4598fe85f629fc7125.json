{"ast":null,"code":"var test = require('tape');\n\nvar spec = require('stream-spec');\n\nvar through = require('../');\n/*\n  I'm using these two functions, and not streams and pipe\n  so there is less to break. if this test fails it must be\n  the implementation of _through_\n*/\n\n\nfunction write(array, stream) {\n  array = array.slice();\n\n  function next() {\n    while (array.length) if (stream.write(array.shift()) === false) return stream.once('drain', next);\n\n    stream.end();\n  }\n\n  next();\n}\n\nfunction read(stream, callback) {\n  var actual = [];\n  stream.on('data', function (data) {\n    actual.push(data);\n  });\n  stream.once('end', function () {\n    callback(null, actual);\n  });\n  stream.once('error', function (err) {\n    callback(err);\n  });\n}\n\ntest('simple defaults', function (assert) {\n  var l = 1000,\n      expected = [];\n\n  while (l--) expected.push(l * Math.random());\n\n  var t = through();\n  var s = spec(t).through().pausable();\n  read(t, function (err, actual) {\n    assert.ifError(err);\n    assert.deepEqual(actual, expected);\n    assert.end();\n  });\n  t.on('close', s.validate);\n  write(expected, t);\n});\ntest('simple functions', function (assert) {\n  var l = 1000,\n      expected = [];\n\n  while (l--) expected.push(l * Math.random());\n\n  var t = through(function (data) {\n    this.emit('data', data * 2);\n  });\n  var s = spec(t).through().pausable();\n  read(t, function (err, actual) {\n    assert.ifError(err);\n    assert.deepEqual(actual, expected.map(function (data) {\n      return data * 2;\n    }));\n    assert.end();\n  });\n  t.on('close', s.validate);\n  write(expected, t);\n});\ntest('pauses', function (assert) {\n  var l = 1000,\n      expected = [];\n\n  while (l--) expected.push(l); //Math.random())\n\n\n  var t = through();\n  var s = spec(t).through().pausable();\n  t.on('data', function () {\n    if (Math.random() > 0.1) return;\n    t.pause();\n    process.nextTick(function () {\n      t.resume();\n    });\n  });\n  read(t, function (err, actual) {\n    assert.ifError(err);\n    assert.deepEqual(actual, expected);\n  });\n  t.on('close', function () {\n    s.validate();\n    assert.end();\n  });\n  write(expected, t);\n});\ntest('does not soft-end on `undefined`', function (assert) {\n  var stream = through(),\n      count = 0;\n  stream.on('data', function (data) {\n    count++;\n  });\n  stream.write(undefined);\n  stream.write(undefined);\n  assert.equal(count, 2);\n  assert.end();\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/through/test/index.js"],"names":["test","require","spec","through","write","array","stream","slice","next","length","shift","once","end","read","callback","actual","on","data","push","err","assert","l","expected","Math","random","t","s","pausable","ifError","deepEqual","validate","emit","map","pause","process","nextTick","resume","count","undefined","equal"],"mappings":"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","sourcesContent":["\nvar test = require('tape')\nvar spec = require('stream-spec')\nvar through = require('../')\n\n/*\n  I'm using these two functions, and not streams and pipe\n  so there is less to break. if this test fails it must be\n  the implementation of _through_\n*/\n\nfunction write(array, stream) {\n  array = array.slice()\n  function next() {\n    while(array.length)\n      if(stream.write(array.shift()) === false)\n        return stream.once('drain', next)\n    \n    stream.end()\n  }\n\n  next()\n}\n\nfunction read(stream, callback) {\n  var actual = []\n  stream.on('data', function (data) {\n    actual.push(data)\n  })\n  stream.once('end', function () {\n    callback(null, actual)\n  })\n  stream.once('error', function (err) {\n    callback(err)\n  })\n}\n\ntest('simple defaults', function(assert) {\n\n  var l = 1000\n    , expected = []\n\n  while(l--) expected.push(l * Math.random())\n\n  var t = through()\n  var s = spec(t).through().pausable()\n\n  read(t, function (err, actual) {\n    assert.ifError(err)\n    assert.deepEqual(actual, expected)\n    assert.end()\n  })\n\n  t.on('close', s.validate)\n\n  write(expected, t)\n});\n\ntest('simple functions', function(assert) {\n\n  var l = 1000\n    , expected = [] \n\n  while(l--) expected.push(l * Math.random())\n\n  var t = through(function (data) {\n      this.emit('data', data*2)\n    }) \n  var s = spec(t).through().pausable()\n      \n\n  read(t, function (err, actual) {\n    assert.ifError(err)\n    assert.deepEqual(actual, expected.map(function (data) {\n      return data*2\n    }))\n    assert.end()\n  })\n\n  t.on('close', s.validate)\n\n  write(expected, t)\n})\n\ntest('pauses', function(assert) {\n\n  var l = 1000\n    , expected = [] \n\n  while(l--) expected.push(l) //Math.random())\n\n  var t = through()    \n \n  var s = spec(t)\n      .through()\n      .pausable()\n\n  t.on('data', function () {\n    if(Math.random() > 0.1) return\n    t.pause()\n    process.nextTick(function () {\n      t.resume()\n    })\n  })\n\n  read(t, function (err, actual) {\n    assert.ifError(err)\n    assert.deepEqual(actual, expected)\n  })\n\n  t.on('close', function () {\n    s.validate()\n    assert.end()\n  })\n\n  write(expected, t)\n})\n\ntest('does not soft-end on `undefined`', function(assert) {\n  var stream = through()\n    , count = 0\n\n  stream.on('data', function (data) {\n    count++\n  })\n\n  stream.write(undefined)\n  stream.write(undefined)\n\n  assert.equal(count, 2)\n\n  assert.end()\n})\n"]},"metadata":{},"sourceType":"script"}