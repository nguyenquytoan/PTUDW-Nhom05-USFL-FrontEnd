{"ast":null,"code":"\"use strict\";\n\nconst HTTP_STATUS_CODES = require(\"http\").STATUS_CODES;\n\nconst {\n  spawnSync\n} = require(\"child_process\");\n\nconst {\n  URL\n} = require(\"whatwg-url\");\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst tough = require(\"tough-cookie\");\n\nconst MIMEType = require(\"whatwg-mimetype\");\n\nconst conversions = require(\"webidl-conversions\");\n\nconst xhrUtils = require(\"./xhr-utils\");\n\nconst DOMException = require(\"domexception\");\n\nconst xhrSymbols = require(\"./xmlhttprequest-symbols\");\n\nconst {\n  addConstants\n} = require(\"../utils\");\n\nconst {\n  documentBaseURLSerialized\n} = require(\"./helpers/document-base-url\");\n\nconst {\n  asciiCaseInsensitiveMatch\n} = require(\"./helpers/strings\");\n\nconst idlUtils = require(\"./generated/utils\");\n\nconst Document = require(\"./generated/Document\");\n\nconst Blob = require(\"./generated/Blob\");\n\nconst FormData = require(\"./generated/FormData\");\n\nconst XMLHttpRequestEventTarget = require(\"./generated/XMLHttpRequestEventTarget\");\n\nconst XMLHttpRequestUpload = require(\"./generated/XMLHttpRequestUpload\");\n\nconst ProgressEvent = require(\"./generated/ProgressEvent\");\n\nconst {\n  parseIntoDocument\n} = require(\"../browser/parser\");\n\nconst {\n  fragmentSerialization\n} = require(\"./domparsing/serialization\");\n\nconst {\n  setupForSimpleEventAccessors\n} = require(\"./helpers/create-event-accessor\");\n\nconst {\n  parseJSONFromBytes\n} = require(\"./helpers/json\");\n\nconst {\n  fireAnEvent\n} = require(\"./helpers/events\");\n\nconst syncWorkerFile = require.resolve ? require.resolve(\"./xhr-sync-worker.js\") : null;\nconst tokenRegexp = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/;\nconst fieldValueRegexp = /^[ \\t]*(?:[\\x21-\\x7E\\x80-\\xFF](?:[ \\t][\\x21-\\x7E\\x80-\\xFF])?)*[ \\t]*$/;\nconst forbiddenRequestHeaders = new Set([\"accept-charset\", \"accept-encoding\", \"access-control-request-headers\", \"access-control-request-method\", \"connection\", \"content-length\", \"cookie\", \"cookie2\", \"date\", \"dnt\", \"expect\", \"host\", \"keep-alive\", \"origin\", \"referer\", \"te\", \"trailer\", \"transfer-encoding\", \"upgrade\", \"via\"]);\nconst forbiddenResponseHeaders = new Set([\"set-cookie\", \"set-cookie2\"]);\nconst uniqueResponseHeaders = new Set([\"content-type\", \"content-length\", \"user-agent\", \"referer\", \"host\", \"authorization\", \"proxy-authorization\", \"if-modified-since\", \"if-unmodified-since\", \"from\", \"location\", \"max-forwards\"]);\nconst corsSafeResponseHeaders = new Set([\"cache-control\", \"content-language\", \"content-type\", \"expires\", \"last-modified\", \"pragma\"]);\nconst allowedRequestMethods = new Set([\"OPTIONS\", \"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\"]);\nconst forbiddenRequestMethods = new Set([\"TRACK\", \"TRACE\", \"CONNECT\"]);\nconst XMLHttpRequestResponseType = new Set([\"\", \"arraybuffer\", \"blob\", \"document\", \"json\", \"text\"]);\n\nmodule.exports = function createXMLHttpRequest(window) {\n  class XMLHttpRequest extends XMLHttpRequestEventTarget.interface {\n    constructor() {\n      // eslint-disable-line constructor-super\n      const theThis = Object.create(new.target.prototype);\n      XMLHttpRequestEventTarget.setup(theThis);\n      theThis.upload = XMLHttpRequestUpload.create();\n      theThis.upload._ownerDocument = window.document;\n      theThis[xhrSymbols.flag] = {\n        synchronous: false,\n        withCredentials: false,\n        mimeType: null,\n        auth: null,\n        method: undefined,\n        responseType: \"\",\n        requestHeaders: {},\n        referrer: theThis._ownerDocument.URL,\n        uri: \"\",\n        timeout: 0,\n        body: undefined,\n        formData: false,\n        preflight: false,\n        requestManager: theThis._ownerDocument._requestManager,\n        strictSSL: window._resourceLoader._strictSSL,\n        proxy: window._resourceLoader._proxy,\n        cookieJar: theThis._ownerDocument._cookieJar,\n        encoding: theThis._ownerDocument._encoding,\n        origin: theThis._ownerDocument.origin,\n        userAgent: window.navigator.userAgent\n      };\n      theThis[xhrSymbols.properties] = {\n        beforeSend: false,\n        send: false,\n        timeoutStart: 0,\n        timeoutId: 0,\n        timeoutFn: null,\n        client: null,\n        responseHeaders: {},\n        filteredResponseHeaders: [],\n        responseBuffer: null,\n        responseCache: null,\n        responseTextCache: null,\n        responseXMLCache: null,\n        responseURL: \"\",\n        readyState: XMLHttpRequest.UNSENT,\n        status: 0,\n        statusText: \"\",\n        error: \"\",\n        uploadComplete: false,\n        uploadListener: false,\n        // Signifies that we're calling abort() from xhr-utils.js because of a window shutdown.\n        // In that case the termination reason is \"fatal\", not \"end-user abort\".\n        abortError: false,\n        cookieJar: theThis._ownerDocument._cookieJar,\n        bufferStepSize: 1 * 1024 * 1024,\n        // pre-allocate buffer increase step size. init value is 1MB\n        totalReceivedChunkSize: 0\n      };\n      return theThis;\n    }\n\n    get readyState() {\n      return this[xhrSymbols.properties].readyState;\n    }\n\n    get status() {\n      return this[xhrSymbols.properties].status;\n    }\n\n    get statusText() {\n      return this[xhrSymbols.properties].statusText;\n    }\n\n    get responseType() {\n      return this[xhrSymbols.flag].responseType;\n    }\n\n    set responseType(responseType) {\n      const flag = this[xhrSymbols.flag];\n\n      if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      if (this.readyState === XMLHttpRequest.OPENED && flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n\n      if (!XMLHttpRequestResponseType.has(responseType)) {\n        responseType = \"\";\n      }\n\n      flag.responseType = responseType;\n    }\n\n    get response() {\n      const properties = this[xhrSymbols.properties];\n\n      if (properties.responseCache) {\n        return properties.responseCache;\n      }\n\n      let res = \"\";\n      const responseBuffer = properties.responseBuffer ? properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) : null;\n\n      switch (this.responseType) {\n        case \"\":\n        case \"text\":\n          {\n            res = this.responseText;\n            break;\n          }\n\n        case \"arraybuffer\":\n          {\n            if (!responseBuffer) {\n              return null;\n            }\n\n            res = new Uint8Array(responseBuffer).buffer;\n            break;\n          }\n\n        case \"blob\":\n          {\n            if (!responseBuffer) {\n              return null;\n            }\n\n            const contentType = finalMIMEType(this);\n            res = Blob.create([[new Uint8Array(responseBuffer)], {\n              type: contentType || \"\"\n            }]);\n            break;\n          }\n\n        case \"document\":\n          {\n            res = this.responseXML;\n            break;\n          }\n\n        case \"json\":\n          {\n            if (this.readyState !== XMLHttpRequest.DONE || !responseBuffer) {\n              res = null;\n            }\n\n            try {\n              res = parseJSONFromBytes(responseBuffer);\n            } catch (e) {\n              res = null;\n            }\n\n            break;\n          }\n      }\n\n      properties.responseCache = res;\n      return res;\n    }\n\n    get responseText() {\n      const properties = this[xhrSymbols.properties];\n\n      if (this.responseType !== \"\" && this.responseType !== \"text\") {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      if (this.readyState !== XMLHttpRequest.LOADING && this.readyState !== XMLHttpRequest.DONE) {\n        return \"\";\n      }\n\n      if (properties.responseTextCache) {\n        return properties.responseTextCache;\n      }\n\n      const responseBuffer = properties.responseBuffer ? properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) : null;\n\n      if (!responseBuffer) {\n        return \"\";\n      }\n\n      const fallbackEncoding = finalCharset(this) || whatwgEncoding.getBOMEncoding(responseBuffer) || \"UTF-8\";\n      const res = whatwgEncoding.decode(responseBuffer, fallbackEncoding);\n      properties.responseTextCache = res;\n      return res;\n    }\n\n    get responseXML() {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n\n      if (this.responseType !== \"\" && this.responseType !== \"document\") {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      if (this.readyState !== XMLHttpRequest.DONE) {\n        return null;\n      }\n\n      if (properties.responseXMLCache) {\n        return properties.responseXMLCache;\n      }\n\n      const responseBuffer = properties.responseBuffer ? properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) : null;\n\n      if (!responseBuffer) {\n        return null;\n      }\n\n      const contentType = finalMIMEType(this);\n      let isHTML = false;\n      let isXML = false;\n      const parsed = MIMEType.parse(contentType);\n\n      if (parsed) {\n        isHTML = parsed.isHTML();\n        isXML = parsed.isXML();\n\n        if (!isXML && !isHTML) {\n          return null;\n        }\n      }\n\n      if (this.responseType === \"\" && isHTML) {\n        return null;\n      }\n\n      const encoding = finalCharset(this) || whatwgEncoding.getBOMEncoding(responseBuffer) || \"UTF-8\";\n      const resText = whatwgEncoding.decode(responseBuffer, encoding);\n\n      if (!resText) {\n        return null;\n      }\n\n      const res = Document.create([], {\n        options: {\n          url: flag.uri,\n          lastModified: new Date(getResponseHeader(this, \"last-modified\")),\n          parsingMode: isHTML ? \"html\" : \"xml\",\n          cookieJar: {\n            setCookieSync: () => undefined,\n            getCookieStringSync: () => \"\"\n          },\n          encoding,\n          parseOptions: this._ownerDocument._parseOptions\n        }\n      });\n      const resImpl = idlUtils.implForWrapper(res);\n\n      try {\n        parseIntoDocument(resText, resImpl);\n      } catch (e) {\n        properties.responseXMLCache = null;\n        return null;\n      }\n\n      res.close();\n      properties.responseXMLCache = res;\n      return res;\n    }\n\n    get responseURL() {\n      return this[xhrSymbols.properties].responseURL;\n    }\n\n    get timeout() {\n      return this[xhrSymbols.flag].timeout;\n    }\n\n    set timeout(val) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n\n      if (flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n\n      flag.timeout = val;\n      clearTimeout(properties.timeoutId);\n\n      if (val > 0 && properties.timeoutFn) {\n        properties.timeoutId = setTimeout(properties.timeoutFn, Math.max(0, val - (new Date().getTime() - properties.timeoutStart)));\n      } else {\n        properties.timeoutFn = null;\n        properties.timeoutStart = 0;\n      }\n    }\n\n    get withCredentials() {\n      return this[xhrSymbols.flag].withCredentials;\n    }\n\n    set withCredentials(val) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n\n      if (!(this.readyState === XMLHttpRequest.UNSENT || this.readyState === XMLHttpRequest.OPENED)) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      if (properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      flag.withCredentials = val;\n    }\n\n    abort() {\n      const properties = this[xhrSymbols.properties]; // Terminate the request\n\n      clearTimeout(properties.timeoutId);\n      properties.timeoutFn = null;\n      properties.timeoutStart = 0;\n      const {\n        client\n      } = properties;\n\n      if (client) {\n        client.abort();\n        properties.client = null;\n      }\n\n      if (properties.abortError) {\n        // Special case that ideally shouldn't be going through the public API at all.\n        // Run the https://xhr.spec.whatwg.org/#handle-errors \"fatal\" steps.\n        properties.readyState = XMLHttpRequest.DONE;\n        properties.send = false;\n        xhrUtils.setResponseToNetworkError(this);\n        return;\n      }\n\n      if (this.readyState === XMLHttpRequest.OPENED && properties.send || this.readyState === XMLHttpRequest.HEADERS_RECEIVED || this.readyState === XMLHttpRequest.LOADING) {\n        xhrUtils.requestErrorSteps(this, \"abort\");\n      }\n\n      if (this.readyState === XMLHttpRequest.DONE) {\n        properties.readyState = XMLHttpRequest.UNSENT;\n        xhrUtils.setResponseToNetworkError(this);\n      }\n    }\n\n    getAllResponseHeaders() {\n      const properties = this[xhrSymbols.properties];\n      const {\n        readyState\n      } = this;\n\n      if (readyState === XMLHttpRequest.UNSENT || readyState === XMLHttpRequest.OPENED) {\n        return \"\";\n      }\n\n      return Object.keys(properties.responseHeaders).filter(key => properties.filteredResponseHeaders.indexOf(key) === -1).map(key => [conversions.ByteString(key).toLowerCase(), properties.responseHeaders[key]].join(\": \")).join(\"\\r\\n\");\n    }\n\n    getResponseHeader(header) {\n      const properties = this[xhrSymbols.properties];\n      const {\n        readyState\n      } = this;\n\n      if (readyState === XMLHttpRequest.UNSENT || readyState === XMLHttpRequest.OPENED) {\n        return null;\n      }\n\n      const lcHeader = conversions.ByteString(header).toLowerCase();\n\n      if (properties.filteredResponseHeaders.find(filtered => lcHeader === filtered.toLowerCase())) {\n        return null;\n      }\n\n      return getResponseHeader(this, lcHeader);\n    }\n\n    open(method, uri, asynchronous, user, password) {\n      if (!this._ownerDocument) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      const argumentCount = arguments.length;\n\n      if (argumentCount < 2) {\n        throw new TypeError(\"Not enough arguments (expected at least 2)\");\n      }\n\n      method = conversions.ByteString(method);\n      uri = conversions.USVString(uri);\n\n      if (user) {\n        user = conversions.USVString(user);\n      }\n\n      if (password) {\n        password = conversions.USVString(password);\n      }\n\n      if (!tokenRegexp.test(method)) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n\n      const upperCaseMethod = method.toUpperCase();\n\n      if (forbiddenRequestMethods.has(upperCaseMethod)) {\n        throw new DOMException(\"The operation is insecure.\", \"SecurityError\");\n      }\n\n      const {\n        client\n      } = properties;\n\n      if (client && typeof client.abort === \"function\") {\n        client.abort();\n      }\n\n      if (allowedRequestMethods.has(upperCaseMethod)) {\n        method = upperCaseMethod;\n      }\n\n      if (typeof asynchronous !== \"undefined\") {\n        flag.synchronous = !asynchronous;\n      } else {\n        flag.synchronous = false;\n      }\n\n      if (flag.responseType && flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n\n      if (flag.synchronous && flag.timeout) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n\n      flag.method = method;\n      let urlObj;\n\n      try {\n        urlObj = new URL(uri, documentBaseURLSerialized(this._ownerDocument));\n      } catch (e) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n\n      if (user || password && !urlObj.username) {\n        flag.auth = {\n          user,\n          pass: password\n        };\n        urlObj.username = \"\";\n        urlObj.password = \"\";\n      }\n\n      flag.uri = urlObj.href;\n      flag.requestHeaders = {};\n      flag.preflight = false;\n      properties.send = false;\n      properties.uploadListener = false;\n      properties.requestBuffer = null;\n      properties.requestCache = null;\n      properties.abortError = false;\n      properties.responseURL = \"\";\n      readyStateChange(this, XMLHttpRequest.OPENED);\n    }\n\n    overrideMimeType(mime) {\n      mime = String(mime);\n      const {\n        readyState\n      } = this;\n\n      if (readyState === XMLHttpRequest.LOADING || readyState === XMLHttpRequest.DONE) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      this[xhrSymbols.flag].overrideMIMEType = \"application/octet-stream\"; // Waiting for better spec: https://github.com/whatwg/xhr/issues/157\n\n      const parsed = MIMEType.parse(mime);\n\n      if (parsed) {\n        this[xhrSymbols.flag].overrideMIMEType = parsed.essence;\n        const charset = parsed.parameters.get(\"charset\");\n\n        if (charset) {\n          this[xhrSymbols.flag].overrideCharset = whatwgEncoding.labelToName(charset);\n        }\n      }\n    }\n\n    send(body) {\n      body = coerceBodyArg(body); // Not per spec, but per tests: https://github.com/whatwg/xhr/issues/65\n\n      if (!this._ownerDocument) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n\n      if (this.readyState !== XMLHttpRequest.OPENED || properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      properties.beforeSend = true;\n\n      try {\n        if (flag.method === \"GET\" || flag.method === \"HEAD\") {\n          body = null;\n        }\n\n        if (body !== null) {\n          let encoding = null;\n          let mimeType = null;\n\n          if (Document.isImpl(body)) {\n            encoding = \"UTF-8\";\n            mimeType = (body._parsingMode === \"html\" ? \"text/html\" : \"application/xml\") + \";charset=UTF-8\";\n            flag.body = fragmentSerialization(body, {\n              requireWellFormed: false\n            });\n          } else {\n            if (typeof body === \"string\") {\n              encoding = \"UTF-8\";\n            }\n\n            const {\n              buffer,\n              formData,\n              contentType\n            } = extractBody(body);\n            mimeType = contentType;\n            flag.body = buffer || formData;\n            flag.formData = Boolean(formData);\n          }\n\n          const existingContentType = xhrUtils.getRequestHeader(flag.requestHeaders, \"content-type\");\n\n          if (mimeType !== null && existingContentType === null) {\n            flag.requestHeaders[\"Content-Type\"] = mimeType;\n          } else if (existingContentType !== null && encoding !== null) {\n            // Waiting for better spec: https://github.com/whatwg/xhr/issues/188. This seems like a good guess at what\n            // the spec will be, in the meantime.\n            const parsed = MIMEType.parse(existingContentType);\n\n            if (parsed) {\n              const charset = parsed.parameters.get(\"charset\");\n\n              if (charset && !asciiCaseInsensitiveMatch(charset, encoding) && encoding !== null) {\n                parsed.parameters.set(\"charset\", encoding);\n              }\n\n              xhrUtils.updateRequestHeader(flag.requestHeaders, \"content-type\", parsed.toString());\n            }\n          }\n        }\n      } finally {\n        if (properties.beforeSend) {\n          properties.beforeSend = false;\n        } else {\n          throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n        }\n      }\n\n      if (Object.keys(idlUtils.implForWrapper(this.upload)._eventListeners).length > 0) {\n        properties.uploadListener = true;\n      } // request doesn't like zero-length bodies\n\n\n      if (flag.body && flag.body.byteLength === 0) {\n        flag.body = null;\n      }\n\n      if (flag.synchronous) {\n        const flagStr = JSON.stringify(flag, function (k, v) {\n          if (this === flag && k === \"requestManager\") {\n            return null;\n          }\n\n          if (this === flag && k === \"pool\" && v) {\n            return {\n              maxSockets: v.maxSockets\n            };\n          }\n\n          return v;\n        });\n        const res = spawnSync(process.execPath, [syncWorkerFile], {\n          input: flagStr\n        });\n\n        if (res.status !== 0) {\n          throw new Error(res.stderr.toString());\n        }\n\n        if (res.error) {\n          if (typeof res.error === \"string\") {\n            res.error = new Error(res.error);\n          }\n\n          throw res.error;\n        }\n\n        const response = JSON.parse(res.stdout.toString());\n\n        if (response.properties.responseBuffer && response.properties.responseBuffer.data) {\n          response.properties.responseBuffer = Buffer.from(response.properties.responseBuffer.data);\n        }\n\n        if (response.properties.cookieJar) {\n          response.properties.cookieJar = tough.CookieJar.deserializeSync(response.properties.cookieJar, this._ownerDocument._cookieJar.store);\n        }\n\n        response.properties.readyState = XMLHttpRequest.LOADING;\n        this[xhrSymbols.properties] = response.properties;\n\n        if (response.properties.error) {\n          xhrUtils.dispatchError(this);\n          throw new DOMException(response.properties.error, \"NetworkError\");\n        } else {\n          const {\n            responseBuffer\n          } = this[xhrSymbols.properties];\n          const contentLength = getResponseHeader(this, \"content-length\") || \"0\";\n          const bufferLength = parseInt(contentLength) || responseBuffer.length;\n          const progressObj = {\n            lengthComputable: false\n          };\n\n          if (bufferLength !== 0) {\n            progressObj.total = bufferLength;\n            progressObj.loaded = bufferLength;\n            progressObj.lengthComputable = true;\n          }\n\n          fireAnEvent(\"progress\", this, ProgressEvent, progressObj);\n          readyStateChange(this, XMLHttpRequest.DONE);\n          fireAnEvent(\"load\", this, ProgressEvent, progressObj);\n          fireAnEvent(\"loadend\", this, ProgressEvent, progressObj);\n        }\n      } else {\n        properties.send = true;\n        fireAnEvent(\"loadstart\", this, ProgressEvent);\n        const client = xhrUtils.createClient(this);\n        properties.client = client; // For new client, reset totalReceivedChunkSize and bufferStepSize\n\n        properties.totalReceivedChunkSize = 0;\n        properties.bufferStepSize = 1 * 1024 * 1024;\n        properties.origin = flag.origin;\n        client.on(\"error\", err => {\n          client.removeAllListeners();\n          properties.error = err;\n          xhrUtils.dispatchError(this);\n        });\n        client.on(\"response\", res => receiveResponse(this, res));\n        client.on(\"redirect\", () => {\n          const {\n            response\n          } = client;\n          const destUrlObj = new URL(response.request.headers.Referer);\n          const urlObj = new URL(response.request.uri.href);\n\n          if (destUrlObj.origin !== urlObj.origin && destUrlObj.origin !== flag.origin) {\n            properties.origin = \"null\";\n          }\n\n          response.request.headers.Origin = properties.origin;\n\n          if (flag.origin !== destUrlObj.origin && destUrlObj.protocol !== \"data:\") {\n            if (!xhrUtils.validCORSHeaders(this, response, flag, properties, flag.origin)) {\n              return;\n            }\n\n            if (urlObj.username || urlObj.password) {\n              properties.error = \"Userinfo forbidden in cors redirect\";\n              xhrUtils.dispatchError(this);\n            }\n          }\n        });\n\n        if (body !== null && body !== \"\") {\n          properties.uploadComplete = false;\n          setDispatchProgressEvents(this);\n        } else {\n          properties.uploadComplete = true;\n        }\n\n        if (this.timeout > 0) {\n          properties.timeoutStart = new Date().getTime();\n\n          properties.timeoutFn = () => {\n            client.abort();\n\n            if (!(this.readyState === XMLHttpRequest.UNSENT || this.readyState === XMLHttpRequest.OPENED && !properties.send || this.readyState === XMLHttpRequest.DONE)) {\n              properties.send = false;\n              let stateChanged = false;\n\n              if (!properties.uploadComplete) {\n                fireAnEvent(\"progress\", this.upload, ProgressEvent);\n                readyStateChange(this, XMLHttpRequest.DONE);\n                fireAnEvent(\"timeout\", this.upload, ProgressEvent);\n                fireAnEvent(\"loadend\", this.upload, ProgressEvent);\n                stateChanged = true;\n              }\n\n              fireAnEvent(\"progress\", this, ProgressEvent);\n\n              if (!stateChanged) {\n                readyStateChange(this, XMLHttpRequest.DONE);\n              }\n\n              fireAnEvent(\"timeout\", this, ProgressEvent);\n              fireAnEvent(\"loadend\", this, ProgressEvent);\n            }\n\n            properties.readyState = XMLHttpRequest.UNSENT;\n          };\n\n          properties.timeoutId = setTimeout(properties.timeoutFn, this.timeout);\n        }\n      }\n    }\n\n    setRequestHeader(header, value) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n\n      if (arguments.length !== 2) {\n        throw new TypeError(\"2 arguments required for setRequestHeader\");\n      }\n\n      header = conversions.ByteString(header);\n      value = conversions.ByteString(value);\n\n      if (this.readyState !== XMLHttpRequest.OPENED || properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      value = normalizeHeaderValue(value);\n\n      if (!tokenRegexp.test(header) || !fieldValueRegexp.test(value)) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n\n      const lcHeader = header.toLowerCase();\n\n      if (forbiddenRequestHeaders.has(lcHeader) || lcHeader.startsWith(\"sec-\") || lcHeader.startsWith(\"proxy-\")) {\n        return;\n      }\n\n      const keys = Object.keys(flag.requestHeaders);\n      let n = keys.length;\n\n      while (n--) {\n        const key = keys[n];\n\n        if (key.toLowerCase() === lcHeader) {\n          flag.requestHeaders[key] += \", \" + value;\n          return;\n        }\n      }\n\n      flag.requestHeaders[header] = value;\n    }\n\n    get _ownerDocument() {\n      return idlUtils.implForWrapper(window.document);\n    }\n\n  }\n\n  Object.defineProperty(XMLHttpRequest.prototype, Symbol.toStringTag, {\n    value: \"XMLHttpRequest\",\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n  setupForSimpleEventAccessors(XMLHttpRequest.prototype, [\"readystatechange\"]);\n  addConstants(XMLHttpRequest, {\n    UNSENT: 0,\n    OPENED: 1,\n    HEADERS_RECEIVED: 2,\n    LOADING: 3,\n    DONE: 4\n  });\n\n  function readyStateChange(xhr, readyState) {\n    const properties = xhr[xhrSymbols.properties];\n\n    if (properties.readyState === readyState) {\n      return;\n    }\n\n    properties.readyState = readyState;\n    fireAnEvent(\"readystatechange\", xhr);\n  }\n\n  function receiveResponse(xhr, response) {\n    const properties = xhr[xhrSymbols.properties];\n    const flag = xhr[xhrSymbols.flag];\n    const {\n      statusCode\n    } = response;\n    let byteOffset = 0;\n    const headers = {};\n    const filteredResponseHeaders = [];\n    const headerMap = {};\n    const {\n      rawHeaders\n    } = response;\n    const n = Number(rawHeaders.length);\n\n    for (let i = 0; i < n; i += 2) {\n      const k = rawHeaders[i];\n      const kl = k.toLowerCase();\n      const v = rawHeaders[i + 1];\n\n      if (uniqueResponseHeaders.has(kl)) {\n        if (headerMap[kl] !== undefined) {\n          delete headers[headerMap[kl]];\n        }\n\n        headers[k] = v;\n      } else if (headerMap[kl] !== undefined) {\n        headers[headerMap[kl]] += \", \" + v;\n      } else {\n        headers[k] = v;\n      }\n\n      headerMap[kl] = k;\n    }\n\n    const destUrlObj = new URL(response.request.uri.href);\n\n    if (properties.origin !== destUrlObj.origin && destUrlObj.protocol !== \"data:\") {\n      if (!xhrUtils.validCORSHeaders(xhr, response, flag, properties, properties.origin)) {\n        return;\n      }\n\n      const acehStr = response.headers[\"access-control-expose-headers\"];\n      const aceh = new Set(acehStr ? acehStr.trim().toLowerCase().split(xhrUtils.headerListSeparatorRegexp) : []);\n\n      for (const header in headers) {\n        const lcHeader = header.toLowerCase();\n\n        if (!corsSafeResponseHeaders.has(lcHeader) && !aceh.has(lcHeader)) {\n          filteredResponseHeaders.push(header);\n        }\n      }\n    }\n\n    for (const header in headers) {\n      const lcHeader = header.toLowerCase();\n\n      if (forbiddenResponseHeaders.has(lcHeader)) {\n        filteredResponseHeaders.push(header);\n      }\n    }\n\n    properties.responseURL = destUrlObj.href;\n    properties.status = statusCode;\n    properties.statusText = response.statusMessage || HTTP_STATUS_CODES[statusCode] || \"\";\n    properties.responseHeaders = headers;\n    properties.filteredResponseHeaders = filteredResponseHeaders;\n    const contentLength = getResponseHeader(xhr, \"content-length\") || \"0\";\n    const bufferLength = parseInt(contentLength) || 0;\n    const progressObj = {\n      lengthComputable: false\n    };\n    let lastProgressReported;\n\n    if (bufferLength !== 0) {\n      progressObj.total = bufferLength;\n      progressObj.loaded = 0;\n      progressObj.lengthComputable = true;\n    } // pre-allocate buffer.\n\n\n    properties.responseBuffer = Buffer.alloc(properties.bufferStepSize);\n    properties.responseCache = null;\n    properties.responseTextCache = null;\n    properties.responseXMLCache = null;\n    readyStateChange(xhr, XMLHttpRequest.HEADERS_RECEIVED);\n\n    if (!properties.client) {\n      // The request was aborted in reaction to the readystatechange event.\n      return;\n    } // Can't use the client since the client gets the post-ungzipping bytes (which can be greater than the\n    // Content-Length).\n\n\n    response.on(\"data\", chunk => {\n      byteOffset += chunk.length;\n      progressObj.loaded = byteOffset;\n    });\n    properties.client.on(\"data\", chunk => {\n      properties.totalReceivedChunkSize += chunk.length;\n\n      if (properties.totalReceivedChunkSize >= properties.bufferStepSize) {\n        properties.bufferStepSize *= 2;\n\n        while (properties.totalReceivedChunkSize >= properties.bufferStepSize) {\n          properties.bufferStepSize *= 2;\n        }\n\n        const tmpBuf = Buffer.alloc(properties.bufferStepSize);\n        properties.responseBuffer.copy(tmpBuf, 0, 0, properties.responseBuffer.length);\n        properties.responseBuffer = tmpBuf;\n      }\n\n      chunk.copy(properties.responseBuffer, properties.totalReceivedChunkSize - chunk.length, 0, chunk.length);\n      properties.responseCache = null;\n      properties.responseTextCache = null;\n      properties.responseXMLCache = null;\n\n      if (properties.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n        properties.readyState = XMLHttpRequest.LOADING;\n      }\n\n      fireAnEvent(\"readystatechange\", xhr);\n\n      if (progressObj.total !== progressObj.loaded || properties.totalReceivedChunkSize === byteOffset) {\n        if (lastProgressReported !== progressObj.loaded) {\n          // This is a necessary check in the gzip case where we can be getting new data from the client, as it\n          // un-gzips, but no new data has been gotten from the response, so we should not fire a progress event.\n          lastProgressReported = progressObj.loaded;\n          fireAnEvent(\"progress\", xhr, ProgressEvent, progressObj);\n        }\n      }\n    });\n    properties.client.on(\"end\", () => {\n      clearTimeout(properties.timeoutId);\n      properties.timeoutFn = null;\n      properties.timeoutStart = 0;\n      properties.client = null;\n      fireAnEvent(\"progress\", xhr, ProgressEvent, progressObj);\n      readyStateChange(xhr, XMLHttpRequest.DONE);\n      fireAnEvent(\"load\", xhr, ProgressEvent, progressObj);\n      fireAnEvent(\"loadend\", xhr, ProgressEvent, progressObj);\n    });\n  }\n\n  function setDispatchProgressEvents(xhr) {\n    const properties = xhr[xhrSymbols.properties];\n    const {\n      client\n    } = properties;\n    const {\n      upload\n    } = xhr;\n    let total = 0;\n    let lengthComputable = false;\n    const length = client.headers && parseInt(xhrUtils.getRequestHeader(client.headers, \"content-length\"));\n\n    if (length) {\n      total = length;\n      lengthComputable = true;\n    }\n\n    const initProgress = {\n      lengthComputable,\n      total,\n      loaded: 0\n    };\n\n    if (properties.uploadListener) {\n      fireAnEvent(\"loadstart\", upload, ProgressEvent, initProgress);\n    }\n\n    client.on(\"request\", req => {\n      req.on(\"response\", () => {\n        properties.uploadComplete = true;\n\n        if (!properties.uploadListener) {\n          return;\n        }\n\n        const progress = {\n          lengthComputable,\n          total,\n          loaded: total\n        };\n        fireAnEvent(\"progress\", upload, ProgressEvent, progress);\n        fireAnEvent(\"load\", upload, ProgressEvent, progress);\n        fireAnEvent(\"loadend\", upload, ProgressEvent, progress);\n      });\n    });\n  }\n\n  return XMLHttpRequest;\n};\n\nfunction finalMIMEType(xhr) {\n  const flag = xhr[xhrSymbols.flag];\n  return flag.overrideMIMEType || getResponseHeader(xhr, \"content-type\");\n}\n\nfunction finalCharset(xhr) {\n  const flag = xhr[xhrSymbols.flag];\n\n  if (flag.overrideCharset) {\n    return flag.overrideCharset;\n  }\n\n  const parsedContentType = MIMEType.parse(getResponseHeader(xhr, \"content-type\"));\n\n  if (parsedContentType) {\n    return whatwgEncoding.labelToName(parsedContentType.parameters.get(\"charset\"));\n  }\n\n  return null;\n}\n\nfunction getResponseHeader(xhr, lcHeader) {\n  const properties = xhr[xhrSymbols.properties];\n  const keys = Object.keys(properties.responseHeaders);\n  let n = keys.length;\n\n  while (n--) {\n    const key = keys[n];\n\n    if (key.toLowerCase() === lcHeader) {\n      return properties.responseHeaders[key];\n    }\n  }\n\n  return null;\n}\n\nfunction normalizeHeaderValue(value) {\n  return value.replace(/^[\\x09\\x0A\\x0D\\x20]+/, \"\").replace(/[\\x09\\x0A\\x0D\\x20]+$/, \"\");\n}\n\nfunction coerceBodyArg(body) {\n  // Implements the IDL conversion for `optional (Document or BodyInit)? body = null`\n  if (body === undefined || body === null) {\n    return null;\n  }\n\n  if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {\n    return body;\n  }\n\n  const impl = idlUtils.implForWrapper(body);\n\n  if (impl) {\n    // TODO: allow URLSearchParams or ReadableStream\n    if (Blob.isImpl(impl) || FormData.isImpl(impl) || Document.isImpl(impl)) {\n      return impl;\n    }\n  }\n\n  return conversions.USVString(body);\n}\n\nfunction extractBody(bodyInit) {\n  // https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n  // except we represent the body as a Node.js Buffer instead,\n  // or a special case for FormData since we want request to handle that. Probably it would be\n  // cleaner (and allow a future without request) if we did the form encoding ourself.\n  if (Blob.isImpl(bodyInit)) {\n    return {\n      buffer: bodyInit._buffer,\n      contentType: bodyInit.type === \"\" ? null : bodyInit.type\n    };\n  } else if (bodyInit instanceof ArrayBuffer) {\n    return {\n      buffer: Buffer.from(bodyInit),\n      contentType: null\n    };\n  } else if (ArrayBuffer.isView(bodyInit)) {\n    return {\n      buffer: Buffer.from(bodyInit.buffer, bodyInit.byteOffset, bodyInit.byteLength),\n      contentType: null\n    };\n  } else if (FormData.isImpl(bodyInit)) {\n    const formData = [];\n\n    for (const entry of bodyInit._entries) {\n      let val;\n\n      if (Blob.isImpl(entry.value)) {\n        const blob = entry.value;\n        val = {\n          name: entry.name,\n          value: blob._buffer,\n          options: {\n            filename: blob.name,\n            contentType: blob.type,\n            knownLength: blob.size\n          }\n        };\n      } else {\n        val = entry;\n      }\n\n      formData.push(val);\n    }\n\n    return {\n      formData\n    };\n  } // Must be a string\n\n\n  return {\n    buffer: Buffer.from(bodyInit, \"utf-8\"),\n    contentType: \"text/plain;charset=UTF-8\"\n  };\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-environment-jsdom-fourteen/node_modules/jsdom/lib/jsdom/living/xmlhttprequest.js"],"names":["HTTP_STATUS_CODES","require","STATUS_CODES","spawnSync","URL","whatwgEncoding","tough","MIMEType","conversions","xhrUtils","DOMException","xhrSymbols","addConstants","documentBaseURLSerialized","asciiCaseInsensitiveMatch","idlUtils","Document","Blob","FormData","XMLHttpRequestEventTarget","XMLHttpRequestUpload","ProgressEvent","parseIntoDocument","fragmentSerialization","setupForSimpleEventAccessors","parseJSONFromBytes","fireAnEvent","syncWorkerFile","resolve","tokenRegexp","fieldValueRegexp","forbiddenRequestHeaders","Set","forbiddenResponseHeaders","uniqueResponseHeaders","corsSafeResponseHeaders","allowedRequestMethods","forbiddenRequestMethods","XMLHttpRequestResponseType","module","exports","createXMLHttpRequest","window","XMLHttpRequest","interface","constructor","theThis","Object","create","new","target","prototype","setup","upload","_ownerDocument","document","flag","synchronous","withCredentials","mimeType","auth","method","undefined","responseType","requestHeaders","referrer","uri","timeout","body","formData","preflight","requestManager","_requestManager","strictSSL","_resourceLoader","_strictSSL","proxy","_proxy","cookieJar","_cookieJar","encoding","_encoding","origin","userAgent","navigator","properties","beforeSend","send","timeoutStart","timeoutId","timeoutFn","client","responseHeaders","filteredResponseHeaders","responseBuffer","responseCache","responseTextCache","responseXMLCache","responseURL","readyState","UNSENT","status","statusText","error","uploadComplete","uploadListener","abortError","bufferStepSize","totalReceivedChunkSize","LOADING","DONE","OPENED","has","response","res","slice","responseText","Uint8Array","buffer","contentType","finalMIMEType","type","responseXML","e","fallbackEncoding","finalCharset","getBOMEncoding","decode","isHTML","isXML","parsed","parse","resText","options","url","lastModified","Date","getResponseHeader","parsingMode","setCookieSync","getCookieStringSync","parseOptions","_parseOptions","resImpl","implForWrapper","close","val","clearTimeout","setTimeout","Math","max","getTime","abort","setResponseToNetworkError","HEADERS_RECEIVED","requestErrorSteps","getAllResponseHeaders","keys","filter","key","indexOf","map","ByteString","toLowerCase","join","header","lcHeader","find","filtered","open","asynchronous","user","password","argumentCount","arguments","length","TypeError","USVString","test","upperCaseMethod","toUpperCase","urlObj","username","pass","href","requestBuffer","requestCache","readyStateChange","overrideMimeType","mime","String","overrideMIMEType","essence","charset","parameters","get","overrideCharset","labelToName","coerceBodyArg","isImpl","_parsingMode","requireWellFormed","extractBody","Boolean","existingContentType","getRequestHeader","set","updateRequestHeader","toString","_eventListeners","byteLength","flagStr","JSON","stringify","k","v","maxSockets","process","execPath","input","Error","stderr","stdout","data","Buffer","from","CookieJar","deserializeSync","store","dispatchError","contentLength","bufferLength","parseInt","progressObj","lengthComputable","total","loaded","createClient","on","err","removeAllListeners","receiveResponse","destUrlObj","request","headers","Referer","Origin","protocol","validCORSHeaders","setDispatchProgressEvents","stateChanged","setRequestHeader","value","normalizeHeaderValue","startsWith","n","defineProperty","Symbol","toStringTag","writable","enumerable","configurable","xhr","statusCode","byteOffset","headerMap","rawHeaders","Number","i","kl","acehStr","aceh","trim","split","headerListSeparatorRegexp","push","statusMessage","lastProgressReported","alloc","chunk","tmpBuf","copy","initProgress","req","progress","parsedContentType","replace","ArrayBuffer","isView","impl","bodyInit","_buffer","entry","_entries","blob","name","filename","knownLength","size"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst HTTP_STATUS_CODES = require(\"http\").STATUS_CODES;\nconst { spawnSync } = require(\"child_process\");\nconst { URL } = require(\"whatwg-url\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst tough = require(\"tough-cookie\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst conversions = require(\"webidl-conversions\");\n\nconst xhrUtils = require(\"./xhr-utils\");\nconst DOMException = require(\"domexception\");\nconst xhrSymbols = require(\"./xmlhttprequest-symbols\");\nconst { addConstants } = require(\"../utils\");\nconst { documentBaseURLSerialized } = require(\"./helpers/document-base-url\");\nconst { asciiCaseInsensitiveMatch } = require(\"./helpers/strings\");\nconst idlUtils = require(\"./generated/utils\");\nconst Document = require(\"./generated/Document\");\nconst Blob = require(\"./generated/Blob\");\nconst FormData = require(\"./generated/FormData\");\nconst XMLHttpRequestEventTarget = require(\"./generated/XMLHttpRequestEventTarget\");\nconst XMLHttpRequestUpload = require(\"./generated/XMLHttpRequestUpload\");\nconst ProgressEvent = require(\"./generated/ProgressEvent\");\nconst { parseIntoDocument } = require(\"../browser/parser\");\nconst { fragmentSerialization } = require(\"./domparsing/serialization\");\nconst { setupForSimpleEventAccessors } = require(\"./helpers/create-event-accessor\");\nconst { parseJSONFromBytes } = require(\"./helpers/json\");\nconst { fireAnEvent } = require(\"./helpers/events\");\n\nconst syncWorkerFile = require.resolve ? require.resolve(\"./xhr-sync-worker.js\") : null;\n\nconst tokenRegexp = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/;\nconst fieldValueRegexp = /^[ \\t]*(?:[\\x21-\\x7E\\x80-\\xFF](?:[ \\t][\\x21-\\x7E\\x80-\\xFF])?)*[ \\t]*$/;\n\nconst forbiddenRequestHeaders = new Set([\n  \"accept-charset\",\n  \"accept-encoding\",\n  \"access-control-request-headers\",\n  \"access-control-request-method\",\n  \"connection\",\n  \"content-length\",\n  \"cookie\",\n  \"cookie2\",\n  \"date\",\n  \"dnt\",\n  \"expect\",\n  \"host\",\n  \"keep-alive\",\n  \"origin\",\n  \"referer\",\n  \"te\",\n  \"trailer\",\n  \"transfer-encoding\",\n  \"upgrade\",\n  \"via\"\n]);\nconst forbiddenResponseHeaders = new Set([\n  \"set-cookie\",\n  \"set-cookie2\"\n]);\nconst uniqueResponseHeaders = new Set([\n  \"content-type\",\n  \"content-length\",\n  \"user-agent\",\n  \"referer\",\n  \"host\",\n  \"authorization\",\n  \"proxy-authorization\",\n  \"if-modified-since\",\n  \"if-unmodified-since\",\n  \"from\",\n  \"location\",\n  \"max-forwards\"\n]);\nconst corsSafeResponseHeaders = new Set([\n  \"cache-control\",\n  \"content-language\",\n  \"content-type\",\n  \"expires\",\n  \"last-modified\",\n  \"pragma\"\n]);\n\n\nconst allowedRequestMethods = new Set([\"OPTIONS\", \"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\"]);\nconst forbiddenRequestMethods = new Set([\"TRACK\", \"TRACE\", \"CONNECT\"]);\n\nconst XMLHttpRequestResponseType = new Set([\n  \"\",\n  \"arraybuffer\",\n  \"blob\",\n  \"document\",\n  \"json\",\n  \"text\"\n]);\n\nmodule.exports = function createXMLHttpRequest(window) {\n  class XMLHttpRequest extends XMLHttpRequestEventTarget.interface {\n    constructor() { // eslint-disable-line constructor-super\n      const theThis = Object.create(new.target.prototype);\n      XMLHttpRequestEventTarget.setup(theThis);\n      theThis.upload = XMLHttpRequestUpload.create();\n      theThis.upload._ownerDocument = window.document;\n\n      theThis[xhrSymbols.flag] = {\n        synchronous: false,\n        withCredentials: false,\n        mimeType: null,\n        auth: null,\n        method: undefined,\n        responseType: \"\",\n        requestHeaders: {},\n        referrer: theThis._ownerDocument.URL,\n        uri: \"\",\n        timeout: 0,\n        body: undefined,\n        formData: false,\n        preflight: false,\n        requestManager: theThis._ownerDocument._requestManager,\n        strictSSL: window._resourceLoader._strictSSL,\n        proxy: window._resourceLoader._proxy,\n        cookieJar: theThis._ownerDocument._cookieJar,\n        encoding: theThis._ownerDocument._encoding,\n        origin: theThis._ownerDocument.origin,\n        userAgent: window.navigator.userAgent\n      };\n\n      theThis[xhrSymbols.properties] = {\n        beforeSend: false,\n        send: false,\n        timeoutStart: 0,\n        timeoutId: 0,\n        timeoutFn: null,\n        client: null,\n        responseHeaders: {},\n        filteredResponseHeaders: [],\n        responseBuffer: null,\n        responseCache: null,\n        responseTextCache: null,\n        responseXMLCache: null,\n        responseURL: \"\",\n        readyState: XMLHttpRequest.UNSENT,\n        status: 0,\n        statusText: \"\",\n        error: \"\",\n        uploadComplete: false,\n        uploadListener: false,\n\n        // Signifies that we're calling abort() from xhr-utils.js because of a window shutdown.\n        // In that case the termination reason is \"fatal\", not \"end-user abort\".\n        abortError: false,\n\n        cookieJar: theThis._ownerDocument._cookieJar,\n        bufferStepSize: 1 * 1024 * 1024, // pre-allocate buffer increase step size. init value is 1MB\n        totalReceivedChunkSize: 0\n      };\n\n      return theThis;\n    }\n\n    get readyState() {\n      return this[xhrSymbols.properties].readyState;\n    }\n    get status() {\n      return this[xhrSymbols.properties].status;\n    }\n    get statusText() {\n      return this[xhrSymbols.properties].statusText;\n    }\n    get responseType() {\n      return this[xhrSymbols.flag].responseType;\n    }\n    set responseType(responseType) {\n      const flag = this[xhrSymbols.flag];\n      if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      if (this.readyState === XMLHttpRequest.OPENED && flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n      if (!XMLHttpRequestResponseType.has(responseType)) {\n        responseType = \"\";\n      }\n      flag.responseType = responseType;\n    }\n    get response() {\n      const properties = this[xhrSymbols.properties];\n      if (properties.responseCache) {\n        return properties.responseCache;\n      }\n      let res = \"\";\n\n      const responseBuffer = properties.responseBuffer ?\n                             properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) :\n                             null;\n\n      switch (this.responseType) {\n        case \"\":\n        case \"text\": {\n          res = this.responseText;\n          break;\n        }\n        case \"arraybuffer\": {\n          if (!responseBuffer) {\n            return null;\n          }\n          res = (new Uint8Array(responseBuffer)).buffer;\n          break;\n        }\n        case \"blob\": {\n          if (!responseBuffer) {\n            return null;\n          }\n          const contentType = finalMIMEType(this);\n          res = Blob.create([\n            [new Uint8Array(responseBuffer)],\n            { type: contentType || \"\" }\n          ]);\n          break;\n        }\n        case \"document\": {\n          res = this.responseXML;\n          break;\n        }\n        case \"json\": {\n          if (this.readyState !== XMLHttpRequest.DONE || !responseBuffer) {\n            res = null;\n          }\n\n          try {\n            res = parseJSONFromBytes(responseBuffer);\n          } catch (e) {\n            res = null;\n          }\n          break;\n        }\n      }\n      properties.responseCache = res;\n      return res;\n    }\n    get responseText() {\n      const properties = this[xhrSymbols.properties];\n      if (this.responseType !== \"\" && this.responseType !== \"text\") {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      if (this.readyState !== XMLHttpRequest.LOADING && this.readyState !== XMLHttpRequest.DONE) {\n        return \"\";\n      }\n      if (properties.responseTextCache) {\n        return properties.responseTextCache;\n      }\n      const responseBuffer = properties.responseBuffer ?\n                             properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) :\n                             null;\n\n      if (!responseBuffer) {\n        return \"\";\n      }\n\n      const fallbackEncoding = finalCharset(this) || whatwgEncoding.getBOMEncoding(responseBuffer) || \"UTF-8\";\n      const res = whatwgEncoding.decode(responseBuffer, fallbackEncoding);\n\n      properties.responseTextCache = res;\n      return res;\n    }\n    get responseXML() {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      if (this.responseType !== \"\" && this.responseType !== \"document\") {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      if (this.readyState !== XMLHttpRequest.DONE) {\n        return null;\n      }\n      if (properties.responseXMLCache) {\n        return properties.responseXMLCache;\n      }\n      const responseBuffer = properties.responseBuffer ?\n                             properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) :\n                             null;\n\n      if (!responseBuffer) {\n        return null;\n      }\n\n      const contentType = finalMIMEType(this);\n      let isHTML = false;\n      let isXML = false;\n      const parsed = MIMEType.parse(contentType);\n      if (parsed) {\n        isHTML = parsed.isHTML();\n        isXML = parsed.isXML();\n        if (!isXML && !isHTML) {\n          return null;\n        }\n      }\n\n      if (this.responseType === \"\" && isHTML) {\n        return null;\n      }\n\n      const encoding = finalCharset(this) || whatwgEncoding.getBOMEncoding(responseBuffer) || \"UTF-8\";\n      const resText = whatwgEncoding.decode(responseBuffer, encoding);\n\n      if (!resText) {\n        return null;\n      }\n      const res = Document.create([], { options: {\n        url: flag.uri,\n        lastModified: new Date(getResponseHeader(this, \"last-modified\")),\n        parsingMode: isHTML ? \"html\" : \"xml\",\n        cookieJar: { setCookieSync: () => undefined, getCookieStringSync: () => \"\" },\n        encoding,\n        parseOptions: this._ownerDocument._parseOptions\n      } });\n      const resImpl = idlUtils.implForWrapper(res);\n      try {\n        parseIntoDocument(resText, resImpl);\n      } catch (e) {\n        properties.responseXMLCache = null;\n        return null;\n      }\n      res.close();\n      properties.responseXMLCache = res;\n      return res;\n    }\n\n    get responseURL() {\n      return this[xhrSymbols.properties].responseURL;\n    }\n\n    get timeout() {\n      return this[xhrSymbols.flag].timeout;\n    }\n    set timeout(val) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      if (flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n      flag.timeout = val;\n      clearTimeout(properties.timeoutId);\n      if (val > 0 && properties.timeoutFn) {\n        properties.timeoutId = setTimeout(\n          properties.timeoutFn,\n          Math.max(0, val - ((new Date()).getTime() - properties.timeoutStart))\n        );\n      } else {\n        properties.timeoutFn = null;\n        properties.timeoutStart = 0;\n      }\n    }\n    get withCredentials() {\n      return this[xhrSymbols.flag].withCredentials;\n    }\n    set withCredentials(val) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      if (!(this.readyState === XMLHttpRequest.UNSENT || this.readyState === XMLHttpRequest.OPENED)) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      if (properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      flag.withCredentials = val;\n    }\n\n    abort() {\n      const properties = this[xhrSymbols.properties];\n\n      // Terminate the request\n      clearTimeout(properties.timeoutId);\n      properties.timeoutFn = null;\n      properties.timeoutStart = 0;\n\n      const { client } = properties;\n      if (client) {\n        client.abort();\n        properties.client = null;\n      }\n\n      if (properties.abortError) {\n        // Special case that ideally shouldn't be going through the public API at all.\n        // Run the https://xhr.spec.whatwg.org/#handle-errors \"fatal\" steps.\n        properties.readyState = XMLHttpRequest.DONE;\n        properties.send = false;\n        xhrUtils.setResponseToNetworkError(this);\n        return;\n      }\n\n      if ((this.readyState === XMLHttpRequest.OPENED && properties.send) ||\n          this.readyState === XMLHttpRequest.HEADERS_RECEIVED ||\n          this.readyState === XMLHttpRequest.LOADING) {\n        xhrUtils.requestErrorSteps(this, \"abort\");\n      }\n\n      if (this.readyState === XMLHttpRequest.DONE) {\n        properties.readyState = XMLHttpRequest.UNSENT;\n\n        xhrUtils.setResponseToNetworkError(this);\n      }\n    }\n    getAllResponseHeaders() {\n      const properties = this[xhrSymbols.properties];\n      const { readyState } = this;\n      if (readyState === XMLHttpRequest.UNSENT || readyState === XMLHttpRequest.OPENED) {\n        return \"\";\n      }\n      return Object.keys(properties.responseHeaders)\n        .filter(key => properties.filteredResponseHeaders.indexOf(key) === -1)\n        .map(key => [conversions.ByteString(key).toLowerCase(), properties.responseHeaders[key]].join(\": \"))\n        .join(\"\\r\\n\");\n    }\n\n    getResponseHeader(header) {\n      const properties = this[xhrSymbols.properties];\n      const { readyState } = this;\n      if (readyState === XMLHttpRequest.UNSENT || readyState === XMLHttpRequest.OPENED) {\n        return null;\n      }\n      const lcHeader = conversions.ByteString(header).toLowerCase();\n      if (properties.filteredResponseHeaders.find(filtered => lcHeader === filtered.toLowerCase())) {\n        return null;\n      }\n      return getResponseHeader(this, lcHeader);\n    }\n\n    open(method, uri, asynchronous, user, password) {\n      if (!this._ownerDocument) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      const argumentCount = arguments.length;\n      if (argumentCount < 2) {\n        throw new TypeError(\"Not enough arguments (expected at least 2)\");\n      }\n\n      method = conversions.ByteString(method);\n      uri = conversions.USVString(uri);\n      if (user) {\n        user = conversions.USVString(user);\n      }\n      if (password) {\n        password = conversions.USVString(password);\n      }\n\n      if (!tokenRegexp.test(method)) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n      const upperCaseMethod = method.toUpperCase();\n      if (forbiddenRequestMethods.has(upperCaseMethod)) {\n        throw new DOMException(\"The operation is insecure.\", \"SecurityError\");\n      }\n\n      const { client } = properties;\n      if (client && typeof client.abort === \"function\") {\n        client.abort();\n      }\n\n      if (allowedRequestMethods.has(upperCaseMethod)) {\n        method = upperCaseMethod;\n      }\n      if (typeof asynchronous !== \"undefined\") {\n        flag.synchronous = !asynchronous;\n      } else {\n        flag.synchronous = false;\n      }\n      if (flag.responseType && flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n      if (flag.synchronous && flag.timeout) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n      flag.method = method;\n\n      let urlObj;\n      try {\n        urlObj = new URL(uri, documentBaseURLSerialized(this._ownerDocument));\n      } catch (e) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n\n      if (user || (password && !urlObj.username)) {\n        flag.auth = {\n          user,\n          pass: password\n        };\n        urlObj.username = \"\";\n        urlObj.password = \"\";\n      }\n\n      flag.uri = urlObj.href;\n      flag.requestHeaders = {};\n      flag.preflight = false;\n\n      properties.send = false;\n      properties.uploadListener = false;\n      properties.requestBuffer = null;\n      properties.requestCache = null;\n      properties.abortError = false;\n      properties.responseURL = \"\";\n      readyStateChange(this, XMLHttpRequest.OPENED);\n    }\n\n    overrideMimeType(mime) {\n      mime = String(mime);\n\n      const { readyState } = this;\n      if (readyState === XMLHttpRequest.LOADING || readyState === XMLHttpRequest.DONE) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      this[xhrSymbols.flag].overrideMIMEType = \"application/octet-stream\";\n\n      // Waiting for better spec: https://github.com/whatwg/xhr/issues/157\n      const parsed = MIMEType.parse(mime);\n      if (parsed) {\n        this[xhrSymbols.flag].overrideMIMEType = parsed.essence;\n\n        const charset = parsed.parameters.get(\"charset\");\n        if (charset) {\n          this[xhrSymbols.flag].overrideCharset = whatwgEncoding.labelToName(charset);\n        }\n      }\n    }\n\n    send(body) {\n      body = coerceBodyArg(body);\n\n      // Not per spec, but per tests: https://github.com/whatwg/xhr/issues/65\n      if (!this._ownerDocument) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n\n      if (this.readyState !== XMLHttpRequest.OPENED || properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      properties.beforeSend = true;\n\n      try {\n        if (flag.method === \"GET\" || flag.method === \"HEAD\") {\n          body = null;\n        }\n\n        if (body !== null) {\n          let encoding = null;\n          let mimeType = null;\n\n          if (Document.isImpl(body)) {\n            encoding = \"UTF-8\";\n            mimeType = (body._parsingMode === \"html\" ? \"text/html\" : \"application/xml\") + \";charset=UTF-8\";\n            flag.body = fragmentSerialization(body, { requireWellFormed: false });\n          } else {\n            if (typeof body === \"string\") {\n              encoding = \"UTF-8\";\n            }\n            const { buffer, formData, contentType } = extractBody(body);\n            mimeType = contentType;\n            flag.body = buffer || formData;\n            flag.formData = Boolean(formData);\n          }\n\n          const existingContentType = xhrUtils.getRequestHeader(flag.requestHeaders, \"content-type\");\n          if (mimeType !== null && existingContentType === null) {\n            flag.requestHeaders[\"Content-Type\"] = mimeType;\n          } else if (existingContentType !== null && encoding !== null) {\n            // Waiting for better spec: https://github.com/whatwg/xhr/issues/188. This seems like a good guess at what\n            // the spec will be, in the meantime.\n            const parsed = MIMEType.parse(existingContentType);\n            if (parsed) {\n              const charset = parsed.parameters.get(\"charset\");\n              if (charset && !asciiCaseInsensitiveMatch(charset, encoding) && encoding !== null) {\n                parsed.parameters.set(\"charset\", encoding);\n              }\n              xhrUtils.updateRequestHeader(flag.requestHeaders, \"content-type\", parsed.toString());\n            }\n          }\n        }\n      } finally {\n        if (properties.beforeSend) {\n          properties.beforeSend = false;\n        } else {\n          throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n        }\n      }\n\n      if (Object.keys(idlUtils.implForWrapper(this.upload)._eventListeners).length > 0) {\n        properties.uploadListener = true;\n      }\n\n      // request doesn't like zero-length bodies\n      if (flag.body && flag.body.byteLength === 0) {\n        flag.body = null;\n      }\n\n      if (flag.synchronous) {\n        const flagStr = JSON.stringify(flag, function (k, v) {\n          if (this === flag && k === \"requestManager\") {\n            return null;\n          }\n          if (this === flag && k === \"pool\" && v) {\n            return { maxSockets: v.maxSockets };\n          }\n          return v;\n        });\n        const res = spawnSync(\n          process.execPath,\n          [syncWorkerFile],\n          { input: flagStr }\n        );\n        if (res.status !== 0) {\n          throw new Error(res.stderr.toString());\n        }\n        if (res.error) {\n          if (typeof res.error === \"string\") {\n            res.error = new Error(res.error);\n          }\n          throw res.error;\n        }\n\n        const response = JSON.parse(res.stdout.toString());\n        if (response.properties.responseBuffer && response.properties.responseBuffer.data) {\n          response.properties.responseBuffer = Buffer.from(response.properties.responseBuffer.data);\n        }\n        if (response.properties.cookieJar) {\n          response.properties.cookieJar = tough.CookieJar.deserializeSync(\n            response.properties.cookieJar,\n            this._ownerDocument._cookieJar.store\n          );\n        }\n\n        response.properties.readyState = XMLHttpRequest.LOADING;\n        this[xhrSymbols.properties] = response.properties;\n\n        if (response.properties.error) {\n          xhrUtils.dispatchError(this);\n          throw new DOMException(response.properties.error, \"NetworkError\");\n        } else {\n          const { responseBuffer } = this[xhrSymbols.properties];\n          const contentLength = getResponseHeader(this, \"content-length\") || \"0\";\n          const bufferLength = parseInt(contentLength) || responseBuffer.length;\n          const progressObj = { lengthComputable: false };\n          if (bufferLength !== 0) {\n            progressObj.total = bufferLength;\n            progressObj.loaded = bufferLength;\n            progressObj.lengthComputable = true;\n          }\n          fireAnEvent(\"progress\", this, ProgressEvent, progressObj);\n          readyStateChange(this, XMLHttpRequest.DONE);\n          fireAnEvent(\"load\", this, ProgressEvent, progressObj);\n          fireAnEvent(\"loadend\", this, ProgressEvent, progressObj);\n        }\n      } else {\n        properties.send = true;\n\n        fireAnEvent(\"loadstart\", this, ProgressEvent);\n\n        const client = xhrUtils.createClient(this);\n\n        properties.client = client;\n        // For new client, reset totalReceivedChunkSize and bufferStepSize\n        properties.totalReceivedChunkSize = 0;\n        properties.bufferStepSize = 1 * 1024 * 1024;\n\n        properties.origin = flag.origin;\n\n        client.on(\"error\", err => {\n          client.removeAllListeners();\n          properties.error = err;\n          xhrUtils.dispatchError(this);\n        });\n\n        client.on(\"response\", res => receiveResponse(this, res));\n\n        client.on(\"redirect\", () => {\n          const { response } = client;\n          const destUrlObj = new URL(response.request.headers.Referer);\n\n          const urlObj = new URL(response.request.uri.href);\n\n          if (destUrlObj.origin !== urlObj.origin && destUrlObj.origin !== flag.origin) {\n            properties.origin = \"null\";\n          }\n\n          response.request.headers.Origin = properties.origin;\n\n          if (flag.origin !== destUrlObj.origin &&\n              destUrlObj.protocol !== \"data:\") {\n            if (!xhrUtils.validCORSHeaders(this, response, flag, properties, flag.origin)) {\n              return;\n            }\n            if (urlObj.username || urlObj.password) {\n              properties.error = \"Userinfo forbidden in cors redirect\";\n              xhrUtils.dispatchError(this);\n            }\n          }\n        });\n        if (body !== null && body !== \"\") {\n          properties.uploadComplete = false;\n          setDispatchProgressEvents(this);\n        } else {\n          properties.uploadComplete = true;\n        }\n        if (this.timeout > 0) {\n          properties.timeoutStart = (new Date()).getTime();\n          properties.timeoutFn = () => {\n            client.abort();\n            if (!(this.readyState === XMLHttpRequest.UNSENT ||\n                (this.readyState === XMLHttpRequest.OPENED && !properties.send) ||\n                this.readyState === XMLHttpRequest.DONE)) {\n              properties.send = false;\n              let stateChanged = false;\n              if (!properties.uploadComplete) {\n                fireAnEvent(\"progress\", this.upload, ProgressEvent);\n                readyStateChange(this, XMLHttpRequest.DONE);\n                fireAnEvent(\"timeout\", this.upload, ProgressEvent);\n                fireAnEvent(\"loadend\", this.upload, ProgressEvent);\n                stateChanged = true;\n              }\n              fireAnEvent(\"progress\", this, ProgressEvent);\n              if (!stateChanged) {\n                readyStateChange(this, XMLHttpRequest.DONE);\n              }\n              fireAnEvent(\"timeout\", this, ProgressEvent);\n              fireAnEvent(\"loadend\", this, ProgressEvent);\n            }\n            properties.readyState = XMLHttpRequest.UNSENT;\n          };\n          properties.timeoutId = setTimeout(properties.timeoutFn, this.timeout);\n        }\n      }\n    }\n\n    setRequestHeader(header, value) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n\n      if (arguments.length !== 2) {\n        throw new TypeError(\"2 arguments required for setRequestHeader\");\n      }\n      header = conversions.ByteString(header);\n      value = conversions.ByteString(value);\n\n      if (this.readyState !== XMLHttpRequest.OPENED || properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      value = normalizeHeaderValue(value);\n\n      if (!tokenRegexp.test(header) || !fieldValueRegexp.test(value)) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n\n      const lcHeader = header.toLowerCase();\n\n      if (forbiddenRequestHeaders.has(lcHeader) || lcHeader.startsWith(\"sec-\") || lcHeader.startsWith(\"proxy-\")) {\n        return;\n      }\n\n      const keys = Object.keys(flag.requestHeaders);\n      let n = keys.length;\n      while (n--) {\n        const key = keys[n];\n        if (key.toLowerCase() === lcHeader) {\n          flag.requestHeaders[key] += \", \" + value;\n          return;\n        }\n      }\n      flag.requestHeaders[header] = value;\n    }\n\n    get _ownerDocument() {\n      return idlUtils.implForWrapper(window.document);\n    }\n  }\n\n  Object.defineProperty(XMLHttpRequest.prototype, Symbol.toStringTag, {\n    value: \"XMLHttpRequest\",\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n\n  setupForSimpleEventAccessors(XMLHttpRequest.prototype, [\"readystatechange\"]);\n\n  addConstants(XMLHttpRequest, {\n    UNSENT: 0,\n    OPENED: 1,\n    HEADERS_RECEIVED: 2,\n    LOADING: 3,\n    DONE: 4\n  });\n\n  function readyStateChange(xhr, readyState) {\n    const properties = xhr[xhrSymbols.properties];\n    if (properties.readyState === readyState) {\n      return;\n    }\n\n    properties.readyState = readyState;\n\n    fireAnEvent(\"readystatechange\", xhr);\n  }\n\n  function receiveResponse(xhr, response) {\n    const properties = xhr[xhrSymbols.properties];\n    const flag = xhr[xhrSymbols.flag];\n\n    const { statusCode } = response;\n\n    let byteOffset = 0;\n\n    const headers = {};\n    const filteredResponseHeaders = [];\n    const headerMap = {};\n    const { rawHeaders } = response;\n    const n = Number(rawHeaders.length);\n    for (let i = 0; i < n; i += 2) {\n      const k = rawHeaders[i];\n      const kl = k.toLowerCase();\n      const v = rawHeaders[i + 1];\n      if (uniqueResponseHeaders.has(kl)) {\n        if (headerMap[kl] !== undefined) {\n          delete headers[headerMap[kl]];\n        }\n        headers[k] = v;\n      } else if (headerMap[kl] !== undefined) {\n        headers[headerMap[kl]] += \", \" + v;\n      } else {\n        headers[k] = v;\n      }\n      headerMap[kl] = k;\n    }\n\n    const destUrlObj = new URL(response.request.uri.href);\n    if (properties.origin !== destUrlObj.origin &&\n        destUrlObj.protocol !== \"data:\") {\n      if (!xhrUtils.validCORSHeaders(xhr, response, flag, properties, properties.origin)) {\n        return;\n      }\n      const acehStr = response.headers[\"access-control-expose-headers\"];\n      const aceh = new Set(acehStr ? acehStr.trim().toLowerCase().split(xhrUtils.headerListSeparatorRegexp) : []);\n      for (const header in headers) {\n        const lcHeader = header.toLowerCase();\n        if (!corsSafeResponseHeaders.has(lcHeader) && !aceh.has(lcHeader)) {\n          filteredResponseHeaders.push(header);\n        }\n      }\n    }\n\n    for (const header in headers) {\n      const lcHeader = header.toLowerCase();\n      if (forbiddenResponseHeaders.has(lcHeader)) {\n        filteredResponseHeaders.push(header);\n      }\n    }\n\n    properties.responseURL = destUrlObj.href;\n\n    properties.status = statusCode;\n    properties.statusText = response.statusMessage || HTTP_STATUS_CODES[statusCode] || \"\";\n\n    properties.responseHeaders = headers;\n    properties.filteredResponseHeaders = filteredResponseHeaders;\n\n    const contentLength = getResponseHeader(xhr, \"content-length\") || \"0\";\n    const bufferLength = parseInt(contentLength) || 0;\n    const progressObj = { lengthComputable: false };\n    let lastProgressReported;\n    if (bufferLength !== 0) {\n      progressObj.total = bufferLength;\n      progressObj.loaded = 0;\n      progressObj.lengthComputable = true;\n    }\n    // pre-allocate buffer.\n    properties.responseBuffer = Buffer.alloc(properties.bufferStepSize);\n    properties.responseCache = null;\n    properties.responseTextCache = null;\n    properties.responseXMLCache = null;\n    readyStateChange(xhr, XMLHttpRequest.HEADERS_RECEIVED);\n\n    if (!properties.client) {\n      // The request was aborted in reaction to the readystatechange event.\n      return;\n    }\n\n    // Can't use the client since the client gets the post-ungzipping bytes (which can be greater than the\n    // Content-Length).\n    response.on(\"data\", chunk => {\n      byteOffset += chunk.length;\n      progressObj.loaded = byteOffset;\n    });\n\n    properties.client.on(\"data\", chunk => {\n      properties.totalReceivedChunkSize += chunk.length;\n      if (properties.totalReceivedChunkSize >= properties.bufferStepSize) {\n        properties.bufferStepSize *= 2;\n        while (properties.totalReceivedChunkSize >= properties.bufferStepSize) {\n          properties.bufferStepSize *= 2;\n        }\n        const tmpBuf = Buffer.alloc(properties.bufferStepSize);\n        properties.responseBuffer.copy(tmpBuf, 0, 0, properties.responseBuffer.length);\n        properties.responseBuffer = tmpBuf;\n      }\n      chunk.copy(properties.responseBuffer, properties.totalReceivedChunkSize - chunk.length, 0, chunk.length);\n      properties.responseCache = null;\n      properties.responseTextCache = null;\n      properties.responseXMLCache = null;\n\n      if (properties.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n        properties.readyState = XMLHttpRequest.LOADING;\n      }\n      fireAnEvent(\"readystatechange\", xhr);\n\n      if (progressObj.total !== progressObj.loaded || properties.totalReceivedChunkSize === byteOffset) {\n        if (lastProgressReported !== progressObj.loaded) {\n          // This is a necessary check in the gzip case where we can be getting new data from the client, as it\n          // un-gzips, but no new data has been gotten from the response, so we should not fire a progress event.\n          lastProgressReported = progressObj.loaded;\n          fireAnEvent(\"progress\", xhr, ProgressEvent, progressObj);\n        }\n      }\n    });\n    properties.client.on(\"end\", () => {\n      clearTimeout(properties.timeoutId);\n      properties.timeoutFn = null;\n      properties.timeoutStart = 0;\n      properties.client = null;\n      fireAnEvent(\"progress\", xhr, ProgressEvent, progressObj);\n      readyStateChange(xhr, XMLHttpRequest.DONE);\n      fireAnEvent(\"load\", xhr, ProgressEvent, progressObj);\n      fireAnEvent(\"loadend\", xhr, ProgressEvent, progressObj);\n    });\n  }\n\n  function setDispatchProgressEvents(xhr) {\n    const properties = xhr[xhrSymbols.properties];\n    const { client } = properties;\n    const { upload } = xhr;\n\n    let total = 0;\n    let lengthComputable = false;\n    const length = client.headers && parseInt(xhrUtils.getRequestHeader(client.headers, \"content-length\"));\n    if (length) {\n      total = length;\n      lengthComputable = true;\n    }\n    const initProgress = {\n      lengthComputable,\n      total,\n      loaded: 0\n    };\n\n    if (properties.uploadListener) {\n      fireAnEvent(\"loadstart\", upload, ProgressEvent, initProgress);\n    }\n\n    client.on(\"request\", req => {\n      req.on(\"response\", () => {\n        properties.uploadComplete = true;\n\n        if (!properties.uploadListener) {\n          return;\n        }\n\n        const progress = {\n          lengthComputable,\n          total,\n          loaded: total\n        };\n        fireAnEvent(\"progress\", upload, ProgressEvent, progress);\n        fireAnEvent(\"load\", upload, ProgressEvent, progress);\n        fireAnEvent(\"loadend\", upload, ProgressEvent, progress);\n      });\n    });\n  }\n\n  return XMLHttpRequest;\n};\n\nfunction finalMIMEType(xhr) {\n  const flag = xhr[xhrSymbols.flag];\n  return flag.overrideMIMEType || getResponseHeader(xhr, \"content-type\");\n}\n\nfunction finalCharset(xhr) {\n  const flag = xhr[xhrSymbols.flag];\n  if (flag.overrideCharset) {\n    return flag.overrideCharset;\n  }\n  const parsedContentType = MIMEType.parse(getResponseHeader(xhr, \"content-type\"));\n  if (parsedContentType) {\n    return whatwgEncoding.labelToName(parsedContentType.parameters.get(\"charset\"));\n  }\n  return null;\n}\n\nfunction getResponseHeader(xhr, lcHeader) {\n  const properties = xhr[xhrSymbols.properties];\n  const keys = Object.keys(properties.responseHeaders);\n  let n = keys.length;\n  while (n--) {\n    const key = keys[n];\n    if (key.toLowerCase() === lcHeader) {\n      return properties.responseHeaders[key];\n    }\n  }\n  return null;\n}\n\nfunction normalizeHeaderValue(value) {\n  return value.replace(/^[\\x09\\x0A\\x0D\\x20]+/, \"\").replace(/[\\x09\\x0A\\x0D\\x20]+$/, \"\");\n}\n\nfunction coerceBodyArg(body) {\n  // Implements the IDL conversion for `optional (Document or BodyInit)? body = null`\n\n  if (body === undefined || body === null) {\n    return null;\n  }\n\n  if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {\n    return body;\n  }\n\n  const impl = idlUtils.implForWrapper(body);\n  if (impl) {\n    // TODO: allow URLSearchParams or ReadableStream\n    if (Blob.isImpl(impl) || FormData.isImpl(impl) || Document.isImpl(impl)) {\n      return impl;\n    }\n  }\n\n  return conversions.USVString(body);\n}\n\nfunction extractBody(bodyInit) {\n  // https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n  // except we represent the body as a Node.js Buffer instead,\n  // or a special case for FormData since we want request to handle that. Probably it would be\n  // cleaner (and allow a future without request) if we did the form encoding ourself.\n\n  if (Blob.isImpl(bodyInit)) {\n    return {\n      buffer: bodyInit._buffer,\n      contentType: bodyInit.type === \"\" ? null : bodyInit.type\n    };\n  } else if (bodyInit instanceof ArrayBuffer) {\n    return {\n      buffer: Buffer.from(bodyInit),\n      contentType: null\n    };\n  } else if (ArrayBuffer.isView(bodyInit)) {\n    return {\n      buffer: Buffer.from(bodyInit.buffer, bodyInit.byteOffset, bodyInit.byteLength),\n      contentType: null\n    };\n  } else if (FormData.isImpl(bodyInit)) {\n    const formData = [];\n    for (const entry of bodyInit._entries) {\n      let val;\n      if (Blob.isImpl(entry.value)) {\n        const blob = entry.value;\n        val = {\n          name: entry.name,\n          value: blob._buffer,\n          options: {\n            filename: blob.name,\n            contentType: blob.type,\n            knownLength: blob.size\n          }\n        };\n      } else {\n        val = entry;\n      }\n\n      formData.push(val);\n    }\n\n    return { formData };\n  }\n\n  // Must be a string\n  return {\n    buffer: Buffer.from(bodyInit, \"utf-8\"),\n    contentType: \"text/plain;charset=UTF-8\"\n  };\n}\n"]},"metadata":{},"sourceType":"script"}