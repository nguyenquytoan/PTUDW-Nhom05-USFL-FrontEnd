{"ast":null,"code":"!function () {\n  \"use strict\";\n\n  try {\n    self[\"workbox:sw:4.3.1\"] && _();\n  } catch (t) {}\n\n  const t = \"https://storage.googleapis.com/workbox-cdn/releases/4.3.1\",\n        e = {\n    backgroundSync: \"background-sync\",\n    broadcastUpdate: \"broadcast-update\",\n    cacheableResponse: \"cacheable-response\",\n    core: \"core\",\n    expiration: \"expiration\",\n    googleAnalytics: \"offline-ga\",\n    navigationPreload: \"navigation-preload\",\n    precaching: \"precaching\",\n    rangeRequests: \"range-requests\",\n    routing: \"routing\",\n    strategies: \"strategies\",\n    streams: \"streams\"\n  };\n  self.workbox = new class {\n    constructor() {\n      return this.v = {}, this.t = {\n        debug: \"localhost\" === self.location.hostname,\n        modulePathPrefix: null,\n        modulePathCb: null\n      }, this.s = this.t.debug ? \"dev\" : \"prod\", this.o = !1, new Proxy(this, {\n        get(t, s) {\n          if (t[s]) return t[s];\n          const o = e[s];\n          return o && t.loadModule(`workbox-${o}`), t[s];\n        }\n\n      });\n    }\n\n    setConfig(t = {}) {\n      if (this.o) throw new Error(\"Config must be set before accessing workbox.* modules\");\n      Object.assign(this.t, t), this.s = this.t.debug ? \"dev\" : \"prod\";\n    }\n\n    loadModule(t) {\n      const e = this.i(t);\n\n      try {\n        importScripts(e), this.o = !0;\n      } catch (s) {\n        throw console.error(`Unable to import module '${t}' from '${e}'.`), s;\n      }\n    }\n\n    i(e) {\n      if (this.t.modulePathCb) return this.t.modulePathCb(e, this.t.debug);\n      let s = [t];\n      const o = `${e}.${this.s}.js`,\n            r = this.t.modulePathPrefix;\n      return r && \"\" === (s = r.split(\"/\"))[s.length - 1] && s.splice(s.length - 1, 1), s.push(o), s.join(\"/\");\n    }\n\n  }();\n}();","map":{"version":3,"sources":["../_version.mjs","../controllers/WorkboxSW.mjs","../index.mjs"],"names":["self","_","e","CDN_PATH","MODULE_KEY_TO_NAME_MAPPING","backgroundSync","broadcastUpdate","cacheableResponse","core","expiration","googleAnalytics","navigationPreload","precaching","rangeRequests","routing","strategies","streams","constructor","v","_options","debug","location","hostname","modulePathPrefix","modulePathCb","_env","this","_modulesLoaded","Proxy","get","target","key","moduleName","loadModule","setConfig","options","Object","assign","Error","modulePath","_getImportPath","importScripts","err","console","error","pathParts","fileName","pathPrefix","split","length","splice","push","join","workbox"],"mappings":"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","sourcesContent":["try{self['workbox:sw:4.3.1']&&_()}catch(e){}// eslint-disable-line","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\nconst CDN_PATH = `WORKBOX_CDN_ROOT_URL`;\n\nconst MODULE_KEY_TO_NAME_MAPPING = {\n  // TODO(philipwalton): add jsdoc tags to associate these with their module.\n  // @name backgroundSync\n  // @memberof workbox\n  // @see module:workbox-background-sync\n  backgroundSync: 'background-sync',\n  broadcastUpdate: 'broadcast-update',\n  cacheableResponse: 'cacheable-response',\n  core: 'core',\n  expiration: 'expiration',\n  googleAnalytics: 'offline-ga',\n  navigationPreload: 'navigation-preload',\n  precaching: 'precaching',\n  rangeRequests: 'range-requests',\n  routing: 'routing',\n  strategies: 'strategies',\n  streams: 'streams',\n};\n\n/**\n * This class can be used to make it easy to use the various parts of\n * Workbox.\n *\n * @private\n */\nexport class WorkboxSW {\n  /**\n   * Creates a proxy that automatically loads workbox namespaces on demand.\n   *\n   * @private\n   */\n  constructor() {\n    this.v = {};\n    this._options = {\n      debug: self.location.hostname === 'localhost',\n      modulePathPrefix: null,\n      modulePathCb: null,\n    };\n\n    this._env = this._options.debug ? 'dev' : 'prod';\n    this._modulesLoaded = false;\n\n    return new Proxy(this, {\n      get(target, key) {\n        if (target[key]) {\n          return target[key];\n        }\n\n        const moduleName = MODULE_KEY_TO_NAME_MAPPING[key];\n        if (moduleName) {\n          target.loadModule(`workbox-${moduleName}`);\n        }\n\n        return target[key];\n      },\n    });\n  }\n\n  /**\n   * Updates the configuration options. You can specify whether to treat as a\n   * debug build and whether to use a CDN or a specific path when importing\n   * other workbox-modules\n   *\n   * @param {Object} [options]\n   * @param {boolean} [options.debug] If true, `dev` builds are using, otherwise\n   * `prod` builds are used. By default, `prod` is used unless on localhost.\n   * @param {Function} [options.modulePathPrefix] To avoid using the CDN with\n   * `workbox-sw` set the path prefix of where modules should be loaded from.\n   * For example `modulePathPrefix: '/third_party/workbox/v3.0.0/'`.\n   * @param {workbox~ModulePathCallback} [options.modulePathCb] If defined,\n   * this callback will be responsible for determining the path of each\n   * workbox module.\n   *\n   * @alias workbox.setConfig\n   */\n  setConfig(options = {}) {\n    if (!this._modulesLoaded) {\n      Object.assign(this._options, options);\n      this._env = this._options.debug ? 'dev' : 'prod';\n    } else {\n      throw new Error('Config must be set before accessing workbox.* modules');\n    }\n  }\n\n  /**\n   * Load a Workbox module by passing in the appropriate module name.\n   *\n   * This is not generally needed unless you know there are modules that are\n   * dynamically used and you want to safe guard use of the module while the\n   * user may be offline.\n   *\n   * @param {string} moduleName\n   *\n   * @alias workbox.loadModule\n   */\n  loadModule(moduleName) {\n    const modulePath = this._getImportPath(moduleName);\n    try {\n      importScripts(modulePath);\n      this._modulesLoaded = true;\n    } catch (err) {\n      // TODO Add context of this error if using the CDN vs the local file.\n\n      // We can't rely on workbox-core being loaded so using console\n      // eslint-disable-next-line\n      console.error(\n          `Unable to import module '${moduleName}' from '${modulePath}'.`);\n      throw err;\n    }\n  }\n\n  /**\n   * This method will get the path / CDN URL to be used for importScript calls.\n   *\n   * @param {string} moduleName\n   * @return {string} URL to the desired module.\n   *\n   * @private\n   */\n  _getImportPath(moduleName) {\n    if (this._options.modulePathCb) {\n      return this._options.modulePathCb(moduleName, this._options.debug);\n    }\n\n    // TODO: This needs to be dynamic some how.\n    let pathParts = [CDN_PATH];\n\n    const fileName = `${moduleName}.${this._env}.js`;\n\n    const pathPrefix = this._options.modulePathPrefix;\n    if (pathPrefix) {\n      // Split to avoid issues with developers ending / not ending with slash\n      pathParts = pathPrefix.split('/');\n\n      // We don't need a slash at the end as we will be adding\n      // a filename regardless\n      if (pathParts[pathParts.length - 1] === '') {\n        pathParts.splice(pathParts.length - 1, 1);\n      }\n    }\n\n    pathParts.push(fileName);\n\n    return pathParts.join('/');\n  }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {WorkboxSW} from './controllers/WorkboxSW.mjs';\nimport './_version.mjs';\n\n/**\n * @namespace workbox\n */\n\n// Don't export anything, just expose a global.\nself.workbox = new WorkboxSW();\n"]},"metadata":{},"sourceType":"script"}