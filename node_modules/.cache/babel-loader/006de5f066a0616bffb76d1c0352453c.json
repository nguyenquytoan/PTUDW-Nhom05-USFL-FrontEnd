{"ast":null,"code":"var common = require('../common');\n\nvar assert = common.assert;\nvar fake = common.fake.create();\n\nvar retry = require(common.dir.lib + '/retry');\n\nfunction getLib() {\n  return {\n    fn1: function () {},\n    fn2: function () {},\n    fn3: function () {}\n  };\n}\n\n(function wrapAll() {\n  var lib = getLib();\n  retry.wrap(lib);\n  assert.equal(lib.fn1.name, 'bound retryWrapper');\n  assert.equal(lib.fn2.name, 'bound retryWrapper');\n  assert.equal(lib.fn3.name, 'bound retryWrapper');\n})();\n\n(function wrapAllPassOptions() {\n  var lib = getLib();\n  retry.wrap(lib, {\n    retries: 2\n  });\n  assert.equal(lib.fn1.name, 'bound retryWrapper');\n  assert.equal(lib.fn2.name, 'bound retryWrapper');\n  assert.equal(lib.fn3.name, 'bound retryWrapper');\n  assert.equal(lib.fn1.options.retries, 2);\n  assert.equal(lib.fn2.options.retries, 2);\n  assert.equal(lib.fn3.options.retries, 2);\n})();\n\n(function wrapDefined() {\n  var lib = getLib();\n  retry.wrap(lib, ['fn2', 'fn3']);\n  assert.notEqual(lib.fn1.name, 'bound retryWrapper');\n  assert.equal(lib.fn2.name, 'bound retryWrapper');\n  assert.equal(lib.fn3.name, 'bound retryWrapper');\n})();\n\n(function wrapDefinedAndPassOptions() {\n  var lib = getLib();\n  retry.wrap(lib, {\n    retries: 2\n  }, ['fn2', 'fn3']);\n  assert.notEqual(lib.fn1.name, 'bound retryWrapper');\n  assert.equal(lib.fn2.name, 'bound retryWrapper');\n  assert.equal(lib.fn3.name, 'bound retryWrapper');\n  assert.equal(lib.fn2.options.retries, 2);\n  assert.equal(lib.fn3.options.retries, 2);\n})();\n\n(function runWrappedWithoutError() {\n  var callbackCalled;\n  var lib = {\n    method: function (a, b, callback) {\n      assert.equal(a, 1);\n      assert.equal(b, 2);\n      assert.equal(typeof callback, 'function');\n      callback();\n    }\n  };\n  retry.wrap(lib);\n  lib.method(1, 2, function () {\n    callbackCalled = true;\n  });\n  assert.ok(callbackCalled);\n})();\n\n(function runWrappedSeveralWithoutError() {\n  var callbacksCalled = 0;\n  var lib = {\n    fn1: function (a, callback) {\n      assert.equal(a, 1);\n      assert.equal(typeof callback, 'function');\n      callback();\n    },\n    fn2: function (a, callback) {\n      assert.equal(a, 2);\n      assert.equal(typeof callback, 'function');\n      callback();\n    }\n  };\n  retry.wrap(lib, {}, ['fn1', 'fn2']);\n  lib.fn1(1, function () {\n    callbacksCalled++;\n  });\n  lib.fn2(2, function () {\n    callbacksCalled++;\n  });\n  assert.equal(callbacksCalled, 2);\n})();\n\n(function runWrappedWithError() {\n  var callbackCalled;\n  var lib = {\n    method: function (callback) {\n      callback(new Error('Some error'));\n    }\n  };\n  retry.wrap(lib, {\n    retries: 1\n  });\n  lib.method(function (err) {\n    callbackCalled = true;\n    assert.ok(err instanceof Error);\n  });\n  assert.ok(!callbackCalled);\n})();","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/retry/test/integration/test-retry-wrap.js"],"names":["common","require","assert","fake","create","retry","dir","lib","getLib","fn1","fn2","fn3","wrapAll","wrap","equal","name","wrapAllPassOptions","retries","options","wrapDefined","notEqual","wrapDefinedAndPassOptions","runWrappedWithoutError","callbackCalled","method","a","b","callback","ok","runWrappedSeveralWithoutError","callbacksCalled","runWrappedWithError","Error","err"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAApB;;AACA,IAAIC,MAAM,GAAGF,MAAM,CAACE,MAApB;AACA,IAAIC,IAAI,GAAGH,MAAM,CAACG,IAAP,CAAYC,MAAZ,EAAX;;AACA,IAAIC,KAAK,GAAGJ,OAAO,CAACD,MAAM,CAACM,GAAP,CAAWC,GAAX,GAAiB,QAAlB,CAAnB;;AAEA,SAASC,MAAT,GAAkB;AAChB,SAAO;AACLC,IAAAA,GAAG,EAAE,YAAW,CAAE,CADb;AAELC,IAAAA,GAAG,EAAE,YAAW,CAAE,CAFb;AAGLC,IAAAA,GAAG,EAAE,YAAW,CAAE;AAHb,GAAP;AAKD;;AAEA,UAASC,OAAT,GAAmB;AAClB,MAAIL,GAAG,GAAGC,MAAM,EAAhB;AACAH,EAAAA,KAAK,CAACQ,IAAN,CAAWN,GAAX;AACAL,EAAAA,MAAM,CAACY,KAAP,CAAaP,GAAG,CAACE,GAAJ,CAAQM,IAArB,EAA2B,oBAA3B;AACAb,EAAAA,MAAM,CAACY,KAAP,CAAaP,GAAG,CAACG,GAAJ,CAAQK,IAArB,EAA2B,oBAA3B;AACAb,EAAAA,MAAM,CAACY,KAAP,CAAaP,GAAG,CAACI,GAAJ,CAAQI,IAArB,EAA2B,oBAA3B;AACD,CANA,GAAD;;AAQC,UAASC,kBAAT,GAA8B;AAC7B,MAAIT,GAAG,GAAGC,MAAM,EAAhB;AACAH,EAAAA,KAAK,CAACQ,IAAN,CAAWN,GAAX,EAAgB;AAACU,IAAAA,OAAO,EAAE;AAAV,GAAhB;AACAf,EAAAA,MAAM,CAACY,KAAP,CAAaP,GAAG,CAACE,GAAJ,CAAQM,IAArB,EAA2B,oBAA3B;AACAb,EAAAA,MAAM,CAACY,KAAP,CAAaP,GAAG,CAACG,GAAJ,CAAQK,IAArB,EAA2B,oBAA3B;AACAb,EAAAA,MAAM,CAACY,KAAP,CAAaP,GAAG,CAACI,GAAJ,CAAQI,IAArB,EAA2B,oBAA3B;AACAb,EAAAA,MAAM,CAACY,KAAP,CAAaP,GAAG,CAACE,GAAJ,CAAQS,OAAR,CAAgBD,OAA7B,EAAsC,CAAtC;AACAf,EAAAA,MAAM,CAACY,KAAP,CAAaP,GAAG,CAACG,GAAJ,CAAQQ,OAAR,CAAgBD,OAA7B,EAAsC,CAAtC;AACAf,EAAAA,MAAM,CAACY,KAAP,CAAaP,GAAG,CAACI,GAAJ,CAAQO,OAAR,CAAgBD,OAA7B,EAAsC,CAAtC;AACD,CATA,GAAD;;AAWC,UAASE,WAAT,GAAuB;AACtB,MAAIZ,GAAG,GAAGC,MAAM,EAAhB;AACAH,EAAAA,KAAK,CAACQ,IAAN,CAAWN,GAAX,EAAgB,CAAC,KAAD,EAAQ,KAAR,CAAhB;AACAL,EAAAA,MAAM,CAACkB,QAAP,CAAgBb,GAAG,CAACE,GAAJ,CAAQM,IAAxB,EAA8B,oBAA9B;AACAb,EAAAA,MAAM,CAACY,KAAP,CAAaP,GAAG,CAACG,GAAJ,CAAQK,IAArB,EAA2B,oBAA3B;AACAb,EAAAA,MAAM,CAACY,KAAP,CAAaP,GAAG,CAACI,GAAJ,CAAQI,IAArB,EAA2B,oBAA3B;AACD,CANA,GAAD;;AAQC,UAASM,yBAAT,GAAqC;AACpC,MAAId,GAAG,GAAGC,MAAM,EAAhB;AACAH,EAAAA,KAAK,CAACQ,IAAN,CAAWN,GAAX,EAAgB;AAACU,IAAAA,OAAO,EAAE;AAAV,GAAhB,EAA8B,CAAC,KAAD,EAAQ,KAAR,CAA9B;AACAf,EAAAA,MAAM,CAACkB,QAAP,CAAgBb,GAAG,CAACE,GAAJ,CAAQM,IAAxB,EAA8B,oBAA9B;AACAb,EAAAA,MAAM,CAACY,KAAP,CAAaP,GAAG,CAACG,GAAJ,CAAQK,IAArB,EAA2B,oBAA3B;AACAb,EAAAA,MAAM,CAACY,KAAP,CAAaP,GAAG,CAACI,GAAJ,CAAQI,IAArB,EAA2B,oBAA3B;AACAb,EAAAA,MAAM,CAACY,KAAP,CAAaP,GAAG,CAACG,GAAJ,CAAQQ,OAAR,CAAgBD,OAA7B,EAAsC,CAAtC;AACAf,EAAAA,MAAM,CAACY,KAAP,CAAaP,GAAG,CAACI,GAAJ,CAAQO,OAAR,CAAgBD,OAA7B,EAAsC,CAAtC;AACD,CARA,GAAD;;AAUC,UAASK,sBAAT,GAAkC;AACjC,MAAIC,cAAJ;AACA,MAAIhB,GAAG,GAAG;AAACiB,IAAAA,MAAM,EAAE,UAASC,CAAT,EAAYC,CAAZ,EAAeC,QAAf,EAAyB;AAC1CzB,MAAAA,MAAM,CAACY,KAAP,CAAaW,CAAb,EAAgB,CAAhB;AACAvB,MAAAA,MAAM,CAACY,KAAP,CAAaY,CAAb,EAAgB,CAAhB;AACAxB,MAAAA,MAAM,CAACY,KAAP,CAAa,OAAOa,QAApB,EAA8B,UAA9B;AACAA,MAAAA,QAAQ;AACT;AALS,GAAV;AAMAtB,EAAAA,KAAK,CAACQ,IAAN,CAAWN,GAAX;AACAA,EAAAA,GAAG,CAACiB,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,YAAW;AAC1BD,IAAAA,cAAc,GAAG,IAAjB;AACD,GAFD;AAGArB,EAAAA,MAAM,CAAC0B,EAAP,CAAUL,cAAV;AACD,CAbA,GAAD;;AAeC,UAASM,6BAAT,GAAyC;AACxC,MAAIC,eAAe,GAAG,CAAtB;AACA,MAAIvB,GAAG,GAAG;AACRE,IAAAA,GAAG,EAAE,UAAUgB,CAAV,EAAaE,QAAb,EAAuB;AAC1BzB,MAAAA,MAAM,CAACY,KAAP,CAAaW,CAAb,EAAgB,CAAhB;AACAvB,MAAAA,MAAM,CAACY,KAAP,CAAa,OAAOa,QAApB,EAA8B,UAA9B;AACAA,MAAAA,QAAQ;AACT,KALO;AAMRjB,IAAAA,GAAG,EAAE,UAAUe,CAAV,EAAaE,QAAb,EAAuB;AAC1BzB,MAAAA,MAAM,CAACY,KAAP,CAAaW,CAAb,EAAgB,CAAhB;AACAvB,MAAAA,MAAM,CAACY,KAAP,CAAa,OAAOa,QAApB,EAA8B,UAA9B;AACAA,MAAAA,QAAQ;AACT;AAVO,GAAV;AAYAtB,EAAAA,KAAK,CAACQ,IAAN,CAAWN,GAAX,EAAgB,EAAhB,EAAoB,CAAC,KAAD,EAAQ,KAAR,CAApB;AACAA,EAAAA,GAAG,CAACE,GAAJ,CAAQ,CAAR,EAAW,YAAW;AACpBqB,IAAAA,eAAe;AAChB,GAFD;AAGAvB,EAAAA,GAAG,CAACG,GAAJ,CAAQ,CAAR,EAAW,YAAW;AACpBoB,IAAAA,eAAe;AAChB,GAFD;AAGA5B,EAAAA,MAAM,CAACY,KAAP,CAAagB,eAAb,EAA8B,CAA9B;AACD,CAtBA,GAAD;;AAwBC,UAASC,mBAAT,GAA+B;AAC9B,MAAIR,cAAJ;AACA,MAAIhB,GAAG,GAAG;AAACiB,IAAAA,MAAM,EAAE,UAASG,QAAT,EAAmB;AACpCA,MAAAA,QAAQ,CAAC,IAAIK,KAAJ,CAAU,YAAV,CAAD,CAAR;AACD;AAFS,GAAV;AAGA3B,EAAAA,KAAK,CAACQ,IAAN,CAAWN,GAAX,EAAgB;AAACU,IAAAA,OAAO,EAAE;AAAV,GAAhB;AACAV,EAAAA,GAAG,CAACiB,MAAJ,CAAW,UAASS,GAAT,EAAc;AACvBV,IAAAA,cAAc,GAAG,IAAjB;AACArB,IAAAA,MAAM,CAAC0B,EAAP,CAAUK,GAAG,YAAYD,KAAzB;AACD,GAHD;AAIA9B,EAAAA,MAAM,CAAC0B,EAAP,CAAU,CAACL,cAAX;AACD,CAXA,GAAD","sourcesContent":["var common = require('../common');\nvar assert = common.assert;\nvar fake = common.fake.create();\nvar retry = require(common.dir.lib + '/retry');\n\nfunction getLib() {\n  return {\n    fn1: function() {},\n    fn2: function() {},\n    fn3: function() {}\n  };\n}\n\n(function wrapAll() {\n  var lib = getLib();\n  retry.wrap(lib);\n  assert.equal(lib.fn1.name, 'bound retryWrapper');\n  assert.equal(lib.fn2.name, 'bound retryWrapper');\n  assert.equal(lib.fn3.name, 'bound retryWrapper');\n}());\n\n(function wrapAllPassOptions() {\n  var lib = getLib();\n  retry.wrap(lib, {retries: 2});\n  assert.equal(lib.fn1.name, 'bound retryWrapper');\n  assert.equal(lib.fn2.name, 'bound retryWrapper');\n  assert.equal(lib.fn3.name, 'bound retryWrapper');\n  assert.equal(lib.fn1.options.retries, 2);\n  assert.equal(lib.fn2.options.retries, 2);\n  assert.equal(lib.fn3.options.retries, 2);\n}());\n\n(function wrapDefined() {\n  var lib = getLib();\n  retry.wrap(lib, ['fn2', 'fn3']);\n  assert.notEqual(lib.fn1.name, 'bound retryWrapper');\n  assert.equal(lib.fn2.name, 'bound retryWrapper');\n  assert.equal(lib.fn3.name, 'bound retryWrapper');\n}());\n\n(function wrapDefinedAndPassOptions() {\n  var lib = getLib();\n  retry.wrap(lib, {retries: 2}, ['fn2', 'fn3']);\n  assert.notEqual(lib.fn1.name, 'bound retryWrapper');\n  assert.equal(lib.fn2.name, 'bound retryWrapper');\n  assert.equal(lib.fn3.name, 'bound retryWrapper');\n  assert.equal(lib.fn2.options.retries, 2);\n  assert.equal(lib.fn3.options.retries, 2);\n}());\n\n(function runWrappedWithoutError() {\n  var callbackCalled;\n  var lib = {method: function(a, b, callback) {\n    assert.equal(a, 1);\n    assert.equal(b, 2);\n    assert.equal(typeof callback, 'function');\n    callback();\n  }};\n  retry.wrap(lib);\n  lib.method(1, 2, function() {\n    callbackCalled = true;\n  });\n  assert.ok(callbackCalled);\n}());\n\n(function runWrappedSeveralWithoutError() {\n  var callbacksCalled = 0;\n  var lib = {\n    fn1: function (a, callback) {\n      assert.equal(a, 1);\n      assert.equal(typeof callback, 'function');\n      callback();\n    },\n    fn2: function (a, callback) {\n      assert.equal(a, 2);\n      assert.equal(typeof callback, 'function');\n      callback();\n    }\n  };\n  retry.wrap(lib, {}, ['fn1', 'fn2']);\n  lib.fn1(1, function() {\n    callbacksCalled++;\n  });\n  lib.fn2(2, function() {\n    callbacksCalled++;\n  });\n  assert.equal(callbacksCalled, 2);\n}());\n\n(function runWrappedWithError() {\n  var callbackCalled;\n  var lib = {method: function(callback) {\n    callback(new Error('Some error'));\n  }};\n  retry.wrap(lib, {retries: 1});\n  lib.method(function(err) {\n    callbackCalled = true;\n    assert.ok(err instanceof Error);\n  });\n  assert.ok(!callbackCalled);\n}());\n"]},"metadata":{},"sourceType":"script"}