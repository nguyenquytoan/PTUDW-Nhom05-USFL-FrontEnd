{"ast":null,"code":"/**\n * @fileoverview A rule to disallow using `this`/`super` before `super()`.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given node is a constructor.\n * @param {ASTNode} node A node to check. This node type is one of\n *   `Program`, `FunctionDeclaration`, `FunctionExpression`, and\n *   `ArrowFunctionExpression`.\n * @returns {boolean} `true` if the node is a constructor.\n */\n\n\nfunction isConstructorFunction(node) {\n  return node.type === \"FunctionExpression\" && node.parent.type === \"MethodDefinition\" && node.parent.kind === \"constructor\";\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow `this`/`super` before calling `super()` in constructors\",\n      category: \"ECMAScript 6\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-this-before-super\"\n    },\n    schema: []\n  },\n\n  create(context) {\n    /*\n     * Information for each constructor.\n     * - upper:      Information of the upper constructor.\n     * - hasExtends: A flag which shows whether the owner class has a valid\n     *   `extends` part.\n     * - scope:      The scope of the owner class.\n     * - codePath:   The code path of this constructor.\n     */\n    let funcInfo = null;\n    /*\n     * Information for each code path segment.\n     * Each key is the id of a code path segment.\n     * Each value is an object:\n     * - superCalled:  The flag which shows `super()` called in all code paths.\n     * - invalidNodes: The array of invalid ThisExpression and Super nodes.\n     */\n\n    let segInfoMap = Object.create(null);\n    /**\n     * Gets whether or not `super()` is called in a given code path segment.\n     * @param {CodePathSegment} segment A code path segment to get.\n     * @returns {boolean} `true` if `super()` is called.\n     */\n\n    function isCalled(segment) {\n      return !segment.reachable || segInfoMap[segment.id].superCalled;\n    }\n    /**\n     * Checks whether or not this is in a constructor.\n     * @returns {boolean} `true` if this is in a constructor.\n     */\n\n\n    function isInConstructorOfDerivedClass() {\n      return Boolean(funcInfo && funcInfo.isConstructor && funcInfo.hasExtends);\n    }\n    /**\n     * Checks whether or not this is before `super()` is called.\n     * @returns {boolean} `true` if this is before `super()` is called.\n     */\n\n\n    function isBeforeCallOfSuper() {\n      return isInConstructorOfDerivedClass() && !funcInfo.codePath.currentSegments.every(isCalled);\n    }\n    /**\n     * Sets a given node as invalid.\n     * @param {ASTNode} node A node to set as invalid. This is one of\n     *      a ThisExpression and a Super.\n     * @returns {void}\n     */\n\n\n    function setInvalid(node) {\n      const segments = funcInfo.codePath.currentSegments;\n\n      for (let i = 0; i < segments.length; ++i) {\n        const segment = segments[i];\n\n        if (segment.reachable) {\n          segInfoMap[segment.id].invalidNodes.push(node);\n        }\n      }\n    }\n    /**\n     * Sets the current segment as `super` was called.\n     * @returns {void}\n     */\n\n\n    function setSuperCalled() {\n      const segments = funcInfo.codePath.currentSegments;\n\n      for (let i = 0; i < segments.length; ++i) {\n        const segment = segments[i];\n\n        if (segment.reachable) {\n          segInfoMap[segment.id].superCalled = true;\n        }\n      }\n    }\n\n    return {\n      /**\n       * Adds information of a constructor into the stack.\n       * @param {CodePath} codePath A code path which was started.\n       * @param {ASTNode} node The current node.\n       * @returns {void}\n       */\n      onCodePathStart(codePath, node) {\n        if (isConstructorFunction(node)) {\n          // Class > ClassBody > MethodDefinition > FunctionExpression\n          const classNode = node.parent.parent.parent;\n          funcInfo = {\n            upper: funcInfo,\n            isConstructor: true,\n            hasExtends: Boolean(classNode.superClass && !astUtils.isNullOrUndefined(classNode.superClass)),\n            codePath\n          };\n        } else {\n          funcInfo = {\n            upper: funcInfo,\n            isConstructor: false,\n            hasExtends: false,\n            codePath\n          };\n        }\n      },\n\n      /**\n       * Removes the top of stack item.\n       *\n       * And this treverses all segments of this code path then reports every\n       * invalid node.\n       * @param {CodePath} codePath A code path which was ended.\n       * @returns {void}\n       */\n      onCodePathEnd(codePath) {\n        const isDerivedClass = funcInfo.hasExtends;\n        funcInfo = funcInfo.upper;\n\n        if (!isDerivedClass) {\n          return;\n        }\n\n        codePath.traverseSegments((segment, controller) => {\n          const info = segInfoMap[segment.id];\n\n          for (let i = 0; i < info.invalidNodes.length; ++i) {\n            const invalidNode = info.invalidNodes[i];\n            context.report({\n              message: \"'{{kind}}' is not allowed before 'super()'.\",\n              node: invalidNode,\n              data: {\n                kind: invalidNode.type === \"Super\" ? \"super\" : \"this\"\n              }\n            });\n          }\n\n          if (info.superCalled) {\n            controller.skip();\n          }\n        });\n      },\n\n      /**\n       * Initialize information of a given code path segment.\n       * @param {CodePathSegment} segment A code path segment to initialize.\n       * @returns {void}\n       */\n      onCodePathSegmentStart(segment) {\n        if (!isInConstructorOfDerivedClass()) {\n          return;\n        } // Initialize info.\n\n\n        segInfoMap[segment.id] = {\n          superCalled: segment.prevSegments.length > 0 && segment.prevSegments.every(isCalled),\n          invalidNodes: []\n        };\n      },\n\n      /**\n       * Update information of the code path segment when a code path was\n       * looped.\n       * @param {CodePathSegment} fromSegment The code path segment of the\n       *      end of a loop.\n       * @param {CodePathSegment} toSegment A code path segment of the head\n       *      of a loop.\n       * @returns {void}\n       */\n      onCodePathSegmentLoop(fromSegment, toSegment) {\n        if (!isInConstructorOfDerivedClass()) {\n          return;\n        } // Update information inside of the loop.\n\n\n        funcInfo.codePath.traverseSegments({\n          first: toSegment,\n          last: fromSegment\n        }, (segment, controller) => {\n          const info = segInfoMap[segment.id];\n\n          if (info.superCalled) {\n            info.invalidNodes = [];\n            controller.skip();\n          } else if (segment.prevSegments.length > 0 && segment.prevSegments.every(isCalled)) {\n            info.superCalled = true;\n            info.invalidNodes = [];\n          }\n        });\n      },\n\n      /**\n       * Reports if this is before `super()`.\n       * @param {ASTNode} node A target node.\n       * @returns {void}\n       */\n      ThisExpression(node) {\n        if (isBeforeCallOfSuper()) {\n          setInvalid(node);\n        }\n      },\n\n      /**\n       * Reports if this is before `super()`.\n       * @param {ASTNode} node A target node.\n       * @returns {void}\n       */\n      Super(node) {\n        if (!astUtils.isCallee(node) && isBeforeCallOfSuper()) {\n          setInvalid(node);\n        }\n      },\n\n      /**\n       * Marks `super()` called.\n       * @param {ASTNode} node A target node.\n       * @returns {void}\n       */\n      \"CallExpression:exit\"(node) {\n        if (node.callee.type === \"Super\" && isBeforeCallOfSuper()) {\n          setSuperCalled();\n        }\n      },\n\n      /**\n       * Resets state.\n       * @returns {void}\n       */\n      \"Program:exit\"() {\n        segInfoMap = Object.create(null);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-this-before-super.js"],"names":["astUtils","require","isConstructorFunction","node","type","parent","kind","module","exports","meta","docs","description","category","recommended","url","schema","create","context","funcInfo","segInfoMap","Object","isCalled","segment","reachable","id","superCalled","isInConstructorOfDerivedClass","Boolean","isConstructor","hasExtends","isBeforeCallOfSuper","codePath","currentSegments","every","setInvalid","segments","i","length","invalidNodes","push","setSuperCalled","onCodePathStart","classNode","upper","superClass","isNullOrUndefined","onCodePathEnd","isDerivedClass","traverseSegments","controller","info","invalidNode","report","message","data","skip","onCodePathSegmentStart","prevSegments","onCodePathSegmentLoop","fromSegment","toSegment","first","last","ThisExpression","Super","isCallee","callee"],"mappings":"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","sourcesContent":["/**\n * @fileoverview A rule to disallow using `this`/`super` before `super()`.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given node is a constructor.\n * @param {ASTNode} node A node to check. This node type is one of\n *   `Program`, `FunctionDeclaration`, `FunctionExpression`, and\n *   `ArrowFunctionExpression`.\n * @returns {boolean} `true` if the node is a constructor.\n */\nfunction isConstructorFunction(node) {\n    return (\n        node.type === \"FunctionExpression\" &&\n        node.parent.type === \"MethodDefinition\" &&\n        node.parent.kind === \"constructor\"\n    );\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow `this`/`super` before calling `super()` in constructors\",\n            category: \"ECMAScript 6\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-this-before-super\"\n        },\n\n        schema: []\n    },\n\n    create(context) {\n\n        /*\n         * Information for each constructor.\n         * - upper:      Information of the upper constructor.\n         * - hasExtends: A flag which shows whether the owner class has a valid\n         *   `extends` part.\n         * - scope:      The scope of the owner class.\n         * - codePath:   The code path of this constructor.\n         */\n        let funcInfo = null;\n\n        /*\n         * Information for each code path segment.\n         * Each key is the id of a code path segment.\n         * Each value is an object:\n         * - superCalled:  The flag which shows `super()` called in all code paths.\n         * - invalidNodes: The array of invalid ThisExpression and Super nodes.\n         */\n        let segInfoMap = Object.create(null);\n\n        /**\n         * Gets whether or not `super()` is called in a given code path segment.\n         * @param {CodePathSegment} segment A code path segment to get.\n         * @returns {boolean} `true` if `super()` is called.\n         */\n        function isCalled(segment) {\n            return !segment.reachable || segInfoMap[segment.id].superCalled;\n        }\n\n        /**\n         * Checks whether or not this is in a constructor.\n         * @returns {boolean} `true` if this is in a constructor.\n         */\n        function isInConstructorOfDerivedClass() {\n            return Boolean(funcInfo && funcInfo.isConstructor && funcInfo.hasExtends);\n        }\n\n        /**\n         * Checks whether or not this is before `super()` is called.\n         * @returns {boolean} `true` if this is before `super()` is called.\n         */\n        function isBeforeCallOfSuper() {\n            return (\n                isInConstructorOfDerivedClass() &&\n                !funcInfo.codePath.currentSegments.every(isCalled)\n            );\n        }\n\n        /**\n         * Sets a given node as invalid.\n         * @param {ASTNode} node A node to set as invalid. This is one of\n         *      a ThisExpression and a Super.\n         * @returns {void}\n         */\n        function setInvalid(node) {\n            const segments = funcInfo.codePath.currentSegments;\n\n            for (let i = 0; i < segments.length; ++i) {\n                const segment = segments[i];\n\n                if (segment.reachable) {\n                    segInfoMap[segment.id].invalidNodes.push(node);\n                }\n            }\n        }\n\n        /**\n         * Sets the current segment as `super` was called.\n         * @returns {void}\n         */\n        function setSuperCalled() {\n            const segments = funcInfo.codePath.currentSegments;\n\n            for (let i = 0; i < segments.length; ++i) {\n                const segment = segments[i];\n\n                if (segment.reachable) {\n                    segInfoMap[segment.id].superCalled = true;\n                }\n            }\n        }\n\n        return {\n\n            /**\n             * Adds information of a constructor into the stack.\n             * @param {CodePath} codePath A code path which was started.\n             * @param {ASTNode} node The current node.\n             * @returns {void}\n             */\n            onCodePathStart(codePath, node) {\n                if (isConstructorFunction(node)) {\n\n                    // Class > ClassBody > MethodDefinition > FunctionExpression\n                    const classNode = node.parent.parent.parent;\n\n                    funcInfo = {\n                        upper: funcInfo,\n                        isConstructor: true,\n                        hasExtends: Boolean(\n                            classNode.superClass &&\n                            !astUtils.isNullOrUndefined(classNode.superClass)\n                        ),\n                        codePath\n                    };\n                } else {\n                    funcInfo = {\n                        upper: funcInfo,\n                        isConstructor: false,\n                        hasExtends: false,\n                        codePath\n                    };\n                }\n            },\n\n            /**\n             * Removes the top of stack item.\n             *\n             * And this treverses all segments of this code path then reports every\n             * invalid node.\n             * @param {CodePath} codePath A code path which was ended.\n             * @returns {void}\n             */\n            onCodePathEnd(codePath) {\n                const isDerivedClass = funcInfo.hasExtends;\n\n                funcInfo = funcInfo.upper;\n                if (!isDerivedClass) {\n                    return;\n                }\n\n                codePath.traverseSegments((segment, controller) => {\n                    const info = segInfoMap[segment.id];\n\n                    for (let i = 0; i < info.invalidNodes.length; ++i) {\n                        const invalidNode = info.invalidNodes[i];\n\n                        context.report({\n                            message: \"'{{kind}}' is not allowed before 'super()'.\",\n                            node: invalidNode,\n                            data: {\n                                kind: invalidNode.type === \"Super\" ? \"super\" : \"this\"\n                            }\n                        });\n                    }\n\n                    if (info.superCalled) {\n                        controller.skip();\n                    }\n                });\n            },\n\n            /**\n             * Initialize information of a given code path segment.\n             * @param {CodePathSegment} segment A code path segment to initialize.\n             * @returns {void}\n             */\n            onCodePathSegmentStart(segment) {\n                if (!isInConstructorOfDerivedClass()) {\n                    return;\n                }\n\n                // Initialize info.\n                segInfoMap[segment.id] = {\n                    superCalled: (\n                        segment.prevSegments.length > 0 &&\n                        segment.prevSegments.every(isCalled)\n                    ),\n                    invalidNodes: []\n                };\n            },\n\n            /**\n             * Update information of the code path segment when a code path was\n             * looped.\n             * @param {CodePathSegment} fromSegment The code path segment of the\n             *      end of a loop.\n             * @param {CodePathSegment} toSegment A code path segment of the head\n             *      of a loop.\n             * @returns {void}\n             */\n            onCodePathSegmentLoop(fromSegment, toSegment) {\n                if (!isInConstructorOfDerivedClass()) {\n                    return;\n                }\n\n                // Update information inside of the loop.\n                funcInfo.codePath.traverseSegments(\n                    { first: toSegment, last: fromSegment },\n                    (segment, controller) => {\n                        const info = segInfoMap[segment.id];\n\n                        if (info.superCalled) {\n                            info.invalidNodes = [];\n                            controller.skip();\n                        } else if (\n                            segment.prevSegments.length > 0 &&\n                            segment.prevSegments.every(isCalled)\n                        ) {\n                            info.superCalled = true;\n                            info.invalidNodes = [];\n                        }\n                    }\n                );\n            },\n\n            /**\n             * Reports if this is before `super()`.\n             * @param {ASTNode} node A target node.\n             * @returns {void}\n             */\n            ThisExpression(node) {\n                if (isBeforeCallOfSuper()) {\n                    setInvalid(node);\n                }\n            },\n\n            /**\n             * Reports if this is before `super()`.\n             * @param {ASTNode} node A target node.\n             * @returns {void}\n             */\n            Super(node) {\n                if (!astUtils.isCallee(node) && isBeforeCallOfSuper()) {\n                    setInvalid(node);\n                }\n            },\n\n            /**\n             * Marks `super()` called.\n             * @param {ASTNode} node A target node.\n             * @returns {void}\n             */\n            \"CallExpression:exit\"(node) {\n                if (node.callee.type === \"Super\" && isBeforeCallOfSuper()) {\n                    setSuperCalled();\n                }\n            },\n\n            /**\n             * Resets state.\n             * @returns {void}\n             */\n            \"Program:exit\"() {\n                segInfoMap = Object.create(null);\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}