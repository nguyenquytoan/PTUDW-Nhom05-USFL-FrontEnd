{"ast":null,"code":"/** @license React v0.19.1\n * scheduler-unstable_mock.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.SchedulerMock = {}));\n})(this, function (exports) {\n  'use strict';\n\n  var enableSchedulerDebugging = false;\n  var enableProfiling = true;\n  var currentTime = 0;\n  var scheduledCallback = null;\n  var scheduledTimeout = null;\n  var timeoutTime = -1;\n  var yieldedValues = null;\n  var expectedNumberOfYields = -1;\n  var didStop = false;\n  var isFlushing = false;\n  var needsPaint = false;\n  var shouldYieldForPaint = false;\n\n  function requestHostCallback(callback) {\n    scheduledCallback = callback;\n  }\n\n  function requestHostTimeout(callback, ms) {\n    scheduledTimeout = callback;\n    timeoutTime = currentTime + ms;\n  }\n\n  function cancelHostTimeout() {\n    scheduledTimeout = null;\n    timeoutTime = -1;\n  }\n\n  function shouldYieldToHost() {\n    if (expectedNumberOfYields !== -1 && yieldedValues !== null && yieldedValues.length >= expectedNumberOfYields || shouldYieldForPaint && needsPaint) {\n      // We yielded at least as many values as expected. Stop flushing.\n      didStop = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  function getCurrentTime() {\n    return currentTime;\n  }\n\n  function forceFrameRate() {// No-op\n  }\n\n  function unstable_flushNumberOfYields(count) {\n    if (isFlushing) {\n      throw new Error('Already flushing work.');\n    }\n\n    if (scheduledCallback !== null) {\n      var cb = scheduledCallback;\n      expectedNumberOfYields = count;\n      isFlushing = true;\n\n      try {\n        var hasMoreWork = true;\n\n        do {\n          hasMoreWork = cb(true, currentTime);\n        } while (hasMoreWork && !didStop);\n\n        if (!hasMoreWork) {\n          scheduledCallback = null;\n        }\n      } finally {\n        expectedNumberOfYields = -1;\n        didStop = false;\n        isFlushing = false;\n      }\n    }\n  }\n\n  function unstable_flushUntilNextPaint() {\n    if (isFlushing) {\n      throw new Error('Already flushing work.');\n    }\n\n    if (scheduledCallback !== null) {\n      var cb = scheduledCallback;\n      shouldYieldForPaint = true;\n      needsPaint = false;\n      isFlushing = true;\n\n      try {\n        var hasMoreWork = true;\n\n        do {\n          hasMoreWork = cb(true, currentTime);\n        } while (hasMoreWork && !didStop);\n\n        if (!hasMoreWork) {\n          scheduledCallback = null;\n        }\n      } finally {\n        shouldYieldForPaint = false;\n        didStop = false;\n        isFlushing = false;\n      }\n    }\n  }\n\n  function unstable_flushExpired() {\n    if (isFlushing) {\n      throw new Error('Already flushing work.');\n    }\n\n    if (scheduledCallback !== null) {\n      isFlushing = true;\n\n      try {\n        var hasMoreWork = scheduledCallback(false, currentTime);\n\n        if (!hasMoreWork) {\n          scheduledCallback = null;\n        }\n      } finally {\n        isFlushing = false;\n      }\n    }\n  }\n\n  function unstable_flushAllWithoutAsserting() {\n    // Returns false if no work was flushed.\n    if (isFlushing) {\n      throw new Error('Already flushing work.');\n    }\n\n    if (scheduledCallback !== null) {\n      var cb = scheduledCallback;\n      isFlushing = true;\n\n      try {\n        var hasMoreWork = true;\n\n        do {\n          hasMoreWork = cb(true, currentTime);\n        } while (hasMoreWork);\n\n        if (!hasMoreWork) {\n          scheduledCallback = null;\n        }\n\n        return true;\n      } finally {\n        isFlushing = false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  function unstable_clearYields() {\n    if (yieldedValues === null) {\n      return [];\n    }\n\n    var values = yieldedValues;\n    yieldedValues = null;\n    return values;\n  }\n\n  function unstable_flushAll() {\n    if (yieldedValues !== null) {\n      throw new Error('Log is not empty. Assert on the log of yielded values before ' + 'flushing additional work.');\n    }\n\n    unstable_flushAllWithoutAsserting();\n\n    if (yieldedValues !== null) {\n      throw new Error('While flushing work, something yielded a value. Use an ' + 'assertion helper to assert on the log of yielded values, e.g. ' + 'expect(Scheduler).toFlushAndYield([...])');\n    }\n  }\n\n  function unstable_yieldValue(value) {\n    if (yieldedValues === null) {\n      yieldedValues = [value];\n    } else {\n      yieldedValues.push(value);\n    }\n  }\n\n  function unstable_advanceTime(ms) {\n    currentTime += ms;\n\n    if (scheduledTimeout !== null && timeoutTime <= currentTime) {\n      scheduledTimeout(currentTime);\n      timeoutTime = -1;\n      scheduledTimeout = null;\n    }\n  }\n\n  function requestPaint() {\n    needsPaint = true;\n  }\n\n  function push(heap, node) {\n    var index = heap.length;\n    heap.push(node);\n    siftUp(heap, node, index);\n  }\n\n  function peek(heap) {\n    var first = heap[0];\n    return first === undefined ? null : first;\n  }\n\n  function pop(heap) {\n    var first = heap[0];\n\n    if (first !== undefined) {\n      var last = heap.pop();\n\n      if (last !== first) {\n        heap[0] = last;\n        siftDown(heap, last, 0);\n      }\n\n      return first;\n    } else {\n      return null;\n    }\n  }\n\n  function siftUp(heap, node, i) {\n    var index = i;\n\n    while (true) {\n      var parentIndex = index - 1 >>> 1;\n      var parent = heap[parentIndex];\n\n      if (parent !== undefined && compare(parent, node) > 0) {\n        // The parent is larger. Swap positions.\n        heap[parentIndex] = node;\n        heap[index] = parent;\n        index = parentIndex;\n      } else {\n        // The parent is smaller. Exit.\n        return;\n      }\n    }\n  }\n\n  function siftDown(heap, node, i) {\n    var index = i;\n    var length = heap.length;\n\n    while (index < length) {\n      var leftIndex = (index + 1) * 2 - 1;\n      var left = heap[leftIndex];\n      var rightIndex = leftIndex + 1;\n      var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n      if (left !== undefined && compare(left, node) < 0) {\n        if (right !== undefined && compare(right, left) < 0) {\n          heap[index] = right;\n          heap[rightIndex] = node;\n          index = rightIndex;\n        } else {\n          heap[index] = left;\n          heap[leftIndex] = node;\n          index = leftIndex;\n        }\n      } else if (right !== undefined && compare(right, node) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        // Neither child is smaller. Exit.\n        return;\n      }\n    }\n  }\n\n  function compare(a, b) {\n    // Compare sort index first, then task id.\n    var diff = a.sortIndex - b.sortIndex;\n    return diff !== 0 ? diff : a.id - b.id;\n  } // TODO: Use symbols?\n\n\n  var NoPriority = 0;\n  var ImmediatePriority = 1;\n  var UserBlockingPriority = 2;\n  var NormalPriority = 3;\n  var LowPriority = 4;\n  var IdlePriority = 5;\n  var runIdCounter = 0;\n  var mainThreadIdCounter = 0;\n  var profilingStateSize = 4;\n  var sharedProfilingBuffer = // $FlowFixMe Flow doesn't know about SharedArrayBuffer\n  typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer\n  typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\n  ;\n  var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\n\n  var PRIORITY = 0;\n  var CURRENT_TASK_ID = 1;\n  var CURRENT_RUN_ID = 2;\n  var QUEUE_SIZE = 3;\n  {\n    profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\n    // array might include canceled tasks.\n\n    profilingState[QUEUE_SIZE] = 0;\n    profilingState[CURRENT_TASK_ID] = 0;\n  } // Bytes per element is 4\n\n  var INITIAL_EVENT_LOG_SIZE = 131072;\n  var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\n  var eventLogSize = 0;\n  var eventLogBuffer = null;\n  var eventLog = null;\n  var eventLogIndex = 0;\n  var TaskStartEvent = 1;\n  var TaskCompleteEvent = 2;\n  var TaskErrorEvent = 3;\n  var TaskCancelEvent = 4;\n  var TaskRunEvent = 5;\n  var TaskYieldEvent = 6;\n  var SchedulerSuspendEvent = 7;\n  var SchedulerResumeEvent = 8;\n\n  function logEvent(entries) {\n    if (eventLog !== null) {\n      var offset = eventLogIndex;\n      eventLogIndex += entries.length;\n\n      if (eventLogIndex + 1 > eventLogSize) {\n        eventLogSize *= 2;\n\n        if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n          // Using console['error'] to evade Babel and ESLint\n          console['error'](\"Scheduler Profiling: Event log exceeded maximum size. Don't \" + 'forget to call `stopLoggingProfilingEvents()`.');\n          stopLoggingProfilingEvents();\n          return;\n        }\n\n        var newEventLog = new Int32Array(eventLogSize * 4);\n        newEventLog.set(eventLog);\n        eventLogBuffer = newEventLog.buffer;\n        eventLog = newEventLog;\n      }\n\n      eventLog.set(entries, offset);\n    }\n  }\n\n  function startLoggingProfilingEvents() {\n    eventLogSize = INITIAL_EVENT_LOG_SIZE;\n    eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n    eventLog = new Int32Array(eventLogBuffer);\n    eventLogIndex = 0;\n  }\n\n  function stopLoggingProfilingEvents() {\n    var buffer = eventLogBuffer;\n    eventLogSize = 0;\n    eventLogBuffer = null;\n    eventLog = null;\n    eventLogIndex = 0;\n    return buffer;\n  }\n\n  function markTaskStart(task, ms) {\n    {\n      profilingState[QUEUE_SIZE]++;\n\n      if (eventLog !== null) {\n        // performance.now returns a float, representing milliseconds. When the\n        // event is logged, it's coerced to an int. Convert to microseconds to\n        // maintain extra degrees of precision.\n        logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\n      }\n    }\n  }\n\n  function markTaskCompleted(task, ms) {\n    {\n      profilingState[PRIORITY] = NoPriority;\n      profilingState[CURRENT_TASK_ID] = 0;\n      profilingState[QUEUE_SIZE]--;\n\n      if (eventLog !== null) {\n        logEvent([TaskCompleteEvent, ms * 1000, task.id]);\n      }\n    }\n  }\n\n  function markTaskCanceled(task, ms) {\n    {\n      profilingState[QUEUE_SIZE]--;\n\n      if (eventLog !== null) {\n        logEvent([TaskCancelEvent, ms * 1000, task.id]);\n      }\n    }\n  }\n\n  function markTaskErrored(task, ms) {\n    {\n      profilingState[PRIORITY] = NoPriority;\n      profilingState[CURRENT_TASK_ID] = 0;\n      profilingState[QUEUE_SIZE]--;\n\n      if (eventLog !== null) {\n        logEvent([TaskErrorEvent, ms * 1000, task.id]);\n      }\n    }\n  }\n\n  function markTaskRun(task, ms) {\n    {\n      runIdCounter++;\n      profilingState[PRIORITY] = task.priorityLevel;\n      profilingState[CURRENT_TASK_ID] = task.id;\n      profilingState[CURRENT_RUN_ID] = runIdCounter;\n\n      if (eventLog !== null) {\n        logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\n      }\n    }\n  }\n\n  function markTaskYield(task, ms) {\n    {\n      profilingState[PRIORITY] = NoPriority;\n      profilingState[CURRENT_TASK_ID] = 0;\n      profilingState[CURRENT_RUN_ID] = 0;\n\n      if (eventLog !== null) {\n        logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\n      }\n    }\n  }\n\n  function markSchedulerSuspended(ms) {\n    {\n      mainThreadIdCounter++;\n\n      if (eventLog !== null) {\n        logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\n      }\n    }\n  }\n\n  function markSchedulerUnsuspended(ms) {\n    {\n      if (eventLog !== null) {\n        logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\n      }\n    }\n  }\n  /* eslint-disable no-var */\n  // Math.pow(2, 30) - 1\n  // 0b111111111111111111111111111111\n\n\n  var maxSigned31BitInt = 1073741823; // Times out immediately\n\n  var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n  var USER_BLOCKING_PRIORITY = 250;\n  var NORMAL_PRIORITY_TIMEOUT = 5000;\n  var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n  var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\n\n  var taskQueue = [];\n  var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\n  var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\n  var currentTask = null;\n  var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\n  var isPerformingWork = false;\n  var isHostCallbackScheduled = false;\n  var isHostTimeoutScheduled = false;\n\n  function advanceTimers(currentTime) {\n    // Check for tasks that are no longer delayed and add them to the queue.\n    var timer = peek(timerQueue);\n\n    while (timer !== null) {\n      if (timer.callback === null) {\n        // Timer was cancelled.\n        pop(timerQueue);\n      } else if (timer.startTime <= currentTime) {\n        // Timer fired. Transfer to the task queue.\n        pop(timerQueue);\n        timer.sortIndex = timer.expirationTime;\n        push(taskQueue, timer);\n        {\n          markTaskStart(timer, currentTime);\n          timer.isQueued = true;\n        }\n      } else {\n        // Remaining timers are pending.\n        return;\n      }\n\n      timer = peek(timerQueue);\n    }\n  }\n\n  function handleTimeout(currentTime) {\n    isHostTimeoutScheduled = false;\n    advanceTimers(currentTime);\n\n    if (!isHostCallbackScheduled) {\n      if (peek(taskQueue) !== null) {\n        isHostCallbackScheduled = true;\n        requestHostCallback(flushWork);\n      } else {\n        var firstTimer = peek(timerQueue);\n\n        if (firstTimer !== null) {\n          requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n        }\n      }\n    }\n  }\n\n  function flushWork(hasTimeRemaining, initialTime) {\n    {\n      markSchedulerUnsuspended(initialTime);\n    } // We'll need a host callback the next time work is scheduled.\n\n    isHostCallbackScheduled = false;\n\n    if (isHostTimeoutScheduled) {\n      // We scheduled a timeout but it's no longer needed. Cancel it.\n      isHostTimeoutScheduled = false;\n      cancelHostTimeout();\n    }\n\n    isPerformingWork = true;\n    var previousPriorityLevel = currentPriorityLevel;\n\n    try {\n      if (enableProfiling) {\n        try {\n          return workLoop(hasTimeRemaining, initialTime);\n        } catch (error) {\n          if (currentTask !== null) {\n            var currentTime = getCurrentTime();\n            markTaskErrored(currentTask, currentTime);\n            currentTask.isQueued = false;\n          }\n\n          throw error;\n        }\n      } else {\n        // No catch in prod codepath.\n        return workLoop(hasTimeRemaining, initialTime);\n      }\n    } finally {\n      currentTask = null;\n      currentPriorityLevel = previousPriorityLevel;\n      isPerformingWork = false;\n      {\n        var _currentTime = getCurrentTime();\n\n        markSchedulerSuspended(_currentTime);\n      }\n    }\n  }\n\n  function workLoop(hasTimeRemaining, initialTime) {\n    var currentTime = initialTime;\n    advanceTimers(currentTime);\n    currentTask = peek(taskQueue);\n\n    while (currentTask !== null && !enableSchedulerDebugging) {\n      if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n        // This currentTask hasn't expired, and we've reached the deadline.\n        break;\n      }\n\n      var callback = currentTask.callback;\n\n      if (callback !== null) {\n        currentTask.callback = null;\n        currentPriorityLevel = currentTask.priorityLevel;\n        var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n        markTaskRun(currentTask, currentTime);\n        var continuationCallback = callback(didUserCallbackTimeout);\n        currentTime = getCurrentTime();\n\n        if (typeof continuationCallback === 'function') {\n          currentTask.callback = continuationCallback;\n          markTaskYield(currentTask, currentTime);\n        } else {\n          {\n            markTaskCompleted(currentTask, currentTime);\n            currentTask.isQueued = false;\n          }\n\n          if (currentTask === peek(taskQueue)) {\n            pop(taskQueue);\n          }\n        }\n\n        advanceTimers(currentTime);\n      } else {\n        pop(taskQueue);\n      }\n\n      currentTask = peek(taskQueue);\n    } // Return whether there's additional work\n\n\n    if (currentTask !== null) {\n      return true;\n    } else {\n      var firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n\n      return false;\n    }\n  }\n\n  function unstable_runWithPriority(priorityLevel, eventHandler) {\n    switch (priorityLevel) {\n      case ImmediatePriority:\n      case UserBlockingPriority:\n      case NormalPriority:\n      case LowPriority:\n      case IdlePriority:\n        break;\n\n      default:\n        priorityLevel = NormalPriority;\n    }\n\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = priorityLevel;\n\n    try {\n      return eventHandler();\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  }\n\n  function unstable_next(eventHandler) {\n    var priorityLevel;\n\n    switch (currentPriorityLevel) {\n      case ImmediatePriority:\n      case UserBlockingPriority:\n      case NormalPriority:\n        // Shift down to normal priority\n        priorityLevel = NormalPriority;\n        break;\n\n      default:\n        // Anything lower than normal priority should remain at the current level.\n        priorityLevel = currentPriorityLevel;\n        break;\n    }\n\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = priorityLevel;\n\n    try {\n      return eventHandler();\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  }\n\n  function unstable_wrapCallback(callback) {\n    var parentPriorityLevel = currentPriorityLevel;\n    return function () {\n      // This is a fork of runWithPriority, inlined for performance.\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = parentPriorityLevel;\n\n      try {\n        return callback.apply(this, arguments);\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    };\n  }\n\n  function timeoutForPriorityLevel(priorityLevel) {\n    switch (priorityLevel) {\n      case ImmediatePriority:\n        return IMMEDIATE_PRIORITY_TIMEOUT;\n\n      case UserBlockingPriority:\n        return USER_BLOCKING_PRIORITY;\n\n      case IdlePriority:\n        return IDLE_PRIORITY;\n\n      case LowPriority:\n        return LOW_PRIORITY_TIMEOUT;\n\n      case NormalPriority:\n      default:\n        return NORMAL_PRIORITY_TIMEOUT;\n    }\n  }\n\n  function unstable_scheduleCallback(priorityLevel, callback, options) {\n    var currentTime = getCurrentTime();\n    var startTime;\n    var timeout;\n\n    if (typeof options === 'object' && options !== null) {\n      var delay = options.delay;\n\n      if (typeof delay === 'number' && delay > 0) {\n        startTime = currentTime + delay;\n      } else {\n        startTime = currentTime;\n      }\n\n      timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\n    } else {\n      timeout = timeoutForPriorityLevel(priorityLevel);\n      startTime = currentTime;\n    }\n\n    var expirationTime = startTime + timeout;\n    var newTask = {\n      id: taskIdCounter++,\n      callback: callback,\n      priorityLevel: priorityLevel,\n      startTime: startTime,\n      expirationTime: expirationTime,\n      sortIndex: -1\n    };\n    {\n      newTask.isQueued = false;\n    }\n\n    if (startTime > currentTime) {\n      // This is a delayed task.\n      newTask.sortIndex = startTime;\n      push(timerQueue, newTask);\n\n      if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n        // All tasks are delayed, and this is the task with the earliest delay.\n        if (isHostTimeoutScheduled) {\n          // Cancel an existing timeout.\n          cancelHostTimeout();\n        } else {\n          isHostTimeoutScheduled = true;\n        } // Schedule a timeout.\n\n\n        requestHostTimeout(handleTimeout, startTime - currentTime);\n      }\n    } else {\n      newTask.sortIndex = expirationTime;\n      push(taskQueue, newTask);\n      {\n        markTaskStart(newTask, currentTime);\n        newTask.isQueued = true;\n      } // Schedule a host callback, if needed. If we're already performing work,\n      // wait until the next time we yield.\n\n      if (!isHostCallbackScheduled && !isPerformingWork) {\n        isHostCallbackScheduled = true;\n        requestHostCallback(flushWork);\n      }\n    }\n\n    return newTask;\n  }\n\n  function unstable_pauseExecution() {}\n\n  function unstable_continueExecution() {\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  function unstable_getFirstCallbackNode() {\n    return peek(taskQueue);\n  }\n\n  function unstable_cancelCallback(task) {\n    {\n      if (task.isQueued) {\n        var currentTime = getCurrentTime();\n        markTaskCanceled(task, currentTime);\n        task.isQueued = false;\n      }\n    } // Null out the callback to indicate the task has been canceled. (Can't\n    // remove from the queue because you can't remove arbitrary nodes from an\n    // array based heap, only the first one.)\n\n    task.callback = null;\n  }\n\n  function unstable_getCurrentPriorityLevel() {\n    return currentPriorityLevel;\n  }\n\n  function unstable_shouldYield() {\n    var currentTime = getCurrentTime();\n    advanceTimers(currentTime);\n    var firstTask = peek(taskQueue);\n    return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\n  }\n\n  var unstable_requestPaint = requestPaint;\n  var unstable_Profiling = {\n    startLoggingProfilingEvents: startLoggingProfilingEvents,\n    stopLoggingProfilingEvents: stopLoggingProfilingEvents,\n    sharedProfilingBuffer: sharedProfilingBuffer\n  };\n  exports.unstable_IdlePriority = IdlePriority;\n  exports.unstable_ImmediatePriority = ImmediatePriority;\n  exports.unstable_LowPriority = LowPriority;\n  exports.unstable_NormalPriority = NormalPriority;\n  exports.unstable_Profiling = unstable_Profiling;\n  exports.unstable_UserBlockingPriority = UserBlockingPriority;\n  exports.unstable_advanceTime = unstable_advanceTime;\n  exports.unstable_cancelCallback = unstable_cancelCallback;\n  exports.unstable_clearYields = unstable_clearYields;\n  exports.unstable_continueExecution = unstable_continueExecution;\n  exports.unstable_flushAll = unstable_flushAll;\n  exports.unstable_flushAllWithoutAsserting = unstable_flushAllWithoutAsserting;\n  exports.unstable_flushExpired = unstable_flushExpired;\n  exports.unstable_flushNumberOfYields = unstable_flushNumberOfYields;\n  exports.unstable_flushUntilNextPaint = unstable_flushUntilNextPaint;\n  exports.unstable_forceFrameRate = forceFrameRate;\n  exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n  exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n  exports.unstable_next = unstable_next;\n  exports.unstable_now = getCurrentTime;\n  exports.unstable_pauseExecution = unstable_pauseExecution;\n  exports.unstable_requestPaint = unstable_requestPaint;\n  exports.unstable_runWithPriority = unstable_runWithPriority;\n  exports.unstable_scheduleCallback = unstable_scheduleCallback;\n  exports.unstable_shouldYield = unstable_shouldYield;\n  exports.unstable_wrapCallback = unstable_wrapCallback;\n  exports.unstable_yieldValue = unstable_yieldValue;\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/scheduler/umd/scheduler-unstable_mock.development.js"],"names":["global","factory","exports","module","define","amd","self","SchedulerMock","enableSchedulerDebugging","enableProfiling","currentTime","scheduledCallback","scheduledTimeout","timeoutTime","yieldedValues","expectedNumberOfYields","didStop","isFlushing","needsPaint","shouldYieldForPaint","requestHostCallback","callback","requestHostTimeout","ms","cancelHostTimeout","shouldYieldToHost","length","getCurrentTime","forceFrameRate","unstable_flushNumberOfYields","count","Error","cb","hasMoreWork","unstable_flushUntilNextPaint","unstable_flushExpired","unstable_flushAllWithoutAsserting","unstable_clearYields","values","unstable_flushAll","unstable_yieldValue","value","push","unstable_advanceTime","requestPaint","heap","node","index","siftUp","peek","first","undefined","pop","last","siftDown","i","parentIndex","parent","compare","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","NoPriority","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","runIdCounter","mainThreadIdCounter","profilingStateSize","sharedProfilingBuffer","SharedArrayBuffer","Int32Array","BYTES_PER_ELEMENT","ArrayBuffer","profilingState","PRIORITY","CURRENT_TASK_ID","CURRENT_RUN_ID","QUEUE_SIZE","INITIAL_EVENT_LOG_SIZE","MAX_EVENT_LOG_SIZE","eventLogSize","eventLogBuffer","eventLog","eventLogIndex","TaskStartEvent","TaskCompleteEvent","TaskErrorEvent","TaskCancelEvent","TaskRunEvent","TaskYieldEvent","SchedulerSuspendEvent","SchedulerResumeEvent","logEvent","entries","offset","console","stopLoggingProfilingEvents","newEventLog","set","buffer","startLoggingProfilingEvents","markTaskStart","task","priorityLevel","markTaskCompleted","markTaskCanceled","markTaskErrored","markTaskRun","markTaskYield","markSchedulerSuspended","markSchedulerUnsuspended","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","advanceTimers","timer","startTime","expirationTime","isQueued","handleTimeout","flushWork","firstTimer","hasTimeRemaining","initialTime","previousPriorityLevel","workLoop","error","_currentTime","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","timeoutForPriorityLevel","unstable_scheduleCallback","options","timeout","delay","newTask","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","unstable_getCurrentPriorityLevel","unstable_shouldYield","firstTask","unstable_requestPaint","unstable_Profiling","unstable_IdlePriority","unstable_ImmediatePriority","unstable_LowPriority","unstable_NormalPriority","unstable_UserBlockingPriority","unstable_forceFrameRate","unstable_now"],"mappings":"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","sourcesContent":["/** @license React v0.19.1\n * scheduler-unstable_mock.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.SchedulerMock = {}));\n}(this, (function (exports) { 'use strict';\n\n  var enableSchedulerDebugging = false;\n  var enableProfiling = true;\n\n  var currentTime = 0;\n  var scheduledCallback = null;\n  var scheduledTimeout = null;\n  var timeoutTime = -1;\n  var yieldedValues = null;\n  var expectedNumberOfYields = -1;\n  var didStop = false;\n  var isFlushing = false;\n  var needsPaint = false;\n  var shouldYieldForPaint = false;\n  function requestHostCallback(callback) {\n    scheduledCallback = callback;\n  }\n  function requestHostTimeout(callback, ms) {\n    scheduledTimeout = callback;\n    timeoutTime = currentTime + ms;\n  }\n  function cancelHostTimeout() {\n    scheduledTimeout = null;\n    timeoutTime = -1;\n  }\n  function shouldYieldToHost() {\n    if (expectedNumberOfYields !== -1 && yieldedValues !== null && yieldedValues.length >= expectedNumberOfYields || shouldYieldForPaint && needsPaint) {\n      // We yielded at least as many values as expected. Stop flushing.\n      didStop = true;\n      return true;\n    }\n\n    return false;\n  }\n  function getCurrentTime() {\n    return currentTime;\n  }\n  function forceFrameRate() {// No-op\n  }\n\n  function unstable_flushNumberOfYields(count) {\n    if (isFlushing) {\n      throw new Error('Already flushing work.');\n    }\n\n    if (scheduledCallback !== null) {\n      var cb = scheduledCallback;\n      expectedNumberOfYields = count;\n      isFlushing = true;\n\n      try {\n        var hasMoreWork = true;\n\n        do {\n          hasMoreWork = cb(true, currentTime);\n        } while (hasMoreWork && !didStop);\n\n        if (!hasMoreWork) {\n          scheduledCallback = null;\n        }\n      } finally {\n        expectedNumberOfYields = -1;\n        didStop = false;\n        isFlushing = false;\n      }\n    }\n  }\n  function unstable_flushUntilNextPaint() {\n    if (isFlushing) {\n      throw new Error('Already flushing work.');\n    }\n\n    if (scheduledCallback !== null) {\n      var cb = scheduledCallback;\n      shouldYieldForPaint = true;\n      needsPaint = false;\n      isFlushing = true;\n\n      try {\n        var hasMoreWork = true;\n\n        do {\n          hasMoreWork = cb(true, currentTime);\n        } while (hasMoreWork && !didStop);\n\n        if (!hasMoreWork) {\n          scheduledCallback = null;\n        }\n      } finally {\n        shouldYieldForPaint = false;\n        didStop = false;\n        isFlushing = false;\n      }\n    }\n  }\n  function unstable_flushExpired() {\n    if (isFlushing) {\n      throw new Error('Already flushing work.');\n    }\n\n    if (scheduledCallback !== null) {\n      isFlushing = true;\n\n      try {\n        var hasMoreWork = scheduledCallback(false, currentTime);\n\n        if (!hasMoreWork) {\n          scheduledCallback = null;\n        }\n      } finally {\n        isFlushing = false;\n      }\n    }\n  }\n  function unstable_flushAllWithoutAsserting() {\n    // Returns false if no work was flushed.\n    if (isFlushing) {\n      throw new Error('Already flushing work.');\n    }\n\n    if (scheduledCallback !== null) {\n      var cb = scheduledCallback;\n      isFlushing = true;\n\n      try {\n        var hasMoreWork = true;\n\n        do {\n          hasMoreWork = cb(true, currentTime);\n        } while (hasMoreWork);\n\n        if (!hasMoreWork) {\n          scheduledCallback = null;\n        }\n\n        return true;\n      } finally {\n        isFlushing = false;\n      }\n    } else {\n      return false;\n    }\n  }\n  function unstable_clearYields() {\n    if (yieldedValues === null) {\n      return [];\n    }\n\n    var values = yieldedValues;\n    yieldedValues = null;\n    return values;\n  }\n  function unstable_flushAll() {\n    if (yieldedValues !== null) {\n      throw new Error('Log is not empty. Assert on the log of yielded values before ' + 'flushing additional work.');\n    }\n\n    unstable_flushAllWithoutAsserting();\n\n    if (yieldedValues !== null) {\n      throw new Error('While flushing work, something yielded a value. Use an ' + 'assertion helper to assert on the log of yielded values, e.g. ' + 'expect(Scheduler).toFlushAndYield([...])');\n    }\n  }\n  function unstable_yieldValue(value) {\n    if (yieldedValues === null) {\n      yieldedValues = [value];\n    } else {\n      yieldedValues.push(value);\n    }\n  }\n  function unstable_advanceTime(ms) {\n    currentTime += ms;\n\n    if (scheduledTimeout !== null && timeoutTime <= currentTime) {\n      scheduledTimeout(currentTime);\n      timeoutTime = -1;\n      scheduledTimeout = null;\n    }\n  }\n  function requestPaint() {\n    needsPaint = true;\n  }\n\n  function push(heap, node) {\n    var index = heap.length;\n    heap.push(node);\n    siftUp(heap, node, index);\n  }\n  function peek(heap) {\n    var first = heap[0];\n    return first === undefined ? null : first;\n  }\n  function pop(heap) {\n    var first = heap[0];\n\n    if (first !== undefined) {\n      var last = heap.pop();\n\n      if (last !== first) {\n        heap[0] = last;\n        siftDown(heap, last, 0);\n      }\n\n      return first;\n    } else {\n      return null;\n    }\n  }\n\n  function siftUp(heap, node, i) {\n    var index = i;\n\n    while (true) {\n      var parentIndex = index - 1 >>> 1;\n      var parent = heap[parentIndex];\n\n      if (parent !== undefined && compare(parent, node) > 0) {\n        // The parent is larger. Swap positions.\n        heap[parentIndex] = node;\n        heap[index] = parent;\n        index = parentIndex;\n      } else {\n        // The parent is smaller. Exit.\n        return;\n      }\n    }\n  }\n\n  function siftDown(heap, node, i) {\n    var index = i;\n    var length = heap.length;\n\n    while (index < length) {\n      var leftIndex = (index + 1) * 2 - 1;\n      var left = heap[leftIndex];\n      var rightIndex = leftIndex + 1;\n      var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n      if (left !== undefined && compare(left, node) < 0) {\n        if (right !== undefined && compare(right, left) < 0) {\n          heap[index] = right;\n          heap[rightIndex] = node;\n          index = rightIndex;\n        } else {\n          heap[index] = left;\n          heap[leftIndex] = node;\n          index = leftIndex;\n        }\n      } else if (right !== undefined && compare(right, node) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        // Neither child is smaller. Exit.\n        return;\n      }\n    }\n  }\n\n  function compare(a, b) {\n    // Compare sort index first, then task id.\n    var diff = a.sortIndex - b.sortIndex;\n    return diff !== 0 ? diff : a.id - b.id;\n  }\n\n  // TODO: Use symbols?\n  var NoPriority = 0;\n  var ImmediatePriority = 1;\n  var UserBlockingPriority = 2;\n  var NormalPriority = 3;\n  var LowPriority = 4;\n  var IdlePriority = 5;\n\n  var runIdCounter = 0;\n  var mainThreadIdCounter = 0;\n  var profilingStateSize = 4;\n  var sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer\n  typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer\n  typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\n  ;\n  var profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\n\n  var PRIORITY = 0;\n  var CURRENT_TASK_ID = 1;\n  var CURRENT_RUN_ID = 2;\n  var QUEUE_SIZE = 3;\n\n  {\n    profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\n    // array might include canceled tasks.\n\n    profilingState[QUEUE_SIZE] = 0;\n    profilingState[CURRENT_TASK_ID] = 0;\n  } // Bytes per element is 4\n\n\n  var INITIAL_EVENT_LOG_SIZE = 131072;\n  var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\n  var eventLogSize = 0;\n  var eventLogBuffer = null;\n  var eventLog = null;\n  var eventLogIndex = 0;\n  var TaskStartEvent = 1;\n  var TaskCompleteEvent = 2;\n  var TaskErrorEvent = 3;\n  var TaskCancelEvent = 4;\n  var TaskRunEvent = 5;\n  var TaskYieldEvent = 6;\n  var SchedulerSuspendEvent = 7;\n  var SchedulerResumeEvent = 8;\n\n  function logEvent(entries) {\n    if (eventLog !== null) {\n      var offset = eventLogIndex;\n      eventLogIndex += entries.length;\n\n      if (eventLogIndex + 1 > eventLogSize) {\n        eventLogSize *= 2;\n\n        if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n          // Using console['error'] to evade Babel and ESLint\n          console['error'](\"Scheduler Profiling: Event log exceeded maximum size. Don't \" + 'forget to call `stopLoggingProfilingEvents()`.');\n          stopLoggingProfilingEvents();\n          return;\n        }\n\n        var newEventLog = new Int32Array(eventLogSize * 4);\n        newEventLog.set(eventLog);\n        eventLogBuffer = newEventLog.buffer;\n        eventLog = newEventLog;\n      }\n\n      eventLog.set(entries, offset);\n    }\n  }\n\n  function startLoggingProfilingEvents() {\n    eventLogSize = INITIAL_EVENT_LOG_SIZE;\n    eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n    eventLog = new Int32Array(eventLogBuffer);\n    eventLogIndex = 0;\n  }\n  function stopLoggingProfilingEvents() {\n    var buffer = eventLogBuffer;\n    eventLogSize = 0;\n    eventLogBuffer = null;\n    eventLog = null;\n    eventLogIndex = 0;\n    return buffer;\n  }\n  function markTaskStart(task, ms) {\n    {\n      profilingState[QUEUE_SIZE]++;\n\n      if (eventLog !== null) {\n        // performance.now returns a float, representing milliseconds. When the\n        // event is logged, it's coerced to an int. Convert to microseconds to\n        // maintain extra degrees of precision.\n        logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\n      }\n    }\n  }\n  function markTaskCompleted(task, ms) {\n    {\n      profilingState[PRIORITY] = NoPriority;\n      profilingState[CURRENT_TASK_ID] = 0;\n      profilingState[QUEUE_SIZE]--;\n\n      if (eventLog !== null) {\n        logEvent([TaskCompleteEvent, ms * 1000, task.id]);\n      }\n    }\n  }\n  function markTaskCanceled(task, ms) {\n    {\n      profilingState[QUEUE_SIZE]--;\n\n      if (eventLog !== null) {\n        logEvent([TaskCancelEvent, ms * 1000, task.id]);\n      }\n    }\n  }\n  function markTaskErrored(task, ms) {\n    {\n      profilingState[PRIORITY] = NoPriority;\n      profilingState[CURRENT_TASK_ID] = 0;\n      profilingState[QUEUE_SIZE]--;\n\n      if (eventLog !== null) {\n        logEvent([TaskErrorEvent, ms * 1000, task.id]);\n      }\n    }\n  }\n  function markTaskRun(task, ms) {\n    {\n      runIdCounter++;\n      profilingState[PRIORITY] = task.priorityLevel;\n      profilingState[CURRENT_TASK_ID] = task.id;\n      profilingState[CURRENT_RUN_ID] = runIdCounter;\n\n      if (eventLog !== null) {\n        logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\n      }\n    }\n  }\n  function markTaskYield(task, ms) {\n    {\n      profilingState[PRIORITY] = NoPriority;\n      profilingState[CURRENT_TASK_ID] = 0;\n      profilingState[CURRENT_RUN_ID] = 0;\n\n      if (eventLog !== null) {\n        logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\n      }\n    }\n  }\n  function markSchedulerSuspended(ms) {\n    {\n      mainThreadIdCounter++;\n\n      if (eventLog !== null) {\n        logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\n      }\n    }\n  }\n  function markSchedulerUnsuspended(ms) {\n    {\n      if (eventLog !== null) {\n        logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\n      }\n    }\n  }\n\n  /* eslint-disable no-var */\n  // Math.pow(2, 30) - 1\n  // 0b111111111111111111111111111111\n\n  var maxSigned31BitInt = 1073741823; // Times out immediately\n\n  var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n  var USER_BLOCKING_PRIORITY = 250;\n  var NORMAL_PRIORITY_TIMEOUT = 5000;\n  var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n  var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\n\n  var taskQueue = [];\n  var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\n  var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n  var currentTask = null;\n  var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\n  var isPerformingWork = false;\n  var isHostCallbackScheduled = false;\n  var isHostTimeoutScheduled = false;\n\n  function advanceTimers(currentTime) {\n    // Check for tasks that are no longer delayed and add them to the queue.\n    var timer = peek(timerQueue);\n\n    while (timer !== null) {\n      if (timer.callback === null) {\n        // Timer was cancelled.\n        pop(timerQueue);\n      } else if (timer.startTime <= currentTime) {\n        // Timer fired. Transfer to the task queue.\n        pop(timerQueue);\n        timer.sortIndex = timer.expirationTime;\n        push(taskQueue, timer);\n\n        {\n          markTaskStart(timer, currentTime);\n          timer.isQueued = true;\n        }\n      } else {\n        // Remaining timers are pending.\n        return;\n      }\n\n      timer = peek(timerQueue);\n    }\n  }\n\n  function handleTimeout(currentTime) {\n    isHostTimeoutScheduled = false;\n    advanceTimers(currentTime);\n\n    if (!isHostCallbackScheduled) {\n      if (peek(taskQueue) !== null) {\n        isHostCallbackScheduled = true;\n        requestHostCallback(flushWork);\n      } else {\n        var firstTimer = peek(timerQueue);\n\n        if (firstTimer !== null) {\n          requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n        }\n      }\n    }\n  }\n\n  function flushWork(hasTimeRemaining, initialTime) {\n    {\n      markSchedulerUnsuspended(initialTime);\n    } // We'll need a host callback the next time work is scheduled.\n\n\n    isHostCallbackScheduled = false;\n\n    if (isHostTimeoutScheduled) {\n      // We scheduled a timeout but it's no longer needed. Cancel it.\n      isHostTimeoutScheduled = false;\n      cancelHostTimeout();\n    }\n\n    isPerformingWork = true;\n    var previousPriorityLevel = currentPriorityLevel;\n\n    try {\n      if (enableProfiling) {\n        try {\n          return workLoop(hasTimeRemaining, initialTime);\n        } catch (error) {\n          if (currentTask !== null) {\n            var currentTime = getCurrentTime();\n            markTaskErrored(currentTask, currentTime);\n            currentTask.isQueued = false;\n          }\n\n          throw error;\n        }\n      } else {\n        // No catch in prod codepath.\n        return workLoop(hasTimeRemaining, initialTime);\n      }\n    } finally {\n      currentTask = null;\n      currentPriorityLevel = previousPriorityLevel;\n      isPerformingWork = false;\n\n      {\n        var _currentTime = getCurrentTime();\n\n        markSchedulerSuspended(_currentTime);\n      }\n    }\n  }\n\n  function workLoop(hasTimeRemaining, initialTime) {\n    var currentTime = initialTime;\n    advanceTimers(currentTime);\n    currentTask = peek(taskQueue);\n\n    while (currentTask !== null && !(enableSchedulerDebugging )) {\n      if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n        // This currentTask hasn't expired, and we've reached the deadline.\n        break;\n      }\n\n      var callback = currentTask.callback;\n\n      if (callback !== null) {\n        currentTask.callback = null;\n        currentPriorityLevel = currentTask.priorityLevel;\n        var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n        markTaskRun(currentTask, currentTime);\n        var continuationCallback = callback(didUserCallbackTimeout);\n        currentTime = getCurrentTime();\n\n        if (typeof continuationCallback === 'function') {\n          currentTask.callback = continuationCallback;\n          markTaskYield(currentTask, currentTime);\n        } else {\n          {\n            markTaskCompleted(currentTask, currentTime);\n            currentTask.isQueued = false;\n          }\n\n          if (currentTask === peek(taskQueue)) {\n            pop(taskQueue);\n          }\n        }\n\n        advanceTimers(currentTime);\n      } else {\n        pop(taskQueue);\n      }\n\n      currentTask = peek(taskQueue);\n    } // Return whether there's additional work\n\n\n    if (currentTask !== null) {\n      return true;\n    } else {\n      var firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n\n      return false;\n    }\n  }\n\n  function unstable_runWithPriority(priorityLevel, eventHandler) {\n    switch (priorityLevel) {\n      case ImmediatePriority:\n      case UserBlockingPriority:\n      case NormalPriority:\n      case LowPriority:\n      case IdlePriority:\n        break;\n\n      default:\n        priorityLevel = NormalPriority;\n    }\n\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = priorityLevel;\n\n    try {\n      return eventHandler();\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  }\n\n  function unstable_next(eventHandler) {\n    var priorityLevel;\n\n    switch (currentPriorityLevel) {\n      case ImmediatePriority:\n      case UserBlockingPriority:\n      case NormalPriority:\n        // Shift down to normal priority\n        priorityLevel = NormalPriority;\n        break;\n\n      default:\n        // Anything lower than normal priority should remain at the current level.\n        priorityLevel = currentPriorityLevel;\n        break;\n    }\n\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = priorityLevel;\n\n    try {\n      return eventHandler();\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  }\n\n  function unstable_wrapCallback(callback) {\n    var parentPriorityLevel = currentPriorityLevel;\n    return function () {\n      // This is a fork of runWithPriority, inlined for performance.\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = parentPriorityLevel;\n\n      try {\n        return callback.apply(this, arguments);\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    };\n  }\n\n  function timeoutForPriorityLevel(priorityLevel) {\n    switch (priorityLevel) {\n      case ImmediatePriority:\n        return IMMEDIATE_PRIORITY_TIMEOUT;\n\n      case UserBlockingPriority:\n        return USER_BLOCKING_PRIORITY;\n\n      case IdlePriority:\n        return IDLE_PRIORITY;\n\n      case LowPriority:\n        return LOW_PRIORITY_TIMEOUT;\n\n      case NormalPriority:\n      default:\n        return NORMAL_PRIORITY_TIMEOUT;\n    }\n  }\n\n  function unstable_scheduleCallback(priorityLevel, callback, options) {\n    var currentTime = getCurrentTime();\n    var startTime;\n    var timeout;\n\n    if (typeof options === 'object' && options !== null) {\n      var delay = options.delay;\n\n      if (typeof delay === 'number' && delay > 0) {\n        startTime = currentTime + delay;\n      } else {\n        startTime = currentTime;\n      }\n\n      timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\n    } else {\n      timeout = timeoutForPriorityLevel(priorityLevel);\n      startTime = currentTime;\n    }\n\n    var expirationTime = startTime + timeout;\n    var newTask = {\n      id: taskIdCounter++,\n      callback: callback,\n      priorityLevel: priorityLevel,\n      startTime: startTime,\n      expirationTime: expirationTime,\n      sortIndex: -1\n    };\n\n    {\n      newTask.isQueued = false;\n    }\n\n    if (startTime > currentTime) {\n      // This is a delayed task.\n      newTask.sortIndex = startTime;\n      push(timerQueue, newTask);\n\n      if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n        // All tasks are delayed, and this is the task with the earliest delay.\n        if (isHostTimeoutScheduled) {\n          // Cancel an existing timeout.\n          cancelHostTimeout();\n        } else {\n          isHostTimeoutScheduled = true;\n        } // Schedule a timeout.\n\n\n        requestHostTimeout(handleTimeout, startTime - currentTime);\n      }\n    } else {\n      newTask.sortIndex = expirationTime;\n      push(taskQueue, newTask);\n\n      {\n        markTaskStart(newTask, currentTime);\n        newTask.isQueued = true;\n      } // Schedule a host callback, if needed. If we're already performing work,\n      // wait until the next time we yield.\n\n\n      if (!isHostCallbackScheduled && !isPerformingWork) {\n        isHostCallbackScheduled = true;\n        requestHostCallback(flushWork);\n      }\n    }\n\n    return newTask;\n  }\n\n  function unstable_pauseExecution() {\n  }\n\n  function unstable_continueExecution() {\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  function unstable_getFirstCallbackNode() {\n    return peek(taskQueue);\n  }\n\n  function unstable_cancelCallback(task) {\n    {\n      if (task.isQueued) {\n        var currentTime = getCurrentTime();\n        markTaskCanceled(task, currentTime);\n        task.isQueued = false;\n      }\n    } // Null out the callback to indicate the task has been canceled. (Can't\n    // remove from the queue because you can't remove arbitrary nodes from an\n    // array based heap, only the first one.)\n\n\n    task.callback = null;\n  }\n\n  function unstable_getCurrentPriorityLevel() {\n    return currentPriorityLevel;\n  }\n\n  function unstable_shouldYield() {\n    var currentTime = getCurrentTime();\n    advanceTimers(currentTime);\n    var firstTask = peek(taskQueue);\n    return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\n  }\n\n  var unstable_requestPaint = requestPaint;\n  var unstable_Profiling =  {\n    startLoggingProfilingEvents: startLoggingProfilingEvents,\n    stopLoggingProfilingEvents: stopLoggingProfilingEvents,\n    sharedProfilingBuffer: sharedProfilingBuffer\n  } ;\n\n  exports.unstable_IdlePriority = IdlePriority;\n  exports.unstable_ImmediatePriority = ImmediatePriority;\n  exports.unstable_LowPriority = LowPriority;\n  exports.unstable_NormalPriority = NormalPriority;\n  exports.unstable_Profiling = unstable_Profiling;\n  exports.unstable_UserBlockingPriority = UserBlockingPriority;\n  exports.unstable_advanceTime = unstable_advanceTime;\n  exports.unstable_cancelCallback = unstable_cancelCallback;\n  exports.unstable_clearYields = unstable_clearYields;\n  exports.unstable_continueExecution = unstable_continueExecution;\n  exports.unstable_flushAll = unstable_flushAll;\n  exports.unstable_flushAllWithoutAsserting = unstable_flushAllWithoutAsserting;\n  exports.unstable_flushExpired = unstable_flushExpired;\n  exports.unstable_flushNumberOfYields = unstable_flushNumberOfYields;\n  exports.unstable_flushUntilNextPaint = unstable_flushUntilNextPaint;\n  exports.unstable_forceFrameRate = forceFrameRate;\n  exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n  exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n  exports.unstable_next = unstable_next;\n  exports.unstable_now = getCurrentTime;\n  exports.unstable_pauseExecution = unstable_pauseExecution;\n  exports.unstable_requestPaint = unstable_requestPaint;\n  exports.unstable_runWithPriority = unstable_runWithPriority;\n  exports.unstable_scheduleCallback = unstable_scheduleCallback;\n  exports.unstable_shouldYield = unstable_shouldYield;\n  exports.unstable_wrapCallback = unstable_wrapCallback;\n  exports.unstable_yieldValue = unstable_yieldValue;\n\n})));\n"]},"metadata":{},"sourceType":"script"}