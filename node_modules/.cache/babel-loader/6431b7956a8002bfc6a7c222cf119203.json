{"ast":null,"code":"// Generated by CoffeeScript 1.9.3\nvar Block, Layout, SpecialString, fn, i, len, object, prop, ref, terminalWidth;\nBlock = require('./layout/Block');\nobject = require('utila').object;\nSpecialString = require('./layout/SpecialString');\nterminalWidth = require('./tools').getCols();\n\nmodule.exports = Layout = function () {\n  var self;\n  self = Layout;\n  Layout._rootBlockDefaultConfig = {\n    linePrependor: {\n      options: {\n        amount: 0\n      }\n    },\n    lineAppendor: {\n      options: {\n        amount: 0\n      }\n    },\n    blockPrependor: {\n      options: {\n        amount: 0\n      }\n    },\n    blockAppendor: {\n      options: {\n        amount: 0\n      }\n    }\n  };\n  Layout._defaultConfig = {\n    terminalWidth: terminalWidth\n  };\n\n  function Layout(config, rootBlockConfig) {\n    var rootConfig;\n\n    if (config == null) {\n      config = {};\n    }\n\n    if (rootBlockConfig == null) {\n      rootBlockConfig = {};\n    }\n\n    this._written = [];\n    this._activeBlock = null;\n    this._config = object.append(self._defaultConfig, config);\n    rootConfig = object.append(self._rootBlockDefaultConfig, rootBlockConfig);\n    this._root = new Block(this, null, rootConfig, '__root');\n\n    this._root._open();\n  }\n\n  Layout.prototype.getRootBlock = function () {\n    return this._root;\n  };\n\n  Layout.prototype._append = function (text) {\n    return this._written.push(text);\n  };\n\n  Layout.prototype._appendLine = function (text) {\n    var s;\n\n    this._append(text);\n\n    s = SpecialString(text);\n\n    if (s.length < this._config.terminalWidth) {\n      this._append('<none>\\n</none>');\n    }\n\n    return this;\n  };\n\n  Layout.prototype.get = function () {\n    this._ensureClosed();\n\n    if (this._written[this._written.length - 1] === '<none>\\n</none>') {\n      this._written.pop();\n    }\n\n    return this._written.join(\"\");\n  };\n\n  Layout.prototype._ensureClosed = function () {\n    if (this._activeBlock !== this._root) {\n      throw Error(\"Not all the blocks have been closed. Please call block.close() on all open blocks.\");\n    }\n\n    if (this._root.isOpen()) {\n      this._root.close();\n    }\n  };\n\n  return Layout;\n}();\n\nref = ['openBlock', 'write'];\n\nfn = function () {\n  var method;\n  method = prop;\n  return Layout.prototype[method] = function () {\n    return this._root[method].apply(this._root, arguments);\n  };\n};\n\nfor (i = 0, len = ref.length; i < len; i++) {\n  prop = ref[i];\n  fn();\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/renderkid/lib/Layout.js"],"names":["Block","Layout","SpecialString","fn","i","len","object","prop","ref","terminalWidth","require","getCols","module","exports","self","_rootBlockDefaultConfig","linePrependor","options","amount","lineAppendor","blockPrependor","blockAppendor","_defaultConfig","config","rootBlockConfig","rootConfig","_written","_activeBlock","_config","append","_root","_open","prototype","getRootBlock","_append","text","push","_appendLine","s","length","get","_ensureClosed","pop","join","Error","isOpen","close","method","apply","arguments"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.9.3\nvar Block, Layout, SpecialString, fn, i, len, object, prop, ref, terminalWidth;\n\nBlock = require('./layout/Block');\n\nobject = require('utila').object;\n\nSpecialString = require('./layout/SpecialString');\n\nterminalWidth = require('./tools').getCols();\n\nmodule.exports = Layout = (function() {\n  var self;\n\n  self = Layout;\n\n  Layout._rootBlockDefaultConfig = {\n    linePrependor: {\n      options: {\n        amount: 0\n      }\n    },\n    lineAppendor: {\n      options: {\n        amount: 0\n      }\n    },\n    blockPrependor: {\n      options: {\n        amount: 0\n      }\n    },\n    blockAppendor: {\n      options: {\n        amount: 0\n      }\n    }\n  };\n\n  Layout._defaultConfig = {\n    terminalWidth: terminalWidth\n  };\n\n  function Layout(config, rootBlockConfig) {\n    var rootConfig;\n    if (config == null) {\n      config = {};\n    }\n    if (rootBlockConfig == null) {\n      rootBlockConfig = {};\n    }\n    this._written = [];\n    this._activeBlock = null;\n    this._config = object.append(self._defaultConfig, config);\n    rootConfig = object.append(self._rootBlockDefaultConfig, rootBlockConfig);\n    this._root = new Block(this, null, rootConfig, '__root');\n    this._root._open();\n  }\n\n  Layout.prototype.getRootBlock = function() {\n    return this._root;\n  };\n\n  Layout.prototype._append = function(text) {\n    return this._written.push(text);\n  };\n\n  Layout.prototype._appendLine = function(text) {\n    var s;\n    this._append(text);\n    s = SpecialString(text);\n    if (s.length < this._config.terminalWidth) {\n      this._append('<none>\\n</none>');\n    }\n    return this;\n  };\n\n  Layout.prototype.get = function() {\n    this._ensureClosed();\n    if (this._written[this._written.length - 1] === '<none>\\n</none>') {\n      this._written.pop();\n    }\n    return this._written.join(\"\");\n  };\n\n  Layout.prototype._ensureClosed = function() {\n    if (this._activeBlock !== this._root) {\n      throw Error(\"Not all the blocks have been closed. Please call block.close() on all open blocks.\");\n    }\n    if (this._root.isOpen()) {\n      this._root.close();\n    }\n  };\n\n  return Layout;\n\n})();\n\nref = ['openBlock', 'write'];\nfn = function() {\n  var method;\n  method = prop;\n  return Layout.prototype[method] = function() {\n    return this._root[method].apply(this._root, arguments);\n  };\n};\nfor (i = 0, len = ref.length; i < len; i++) {\n  prop = ref[i];\n  fn();\n}\n"]},"metadata":{},"sourceType":"script"}