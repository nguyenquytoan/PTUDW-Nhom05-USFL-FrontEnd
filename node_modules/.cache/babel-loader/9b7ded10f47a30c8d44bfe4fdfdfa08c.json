{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst prettyBytes = require('pretty-bytes');\n\nmodule.exports = maximumFileSizeToCacheInBytes => {\n  return originalManifest => {\n    const warnings = [];\n    const manifest = originalManifest.filter(entry => {\n      if (entry.size <= maximumFileSizeToCacheInBytes) {\n        return true;\n      }\n\n      warnings.push(`${entry.url} is ${prettyBytes(entry.size)}, and won't ` + `be precached. Configure maximumFileSizeToCacheInBytes to change ` + `this limit.`);\n      return false;\n    });\n    return {\n      manifest,\n      warnings\n    };\n  };\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-build/src/lib/maximum-size-transform.js"],"names":["prettyBytes","require","module","exports","maximumFileSizeToCacheInBytes","originalManifest","warnings","manifest","filter","entry","size","push","url"],"mappings":"AAAA;;;;;;;AAQA,MAAMA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AAEAC,MAAM,CAACC,OAAP,GAAkBC,6BAAD,IAAmC;AAClD,SAAQC,gBAAD,IAAsB;AAC3B,UAAMC,QAAQ,GAAG,EAAjB;AACA,UAAMC,QAAQ,GAAGF,gBAAgB,CAACG,MAAjB,CAAyBC,KAAD,IAAW;AAClD,UAAIA,KAAK,CAACC,IAAN,IAAcN,6BAAlB,EAAiD;AAC/C,eAAO,IAAP;AACD;;AAEDE,MAAAA,QAAQ,CAACK,IAAT,CAAe,GAAEF,KAAK,CAACG,GAAI,OAAMZ,WAAW,CAACS,KAAK,CAACC,IAAP,CAAa,cAA3C,GACX,kEADW,GAEX,aAFH;AAGA,aAAO,KAAP;AACD,KATgB,CAAjB;AAWA,WAAO;AAACH,MAAAA,QAAD;AAAWD,MAAAA;AAAX,KAAP;AACD,GAdD;AAeD,CAhBD","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst prettyBytes = require('pretty-bytes');\n\nmodule.exports = (maximumFileSizeToCacheInBytes) => {\n  return (originalManifest) => {\n    const warnings = [];\n    const manifest = originalManifest.filter((entry) => {\n      if (entry.size <= maximumFileSizeToCacheInBytes) {\n        return true;\n      }\n\n      warnings.push(`${entry.url} is ${prettyBytes(entry.size)}, and won't ` +\n        `be precached. Configure maximumFileSizeToCacheInBytes to change ` +\n        `this limit.`);\n      return false;\n    });\n\n    return {manifest, warnings};\n  };\n};\n"]},"metadata":{},"sourceType":"script"}