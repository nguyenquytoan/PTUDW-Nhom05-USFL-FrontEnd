{"ast":null,"code":"/**\n * @fileoverview Rule to check the spacing around the * in yield* expressions.\n * @author Bryan Smith\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require or disallow spacing around the `*` in `yield*` expressions\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/yield-star-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      oneOf: [{\n        enum: [\"before\", \"after\", \"both\", \"neither\"]\n      }, {\n        type: \"object\",\n        properties: {\n          before: {\n            type: \"boolean\"\n          },\n          after: {\n            type: \"boolean\"\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      missingBefore: \"Missing space before *.\",\n      missingAfter: \"Missing space after *.\",\n      unexpectedBefore: \"Unexpected space before *.\",\n      unexpectedAfter: \"Unexpected space after *.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n\n    const mode = function (option) {\n      if (!option || typeof option === \"string\") {\n        return {\n          before: {\n            before: true,\n            after: false\n          },\n          after: {\n            before: false,\n            after: true\n          },\n          both: {\n            before: true,\n            after: true\n          },\n          neither: {\n            before: false,\n            after: false\n          }\n        }[option || \"after\"];\n      }\n\n      return option;\n    }(context.options[0]);\n    /**\n     * Checks the spacing between two tokens before or after the star token.\n     * @param {string} side Either \"before\" or \"after\".\n     * @param {Token} leftToken `function` keyword token if side is \"before\", or\n     *     star token if side is \"after\".\n     * @param {Token} rightToken Star token if side is \"before\", or identifier\n     *     token if side is \"after\".\n     * @returns {void}\n     */\n\n\n    function checkSpacing(side, leftToken, rightToken) {\n      if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken) !== mode[side]) {\n        const after = leftToken.value === \"*\";\n        const spaceRequired = mode[side];\n        const node = after ? leftToken : rightToken;\n        let messageId = \"\";\n\n        if (spaceRequired) {\n          messageId = side === \"before\" ? \"missingBefore\" : \"missingAfter\";\n        } else {\n          messageId = side === \"before\" ? \"unexpectedBefore\" : \"unexpectedAfter\";\n        }\n\n        context.report({\n          node,\n          messageId,\n\n          fix(fixer) {\n            if (spaceRequired) {\n              if (after) {\n                return fixer.insertTextAfter(node, \" \");\n              }\n\n              return fixer.insertTextBefore(node, \" \");\n            }\n\n            return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n          }\n\n        });\n      }\n    }\n    /**\n     * Enforces the spacing around the star if node is a yield* expression.\n     * @param {ASTNode} node A yield expression node.\n     * @returns {void}\n     */\n\n\n    function checkExpression(node) {\n      if (!node.delegate) {\n        return;\n      }\n\n      const tokens = sourceCode.getFirstTokens(node, 3);\n      const yieldToken = tokens[0];\n      const starToken = tokens[1];\n      const nextToken = tokens[2];\n      checkSpacing(\"before\", yieldToken, starToken);\n      checkSpacing(\"after\", starToken, nextToken);\n    }\n\n    return {\n      YieldExpression: checkExpression\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/yield-star-spacing.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","oneOf","enum","properties","before","after","additionalProperties","messages","missingBefore","missingAfter","unexpectedBefore","unexpectedAfter","create","context","sourceCode","getSourceCode","mode","option","both","neither","options","checkSpacing","side","leftToken","rightToken","isSpaceBetweenTokens","value","spaceRequired","node","messageId","report","fix","fixer","insertTextAfter","insertTextBefore","removeRange","range","checkExpression","delegate","tokens","getFirstTokens","yieldToken","starToken","nextToken","YieldExpression"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,QADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,oEADX;AAEFC,MAAAA,QAAQ,EAAE,cAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,OAAO,EAAE,YAVP;AAYFC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,KAAK,EAAE,CACH;AACIC,QAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,OAAX,EAAoB,MAApB,EAA4B,SAA5B;AADV,OADG,EAIH;AACIT,QAAAA,IAAI,EAAE,QADV;AAEIU,QAAAA,UAAU,EAAE;AACRC,UAAAA,MAAM,EAAE;AAAEX,YAAAA,IAAI,EAAE;AAAR,WADA;AAERY,UAAAA,KAAK,EAAE;AAAEZ,YAAAA,IAAI,EAAE;AAAR;AAFC,SAFhB;AAMIa,QAAAA,oBAAoB,EAAE;AAN1B,OAJG;AADX,KADI,CAZN;AA6BFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,aAAa,EAAE,yBADT;AAENC,MAAAA,YAAY,EAAE,wBAFR;AAGNC,MAAAA,gBAAgB,EAAE,4BAHZ;AAINC,MAAAA,eAAe,EAAE;AAJX;AA7BR,GADO;;AAsCbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;;AAEA,UAAMC,IAAI,GAAI,UAASC,MAAT,EAAiB;AAC3B,UAAI,CAACA,MAAD,IAAW,OAAOA,MAAP,KAAkB,QAAjC,EAA2C;AACvC,eAAO;AACHb,UAAAA,MAAM,EAAE;AAAEA,YAAAA,MAAM,EAAE,IAAV;AAAgBC,YAAAA,KAAK,EAAE;AAAvB,WADL;AAEHA,UAAAA,KAAK,EAAE;AAAED,YAAAA,MAAM,EAAE,KAAV;AAAiBC,YAAAA,KAAK,EAAE;AAAxB,WAFJ;AAGHa,UAAAA,IAAI,EAAE;AAAEd,YAAAA,MAAM,EAAE,IAAV;AAAgBC,YAAAA,KAAK,EAAE;AAAvB,WAHH;AAIHc,UAAAA,OAAO,EAAE;AAAEf,YAAAA,MAAM,EAAE,KAAV;AAAiBC,YAAAA,KAAK,EAAE;AAAxB;AAJN,UAKLY,MAAM,IAAI,OALL,CAAP;AAMH;;AACD,aAAOA,MAAP;AACH,KAVa,CAUZJ,OAAO,CAACO,OAAR,CAAgB,CAAhB,CAVY,CAAd;AAYA;;;;;;;;;;;AASA,aAASC,YAAT,CAAsBC,IAAtB,EAA4BC,SAA5B,EAAuCC,UAAvC,EAAmD;AAC/C,UAAIV,UAAU,CAACW,oBAAX,CAAgCF,SAAhC,EAA2CC,UAA3C,MAA2DR,IAAI,CAACM,IAAD,CAAnE,EAA2E;AACvE,cAAMjB,KAAK,GAAGkB,SAAS,CAACG,KAAV,KAAoB,GAAlC;AACA,cAAMC,aAAa,GAAGX,IAAI,CAACM,IAAD,CAA1B;AACA,cAAMM,IAAI,GAAGvB,KAAK,GAAGkB,SAAH,GAAeC,UAAjC;AACA,YAAIK,SAAS,GAAG,EAAhB;;AAEA,YAAIF,aAAJ,EAAmB;AACfE,UAAAA,SAAS,GAAGP,IAAI,KAAK,QAAT,GAAoB,eAApB,GAAsC,cAAlD;AACH,SAFD,MAEO;AACHO,UAAAA,SAAS,GAAGP,IAAI,KAAK,QAAT,GAAoB,kBAApB,GAAyC,iBAArD;AACH;;AAEDT,QAAAA,OAAO,CAACiB,MAAR,CAAe;AACXF,UAAAA,IADW;AAEXC,UAAAA,SAFW;;AAGXE,UAAAA,GAAG,CAACC,KAAD,EAAQ;AACP,gBAAIL,aAAJ,EAAmB;AACf,kBAAItB,KAAJ,EAAW;AACP,uBAAO2B,KAAK,CAACC,eAAN,CAAsBL,IAAtB,EAA4B,GAA5B,CAAP;AACH;;AACD,qBAAOI,KAAK,CAACE,gBAAN,CAAuBN,IAAvB,EAA6B,GAA7B,CAAP;AACH;;AACD,mBAAOI,KAAK,CAACG,WAAN,CAAkB,CAACZ,SAAS,CAACa,KAAV,CAAgB,CAAhB,CAAD,EAAqBZ,UAAU,CAACY,KAAX,CAAiB,CAAjB,CAArB,CAAlB,CAAP;AACH;;AAXU,SAAf;AAaH;AACJ;AAED;;;;;;;AAKA,aAASC,eAAT,CAAyBT,IAAzB,EAA+B;AAC3B,UAAI,CAACA,IAAI,CAACU,QAAV,EAAoB;AAChB;AACH;;AAED,YAAMC,MAAM,GAAGzB,UAAU,CAAC0B,cAAX,CAA0BZ,IAA1B,EAAgC,CAAhC,CAAf;AACA,YAAMa,UAAU,GAAGF,MAAM,CAAC,CAAD,CAAzB;AACA,YAAMG,SAAS,GAAGH,MAAM,CAAC,CAAD,CAAxB;AACA,YAAMI,SAAS,GAAGJ,MAAM,CAAC,CAAD,CAAxB;AAEAlB,MAAAA,YAAY,CAAC,QAAD,EAAWoB,UAAX,EAAuBC,SAAvB,CAAZ;AACArB,MAAAA,YAAY,CAAC,OAAD,EAAUqB,SAAV,EAAqBC,SAArB,CAAZ;AACH;;AAED,WAAO;AACHC,MAAAA,eAAe,EAAEP;AADd,KAAP;AAIH;;AAlHY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to check the spacing around the * in yield* expressions.\n * @author Bryan Smith\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require or disallow spacing around the `*` in `yield*` expressions\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/yield-star-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        enum: [\"before\", \"after\", \"both\", \"neither\"]\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            before: { type: \"boolean\" },\n                            after: { type: \"boolean\" }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n        messages: {\n            missingBefore: \"Missing space before *.\",\n            missingAfter: \"Missing space after *.\",\n            unexpectedBefore: \"Unexpected space before *.\",\n            unexpectedAfter: \"Unexpected space after *.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        const mode = (function(option) {\n            if (!option || typeof option === \"string\") {\n                return {\n                    before: { before: true, after: false },\n                    after: { before: false, after: true },\n                    both: { before: true, after: true },\n                    neither: { before: false, after: false }\n                }[option || \"after\"];\n            }\n            return option;\n        }(context.options[0]));\n\n        /**\n         * Checks the spacing between two tokens before or after the star token.\n         * @param {string} side Either \"before\" or \"after\".\n         * @param {Token} leftToken `function` keyword token if side is \"before\", or\n         *     star token if side is \"after\".\n         * @param {Token} rightToken Star token if side is \"before\", or identifier\n         *     token if side is \"after\".\n         * @returns {void}\n         */\n        function checkSpacing(side, leftToken, rightToken) {\n            if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken) !== mode[side]) {\n                const after = leftToken.value === \"*\";\n                const spaceRequired = mode[side];\n                const node = after ? leftToken : rightToken;\n                let messageId = \"\";\n\n                if (spaceRequired) {\n                    messageId = side === \"before\" ? \"missingBefore\" : \"missingAfter\";\n                } else {\n                    messageId = side === \"before\" ? \"unexpectedBefore\" : \"unexpectedAfter\";\n                }\n\n                context.report({\n                    node,\n                    messageId,\n                    fix(fixer) {\n                        if (spaceRequired) {\n                            if (after) {\n                                return fixer.insertTextAfter(node, \" \");\n                            }\n                            return fixer.insertTextBefore(node, \" \");\n                        }\n                        return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n                    }\n                });\n            }\n        }\n\n        /**\n         * Enforces the spacing around the star if node is a yield* expression.\n         * @param {ASTNode} node A yield expression node.\n         * @returns {void}\n         */\n        function checkExpression(node) {\n            if (!node.delegate) {\n                return;\n            }\n\n            const tokens = sourceCode.getFirstTokens(node, 3);\n            const yieldToken = tokens[0];\n            const starToken = tokens[1];\n            const nextToken = tokens[2];\n\n            checkSpacing(\"before\", yieldToken, starToken);\n            checkSpacing(\"after\", starToken, nextToken);\n        }\n\n        return {\n            YieldExpression: checkExpression\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}