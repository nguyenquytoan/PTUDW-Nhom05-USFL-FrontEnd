{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"chai\").assert,\n    isPlainFunction = require(\"../../plain-function/is\"),\n    arrowFunctionIfSupported = require(\"../_lib/arrow-function-if-supported\"),\n    classIfSupported = require(\"../_lib/class-if-supported\");\n\ndescribe(\"plain-function/is\", function () {\n  it(\"Should return true on function\", function () {\n    assert.equal(isPlainFunction(function () {\n      return true;\n    }), true);\n  });\n\n  if (arrowFunctionIfSupported) {\n    it(\"Should return true on arrow function\", function () {\n      assert.equal(isPlainFunction(arrowFunctionIfSupported), true);\n    });\n  }\n\n  if (classIfSupported) {\n    it(\"Should return false on class\", function () {\n      assert.equal(isPlainFunction(classIfSupported), false);\n    });\n  }\n\n  it(\"Should return false on reg-exp\", function () {\n    assert.equal(isPlainFunction(/foo/), false);\n  });\n  it(\"Should return false on plain object\", function () {\n    assert.equal(isPlainFunction({}), false);\n  });\n  it(\"Should return false on array\", function () {\n    assert.equal(isPlainFunction([]), false);\n  });\n\n  if (typeof Object.create === \"function\") {\n    it(\"Should return false on object with no prototype\", function () {\n      assert.equal(isPlainFunction(Object.create(null)), false);\n    });\n  }\n\n  it(\"Should return false on string\", function () {\n    assert.equal(isPlainFunction(\"foo\"), false);\n  });\n  it(\"Should return false on empty string\", function () {\n    assert.equal(isPlainFunction(\"\"), false);\n  });\n  it(\"Should return false on number\", function () {\n    assert.equal(isPlainFunction(123), false);\n  });\n  it(\"Should return false on NaN\", function () {\n    assert.equal(isPlainFunction(NaN), false);\n  });\n  it(\"Should return false on boolean\", function () {\n    assert.equal(isPlainFunction(true), false);\n  });\n\n  if (typeof Symbol === \"function\") {\n    it(\"Should return false on symbol\", function () {\n      assert.equal(isPlainFunction(Symbol(\"foo\")), false);\n    });\n  }\n\n  it(\"Should return false on null\", function () {\n    assert.equal(isPlainFunction(null), false);\n  });\n  it(\"Should return false on undefined\", function () {\n    assert.equal(isPlainFunction(void 0), false);\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type/test/plain-function/is.js"],"names":["assert","require","isPlainFunction","arrowFunctionIfSupported","classIfSupported","describe","it","equal","Object","create","NaN","Symbol"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar assert                   = require(\"chai\").assert\n  , isPlainFunction          = require(\"../../plain-function/is\")\n  , arrowFunctionIfSupported = require(\"../_lib/arrow-function-if-supported\")\n  , classIfSupported         = require(\"../_lib/class-if-supported\");\n\ndescribe(\"plain-function/is\", function () {\n\tit(\"Should return true on function\", function () {\n\t\tassert.equal(isPlainFunction(function () { return true; }), true);\n\t});\n\tif (arrowFunctionIfSupported) {\n\t\tit(\"Should return true on arrow function\", function () {\n\t\t\tassert.equal(isPlainFunction(arrowFunctionIfSupported), true);\n\t\t});\n\t}\n\tif (classIfSupported) {\n\t\tit(\"Should return false on class\", function () {\n\t\t\tassert.equal(isPlainFunction(classIfSupported), false);\n\t\t});\n\t}\n\tit(\"Should return false on reg-exp\", function () {\n\t\tassert.equal(isPlainFunction(/foo/), false);\n\t});\n\n\tit(\"Should return false on plain object\", function () {\n\t\tassert.equal(isPlainFunction({}), false);\n\t});\n\tit(\"Should return false on array\", function () { assert.equal(isPlainFunction([]), false); });\n\tif (typeof Object.create === \"function\") {\n\t\tit(\"Should return false on object with no prototype\", function () {\n\t\t\tassert.equal(isPlainFunction(Object.create(null)), false);\n\t\t});\n\t}\n\tit(\"Should return false on string\", function () {\n\t\tassert.equal(isPlainFunction(\"foo\"), false);\n\t});\n\tit(\"Should return false on empty string\", function () {\n\t\tassert.equal(isPlainFunction(\"\"), false);\n\t});\n\tit(\"Should return false on number\", function () { assert.equal(isPlainFunction(123), false); });\n\tit(\"Should return false on NaN\", function () { assert.equal(isPlainFunction(NaN), false); });\n\tit(\"Should return false on boolean\", function () {\n\t\tassert.equal(isPlainFunction(true), false);\n\t});\n\tif (typeof Symbol === \"function\") {\n\t\tit(\"Should return false on symbol\", function () {\n\t\t\tassert.equal(isPlainFunction(Symbol(\"foo\")), false);\n\t\t});\n\t}\n\n\tit(\"Should return false on null\", function () { assert.equal(isPlainFunction(null), false); });\n\tit(\"Should return false on undefined\", function () {\n\t\tassert.equal(isPlainFunction(void 0), false);\n\t});\n});\n"]},"metadata":{},"sourceType":"script"}