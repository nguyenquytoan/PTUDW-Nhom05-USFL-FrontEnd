{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of constructors without capital letters\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst CAPS_ALLOWED = [\"Array\", \"Boolean\", \"Date\", \"Error\", \"Function\", \"Number\", \"Object\", \"RegExp\", \"String\", \"Symbol\", \"BigInt\"];\n/**\n * Ensure that if the key is provided, it must be an array.\n * @param {Object} obj Object to check with `key`.\n * @param {string} key Object key to check on `obj`.\n * @param {*} fallback If obj[key] is not present, this will be returned.\n * @returns {string[]} Returns obj[key] if it's an Array, otherwise `fallback`\n */\n\nfunction checkArray(obj, key, fallback) {\n  /* istanbul ignore if */\n  if (Object.prototype.hasOwnProperty.call(obj, key) && !Array.isArray(obj[key])) {\n    throw new TypeError(`${key}, if provided, must be an Array`);\n  }\n\n  return obj[key] || fallback;\n}\n/**\n * A reducer function to invert an array to an Object mapping the string form of the key, to `true`.\n * @param {Object} map Accumulator object for the reduce.\n * @param {string} key Object key to set to `true`.\n * @returns {Object} Returns the updated Object for further reduction.\n */\n\n\nfunction invert(map, key) {\n  map[key] = true;\n  return map;\n}\n/**\n * Creates an object with the cap is new exceptions as its keys and true as their values.\n * @param {Object} config Rule configuration\n * @returns {Object} Object with cap is new exceptions.\n */\n\n\nfunction calculateCapIsNewExceptions(config) {\n  let capIsNewExceptions = checkArray(config, \"capIsNewExceptions\", CAPS_ALLOWED);\n\n  if (capIsNewExceptions !== CAPS_ALLOWED) {\n    capIsNewExceptions = capIsNewExceptions.concat(CAPS_ALLOWED);\n  }\n\n  return capIsNewExceptions.reduce(invert, {});\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require constructor names to begin with a capital letter\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/new-cap\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        newIsCap: {\n          type: \"boolean\",\n          default: true\n        },\n        capIsNew: {\n          type: \"boolean\",\n          default: true\n        },\n        newIsCapExceptions: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          }\n        },\n        newIsCapExceptionPattern: {\n          type: \"string\"\n        },\n        capIsNewExceptions: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          }\n        },\n        capIsNewExceptionPattern: {\n          type: \"string\"\n        },\n        properties: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      upper: \"A function with a name starting with an uppercase letter should only be used as a constructor.\",\n      lower: \"A constructor name should not start with a lowercase letter.\"\n    }\n  },\n\n  create(context) {\n    const config = Object.assign({}, context.options[0]);\n    config.newIsCap = config.newIsCap !== false;\n    config.capIsNew = config.capIsNew !== false;\n    const skipProperties = config.properties === false;\n    const newIsCapExceptions = checkArray(config, \"newIsCapExceptions\", []).reduce(invert, {});\n    const newIsCapExceptionPattern = config.newIsCapExceptionPattern ? new RegExp(config.newIsCapExceptionPattern, \"u\") : null;\n    const capIsNewExceptions = calculateCapIsNewExceptions(config);\n    const capIsNewExceptionPattern = config.capIsNewExceptionPattern ? new RegExp(config.capIsNewExceptionPattern, \"u\") : null;\n    const listeners = {};\n    const sourceCode = context.getSourceCode(); //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Get exact callee name from expression\n     * @param {ASTNode} node CallExpression or NewExpression node\n     * @returns {string} name\n     */\n\n    function extractNameFromExpression(node) {\n      let name = \"\";\n\n      if (node.callee.type === \"MemberExpression\") {\n        const property = node.callee.property;\n\n        if (property.type === \"Literal\" && typeof property.value === \"string\") {\n          name = property.value;\n        } else if (property.type === \"Identifier\" && !node.callee.computed) {\n          name = property.name;\n        }\n      } else {\n        name = node.callee.name;\n      }\n\n      return name;\n    }\n    /**\n     * Returns the capitalization state of the string -\n     * Whether the first character is uppercase, lowercase, or non-alphabetic\n     * @param {string} str String\n     * @returns {string} capitalization state: \"non-alpha\", \"lower\", or \"upper\"\n     */\n\n\n    function getCap(str) {\n      const firstChar = str.charAt(0);\n      const firstCharLower = firstChar.toLowerCase();\n      const firstCharUpper = firstChar.toUpperCase();\n\n      if (firstCharLower === firstCharUpper) {\n        // char has no uppercase variant, so it's non-alphabetic\n        return \"non-alpha\";\n      }\n\n      if (firstChar === firstCharLower) {\n        return \"lower\";\n      }\n\n      return \"upper\";\n    }\n    /**\n     * Check if capitalization is allowed for a CallExpression\n     * @param {Object} allowedMap Object mapping calleeName to a Boolean\n     * @param {ASTNode} node CallExpression node\n     * @param {string} calleeName Capitalized callee name from a CallExpression\n     * @param {Object} pattern RegExp object from options pattern\n     * @returns {boolean} Returns true if the callee may be capitalized\n     */\n\n\n    function isCapAllowed(allowedMap, node, calleeName, pattern) {\n      const sourceText = sourceCode.getText(node.callee);\n\n      if (allowedMap[calleeName] || allowedMap[sourceText]) {\n        return true;\n      }\n\n      if (pattern && pattern.test(sourceText)) {\n        return true;\n      }\n\n      if (calleeName === \"UTC\" && node.callee.type === \"MemberExpression\") {\n        // allow if callee is Date.UTC\n        return node.callee.object.type === \"Identifier\" && node.callee.object.name === \"Date\";\n      }\n\n      return skipProperties && node.callee.type === \"MemberExpression\";\n    }\n    /**\n     * Reports the given messageId for the given node. The location will be the start of the property or the callee.\n     * @param {ASTNode} node CallExpression or NewExpression node.\n     * @param {string} messageId The messageId to report.\n     * @returns {void}\n     */\n\n\n    function report(node, messageId) {\n      let callee = node.callee;\n\n      if (callee.type === \"MemberExpression\") {\n        callee = callee.property;\n      }\n\n      context.report({\n        node,\n        loc: callee.loc.start,\n        messageId\n      });\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    if (config.newIsCap) {\n      listeners.NewExpression = function (node) {\n        const constructorName = extractNameFromExpression(node);\n\n        if (constructorName) {\n          const capitalization = getCap(constructorName);\n          const isAllowed = capitalization !== \"lower\" || isCapAllowed(newIsCapExceptions, node, constructorName, newIsCapExceptionPattern);\n\n          if (!isAllowed) {\n            report(node, \"lower\");\n          }\n        }\n      };\n    }\n\n    if (config.capIsNew) {\n      listeners.CallExpression = function (node) {\n        const calleeName = extractNameFromExpression(node);\n\n        if (calleeName) {\n          const capitalization = getCap(calleeName);\n          const isAllowed = capitalization !== \"upper\" || isCapAllowed(capIsNewExceptions, node, calleeName, capIsNewExceptionPattern);\n\n          if (!isAllowed) {\n            report(node, \"upper\");\n          }\n        }\n      };\n    }\n\n    return listeners;\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/new-cap.js"],"names":["CAPS_ALLOWED","checkArray","obj","key","fallback","Object","prototype","hasOwnProperty","call","Array","isArray","TypeError","invert","map","calculateCapIsNewExceptions","config","capIsNewExceptions","concat","reduce","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","newIsCap","default","capIsNew","newIsCapExceptions","items","newIsCapExceptionPattern","capIsNewExceptionPattern","additionalProperties","messages","upper","lower","create","context","assign","options","skipProperties","RegExp","listeners","sourceCode","getSourceCode","extractNameFromExpression","node","name","callee","property","value","computed","getCap","str","firstChar","charAt","firstCharLower","toLowerCase","firstCharUpper","toUpperCase","isCapAllowed","allowedMap","calleeName","pattern","sourceText","getText","test","object","report","messageId","loc","start","NewExpression","constructorName","capitalization","isAllowed","CallExpression"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to flag use of constructors without capital letters\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst CAPS_ALLOWED = [\n    \"Array\",\n    \"Boolean\",\n    \"Date\",\n    \"Error\",\n    \"Function\",\n    \"Number\",\n    \"Object\",\n    \"RegExp\",\n    \"String\",\n    \"Symbol\",\n    \"BigInt\"\n];\n\n/**\n * Ensure that if the key is provided, it must be an array.\n * @param {Object} obj Object to check with `key`.\n * @param {string} key Object key to check on `obj`.\n * @param {*} fallback If obj[key] is not present, this will be returned.\n * @returns {string[]} Returns obj[key] if it's an Array, otherwise `fallback`\n */\nfunction checkArray(obj, key, fallback) {\n\n    /* istanbul ignore if */\n    if (Object.prototype.hasOwnProperty.call(obj, key) && !Array.isArray(obj[key])) {\n        throw new TypeError(`${key}, if provided, must be an Array`);\n    }\n    return obj[key] || fallback;\n}\n\n/**\n * A reducer function to invert an array to an Object mapping the string form of the key, to `true`.\n * @param {Object} map Accumulator object for the reduce.\n * @param {string} key Object key to set to `true`.\n * @returns {Object} Returns the updated Object for further reduction.\n */\nfunction invert(map, key) {\n    map[key] = true;\n    return map;\n}\n\n/**\n * Creates an object with the cap is new exceptions as its keys and true as their values.\n * @param {Object} config Rule configuration\n * @returns {Object} Object with cap is new exceptions.\n */\nfunction calculateCapIsNewExceptions(config) {\n    let capIsNewExceptions = checkArray(config, \"capIsNewExceptions\", CAPS_ALLOWED);\n\n    if (capIsNewExceptions !== CAPS_ALLOWED) {\n        capIsNewExceptions = capIsNewExceptions.concat(CAPS_ALLOWED);\n    }\n\n    return capIsNewExceptions.reduce(invert, {});\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require constructor names to begin with a capital letter\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/new-cap\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    newIsCap: {\n                        type: \"boolean\",\n                        default: true\n                    },\n                    capIsNew: {\n                        type: \"boolean\",\n                        default: true\n                    },\n                    newIsCapExceptions: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        }\n                    },\n                    newIsCapExceptionPattern: {\n                        type: \"string\"\n                    },\n                    capIsNewExceptions: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        }\n                    },\n                    capIsNewExceptionPattern: {\n                        type: \"string\"\n                    },\n                    properties: {\n                        type: \"boolean\",\n                        default: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            upper: \"A function with a name starting with an uppercase letter should only be used as a constructor.\",\n            lower: \"A constructor name should not start with a lowercase letter.\"\n        }\n    },\n\n    create(context) {\n\n        const config = Object.assign({}, context.options[0]);\n\n        config.newIsCap = config.newIsCap !== false;\n        config.capIsNew = config.capIsNew !== false;\n        const skipProperties = config.properties === false;\n\n        const newIsCapExceptions = checkArray(config, \"newIsCapExceptions\", []).reduce(invert, {});\n        const newIsCapExceptionPattern = config.newIsCapExceptionPattern ? new RegExp(config.newIsCapExceptionPattern, \"u\") : null;\n\n        const capIsNewExceptions = calculateCapIsNewExceptions(config);\n        const capIsNewExceptionPattern = config.capIsNewExceptionPattern ? new RegExp(config.capIsNewExceptionPattern, \"u\") : null;\n\n        const listeners = {};\n\n        const sourceCode = context.getSourceCode();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Get exact callee name from expression\n         * @param {ASTNode} node CallExpression or NewExpression node\n         * @returns {string} name\n         */\n        function extractNameFromExpression(node) {\n\n            let name = \"\";\n\n            if (node.callee.type === \"MemberExpression\") {\n                const property = node.callee.property;\n\n                if (property.type === \"Literal\" && (typeof property.value === \"string\")) {\n                    name = property.value;\n                } else if (property.type === \"Identifier\" && !node.callee.computed) {\n                    name = property.name;\n                }\n            } else {\n                name = node.callee.name;\n            }\n            return name;\n        }\n\n        /**\n         * Returns the capitalization state of the string -\n         * Whether the first character is uppercase, lowercase, or non-alphabetic\n         * @param {string} str String\n         * @returns {string} capitalization state: \"non-alpha\", \"lower\", or \"upper\"\n         */\n        function getCap(str) {\n            const firstChar = str.charAt(0);\n\n            const firstCharLower = firstChar.toLowerCase();\n            const firstCharUpper = firstChar.toUpperCase();\n\n            if (firstCharLower === firstCharUpper) {\n\n                // char has no uppercase variant, so it's non-alphabetic\n                return \"non-alpha\";\n            }\n            if (firstChar === firstCharLower) {\n                return \"lower\";\n            }\n            return \"upper\";\n\n        }\n\n        /**\n         * Check if capitalization is allowed for a CallExpression\n         * @param {Object} allowedMap Object mapping calleeName to a Boolean\n         * @param {ASTNode} node CallExpression node\n         * @param {string} calleeName Capitalized callee name from a CallExpression\n         * @param {Object} pattern RegExp object from options pattern\n         * @returns {boolean} Returns true if the callee may be capitalized\n         */\n        function isCapAllowed(allowedMap, node, calleeName, pattern) {\n            const sourceText = sourceCode.getText(node.callee);\n\n            if (allowedMap[calleeName] || allowedMap[sourceText]) {\n                return true;\n            }\n\n            if (pattern && pattern.test(sourceText)) {\n                return true;\n            }\n\n            if (calleeName === \"UTC\" && node.callee.type === \"MemberExpression\") {\n\n                // allow if callee is Date.UTC\n                return node.callee.object.type === \"Identifier\" &&\n                    node.callee.object.name === \"Date\";\n            }\n\n            return skipProperties && node.callee.type === \"MemberExpression\";\n        }\n\n        /**\n         * Reports the given messageId for the given node. The location will be the start of the property or the callee.\n         * @param {ASTNode} node CallExpression or NewExpression node.\n         * @param {string} messageId The messageId to report.\n         * @returns {void}\n         */\n        function report(node, messageId) {\n            let callee = node.callee;\n\n            if (callee.type === \"MemberExpression\") {\n                callee = callee.property;\n            }\n\n            context.report({ node, loc: callee.loc.start, messageId });\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        if (config.newIsCap) {\n            listeners.NewExpression = function(node) {\n\n                const constructorName = extractNameFromExpression(node);\n\n                if (constructorName) {\n                    const capitalization = getCap(constructorName);\n                    const isAllowed = capitalization !== \"lower\" || isCapAllowed(newIsCapExceptions, node, constructorName, newIsCapExceptionPattern);\n\n                    if (!isAllowed) {\n                        report(node, \"lower\");\n                    }\n                }\n            };\n        }\n\n        if (config.capIsNew) {\n            listeners.CallExpression = function(node) {\n\n                const calleeName = extractNameFromExpression(node);\n\n                if (calleeName) {\n                    const capitalization = getCap(calleeName);\n                    const isAllowed = capitalization !== \"upper\" || isCapAllowed(capIsNewExceptions, node, calleeName, capIsNewExceptionPattern);\n\n                    if (!isAllowed) {\n                        report(node, \"upper\");\n                    }\n                }\n            };\n        }\n\n        return listeners;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}