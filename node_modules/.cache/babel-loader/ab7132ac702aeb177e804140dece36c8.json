{"ast":null,"code":"/**\n * @fileoverview `CascadingConfigArrayFactory` class.\n *\n * `CascadingConfigArrayFactory` class has a responsibility:\n *\n * 1. Handles cascading of config files.\n *\n * It provides two methods:\n *\n * - `getConfigArrayForFile(filePath)`\n *     Get the corresponded configuration of a given file. This method doesn't\n *     throw even if the given file didn't exist.\n * - `clearCache()`\n *     Clear the internal cache. You have to call this method when\n *     `additionalPluginPool` was updated if `baseConfig` or `cliConfig` depends\n *     on the additional plugins. (`CLIEngine#addPlugin()` method calls this.)\n *\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst os = require(\"os\");\n\nconst path = require(\"path\");\n\nconst {\n  validateConfigArray\n} = require(\"../shared/config-validator\");\n\nconst {\n  ConfigArrayFactory\n} = require(\"./config-array-factory\");\n\nconst {\n  ConfigArray,\n  ConfigDependency,\n  IgnorePattern\n} = require(\"./config-array\");\n\nconst loadRules = require(\"./load-rules\");\n\nconst debug = require(\"debug\")(\"eslint:cascading-config-array-factory\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n// Define types for VSCode IntelliSense.\n\n/** @typedef {import(\"../shared/types\").ConfigData} ConfigData */\n\n/** @typedef {import(\"../shared/types\").Parser} Parser */\n\n/** @typedef {import(\"../shared/types\").Plugin} Plugin */\n\n/** @typedef {ReturnType<ConfigArrayFactory[\"create\"]>} ConfigArray */\n\n/**\n * @typedef {Object} CascadingConfigArrayFactoryOptions\n * @property {Map<string,Plugin>} [additionalPluginPool] The map for additional plugins.\n * @property {ConfigData} [baseConfig] The config by `baseConfig` option.\n * @property {ConfigData} [cliConfig] The config by CLI options (`--env`, `--global`, `--ignore-pattern`, `--parser`, `--parser-options`, `--plugin`, and `--rule`). CLI options overwrite the setting in config files.\n * @property {string} [cwd] The base directory to start lookup.\n * @property {string} [ignorePath] The path to the alternative file of `.eslintignore`.\n * @property {string[]} [rulePaths] The value of `--rulesdir` option.\n * @property {string} [specificConfigPath] The value of `--config` option.\n * @property {boolean} [useEslintrc] if `false` then it doesn't load config files.\n */\n\n/**\n * @typedef {Object} CascadingConfigArrayFactoryInternalSlots\n * @property {ConfigArray} baseConfigArray The config array of `baseConfig` option.\n * @property {ConfigData} baseConfigData The config data of `baseConfig` option. This is used to reset `baseConfigArray`.\n * @property {ConfigArray} cliConfigArray The config array of CLI options.\n * @property {ConfigData} cliConfigData The config data of CLI options. This is used to reset `cliConfigArray`.\n * @property {ConfigArrayFactory} configArrayFactory The factory for config arrays.\n * @property {Map<string, ConfigArray>} configCache The cache from directory paths to config arrays.\n * @property {string} cwd The base directory to start lookup.\n * @property {WeakMap<ConfigArray, ConfigArray>} finalizeCache The cache from config arrays to finalized config arrays.\n * @property {string} [ignorePath] The path to the alternative file of `.eslintignore`.\n * @property {string[]|null} rulePaths The value of `--rulesdir` option. This is used to reset `baseConfigArray`.\n * @property {string|null} specificConfigPath The value of `--config` option. This is used to reset `cliConfigArray`.\n * @property {boolean} useEslintrc if `false` then it doesn't load config files.\n */\n\n/** @type {WeakMap<CascadingConfigArrayFactory, CascadingConfigArrayFactoryInternalSlots>} */\n\n\nconst internalSlotsMap = new WeakMap();\n/**\n * Create the config array from `baseConfig` and `rulePaths`.\n * @param {CascadingConfigArrayFactoryInternalSlots} slots The slots.\n * @returns {ConfigArray} The config array of the base configs.\n */\n\nfunction createBaseConfigArray({\n  configArrayFactory,\n  baseConfigData,\n  rulePaths,\n  cwd\n}) {\n  const baseConfigArray = configArrayFactory.create(baseConfigData, {\n    name: \"BaseConfig\"\n  });\n  /*\n   * Create the config array element for the default ignore patterns.\n   * This element has `ignorePattern` property that ignores the default\n   * patterns in the current working directory.\n   */\n\n  baseConfigArray.unshift(configArrayFactory.create({\n    ignorePatterns: IgnorePattern.DefaultPatterns\n  }, {\n    name: \"DefaultIgnorePattern\"\n  })[0]);\n  /*\n   * Load rules `--rulesdir` option as a pseudo plugin.\n   * Use a pseudo plugin to define rules of `--rulesdir`, so we can validate\n   * the rule's options with only information in the config array.\n   */\n\n  if (rulePaths && rulePaths.length > 0) {\n    baseConfigArray.push({\n      name: \"--rulesdir\",\n      filePath: \"\",\n      plugins: {\n        \"\": new ConfigDependency({\n          definition: {\n            rules: rulePaths.reduce((map, rulesPath) => Object.assign(map, loadRules(rulesPath, cwd)), {})\n          },\n          filePath: \"\",\n          id: \"\",\n          importerName: \"--rulesdir\",\n          importerPath: \"\"\n        })\n      }\n    });\n  }\n\n  return baseConfigArray;\n}\n/**\n * Create the config array from CLI options.\n * @param {CascadingConfigArrayFactoryInternalSlots} slots The slots.\n * @returns {ConfigArray} The config array of the base configs.\n */\n\n\nfunction createCLIConfigArray({\n  cliConfigData,\n  configArrayFactory,\n  ignorePath,\n  specificConfigPath\n}) {\n  const cliConfigArray = configArrayFactory.create(cliConfigData, {\n    name: \"CLIOptions\"\n  });\n  cliConfigArray.unshift(...(ignorePath ? configArrayFactory.loadESLintIgnore(ignorePath) : configArrayFactory.loadDefaultESLintIgnore()));\n\n  if (specificConfigPath) {\n    cliConfigArray.unshift(...configArrayFactory.loadFile(specificConfigPath, {\n      name: \"--config\"\n    }));\n  }\n\n  return cliConfigArray;\n}\n/**\n * The error type when there are files matched by a glob, but all of them have been ignored.\n */\n\n\nclass ConfigurationNotFoundError extends Error {\n  // eslint-disable-next-line jsdoc/require-description\n\n  /**\n   * @param {string} directoryPath The directory path.\n   */\n  constructor(directoryPath) {\n    super(`No ESLint configuration found in ${directoryPath}.`);\n    this.messageTemplate = \"no-config-found\";\n    this.messageData = {\n      directoryPath\n    };\n  }\n\n}\n/**\n * This class provides the functionality that enumerates every file which is\n * matched by given glob patterns and that configuration.\n */\n\n\nclass CascadingConfigArrayFactory {\n  /**\n   * Initialize this enumerator.\n   * @param {CascadingConfigArrayFactoryOptions} options The options.\n   */\n  constructor({\n    additionalPluginPool = new Map(),\n    baseConfig: baseConfigData = null,\n    cliConfig: cliConfigData = null,\n    cwd = process.cwd(),\n    ignorePath,\n    resolvePluginsRelativeTo = cwd,\n    rulePaths = [],\n    specificConfigPath = null,\n    useEslintrc = true\n  } = {}) {\n    const configArrayFactory = new ConfigArrayFactory({\n      additionalPluginPool,\n      cwd,\n      resolvePluginsRelativeTo\n    });\n    internalSlotsMap.set(this, {\n      baseConfigArray: createBaseConfigArray({\n        baseConfigData,\n        configArrayFactory,\n        cwd,\n        rulePaths\n      }),\n      baseConfigData,\n      cliConfigArray: createCLIConfigArray({\n        cliConfigData,\n        configArrayFactory,\n        ignorePath,\n        specificConfigPath\n      }),\n      cliConfigData,\n      configArrayFactory,\n      configCache: new Map(),\n      cwd,\n      finalizeCache: new WeakMap(),\n      ignorePath,\n      rulePaths,\n      specificConfigPath,\n      useEslintrc\n    });\n  }\n  /**\n   * The path to the current working directory.\n   * This is used by tests.\n   * @type {string}\n   */\n\n\n  get cwd() {\n    const {\n      cwd\n    } = internalSlotsMap.get(this);\n    return cwd;\n  }\n  /**\n   * Get the config array of a given file.\n   * If `filePath` was not given, it returns the config which contains only\n   * `baseConfigData` and `cliConfigData`.\n   * @param {string} [filePath] The file path to a file.\n   * @param {Object} [options] The options.\n   * @param {boolean} [options.ignoreNotFoundError] If `true` then it doesn't throw `ConfigurationNotFoundError`.\n   * @returns {ConfigArray} The config array of the file.\n   */\n\n\n  getConfigArrayForFile(filePath, {\n    ignoreNotFoundError = false\n  } = {}) {\n    const {\n      baseConfigArray,\n      cliConfigArray,\n      cwd\n    } = internalSlotsMap.get(this);\n\n    if (!filePath) {\n      return new ConfigArray(...baseConfigArray, ...cliConfigArray);\n    }\n\n    const directoryPath = path.dirname(path.resolve(cwd, filePath));\n    debug(`Load config files for ${directoryPath}.`);\n    return this._finalizeConfigArray(this._loadConfigInAncestors(directoryPath), directoryPath, ignoreNotFoundError);\n  }\n  /**\n   * Clear config cache.\n   * @returns {void}\n   */\n\n\n  clearCache() {\n    const slots = internalSlotsMap.get(this);\n    slots.baseConfigArray = createBaseConfigArray(slots);\n    slots.cliConfigArray = createCLIConfigArray(slots);\n    slots.configCache.clear();\n  }\n  /**\n   * Load and normalize config files from the ancestor directories.\n   * @param {string} directoryPath The path to a leaf directory.\n   * @returns {ConfigArray} The loaded config.\n   * @private\n   */\n\n\n  _loadConfigInAncestors(directoryPath) {\n    const {\n      baseConfigArray,\n      configArrayFactory,\n      configCache,\n      cwd,\n      useEslintrc\n    } = internalSlotsMap.get(this);\n\n    if (!useEslintrc) {\n      return baseConfigArray;\n    }\n\n    let configArray = configCache.get(directoryPath); // Hit cache.\n\n    if (configArray) {\n      debug(`Cache hit: ${directoryPath}.`);\n      return configArray;\n    }\n\n    debug(`No cache found: ${directoryPath}.`);\n    const homePath = os.homedir(); // Consider this is root.\n\n    if (directoryPath === homePath && cwd !== homePath) {\n      debug(\"Stop traversing because of considered root.\");\n      return this._cacheConfig(directoryPath, baseConfigArray);\n    } // Load the config on this directory.\n\n\n    try {\n      configArray = configArrayFactory.loadInDirectory(directoryPath);\n    } catch (error) {\n      /* istanbul ignore next */\n      if (error.code === \"EACCES\") {\n        debug(\"Stop traversing because of 'EACCES' error.\");\n        return this._cacheConfig(directoryPath, baseConfigArray);\n      }\n\n      throw error;\n    }\n\n    if (configArray.length > 0 && configArray.isRoot()) {\n      debug(\"Stop traversing because of 'root:true'.\");\n      configArray.unshift(...baseConfigArray);\n      return this._cacheConfig(directoryPath, configArray);\n    } // Load from the ancestors and merge it.\n\n\n    const parentPath = path.dirname(directoryPath);\n    const parentConfigArray = parentPath && parentPath !== directoryPath ? this._loadConfigInAncestors(parentPath) : baseConfigArray;\n\n    if (configArray.length > 0) {\n      configArray.unshift(...parentConfigArray);\n    } else {\n      configArray = parentConfigArray;\n    } // Cache and return.\n\n\n    return this._cacheConfig(directoryPath, configArray);\n  }\n  /**\n   * Freeze and cache a given config.\n   * @param {string} directoryPath The path to a directory as a cache key.\n   * @param {ConfigArray} configArray The config array as a cache value.\n   * @returns {ConfigArray} The `configArray` (frozen).\n   */\n\n\n  _cacheConfig(directoryPath, configArray) {\n    const {\n      configCache\n    } = internalSlotsMap.get(this);\n    Object.freeze(configArray);\n    configCache.set(directoryPath, configArray);\n    return configArray;\n  }\n  /**\n   * Finalize a given config array.\n   * Concatenate `--config` and other CLI options.\n   * @param {ConfigArray} configArray The parent config array.\n   * @param {string} directoryPath The path to the leaf directory to find config files.\n   * @param {boolean} ignoreNotFoundError If `true` then it doesn't throw `ConfigurationNotFoundError`.\n   * @returns {ConfigArray} The loaded config.\n   * @private\n   */\n\n\n  _finalizeConfigArray(configArray, directoryPath, ignoreNotFoundError) {\n    const {\n      cliConfigArray,\n      configArrayFactory,\n      finalizeCache,\n      useEslintrc\n    } = internalSlotsMap.get(this);\n    let finalConfigArray = finalizeCache.get(configArray);\n\n    if (!finalConfigArray) {\n      finalConfigArray = configArray; // Load the personal config if there are no regular config files.\n\n      if (useEslintrc && configArray.every(c => !c.filePath) && cliConfigArray.every(c => !c.filePath) // `--config` option can be a file.\n      ) {\n          debug(\"Loading the config file of the home directory.\");\n          finalConfigArray = configArrayFactory.loadInDirectory(os.homedir(), {\n            name: \"PersonalConfig\",\n            parent: finalConfigArray\n          });\n        } // Apply CLI options.\n\n\n      if (cliConfigArray.length > 0) {\n        finalConfigArray = finalConfigArray.concat(cliConfigArray);\n      } // Validate rule settings and environments.\n\n\n      validateConfigArray(finalConfigArray); // Cache it.\n\n      Object.freeze(finalConfigArray);\n      finalizeCache.set(configArray, finalConfigArray);\n      debug(\"Configuration was determined: %o on %s\", finalConfigArray, directoryPath);\n    } // At least one element (the default ignore patterns) exists.\n\n\n    if (!ignoreNotFoundError && useEslintrc && finalConfigArray.length <= 1) {\n      throw new ConfigurationNotFoundError(directoryPath);\n    }\n\n    return finalConfigArray;\n  }\n\n} //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  CascadingConfigArrayFactory\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/cli-engine/cascading-config-array-factory.js"],"names":["os","require","path","validateConfigArray","ConfigArrayFactory","ConfigArray","ConfigDependency","IgnorePattern","loadRules","debug","internalSlotsMap","WeakMap","createBaseConfigArray","configArrayFactory","baseConfigData","rulePaths","cwd","baseConfigArray","create","name","unshift","ignorePatterns","DefaultPatterns","length","push","filePath","plugins","definition","rules","reduce","map","rulesPath","Object","assign","id","importerName","importerPath","createCLIConfigArray","cliConfigData","ignorePath","specificConfigPath","cliConfigArray","loadESLintIgnore","loadDefaultESLintIgnore","loadFile","ConfigurationNotFoundError","Error","constructor","directoryPath","messageTemplate","messageData","CascadingConfigArrayFactory","additionalPluginPool","Map","baseConfig","cliConfig","process","resolvePluginsRelativeTo","useEslintrc","set","configCache","finalizeCache","get","getConfigArrayForFile","ignoreNotFoundError","dirname","resolve","_finalizeConfigArray","_loadConfigInAncestors","clearCache","slots","clear","configArray","homePath","homedir","_cacheConfig","loadInDirectory","error","code","isRoot","parentPath","parentConfigArray","freeze","finalConfigArray","every","c","parent","concat","module","exports"],"mappings":"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","sourcesContent":["/**\n * @fileoverview `CascadingConfigArrayFactory` class.\n *\n * `CascadingConfigArrayFactory` class has a responsibility:\n *\n * 1. Handles cascading of config files.\n *\n * It provides two methods:\n *\n * - `getConfigArrayForFile(filePath)`\n *     Get the corresponded configuration of a given file. This method doesn't\n *     throw even if the given file didn't exist.\n * - `clearCache()`\n *     Clear the internal cache. You have to call this method when\n *     `additionalPluginPool` was updated if `baseConfig` or `cliConfig` depends\n *     on the additional plugins. (`CLIEngine#addPlugin()` method calls this.)\n *\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst { validateConfigArray } = require(\"../shared/config-validator\");\nconst { ConfigArrayFactory } = require(\"./config-array-factory\");\nconst { ConfigArray, ConfigDependency, IgnorePattern } = require(\"./config-array\");\nconst loadRules = require(\"./load-rules\");\nconst debug = require(\"debug\")(\"eslint:cascading-config-array-factory\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n// Define types for VSCode IntelliSense.\n/** @typedef {import(\"../shared/types\").ConfigData} ConfigData */\n/** @typedef {import(\"../shared/types\").Parser} Parser */\n/** @typedef {import(\"../shared/types\").Plugin} Plugin */\n/** @typedef {ReturnType<ConfigArrayFactory[\"create\"]>} ConfigArray */\n\n/**\n * @typedef {Object} CascadingConfigArrayFactoryOptions\n * @property {Map<string,Plugin>} [additionalPluginPool] The map for additional plugins.\n * @property {ConfigData} [baseConfig] The config by `baseConfig` option.\n * @property {ConfigData} [cliConfig] The config by CLI options (`--env`, `--global`, `--ignore-pattern`, `--parser`, `--parser-options`, `--plugin`, and `--rule`). CLI options overwrite the setting in config files.\n * @property {string} [cwd] The base directory to start lookup.\n * @property {string} [ignorePath] The path to the alternative file of `.eslintignore`.\n * @property {string[]} [rulePaths] The value of `--rulesdir` option.\n * @property {string} [specificConfigPath] The value of `--config` option.\n * @property {boolean} [useEslintrc] if `false` then it doesn't load config files.\n */\n\n/**\n * @typedef {Object} CascadingConfigArrayFactoryInternalSlots\n * @property {ConfigArray} baseConfigArray The config array of `baseConfig` option.\n * @property {ConfigData} baseConfigData The config data of `baseConfig` option. This is used to reset `baseConfigArray`.\n * @property {ConfigArray} cliConfigArray The config array of CLI options.\n * @property {ConfigData} cliConfigData The config data of CLI options. This is used to reset `cliConfigArray`.\n * @property {ConfigArrayFactory} configArrayFactory The factory for config arrays.\n * @property {Map<string, ConfigArray>} configCache The cache from directory paths to config arrays.\n * @property {string} cwd The base directory to start lookup.\n * @property {WeakMap<ConfigArray, ConfigArray>} finalizeCache The cache from config arrays to finalized config arrays.\n * @property {string} [ignorePath] The path to the alternative file of `.eslintignore`.\n * @property {string[]|null} rulePaths The value of `--rulesdir` option. This is used to reset `baseConfigArray`.\n * @property {string|null} specificConfigPath The value of `--config` option. This is used to reset `cliConfigArray`.\n * @property {boolean} useEslintrc if `false` then it doesn't load config files.\n */\n\n/** @type {WeakMap<CascadingConfigArrayFactory, CascadingConfigArrayFactoryInternalSlots>} */\nconst internalSlotsMap = new WeakMap();\n\n/**\n * Create the config array from `baseConfig` and `rulePaths`.\n * @param {CascadingConfigArrayFactoryInternalSlots} slots The slots.\n * @returns {ConfigArray} The config array of the base configs.\n */\nfunction createBaseConfigArray({\n    configArrayFactory,\n    baseConfigData,\n    rulePaths,\n    cwd\n}) {\n    const baseConfigArray = configArrayFactory.create(\n        baseConfigData,\n        { name: \"BaseConfig\" }\n    );\n\n    /*\n     * Create the config array element for the default ignore patterns.\n     * This element has `ignorePattern` property that ignores the default\n     * patterns in the current working directory.\n     */\n    baseConfigArray.unshift(configArrayFactory.create(\n        { ignorePatterns: IgnorePattern.DefaultPatterns },\n        { name: \"DefaultIgnorePattern\" }\n    )[0]);\n\n    /*\n     * Load rules `--rulesdir` option as a pseudo plugin.\n     * Use a pseudo plugin to define rules of `--rulesdir`, so we can validate\n     * the rule's options with only information in the config array.\n     */\n    if (rulePaths && rulePaths.length > 0) {\n        baseConfigArray.push({\n            name: \"--rulesdir\",\n            filePath: \"\",\n            plugins: {\n                \"\": new ConfigDependency({\n                    definition: {\n                        rules: rulePaths.reduce(\n                            (map, rulesPath) => Object.assign(\n                                map,\n                                loadRules(rulesPath, cwd)\n                            ),\n                            {}\n                        )\n                    },\n                    filePath: \"\",\n                    id: \"\",\n                    importerName: \"--rulesdir\",\n                    importerPath: \"\"\n                })\n            }\n        });\n    }\n\n    return baseConfigArray;\n}\n\n/**\n * Create the config array from CLI options.\n * @param {CascadingConfigArrayFactoryInternalSlots} slots The slots.\n * @returns {ConfigArray} The config array of the base configs.\n */\nfunction createCLIConfigArray({\n    cliConfigData,\n    configArrayFactory,\n    ignorePath,\n    specificConfigPath\n}) {\n    const cliConfigArray = configArrayFactory.create(\n        cliConfigData,\n        { name: \"CLIOptions\" }\n    );\n\n    cliConfigArray.unshift(\n        ...(ignorePath\n            ? configArrayFactory.loadESLintIgnore(ignorePath)\n            : configArrayFactory.loadDefaultESLintIgnore())\n    );\n\n    if (specificConfigPath) {\n        cliConfigArray.unshift(\n            ...configArrayFactory.loadFile(\n                specificConfigPath,\n                { name: \"--config\" }\n            )\n        );\n    }\n\n    return cliConfigArray;\n}\n\n/**\n * The error type when there are files matched by a glob, but all of them have been ignored.\n */\nclass ConfigurationNotFoundError extends Error {\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @param {string} directoryPath The directory path.\n     */\n    constructor(directoryPath) {\n        super(`No ESLint configuration found in ${directoryPath}.`);\n        this.messageTemplate = \"no-config-found\";\n        this.messageData = { directoryPath };\n    }\n}\n\n/**\n * This class provides the functionality that enumerates every file which is\n * matched by given glob patterns and that configuration.\n */\nclass CascadingConfigArrayFactory {\n\n    /**\n     * Initialize this enumerator.\n     * @param {CascadingConfigArrayFactoryOptions} options The options.\n     */\n    constructor({\n        additionalPluginPool = new Map(),\n        baseConfig: baseConfigData = null,\n        cliConfig: cliConfigData = null,\n        cwd = process.cwd(),\n        ignorePath,\n        resolvePluginsRelativeTo = cwd,\n        rulePaths = [],\n        specificConfigPath = null,\n        useEslintrc = true\n    } = {}) {\n        const configArrayFactory = new ConfigArrayFactory({\n            additionalPluginPool,\n            cwd,\n            resolvePluginsRelativeTo\n        });\n\n        internalSlotsMap.set(this, {\n            baseConfigArray: createBaseConfigArray({\n                baseConfigData,\n                configArrayFactory,\n                cwd,\n                rulePaths\n            }),\n            baseConfigData,\n            cliConfigArray: createCLIConfigArray({\n                cliConfigData,\n                configArrayFactory,\n                ignorePath,\n                specificConfigPath\n            }),\n            cliConfigData,\n            configArrayFactory,\n            configCache: new Map(),\n            cwd,\n            finalizeCache: new WeakMap(),\n            ignorePath,\n            rulePaths,\n            specificConfigPath,\n            useEslintrc\n        });\n    }\n\n    /**\n     * The path to the current working directory.\n     * This is used by tests.\n     * @type {string}\n     */\n    get cwd() {\n        const { cwd } = internalSlotsMap.get(this);\n\n        return cwd;\n    }\n\n    /**\n     * Get the config array of a given file.\n     * If `filePath` was not given, it returns the config which contains only\n     * `baseConfigData` and `cliConfigData`.\n     * @param {string} [filePath] The file path to a file.\n     * @param {Object} [options] The options.\n     * @param {boolean} [options.ignoreNotFoundError] If `true` then it doesn't throw `ConfigurationNotFoundError`.\n     * @returns {ConfigArray} The config array of the file.\n     */\n    getConfigArrayForFile(filePath, { ignoreNotFoundError = false } = {}) {\n        const {\n            baseConfigArray,\n            cliConfigArray,\n            cwd\n        } = internalSlotsMap.get(this);\n\n        if (!filePath) {\n            return new ConfigArray(...baseConfigArray, ...cliConfigArray);\n        }\n\n        const directoryPath = path.dirname(path.resolve(cwd, filePath));\n\n        debug(`Load config files for ${directoryPath}.`);\n\n        return this._finalizeConfigArray(\n            this._loadConfigInAncestors(directoryPath),\n            directoryPath,\n            ignoreNotFoundError\n        );\n    }\n\n    /**\n     * Clear config cache.\n     * @returns {void}\n     */\n    clearCache() {\n        const slots = internalSlotsMap.get(this);\n\n        slots.baseConfigArray = createBaseConfigArray(slots);\n        slots.cliConfigArray = createCLIConfigArray(slots);\n        slots.configCache.clear();\n    }\n\n    /**\n     * Load and normalize config files from the ancestor directories.\n     * @param {string} directoryPath The path to a leaf directory.\n     * @returns {ConfigArray} The loaded config.\n     * @private\n     */\n    _loadConfigInAncestors(directoryPath) {\n        const {\n            baseConfigArray,\n            configArrayFactory,\n            configCache,\n            cwd,\n            useEslintrc\n        } = internalSlotsMap.get(this);\n\n        if (!useEslintrc) {\n            return baseConfigArray;\n        }\n\n        let configArray = configCache.get(directoryPath);\n\n        // Hit cache.\n        if (configArray) {\n            debug(`Cache hit: ${directoryPath}.`);\n            return configArray;\n        }\n        debug(`No cache found: ${directoryPath}.`);\n\n        const homePath = os.homedir();\n\n        // Consider this is root.\n        if (directoryPath === homePath && cwd !== homePath) {\n            debug(\"Stop traversing because of considered root.\");\n            return this._cacheConfig(directoryPath, baseConfigArray);\n        }\n\n        // Load the config on this directory.\n        try {\n            configArray = configArrayFactory.loadInDirectory(directoryPath);\n        } catch (error) {\n            /* istanbul ignore next */\n            if (error.code === \"EACCES\") {\n                debug(\"Stop traversing because of 'EACCES' error.\");\n                return this._cacheConfig(directoryPath, baseConfigArray);\n            }\n            throw error;\n        }\n\n        if (configArray.length > 0 && configArray.isRoot()) {\n            debug(\"Stop traversing because of 'root:true'.\");\n            configArray.unshift(...baseConfigArray);\n            return this._cacheConfig(directoryPath, configArray);\n        }\n\n        // Load from the ancestors and merge it.\n        const parentPath = path.dirname(directoryPath);\n        const parentConfigArray = parentPath && parentPath !== directoryPath\n            ? this._loadConfigInAncestors(parentPath)\n            : baseConfigArray;\n\n        if (configArray.length > 0) {\n            configArray.unshift(...parentConfigArray);\n        } else {\n            configArray = parentConfigArray;\n        }\n\n        // Cache and return.\n        return this._cacheConfig(directoryPath, configArray);\n    }\n\n    /**\n     * Freeze and cache a given config.\n     * @param {string} directoryPath The path to a directory as a cache key.\n     * @param {ConfigArray} configArray The config array as a cache value.\n     * @returns {ConfigArray} The `configArray` (frozen).\n     */\n    _cacheConfig(directoryPath, configArray) {\n        const { configCache } = internalSlotsMap.get(this);\n\n        Object.freeze(configArray);\n        configCache.set(directoryPath, configArray);\n\n        return configArray;\n    }\n\n    /**\n     * Finalize a given config array.\n     * Concatenate `--config` and other CLI options.\n     * @param {ConfigArray} configArray The parent config array.\n     * @param {string} directoryPath The path to the leaf directory to find config files.\n     * @param {boolean} ignoreNotFoundError If `true` then it doesn't throw `ConfigurationNotFoundError`.\n     * @returns {ConfigArray} The loaded config.\n     * @private\n     */\n    _finalizeConfigArray(configArray, directoryPath, ignoreNotFoundError) {\n        const {\n            cliConfigArray,\n            configArrayFactory,\n            finalizeCache,\n            useEslintrc\n        } = internalSlotsMap.get(this);\n\n        let finalConfigArray = finalizeCache.get(configArray);\n\n        if (!finalConfigArray) {\n            finalConfigArray = configArray;\n\n            // Load the personal config if there are no regular config files.\n            if (\n                useEslintrc &&\n                configArray.every(c => !c.filePath) &&\n                cliConfigArray.every(c => !c.filePath) // `--config` option can be a file.\n            ) {\n                debug(\"Loading the config file of the home directory.\");\n\n                finalConfigArray = configArrayFactory.loadInDirectory(\n                    os.homedir(),\n                    { name: \"PersonalConfig\", parent: finalConfigArray }\n                );\n            }\n\n            // Apply CLI options.\n            if (cliConfigArray.length > 0) {\n                finalConfigArray = finalConfigArray.concat(cliConfigArray);\n            }\n\n            // Validate rule settings and environments.\n            validateConfigArray(finalConfigArray);\n\n            // Cache it.\n            Object.freeze(finalConfigArray);\n            finalizeCache.set(configArray, finalConfigArray);\n\n            debug(\n                \"Configuration was determined: %o on %s\",\n                finalConfigArray,\n                directoryPath\n            );\n        }\n\n        // At least one element (the default ignore patterns) exists.\n        if (!ignoreNotFoundError && useEslintrc && finalConfigArray.length <= 1) {\n            throw new ConfigurationNotFoundError(directoryPath);\n        }\n\n        return finalConfigArray;\n    }\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = { CascadingConfigArrayFactory };\n"]},"metadata":{},"sourceType":"script"}