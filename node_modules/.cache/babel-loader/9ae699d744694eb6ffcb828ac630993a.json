{"ast":null,"code":"/* eslint-env mocha */\nimport assert from 'assert';\nimport { getOpeningElement, setParserName } from '../helper';\nimport elementType from '../../src/elementType';\ndescribe('elementType tests', () => {\n  beforeEach(() => {\n    setParserName('babel');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof elementType;\n    assert.equal(expected, actual);\n  });\n  it('should throw an error if the argument is missing', () => {\n    assert.throws(() => {\n      elementType();\n    }, Error);\n  });\n  it('should throw an error if the argument not a JSX node', () => {\n    assert.throws(() => {\n      elementType({\n        a: 'foo'\n      });\n    }, Error);\n  });\n  it('should return the correct type of the DOM element given its node object', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const expected = 'div';\n    const actual = elementType(node);\n    assert.equal(expected, actual);\n  });\n  it('should return the correct type of the custom element given its node object', () => {\n    const code = '<Slider />';\n    const node = getOpeningElement(code);\n    const expected = 'Slider';\n    const actual = elementType(node);\n    assert.equal(expected, actual);\n  });\n  it('should return the correct type of the custom object element given its node object', () => {\n    const code = '<UX.Slider />';\n    const node = getOpeningElement(code);\n    const expected = 'UX.Slider';\n    const actual = elementType(node);\n    assert.equal(expected, actual);\n  });\n  it('should return the correct type of the namespaced element given its node object', () => {\n    const code = '<UX:Slider />';\n    const node = getOpeningElement(code);\n    const expected = 'UX:Slider';\n    const actual = elementType(node);\n    assert.equal(expected, actual);\n  });\n  it('should return the correct type of the multiple custom object element given its node object', () => {\n    const code = '<UX.Slider.Blue.Light />';\n    const node = getOpeningElement(code);\n    const expected = 'UX.Slider.Blue.Light';\n    const actual = elementType(node);\n    assert.equal(expected, actual);\n  });\n  it('should return this.Component when given its node object', () => {\n    const code = '<this.Component />';\n    const node = getOpeningElement(code);\n    const expected = 'this.Component';\n    const actual = elementType(node);\n    assert.equal(expected, actual);\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/__tests__/src/elementType-test.js"],"names":["assert","getOpeningElement","setParserName","elementType","describe","beforeEach","it","expected","actual","equal","throws","Error","a","code","node"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport assert from 'assert';\nimport { getOpeningElement, setParserName } from '../helper';\nimport elementType from '../../src/elementType';\n\ndescribe('elementType tests', () => {\n  beforeEach(() => {\n    setParserName('babel');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof elementType;\n\n    assert.equal(expected, actual);\n  });\n\n  it('should throw an error if the argument is missing', () => {\n    assert.throws(() => { elementType(); }, Error);\n  });\n\n  it('should throw an error if the argument not a JSX node', () => {\n    assert.throws(() => { elementType({ a: 'foo' }); }, Error);\n  });\n\n  it('should return the correct type of the DOM element given its node object', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n\n    const expected = 'div';\n    const actual = elementType(node);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return the correct type of the custom element given its node object', () => {\n    const code = '<Slider />';\n    const node = getOpeningElement(code);\n\n    const expected = 'Slider';\n    const actual = elementType(node);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return the correct type of the custom object element given its node object', () => {\n    const code = '<UX.Slider />';\n    const node = getOpeningElement(code);\n\n    const expected = 'UX.Slider';\n    const actual = elementType(node);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return the correct type of the namespaced element given its node object', () => {\n    const code = '<UX:Slider />';\n    const node = getOpeningElement(code);\n\n    const expected = 'UX:Slider';\n    const actual = elementType(node);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return the correct type of the multiple custom object element given its node object',\n    () => {\n      const code = '<UX.Slider.Blue.Light />';\n      const node = getOpeningElement(code);\n\n      const expected = 'UX.Slider.Blue.Light';\n      const actual = elementType(node);\n\n      assert.equal(expected, actual);\n    });\n\n  it('should return this.Component when given its node object', () => {\n    const code = '<this.Component />';\n    const node = getOpeningElement(code);\n\n    const expected = 'this.Component';\n    const actual = elementType(node);\n\n    assert.equal(expected, actual);\n  });\n});\n"]},"metadata":{},"sourceType":"module"}