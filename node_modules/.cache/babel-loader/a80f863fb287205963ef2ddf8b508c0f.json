{"ast":null,"code":"/**\n * @fileoverview Rule to check for jsdoc presence.\n * @author Gyandeep Singh\n */\n\"use strict\";\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require JSDoc comments\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/require-jsdoc\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        require: {\n          type: \"object\",\n          properties: {\n            ClassDeclaration: {\n              type: \"boolean\",\n              default: false\n            },\n            MethodDefinition: {\n              type: \"boolean\",\n              default: false\n            },\n            FunctionDeclaration: {\n              type: \"boolean\",\n              default: true\n            },\n            ArrowFunctionExpression: {\n              type: \"boolean\",\n              default: false\n            },\n            FunctionExpression: {\n              type: \"boolean\",\n              default: false\n            }\n          },\n          additionalProperties: false,\n          default: {}\n        }\n      },\n      additionalProperties: false\n    }],\n    deprecated: true,\n    replacedBy: []\n  },\n\n  create(context) {\n    const source = context.getSourceCode();\n    const DEFAULT_OPTIONS = {\n      FunctionDeclaration: true,\n      MethodDefinition: false,\n      ClassDeclaration: false,\n      ArrowFunctionExpression: false,\n      FunctionExpression: false\n    };\n    const options = Object.assign(DEFAULT_OPTIONS, context.options[0] && context.options[0].require);\n    /**\n     * Report the error message\n     * @param {ASTNode} node node to report\n     * @returns {void}\n     */\n\n    function report(node) {\n      context.report({\n        node,\n        message: \"Missing JSDoc comment.\"\n      });\n    }\n    /**\n     * Check if the jsdoc comment is present or not.\n     * @param {ASTNode} node node to examine\n     * @returns {void}\n     */\n\n\n    function checkJsDoc(node) {\n      const jsdocComment = source.getJSDocComment(node);\n\n      if (!jsdocComment) {\n        report(node);\n      }\n    }\n\n    return {\n      FunctionDeclaration(node) {\n        if (options.FunctionDeclaration) {\n          checkJsDoc(node);\n        }\n      },\n\n      FunctionExpression(node) {\n        if (options.MethodDefinition && node.parent.type === \"MethodDefinition\" || options.FunctionExpression && (node.parent.type === \"VariableDeclarator\" || node.parent.type === \"Property\" && node === node.parent.value)) {\n          checkJsDoc(node);\n        }\n      },\n\n      ClassDeclaration(node) {\n        if (options.ClassDeclaration) {\n          checkJsDoc(node);\n        }\n      },\n\n      ArrowFunctionExpression(node) {\n        if (options.ArrowFunctionExpression && node.parent.type === \"VariableDeclarator\") {\n          checkJsDoc(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/require-jsdoc.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","properties","require","ClassDeclaration","default","MethodDefinition","FunctionDeclaration","ArrowFunctionExpression","FunctionExpression","additionalProperties","deprecated","replacedBy","create","context","source","getSourceCode","DEFAULT_OPTIONS","options","Object","assign","report","node","message","checkJsDoc","jsdocComment","getJSDocComment","parent","value"],"mappings":"AAAA;;;;AAIA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,wBADX;AAEFC,MAAAA,QAAQ,EAAE,kBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,CACJ;AACIN,MAAAA,IAAI,EAAE,QADV;AAEIO,MAAAA,UAAU,EAAE;AACRC,QAAAA,OAAO,EAAE;AACLR,UAAAA,IAAI,EAAE,QADD;AAELO,UAAAA,UAAU,EAAE;AACRE,YAAAA,gBAAgB,EAAE;AACdT,cAAAA,IAAI,EAAE,SADQ;AAEdU,cAAAA,OAAO,EAAE;AAFK,aADV;AAKRC,YAAAA,gBAAgB,EAAE;AACdX,cAAAA,IAAI,EAAE,SADQ;AAEdU,cAAAA,OAAO,EAAE;AAFK,aALV;AASRE,YAAAA,mBAAmB,EAAE;AACjBZ,cAAAA,IAAI,EAAE,SADW;AAEjBU,cAAAA,OAAO,EAAE;AAFQ,aATb;AAaRG,YAAAA,uBAAuB,EAAE;AACrBb,cAAAA,IAAI,EAAE,SADe;AAErBU,cAAAA,OAAO,EAAE;AAFY,aAbjB;AAiBRI,YAAAA,kBAAkB,EAAE;AAChBd,cAAAA,IAAI,EAAE,SADU;AAEhBU,cAAAA,OAAO,EAAE;AAFO;AAjBZ,WAFP;AAwBLK,UAAAA,oBAAoB,EAAE,KAxBjB;AAyBLL,UAAAA,OAAO,EAAE;AAzBJ;AADD,OAFhB;AA+BIK,MAAAA,oBAAoB,EAAE;AA/B1B,KADI,CAVN;AA8CFC,IAAAA,UAAU,EAAE,IA9CV;AA+CFC,IAAAA,UAAU,EAAE;AA/CV,GADO;;AAmDbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,MAAM,GAAGD,OAAO,CAACE,aAAR,EAAf;AACA,UAAMC,eAAe,GAAG;AACpBV,MAAAA,mBAAmB,EAAE,IADD;AAEpBD,MAAAA,gBAAgB,EAAE,KAFE;AAGpBF,MAAAA,gBAAgB,EAAE,KAHE;AAIpBI,MAAAA,uBAAuB,EAAE,KAJL;AAKpBC,MAAAA,kBAAkB,EAAE;AALA,KAAxB;AAOA,UAAMS,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcH,eAAd,EAA+BH,OAAO,CAACI,OAAR,CAAgB,CAAhB,KAAsBJ,OAAO,CAACI,OAAR,CAAgB,CAAhB,EAAmBf,OAAxE,CAAhB;AAEA;;;;;;AAKA,aAASkB,MAAT,CAAgBC,IAAhB,EAAsB;AAClBR,MAAAA,OAAO,CAACO,MAAR,CAAe;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,OAAO,EAAE;AAAjB,OAAf;AACH;AAED;;;;;;;AAKA,aAASC,UAAT,CAAoBF,IAApB,EAA0B;AACtB,YAAMG,YAAY,GAAGV,MAAM,CAACW,eAAP,CAAuBJ,IAAvB,CAArB;;AAEA,UAAI,CAACG,YAAL,EAAmB;AACfJ,QAAAA,MAAM,CAACC,IAAD,CAAN;AACH;AACJ;;AAED,WAAO;AACHf,MAAAA,mBAAmB,CAACe,IAAD,EAAO;AACtB,YAAIJ,OAAO,CAACX,mBAAZ,EAAiC;AAC7BiB,UAAAA,UAAU,CAACF,IAAD,CAAV;AACH;AACJ,OALE;;AAMHb,MAAAA,kBAAkB,CAACa,IAAD,EAAO;AACrB,YACKJ,OAAO,CAACZ,gBAAR,IAA4BgB,IAAI,CAACK,MAAL,CAAYhC,IAAZ,KAAqB,kBAAlD,IACCuB,OAAO,CAACT,kBAAR,KAA+Ba,IAAI,CAACK,MAAL,CAAYhC,IAAZ,KAAqB,oBAArB,IAA8C2B,IAAI,CAACK,MAAL,CAAYhC,IAAZ,KAAqB,UAArB,IAAmC2B,IAAI,KAAKA,IAAI,CAACK,MAAL,CAAYC,KAArI,CAFL,EAGE;AACEJ,UAAAA,UAAU,CAACF,IAAD,CAAV;AACH;AACJ,OAbE;;AAcHlB,MAAAA,gBAAgB,CAACkB,IAAD,EAAO;AACnB,YAAIJ,OAAO,CAACd,gBAAZ,EAA8B;AAC1BoB,UAAAA,UAAU,CAACF,IAAD,CAAV;AACH;AACJ,OAlBE;;AAmBHd,MAAAA,uBAAuB,CAACc,IAAD,EAAO;AAC1B,YAAIJ,OAAO,CAACV,uBAAR,IAAmCc,IAAI,CAACK,MAAL,CAAYhC,IAAZ,KAAqB,oBAA5D,EAAkF;AAC9E6B,UAAAA,UAAU,CAACF,IAAD,CAAV;AACH;AACJ;;AAvBE,KAAP;AAyBH;;AA7GY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to check for jsdoc presence.\n * @author Gyandeep Singh\n */\n\"use strict\";\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require JSDoc comments\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/require-jsdoc\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    require: {\n                        type: \"object\",\n                        properties: {\n                            ClassDeclaration: {\n                                type: \"boolean\",\n                                default: false\n                            },\n                            MethodDefinition: {\n                                type: \"boolean\",\n                                default: false\n                            },\n                            FunctionDeclaration: {\n                                type: \"boolean\",\n                                default: true\n                            },\n                            ArrowFunctionExpression: {\n                                type: \"boolean\",\n                                default: false\n                            },\n                            FunctionExpression: {\n                                type: \"boolean\",\n                                default: false\n                            }\n                        },\n                        additionalProperties: false,\n                        default: {}\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        deprecated: true,\n        replacedBy: []\n    },\n\n    create(context) {\n        const source = context.getSourceCode();\n        const DEFAULT_OPTIONS = {\n            FunctionDeclaration: true,\n            MethodDefinition: false,\n            ClassDeclaration: false,\n            ArrowFunctionExpression: false,\n            FunctionExpression: false\n        };\n        const options = Object.assign(DEFAULT_OPTIONS, context.options[0] && context.options[0].require);\n\n        /**\n         * Report the error message\n         * @param {ASTNode} node node to report\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({ node, message: \"Missing JSDoc comment.\" });\n        }\n\n        /**\n         * Check if the jsdoc comment is present or not.\n         * @param {ASTNode} node node to examine\n         * @returns {void}\n         */\n        function checkJsDoc(node) {\n            const jsdocComment = source.getJSDocComment(node);\n\n            if (!jsdocComment) {\n                report(node);\n            }\n        }\n\n        return {\n            FunctionDeclaration(node) {\n                if (options.FunctionDeclaration) {\n                    checkJsDoc(node);\n                }\n            },\n            FunctionExpression(node) {\n                if (\n                    (options.MethodDefinition && node.parent.type === \"MethodDefinition\") ||\n                    (options.FunctionExpression && (node.parent.type === \"VariableDeclarator\" || (node.parent.type === \"Property\" && node === node.parent.value)))\n                ) {\n                    checkJsDoc(node);\n                }\n            },\n            ClassDeclaration(node) {\n                if (options.ClassDeclaration) {\n                    checkJsDoc(node);\n                }\n            },\n            ArrowFunctionExpression(node) {\n                if (options.ArrowFunctionExpression && node.parent.type === \"VariableDeclarator\") {\n                    checkJsDoc(node);\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}