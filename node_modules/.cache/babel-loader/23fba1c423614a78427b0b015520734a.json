{"ast":null,"code":"/**\n * @fileoverview Rule to disallow unnecessary labels\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unnecessary labels\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-extra-label\"\n    },\n    schema: [],\n    fixable: \"code\",\n    messages: {\n      unexpected: \"This label '{{name}}' is unnecessary.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    let scopeInfo = null;\n    /**\n     * Creates a new scope with a breakable statement.\n     * @param {ASTNode} node A node to create. This is a BreakableStatement.\n     * @returns {void}\n     */\n\n    function enterBreakableStatement(node) {\n      scopeInfo = {\n        label: node.parent.type === \"LabeledStatement\" ? node.parent.label : null,\n        breakable: true,\n        upper: scopeInfo\n      };\n    }\n    /**\n     * Removes the top scope of the stack.\n     * @returns {void}\n     */\n\n\n    function exitBreakableStatement() {\n      scopeInfo = scopeInfo.upper;\n    }\n    /**\n     * Creates a new scope with a labeled statement.\n     *\n     * This ignores it if the body is a breakable statement.\n     * In this case it's handled in the `enterBreakableStatement` function.\n     * @param {ASTNode} node A node to create. This is a LabeledStatement.\n     * @returns {void}\n     */\n\n\n    function enterLabeledStatement(node) {\n      if (!astUtils.isBreakableStatement(node.body)) {\n        scopeInfo = {\n          label: node.label,\n          breakable: false,\n          upper: scopeInfo\n        };\n      }\n    }\n    /**\n     * Removes the top scope of the stack.\n     *\n     * This ignores it if the body is a breakable statement.\n     * In this case it's handled in the `exitBreakableStatement` function.\n     * @param {ASTNode} node A node. This is a LabeledStatement.\n     * @returns {void}\n     */\n\n\n    function exitLabeledStatement(node) {\n      if (!astUtils.isBreakableStatement(node.body)) {\n        scopeInfo = scopeInfo.upper;\n      }\n    }\n    /**\n     * Reports a given control node if it's unnecessary.\n     * @param {ASTNode} node A node. This is a BreakStatement or a\n     *      ContinueStatement.\n     * @returns {void}\n     */\n\n\n    function reportIfUnnecessary(node) {\n      if (!node.label) {\n        return;\n      }\n\n      const labelNode = node.label;\n\n      for (let info = scopeInfo; info !== null; info = info.upper) {\n        if (info.breakable || info.label && info.label.name === labelNode.name) {\n          if (info.breakable && info.label && info.label.name === labelNode.name) {\n            context.report({\n              node: labelNode,\n              messageId: \"unexpected\",\n              data: labelNode,\n\n              fix(fixer) {\n                const breakOrContinueToken = sourceCode.getFirstToken(node);\n\n                if (sourceCode.commentsExistBetween(breakOrContinueToken, labelNode)) {\n                  return null;\n                }\n\n                return fixer.removeRange([breakOrContinueToken.range[1], labelNode.range[1]]);\n              }\n\n            });\n          }\n\n          return;\n        }\n      }\n    }\n\n    return {\n      WhileStatement: enterBreakableStatement,\n      \"WhileStatement:exit\": exitBreakableStatement,\n      DoWhileStatement: enterBreakableStatement,\n      \"DoWhileStatement:exit\": exitBreakableStatement,\n      ForStatement: enterBreakableStatement,\n      \"ForStatement:exit\": exitBreakableStatement,\n      ForInStatement: enterBreakableStatement,\n      \"ForInStatement:exit\": exitBreakableStatement,\n      ForOfStatement: enterBreakableStatement,\n      \"ForOfStatement:exit\": exitBreakableStatement,\n      SwitchStatement: enterBreakableStatement,\n      \"SwitchStatement:exit\": exitBreakableStatement,\n      LabeledStatement: enterLabeledStatement,\n      \"LabeledStatement:exit\": exitLabeledStatement,\n      BreakStatement: reportIfUnnecessary,\n      ContinueStatement: reportIfUnnecessary\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-extra-label.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","fixable","messages","unexpected","create","context","sourceCode","getSourceCode","scopeInfo","enterBreakableStatement","node","label","parent","breakable","upper","exitBreakableStatement","enterLabeledStatement","isBreakableStatement","body","exitLabeledStatement","reportIfUnnecessary","labelNode","info","name","report","messageId","data","fix","fixer","breakOrContinueToken","getFirstToken","commentsExistBetween","removeRange","range","WhileStatement","DoWhileStatement","ForStatement","ForInStatement","ForOfStatement","SwitchStatement","LabeledStatement","BreakStatement","ContinueStatement"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to disallow unnecessary labels\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow unnecessary labels\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-extra-label\"\n        },\n\n        schema: [],\n        fixable: \"code\",\n\n        messages: {\n            unexpected: \"This label '{{name}}' is unnecessary.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        let scopeInfo = null;\n\n        /**\n         * Creates a new scope with a breakable statement.\n         * @param {ASTNode} node A node to create. This is a BreakableStatement.\n         * @returns {void}\n         */\n        function enterBreakableStatement(node) {\n            scopeInfo = {\n                label: node.parent.type === \"LabeledStatement\" ? node.parent.label : null,\n                breakable: true,\n                upper: scopeInfo\n            };\n        }\n\n        /**\n         * Removes the top scope of the stack.\n         * @returns {void}\n         */\n        function exitBreakableStatement() {\n            scopeInfo = scopeInfo.upper;\n        }\n\n        /**\n         * Creates a new scope with a labeled statement.\n         *\n         * This ignores it if the body is a breakable statement.\n         * In this case it's handled in the `enterBreakableStatement` function.\n         * @param {ASTNode} node A node to create. This is a LabeledStatement.\n         * @returns {void}\n         */\n        function enterLabeledStatement(node) {\n            if (!astUtils.isBreakableStatement(node.body)) {\n                scopeInfo = {\n                    label: node.label,\n                    breakable: false,\n                    upper: scopeInfo\n                };\n            }\n        }\n\n        /**\n         * Removes the top scope of the stack.\n         *\n         * This ignores it if the body is a breakable statement.\n         * In this case it's handled in the `exitBreakableStatement` function.\n         * @param {ASTNode} node A node. This is a LabeledStatement.\n         * @returns {void}\n         */\n        function exitLabeledStatement(node) {\n            if (!astUtils.isBreakableStatement(node.body)) {\n                scopeInfo = scopeInfo.upper;\n            }\n        }\n\n        /**\n         * Reports a given control node if it's unnecessary.\n         * @param {ASTNode} node A node. This is a BreakStatement or a\n         *      ContinueStatement.\n         * @returns {void}\n         */\n        function reportIfUnnecessary(node) {\n            if (!node.label) {\n                return;\n            }\n\n            const labelNode = node.label;\n\n            for (let info = scopeInfo; info !== null; info = info.upper) {\n                if (info.breakable || info.label && info.label.name === labelNode.name) {\n                    if (info.breakable && info.label && info.label.name === labelNode.name) {\n                        context.report({\n                            node: labelNode,\n                            messageId: \"unexpected\",\n                            data: labelNode,\n                            fix(fixer) {\n                                const breakOrContinueToken = sourceCode.getFirstToken(node);\n\n                                if (sourceCode.commentsExistBetween(breakOrContinueToken, labelNode)) {\n                                    return null;\n                                }\n\n                                return fixer.removeRange([breakOrContinueToken.range[1], labelNode.range[1]]);\n                            }\n                        });\n                    }\n                    return;\n                }\n            }\n        }\n\n        return {\n            WhileStatement: enterBreakableStatement,\n            \"WhileStatement:exit\": exitBreakableStatement,\n            DoWhileStatement: enterBreakableStatement,\n            \"DoWhileStatement:exit\": exitBreakableStatement,\n            ForStatement: enterBreakableStatement,\n            \"ForStatement:exit\": exitBreakableStatement,\n            ForInStatement: enterBreakableStatement,\n            \"ForInStatement:exit\": exitBreakableStatement,\n            ForOfStatement: enterBreakableStatement,\n            \"ForOfStatement:exit\": exitBreakableStatement,\n            SwitchStatement: enterBreakableStatement,\n            \"SwitchStatement:exit\": exitBreakableStatement,\n            LabeledStatement: enterLabeledStatement,\n            \"LabeledStatement:exit\": exitLabeledStatement,\n            BreakStatement: reportIfUnnecessary,\n            ContinueStatement: reportIfUnnecessary\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}