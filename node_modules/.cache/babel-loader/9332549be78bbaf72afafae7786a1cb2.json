{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"chai\").assert,\n    isThenable = require(\"../../thenable/is\");\n\ndescribe(\"thenable/is\", function () {\n  it(\"Should return true on object with `then` method\", function () {\n    assert.equal(isThenable({\n      then: function () {\n        return true;\n      }\n    }), true);\n  });\n\n  if (typeof Promise === \"function\") {\n    it(\"Should return true on promise\", function () {\n      assert.equal(isThenable(Promise.resolve()), true);\n    });\n  }\n\n  it(\"Should return false on object with `then` non callable property\", function () {\n    assert.equal(isThenable({\n      then: {}\n    }), false);\n  });\n  it(\"Should return false on plain object\", function () {\n    assert.equal(isThenable({}), false);\n  });\n  it(\"Should return false on function\", function () {\n    assert.equal(isThenable(function () {\n      return true;\n    }), false);\n  });\n  it(\"Should return false on array\", function () {\n    assert.equal(isThenable([]), false);\n  });\n\n  if (typeof Object.create === \"function\") {\n    it(\"Should return false on object with no prototype\", function () {\n      assert.equal(isThenable(Object.create(null)), false);\n    });\n  }\n\n  it(\"Should return false on string\", function () {\n    assert.equal(isThenable(\"foo\"), false);\n  });\n  it(\"Should return false on empty string\", function () {\n    assert.equal(isThenable(\"\"), false);\n  });\n  it(\"Should return false on number\", function () {\n    assert.equal(isThenable(123), false);\n  });\n  it(\"Should return false on NaN\", function () {\n    assert.equal(isThenable(NaN), false);\n  });\n  it(\"Should return false on boolean\", function () {\n    assert.equal(isThenable(true), false);\n  });\n\n  if (typeof Symbol === \"function\") {\n    it(\"Should return false on symbol\", function () {\n      assert.equal(isThenable(Symbol(\"foo\")), false);\n    });\n  }\n\n  it(\"Should return false on null\", function () {\n    assert.equal(isThenable(null), false);\n  });\n  it(\"Should return false on undefined\", function () {\n    assert.equal(isThenable(void 0), false);\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type/test/thenable/is.js"],"names":["assert","require","isThenable","describe","it","equal","then","Promise","resolve","Object","create","NaN","Symbol"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar assert     = require(\"chai\").assert\n  , isThenable = require(\"../../thenable/is\");\n\ndescribe(\"thenable/is\", function () {\n\tit(\"Should return true on object with `then` method\", function () {\n\t\tassert.equal(isThenable({ then: function () { return true; } }), true);\n\t});\n\tif (typeof Promise === \"function\") {\n\t\tit(\"Should return true on promise\", function () {\n\t\t\tassert.equal(isThenable(Promise.resolve()), true);\n\t\t});\n\t}\n\tit(\"Should return false on object with `then` non callable property\", function () {\n\t\tassert.equal(isThenable({ then: {} }), false);\n\t});\n\n\tit(\"Should return false on plain object\", function () { assert.equal(isThenable({}), false); });\n\tit(\"Should return false on function\", function () {\n\t\tassert.equal(isThenable(function () { return true; }), false);\n\t});\n\tit(\"Should return false on array\", function () { assert.equal(isThenable([]), false); });\n\tif (typeof Object.create === \"function\") {\n\t\tit(\"Should return false on object with no prototype\", function () {\n\t\t\tassert.equal(isThenable(Object.create(null)), false);\n\t\t});\n\t}\n\tit(\"Should return false on string\", function () { assert.equal(isThenable(\"foo\"), false); });\n\tit(\"Should return false on empty string\", function () { assert.equal(isThenable(\"\"), false); });\n\tit(\"Should return false on number\", function () { assert.equal(isThenable(123), false); });\n\tit(\"Should return false on NaN\", function () { assert.equal(isThenable(NaN), false); });\n\tit(\"Should return false on boolean\", function () { assert.equal(isThenable(true), false); });\n\tif (typeof Symbol === \"function\") {\n\t\tit(\"Should return false on symbol\", function () {\n\t\t\tassert.equal(isThenable(Symbol(\"foo\")), false);\n\t\t});\n\t}\n\n\tit(\"Should return false on null\", function () { assert.equal(isThenable(null), false); });\n\tit(\"Should return false on undefined\", function () {\n\t\tassert.equal(isThenable(void 0), false);\n\t});\n});\n"]},"metadata":{},"sourceType":"script"}