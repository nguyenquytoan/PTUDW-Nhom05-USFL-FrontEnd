{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromOptionalCallExpression;\n/**\n * Extractor function for a OptionalCallExpression type value node.\n * A member expression is accessing a property on an object `obj.property` and invoking it.\n *\n * @param - value - AST Value object with type `OptionalCallExpression`\n * @returns - The extracted value converted to correct type\n *  and maintaing `obj.property?.()` convention.\n */\n\nfunction extractValueFromOptionalCallExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('./index.js').default;\n\n  return getValue(value.callee) + '?.(' + value.arguments.map(function (x) {\n    return getValue(x);\n  }).join(', ') + ')';\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/lib/values/expressions/OptionalCallExpression.js"],"names":["Object","defineProperty","exports","value","default","extractValueFromOptionalCallExpression","getValue","require","callee","arguments","map","x","join"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,sCAAlB;AACA;;;;;;;;;AAQA,SAASA,sCAAT,CAAgDF,KAAhD,EAAuD;AACrD;AACA,MAAIG,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBH,OAArC;;AACA,SAAOE,QAAQ,CAACH,KAAK,CAACK,MAAP,CAAR,GAAyB,KAAzB,GAAiCL,KAAK,CAACM,SAAN,CAAgBC,GAAhB,CAAoB,UAAUC,CAAV,EAAa;AACvE,WAAOL,QAAQ,CAACK,CAAD,CAAf;AACD,GAFuC,EAErCC,IAFqC,CAEhC,IAFgC,CAAjC,GAES,GAFhB;AAGD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromOptionalCallExpression;\n/**\n * Extractor function for a OptionalCallExpression type value node.\n * A member expression is accessing a property on an object `obj.property` and invoking it.\n *\n * @param - value - AST Value object with type `OptionalCallExpression`\n * @returns - The extracted value converted to correct type\n *  and maintaing `obj.property?.()` convention.\n */\nfunction extractValueFromOptionalCallExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('./index.js').default;\n  return getValue(value.callee) + '?.(' + value.arguments.map(function (x) {\n    return getValue(x);\n  }).join(', ') + ')';\n}"]},"metadata":{},"sourceType":"script"}