{"ast":null,"code":"var common = require('../common');\n\nvar assert = common.assert;\nvar fake = common.fake.create();\n\nvar retry = require(common.dir.lib + '/retry');\n\n(function testReset() {\n  var error = new Error('some error');\n  var operation = retry.operation([1, 2, 3]);\n  var attempts = 0;\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n  var expectedFinishes = 1;\n  var finishes = 0;\n\n  var fn = function () {\n    operation.attempt(function (currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n\n      if (operation.retry(error)) {\n        return;\n      }\n\n      finishes++;\n      assert.equal(expectedFinishes, finishes);\n      assert.strictEqual(attempts, 4);\n      assert.strictEqual(operation.attempts(), attempts);\n      assert.strictEqual(operation.mainError(), error);\n\n      if (finishes < 2) {\n        attempts = 0;\n        expectedFinishes++;\n        operation.reset();\n        fn();\n      } else {\n        finalCallback();\n      }\n    });\n  };\n\n  fn();\n})();\n\n(function testErrors() {\n  var operation = retry.operation();\n  var error = new Error('some error');\n  var error2 = new Error('some other error');\n\n  operation._errors.push(error);\n\n  operation._errors.push(error2);\n\n  assert.deepEqual(operation.errors(), [error, error2]);\n})();\n\n(function testMainErrorReturnsMostFrequentError() {\n  var operation = retry.operation();\n  var error = new Error('some error');\n  var error2 = new Error('some other error');\n\n  operation._errors.push(error);\n\n  operation._errors.push(error2);\n\n  operation._errors.push(error);\n\n  assert.strictEqual(operation.mainError(), error);\n})();\n\n(function testMainErrorReturnsLastErrorOnEqualCount() {\n  var operation = retry.operation();\n  var error = new Error('some error');\n  var error2 = new Error('some other error');\n\n  operation._errors.push(error);\n\n  operation._errors.push(error2);\n\n  assert.strictEqual(operation.mainError(), error2);\n})();\n\n(function testAttempt() {\n  var operation = retry.operation();\n  var fn = new Function();\n  var timeoutOpts = {\n    timeout: 1,\n    cb: function () {}\n  };\n  operation.attempt(fn, timeoutOpts);\n  assert.strictEqual(fn, operation._fn);\n  assert.strictEqual(timeoutOpts.timeout, operation._operationTimeout);\n  assert.strictEqual(timeoutOpts.cb, operation._operationTimeoutCb);\n})();\n\n(function testRetry() {\n  var error = new Error('some error');\n  var operation = retry.operation([1, 2, 3]);\n  var attempts = 0;\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var fn = function () {\n    operation.attempt(function (currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n\n      if (operation.retry(error)) {\n        return;\n      }\n\n      assert.strictEqual(attempts, 4);\n      assert.strictEqual(operation.attempts(), attempts);\n      assert.strictEqual(operation.mainError(), error);\n      finalCallback();\n    });\n  };\n\n  fn();\n})();\n\n(function testRetryForever() {\n  var error = new Error('some error');\n  var operation = retry.operation({\n    retries: 3,\n    forever: true\n  });\n  var attempts = 0;\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var fn = function () {\n    operation.attempt(function (currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n\n      if (attempts !== 6 && operation.retry(error)) {\n        return;\n      }\n\n      assert.strictEqual(attempts, 6);\n      assert.strictEqual(operation.attempts(), attempts);\n      assert.strictEqual(operation.mainError(), error);\n      finalCallback();\n    });\n  };\n\n  fn();\n})();\n\n(function testRetryForeverNoRetries() {\n  var error = new Error('some error');\n  var delay = 50;\n  var operation = retry.operation({\n    retries: null,\n    forever: true,\n    minTimeout: delay,\n    maxTimeout: delay\n  });\n  var attempts = 0;\n  var startTime = new Date().getTime();\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var fn = function () {\n    operation.attempt(function (currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n\n      if (attempts !== 4 && operation.retry(error)) {\n        return;\n      }\n\n      var endTime = new Date().getTime();\n      var minTime = startTime + delay * 3;\n      var maxTime = minTime + 20; // add a little headroom for code execution time\n\n      assert(endTime >= minTime);\n      assert(endTime < maxTime);\n      assert.strictEqual(attempts, 4);\n      assert.strictEqual(operation.attempts(), attempts);\n      assert.strictEqual(operation.mainError(), error);\n      finalCallback();\n    });\n  };\n\n  fn();\n})();\n\n(function testStop() {\n  var error = new Error('some error');\n  var operation = retry.operation([1, 2, 3]);\n  var attempts = 0;\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var fn = function () {\n    operation.attempt(function (currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n\n      if (attempts === 2) {\n        operation.stop();\n        assert.strictEqual(attempts, 2);\n        assert.strictEqual(operation.attempts(), attempts);\n        assert.strictEqual(operation.mainError(), error);\n        finalCallback();\n      }\n\n      if (operation.retry(error)) {\n        return;\n      }\n    });\n  };\n\n  fn();\n})();\n\n(function testMaxRetryTime() {\n  var error = new Error('some error');\n  var maxRetryTime = 30;\n  var operation = retry.operation({\n    minTimeout: 1,\n    maxRetryTime: maxRetryTime\n  });\n  var attempts = 0;\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var longAsyncFunction = function (wait, callback) {\n    setTimeout(callback, wait);\n  };\n\n  var fn = function () {\n    var startTime = new Date().getTime();\n    operation.attempt(function (currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n\n      if (attempts !== 2) {\n        if (operation.retry(error)) {\n          return;\n        }\n      } else {\n        var curTime = new Date().getTime();\n        longAsyncFunction(maxRetryTime - (curTime - startTime - 1), function () {\n          if (operation.retry(error)) {\n            assert.fail('timeout should be occurred');\n            return;\n          }\n\n          assert.strictEqual(operation.mainError(), error);\n          finalCallback();\n        });\n      }\n    });\n  };\n\n  fn();\n})();","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/retry/test/integration/test-retry-operation.js"],"names":["common","require","assert","fake","create","retry","dir","lib","testReset","error","Error","operation","attempts","finalCallback","callback","expectAnytime","expectedFinishes","finishes","fn","attempt","currentAttempt","equal","strictEqual","mainError","reset","testErrors","error2","_errors","push","deepEqual","errors","testMainErrorReturnsMostFrequentError","testMainErrorReturnsLastErrorOnEqualCount","testAttempt","Function","timeoutOpts","timeout","cb","_fn","_operationTimeout","_operationTimeoutCb","testRetry","testRetryForever","retries","forever","testRetryForeverNoRetries","delay","minTimeout","maxTimeout","startTime","Date","getTime","endTime","minTime","maxTime","testStop","stop","testMaxRetryTime","maxRetryTime","longAsyncFunction","wait","setTimeout","curTime","fail"],"mappings":"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","sourcesContent":["var common = require('../common');\nvar assert = common.assert;\nvar fake = common.fake.create();\nvar retry = require(common.dir.lib + '/retry');\n\n(function testReset() {\n  var error = new Error('some error');\n  var operation = retry.operation([1, 2, 3]);\n  var attempts = 0;\n\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var expectedFinishes = 1;\n  var finishes         = 0;\n\n  var fn = function() {\n    operation.attempt(function(currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n      if (operation.retry(error)) {\n        return;\n      }\n\n      finishes++\n      assert.equal(expectedFinishes, finishes);\n      assert.strictEqual(attempts, 4);\n      assert.strictEqual(operation.attempts(), attempts);\n      assert.strictEqual(operation.mainError(), error);\n\n      if (finishes < 2) {\n        attempts = 0;\n        expectedFinishes++;\n        operation.reset();\n        fn()\n      } else {\n        finalCallback();\n      }\n    });\n  };\n\n  fn();\n})();\n\n(function testErrors() {\n  var operation = retry.operation();\n\n  var error = new Error('some error');\n  var error2 = new Error('some other error');\n  operation._errors.push(error);\n  operation._errors.push(error2);\n\n  assert.deepEqual(operation.errors(), [error, error2]);\n})();\n\n(function testMainErrorReturnsMostFrequentError() {\n  var operation = retry.operation();\n  var error = new Error('some error');\n  var error2 = new Error('some other error');\n\n  operation._errors.push(error);\n  operation._errors.push(error2);\n  operation._errors.push(error);\n\n  assert.strictEqual(operation.mainError(), error);\n})();\n\n(function testMainErrorReturnsLastErrorOnEqualCount() {\n  var operation = retry.operation();\n  var error = new Error('some error');\n  var error2 = new Error('some other error');\n\n  operation._errors.push(error);\n  operation._errors.push(error2);\n\n  assert.strictEqual(operation.mainError(), error2);\n})();\n\n(function testAttempt() {\n  var operation = retry.operation();\n  var fn = new Function();\n\n  var timeoutOpts = {\n    timeout: 1,\n    cb: function() {}\n  };\n  operation.attempt(fn, timeoutOpts);\n\n  assert.strictEqual(fn, operation._fn);\n  assert.strictEqual(timeoutOpts.timeout, operation._operationTimeout);\n  assert.strictEqual(timeoutOpts.cb, operation._operationTimeoutCb);\n})();\n\n(function testRetry() {\n  var error = new Error('some error');\n  var operation = retry.operation([1, 2, 3]);\n  var attempts = 0;\n\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var fn = function() {\n    operation.attempt(function(currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n      if (operation.retry(error)) {\n        return;\n      }\n\n      assert.strictEqual(attempts, 4);\n      assert.strictEqual(operation.attempts(), attempts);\n      assert.strictEqual(operation.mainError(), error);\n      finalCallback();\n    });\n  };\n\n  fn();\n})();\n\n(function testRetryForever() {\n  var error = new Error('some error');\n  var operation = retry.operation({ retries: 3, forever: true });\n  var attempts = 0;\n\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var fn = function() {\n    operation.attempt(function(currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n      if (attempts !== 6 && operation.retry(error)) {\n        return;\n      }\n\n      assert.strictEqual(attempts, 6);\n      assert.strictEqual(operation.attempts(), attempts);\n      assert.strictEqual(operation.mainError(), error);\n      finalCallback();\n    });\n  };\n\n  fn();\n})();\n\n(function testRetryForeverNoRetries() {\n  var error = new Error('some error');\n  var delay = 50\n  var operation = retry.operation({\n    retries: null,\n    forever: true,\n    minTimeout: delay,\n    maxTimeout: delay\n  });\n\n  var attempts = 0;\n  var startTime = new Date().getTime();\n\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var fn = function() {\n    operation.attempt(function(currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n      if (attempts !== 4 && operation.retry(error)) {\n        return;\n      }\n\n      var endTime = new Date().getTime();\n      var minTime = startTime + (delay * 3);\n      var maxTime = minTime + 20 // add a little headroom for code execution time\n      assert(endTime >= minTime)\n      assert(endTime < maxTime)\n      assert.strictEqual(attempts, 4);\n      assert.strictEqual(operation.attempts(), attempts);\n      assert.strictEqual(operation.mainError(), error);\n      finalCallback();\n    });\n  };\n\n  fn();\n})();\n\n(function testStop() {\n  var error = new Error('some error');\n  var operation = retry.operation([1, 2, 3]);\n  var attempts = 0;\n\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var fn = function() {\n    operation.attempt(function(currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n\n      if (attempts === 2) {\n        operation.stop();\n\n        assert.strictEqual(attempts, 2);\n        assert.strictEqual(operation.attempts(), attempts);\n        assert.strictEqual(operation.mainError(), error);\n        finalCallback();\n      }\n\n      if (operation.retry(error)) {\n        return;\n      }\n    });\n  };\n\n  fn();\n})();\n\n(function testMaxRetryTime() {\n  var error = new Error('some error');\n  var maxRetryTime = 30;\n  var operation = retry.operation({\n      minTimeout: 1,\n      maxRetryTime: maxRetryTime\n  });\n  var attempts = 0;\n\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var longAsyncFunction = function (wait, callback){\n    setTimeout(callback, wait);\n  };\n\n  var fn = function() {\n    var startTime = new Date().getTime();\n    operation.attempt(function(currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n\n      if (attempts !== 2) {\n        if (operation.retry(error)) {\n            return;\n        }\n      } else {\n        var curTime = new Date().getTime();\n        longAsyncFunction(maxRetryTime - (curTime - startTime - 1), function(){\n          if (operation.retry(error)) {\n            assert.fail('timeout should be occurred');\n            return;\n          }\n\n          assert.strictEqual(operation.mainError(), error);\n          finalCallback();\n        });\n      }\n    });\n  };\n\n  fn();\n})();\n"]},"metadata":{},"sourceType":"script"}