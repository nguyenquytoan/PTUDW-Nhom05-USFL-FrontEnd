{"ast":null,"code":"'use strict';\n\nvar dotenvExpand = function (config) {\n  // if ignoring process.env, use a blank object\n  var environment = config.ignoreProcessEnv ? {} : process.env;\n\n  var interpolate = function (envValue) {\n    var matches = envValue.match(/(.?\\${?(?:[a-zA-Z0-9_]+)?}?)/g) || [];\n    return matches.reduce(function (newEnv, match) {\n      var parts = /(.?)\\${?([a-zA-Z0-9_]+)?}?/g.exec(match);\n      var prefix = parts[1];\n      var value, replacePart;\n\n      if (prefix === '\\\\') {\n        replacePart = parts[0];\n        value = replacePart.replace('\\\\$', '$');\n      } else {\n        var key = parts[2];\n        replacePart = parts[0].substring(prefix.length); // process.env value 'wins' over .env file's value\n\n        value = environment.hasOwnProperty(key) ? environment[key] : config.parsed[key] || ''; // Resolve recursive interpolations\n\n        value = interpolate(value);\n      }\n\n      return newEnv.replace(replacePart, value);\n    }, envValue);\n  };\n\n  for (var configKey in config.parsed) {\n    var value = environment.hasOwnProperty(configKey) ? environment[configKey] : config.parsed[configKey];\n    config.parsed[configKey] = interpolate(value);\n  }\n\n  for (var processKey in config.parsed) {\n    environment[processKey] = config.parsed[processKey];\n  }\n\n  return config;\n};\n\nmodule.exports = dotenvExpand;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/dotenv-expand/lib/main.js"],"names":["dotenvExpand","config","environment","ignoreProcessEnv","process","env","interpolate","envValue","matches","match","reduce","newEnv","parts","exec","prefix","value","replacePart","replace","key","substring","length","hasOwnProperty","parsed","configKey","processKey","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAG,UAAUC,MAAV,EAAkB;AACnC;AACA,MAAIC,WAAW,GAAGD,MAAM,CAACE,gBAAP,GAA0B,EAA1B,GAA+BC,OAAO,CAACC,GAAzD;;AAEA,MAAIC,WAAW,GAAG,UAAUC,QAAV,EAAoB;AACpC,QAAIC,OAAO,GAAGD,QAAQ,CAACE,KAAT,CAAe,+BAAf,KAAmD,EAAjE;AAEA,WAAOD,OAAO,CAACE,MAAR,CAAe,UAAUC,MAAV,EAAkBF,KAAlB,EAAyB;AAC7C,UAAIG,KAAK,GAAG,8BAA8BC,IAA9B,CAAmCJ,KAAnC,CAAZ;AACA,UAAIK,MAAM,GAAGF,KAAK,CAAC,CAAD,CAAlB;AAEA,UAAIG,KAAJ,EAAWC,WAAX;;AAEA,UAAIF,MAAM,KAAK,IAAf,EAAqB;AACnBE,QAAAA,WAAW,GAAGJ,KAAK,CAAC,CAAD,CAAnB;AACAG,QAAAA,KAAK,GAAGC,WAAW,CAACC,OAAZ,CAAoB,KAApB,EAA2B,GAA3B,CAAR;AACD,OAHD,MAGO;AACL,YAAIC,GAAG,GAAGN,KAAK,CAAC,CAAD,CAAf;AACAI,QAAAA,WAAW,GAAGJ,KAAK,CAAC,CAAD,CAAL,CAASO,SAAT,CAAmBL,MAAM,CAACM,MAA1B,CAAd,CAFK,CAGL;;AACAL,QAAAA,KAAK,GAAGb,WAAW,CAACmB,cAAZ,CAA2BH,GAA3B,IAAkChB,WAAW,CAACgB,GAAD,CAA7C,GAAsDjB,MAAM,CAACqB,MAAP,CAAcJ,GAAd,KAAsB,EAApF,CAJK,CAML;;AACAH,QAAAA,KAAK,GAAGT,WAAW,CAACS,KAAD,CAAnB;AACD;;AAED,aAAOJ,MAAM,CAACM,OAAP,CAAeD,WAAf,EAA4BD,KAA5B,CAAP;AACD,KApBM,EAoBJR,QApBI,CAAP;AAqBD,GAxBD;;AA0BA,OAAK,IAAIgB,SAAT,IAAsBtB,MAAM,CAACqB,MAA7B,EAAqC;AACnC,QAAIP,KAAK,GAAGb,WAAW,CAACmB,cAAZ,CAA2BE,SAA3B,IAAwCrB,WAAW,CAACqB,SAAD,CAAnD,GAAiEtB,MAAM,CAACqB,MAAP,CAAcC,SAAd,CAA7E;AAEAtB,IAAAA,MAAM,CAACqB,MAAP,CAAcC,SAAd,IAA2BjB,WAAW,CAACS,KAAD,CAAtC;AACD;;AAED,OAAK,IAAIS,UAAT,IAAuBvB,MAAM,CAACqB,MAA9B,EAAsC;AACpCpB,IAAAA,WAAW,CAACsB,UAAD,CAAX,GAA0BvB,MAAM,CAACqB,MAAP,CAAcE,UAAd,CAA1B;AACD;;AAED,SAAOvB,MAAP;AACD,CAzCD;;AA2CAwB,MAAM,CAACC,OAAP,GAAiB1B,YAAjB","sourcesContent":["'use strict'\n\nvar dotenvExpand = function (config) {\n  // if ignoring process.env, use a blank object\n  var environment = config.ignoreProcessEnv ? {} : process.env\n\n  var interpolate = function (envValue) {\n    var matches = envValue.match(/(.?\\${?(?:[a-zA-Z0-9_]+)?}?)/g) || []\n\n    return matches.reduce(function (newEnv, match) {\n      var parts = /(.?)\\${?([a-zA-Z0-9_]+)?}?/g.exec(match)\n      var prefix = parts[1]\n\n      var value, replacePart\n\n      if (prefix === '\\\\') {\n        replacePart = parts[0]\n        value = replacePart.replace('\\\\$', '$')\n      } else {\n        var key = parts[2]\n        replacePart = parts[0].substring(prefix.length)\n        // process.env value 'wins' over .env file's value\n        value = environment.hasOwnProperty(key) ? environment[key] : (config.parsed[key] || '')\n\n        // Resolve recursive interpolations\n        value = interpolate(value)\n      }\n\n      return newEnv.replace(replacePart, value)\n    }, envValue)\n  }\n\n  for (var configKey in config.parsed) {\n    var value = environment.hasOwnProperty(configKey) ? environment[configKey] : config.parsed[configKey]\n\n    config.parsed[configKey] = interpolate(value)\n  }\n\n  for (var processKey in config.parsed) {\n    environment[processKey] = config.parsed[processKey]\n  }\n\n  return config\n}\n\nmodule.exports = dotenvExpand\n"]},"metadata":{},"sourceType":"script"}