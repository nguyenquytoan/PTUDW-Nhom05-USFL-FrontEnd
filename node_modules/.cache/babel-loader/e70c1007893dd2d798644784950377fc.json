{"ast":null,"code":"/* eslint-env mocha */\nimport assert from 'assert';\nimport { getOpeningElement, setParserName } from '../helper';\nimport getProp from '../../src/getProp';\ndescribe('getProp', () => {\n  beforeEach(() => {\n    setParserName('babel');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof getProp;\n    assert.equal(expected, actual);\n  });\n  it('should return undefined if no arguments are provided', () => {\n    const expected = undefined;\n    const actual = getProp();\n    assert.equal(expected, actual);\n  });\n  it('should return undefined if the attribute is absent', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const expected = undefined;\n    const actual = getProp(props, prop);\n    assert.equal(expected, actual);\n  });\n  it('should return the correct attribute if the attribute exists', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const expected = 'id';\n    const actual = getProp(props, prop).name.name;\n    assert.equal(expected, actual);\n  });\n  it('should return the correct attribute if the attribute exists in spread', () => {\n    const code = '<div {...{ id: \"foo\" }} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'ID';\n    const expected = 'id';\n    const actual = getProp(props, prop).name.name;\n    assert.equal(expected, actual);\n  });\n  it('should return the correct attribute if the attribute exists in spread as an expression', () => {\n    const code = '<div {...{ id }} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const expected = 'id';\n    const actual = getProp(props, prop);\n    const actualName = actual.name.name;\n    const actualValue = actual.value.expression.name;\n    assert.equal(expected, actualName);\n    assert.equal(expected, actualValue);\n  });\n  it('should return the correct attribute if the attribute exists in spread (case sensitive)', () => {\n    const code = '<div {...{ id: \"foo\" }} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const options = {\n      ignoreCase: false\n    };\n    const expected = 'id';\n    const actual = getProp(props, prop, options).name.name;\n    assert.equal(expected, actual);\n  });\n  it('should return undefined if the attribute does not exist in spread (case sensitive)', () => {\n    const code = '<div {...{ id: \"foo\" }} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'ID';\n    const options = {\n      ignoreCase: false\n    };\n    const expected = undefined;\n    const actual = getProp(props, prop, options);\n    assert.equal(expected, actual);\n  });\n  it('should return undefined for key in spread', () => {\n    // https://github.com/reactjs/rfcs/pull/107\n    const code = '<div {...{ key }} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'key';\n    const expected = undefined;\n    const actual = getProp(props, prop);\n    assert.equal(expected, actual);\n  });\n  it('should return undefined if the attribute may exist in spread', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const expected = undefined;\n    const actual = getProp(props, prop);\n    assert.equal(expected, actual);\n  });\n  it('should not crash if the spread contains a spread', () => {\n    const code = '<div {...{ ...props }} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    getProp(props, prop);\n  });\n  it('should return undefined if the attribute is considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const options = {\n      ignoreCase: false\n    };\n    const expected = undefined;\n    const actual = getProp(props, prop, options);\n    assert.equal(expected, actual);\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/__tests__/src/getProp-test.js"],"names":["assert","getOpeningElement","setParserName","getProp","describe","beforeEach","it","expected","actual","equal","undefined","code","node","attributes","props","prop","name","actualName","actualValue","value","expression","options","ignoreCase"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport assert from 'assert';\nimport { getOpeningElement, setParserName } from '../helper';\nimport getProp from '../../src/getProp';\n\ndescribe('getProp', () => {\n  beforeEach(() => {\n    setParserName('babel');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof getProp;\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return undefined if no arguments are provided', () => {\n    const expected = undefined;\n    const actual = getProp();\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return undefined if the attribute is absent', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = undefined;\n    const actual = getProp(props, prop);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return the correct attribute if the attribute exists', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = 'id';\n    const actual = getProp(props, prop).name.name;\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return the correct attribute if the attribute exists in spread', () => {\n    const code = '<div {...{ id: \"foo\" }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'ID';\n\n    const expected = 'id';\n    const actual = getProp(props, prop).name.name;\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return the correct attribute if the attribute exists in spread as an expression', () => {\n    const code = '<div {...{ id }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = 'id';\n    const actual = getProp(props, prop);\n    const actualName = actual.name.name;\n    const actualValue = actual.value.expression.name;\n\n    assert.equal(expected, actualName);\n    assert.equal(expected, actualValue);\n  });\n\n  it('should return the correct attribute if the attribute exists in spread (case sensitive)', () => {\n    const code = '<div {...{ id: \"foo\" }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = { ignoreCase: false };\n\n    const expected = 'id';\n    const actual = getProp(props, prop, options).name.name;\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return undefined if the attribute does not exist in spread (case sensitive)', () => {\n    const code = '<div {...{ id: \"foo\" }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'ID';\n    const options = { ignoreCase: false };\n\n    const expected = undefined;\n    const actual = getProp(props, prop, options);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return undefined for key in spread', () => {\n    // https://github.com/reactjs/rfcs/pull/107\n    const code = '<div {...{ key }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'key';\n\n    const expected = undefined;\n    const actual = getProp(props, prop);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return undefined if the attribute may exist in spread', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = undefined;\n    const actual = getProp(props, prop);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should not crash if the spread contains a spread', () => {\n    const code = '<div {...{ ...props }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    getProp(props, prop);\n  });\n\n  it('should return undefined if the attribute is considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = {\n      ignoreCase: false,\n    };\n\n    const expected = undefined;\n    const actual = getProp(props, prop, options);\n\n    assert.equal(expected, actual);\n  });\n});\n"]},"metadata":{},"sourceType":"module"}