{"ast":null,"code":"'use strict';\n\nvar path = require('path'),\n    fs = require('fs');\n/**\n * Codec for relative paths with respect to the context of the file being compiled.\n * @type {{name:string, decode: function, encode: function, root: function}}\n */\n\n\nmodule.exports = {\n  name: 'source-relative',\n  decode: decode,\n  encode: encode,\n  root: root\n};\n/**\n * Decode the given uri.\n * Any path with or without leading slash is tested against context directory.\n * Exclude module paths containing `~`.\n * @this {{options: object}} A loader or compilation\n * @param {string} uri A source uri to decode\n * @returns {boolean|string} False where unmatched else the decoded path\n */\n\nfunction decode(uri) {\n  /* jshint validthis:true */\n  var base = this.context,\n      absFile = !!base && path.normalize(path.join(base, uri)),\n      isValid = !!absFile && fs.existsSync(absFile) && fs.statSync(absFile).isFile();\n  return isValid && absFile;\n}\n/**\n * Encode the given file path.\n * @this {{options: object}} A loader or compilation\n * @param {string} absolute An absolute file path to encode\n * @returns {string} A uri\n */\n\n\nfunction encode(absolute) {\n  /* jshint validthis:true */\n  return path.relative(this.context, absolute);\n}\n/**\n * The source-map root where relevant.\n * @this {{options: object}} A loader or compilation\n * @returns {string|undefined} The source-map root applicable to any encoded uri\n */\n\n\nfunction root() {\n  /* jshint validthis:true */\n  return this.context;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/adjust-sourcemap-loader/codec/source-relative.js"],"names":["path","require","fs","module","exports","name","decode","encode","root","uri","base","context","absFile","normalize","join","isValid","existsSync","statSync","isFile","absolute","relative"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;AAAA,IACIC,EAAE,GAAKD,OAAO,CAAC,IAAD,CADlB;AAGA;;;;;;AAIAE,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,IAAI,EAAI,iBADO;AAEfC,EAAAA,MAAM,EAAEA,MAFO;AAGfC,EAAAA,MAAM,EAAEA,MAHO;AAIfC,EAAAA,IAAI,EAAIA;AAJO,CAAjB;AAOA;;;;;;;;;AAQA,SAASF,MAAT,CAAgBG,GAAhB,EAAqB;AACnB;AACA,MAAIC,IAAI,GAAM,KAAKC,OAAnB;AAAA,MACIC,OAAO,GAAG,CAAC,CAACF,IAAF,IAAUV,IAAI,CAACa,SAAL,CAAeb,IAAI,CAACc,IAAL,CAAUJ,IAAV,EAAgBD,GAAhB,CAAf,CADxB;AAAA,MAEIM,OAAO,GAAG,CAAC,CAACH,OAAF,IAAaV,EAAE,CAACc,UAAH,CAAcJ,OAAd,CAAb,IAAuCV,EAAE,CAACe,QAAH,CAAYL,OAAZ,EAAqBM,MAArB,EAFrD;AAGA,SAAOH,OAAO,IAAIH,OAAlB;AACD;AAED;;;;;;;;AAMA,SAASL,MAAT,CAAgBY,QAAhB,EAA0B;AACxB;AACA,SAAOnB,IAAI,CAACoB,QAAL,CAAc,KAAKT,OAAnB,EAA4BQ,QAA5B,CAAP;AACD;AAED;;;;;;;AAKA,SAASX,IAAT,GAAgB;AACd;AACA,SAAO,KAAKG,OAAZ;AACD","sourcesContent":["'use strict';\n\nvar path = require('path'),\n    fs   = require('fs');\n\n/**\n * Codec for relative paths with respect to the context of the file being compiled.\n * @type {{name:string, decode: function, encode: function, root: function}}\n */\nmodule.exports = {\n  name  : 'source-relative',\n  decode: decode,\n  encode: encode,\n  root  : root\n};\n\n/**\n * Decode the given uri.\n * Any path with or without leading slash is tested against context directory.\n * Exclude module paths containing `~`.\n * @this {{options: object}} A loader or compilation\n * @param {string} uri A source uri to decode\n * @returns {boolean|string} False where unmatched else the decoded path\n */\nfunction decode(uri) {\n  /* jshint validthis:true */\n  var base    = this.context,\n      absFile = !!base && path.normalize(path.join(base, uri)),\n      isValid = !!absFile && fs.existsSync(absFile) && fs.statSync(absFile).isFile();\n  return isValid && absFile;\n}\n\n/**\n * Encode the given file path.\n * @this {{options: object}} A loader or compilation\n * @param {string} absolute An absolute file path to encode\n * @returns {string} A uri\n */\nfunction encode(absolute) {\n  /* jshint validthis:true */\n  return path.relative(this.context, absolute);\n}\n\n/**\n * The source-map root where relevant.\n * @this {{options: object}} A loader or compilation\n * @returns {string|undefined} The source-map root applicable to any encoded uri\n */\nfunction root() {\n  /* jshint validthis:true */\n  return this.context;\n}"]},"metadata":{},"sourceType":"script"}