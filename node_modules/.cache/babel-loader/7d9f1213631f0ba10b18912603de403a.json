{"ast":null,"code":"import { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nexport function fromFetch(input, init) {\n  return new Observable(subscriber => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n    let abortable = true;\n    let unsubscribed = false;\n    const subscription = new Subscription();\n    subscription.add(() => {\n      unsubscribed = true;\n\n      if (abortable) {\n        controller.abort();\n      }\n    });\n    let perSubscriberInit;\n\n    if (init) {\n      if (init.signal) {\n        if (init.signal.aborted) {\n          controller.abort();\n        } else {\n          const outerSignal = init.signal;\n\n          const outerSignalHandler = () => {\n            if (!signal.aborted) {\n              controller.abort();\n            }\n          };\n\n          outerSignal.addEventListener('abort', outerSignalHandler);\n          subscription.add(() => outerSignal.removeEventListener('abort', outerSignalHandler));\n        }\n      }\n\n      perSubscriberInit = Object.assign({}, init, {\n        signal\n      });\n    } else {\n      perSubscriberInit = {\n        signal\n      };\n    }\n\n    fetch(input, perSubscriberInit).then(response => {\n      abortable = false;\n      subscriber.next(response);\n      subscriber.complete();\n    }).catch(err => {\n      abortable = false;\n\n      if (!unsubscribed) {\n        subscriber.error(err);\n      }\n    });\n    return subscription;\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/observable/dom/fetch.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,kBAA3B;AACA,SAAS,YAAT,QAA6B,oBAA7B;AAoDA,OAAM,SAAU,SAAV,CAAoB,KAApB,EAA6C,IAA7C,EAA+D;AACnE,SAAO,IAAI,UAAJ,CAAyB,UAAU,IAAG;AAC3C,UAAM,UAAU,GAAG,IAAI,eAAJ,EAAnB;AACA,UAAM,MAAM,GAAG,UAAU,CAAC,MAA1B;AACA,QAAI,SAAS,GAAG,IAAhB;AACA,QAAI,YAAY,GAAG,KAAnB;AAEA,UAAM,YAAY,GAAG,IAAI,YAAJ,EAArB;AACA,IAAA,YAAY,CAAC,GAAb,CAAiB,MAAK;AACpB,MAAA,YAAY,GAAG,IAAf;;AACA,UAAI,SAAJ,EAAe;AACb,QAAA,UAAU,CAAC,KAAX;AACD;AACF,KALD;AAOA,QAAI,iBAAJ;;AACA,QAAI,IAAJ,EAAU;AAER,UAAI,IAAI,CAAC,MAAT,EAAiB;AACf,YAAI,IAAI,CAAC,MAAL,CAAY,OAAhB,EAAyB;AACvB,UAAA,UAAU,CAAC,KAAX;AACD,SAFD,MAEO;AACL,gBAAM,WAAW,GAAG,IAAI,CAAC,MAAzB;;AACA,gBAAM,kBAAkB,GAAG,MAAK;AAC9B,gBAAI,CAAC,MAAM,CAAC,OAAZ,EAAqB;AACnB,cAAA,UAAU,CAAC,KAAX;AACD;AACF,WAJD;;AAKA,UAAA,WAAW,CAAC,gBAAZ,CAA6B,OAA7B,EAAsC,kBAAtC;AACA,UAAA,YAAY,CAAC,GAAb,CAAiB,MAAM,WAAW,CAAC,mBAAZ,CAAgC,OAAhC,EAAyC,kBAAzC,CAAvB;AACD;AACF;;AAGD,MAAA,iBAAiB,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,IAAR,EAAY;AAAE,QAAA;AAAF,OAAZ,CAAjB;AACD,KAnBD,MAmBO;AACL,MAAA,iBAAiB,GAAG;AAAE,QAAA;AAAF,OAApB;AACD;;AAED,IAAA,KAAK,CAAC,KAAD,EAAQ,iBAAR,CAAL,CAAgC,IAAhC,CAAqC,QAAQ,IAAG;AAC9C,MAAA,SAAS,GAAG,KAAZ;AACA,MAAA,UAAU,CAAC,IAAX,CAAgB,QAAhB;AACA,MAAA,UAAU,CAAC,QAAX;AACD,KAJD,EAIG,KAJH,CAIS,GAAG,IAAG;AACb,MAAA,SAAS,GAAG,KAAZ;;AACA,UAAI,CAAC,YAAL,EAAmB;AAEjB,QAAA,UAAU,CAAC,KAAX,CAAiB,GAAjB;AACD;AACF,KAVD;AAYA,WAAO,YAAP;AACD,GAnDM,CAAP;AAoDD","sourcesContent":["import { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nexport function fromFetch(input, init) {\n    return new Observable(subscriber => {\n        const controller = new AbortController();\n        const signal = controller.signal;\n        let abortable = true;\n        let unsubscribed = false;\n        const subscription = new Subscription();\n        subscription.add(() => {\n            unsubscribed = true;\n            if (abortable) {\n                controller.abort();\n            }\n        });\n        let perSubscriberInit;\n        if (init) {\n            if (init.signal) {\n                if (init.signal.aborted) {\n                    controller.abort();\n                }\n                else {\n                    const outerSignal = init.signal;\n                    const outerSignalHandler = () => {\n                        if (!signal.aborted) {\n                            controller.abort();\n                        }\n                    };\n                    outerSignal.addEventListener('abort', outerSignalHandler);\n                    subscription.add(() => outerSignal.removeEventListener('abort', outerSignalHandler));\n                }\n            }\n            perSubscriberInit = Object.assign({}, init, { signal });\n        }\n        else {\n            perSubscriberInit = { signal };\n        }\n        fetch(input, perSubscriberInit).then(response => {\n            abortable = false;\n            subscriber.next(response);\n            subscriber.complete();\n        }).catch(err => {\n            abortable = false;\n            if (!unsubscribed) {\n                subscriber.error(err);\n            }\n        });\n        return subscription;\n    });\n}\n//# sourceMappingURL=fetch.js.map"]},"metadata":{},"sourceType":"module"}