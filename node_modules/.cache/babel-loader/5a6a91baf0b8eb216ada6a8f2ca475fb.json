{"ast":null,"code":"'use strict';\n\nvar test = require('tape');\n\nvar hasSymbols = require('has-symbols')();\n\nvar is = require('../');\n\ntest('works with primitives', function (t) {\n  t.ok(is(), 'two absent args are the same');\n  t.ok(is(undefined), 'undefined & one absent arg are the same');\n  t.ok(is(undefined, undefined), 'undefined is undefined');\n  t.ok(is(null, null), 'null is null');\n  t.ok(is(true, true), 'true is true');\n  t.ok(is(false, false), 'false is false');\n  t.notOk(is(true, false), 'true is not false');\n  t.end();\n});\ntest('works with NaN', function (t) {\n  t.ok(is(NaN, NaN), 'NaN is NaN');\n  t.end();\n});\ntest('differentiates zeroes', function (t) {\n  t.ok(is(0, 0), '+0 is +0');\n  t.ok(is(-0, -0), '-0 is -0');\n  t.notOk(is(0, -0), '+0 is not -0');\n  t.end();\n});\ntest('nonzero numbers', function (t) {\n  t.ok(is(Infinity, Infinity), 'infinity is infinity');\n  t.ok(is(-Infinity, -Infinity), 'infinity is infinity');\n  t.ok(is(42, 42), '42 is 42');\n  t.notOk(is(42, -42), '42 is not -42');\n  t.end();\n});\ntest('strings', function (t) {\n  t.ok(is('', ''), 'empty string is empty string');\n  t.ok(is('foo', 'foo'), 'string is string');\n  t.notOk(is('foo', 'bar'), 'string is not different string');\n  t.end();\n});\ntest('objects', function (t) {\n  var obj = {};\n  t.ok(is(obj, obj), 'object is same object');\n  t.notOk(is(obj, {}), 'object is not different object');\n  t.end();\n});\ntest('Symbols', {\n  skip: !hasSymbols\n}, function (t) {\n  t.ok(is(Symbol.iterator, Symbol.iterator), 'Symbol.iterator is itself');\n  t.notOk(is(Symbol(), Symbol()), 'different Symbols are not equal');\n  t.notOk(is(Symbol.iterator, Object(Symbol.iterator)), 'Symbol.iterator is not boxed form of itself');\n  t.end();\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/object-is/test/index.js"],"names":["test","require","hasSymbols","is","t","ok","undefined","notOk","end","NaN","Infinity","obj","skip","Symbol","iterator","Object"],"mappings":"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","sourcesContent":["'use strict';\n\nvar test = require('tape');\nvar hasSymbols = require('has-symbols')();\n\nvar is = require('../');\n\ntest('works with primitives', function (t) {\n\tt.ok(is(), 'two absent args are the same');\n\tt.ok(is(undefined), 'undefined & one absent arg are the same');\n\tt.ok(is(undefined, undefined), 'undefined is undefined');\n\tt.ok(is(null, null), 'null is null');\n\tt.ok(is(true, true), 'true is true');\n\tt.ok(is(false, false), 'false is false');\n\tt.notOk(is(true, false), 'true is not false');\n\tt.end();\n});\n\ntest('works with NaN', function (t) {\n\tt.ok(is(NaN, NaN), 'NaN is NaN');\n\tt.end();\n});\n\ntest('differentiates zeroes', function (t) {\n\tt.ok(is(0, 0), '+0 is +0');\n\tt.ok(is(-0, -0), '-0 is -0');\n\tt.notOk(is(0, -0), '+0 is not -0');\n\tt.end();\n});\n\ntest('nonzero numbers', function (t) {\n\tt.ok(is(Infinity, Infinity), 'infinity is infinity');\n\tt.ok(is(-Infinity, -Infinity), 'infinity is infinity');\n\tt.ok(is(42, 42), '42 is 42');\n\tt.notOk(is(42, -42), '42 is not -42');\n\tt.end();\n});\n\ntest('strings', function (t) {\n\tt.ok(is('', ''), 'empty string is empty string');\n\tt.ok(is('foo', 'foo'), 'string is string');\n\tt.notOk(is('foo', 'bar'), 'string is not different string');\n\tt.end();\n});\n\ntest('objects', function (t) {\n\tvar obj = {};\n\tt.ok(is(obj, obj), 'object is same object');\n\tt.notOk(is(obj, {}), 'object is not different object');\n\tt.end();\n});\n\ntest('Symbols', { skip: !hasSymbols }, function (t) {\n\tt.ok(is(Symbol.iterator, Symbol.iterator), 'Symbol.iterator is itself');\n\tt.notOk(is(Symbol(), Symbol()), 'different Symbols are not equal');\n\tt.notOk(is(Symbol.iterator, Object(Symbol.iterator)), 'Symbol.iterator is not boxed form of itself');\n\tt.end();\n});\n"]},"metadata":{},"sourceType":"script"}