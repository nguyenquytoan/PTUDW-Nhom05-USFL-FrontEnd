{"ast":null,"code":"\"use strict\";\n\ndefine(['test/test-helpers'], function (testHelpers) {\n  var describeIf = testHelpers.describeIf;\n  var it = testHelpers.itWithFreshLog;\n  var originalConsole = window.console;\n  var originalDocument = window.document;\n  describeIf(testHelpers.isCookieStorageAvailable() && !testHelpers.isLocalStorageAvailable(), \"Cookie-only persistence tests:\", function () {\n    beforeEach(function () {\n      window.console = {\n        \"log\": jasmine.createSpy(\"console.log\")\n      };\n      this.addMatchers({\n        \"toBeAtLevel\": testHelpers.toBeAtLevel,\n        \"toBeTheStoredLevel\": testHelpers.toBeTheLevelStoredByCookie\n      });\n    });\n    afterEach(function () {\n      window.console = originalConsole;\n    });\n    describe(\"If no level is saved\", function () {\n      beforeEach(function () {\n        testHelpers.clearStoredLevels();\n      });\n      it(\"log level is set to warn by default\", function (log) {\n        expect(log).toBeAtLevel(\"warn\");\n      });\n      it(\"warn is persisted as the current level\", function (log) {\n        expect(\"warn\").toBeTheStoredLevel();\n      });\n      it(\"log can be set to info level\", function (log) {\n        log.setLevel(\"info\");\n        expect(log).toBeAtLevel(\"info\");\n      });\n      it(\"log.setLevel() sets a cookie with the given level\", function (log) {\n        log.setLevel(\"debug\");\n        expect(\"debug\").toBeTheStoredLevel();\n      });\n    });\n    describe(\"If info level is saved\", function () {\n      beforeEach(function () {\n        testHelpers.setStoredLevel(\"info\");\n      });\n      it(\"info is the default log level\", function (log) {\n        expect(log).toBeAtLevel(\"info\");\n      });\n      it(\"log can be changed to warn level\", function (log) {\n        log.setLevel(\"warn\");\n        expect(log).toBeAtLevel(\"warn\");\n      });\n      it(\"log.setLevel() overwrites the saved level\", function (log) {\n        log.setLevel(\"error\");\n        expect(\"error\").toBeTheStoredLevel();\n        expect(\"info\").not.toBeTheStoredLevel();\n      });\n    });\n    describe(\"If the level is saved with other data\", function () {\n      beforeEach(function () {\n        window.document.cookie = \"qwe=asd\";\n        window.document.cookie = \"loglevel=ERROR\";\n        window.document.cookie = \"msg=hello world\";\n      });\n      it(\"error is the default log level\", function (log) {\n        expect(log).toBeAtLevel(\"error\");\n      });\n      it(\"log can be changed to silent level\", function (log) {\n        log.setLevel(\"silent\");\n        expect(log).toBeAtLevel(\"silent\");\n      });\n      it(\"log.setLevel() overrides the saved level only\", function (log) {\n        log.setLevel(\"debug\");\n        expect('debug').toBeTheStoredLevel();\n        expect(window.document.cookie).toContain(\"msg=hello world\");\n      });\n    });\n    describe(\"If the level cookie is set incorrectly\", function () {\n      beforeEach(function () {\n        testHelpers.setCookieStoredLevel('gibberish');\n      });\n      it(\"warn is the default log level\", function (log) {\n        expect(log).toBeAtLevel(\"warn\");\n      });\n      it(\"warn is persisted as the current level, overriding the invalid cookie\", function (log) {\n        expect(\"warn\").toBeTheStoredLevel();\n      });\n      it(\"log can be changed to info level\", function (log) {\n        log.setLevel(\"info\");\n        expect(log).toBeAtLevel(\"info\");\n      });\n      it(\"log.setLevel() overrides the saved level with the new level\", function (log) {\n        expect('debug').not.toBeTheStoredLevel();\n        log.setLevel(\"debug\");\n        expect('debug').toBeTheStoredLevel();\n      });\n    });\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/loglevel/test/cookie-test.js"],"names":["define","testHelpers","describeIf","it","itWithFreshLog","originalConsole","window","console","originalDocument","document","isCookieStorageAvailable","isLocalStorageAvailable","beforeEach","jasmine","createSpy","addMatchers","toBeAtLevel","toBeTheLevelStoredByCookie","afterEach","describe","clearStoredLevels","log","expect","toBeTheStoredLevel","setLevel","setStoredLevel","not","cookie","toContain","setCookieStoredLevel"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\ndefine(['test/test-helpers'], function(testHelpers) {\r\n    var describeIf = testHelpers.describeIf;\r\n    var it = testHelpers.itWithFreshLog;\r\n\r\n    var originalConsole = window.console;\r\n    var originalDocument = window.document;\r\n\r\n    describeIf(testHelpers.isCookieStorageAvailable() && !testHelpers.isLocalStorageAvailable(),\r\n               \"Cookie-only persistence tests:\", function() {\r\n\r\n        beforeEach(function() {\r\n            window.console = {\"log\" : jasmine.createSpy(\"console.log\")};\r\n            this.addMatchers({\r\n                \"toBeAtLevel\" : testHelpers.toBeAtLevel,\r\n                \"toBeTheStoredLevel\" : testHelpers.toBeTheLevelStoredByCookie\r\n            });\r\n        });\r\n\r\n        afterEach(function() {\r\n            window.console = originalConsole;\r\n        });\r\n\r\n        describe(\"If no level is saved\", function() {\r\n            beforeEach(function() {\r\n                testHelpers.clearStoredLevels();\r\n            });\r\n\r\n            it(\"log level is set to warn by default\", function(log) {\r\n                expect(log).toBeAtLevel(\"warn\");\r\n            });\r\n\r\n            it(\"warn is persisted as the current level\", function(log) {\r\n                expect(\"warn\").toBeTheStoredLevel();\r\n            });\r\n\r\n            it(\"log can be set to info level\", function(log) {\r\n                log.setLevel(\"info\");\r\n                expect(log).toBeAtLevel(\"info\");\r\n            });\r\n\r\n            it(\"log.setLevel() sets a cookie with the given level\", function(log) {\r\n                log.setLevel(\"debug\");\r\n                expect(\"debug\").toBeTheStoredLevel();\r\n            });\r\n        });\r\n\r\n        describe(\"If info level is saved\", function() {\r\n            beforeEach(function() {\r\n                testHelpers.setStoredLevel(\"info\");\r\n            });\r\n\r\n            it(\"info is the default log level\", function(log) {\r\n                expect(log).toBeAtLevel(\"info\");\r\n            });\r\n\r\n            it(\"log can be changed to warn level\", function(log) {\r\n                log.setLevel(\"warn\");\r\n                expect(log).toBeAtLevel(\"warn\");\r\n            });\r\n\r\n            it(\"log.setLevel() overwrites the saved level\", function(log) {\r\n                log.setLevel(\"error\");\r\n\r\n                expect(\"error\").toBeTheStoredLevel();\r\n                expect(\"info\").not.toBeTheStoredLevel();\r\n            });\r\n        });\r\n\r\n        describe(\"If the level is saved with other data\", function() {\r\n            beforeEach(function() {\r\n                window.document.cookie = \"qwe=asd\";\r\n                window.document.cookie = \"loglevel=ERROR\";\r\n                window.document.cookie = \"msg=hello world\";\r\n            });\r\n\r\n            it(\"error is the default log level\", function(log) {\r\n                expect(log).toBeAtLevel(\"error\");\r\n            });\r\n\r\n            it(\"log can be changed to silent level\", function(log) {\r\n                log.setLevel(\"silent\");\r\n                expect(log).toBeAtLevel(\"silent\");\r\n            });\r\n\r\n            it(\"log.setLevel() overrides the saved level only\", function(log) {\r\n                log.setLevel(\"debug\");\r\n\r\n                expect('debug').toBeTheStoredLevel();\r\n                expect(window.document.cookie).toContain(\"msg=hello world\");\r\n            });\r\n        });\r\n\r\n        describe(\"If the level cookie is set incorrectly\", function() {\r\n            beforeEach(function() {\r\n                testHelpers.setCookieStoredLevel('gibberish');\r\n            });\r\n\r\n            it(\"warn is the default log level\", function(log) {\r\n                expect(log).toBeAtLevel(\"warn\");\r\n            });\r\n\r\n            it(\"warn is persisted as the current level, overriding the invalid cookie\", function(log) {\r\n                expect(\"warn\").toBeTheStoredLevel();\r\n            });\r\n\r\n            it(\"log can be changed to info level\", function(log) {\r\n                log.setLevel(\"info\");\r\n                expect(log).toBeAtLevel(\"info\");\r\n            });\r\n\r\n            it(\"log.setLevel() overrides the saved level with the new level\", function(log) {\r\n                expect('debug').not.toBeTheStoredLevel();\r\n\r\n                log.setLevel(\"debug\");\r\n\r\n                expect('debug').toBeTheStoredLevel();\r\n            });\r\n        });\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"script"}