{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.mjs';\nimport { assert } from 'workbox-core/_private/assert.mjs';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.mjs';\nimport { logger } from 'workbox-core/_private/logger.mjs';\nimport './_version.mjs';\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof workbox.cacheableResponse\n */\n\nclass CacheableResponse {\n  /**\n   * To construct a new CacheableResponse instance you must provide at least\n   * one of the `config` properties.\n   *\n   * If both `statuses` and `headers` are specified, then both conditions must\n   * be met for the `Response` to be considered cacheable.\n   *\n   * @param {Object} config\n   * @param {Array<number>} [config.statuses] One or more status codes that a\n   * `Response` can have and be considered cacheable.\n   * @param {Object<string,string>} [config.headers] A mapping of header names\n   * and expected values that a `Response` can have and be considered cacheable.\n   * If multiple headers are provided, only one needs to be present.\n   */\n  constructor(config = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(config.statuses || config.headers)) {\n        throw new WorkboxError('statuses-or-headers-required', {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor'\n        });\n      }\n\n      if (config.statuses) {\n        assert.isArray(config.statuses, {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor',\n          paramName: 'config.statuses'\n        });\n      }\n\n      if (config.headers) {\n        assert.isType(config.headers, 'object', {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor',\n          paramName: 'config.headers'\n        });\n      }\n    }\n\n    this._statuses = config.statuses;\n    this._headers = config.headers;\n  }\n  /**\n   * Checks a response to see whether it's cacheable or not, based on this\n   * object's configuration.\n   *\n   * @param {Response} response The response whose cacheability is being\n   * checked.\n   * @return {boolean} `true` if the `Response` is cacheable, and `false`\n   * otherwise.\n   */\n\n\n  isResponseCacheable(response) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(response, Response, {\n        moduleName: 'workbox-cacheable-response',\n        className: 'CacheableResponse',\n        funcName: 'isResponseCacheable',\n        paramName: 'response'\n      });\n    }\n\n    let cacheable = true;\n\n    if (this._statuses) {\n      cacheable = this._statuses.includes(response.status);\n    }\n\n    if (this._headers && cacheable) {\n      cacheable = Object.keys(this._headers).some(headerName => {\n        return response.headers.get(headerName) === this._headers[headerName];\n      });\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!cacheable) {\n        logger.groupCollapsed(`The request for ` + `'${getFriendlyURL(response.url)}' returned a response that does ` + `not meet the criteria for being cached.`);\n        logger.groupCollapsed(`View cacheability criteria here.`);\n        logger.log(`Cacheable statuses: ` + JSON.stringify(this._statuses));\n        logger.log(`Cacheable headers: ` + JSON.stringify(this._headers, null, 2));\n        logger.groupEnd();\n        const logFriendlyHeaders = {};\n        response.headers.forEach((value, key) => {\n          logFriendlyHeaders[key] = value;\n        });\n        logger.groupCollapsed(`View response status and headers here.`);\n        logger.log(`Response status: ` + response.status);\n        logger.log(`Response headers: ` + JSON.stringify(logFriendlyHeaders, null, 2));\n        logger.groupEnd();\n        logger.groupCollapsed(`View full response details here.`);\n        logger.log(response.headers);\n        logger.log(response);\n        logger.groupEnd();\n        logger.groupEnd();\n      }\n    }\n\n    return cacheable;\n  }\n\n}\n\nexport { CacheableResponse };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-cacheable-response/CacheableResponse.mjs"],"names":["WorkboxError","assert","getFriendlyURL","logger","CacheableResponse","constructor","config","process","env","NODE_ENV","statuses","headers","moduleName","className","funcName","isArray","paramName","isType","_statuses","_headers","isResponseCacheable","response","isInstance","Response","cacheable","includes","status","Object","keys","some","headerName","get","groupCollapsed","url","log","JSON","stringify","groupEnd","logFriendlyHeaders","forEach","value","key"],"mappings":"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","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {getFriendlyURL} from 'workbox-core/_private/getFriendlyURL.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport './_version.mjs';\n\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof workbox.cacheableResponse\n */\nclass CacheableResponse {\n  /**\n   * To construct a new CacheableResponse instance you must provide at least\n   * one of the `config` properties.\n   *\n   * If both `statuses` and `headers` are specified, then both conditions must\n   * be met for the `Response` to be considered cacheable.\n   *\n   * @param {Object} config\n   * @param {Array<number>} [config.statuses] One or more status codes that a\n   * `Response` can have and be considered cacheable.\n   * @param {Object<string,string>} [config.headers] A mapping of header names\n   * and expected values that a `Response` can have and be considered cacheable.\n   * If multiple headers are provided, only one needs to be present.\n   */\n  constructor(config = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(config.statuses || config.headers)) {\n        throw new WorkboxError('statuses-or-headers-required', {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor',\n        });\n      }\n\n      if (config.statuses) {\n        assert.isArray(config.statuses, {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor',\n          paramName: 'config.statuses',\n        });\n      }\n\n      if (config.headers) {\n        assert.isType(config.headers, 'object', {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor',\n          paramName: 'config.headers',\n        });\n      }\n    }\n\n    this._statuses = config.statuses;\n    this._headers = config.headers;\n  }\n\n  /**\n   * Checks a response to see whether it's cacheable or not, based on this\n   * object's configuration.\n   *\n   * @param {Response} response The response whose cacheability is being\n   * checked.\n   * @return {boolean} `true` if the `Response` is cacheable, and `false`\n   * otherwise.\n   */\n  isResponseCacheable(response) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(response, Response, {\n        moduleName: 'workbox-cacheable-response',\n        className: 'CacheableResponse',\n        funcName: 'isResponseCacheable',\n        paramName: 'response',\n      });\n    }\n\n    let cacheable = true;\n\n    if (this._statuses) {\n      cacheable = this._statuses.includes(response.status);\n    }\n\n    if (this._headers && cacheable) {\n      cacheable = Object.keys(this._headers).some((headerName) => {\n        return response.headers.get(headerName) === this._headers[headerName];\n      });\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!cacheable) {\n        logger.groupCollapsed(`The request for ` +\n          `'${getFriendlyURL(response.url)}' returned a response that does ` +\n          `not meet the criteria for being cached.`);\n\n        logger.groupCollapsed(`View cacheability criteria here.`);\n        logger.log(`Cacheable statuses: ` +\n          JSON.stringify(this._statuses));\n        logger.log(`Cacheable headers: ` +\n          JSON.stringify(this._headers, null, 2));\n        logger.groupEnd();\n\n        const logFriendlyHeaders = {};\n        response.headers.forEach((value, key) => {\n          logFriendlyHeaders[key] = value;\n        });\n\n        logger.groupCollapsed(`View response status and headers here.`);\n        logger.log(`Response status: ` + response.status);\n        logger.log(`Response headers: ` +\n          JSON.stringify(logFriendlyHeaders, null, 2));\n        logger.groupEnd();\n\n        logger.groupCollapsed(`View full response details here.`);\n        logger.log(response.headers);\n        logger.log(response);\n        logger.groupEnd();\n\n        logger.groupEnd();\n      }\n    }\n\n    return cacheable;\n  }\n}\n\nexport {CacheableResponse};\n"]},"metadata":{},"sourceType":"module"}