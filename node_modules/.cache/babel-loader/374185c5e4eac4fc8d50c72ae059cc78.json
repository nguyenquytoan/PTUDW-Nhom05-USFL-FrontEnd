{"ast":null,"code":"import { SCHEMES } from \"../uri\";\nconst NID$ = \"(?:[0-9A-Za-z][0-9A-Za-z\\\\-]{1,31})\";\nconst PCT_ENCODED$ = \"(?:\\\\%[0-9A-Fa-f]{2})\";\nconst TRANS$$ = \"[0-9A-Za-z\\\\(\\\\)\\\\+\\\\,\\\\-\\\\.\\\\:\\\\=\\\\@\\\\;\\\\$\\\\_\\\\!\\\\*\\\\'\\\\/\\\\?\\\\#]\";\nconst NSS$ = \"(?:(?:\" + PCT_ENCODED$ + \"|\" + TRANS$$ + \")+)\";\nconst URN_SCHEME = new RegExp(\"^urn\\\\:(\" + NID$ + \")$\");\nconst URN_PATH = new RegExp(\"^(\" + NID$ + \")\\\\:(\" + NSS$ + \")$\");\nconst URN_PARSE = /^([^\\:]+)\\:(.*)/;\nconst URN_EXCLUDED = /[\\x00-\\x20\\\\\\\"\\&\\<\\>\\[\\]\\^\\`\\{\\|\\}\\~\\x7F-\\xFF]/g; //RFC 2141\n\nconst handler = {\n  scheme: \"urn\",\n  parse: function (components, options) {\n    const matches = components.path && components.path.match(URN_PARSE);\n    let urnComponents = components;\n\n    if (matches) {\n      const scheme = options.scheme || urnComponents.scheme || \"urn\";\n      const nid = matches[1].toLowerCase();\n      const nss = matches[2];\n      const urnScheme = `${scheme}:${options.nid || nid}`;\n      const schemeHandler = SCHEMES[urnScheme];\n      urnComponents.nid = nid;\n      urnComponents.nss = nss;\n      urnComponents.path = undefined;\n\n      if (schemeHandler) {\n        urnComponents = schemeHandler.parse(urnComponents, options);\n      }\n    } else {\n      urnComponents.error = urnComponents.error || \"URN can not be parsed.\";\n    }\n\n    return urnComponents;\n  },\n  serialize: function (urnComponents, options) {\n    const scheme = options.scheme || urnComponents.scheme || \"urn\";\n    const nid = urnComponents.nid;\n    const urnScheme = `${scheme}:${options.nid || nid}`;\n    const schemeHandler = SCHEMES[urnScheme];\n\n    if (schemeHandler) {\n      urnComponents = schemeHandler.serialize(urnComponents, options);\n    }\n\n    const uriComponents = urnComponents;\n    const nss = urnComponents.nss;\n    uriComponents.path = `${nid || options.nid}:${nss}`;\n    return uriComponents;\n  }\n};\nexport default handler;","map":{"version":3,"sources":["../../../src/schemes/urn.ts"],"names":[],"mappings":"AACA,SAAqB,OAArB,QAAoC,QAApC;AAWA,MAAM,IAAI,GAAG,qCAAb;AACA,MAAM,YAAY,GAAG,uBAArB;AACA,MAAM,OAAO,GAAG,mEAAhB;AACA,MAAM,IAAI,GAAG,WAAW,YAAX,GAA0B,GAA1B,GAAgC,OAAhC,GAA0C,KAAvD;AACA,MAAM,UAAU,GAAG,IAAI,MAAJ,CAAW,aAAa,IAAb,GAAoB,IAA/B,CAAnB;AACA,MAAM,QAAQ,GAAG,IAAI,MAAJ,CAAW,OAAO,IAAP,GAAc,OAAd,GAAwB,IAAxB,GAA+B,IAA1C,CAAjB;AACA,MAAM,SAAS,GAAG,iBAAlB;AACA,MAAM,YAAY,GAAG,iDAArB,C,CAEA;;AACA,MAAM,OAAO,GAA8C;AAC1D,EAAA,MAAM,EAAG,KADiD;AAG1D,EAAA,KAAK,EAAG,UAAU,UAAV,EAAoC,OAApC,EAAsD;AAC7D,UAAM,OAAO,GAAG,UAAU,CAAC,IAAX,IAAmB,UAAU,CAAC,IAAX,CAAgB,KAAhB,CAAsB,SAAtB,CAAnC;AACA,QAAI,aAAa,GAAG,UAApB;;AAEA,QAAI,OAAJ,EAAa;AACZ,YAAM,MAAM,GAAG,OAAO,CAAC,MAAR,IAAkB,aAAa,CAAC,MAAhC,IAA0C,KAAzD;AACA,YAAM,GAAG,GAAG,OAAO,CAAC,CAAD,CAAP,CAAW,WAAX,EAAZ;AACA,YAAM,GAAG,GAAG,OAAO,CAAC,CAAD,CAAnB;AACA,YAAM,SAAS,GAAG,GAAG,MAAM,IAAI,OAAO,CAAC,GAAR,IAAe,GAAG,EAAjD;AACA,YAAM,aAAa,GAAG,OAAO,CAAC,SAAD,CAA7B;AAEA,MAAA,aAAa,CAAC,GAAd,GAAoB,GAApB;AACA,MAAA,aAAa,CAAC,GAAd,GAAoB,GAApB;AACA,MAAA,aAAa,CAAC,IAAd,GAAqB,SAArB;;AAEA,UAAI,aAAJ,EAAmB;AAClB,QAAA,aAAa,GAAG,aAAa,CAAC,KAAd,CAAoB,aAApB,EAAmC,OAAnC,CAAhB;AACA;AACD,KAdD,MAcO;AACN,MAAA,aAAa,CAAC,KAAd,GAAsB,aAAa,CAAC,KAAd,IAAuB,wBAA7C;AACA;;AAED,WAAO,aAAP;AACA,GA1ByD;AA4B1D,EAAA,SAAS,EAAG,UAAU,aAAV,EAAuC,OAAvC,EAAyD;AACpE,UAAM,MAAM,GAAG,OAAO,CAAC,MAAR,IAAkB,aAAa,CAAC,MAAhC,IAA0C,KAAzD;AACA,UAAM,GAAG,GAAG,aAAa,CAAC,GAA1B;AACA,UAAM,SAAS,GAAG,GAAG,MAAM,IAAI,OAAO,CAAC,GAAR,IAAe,GAAG,EAAjD;AACA,UAAM,aAAa,GAAG,OAAO,CAAC,SAAD,CAA7B;;AAEA,QAAI,aAAJ,EAAmB;AAClB,MAAA,aAAa,GAAG,aAAa,CAAC,SAAd,CAAwB,aAAxB,EAAuC,OAAvC,CAAhB;AACA;;AAED,UAAM,aAAa,GAAG,aAAtB;AACA,UAAM,GAAG,GAAG,aAAa,CAAC,GAA1B;AACA,IAAA,aAAa,CAAC,IAAd,GAAqB,GAAG,GAAG,IAAI,OAAO,CAAC,GAAG,IAAI,GAAG,EAAjD;AAEA,WAAO,aAAP;AACA;AA3CyD,CAA3D;AA8CA,eAAe,OAAf","sourceRoot":"","sourcesContent":["import { SCHEMES } from \"../uri\";\r\nconst NID$ = \"(?:[0-9A-Za-z][0-9A-Za-z\\\\-]{1,31})\";\r\nconst PCT_ENCODED$ = \"(?:\\\\%[0-9A-Fa-f]{2})\";\r\nconst TRANS$$ = \"[0-9A-Za-z\\\\(\\\\)\\\\+\\\\,\\\\-\\\\.\\\\:\\\\=\\\\@\\\\;\\\\$\\\\_\\\\!\\\\*\\\\'\\\\/\\\\?\\\\#]\";\r\nconst NSS$ = \"(?:(?:\" + PCT_ENCODED$ + \"|\" + TRANS$$ + \")+)\";\r\nconst URN_SCHEME = new RegExp(\"^urn\\\\:(\" + NID$ + \")$\");\r\nconst URN_PATH = new RegExp(\"^(\" + NID$ + \")\\\\:(\" + NSS$ + \")$\");\r\nconst URN_PARSE = /^([^\\:]+)\\:(.*)/;\r\nconst URN_EXCLUDED = /[\\x00-\\x20\\\\\\\"\\&\\<\\>\\[\\]\\^\\`\\{\\|\\}\\~\\x7F-\\xFF]/g;\r\n//RFC 2141\r\nconst handler = {\r\n    scheme: \"urn\",\r\n    parse: function (components, options) {\r\n        const matches = components.path && components.path.match(URN_PARSE);\r\n        let urnComponents = components;\r\n        if (matches) {\r\n            const scheme = options.scheme || urnComponents.scheme || \"urn\";\r\n            const nid = matches[1].toLowerCase();\r\n            const nss = matches[2];\r\n            const urnScheme = `${scheme}:${options.nid || nid}`;\r\n            const schemeHandler = SCHEMES[urnScheme];\r\n            urnComponents.nid = nid;\r\n            urnComponents.nss = nss;\r\n            urnComponents.path = undefined;\r\n            if (schemeHandler) {\r\n                urnComponents = schemeHandler.parse(urnComponents, options);\r\n            }\r\n        }\r\n        else {\r\n            urnComponents.error = urnComponents.error || \"URN can not be parsed.\";\r\n        }\r\n        return urnComponents;\r\n    },\r\n    serialize: function (urnComponents, options) {\r\n        const scheme = options.scheme || urnComponents.scheme || \"urn\";\r\n        const nid = urnComponents.nid;\r\n        const urnScheme = `${scheme}:${options.nid || nid}`;\r\n        const schemeHandler = SCHEMES[urnScheme];\r\n        if (schemeHandler) {\r\n            urnComponents = schemeHandler.serialize(urnComponents, options);\r\n        }\r\n        const uriComponents = urnComponents;\r\n        const nss = urnComponents.nss;\r\n        uriComponents.path = `${nid || options.nid}:${nss}`;\r\n        return uriComponents;\r\n    },\r\n};\r\nexport default handler;\r\n//# sourceMappingURL=urn.js.map"]},"metadata":{},"sourceType":"module"}