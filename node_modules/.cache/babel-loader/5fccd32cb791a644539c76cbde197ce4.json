{"ast":null,"code":"import assign from 'object.assign';\n/**\n * Extractor function for an ObjectExpression type value node.\n * An object expression is using {}.\n *\n * @returns - a representation of the object\n */\n\nexport default function extractValueFromObjectExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('./index.js').default;\n\n  return value.properties.reduce((obj, property) => {\n    const object = { ...obj\n    }; // Support types: SpreadProperty and ExperimentalSpreadProperty\n\n    if (/^(?:Experimental)?Spread(?:Property|Element)$/.test(property.type)) {\n      if (property.argument.type === 'ObjectExpression') {\n        return assign(object, extractValueFromObjectExpression(property.argument));\n      }\n    } else {\n      object[getValue(property.key)] = getValue(property.value);\n    }\n\n    return object;\n  }, {});\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/src/values/expressions/ObjectExpression.js"],"names":["assign","extractValueFromObjectExpression","value","getValue","require","default","properties","reduce","obj","property","object","test","type","argument","key"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;AAEA;;;;;;;AAMA,eAAe,SAASC,gCAAT,CAA0CC,KAA1C,EAAiD;AAC9D;AACA,QAAMC,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBC,OAAvC;;AACA,SAAOH,KAAK,CAACI,UAAN,CAAiBC,MAAjB,CAAwB,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAChD,UAAMC,MAAM,GAAG,EAAE,GAAGF;AAAL,KAAf,CADgD,CAEhD;;AACA,QAAI,gDAAgDG,IAAhD,CAAqDF,QAAQ,CAACG,IAA9D,CAAJ,EAAyE;AACvE,UAAIH,QAAQ,CAACI,QAAT,CAAkBD,IAAlB,KAA2B,kBAA/B,EAAmD;AACjD,eAAOZ,MAAM,CAACU,MAAD,EAAST,gCAAgC,CAACQ,QAAQ,CAACI,QAAV,CAAzC,CAAb;AACD;AACF,KAJD,MAIO;AACLH,MAAAA,MAAM,CAACP,QAAQ,CAACM,QAAQ,CAACK,GAAV,CAAT,CAAN,GAAiCX,QAAQ,CAACM,QAAQ,CAACP,KAAV,CAAzC;AACD;;AACD,WAAOQ,MAAP;AACD,GAXM,EAWJ,EAXI,CAAP;AAYD","sourcesContent":["import assign from 'object.assign';\n\n/**\n * Extractor function for an ObjectExpression type value node.\n * An object expression is using {}.\n *\n * @returns - a representation of the object\n */\nexport default function extractValueFromObjectExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('./index.js').default;\n  return value.properties.reduce((obj, property) => {\n    const object = { ...obj };\n    // Support types: SpreadProperty and ExperimentalSpreadProperty\n    if (/^(?:Experimental)?Spread(?:Property|Element)$/.test(property.type)) {\n      if (property.argument.type === 'ObjectExpression') {\n        return assign(object, extractValueFromObjectExpression(property.argument));\n      }\n    } else {\n      object[getValue(property.key)] = getValue(property.value);\n    }\n    return object;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}