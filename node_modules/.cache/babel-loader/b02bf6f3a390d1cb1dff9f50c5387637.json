{"ast":null,"code":"this.workbox = this.workbox || {};\n\nthis.workbox.routing = function (exports, assert_mjs, logger_mjs, cacheNames_mjs, WorkboxError_mjs, getFriendlyURL_mjs) {\n  'use strict';\n\n  try {\n    self['workbox:routing:4.3.1'] && _();\n  } catch (e) {} // eslint-disable-line\n\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * The default HTTP method, 'GET', used when there's no specific method\n   * configured for a route.\n   *\n   * @type {string}\n   *\n   * @private\n   */\n\n\n  const defaultMethod = 'GET';\n  /**\n   * The list of valid HTTP methods associated with requests that could be routed.\n   *\n   * @type {Array<string>}\n   *\n   * @private\n   */\n\n  const validMethods = ['DELETE', 'GET', 'HEAD', 'PATCH', 'POST', 'PUT'];\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * @param {function()|Object} handler Either a function, or an object with a\n   * 'handle' method.\n   * @return {Object} An object with a handle method.\n   *\n   * @private\n   */\n\n  const normalizeHandler = handler => {\n    if (handler && typeof handler === 'object') {\n      {\n        assert_mjs.assert.hasMethod(handler, 'handle', {\n          moduleName: 'workbox-routing',\n          className: 'Route',\n          funcName: 'constructor',\n          paramName: 'handler'\n        });\n      }\n      return handler;\n    } else {\n      {\n        assert_mjs.assert.isType(handler, 'function', {\n          moduleName: 'workbox-routing',\n          className: 'Route',\n          funcName: 'constructor',\n          paramName: 'handler'\n        });\n      }\n      return {\n        handle: handler\n      };\n    }\n  };\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n   * The \"match\" callback determine if a route should be used to \"handle\" a\n   * request by returning a non-falsy value if it can. The \"handler\" callback\n   * is called when there is a match and should return a Promise that resolves\n   * to a `Response`.\n   *\n   * @memberof workbox.routing\n   */\n\n\n  class Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox.routing.Route~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox.routing.Route~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method) {\n      {\n        assert_mjs.assert.isType(match, 'function', {\n          moduleName: 'workbox-routing',\n          className: 'Route',\n          funcName: 'constructor',\n          paramName: 'match'\n        });\n\n        if (method) {\n          assert_mjs.assert.isOneOf(method, validMethods, {\n            paramName: 'method'\n          });\n        }\n      } // These values are referenced directly by Router so cannot be\n      // altered by minifification.\n\n      this.handler = normalizeHandler(handler);\n      this.match = match;\n      this.method = method || defaultMethod;\n    }\n\n  }\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * NavigationRoute makes it easy to create a [Route]{@link\n   * workbox.routing.Route} that matches for browser\n   * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n   *\n   * It will only match incoming Requests whose\n   * [`mode`]{@link https://fetch.spec.whatwg.org/#concept-request-mode}\n   * is set to `navigate`.\n   *\n   * You can optionally only apply this route to a subset of navigation requests\n   * by using one or both of the `blacklist` and `whitelist` parameters.\n   *\n   * @memberof workbox.routing\n   * @extends workbox.routing.Route\n   */\n\n\n  class NavigationRoute extends Route {\n    /**\n     * If both `blacklist` and `whiltelist` are provided, the `blacklist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `whitelist` and `blacklist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * @param {workbox.routing.Route~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.blacklist] If any of these patterns match,\n     * the route will not handle the request (even if a whitelist RegExp matches).\n     * @param {Array<RegExp>} [options.whitelist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the blacklist doesn't match).\n     */\n    constructor(handler, {\n      whitelist = [/./],\n      blacklist = []\n    } = {}) {\n      {\n        assert_mjs.assert.isArrayOfClass(whitelist, RegExp, {\n          moduleName: 'workbox-routing',\n          className: 'NavigationRoute',\n          funcName: 'constructor',\n          paramName: 'options.whitelist'\n        });\n        assert_mjs.assert.isArrayOfClass(blacklist, RegExp, {\n          moduleName: 'workbox-routing',\n          className: 'NavigationRoute',\n          funcName: 'constructor',\n          paramName: 'options.blacklist'\n        });\n      }\n      super(options => this._match(options), handler);\n      this._whitelist = whitelist;\n      this._blacklist = blacklist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */\n\n\n    _match({\n      url,\n      request\n    }) {\n      if (request.mode !== 'navigate') {\n        return false;\n      }\n\n      const pathnameAndSearch = url.pathname + url.search;\n\n      for (const regExp of this._blacklist) {\n        if (regExp.test(pathnameAndSearch)) {\n          {\n            logger_mjs.logger.log(`The navigation route is not being used, since the ` + `URL matches this blacklist pattern: ${regExp}`);\n          }\n          return false;\n        }\n      }\n\n      if (this._whitelist.some(regExp => regExp.test(pathnameAndSearch))) {\n        {\n          logger_mjs.logger.debug(`The navigation route is being used.`);\n        }\n        return true;\n      }\n\n      {\n        logger_mjs.logger.log(`The navigation route is not being used, since the URL ` + `being navigated to doesn't match the whitelist.`);\n      }\n      return false;\n    }\n\n  }\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * RegExpRoute makes it easy to create a regular expression based\n   * [Route]{@link workbox.routing.Route}.\n   *\n   * For same-origin requests the RegExp only needs to match part of the URL. For\n   * requests against third-party servers, you must define a RegExp that matches\n   * the start of the URL.\n   *\n   * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\n   *\n   * @memberof workbox.routing\n   * @extends workbox.routing.Route\n   */\n\n\n  class RegExpRoute extends Route {\n    /**\n     * If the regulard expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * th ecaptured values will be passed to the\n     * [handler's]{@link workbox.routing.Route~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox.routing.Route~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n      {\n        assert_mjs.assert.isInstance(regExp, RegExp, {\n          moduleName: 'workbox-routing',\n          className: 'RegExpRoute',\n          funcName: 'constructor',\n          paramName: 'pattern'\n        });\n      }\n\n      const match = ({\n        url\n      }) => {\n        const result = regExp.exec(url.href); // Return null immediately if there's no match.\n\n        if (!result) {\n          return null;\n        } // Require that the match start at the first character in the URL string\n        // if it's a cross-origin request.\n        // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n        // behind this behavior.\n\n\n        if (url.origin !== location.origin && result.index !== 0) {\n          {\n            logger_mjs.logger.debug(`The regular expression '${regExp}' only partially matched ` + `against the cross-origin URL '${url}'. RegExpRoute's will only ` + `handle cross-origin requests if they match the entire URL.`);\n          }\n          return null;\n        } // If the route matches, but there aren't any capture groups defined, then\n        // this will return [], which is truthy and therefore sufficient to\n        // indicate a match.\n        // If there are capture groups, then it will return their values.\n\n\n        return result.slice(1);\n      };\n\n      super(match, handler, method);\n    }\n\n  }\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * The Router can be used to process a FetchEvent through one or more\n   * [Routes]{@link workbox.routing.Route} responding  with a Request if\n   * a matching route exists.\n   *\n   * If no route matches a given a request, the Router will use a \"default\"\n   * handler if one is defined.\n   *\n   * Should the matching Route throw an error, the Router will use a \"catch\"\n   * handler if one is defined to gracefully deal with issues and respond with a\n   * Request.\n   *\n   * If a request matches multiple routes, the **earliest** registered route will\n   * be used to respond to the request.\n   *\n   * @memberof workbox.routing\n   */\n\n\n  class Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n      this._routes = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox.routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n\n\n    get routes() {\n      return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n\n\n    addFetchListener() {\n      self.addEventListener('fetch', event => {\n        const {\n          request\n        } = event;\n        const responsePromise = this.handleRequest({\n          request,\n          event\n        });\n\n        if (responsePromise) {\n          event.respondWith(responsePromise);\n        }\n      });\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n\n\n    addCacheListener() {\n      self.addEventListener('message', async event => {\n        if (event.data && event.data.type === 'CACHE_URLS') {\n          const {\n            payload\n          } = event.data;\n          {\n            logger_mjs.logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n          }\n          const requestPromises = Promise.all(payload.urlsToCache.map(entry => {\n            if (typeof entry === 'string') {\n              entry = [entry];\n            }\n\n            const request = new Request(...entry);\n            return this.handleRequest({\n              request\n            });\n          }));\n          event.waitUntil(requestPromises); // If a MessageChannel was used, reply to the message on success.\n\n          if (event.ports && event.ports[0]) {\n            await requestPromises;\n            event.ports[0].postMessage(true);\n          }\n        }\n      });\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle (this is usually\n     *     from a fetch event, but it does not have to be).\n     * @param {FetchEvent} [options.event] The event that triggered the request,\n     *     if applicable.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n\n\n    handleRequest({\n      request,\n      event\n    }) {\n      {\n        assert_mjs.assert.isInstance(request, Request, {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'handleRequest',\n          paramName: 'options.request'\n        });\n      }\n      const url = new URL(request.url, location);\n\n      if (!url.protocol.startsWith('http')) {\n        {\n          logger_mjs.logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n        }\n        return;\n      }\n\n      let {\n        params,\n        route\n      } = this.findMatchingRoute({\n        url,\n        request,\n        event\n      });\n      let handler = route && route.handler;\n      let debugMessages = [];\n      {\n        if (handler) {\n          debugMessages.push([`Found a route to handle this request:`, route]);\n\n          if (params) {\n            debugMessages.push([`Passing the following params to the route's handler:`, params]);\n          }\n        }\n      } // If we don't have a handler because there was no matching route, then\n      // fall back to defaultHandler if that's defined.\n\n      if (!handler && this._defaultHandler) {\n        {\n          debugMessages.push(`Failed to find a matching route. Falling ` + `back to the default handler.`); // This is used for debugging in logs in the case of an error.\n\n          route = '[Default Handler]';\n        }\n        handler = this._defaultHandler;\n      }\n\n      if (!handler) {\n        {\n          // No handler so Workbox will do nothing. If logs is set of debug\n          // i.e. verbose, we should print out this information.\n          logger_mjs.logger.debug(`No route found for: ${getFriendlyURL_mjs.getFriendlyURL(url)}`);\n        }\n        return;\n      }\n\n      {\n        // We have a handler, meaning Workbox is going to handle the route.\n        // print the routing details to the console.\n        logger_mjs.logger.groupCollapsed(`Router is responding to: ${getFriendlyURL_mjs.getFriendlyURL(url)}`);\n        debugMessages.forEach(msg => {\n          if (Array.isArray(msg)) {\n            logger_mjs.logger.log(...msg);\n          } else {\n            logger_mjs.logger.log(msg);\n          }\n        }); // The Request and Response objects contains a great deal of information,\n        // hide it under a group in case developers want to see it.\n\n        logger_mjs.logger.groupCollapsed(`View request details here.`);\n        logger_mjs.logger.log(request);\n        logger_mjs.logger.groupEnd();\n        logger_mjs.logger.groupEnd();\n      } // Wrap in try and catch in case the handle method throws a synchronous\n      // error. It should still callback to the catch handler.\n\n      let responsePromise;\n\n      try {\n        responsePromise = handler.handle({\n          url,\n          request,\n          event,\n          params\n        });\n      } catch (err) {\n        responsePromise = Promise.reject(err);\n      }\n\n      if (responsePromise && this._catchHandler) {\n        responsePromise = responsePromise.catch(err => {\n          {\n            // Still include URL here as it will be async from the console group\n            // and may not make sense without the URL\n            logger_mjs.logger.groupCollapsed(`Error thrown when responding to: ` + ` ${getFriendlyURL_mjs.getFriendlyURL(url)}. Falling back to Catch Handler.`);\n            logger_mjs.logger.error(`Error thrown by:`, route);\n            logger_mjs.logger.error(err);\n            logger_mjs.logger.groupEnd();\n          }\n          return this._catchHandler.handle({\n            url,\n            event,\n            err\n          });\n        });\n      }\n\n      return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request The request to match.\n     * @param {FetchEvent} [options.event] The corresponding event (unless N/A).\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n\n\n    findMatchingRoute({\n      url,\n      request,\n      event\n    }) {\n      {\n        assert_mjs.assert.isInstance(url, URL, {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'findMatchingRoute',\n          paramName: 'options.url'\n        });\n        assert_mjs.assert.isInstance(request, Request, {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'findMatchingRoute',\n          paramName: 'options.request'\n        });\n      }\n      const routes = this._routes.get(request.method) || [];\n\n      for (const route of routes) {\n        let params;\n        let matchResult = route.match({\n          url,\n          request,\n          event\n        });\n\n        if (matchResult) {\n          if (Array.isArray(matchResult) && matchResult.length > 0) {\n            // Instead of passing an empty array in as params, use undefined.\n            params = matchResult;\n          } else if (matchResult.constructor === Object && Object.keys(matchResult).length > 0) {\n            // Instead of passing an empty object in as params, use undefined.\n            params = matchResult;\n          } // Return early if have a match.\n\n\n          return {\n            route,\n            params\n          };\n        }\n      } // If no match was found above, return and empty object.\n\n\n      return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox.routing.Route~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n\n\n    setDefaultHandler(handler) {\n      this._defaultHandler = normalizeHandler(handler);\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox.routing.Route~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n\n\n    setCatchHandler(handler) {\n      this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox.routing.Route} route The route to register.\n     */\n\n\n    registerRoute(route) {\n      {\n        assert_mjs.assert.isType(route, 'object', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route'\n        });\n        assert_mjs.assert.hasMethod(route, 'match', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route'\n        });\n        assert_mjs.assert.isType(route.handler, 'object', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route'\n        });\n        assert_mjs.assert.hasMethod(route.handler, 'handle', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route.handler'\n        });\n        assert_mjs.assert.isType(route.method, 'string', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route.method'\n        });\n      }\n\n      if (!this._routes.has(route.method)) {\n        this._routes.set(route.method, []);\n      } // Give precedence to all of the earlier routes by adding this additional\n      // route to the end of the array.\n\n\n      this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox.routing.Route} route The route to unregister.\n     */\n\n\n    unregisterRoute(route) {\n      if (!this._routes.has(route.method)) {\n        throw new WorkboxError_mjs.WorkboxError('unregister-route-but-not-found-with-method', {\n          method: route.method\n        });\n      }\n\n      const routeIndex = this._routes.get(route.method).indexOf(route);\n\n      if (routeIndex > -1) {\n        this._routes.get(route.method).splice(routeIndex, 1);\n      } else {\n        throw new WorkboxError_mjs.WorkboxError('unregister-route-route-not-registered');\n      }\n    }\n\n  }\n  /*\n    Copyright 2019 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n\n  let defaultRouter;\n  /**\n   * Creates a new, singleton Router instance if one does not exist. If one\n   * does already exist, that instance is returned.\n   *\n   * @private\n   * @return {Router}\n   */\n\n  const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n      defaultRouter = new Router(); // The helpers that use the default Router assume these listeners exist.\n\n      defaultRouter.addFetchListener();\n      defaultRouter.addCacheListener();\n    }\n\n    return defaultRouter;\n  };\n  /*\n    Copyright 2019 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * Registers a route that will return a precached file for a navigation\n   * request. This is useful for the\n   * [application shell pattern]{@link https://developers.google.com/web/fundamentals/architecture/app-shell}.\n   *\n   * When determining the URL of the precached HTML document, you will likely need\n   * to call `workbox.precaching.getCacheKeyForURL(originalUrl)`, to account for\n   * the fact that Workbox's precaching naming conventions often results in URL\n   * cache keys that contain extra revisioning info.\n   *\n   * This method will generate a\n   * [NavigationRoute]{@link workbox.routing.NavigationRoute}\n   * and call\n   * [Router.registerRoute()]{@link workbox.routing.Router#registerRoute} on a\n   * singleton Router instance.\n   *\n   * @param {string} cachedAssetUrl The cache key to use for the HTML file.\n   * @param {Object} [options]\n   * @param {string} [options.cacheName] Cache name to store and retrieve\n   * requests. Defaults to precache cache name provided by\n   * [workbox-core.cacheNames]{@link workbox.core.cacheNames}.\n   * @param {Array<RegExp>} [options.blacklist=[]] If any of these patterns\n   * match, the route will not handle the request (even if a whitelist entry\n   * matches).\n   * @param {Array<RegExp>} [options.whitelist=[/./]] If any of these patterns\n   * match the URL's pathname and search parameter, the route will handle the\n   * request (assuming the blacklist doesn't match).\n   * @return {workbox.routing.NavigationRoute} Returns the generated\n   * Route.\n   *\n   * @alias workbox.routing.registerNavigationRoute\n   */\n\n\n  const registerNavigationRoute = (cachedAssetUrl, options = {}) => {\n    {\n      assert_mjs.assert.isType(cachedAssetUrl, 'string', {\n        moduleName: 'workbox-routing',\n        funcName: 'registerNavigationRoute',\n        paramName: 'cachedAssetUrl'\n      });\n    }\n    const cacheName = cacheNames_mjs.cacheNames.getPrecacheName(options.cacheName);\n\n    const handler = async () => {\n      try {\n        const response = await caches.match(cachedAssetUrl, {\n          cacheName\n        });\n\n        if (response) {\n          return response;\n        } // This shouldn't normally happen, but there are edge cases:\n        // https://github.com/GoogleChrome/workbox/issues/1441\n\n\n        throw new Error(`The cache ${cacheName} did not have an entry for ` + `${cachedAssetUrl}.`);\n      } catch (error) {\n        // If there's either a cache miss, or the caches.match() call threw\n        // an exception, then attempt to fulfill the navigation request with\n        // a response from the network rather than leaving the user with a\n        // failed navigation.\n        {\n          logger_mjs.logger.debug(`Unable to respond to navigation request with ` + `cached response. Falling back to network.`, error);\n        } // This might still fail if the browser is offline...\n\n        return fetch(cachedAssetUrl);\n      }\n    };\n\n    const route = new NavigationRoute(handler, {\n      whitelist: options.whitelist,\n      blacklist: options.blacklist\n    });\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n  };\n  /*\n    Copyright 2019 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * Easily register a RegExp, string, or function with a caching\n   * strategy to a singleton Router instance.\n   *\n   * This method will generate a Route for you if needed and\n   * call [Router.registerRoute()]{@link\n   * workbox.routing.Router#registerRoute}.\n   *\n   * @param {\n   * RegExp|\n   * string|\n   * workbox.routing.Route~matchCallback|\n   * workbox.routing.Route\n   * } capture\n   * If the capture param is a `Route`, all other arguments will be ignored.\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   * @param {string} [method='GET'] The HTTP method to match the Route\n   * against.\n   * @return {workbox.routing.Route} The generated `Route`(Useful for\n   * unregistering).\n   *\n   * @alias workbox.routing.registerRoute\n   */\n\n\n  const registerRoute = (capture, handler, method = 'GET') => {\n    let route;\n\n    if (typeof capture === 'string') {\n      const captureUrl = new URL(capture, location);\n      {\n        if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n          throw new WorkboxError_mjs.WorkboxError('invalid-string', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture'\n          });\n        } // We want to check if Express-style wildcards are in the pathname only.\n        // TODO: Remove this log message in v4.\n\n\n        const valueToCheck = capture.startsWith('http') ? captureUrl.pathname : capture; // See https://github.com/pillarjs/path-to-regexp#parameters\n\n        const wildcards = '[*:?+]';\n\n        if (valueToCheck.match(new RegExp(`${wildcards}`))) {\n          logger_mjs.logger.debug(`The '$capture' parameter contains an Express-style wildcard ` + `character (${wildcards}). Strings are now always interpreted as ` + `exact matches; use a RegExp for partial or wildcard matches.`);\n        }\n      }\n\n      const matchCallback = ({\n        url\n      }) => {\n        {\n          if (url.pathname === captureUrl.pathname && url.origin !== captureUrl.origin) {\n            logger_mjs.logger.debug(`${capture} only partially matches the cross-origin URL ` + `${url}. This route will only handle cross-origin requests ` + `if they match the entire URL.`);\n          }\n        }\n        return url.href === captureUrl.href;\n      };\n\n      route = new Route(matchCallback, handler, method);\n    } else if (capture instanceof RegExp) {\n      route = new RegExpRoute(capture, handler, method);\n    } else if (typeof capture === 'function') {\n      route = new Route(capture, handler, method);\n    } else if (capture instanceof Route) {\n      route = capture;\n    } else {\n      throw new WorkboxError_mjs.WorkboxError('unsupported-route-type', {\n        moduleName: 'workbox-routing',\n        funcName: 'registerRoute',\n        paramName: 'capture'\n      });\n    }\n\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n  };\n  /*\n    Copyright 2019 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * If a Route throws an error while handling a request, this `handler`\n   * will be called and given a chance to provide a response.\n   *\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   *\n   * @alias workbox.routing.setCatchHandler\n   */\n\n\n  const setCatchHandler = handler => {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setCatchHandler(handler);\n  };\n  /*\n    Copyright 2019 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * Define a default `handler` that's called when no routes explicitly\n   * match the incoming request.\n   *\n   * Without a default handler, unmatched requests will go against the\n   * network as if there were no service worker present.\n   *\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   *\n   * @alias workbox.routing.setDefaultHandler\n   */\n\n\n  const setDefaultHandler = handler => {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setDefaultHandler(handler);\n  };\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n\n  {\n    assert_mjs.assert.isSWEnv('workbox-routing');\n  }\n  exports.NavigationRoute = NavigationRoute;\n  exports.RegExpRoute = RegExpRoute;\n  exports.registerNavigationRoute = registerNavigationRoute;\n  exports.registerRoute = registerRoute;\n  exports.Route = Route;\n  exports.Router = Router;\n  exports.setCatchHandler = setCatchHandler;\n  exports.setDefaultHandler = setDefaultHandler;\n  return exports;\n}({}, workbox.core._private, workbox.core._private, workbox.core._private, workbox.core._private, workbox.core._private);","map":{"version":3,"sources":["../_version.mjs","../utils/constants.mjs","../utils/normalizeHandler.mjs","../Route.mjs","../NavigationRoute.mjs","../RegExpRoute.mjs","../Router.mjs","../utils/getOrCreateDefaultRouter.mjs","../registerNavigationRoute.mjs","../registerRoute.mjs","../setCatchHandler.mjs","../setDefaultHandler.mjs","../index.mjs"],"names":["self","_","defaultMethod","validMethods","normalizeHandler","handler","assert","moduleName","className","funcName","paramName","handle","constructor","method","whitelist","blacklist","options","_match","request","pathnameAndSearch","url","regExp","logger","match","result","location","addFetchListener","event","responsePromise","addCacheListener","payload","requestPromises","entry","handleRequest","route","debugMessages","getFriendlyURL","msg","Array","params","Promise","err","findMatchingRoute","routes","matchResult","Object","setDefaultHandler","setCatchHandler","registerRoute","unregisterRoute","WorkboxError","routeIndex","getOrCreateDefaultRouter","defaultRouter","registerNavigationRoute","cacheName","cacheNames","response","cachedAssetUrl","fetch","captureUrl","capture","valueToCheck","wildcards","matchCallback"],"mappings":"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","sourcesContent":["try{self['workbox:routing:4.3.1']&&_()}catch(e){}// eslint-disable-line","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n  'DELETE',\n  'GET',\n  'HEAD',\n  'PATCH',\n  'POST',\n  'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport '../_version.mjs';\n\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n  if (handler && typeof handler === 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.hasMethod(handler, 'handle', {\n        moduleName: 'workbox-routing',\n        className: 'Route',\n        funcName: 'constructor',\n        paramName: 'handler',\n      });\n    }\n    return handler;\n  } else {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(handler, 'function', {\n        moduleName: 'workbox-routing',\n        className: 'Route',\n        funcName: 'constructor',\n        paramName: 'handler',\n      });\n    }\n    return {handle: handler};\n  }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\n\nimport {defaultMethod, validMethods} from './utils/constants.mjs';\nimport {normalizeHandler} from './utils/normalizeHandler.mjs';\nimport './_version.mjs';\n\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox.routing\n */\nclass Route {\n  /**\n   * Constructor for Route class.\n   *\n   * @param {workbox.routing.Route~matchCallback} match\n   * A callback function that determines whether the route matches a given\n   * `fetch` event by returning a non-falsy value.\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resolving to a Response.\n   * @param {string} [method='GET'] The HTTP method to match the Route\n   * against.\n   */\n  constructor(match, handler, method) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(match, 'function', {\n        moduleName: 'workbox-routing',\n        className: 'Route',\n        funcName: 'constructor',\n        paramName: 'match',\n      });\n\n      if (method) {\n        assert.isOneOf(method, validMethods, {paramName: 'method'});\n      }\n    }\n\n    // These values are referenced directly by Router so cannot be\n    // altered by minifification.\n    this.handler = normalizeHandler(handler);\n    this.match = match;\n    this.method = method || defaultMethod;\n  }\n}\n\nexport {Route};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {Route} from './Route.mjs';\nimport './_version.mjs';\n\n/**\n * NavigationRoute makes it easy to create a [Route]{@link\n * workbox.routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * [`mode`]{@link https://fetch.spec.whatwg.org/#concept-request-mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `blacklist` and `whitelist` parameters.\n *\n * @memberof workbox.routing\n * @extends workbox.routing.Route\n */\nclass NavigationRoute extends Route {\n  /**\n   * If both `blacklist` and `whiltelist` are provided, the `blacklist` will\n   * take precedence and the request will not match this route.\n   *\n   * The regular expressions in `whitelist` and `blacklist`\n   * are matched against the concatenated\n   * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n   * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n   * portions of the requested URL.\n   *\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   * @param {Object} options\n   * @param {Array<RegExp>} [options.blacklist] If any of these patterns match,\n   * the route will not handle the request (even if a whitelist RegExp matches).\n   * @param {Array<RegExp>} [options.whitelist=[/./]] If any of these patterns\n   * match the URL's pathname and search parameter, the route will handle the\n   * request (assuming the blacklist doesn't match).\n   */\n  constructor(handler, {whitelist = [/./], blacklist = []} = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isArrayOfClass(whitelist, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'NavigationRoute',\n        funcName: 'constructor',\n        paramName: 'options.whitelist',\n      });\n      assert.isArrayOfClass(blacklist, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'NavigationRoute',\n        funcName: 'constructor',\n        paramName: 'options.blacklist',\n      });\n    }\n\n    super((options) => this._match(options), handler);\n\n    this._whitelist = whitelist;\n    this._blacklist = blacklist;\n  }\n\n  /**\n   * Routes match handler.\n   *\n   * @param {Object} options\n   * @param {URL} options.url\n   * @param {Request} options.request\n   * @return {boolean}\n   *\n   * @private\n   */\n  _match({url, request}) {\n    if (request.mode !== 'navigate') {\n      return false;\n    }\n\n    const pathnameAndSearch = url.pathname + url.search;\n\n    for (const regExp of this._blacklist) {\n      if (regExp.test(pathnameAndSearch)) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.log(`The navigation route is not being used, since the ` +\n              `URL matches this blacklist pattern: ${regExp}`);\n        }\n        return false;\n      }\n    }\n\n    if (this._whitelist.some((regExp) => regExp.test(pathnameAndSearch))) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(`The navigation route is being used.`);\n      }\n      return true;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log(`The navigation route is not being used, since the URL ` +\n          `being navigated to doesn't match the whitelist.`);\n    }\n    return false;\n  }\n}\n\nexport {NavigationRoute};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {Route} from './Route.mjs';\nimport './_version.mjs';\n\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * [Route]{@link workbox.routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\n *\n * @memberof workbox.routing\n * @extends workbox.routing.Route\n */\nclass RegExpRoute extends Route {\n  /**\n   * If the regulard expression contains\n   * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n   * th ecaptured values will be passed to the\n   * [handler's]{@link workbox.routing.Route~handlerCallback} `params`\n   * argument.\n   *\n   * @param {RegExp} regExp The regular expression to match against URLs.\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   * @param {string} [method='GET'] The HTTP method to match the Route\n   * against.\n   */\n  constructor(regExp, handler, method) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(regExp, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'RegExpRoute',\n        funcName: 'constructor',\n        paramName: 'pattern',\n      });\n    }\n\n    const match = ({url}) => {\n      const result = regExp.exec(url.href);\n\n      // Return null immediately if there's no match.\n      if (!result) {\n        return null;\n      }\n\n      // Require that the match start at the first character in the URL string\n      // if it's a cross-origin request.\n      // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n      // behind this behavior.\n      if ((url.origin !== location.origin) && (result.index !== 0)) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.debug(\n              `The regular expression '${regExp}' only partially matched ` +\n            `against the cross-origin URL '${url}'. RegExpRoute's will only ` +\n            `handle cross-origin requests if they match the entire URL.`\n          );\n        }\n\n        return null;\n      }\n\n      // If the route matches, but there aren't any capture groups defined, then\n      // this will return [], which is truthy and therefore sufficient to\n      // indicate a match.\n      // If there are capture groups, then it will return their values.\n      return result.slice(1);\n    };\n\n    super(match, handler, method);\n  }\n}\n\nexport {RegExpRoute};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {getFriendlyURL} from 'workbox-core/_private/getFriendlyURL.mjs';\n\nimport {normalizeHandler} from './utils/normalizeHandler.mjs';\nimport './_version.mjs';\n\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link workbox.routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox.routing\n */\nclass Router {\n  /**\n   * Initializes a new Router.\n   */\n  constructor() {\n    this._routes = new Map();\n  }\n\n  /**\n   * @return {Map<string, Array<workbox.routing.Route>>} routes A `Map` of HTTP\n   * method name ('GET', etc.) to an array of all the corresponding `Route`\n   * instances that are registered.\n   */\n  get routes() {\n    return this._routes;\n  }\n\n  /**\n   * Adds a fetch event listener to respond to events when a route matches\n   * the event's request.\n   */\n  addFetchListener() {\n    self.addEventListener('fetch', (event) => {\n      const {request} = event;\n      const responsePromise = this.handleRequest({request, event});\n      if (responsePromise) {\n        event.respondWith(responsePromise);\n      }\n    });\n  }\n\n  /**\n   * Adds a message event listener for URLs to cache from the window.\n   * This is useful to cache resources loaded on the page prior to when the\n   * service worker started controlling it.\n   *\n   * The format of the message data sent from the window should be as follows.\n   * Where the `urlsToCache` array may consist of URL strings or an array of\n   * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n   *\n   * ```\n   * {\n   *   type: 'CACHE_URLS',\n   *   payload: {\n   *     urlsToCache: [\n   *       './script1.js',\n   *       './script2.js',\n   *       ['./script3.js', {mode: 'no-cors'}],\n   *     ],\n   *   },\n   * }\n   * ```\n   */\n  addCacheListener() {\n    self.addEventListener('message', async (event) => {\n      if (event.data && event.data.type === 'CACHE_URLS') {\n        const {payload} = event.data;\n\n        if (process.env.NODE_ENV !== 'production') {\n          logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n        }\n\n        const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n          if (typeof entry === 'string') {\n            entry = [entry];\n          }\n\n          const request = new Request(...entry);\n          return this.handleRequest({request});\n        }));\n\n        event.waitUntil(requestPromises);\n\n        // If a MessageChannel was used, reply to the message on success.\n        if (event.ports && event.ports[0]) {\n          await requestPromises;\n          event.ports[0].postMessage(true);\n        }\n      }\n    });\n  }\n\n  /**\n   * Apply the routing rules to a FetchEvent object to get a Response from an\n   * appropriate Route's handler.\n   *\n   * @param {Object} options\n   * @param {Request} options.request The request to handle (this is usually\n   *     from a fetch event, but it does not have to be).\n   * @param {FetchEvent} [options.event] The event that triggered the request,\n   *     if applicable.\n   * @return {Promise<Response>|undefined} A promise is returned if a\n   *     registered route can handle the request. If there is no matching\n   *     route and there's no `defaultHandler`, `undefined` is returned.\n   */\n  handleRequest({request, event}) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'handleRequest',\n        paramName: 'options.request',\n      });\n    }\n\n    const url = new URL(request.url, location);\n    if (!url.protocol.startsWith('http')) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(\n            `Workbox Router only supports URLs that start with 'http'.`);\n      }\n      return;\n    }\n\n    let {params, route} = this.findMatchingRoute({url, request, event});\n    let handler = route && route.handler;\n\n    let debugMessages = [];\n    if (process.env.NODE_ENV !== 'production') {\n      if (handler) {\n        debugMessages.push([\n          `Found a route to handle this request:`, route,\n        ]);\n\n        if (params) {\n          debugMessages.push([\n            `Passing the following params to the route's handler:`, params,\n          ]);\n        }\n      }\n    }\n\n    // If we don't have a handler because there was no matching route, then\n    // fall back to defaultHandler if that's defined.\n    if (!handler && this._defaultHandler) {\n      if (process.env.NODE_ENV !== 'production') {\n        debugMessages.push(`Failed to find a matching route. Falling ` +\n          `back to the default handler.`);\n\n        // This is used for debugging in logs in the case of an error.\n        route = '[Default Handler]';\n      }\n      handler = this._defaultHandler;\n    }\n\n    if (!handler) {\n      if (process.env.NODE_ENV !== 'production') {\n        // No handler so Workbox will do nothing. If logs is set of debug\n        // i.e. verbose, we should print out this information.\n        logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n      }\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // We have a handler, meaning Workbox is going to handle the route.\n      // print the routing details to the console.\n      logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n      debugMessages.forEach((msg) => {\n        if (Array.isArray(msg)) {\n          logger.log(...msg);\n        } else {\n          logger.log(msg);\n        }\n      });\n\n      // The Request and Response objects contains a great deal of information,\n      // hide it under a group in case developers want to see it.\n      logger.groupCollapsed(`View request details here.`);\n      logger.log(request);\n      logger.groupEnd();\n\n      logger.groupEnd();\n    }\n\n    // Wrap in try and catch in case the handle method throws a synchronous\n    // error. It should still callback to the catch handler.\n    let responsePromise;\n    try {\n      responsePromise = handler.handle({url, request, event, params});\n    } catch (err) {\n      responsePromise = Promise.reject(err);\n    }\n\n    if (responsePromise && this._catchHandler) {\n      responsePromise = responsePromise.catch((err) => {\n        if (process.env.NODE_ENV !== 'production') {\n          // Still include URL here as it will be async from the console group\n          // and may not make sense without the URL\n          logger.groupCollapsed(`Error thrown when responding to: ` +\n            ` ${getFriendlyURL(url)}. Falling back to Catch Handler.`);\n          logger.error(`Error thrown by:`, route);\n          logger.error(err);\n          logger.groupEnd();\n        }\n        return this._catchHandler.handle({url, event, err});\n      });\n    }\n\n    return responsePromise;\n  }\n\n  /**\n   * Checks a request and URL (and optionally an event) against the list of\n   * registered routes, and if there's a match, returns the corresponding\n   * route along with any params generated by the match.\n   *\n   * @param {Object} options\n   * @param {URL} options.url\n   * @param {Request} options.request The request to match.\n   * @param {FetchEvent} [options.event] The corresponding event (unless N/A).\n   * @return {Object} An object with `route` and `params` properties.\n   *     They are populated if a matching route was found or `undefined`\n   *     otherwise.\n   */\n  findMatchingRoute({url, request, event}) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(url, URL, {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'findMatchingRoute',\n        paramName: 'options.url',\n      });\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'findMatchingRoute',\n        paramName: 'options.request',\n      });\n    }\n\n    const routes = this._routes.get(request.method) || [];\n    for (const route of routes) {\n      let params;\n      let matchResult = route.match({url, request, event});\n      if (matchResult) {\n        if (Array.isArray(matchResult) && matchResult.length > 0) {\n          // Instead of passing an empty array in as params, use undefined.\n          params = matchResult;\n        } else if ((matchResult.constructor === Object &&\n            Object.keys(matchResult).length > 0)) {\n          // Instead of passing an empty object in as params, use undefined.\n          params = matchResult;\n        }\n\n        // Return early if have a match.\n        return {route, params};\n      }\n    }\n    // If no match was found above, return and empty object.\n    return {};\n  }\n\n  /**\n   * Define a default `handler` that's called when no routes explicitly\n   * match the incoming request.\n   *\n   * Without a default handler, unmatched requests will go against the\n   * network as if there were no service worker present.\n   *\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   */\n  setDefaultHandler(handler) {\n    this._defaultHandler = normalizeHandler(handler);\n  }\n\n  /**\n   * If a Route throws an error while handling a request, this `handler`\n   * will be called and given a chance to provide a response.\n   *\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   */\n  setCatchHandler(handler) {\n    this._catchHandler = normalizeHandler(handler);\n  }\n\n  /**\n   * Registers a route with the router.\n   *\n   * @param {workbox.routing.Route} route The route to register.\n   */\n  registerRoute(route) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(route, 'object', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route',\n      });\n\n      assert.hasMethod(route, 'match', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route',\n      });\n\n      assert.isType(route.handler, 'object', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route',\n      });\n\n      assert.hasMethod(route.handler, 'handle', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route.handler',\n      });\n\n      assert.isType(route.method, 'string', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route.method',\n      });\n    }\n\n    if (!this._routes.has(route.method)) {\n      this._routes.set(route.method, []);\n    }\n\n    // Give precedence to all of the earlier routes by adding this additional\n    // route to the end of the array.\n    this._routes.get(route.method).push(route);\n  }\n\n  /**\n   * Unregisters a route with the router.\n   *\n   * @param {workbox.routing.Route} route The route to unregister.\n   */\n  unregisterRoute(route) {\n    if (!this._routes.has(route.method)) {\n      throw new WorkboxError(\n          'unregister-route-but-not-found-with-method', {\n            method: route.method,\n          }\n      );\n    }\n\n    const routeIndex = this._routes.get(route.method).indexOf(route);\n    if (routeIndex > -1) {\n      this._routes.get(route.method).splice(routeIndex, 1);\n    } else {\n      throw new WorkboxError('unregister-route-route-not-registered');\n    }\n  }\n}\n\nexport {Router};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {Router} from '../Router.mjs';\nimport '../_version.mjs';\n\nlet defaultRouter;\n\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n  if (!defaultRouter) {\n    defaultRouter = new Router();\n\n    // The helpers that use the default Router assume these listeners exist.\n    defaultRouter.addFetchListener();\n    defaultRouter.addCacheListener();\n  }\n  return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {NavigationRoute} from './NavigationRoute.mjs';\nimport {getOrCreateDefaultRouter} from './utils/getOrCreateDefaultRouter.mjs';\nimport './_version.mjs';\n\n\n/**\n * Registers a route that will return a precached file for a navigation\n * request. This is useful for the\n * [application shell pattern]{@link https://developers.google.com/web/fundamentals/architecture/app-shell}.\n *\n * When determining the URL of the precached HTML document, you will likely need\n * to call `workbox.precaching.getCacheKeyForURL(originalUrl)`, to account for\n * the fact that Workbox's precaching naming conventions often results in URL\n * cache keys that contain extra revisioning info.\n *\n * This method will generate a\n * [NavigationRoute]{@link workbox.routing.NavigationRoute}\n * and call\n * [Router.registerRoute()]{@link workbox.routing.Router#registerRoute} on a\n * singleton Router instance.\n *\n * @param {string} cachedAssetUrl The cache key to use for the HTML file.\n * @param {Object} [options]\n * @param {string} [options.cacheName] Cache name to store and retrieve\n * requests. Defaults to precache cache name provided by\n * [workbox-core.cacheNames]{@link workbox.core.cacheNames}.\n * @param {Array<RegExp>} [options.blacklist=[]] If any of these patterns\n * match, the route will not handle the request (even if a whitelist entry\n * matches).\n * @param {Array<RegExp>} [options.whitelist=[/./]] If any of these patterns\n * match the URL's pathname and search parameter, the route will handle the\n * request (assuming the blacklist doesn't match).\n * @return {workbox.routing.NavigationRoute} Returns the generated\n * Route.\n *\n * @alias workbox.routing.registerNavigationRoute\n */\nexport const registerNavigationRoute = (cachedAssetUrl, options = {}) => {\n  if (process.env.NODE_ENV !== 'production') {\n    assert.isType(cachedAssetUrl, 'string', {\n      moduleName: 'workbox-routing',\n      funcName: 'registerNavigationRoute',\n      paramName: 'cachedAssetUrl',\n    });\n  }\n\n  const cacheName = cacheNames.getPrecacheName(options.cacheName);\n  const handler = async () => {\n    try {\n      const response = await caches.match(cachedAssetUrl, {cacheName});\n\n      if (response) {\n        return response;\n      }\n\n      // This shouldn't normally happen, but there are edge cases:\n      // https://github.com/GoogleChrome/workbox/issues/1441\n      throw new Error(`The cache ${cacheName} did not have an entry for ` +\n          `${cachedAssetUrl}.`);\n    } catch (error) {\n      // If there's either a cache miss, or the caches.match() call threw\n      // an exception, then attempt to fulfill the navigation request with\n      // a response from the network rather than leaving the user with a\n      // failed navigation.\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(`Unable to respond to navigation request with ` +\n            `cached response. Falling back to network.`, error);\n      }\n\n      // This might still fail if the browser is offline...\n      return fetch(cachedAssetUrl);\n    }\n  };\n\n  const route = new NavigationRoute(handler, {\n    whitelist: options.whitelist,\n    blacklist: options.blacklist,\n  });\n\n  const defaultRouter = getOrCreateDefaultRouter();\n  defaultRouter.registerRoute(route);\n\n  return route;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {Route} from './Route.mjs';\nimport {RegExpRoute} from './RegExpRoute.mjs';\nimport {getOrCreateDefaultRouter} from './utils/getOrCreateDefaultRouter.mjs';\nimport './_version.mjs';\n\n\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call [Router.registerRoute()]{@link\n * workbox.routing.Router#registerRoute}.\n *\n * @param {\n * RegExp|\n * string|\n * workbox.routing.Route~matchCallback|\n * workbox.routing.Route\n * } capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox.routing.Route~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox.routing.Route} The generated `Route`(Useful for\n * unregistering).\n *\n * @alias workbox.routing.registerRoute\n */\nexport const registerRoute = (capture, handler, method = 'GET') => {\n  let route;\n\n  if (typeof capture === 'string') {\n    const captureUrl = new URL(capture, location);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n        throw new WorkboxError('invalid-string', {\n          moduleName: 'workbox-routing',\n          funcName: 'registerRoute',\n          paramName: 'capture',\n        });\n      }\n\n      // We want to check if Express-style wildcards are in the pathname only.\n      // TODO: Remove this log message in v4.\n      const valueToCheck = capture.startsWith('http') ?\n          captureUrl.pathname : capture;\n\n      // See https://github.com/pillarjs/path-to-regexp#parameters\n      const wildcards = '[*:?+]';\n      if (valueToCheck.match(new RegExp(`${wildcards}`))) {\n        logger.debug(\n            `The '$capture' parameter contains an Express-style wildcard ` +\n          `character (${wildcards}). Strings are now always interpreted as ` +\n          `exact matches; use a RegExp for partial or wildcard matches.`\n        );\n      }\n    }\n\n    const matchCallback = ({url}) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if ((url.pathname === captureUrl.pathname) &&\n            (url.origin !== captureUrl.origin)) {\n          logger.debug(\n              `${capture} only partially matches the cross-origin URL ` +\n              `${url}. This route will only handle cross-origin requests ` +\n              `if they match the entire URL.`);\n        }\n      }\n\n      return url.href === captureUrl.href;\n    };\n\n    route = new Route(matchCallback, handler, method);\n  } else if (capture instanceof RegExp) {\n    route = new RegExpRoute(capture, handler, method);\n  } else if (typeof capture === 'function') {\n    route = new Route(capture, handler, method);\n  } else if (capture instanceof Route) {\n    route = capture;\n  } else {\n    throw new WorkboxError('unsupported-route-type', {\n      moduleName: 'workbox-routing',\n      funcName: 'registerRoute',\n      paramName: 'capture',\n    });\n  }\n\n  const defaultRouter = getOrCreateDefaultRouter();\n  defaultRouter.registerRoute(route);\n\n  return route;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {getOrCreateDefaultRouter} from './utils/getOrCreateDefaultRouter.mjs';\n\nimport './_version.mjs';\n\n/**\n * If a Route throws an error while handling a request, this `handler`\n * will be called and given a chance to provide a response.\n *\n * @param {workbox.routing.Route~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @alias workbox.routing.setCatchHandler\n */\nexport const setCatchHandler = (handler) => {\n  const defaultRouter = getOrCreateDefaultRouter();\n  defaultRouter.setCatchHandler(handler);\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {getOrCreateDefaultRouter} from './utils/getOrCreateDefaultRouter.mjs';\n\nimport './_version.mjs';\n\n/**\n * Define a default `handler` that's called when no routes explicitly\n * match the incoming request.\n *\n * Without a default handler, unmatched requests will go against the\n * network as if there were no service worker present.\n *\n * @param {workbox.routing.Route~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @alias workbox.routing.setDefaultHandler\n */\nexport const setDefaultHandler = (handler) => {\n  const defaultRouter = getOrCreateDefaultRouter();\n  defaultRouter.setDefaultHandler(handler);\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\n\nimport {NavigationRoute} from './NavigationRoute.mjs';\nimport {RegExpRoute} from './RegExpRoute.mjs';\nimport {registerNavigationRoute} from './registerNavigationRoute.mjs';\nimport {registerRoute} from './registerRoute.mjs';\nimport {Route} from './Route.mjs';\nimport {Router} from './Router.mjs';\nimport {setCatchHandler} from './setCatchHandler.mjs';\nimport {setDefaultHandler} from './setDefaultHandler.mjs';\n\nimport './_version.mjs';\n\nif (process.env.NODE_ENV !== 'production') {\n  assert.isSWEnv('workbox-routing');\n}\n\n/**\n * @namespace workbox.routing\n */\n\nexport {\n  NavigationRoute,\n  RegExpRoute,\n  registerNavigationRoute,\n  registerRoute,\n  Route,\n  Router,\n  setCatchHandler,\n  setDefaultHandler,\n};\n"]},"metadata":{},"sourceType":"script"}