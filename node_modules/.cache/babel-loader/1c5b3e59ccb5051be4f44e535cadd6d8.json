{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.mjs';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.mjs';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.mjs';\nimport { logger } from 'workbox-core/_private/logger.mjs';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.mjs';\nimport { messages } from './utils/messages.mjs';\nimport './_version.mjs';\n/**\n * An implementation of a\n * [network-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-only}\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @memberof workbox.strategies\n */\n\nclass NetworkOnly {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link workbox.core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   */\n  constructor(options = {}) {\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    this._plugins = options.plugins || [];\n    this._fetchOptions = options.fetchOptions || null;\n  }\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request} options.request The request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  async handle({\n    event,\n    request\n  }) {\n    return this.makeRequest({\n      event,\n      request: request || event.request\n    });\n  }\n  /**\n   * This method can be used to perform a make a standalone request outside the\n   * context of the [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * See \"[Advanced Recipes](https://developers.google.com/web/tools/workbox/guides/advanced-recipes#make-requests)\"\n   * for more usage information.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request Either a\n   *     [`Request`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Request}\n   *     object, or a string URL, corresponding to the request to be made.\n   * @param {FetchEvent} [options.event] If provided, `event.waitUntil()` will\n   *     be called automatically to extend the service worker's lifetime.\n   * @return {Promise<Response>}\n   */\n\n\n  async makeRequest({\n    event,\n    request\n  }) {\n    if (typeof request === 'string') {\n      request = new Request(request);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-strategies',\n        className: 'NetworkOnly',\n        funcName: 'handle',\n        paramName: 'request'\n      });\n    }\n\n    let error;\n    let response;\n\n    try {\n      response = await fetchWrapper.fetch({\n        request,\n        event,\n        fetchOptions: this._fetchOptions,\n        plugins: this._plugins\n      });\n    } catch (err) {\n      error = err;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(messages.strategyStart('NetworkOnly', request));\n\n      if (response) {\n        logger.log(`Got response from network.`);\n      } else {\n        logger.log(`Unable to get a response from the network.`);\n      }\n\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n\n    if (!response) {\n      throw new WorkboxError('no-response', {\n        url: request.url,\n        error\n      });\n    }\n\n    return response;\n  }\n\n}\n\nexport { NetworkOnly };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-strategies/NetworkOnly.mjs"],"names":["assert","cacheNames","fetchWrapper","logger","WorkboxError","messages","NetworkOnly","constructor","options","_cacheName","getRuntimeName","cacheName","_plugins","plugins","_fetchOptions","fetchOptions","handle","event","request","makeRequest","Request","process","env","NODE_ENV","isInstance","moduleName","className","funcName","paramName","error","response","fetch","err","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url"],"mappings":"AAAA;;;;;;;AAQA,SAAQA,MAAR,QAAqB,kCAArB;AACA,SAAQC,UAAR,QAAyB,sCAAzB;AACA,SAAQC,YAAR,QAA2B,wCAA3B;AACA,SAAQC,MAAR,QAAqB,kCAArB;AACA,SAAQC,YAAR,QAA2B,wCAA3B;AAEA,SAAQC,QAAR,QAAuB,sBAAvB;AACA,OAAO,gBAAP;AAEA;;;;;;;;;;;;;AAYA,MAAMC,WAAN,CAAkB;AAChB;;;;;;;;;;;AAWAC,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACxB,SAAKC,UAAL,GAAkBR,UAAU,CAACS,cAAX,CAA0BF,OAAO,CAACG,SAAlC,CAAlB;AACA,SAAKC,QAAL,GAAgBJ,OAAO,CAACK,OAAR,IAAmB,EAAnC;AACA,SAAKC,aAAL,GAAqBN,OAAO,CAACO,YAAR,IAAwB,IAA7C;AACD;AAED;;;;;;;;;;;;AAUA,QAAMC,MAAN,CAAa;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAb,EAA+B;AAC7B,WAAO,KAAKC,WAAL,CAAiB;AACtBF,MAAAA,KADsB;AAEtBC,MAAAA,OAAO,EAAEA,OAAO,IAAID,KAAK,CAACC;AAFJ,KAAjB,CAAP;AAID;AAED;;;;;;;;;;;;;;;;;AAeA,QAAMC,WAAN,CAAkB;AAACF,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAlB,EAAoC;AAClC,QAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,MAAAA,OAAO,GAAG,IAAIE,OAAJ,CAAYF,OAAZ,CAAV;AACD;;AAED,QAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCvB,MAAAA,MAAM,CAACwB,UAAP,CAAkBN,OAAlB,EAA2BE,OAA3B,EAAoC;AAClCK,QAAAA,UAAU,EAAE,oBADsB;AAElCC,QAAAA,SAAS,EAAE,aAFuB;AAGlCC,QAAAA,QAAQ,EAAE,QAHwB;AAIlCC,QAAAA,SAAS,EAAE;AAJuB,OAApC;AAMD;;AAED,QAAIC,KAAJ;AACA,QAAIC,QAAJ;;AACA,QAAI;AACFA,MAAAA,QAAQ,GAAG,MAAM5B,YAAY,CAAC6B,KAAb,CAAmB;AAClCb,QAAAA,OADkC;AAElCD,QAAAA,KAFkC;AAGlCF,QAAAA,YAAY,EAAE,KAAKD,aAHe;AAIlCD,QAAAA,OAAO,EAAE,KAAKD;AAJoB,OAAnB,CAAjB;AAMD,KAPD,CAOE,OAAOoB,GAAP,EAAY;AACZH,MAAAA,KAAK,GAAGG,GAAR;AACD;;AAED,QAAIX,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCpB,MAAAA,MAAM,CAAC8B,cAAP,CACI5B,QAAQ,CAAC6B,aAAT,CAAuB,aAAvB,EAAsChB,OAAtC,CADJ;;AAEA,UAAIY,QAAJ,EAAc;AACZ3B,QAAAA,MAAM,CAACgC,GAAP,CAAY,4BAAZ;AACD,OAFD,MAEO;AACLhC,QAAAA,MAAM,CAACgC,GAAP,CAAY,4CAAZ;AACD;;AACD9B,MAAAA,QAAQ,CAAC+B,kBAAT,CAA4BN,QAA5B;AACA3B,MAAAA,MAAM,CAACkC,QAAP;AACD;;AAED,QAAI,CAACP,QAAL,EAAe;AACb,YAAM,IAAI1B,YAAJ,CAAiB,aAAjB,EAAgC;AAACkC,QAAAA,GAAG,EAAEpB,OAAO,CAACoB,GAAd;AAAmBT,QAAAA;AAAnB,OAAhC,CAAN;AACD;;AACD,WAAOC,QAAP;AACD;;AA7Fe;;AAgGlB,SAAQxB,WAAR","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\nimport {fetchWrapper} from 'workbox-core/_private/fetchWrapper.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\n\nimport {messages} from './utils/messages.mjs';\nimport './_version.mjs';\n\n/**\n * An implementation of a\n * [network-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-only}\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @memberof workbox.strategies\n */\nclass NetworkOnly {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link workbox.core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   */\n  constructor(options = {}) {\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    this._plugins = options.plugins || [];\n    this._fetchOptions = options.fetchOptions || null;\n  }\n\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request} options.request The request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n  async handle({event, request}) {\n    return this.makeRequest({\n      event,\n      request: request || event.request,\n    });\n  }\n\n  /**\n   * This method can be used to perform a make a standalone request outside the\n   * context of the [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * See \"[Advanced Recipes](https://developers.google.com/web/tools/workbox/guides/advanced-recipes#make-requests)\"\n   * for more usage information.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request Either a\n   *     [`Request`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Request}\n   *     object, or a string URL, corresponding to the request to be made.\n   * @param {FetchEvent} [options.event] If provided, `event.waitUntil()` will\n   *     be called automatically to extend the service worker's lifetime.\n   * @return {Promise<Response>}\n   */\n  async makeRequest({event, request}) {\n    if (typeof request === 'string') {\n      request = new Request(request);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-strategies',\n        className: 'NetworkOnly',\n        funcName: 'handle',\n        paramName: 'request',\n      });\n    }\n\n    let error;\n    let response;\n    try {\n      response = await fetchWrapper.fetch({\n        request,\n        event,\n        fetchOptions: this._fetchOptions,\n        plugins: this._plugins,\n      });\n    } catch (err) {\n      error = err;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(\n          messages.strategyStart('NetworkOnly', request));\n      if (response) {\n        logger.log(`Got response from network.`);\n      } else {\n        logger.log(`Unable to get a response from the network.`);\n      }\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n\n    if (!response) {\n      throw new WorkboxError('no-response', {url: request.url, error});\n    }\n    return response;\n  }\n}\n\nexport {NetworkOnly};\n"]},"metadata":{},"sourceType":"module"}