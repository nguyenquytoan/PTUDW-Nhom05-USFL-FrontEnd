{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst fse = require('fs-extra');\n\nconst path = require('path');\n\nconst errors = require('./errors'); // Used to filter the libraries to copy based on our package.json dependencies.\n\n\nconst WORKBOX_PREFIX = 'workbox-';\n/**\n * This copies over a set of runtime libraries used by Workbox into a\n * local directory, which should be deployed alongside your service worker file.\n *\n * As an alternative to deploying these local copies, you could instead use\n * Workbox from its official CDN URL.\n *\n * This method is exposed for the benefit of developers using\n * [injectManifest()]{@link module:workbox-build.injectManifest} who would\n * prefer not to use the CDN copies of Workbox. Developers using\n * [generateSW()]{@link module:workbox-build.generateSW} don't need to\n * explicitly call this method, as it's called automatically when\n * `importWorkboxFrom` is set to `local`.\n *\n * @param {string} destDirectory The path to the parent directory under which\n * the new directory of libraries will be created.\n * @return {Promise<string>} The name of the newly created directory.\n *\n * @alias module:workbox-build.copyWorkboxLibraries\n */\n\nmodule.exports = async destDirectory => {\n  const thisPkg = require('../../package.json'); // Use the version string from workbox-build in the name of the parent\n  // directory. This should be safe, because lerna will bump workbox-build's\n  // pkg.version whenever one of the dependent libraries gets bumped, and we\n  // care about versioning the dependent libraries.\n\n\n  const workboxDirectoryName = `workbox-v${thisPkg.version}`;\n  const workboxDirectoryPath = path.join(destDirectory, workboxDirectoryName);\n  await fse.ensureDir(workboxDirectoryPath);\n  const copyPromises = [];\n  const librariesToCopy = Object.keys(thisPkg.dependencies).filter(dependency => dependency.startsWith(WORKBOX_PREFIX));\n\n  for (const library of librariesToCopy) {\n    const mainFilePath = require.resolve(library);\n\n    const srcPath = path.dirname(mainFilePath); // fse.copy() copies all the files in a directory, not the directory itself.\n    // See https://github.com/jprichardson/node-fs-extra/blob/master/docs/copy.md#copysrc-dest-options-callback\n\n    copyPromises.push(fse.copy(srcPath, workboxDirectoryPath));\n  }\n\n  try {\n    await Promise.all(copyPromises);\n    return workboxDirectoryName;\n  } catch (error) {\n    throw Error(`${errors['unable-to-copy-workbox-libraries']} ${error}`);\n  }\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-build/src/lib/copy-workbox-libraries.js"],"names":["fse","require","path","errors","WORKBOX_PREFIX","module","exports","destDirectory","thisPkg","workboxDirectoryName","version","workboxDirectoryPath","join","ensureDir","copyPromises","librariesToCopy","Object","keys","dependencies","filter","dependency","startsWith","library","mainFilePath","resolve","srcPath","dirname","push","copy","Promise","all","error","Error"],"mappings":"AAAA;;;;;;;AAQA,MAAMA,GAAG,GAAGC,OAAO,CAAC,UAAD,CAAnB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB,C,CAGA;;;AACA,MAAMG,cAAc,GAAG,UAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBAC,MAAM,CAACC,OAAP,GAAiB,MAAOC,aAAP,IAAyB;AACxC,QAAMC,OAAO,GAAGP,OAAO,CAAC,oBAAD,CAAvB,CADwC,CAExC;AACA;AACA;AACA;;;AACA,QAAMQ,oBAAoB,GAAI,YAAWD,OAAO,CAACE,OAAQ,EAAzD;AACA,QAAMC,oBAAoB,GAAGT,IAAI,CAACU,IAAL,CAAUL,aAAV,EAAyBE,oBAAzB,CAA7B;AACA,QAAMT,GAAG,CAACa,SAAJ,CAAcF,oBAAd,CAAN;AAEA,QAAMG,YAAY,GAAG,EAArB;AACA,QAAMC,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYT,OAAO,CAACU,YAApB,EAAkCC,MAAlC,CACnBC,UAAD,IAAgBA,UAAU,CAACC,UAAX,CAAsBjB,cAAtB,CADI,CAAxB;;AAEA,OAAK,MAAMkB,OAAX,IAAsBP,eAAtB,EAAuC;AACrC,UAAMQ,YAAY,GAAGtB,OAAO,CAACuB,OAAR,CAAgBF,OAAhB,CAArB;;AACA,UAAMG,OAAO,GAAGvB,IAAI,CAACwB,OAAL,CAAaH,YAAb,CAAhB,CAFqC,CAIrC;AACA;;AACAT,IAAAA,YAAY,CAACa,IAAb,CAAkB3B,GAAG,CAAC4B,IAAJ,CAASH,OAAT,EAAkBd,oBAAlB,CAAlB;AACD;;AAED,MAAI;AACF,UAAMkB,OAAO,CAACC,GAAR,CAAYhB,YAAZ,CAAN;AACA,WAAOL,oBAAP;AACD,GAHD,CAGE,OAAOsB,KAAP,EAAc;AACd,UAAMC,KAAK,CAAE,GAAE7B,MAAM,CAAC,kCAAD,CAAqC,IAAG4B,KAAM,EAAxD,CAAX;AACD;AACF,CA5BD","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst fse = require('fs-extra');\nconst path = require('path');\nconst errors = require('./errors');\n\n\n// Used to filter the libraries to copy based on our package.json dependencies.\nconst WORKBOX_PREFIX = 'workbox-';\n\n/**\n * This copies over a set of runtime libraries used by Workbox into a\n * local directory, which should be deployed alongside your service worker file.\n *\n * As an alternative to deploying these local copies, you could instead use\n * Workbox from its official CDN URL.\n *\n * This method is exposed for the benefit of developers using\n * [injectManifest()]{@link module:workbox-build.injectManifest} who would\n * prefer not to use the CDN copies of Workbox. Developers using\n * [generateSW()]{@link module:workbox-build.generateSW} don't need to\n * explicitly call this method, as it's called automatically when\n * `importWorkboxFrom` is set to `local`.\n *\n * @param {string} destDirectory The path to the parent directory under which\n * the new directory of libraries will be created.\n * @return {Promise<string>} The name of the newly created directory.\n *\n * @alias module:workbox-build.copyWorkboxLibraries\n */\nmodule.exports = async (destDirectory) => {\n  const thisPkg = require('../../package.json');\n  // Use the version string from workbox-build in the name of the parent\n  // directory. This should be safe, because lerna will bump workbox-build's\n  // pkg.version whenever one of the dependent libraries gets bumped, and we\n  // care about versioning the dependent libraries.\n  const workboxDirectoryName = `workbox-v${thisPkg.version}`;\n  const workboxDirectoryPath = path.join(destDirectory, workboxDirectoryName);\n  await fse.ensureDir(workboxDirectoryPath);\n\n  const copyPromises = [];\n  const librariesToCopy = Object.keys(thisPkg.dependencies).filter(\n      (dependency) => dependency.startsWith(WORKBOX_PREFIX));\n  for (const library of librariesToCopy) {\n    const mainFilePath = require.resolve(library);\n    const srcPath = path.dirname(mainFilePath);\n\n    // fse.copy() copies all the files in a directory, not the directory itself.\n    // See https://github.com/jprichardson/node-fs-extra/blob/master/docs/copy.md#copysrc-dest-options-callback\n    copyPromises.push(fse.copy(srcPath, workboxDirectoryPath));\n  }\n\n  try {\n    await Promise.all(copyPromises);\n    return workboxDirectoryName;\n  } catch (error) {\n    throw Error(`${errors['unable-to-copy-workbox-libraries']} ${error}`);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}