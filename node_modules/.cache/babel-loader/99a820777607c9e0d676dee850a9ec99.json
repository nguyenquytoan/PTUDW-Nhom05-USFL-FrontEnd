{"ast":null,"code":"/**\n * @fileoverview Rule to flag when a function has too many parameters\n * @author Ilya Volodin\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst lodash = require(\"lodash\");\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce a maximum number of parameters in function definitions\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-params\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 0\n      }, {\n        type: \"object\",\n        properties: {\n          maximum: {\n            type: \"integer\",\n            minimum: 0\n          },\n          max: {\n            type: \"integer\",\n            minimum: 0\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      exceed: \"{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const option = context.options[0];\n    let numParams = 3;\n\n    if (typeof option === \"object\" && (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))) {\n      numParams = option.maximum || option.max;\n    }\n\n    if (typeof option === \"number\") {\n      numParams = option;\n    }\n    /**\n     * Checks a function to see if it has too many parameters.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkFunction(node) {\n      if (node.params.length > numParams) {\n        context.report({\n          loc: astUtils.getFunctionHeadLoc(node, sourceCode),\n          node,\n          messageId: \"exceed\",\n          data: {\n            name: lodash.upperFirst(astUtils.getFunctionNameWithKind(node)),\n            count: node.params.length,\n            max: numParams\n          }\n        });\n      }\n    }\n\n    return {\n      FunctionDeclaration: checkFunction,\n      ArrowFunctionExpression: checkFunction,\n      FunctionExpression: checkFunction\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/max-params.js"],"names":["lodash","require","astUtils","module","exports","meta","type","docs","description","category","recommended","url","schema","oneOf","minimum","properties","maximum","max","additionalProperties","messages","exceed","create","context","sourceCode","getSourceCode","option","options","numParams","Object","prototype","hasOwnProperty","call","checkFunction","node","params","length","report","loc","getFunctionHeadLoc","messageId","data","name","upperFirst","getFunctionNameWithKind","count","FunctionDeclaration","ArrowFunctionExpression","FunctionExpression"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,gEADX;AAEFC,MAAAA,QAAQ,EAAE,kBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,KAAK,EAAE,CACH;AACIP,QAAAA,IAAI,EAAE,SADV;AAEIQ,QAAAA,OAAO,EAAE;AAFb,OADG,EAKH;AACIR,QAAAA,IAAI,EAAE,QADV;AAEIS,QAAAA,UAAU,EAAE;AACRC,UAAAA,OAAO,EAAE;AACLV,YAAAA,IAAI,EAAE,SADD;AAELQ,YAAAA,OAAO,EAAE;AAFJ,WADD;AAKRG,UAAAA,GAAG,EAAE;AACDX,YAAAA,IAAI,EAAE,SADL;AAEDQ,YAAAA,OAAO,EAAE;AAFR;AALG,SAFhB;AAYII,QAAAA,oBAAoB,EAAE;AAZ1B,OALG;AADX,KADI,CAVN;AAkCFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,MAAM,EAAE;AADF;AAlCR,GADO;;AAwCbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;AACA,UAAMC,MAAM,GAAGH,OAAO,CAACI,OAAR,CAAgB,CAAhB,CAAf;AACA,QAAIC,SAAS,GAAG,CAAhB;;AAEA,QACI,OAAOF,MAAP,KAAkB,QAAlB,KACCG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,MAArC,EAA6C,SAA7C,KAA2DG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,MAArC,EAA6C,KAA7C,CAD5D,CADJ,EAGE;AACEE,MAAAA,SAAS,GAAGF,MAAM,CAACT,OAAP,IAAkBS,MAAM,CAACR,GAArC;AACH;;AACD,QAAI,OAAOQ,MAAP,KAAkB,QAAtB,EAAgC;AAC5BE,MAAAA,SAAS,GAAGF,MAAZ;AACH;AAED;;;;;;;;AAMA,aAASO,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,UAAIA,IAAI,CAACC,MAAL,CAAYC,MAAZ,GAAqBR,SAAzB,EAAoC;AAChCL,QAAAA,OAAO,CAACc,MAAR,CAAe;AACXC,UAAAA,GAAG,EAAEnC,QAAQ,CAACoC,kBAAT,CAA4BL,IAA5B,EAAkCV,UAAlC,CADM;AAEXU,UAAAA,IAFW;AAGXM,UAAAA,SAAS,EAAE,QAHA;AAIXC,UAAAA,IAAI,EAAE;AACFC,YAAAA,IAAI,EAAEzC,MAAM,CAAC0C,UAAP,CAAkBxC,QAAQ,CAACyC,uBAAT,CAAiCV,IAAjC,CAAlB,CADJ;AAEFW,YAAAA,KAAK,EAAEX,IAAI,CAACC,MAAL,CAAYC,MAFjB;AAGFlB,YAAAA,GAAG,EAAEU;AAHH;AAJK,SAAf;AAUH;AACJ;;AAED,WAAO;AACHkB,MAAAA,mBAAmB,EAAEb,aADlB;AAEHc,MAAAA,uBAAuB,EAAEd,aAFtB;AAGHe,MAAAA,kBAAkB,EAAEf;AAHjB,KAAP;AAMH;;AAlFY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to flag when a function has too many parameters\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst lodash = require(\"lodash\");\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce a maximum number of parameters in function definitions\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/max-params\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n        messages: {\n            exceed: \"{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        const option = context.options[0];\n        let numParams = 3;\n\n        if (\n            typeof option === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))\n        ) {\n            numParams = option.maximum || option.max;\n        }\n        if (typeof option === \"number\") {\n            numParams = option;\n        }\n\n        /**\n         * Checks a function to see if it has too many parameters.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkFunction(node) {\n            if (node.params.length > numParams) {\n                context.report({\n                    loc: astUtils.getFunctionHeadLoc(node, sourceCode),\n                    node,\n                    messageId: \"exceed\",\n                    data: {\n                        name: lodash.upperFirst(astUtils.getFunctionNameWithKind(node)),\n                        count: node.params.length,\n                        max: numParams\n                    }\n                });\n            }\n        }\n\n        return {\n            FunctionDeclaration: checkFunction,\n            ArrowFunctionExpression: checkFunction,\n            FunctionExpression: checkFunction\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}