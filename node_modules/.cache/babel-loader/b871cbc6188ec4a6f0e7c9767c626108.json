{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _postcss = require('postcss');\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _stylehacks = require('stylehacks');\n\nvar _canMerge = require('../canMerge');\n\nvar _canMerge2 = _interopRequireDefault(_canMerge);\n\nvar _getDecls = require('../getDecls');\n\nvar _getDecls2 = _interopRequireDefault(_getDecls);\n\nvar _getValue = require('../getValue');\n\nvar _getValue2 = _interopRequireDefault(_getValue);\n\nvar _mergeRules = require('../mergeRules');\n\nvar _mergeRules2 = _interopRequireDefault(_mergeRules);\n\nvar _insertCloned = require('../insertCloned');\n\nvar _insertCloned2 = _interopRequireDefault(_insertCloned);\n\nvar _remove = require('../remove');\n\nvar _remove2 = _interopRequireDefault(_remove);\n\nvar _isCustomProp = require('../isCustomProp');\n\nvar _isCustomProp2 = _interopRequireDefault(_isCustomProp);\n\nvar _canExplode = require('../canExplode');\n\nvar _canExplode2 = _interopRequireDefault(_canExplode);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst properties = ['column-width', 'column-count'];\nconst auto = 'auto';\nconst inherit = 'inherit';\n/**\n * Normalize a columns shorthand definition. Both of the longhand\n * properties' initial values are 'auto', and as per the spec,\n * omitted values are set to their initial values. Thus, we can\n * remove any 'auto' definition when there are two values.\n *\n * Specification link: https://www.w3.org/TR/css3-multicol/\n */\n\nfunction normalize(values) {\n  if (values[0].toLowerCase() === auto) {\n    return values[1];\n  }\n\n  if (values[1].toLowerCase() === auto) {\n    return values[0];\n  }\n\n  if (values[0].toLowerCase() === inherit && values[1].toLowerCase() === inherit) {\n    return inherit;\n  }\n\n  return values.join(' ');\n}\n\nfunction explode(rule) {\n  rule.walkDecls(/^columns$/i, decl => {\n    if (!(0, _canExplode2.default)(decl)) {\n      return;\n    }\n\n    if ((0, _stylehacks.detect)(decl)) {\n      return;\n    }\n\n    let values = _postcss.list.space(decl.value);\n\n    if (values.length === 1) {\n      values.push(auto);\n    }\n\n    values.forEach((value, i) => {\n      let prop = properties[1];\n\n      if (value.toLowerCase() === auto) {\n        prop = properties[i];\n      } else if ((0, _postcssValueParser.unit)(value).unit) {\n        prop = properties[0];\n      }\n\n      (0, _insertCloned2.default)(decl.parent, decl, {\n        prop,\n        value\n      });\n    });\n    decl.remove();\n  });\n}\n\nfunction cleanup(rule) {\n  let decls = (0, _getDecls2.default)(rule, ['columns'].concat(properties));\n\n  while (decls.length) {\n    const lastNode = decls[decls.length - 1]; // remove properties of lower precedence\n\n    const lesser = decls.filter(node => !(0, _stylehacks.detect)(lastNode) && !(0, _stylehacks.detect)(node) && node !== lastNode && node.important === lastNode.important && lastNode.prop === 'columns' && node.prop !== lastNode.prop);\n    lesser.forEach(_remove2.default);\n    decls = decls.filter(node => !~lesser.indexOf(node)); // get duplicate properties\n\n    let duplicates = decls.filter(node => !(0, _stylehacks.detect)(lastNode) && !(0, _stylehacks.detect)(node) && node !== lastNode && node.important === lastNode.important && node.prop === lastNode.prop && !(!(0, _isCustomProp2.default)(node) && (0, _isCustomProp2.default)(lastNode)));\n    duplicates.forEach(_remove2.default);\n    decls = decls.filter(node => node !== lastNode && !~duplicates.indexOf(node));\n  }\n}\n\nfunction merge(rule) {\n  (0, _mergeRules2.default)(rule, properties, (rules, lastNode) => {\n    if ((0, _canMerge2.default)(rules) && !rules.some(_stylehacks.detect)) {\n      (0, _insertCloned2.default)(lastNode.parent, lastNode, {\n        prop: 'columns',\n        value: normalize(rules.map(_getValue2.default))\n      });\n      rules.forEach(_remove2.default);\n      return true;\n    }\n  });\n  cleanup(rule);\n}\n\nexports.default = {\n  explode,\n  merge\n};\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-merge-longhand/dist/lib/decl/columns.js"],"names":["Object","defineProperty","exports","value","_postcss","require","_postcssValueParser","_stylehacks","_canMerge","_canMerge2","_interopRequireDefault","_getDecls","_getDecls2","_getValue","_getValue2","_mergeRules","_mergeRules2","_insertCloned","_insertCloned2","_remove","_remove2","_isCustomProp","_isCustomProp2","_canExplode","_canExplode2","obj","__esModule","default","properties","auto","inherit","normalize","values","toLowerCase","join","explode","rule","walkDecls","decl","detect","list","space","length","push","forEach","i","prop","unit","parent","remove","cleanup","decls","concat","lastNode","lesser","filter","node","important","indexOf","duplicates","merge","rules","some","map","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require('postcss');\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _stylehacks = require('stylehacks');\n\nvar _canMerge = require('../canMerge');\n\nvar _canMerge2 = _interopRequireDefault(_canMerge);\n\nvar _getDecls = require('../getDecls');\n\nvar _getDecls2 = _interopRequireDefault(_getDecls);\n\nvar _getValue = require('../getValue');\n\nvar _getValue2 = _interopRequireDefault(_getValue);\n\nvar _mergeRules = require('../mergeRules');\n\nvar _mergeRules2 = _interopRequireDefault(_mergeRules);\n\nvar _insertCloned = require('../insertCloned');\n\nvar _insertCloned2 = _interopRequireDefault(_insertCloned);\n\nvar _remove = require('../remove');\n\nvar _remove2 = _interopRequireDefault(_remove);\n\nvar _isCustomProp = require('../isCustomProp');\n\nvar _isCustomProp2 = _interopRequireDefault(_isCustomProp);\n\nvar _canExplode = require('../canExplode');\n\nvar _canExplode2 = _interopRequireDefault(_canExplode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst properties = ['column-width', 'column-count'];\nconst auto = 'auto';\nconst inherit = 'inherit';\n\n/**\n * Normalize a columns shorthand definition. Both of the longhand\n * properties' initial values are 'auto', and as per the spec,\n * omitted values are set to their initial values. Thus, we can\n * remove any 'auto' definition when there are two values.\n *\n * Specification link: https://www.w3.org/TR/css3-multicol/\n */\n\nfunction normalize(values) {\n    if (values[0].toLowerCase() === auto) {\n        return values[1];\n    }\n\n    if (values[1].toLowerCase() === auto) {\n        return values[0];\n    }\n\n    if (values[0].toLowerCase() === inherit && values[1].toLowerCase() === inherit) {\n        return inherit;\n    }\n\n    return values.join(' ');\n}\n\nfunction explode(rule) {\n    rule.walkDecls(/^columns$/i, decl => {\n        if (!(0, _canExplode2.default)(decl)) {\n            return;\n        }\n\n        if ((0, _stylehacks.detect)(decl)) {\n            return;\n        }\n\n        let values = _postcss.list.space(decl.value);\n\n        if (values.length === 1) {\n            values.push(auto);\n        }\n\n        values.forEach((value, i) => {\n            let prop = properties[1];\n\n            if (value.toLowerCase() === auto) {\n                prop = properties[i];\n            } else if ((0, _postcssValueParser.unit)(value).unit) {\n                prop = properties[0];\n            }\n\n            (0, _insertCloned2.default)(decl.parent, decl, {\n                prop,\n                value\n            });\n        });\n\n        decl.remove();\n    });\n}\n\nfunction cleanup(rule) {\n    let decls = (0, _getDecls2.default)(rule, ['columns'].concat(properties));\n\n    while (decls.length) {\n        const lastNode = decls[decls.length - 1];\n\n        // remove properties of lower precedence\n        const lesser = decls.filter(node => !(0, _stylehacks.detect)(lastNode) && !(0, _stylehacks.detect)(node) && node !== lastNode && node.important === lastNode.important && lastNode.prop === 'columns' && node.prop !== lastNode.prop);\n\n        lesser.forEach(_remove2.default);\n        decls = decls.filter(node => !~lesser.indexOf(node));\n\n        // get duplicate properties\n        let duplicates = decls.filter(node => !(0, _stylehacks.detect)(lastNode) && !(0, _stylehacks.detect)(node) && node !== lastNode && node.important === lastNode.important && node.prop === lastNode.prop && !(!(0, _isCustomProp2.default)(node) && (0, _isCustomProp2.default)(lastNode)));\n\n        duplicates.forEach(_remove2.default);\n        decls = decls.filter(node => node !== lastNode && !~duplicates.indexOf(node));\n    }\n}\n\nfunction merge(rule) {\n    (0, _mergeRules2.default)(rule, properties, (rules, lastNode) => {\n        if ((0, _canMerge2.default)(rules) && !rules.some(_stylehacks.detect)) {\n            (0, _insertCloned2.default)(lastNode.parent, lastNode, {\n                prop: 'columns',\n                value: normalize(rules.map(_getValue2.default))\n            });\n\n            rules.forEach(_remove2.default);\n\n            return true;\n        }\n    });\n\n    cleanup(rule);\n}\n\nexports.default = {\n    explode,\n    merge\n};\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}