{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = elementType;\n\nfunction resolveMemberExpressions() {\n  var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var property = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (object.type === 'JSXMemberExpression') {\n    return resolveMemberExpressions(object.object, object.property) + '.' + property.name;\n  }\n\n  return object.name + '.' + property.name;\n}\n/**\n * Returns the tagName associated with a JSXElement.\n */\n\n\nfunction elementType() {\n  var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var name = node.name;\n\n  if (!name) {\n    throw new Error('The argument provided is not a JSXElement node.');\n  }\n\n  if (name.type === 'JSXMemberExpression') {\n    var _name$object = name.object,\n        object = _name$object === undefined ? {} : _name$object,\n        _name$property = name.property,\n        property = _name$property === undefined ? {} : _name$property;\n    return resolveMemberExpressions(object, property);\n  }\n\n  if (name.type === 'JSXNamespacedName') {\n    return name.namespace.name + ':' + name.name.name;\n  }\n\n  return node.name.name;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/lib/elementType.js"],"names":["Object","defineProperty","exports","value","default","elementType","resolveMemberExpressions","object","arguments","length","undefined","property","type","name","node","Error","_name$object","_name$property","namespace"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,WAAlB;;AACA,SAASC,wBAAT,GAAoC;AAClC,MAAIC,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAjF;AACA,MAAIG,QAAQ,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAnF;;AAEA,MAAID,MAAM,CAACK,IAAP,KAAgB,qBAApB,EAA2C;AACzC,WAAON,wBAAwB,CAACC,MAAM,CAACA,MAAR,EAAgBA,MAAM,CAACI,QAAvB,CAAxB,GAA2D,GAA3D,GAAiEA,QAAQ,CAACE,IAAjF;AACD;;AAED,SAAON,MAAM,CAACM,IAAP,GAAc,GAAd,GAAoBF,QAAQ,CAACE,IAApC;AACD;AAED;;;;;AAGA,SAASR,WAAT,GAAuB;AACrB,MAAIS,IAAI,GAAGN,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;AACA,MAAIK,IAAI,GAAGC,IAAI,CAACD,IAAhB;;AAGA,MAAI,CAACA,IAAL,EAAW;AACT,UAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,MAAIF,IAAI,CAACD,IAAL,KAAc,qBAAlB,EAAyC;AACvC,QAAII,YAAY,GAAGH,IAAI,CAACN,MAAxB;AAAA,QACIA,MAAM,GAAGS,YAAY,KAAKN,SAAjB,GAA6B,EAA7B,GAAkCM,YAD/C;AAAA,QAEIC,cAAc,GAAGJ,IAAI,CAACF,QAF1B;AAAA,QAGIA,QAAQ,GAAGM,cAAc,KAAKP,SAAnB,GAA+B,EAA/B,GAAoCO,cAHnD;AAKA,WAAOX,wBAAwB,CAACC,MAAD,EAASI,QAAT,CAA/B;AACD;;AAED,MAAIE,IAAI,CAACD,IAAL,KAAc,mBAAlB,EAAuC;AACrC,WAAOC,IAAI,CAACK,SAAL,CAAeL,IAAf,GAAsB,GAAtB,GAA4BA,IAAI,CAACA,IAAL,CAAUA,IAA7C;AACD;;AAED,SAAOC,IAAI,CAACD,IAAL,CAAUA,IAAjB;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = elementType;\nfunction resolveMemberExpressions() {\n  var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var property = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (object.type === 'JSXMemberExpression') {\n    return resolveMemberExpressions(object.object, object.property) + '.' + property.name;\n  }\n\n  return object.name + '.' + property.name;\n}\n\n/**\n * Returns the tagName associated with a JSXElement.\n */\nfunction elementType() {\n  var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var name = node.name;\n\n\n  if (!name) {\n    throw new Error('The argument provided is not a JSXElement node.');\n  }\n\n  if (name.type === 'JSXMemberExpression') {\n    var _name$object = name.object,\n        object = _name$object === undefined ? {} : _name$object,\n        _name$property = name.property,\n        property = _name$property === undefined ? {} : _name$property;\n\n    return resolveMemberExpressions(object, property);\n  }\n\n  if (name.type === 'JSXNamespacedName') {\n    return name.namespace.name + ':' + name.name.name;\n  }\n\n  return node.name.name;\n}"]},"metadata":{},"sourceType":"script"}