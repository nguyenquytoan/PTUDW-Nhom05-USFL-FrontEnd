{"ast":null,"code":"/**\n * @fileoverview Enforces empty lines around comments.\n * @author Jamund Ferguson\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst lodash = require(\"lodash\"),\n      astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Return an array with with any line numbers that are empty.\n * @param {Array} lines An array of each line of the file.\n * @returns {Array} An array of line numbers.\n */\n\n\nfunction getEmptyLineNums(lines) {\n  const emptyLines = lines.map((line, i) => ({\n    code: line.trim(),\n    num: i + 1\n  })).filter(line => !line.code).map(line => line.num);\n  return emptyLines;\n}\n/**\n * Return an array with with any line numbers that contain comments.\n * @param {Array} comments An array of comment tokens.\n * @returns {Array} An array of line numbers.\n */\n\n\nfunction getCommentLineNums(comments) {\n  const lines = [];\n  comments.forEach(token => {\n    const start = token.loc.start.line;\n    const end = token.loc.end.line;\n    lines.push(start, end);\n  });\n  return lines;\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require empty lines around comments\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/lines-around-comment\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        beforeBlockComment: {\n          type: \"boolean\",\n          default: true\n        },\n        afterBlockComment: {\n          type: \"boolean\",\n          default: false\n        },\n        beforeLineComment: {\n          type: \"boolean\",\n          default: false\n        },\n        afterLineComment: {\n          type: \"boolean\",\n          default: false\n        },\n        allowBlockStart: {\n          type: \"boolean\",\n          default: false\n        },\n        allowBlockEnd: {\n          type: \"boolean\",\n          default: false\n        },\n        allowClassStart: {\n          type: \"boolean\"\n        },\n        allowClassEnd: {\n          type: \"boolean\"\n        },\n        allowObjectStart: {\n          type: \"boolean\"\n        },\n        allowObjectEnd: {\n          type: \"boolean\"\n        },\n        allowArrayStart: {\n          type: \"boolean\"\n        },\n        allowArrayEnd: {\n          type: \"boolean\"\n        },\n        ignorePattern: {\n          type: \"string\"\n        },\n        applyDefaultIgnorePatterns: {\n          type: \"boolean\"\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      after: \"Expected line after comment.\",\n      before: \"Expected line before comment.\"\n    }\n  },\n\n  create(context) {\n    const options = Object.assign({}, context.options[0]);\n    const ignorePattern = options.ignorePattern;\n    const defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;\n    const customIgnoreRegExp = new RegExp(ignorePattern, \"u\");\n    const applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns !== false;\n    options.beforeBlockComment = typeof options.beforeBlockComment !== \"undefined\" ? options.beforeBlockComment : true;\n    const sourceCode = context.getSourceCode();\n    const lines = sourceCode.lines,\n          numLines = lines.length + 1,\n          comments = sourceCode.getAllComments(),\n          commentLines = getCommentLineNums(comments),\n          emptyLines = getEmptyLineNums(lines),\n          commentAndEmptyLines = commentLines.concat(emptyLines);\n    /**\n     * Returns whether or not comments are on lines starting with or ending with code\n     * @param {token} token The comment token to check.\n     * @returns {boolean} True if the comment is not alone.\n     */\n\n    function codeAroundComment(token) {\n      let currentToken = token;\n\n      do {\n        currentToken = sourceCode.getTokenBefore(currentToken, {\n          includeComments: true\n        });\n      } while (currentToken && astUtils.isCommentToken(currentToken));\n\n      if (currentToken && astUtils.isTokenOnSameLine(currentToken, token)) {\n        return true;\n      }\n\n      currentToken = token;\n\n      do {\n        currentToken = sourceCode.getTokenAfter(currentToken, {\n          includeComments: true\n        });\n      } while (currentToken && astUtils.isCommentToken(currentToken));\n\n      if (currentToken && astUtils.isTokenOnSameLine(token, currentToken)) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Returns whether or not comments are inside a node type or not.\n     * @param {ASTNode} parent The Comment parent node.\n     * @param {string} nodeType The parent type to check against.\n     * @returns {boolean} True if the comment is inside nodeType.\n     */\n\n\n    function isParentNodeType(parent, nodeType) {\n      return parent.type === nodeType || parent.body && parent.body.type === nodeType || parent.consequent && parent.consequent.type === nodeType;\n    }\n    /**\n     * Returns the parent node that contains the given token.\n     * @param {token} token The token to check.\n     * @returns {ASTNode} The parent node that contains the given token.\n     */\n\n\n    function getParentNodeOfToken(token) {\n      return sourceCode.getNodeByRangeIndex(token.range[0]);\n    }\n    /**\n     * Returns whether or not comments are at the parent start or not.\n     * @param {token} token The Comment token.\n     * @param {string} nodeType The parent type to check against.\n     * @returns {boolean} True if the comment is at parent start.\n     */\n\n\n    function isCommentAtParentStart(token, nodeType) {\n      const parent = getParentNodeOfToken(token);\n      return parent && isParentNodeType(parent, nodeType) && token.loc.start.line - parent.loc.start.line === 1;\n    }\n    /**\n     * Returns whether or not comments are at the parent end or not.\n     * @param {token} token The Comment token.\n     * @param {string} nodeType The parent type to check against.\n     * @returns {boolean} True if the comment is at parent end.\n     */\n\n\n    function isCommentAtParentEnd(token, nodeType) {\n      const parent = getParentNodeOfToken(token);\n      return parent && isParentNodeType(parent, nodeType) && parent.loc.end.line - token.loc.end.line === 1;\n    }\n    /**\n     * Returns whether or not comments are at the block start or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at block start.\n     */\n\n\n    function isCommentAtBlockStart(token) {\n      return isCommentAtParentStart(token, \"ClassBody\") || isCommentAtParentStart(token, \"BlockStatement\") || isCommentAtParentStart(token, \"SwitchCase\");\n    }\n    /**\n     * Returns whether or not comments are at the block end or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at block end.\n     */\n\n\n    function isCommentAtBlockEnd(token) {\n      return isCommentAtParentEnd(token, \"ClassBody\") || isCommentAtParentEnd(token, \"BlockStatement\") || isCommentAtParentEnd(token, \"SwitchCase\") || isCommentAtParentEnd(token, \"SwitchStatement\");\n    }\n    /**\n     * Returns whether or not comments are at the class start or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at class start.\n     */\n\n\n    function isCommentAtClassStart(token) {\n      return isCommentAtParentStart(token, \"ClassBody\");\n    }\n    /**\n     * Returns whether or not comments are at the class end or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at class end.\n     */\n\n\n    function isCommentAtClassEnd(token) {\n      return isCommentAtParentEnd(token, \"ClassBody\");\n    }\n    /**\n     * Returns whether or not comments are at the object start or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at object start.\n     */\n\n\n    function isCommentAtObjectStart(token) {\n      return isCommentAtParentStart(token, \"ObjectExpression\") || isCommentAtParentStart(token, \"ObjectPattern\");\n    }\n    /**\n     * Returns whether or not comments are at the object end or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at object end.\n     */\n\n\n    function isCommentAtObjectEnd(token) {\n      return isCommentAtParentEnd(token, \"ObjectExpression\") || isCommentAtParentEnd(token, \"ObjectPattern\");\n    }\n    /**\n     * Returns whether or not comments are at the array start or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at array start.\n     */\n\n\n    function isCommentAtArrayStart(token) {\n      return isCommentAtParentStart(token, \"ArrayExpression\") || isCommentAtParentStart(token, \"ArrayPattern\");\n    }\n    /**\n     * Returns whether or not comments are at the array end or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at array end.\n     */\n\n\n    function isCommentAtArrayEnd(token) {\n      return isCommentAtParentEnd(token, \"ArrayExpression\") || isCommentAtParentEnd(token, \"ArrayPattern\");\n    }\n    /**\n     * Checks if a comment token has lines around it (ignores inline comments)\n     * @param {token} token The Comment token.\n     * @param {Object} opts Options to determine the newline.\n     * @param {boolean} opts.after Should have a newline after this line.\n     * @param {boolean} opts.before Should have a newline before this line.\n     * @returns {void}\n     */\n\n\n    function checkForEmptyLine(token, opts) {\n      if (applyDefaultIgnorePatterns && defaultIgnoreRegExp.test(token.value)) {\n        return;\n      }\n\n      if (ignorePattern && customIgnoreRegExp.test(token.value)) {\n        return;\n      }\n\n      let after = opts.after,\n          before = opts.before;\n      const prevLineNum = token.loc.start.line - 1,\n            nextLineNum = token.loc.end.line + 1,\n            commentIsNotAlone = codeAroundComment(token);\n      const blockStartAllowed = options.allowBlockStart && isCommentAtBlockStart(token) && !(options.allowClassStart === false && isCommentAtClassStart(token)),\n            blockEndAllowed = options.allowBlockEnd && isCommentAtBlockEnd(token) && !(options.allowClassEnd === false && isCommentAtClassEnd(token)),\n            classStartAllowed = options.allowClassStart && isCommentAtClassStart(token),\n            classEndAllowed = options.allowClassEnd && isCommentAtClassEnd(token),\n            objectStartAllowed = options.allowObjectStart && isCommentAtObjectStart(token),\n            objectEndAllowed = options.allowObjectEnd && isCommentAtObjectEnd(token),\n            arrayStartAllowed = options.allowArrayStart && isCommentAtArrayStart(token),\n            arrayEndAllowed = options.allowArrayEnd && isCommentAtArrayEnd(token);\n      const exceptionStartAllowed = blockStartAllowed || classStartAllowed || objectStartAllowed || arrayStartAllowed;\n      const exceptionEndAllowed = blockEndAllowed || classEndAllowed || objectEndAllowed || arrayEndAllowed; // ignore top of the file and bottom of the file\n\n      if (prevLineNum < 1) {\n        before = false;\n      }\n\n      if (nextLineNum >= numLines) {\n        after = false;\n      } // we ignore all inline comments\n\n\n      if (commentIsNotAlone) {\n        return;\n      }\n\n      const previousTokenOrComment = sourceCode.getTokenBefore(token, {\n        includeComments: true\n      });\n      const nextTokenOrComment = sourceCode.getTokenAfter(token, {\n        includeComments: true\n      }); // check for newline before\n\n      if (!exceptionStartAllowed && before && !lodash.includes(commentAndEmptyLines, prevLineNum) && !(astUtils.isCommentToken(previousTokenOrComment) && astUtils.isTokenOnSameLine(previousTokenOrComment, token))) {\n        const lineStart = token.range[0] - token.loc.start.column;\n        const range = [lineStart, lineStart];\n        context.report({\n          node: token,\n          messageId: \"before\",\n\n          fix(fixer) {\n            return fixer.insertTextBeforeRange(range, \"\\n\");\n          }\n\n        });\n      } // check for newline after\n\n\n      if (!exceptionEndAllowed && after && !lodash.includes(commentAndEmptyLines, nextLineNum) && !(astUtils.isCommentToken(nextTokenOrComment) && astUtils.isTokenOnSameLine(token, nextTokenOrComment))) {\n        context.report({\n          node: token,\n          messageId: \"after\",\n\n          fix(fixer) {\n            return fixer.insertTextAfter(token, \"\\n\");\n          }\n\n        });\n      }\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      Program() {\n        comments.forEach(token => {\n          if (token.type === \"Line\") {\n            if (options.beforeLineComment || options.afterLineComment) {\n              checkForEmptyLine(token, {\n                after: options.afterLineComment,\n                before: options.beforeLineComment\n              });\n            }\n          } else if (token.type === \"Block\") {\n            if (options.beforeBlockComment || options.afterBlockComment) {\n              checkForEmptyLine(token, {\n                after: options.afterBlockComment,\n                before: options.beforeBlockComment\n              });\n            }\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/lines-around-comment.js"],"names":["lodash","require","astUtils","getEmptyLineNums","lines","emptyLines","map","line","i","code","trim","num","filter","getCommentLineNums","comments","forEach","token","start","loc","end","push","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","properties","beforeBlockComment","default","afterBlockComment","beforeLineComment","afterLineComment","allowBlockStart","allowBlockEnd","allowClassStart","allowClassEnd","allowObjectStart","allowObjectEnd","allowArrayStart","allowArrayEnd","ignorePattern","applyDefaultIgnorePatterns","additionalProperties","messages","after","before","create","context","options","Object","assign","defaultIgnoreRegExp","COMMENTS_IGNORE_PATTERN","customIgnoreRegExp","RegExp","sourceCode","getSourceCode","numLines","length","getAllComments","commentLines","commentAndEmptyLines","concat","codeAroundComment","currentToken","getTokenBefore","includeComments","isCommentToken","isTokenOnSameLine","getTokenAfter","isParentNodeType","parent","nodeType","body","consequent","getParentNodeOfToken","getNodeByRangeIndex","range","isCommentAtParentStart","isCommentAtParentEnd","isCommentAtBlockStart","isCommentAtBlockEnd","isCommentAtClassStart","isCommentAtClassEnd","isCommentAtObjectStart","isCommentAtObjectEnd","isCommentAtArrayStart","isCommentAtArrayEnd","checkForEmptyLine","opts","test","value","prevLineNum","nextLineNum","commentIsNotAlone","blockStartAllowed","blockEndAllowed","classStartAllowed","classEndAllowed","objectStartAllowed","objectEndAllowed","arrayStartAllowed","arrayEndAllowed","exceptionStartAllowed","exceptionEndAllowed","previousTokenOrComment","nextTokenOrComment","includes","lineStart","column","report","node","messageId","fix","fixer","insertTextBeforeRange","insertTextAfter","Program"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Enforces empty lines around comments.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst lodash = require(\"lodash\"),\n    astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Return an array with with any line numbers that are empty.\n * @param {Array} lines An array of each line of the file.\n * @returns {Array} An array of line numbers.\n */\nfunction getEmptyLineNums(lines) {\n    const emptyLines = lines.map((line, i) => ({\n        code: line.trim(),\n        num: i + 1\n    })).filter(line => !line.code).map(line => line.num);\n\n    return emptyLines;\n}\n\n/**\n * Return an array with with any line numbers that contain comments.\n * @param {Array} comments An array of comment tokens.\n * @returns {Array} An array of line numbers.\n */\nfunction getCommentLineNums(comments) {\n    const lines = [];\n\n    comments.forEach(token => {\n        const start = token.loc.start.line;\n        const end = token.loc.end.line;\n\n        lines.push(start, end);\n    });\n    return lines;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require empty lines around comments\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/lines-around-comment\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    beforeBlockComment: {\n                        type: \"boolean\",\n                        default: true\n                    },\n                    afterBlockComment: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    beforeLineComment: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    afterLineComment: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowBlockStart: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowBlockEnd: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowClassStart: {\n                        type: \"boolean\"\n                    },\n                    allowClassEnd: {\n                        type: \"boolean\"\n                    },\n                    allowObjectStart: {\n                        type: \"boolean\"\n                    },\n                    allowObjectEnd: {\n                        type: \"boolean\"\n                    },\n                    allowArrayStart: {\n                        type: \"boolean\"\n                    },\n                    allowArrayEnd: {\n                        type: \"boolean\"\n                    },\n                    ignorePattern: {\n                        type: \"string\"\n                    },\n                    applyDefaultIgnorePatterns: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            after: \"Expected line after comment.\",\n            before: \"Expected line before comment.\"\n        }\n    },\n\n    create(context) {\n\n        const options = Object.assign({}, context.options[0]);\n        const ignorePattern = options.ignorePattern;\n        const defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;\n        const customIgnoreRegExp = new RegExp(ignorePattern, \"u\");\n        const applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns !== false;\n\n        options.beforeBlockComment = typeof options.beforeBlockComment !== \"undefined\" ? options.beforeBlockComment : true;\n\n        const sourceCode = context.getSourceCode();\n\n        const lines = sourceCode.lines,\n            numLines = lines.length + 1,\n            comments = sourceCode.getAllComments(),\n            commentLines = getCommentLineNums(comments),\n            emptyLines = getEmptyLineNums(lines),\n            commentAndEmptyLines = commentLines.concat(emptyLines);\n\n        /**\n         * Returns whether or not comments are on lines starting with or ending with code\n         * @param {token} token The comment token to check.\n         * @returns {boolean} True if the comment is not alone.\n         */\n        function codeAroundComment(token) {\n            let currentToken = token;\n\n            do {\n                currentToken = sourceCode.getTokenBefore(currentToken, { includeComments: true });\n            } while (currentToken && astUtils.isCommentToken(currentToken));\n\n            if (currentToken && astUtils.isTokenOnSameLine(currentToken, token)) {\n                return true;\n            }\n\n            currentToken = token;\n            do {\n                currentToken = sourceCode.getTokenAfter(currentToken, { includeComments: true });\n            } while (currentToken && astUtils.isCommentToken(currentToken));\n\n            if (currentToken && astUtils.isTokenOnSameLine(token, currentToken)) {\n                return true;\n            }\n\n            return false;\n        }\n\n        /**\n         * Returns whether or not comments are inside a node type or not.\n         * @param {ASTNode} parent The Comment parent node.\n         * @param {string} nodeType The parent type to check against.\n         * @returns {boolean} True if the comment is inside nodeType.\n         */\n        function isParentNodeType(parent, nodeType) {\n            return parent.type === nodeType ||\n                (parent.body && parent.body.type === nodeType) ||\n                (parent.consequent && parent.consequent.type === nodeType);\n        }\n\n        /**\n         * Returns the parent node that contains the given token.\n         * @param {token} token The token to check.\n         * @returns {ASTNode} The parent node that contains the given token.\n         */\n        function getParentNodeOfToken(token) {\n            return sourceCode.getNodeByRangeIndex(token.range[0]);\n        }\n\n        /**\n         * Returns whether or not comments are at the parent start or not.\n         * @param {token} token The Comment token.\n         * @param {string} nodeType The parent type to check against.\n         * @returns {boolean} True if the comment is at parent start.\n         */\n        function isCommentAtParentStart(token, nodeType) {\n            const parent = getParentNodeOfToken(token);\n\n            return parent && isParentNodeType(parent, nodeType) &&\n                    token.loc.start.line - parent.loc.start.line === 1;\n        }\n\n        /**\n         * Returns whether or not comments are at the parent end or not.\n         * @param {token} token The Comment token.\n         * @param {string} nodeType The parent type to check against.\n         * @returns {boolean} True if the comment is at parent end.\n         */\n        function isCommentAtParentEnd(token, nodeType) {\n            const parent = getParentNodeOfToken(token);\n\n            return parent && isParentNodeType(parent, nodeType) &&\n                    parent.loc.end.line - token.loc.end.line === 1;\n        }\n\n        /**\n         * Returns whether or not comments are at the block start or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at block start.\n         */\n        function isCommentAtBlockStart(token) {\n            return isCommentAtParentStart(token, \"ClassBody\") || isCommentAtParentStart(token, \"BlockStatement\") || isCommentAtParentStart(token, \"SwitchCase\");\n        }\n\n        /**\n         * Returns whether or not comments are at the block end or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at block end.\n         */\n        function isCommentAtBlockEnd(token) {\n            return isCommentAtParentEnd(token, \"ClassBody\") || isCommentAtParentEnd(token, \"BlockStatement\") || isCommentAtParentEnd(token, \"SwitchCase\") || isCommentAtParentEnd(token, \"SwitchStatement\");\n        }\n\n        /**\n         * Returns whether or not comments are at the class start or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at class start.\n         */\n        function isCommentAtClassStart(token) {\n            return isCommentAtParentStart(token, \"ClassBody\");\n        }\n\n        /**\n         * Returns whether or not comments are at the class end or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at class end.\n         */\n        function isCommentAtClassEnd(token) {\n            return isCommentAtParentEnd(token, \"ClassBody\");\n        }\n\n        /**\n         * Returns whether or not comments are at the object start or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at object start.\n         */\n        function isCommentAtObjectStart(token) {\n            return isCommentAtParentStart(token, \"ObjectExpression\") || isCommentAtParentStart(token, \"ObjectPattern\");\n        }\n\n        /**\n         * Returns whether or not comments are at the object end or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at object end.\n         */\n        function isCommentAtObjectEnd(token) {\n            return isCommentAtParentEnd(token, \"ObjectExpression\") || isCommentAtParentEnd(token, \"ObjectPattern\");\n        }\n\n        /**\n         * Returns whether or not comments are at the array start or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at array start.\n         */\n        function isCommentAtArrayStart(token) {\n            return isCommentAtParentStart(token, \"ArrayExpression\") || isCommentAtParentStart(token, \"ArrayPattern\");\n        }\n\n        /**\n         * Returns whether or not comments are at the array end or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at array end.\n         */\n        function isCommentAtArrayEnd(token) {\n            return isCommentAtParentEnd(token, \"ArrayExpression\") || isCommentAtParentEnd(token, \"ArrayPattern\");\n        }\n\n        /**\n         * Checks if a comment token has lines around it (ignores inline comments)\n         * @param {token} token The Comment token.\n         * @param {Object} opts Options to determine the newline.\n         * @param {boolean} opts.after Should have a newline after this line.\n         * @param {boolean} opts.before Should have a newline before this line.\n         * @returns {void}\n         */\n        function checkForEmptyLine(token, opts) {\n            if (applyDefaultIgnorePatterns && defaultIgnoreRegExp.test(token.value)) {\n                return;\n            }\n\n            if (ignorePattern && customIgnoreRegExp.test(token.value)) {\n                return;\n            }\n\n            let after = opts.after,\n                before = opts.before;\n\n            const prevLineNum = token.loc.start.line - 1,\n                nextLineNum = token.loc.end.line + 1,\n                commentIsNotAlone = codeAroundComment(token);\n\n            const blockStartAllowed = options.allowBlockStart &&\n                    isCommentAtBlockStart(token) &&\n                    !(options.allowClassStart === false &&\n                    isCommentAtClassStart(token)),\n                blockEndAllowed = options.allowBlockEnd && isCommentAtBlockEnd(token) && !(options.allowClassEnd === false && isCommentAtClassEnd(token)),\n                classStartAllowed = options.allowClassStart && isCommentAtClassStart(token),\n                classEndAllowed = options.allowClassEnd && isCommentAtClassEnd(token),\n                objectStartAllowed = options.allowObjectStart && isCommentAtObjectStart(token),\n                objectEndAllowed = options.allowObjectEnd && isCommentAtObjectEnd(token),\n                arrayStartAllowed = options.allowArrayStart && isCommentAtArrayStart(token),\n                arrayEndAllowed = options.allowArrayEnd && isCommentAtArrayEnd(token);\n\n            const exceptionStartAllowed = blockStartAllowed || classStartAllowed || objectStartAllowed || arrayStartAllowed;\n            const exceptionEndAllowed = blockEndAllowed || classEndAllowed || objectEndAllowed || arrayEndAllowed;\n\n            // ignore top of the file and bottom of the file\n            if (prevLineNum < 1) {\n                before = false;\n            }\n            if (nextLineNum >= numLines) {\n                after = false;\n            }\n\n            // we ignore all inline comments\n            if (commentIsNotAlone) {\n                return;\n            }\n\n            const previousTokenOrComment = sourceCode.getTokenBefore(token, { includeComments: true });\n            const nextTokenOrComment = sourceCode.getTokenAfter(token, { includeComments: true });\n\n            // check for newline before\n            if (!exceptionStartAllowed && before && !lodash.includes(commentAndEmptyLines, prevLineNum) &&\n                    !(astUtils.isCommentToken(previousTokenOrComment) && astUtils.isTokenOnSameLine(previousTokenOrComment, token))) {\n                const lineStart = token.range[0] - token.loc.start.column;\n                const range = [lineStart, lineStart];\n\n                context.report({\n                    node: token,\n                    messageId: \"before\",\n                    fix(fixer) {\n                        return fixer.insertTextBeforeRange(range, \"\\n\");\n                    }\n                });\n            }\n\n            // check for newline after\n            if (!exceptionEndAllowed && after && !lodash.includes(commentAndEmptyLines, nextLineNum) &&\n                    !(astUtils.isCommentToken(nextTokenOrComment) && astUtils.isTokenOnSameLine(token, nextTokenOrComment))) {\n                context.report({\n                    node: token,\n                    messageId: \"after\",\n                    fix(fixer) {\n                        return fixer.insertTextAfter(token, \"\\n\");\n                    }\n                });\n            }\n\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            Program() {\n                comments.forEach(token => {\n                    if (token.type === \"Line\") {\n                        if (options.beforeLineComment || options.afterLineComment) {\n                            checkForEmptyLine(token, {\n                                after: options.afterLineComment,\n                                before: options.beforeLineComment\n                            });\n                        }\n                    } else if (token.type === \"Block\") {\n                        if (options.beforeBlockComment || options.afterBlockComment) {\n                            checkForEmptyLine(token, {\n                                after: options.afterBlockComment,\n                                before: options.beforeBlockComment\n                            });\n                        }\n                    }\n                });\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}