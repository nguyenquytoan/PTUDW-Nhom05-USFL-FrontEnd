{"ast":null,"code":"// @remove-file-on-eject\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst chalk = require('react-dev-utils/chalk');\n\nconst fs = require('fs');\n\nconst semver = require('semver');\n\nconst path = require('path'); // We assume that having wrong versions of these\n// in the tree will likely break your setup.\n// This is a relatively low-effort way to find common issues.\n\n\nfunction verifyPackageTree() {\n  const depsToCheck = [// These are packages most likely to break in practice.\n  // See https://github.com/facebook/create-react-app/issues/1795 for reasons why.\n  // I have not included Babel here because plugins typically don't import Babel (so it's not affected).\n  'babel-eslint', 'babel-jest', 'babel-loader', 'eslint', 'jest', 'webpack', 'webpack-dev-server']; // Inlined from semver-regex, MIT license.\n  // Don't want to make this a dependency after ejecting.\n\n  const getSemverRegex = () => /\\bv?(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)(?:-[\\da-z-]+(?:\\.[\\da-z-]+)*)?(?:\\+[\\da-z-]+(?:\\.[\\da-z-]+)*)?\\b/gi;\n\n  const ownPackageJson = require('../../package.json');\n\n  const expectedVersionsByDep = {}; // Gather wanted deps\n\n  depsToCheck.forEach(dep => {\n    const expectedVersion = ownPackageJson.dependencies[dep];\n\n    if (!expectedVersion) {\n      throw new Error('This dependency list is outdated, fix it.');\n    }\n\n    if (!getSemverRegex().test(expectedVersion)) {\n      throw new Error(`The ${dep} package should be pinned, instead got version ${expectedVersion}.`);\n    }\n\n    expectedVersionsByDep[dep] = expectedVersion;\n  }); // Verify we don't have other versions up the tree\n\n  let currentDir = __dirname; // eslint-disable-next-line no-constant-condition\n\n  while (true) {\n    const previousDir = currentDir;\n    currentDir = path.resolve(currentDir, '..');\n\n    if (currentDir === previousDir) {\n      // We've reached the root.\n      break;\n    }\n\n    const maybeNodeModules = path.resolve(currentDir, 'node_modules');\n\n    if (!fs.existsSync(maybeNodeModules)) {\n      continue;\n    }\n\n    depsToCheck.forEach(dep => {\n      const maybeDep = path.resolve(maybeNodeModules, dep);\n\n      if (!fs.existsSync(maybeDep)) {\n        return;\n      }\n\n      const maybeDepPackageJson = path.resolve(maybeDep, 'package.json');\n\n      if (!fs.existsSync(maybeDepPackageJson)) {\n        return;\n      }\n\n      const depPackageJson = JSON.parse(fs.readFileSync(maybeDepPackageJson, 'utf8'));\n      const expectedVersion = expectedVersionsByDep[dep];\n\n      if (!semver.satisfies(depPackageJson.version, expectedVersion)) {\n        console.error(chalk.red(`\\nThere might be a problem with the project dependency tree.\\n` + `It is likely ${chalk.bold('not')} a bug in Create React App, but something you need to fix locally.\\n\\n`) + `The ${chalk.bold(ownPackageJson.name)} package provided by Create React App requires a dependency:\\n\\n` + chalk.green(`  \"${chalk.bold(dep)}\": \"${chalk.bold(expectedVersion)}\"\\n\\n`) + `Don't try to install it manually: your package manager does it automatically.\\n` + `However, a different version of ${chalk.bold(dep)} was detected higher up in the tree:\\n\\n` + `  ${chalk.bold(chalk.red(maybeDep))} (version: ${chalk.bold(chalk.red(depPackageJson.version))}) \\n\\n` + `Manually installing incompatible versions is known to cause hard-to-debug issues.\\n\\n` + chalk.red(`If you would prefer to ignore this check, add ${chalk.bold('SKIP_PREFLIGHT_CHECK=true')} to an ${chalk.bold('.env')} file in your project.\\n` + `That will permanently disable this message but you might encounter other issues.\\n\\n`) + `To ${chalk.green('fix')} the dependency tree, try following the steps below in the exact order:\\n\\n` + `  ${chalk.cyan('1.')} Delete ${chalk.bold('package-lock.json')} (${chalk.underline('not')} ${chalk.bold('package.json')}!) and/or ${chalk.bold('yarn.lock')} in your project folder.\\n` + `  ${chalk.cyan('2.')} Delete ${chalk.bold('node_modules')} in your project folder.\\n` + `  ${chalk.cyan('3.')} Remove \"${chalk.bold(dep)}\" from ${chalk.bold('dependencies')} and/or ${chalk.bold('devDependencies')} in the ${chalk.bold('package.json')} file in your project folder.\\n` + `  ${chalk.cyan('4.')} Run ${chalk.bold('npm install')} or ${chalk.bold('yarn')}, depending on the package manager you use.\\n\\n` + `In most cases, this should be enough to fix the problem.\\n` + `If this has not helped, there are a few other things you can try:\\n\\n` + `  ${chalk.cyan('5.')} If you used ${chalk.bold('npm')}, install ${chalk.bold('yarn')} (http://yarnpkg.com/) and repeat the above steps with it instead.\\n` + `     This may help because npm has known issues with package hoisting which may get resolved in future versions.\\n\\n` + `  ${chalk.cyan('6.')} Check if ${chalk.bold(maybeDep)} is outside your project directory.\\n` + `     For example, you might have accidentally installed something in your home folder.\\n\\n` + `  ${chalk.cyan('7.')} Try running ${chalk.bold(`npm ls ${dep}`)} in your project folder.\\n` + `     This will tell you which ${chalk.underline('other')} package (apart from the expected ${chalk.bold(ownPackageJson.name)}) installed ${chalk.bold(dep)}.\\n\\n` + `If nothing else helps, add ${chalk.bold('SKIP_PREFLIGHT_CHECK=true')} to an ${chalk.bold('.env')} file in your project.\\n` + `That would permanently disable this preflight check in case you want to proceed anyway.\\n\\n` + chalk.cyan(`P.S. We know this message is long but please read the steps above :-) We hope you find them helpful!\\n`));\n        process.exit(1);\n      }\n    });\n  }\n}\n\nmodule.exports = verifyPackageTree;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-scripts/scripts/utils/verifyPackageTree.js"],"names":["chalk","require","fs","semver","path","verifyPackageTree","depsToCheck","getSemverRegex","ownPackageJson","expectedVersionsByDep","forEach","dep","expectedVersion","dependencies","Error","test","currentDir","__dirname","previousDir","resolve","maybeNodeModules","existsSync","maybeDep","maybeDepPackageJson","depPackageJson","JSON","parse","readFileSync","satisfies","version","console","error","red","bold","name","green","cyan","underline","process","exit","module","exports"],"mappings":"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","sourcesContent":["// @remove-file-on-eject\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst chalk = require('react-dev-utils/chalk');\nconst fs = require('fs');\nconst semver = require('semver');\nconst path = require('path');\n\n// We assume that having wrong versions of these\n// in the tree will likely break your setup.\n// This is a relatively low-effort way to find common issues.\nfunction verifyPackageTree() {\n  const depsToCheck = [\n    // These are packages most likely to break in practice.\n    // See https://github.com/facebook/create-react-app/issues/1795 for reasons why.\n    // I have not included Babel here because plugins typically don't import Babel (so it's not affected).\n    'babel-eslint',\n    'babel-jest',\n    'babel-loader',\n    'eslint',\n    'jest',\n    'webpack',\n    'webpack-dev-server',\n  ];\n  // Inlined from semver-regex, MIT license.\n  // Don't want to make this a dependency after ejecting.\n  const getSemverRegex = () =>\n    /\\bv?(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)(?:-[\\da-z-]+(?:\\.[\\da-z-]+)*)?(?:\\+[\\da-z-]+(?:\\.[\\da-z-]+)*)?\\b/gi;\n  const ownPackageJson = require('../../package.json');\n  const expectedVersionsByDep = {};\n  // Gather wanted deps\n  depsToCheck.forEach(dep => {\n    const expectedVersion = ownPackageJson.dependencies[dep];\n    if (!expectedVersion) {\n      throw new Error('This dependency list is outdated, fix it.');\n    }\n    if (!getSemverRegex().test(expectedVersion)) {\n      throw new Error(\n        `The ${dep} package should be pinned, instead got version ${expectedVersion}.`\n      );\n    }\n    expectedVersionsByDep[dep] = expectedVersion;\n  });\n  // Verify we don't have other versions up the tree\n  let currentDir = __dirname;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const previousDir = currentDir;\n    currentDir = path.resolve(currentDir, '..');\n    if (currentDir === previousDir) {\n      // We've reached the root.\n      break;\n    }\n    const maybeNodeModules = path.resolve(currentDir, 'node_modules');\n    if (!fs.existsSync(maybeNodeModules)) {\n      continue;\n    }\n    depsToCheck.forEach(dep => {\n      const maybeDep = path.resolve(maybeNodeModules, dep);\n      if (!fs.existsSync(maybeDep)) {\n        return;\n      }\n      const maybeDepPackageJson = path.resolve(maybeDep, 'package.json');\n      if (!fs.existsSync(maybeDepPackageJson)) {\n        return;\n      }\n      const depPackageJson = JSON.parse(\n        fs.readFileSync(maybeDepPackageJson, 'utf8')\n      );\n      const expectedVersion = expectedVersionsByDep[dep];\n      if (!semver.satisfies(depPackageJson.version, expectedVersion)) {\n        console.error(\n          chalk.red(\n            `\\nThere might be a problem with the project dependency tree.\\n` +\n              `It is likely ${chalk.bold(\n                'not'\n              )} a bug in Create React App, but something you need to fix locally.\\n\\n`\n          ) +\n            `The ${chalk.bold(\n              ownPackageJson.name\n            )} package provided by Create React App requires a dependency:\\n\\n` +\n            chalk.green(\n              `  \"${chalk.bold(dep)}\": \"${chalk.bold(expectedVersion)}\"\\n\\n`\n            ) +\n            `Don't try to install it manually: your package manager does it automatically.\\n` +\n            `However, a different version of ${chalk.bold(\n              dep\n            )} was detected higher up in the tree:\\n\\n` +\n            `  ${chalk.bold(chalk.red(maybeDep))} (version: ${chalk.bold(\n              chalk.red(depPackageJson.version)\n            )}) \\n\\n` +\n            `Manually installing incompatible versions is known to cause hard-to-debug issues.\\n\\n` +\n            chalk.red(\n              `If you would prefer to ignore this check, add ${chalk.bold(\n                'SKIP_PREFLIGHT_CHECK=true'\n              )} to an ${chalk.bold('.env')} file in your project.\\n` +\n                `That will permanently disable this message but you might encounter other issues.\\n\\n`\n            ) +\n            `To ${chalk.green(\n              'fix'\n            )} the dependency tree, try following the steps below in the exact order:\\n\\n` +\n            `  ${chalk.cyan('1.')} Delete ${chalk.bold(\n              'package-lock.json'\n            )} (${chalk.underline('not')} ${chalk.bold(\n              'package.json'\n            )}!) and/or ${chalk.bold('yarn.lock')} in your project folder.\\n` +\n            `  ${chalk.cyan('2.')} Delete ${chalk.bold(\n              'node_modules'\n            )} in your project folder.\\n` +\n            `  ${chalk.cyan('3.')} Remove \"${chalk.bold(\n              dep\n            )}\" from ${chalk.bold('dependencies')} and/or ${chalk.bold(\n              'devDependencies'\n            )} in the ${chalk.bold(\n              'package.json'\n            )} file in your project folder.\\n` +\n            `  ${chalk.cyan('4.')} Run ${chalk.bold(\n              'npm install'\n            )} or ${chalk.bold(\n              'yarn'\n            )}, depending on the package manager you use.\\n\\n` +\n            `In most cases, this should be enough to fix the problem.\\n` +\n            `If this has not helped, there are a few other things you can try:\\n\\n` +\n            `  ${chalk.cyan('5.')} If you used ${chalk.bold(\n              'npm'\n            )}, install ${chalk.bold(\n              'yarn'\n            )} (http://yarnpkg.com/) and repeat the above steps with it instead.\\n` +\n            `     This may help because npm has known issues with package hoisting which may get resolved in future versions.\\n\\n` +\n            `  ${chalk.cyan('6.')} Check if ${chalk.bold(\n              maybeDep\n            )} is outside your project directory.\\n` +\n            `     For example, you might have accidentally installed something in your home folder.\\n\\n` +\n            `  ${chalk.cyan('7.')} Try running ${chalk.bold(\n              `npm ls ${dep}`\n            )} in your project folder.\\n` +\n            `     This will tell you which ${chalk.underline(\n              'other'\n            )} package (apart from the expected ${chalk.bold(\n              ownPackageJson.name\n            )}) installed ${chalk.bold(dep)}.\\n\\n` +\n            `If nothing else helps, add ${chalk.bold(\n              'SKIP_PREFLIGHT_CHECK=true'\n            )} to an ${chalk.bold('.env')} file in your project.\\n` +\n            `That would permanently disable this preflight check in case you want to proceed anyway.\\n\\n` +\n            chalk.cyan(\n              `P.S. We know this message is long but please read the steps above :-) We hope you find them helpful!\\n`\n            )\n        );\n        process.exit(1);\n      }\n    });\n  }\n}\n\nmodule.exports = verifyPackageTree;\n"]},"metadata":{},"sourceType":"script"}