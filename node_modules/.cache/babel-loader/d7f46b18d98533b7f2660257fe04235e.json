{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport util from 'util';\n\nconst chalk = require('chalk');\n\nconst React = require('react');\n\nconst ReactTestRenderer = require('react-test-renderer');\n\nconst leftPad = require('left-pad');\n\nconst prettyFormat = require('../build');\n\nconst ReactTestComponent = require('../build/plugins/ReactTestComponent');\n\nconst worldGeoJson = require('./world.geo.json');\n\nconst NANOSECONDS = 1000000000;\nlet TIMES_TO_RUN = 100000;\n\nfunction testCase(name, fn) {\n  let result, error, time, total;\n\n  try {\n    result = fn();\n  } catch (err) {\n    error = err;\n  }\n\n  if (!error) {\n    const start = process.hrtime();\n\n    for (let i = 0; i < TIMES_TO_RUN; i++) {\n      fn();\n    }\n\n    const diff = process.hrtime(start);\n    total = diff[0] * 1e9 + diff[1];\n    time = Math.round(total / TIMES_TO_RUN);\n  }\n\n  return {\n    error,\n    name,\n    result,\n    time,\n    total\n  };\n}\n\nfunction test(name, value, ignoreResult, prettyFormatOpts) {\n  const formatted = testCase('prettyFormat()  ', () => prettyFormat(value, prettyFormatOpts));\n  const inspected = testCase('util.inspect()  ', () => util.inspect(value, {\n    depth: null,\n    showHidden: true\n  }));\n  const stringified = testCase('JSON.stringify()', () => JSON.stringify(value, null, '  '));\n  const results = [formatted, inspected, stringified].sort((a, b) => a.time - b.time);\n  const winner = results[0];\n  results.forEach((item, index) => {\n    item.isWinner = index === 0;\n    item.isLoser = index === results.length - 1;\n  });\n\n  function log(current) {\n    let message = current.name;\n\n    if (current.time) {\n      message += ' - ' + leftPad(current.time, 6) + 'ns';\n    }\n\n    if (current.total) {\n      message += ' - ' + current.total / NANOSECONDS + 's total (' + TIMES_TO_RUN + ' runs)';\n    }\n\n    if (current.error) {\n      message += ' - Error: ' + current.error.message;\n    }\n\n    if (!ignoreResult && current.result) {\n      message += ' - ' + JSON.stringify(current.result);\n    }\n\n    message = ' ' + message + ' ';\n\n    if (current.error) {\n      message = chalk.dim(message);\n    }\n\n    const diff = current.time - winner.time;\n\n    if (diff > winner.time * 0.85) {\n      message = chalk.bgRed.black(message);\n    } else if (diff > winner.time * 0.65) {\n      message = chalk.bgYellow.black(message);\n    } else if (!current.error) {\n      message = chalk.bgGreen.black(message);\n    } else {\n      message = chalk.dim(message);\n    }\n\n    console.log('  ' + message);\n  }\n\n  console.log(name + ': ');\n  results.forEach(log);\n  console.log();\n}\n\nfunction returnArguments() {\n  return arguments;\n}\n\ntest('empty arguments', returnArguments());\ntest('arguments', returnArguments(1, 2, 3));\ntest('an empty array', []);\ntest('an array with items', [1, 2, 3]);\ntest('a typed array', new Uint32Array(3));\ntest('an array buffer', new ArrayBuffer(3));\ntest('a nested array', [[1, 2, 3]]);\ntest('true', true);\ntest('false', false);\ntest('an error', new Error());\ntest('a typed error with a message', new TypeError('message'));\n/* eslint-disable no-new-func */\n\ntest('a function constructor', new Function());\n/* eslint-enable no-new-func */\n\ntest('an anonymous function', () => {});\n\nfunction named() {}\n\ntest('a named function', named);\ntest('Infinity', Infinity);\ntest('-Infinity', -Infinity);\ntest('an empty map', new Map());\nconst mapWithValues = new Map();\nconst mapWithNonStringKeys = new Map();\nmapWithValues.set('prop1', 'value1');\nmapWithValues.set('prop2', 'value2');\nmapWithNonStringKeys.set({\n  prop: 'value'\n}, {\n  prop: 'value'\n});\ntest('a map with values', mapWithValues);\ntest('a map with non-string keys', mapWithNonStringKeys);\ntest('NaN', NaN);\ntest('null', null);\ntest('a number', 123);\ntest('a date', new Date(10e11));\ntest('an empty object', {});\ntest('an object with properties', {\n  prop1: 'value1',\n  prop2: 'value2'\n});\nconst objectWithPropsAndSymbols = {\n  prop: 'value1'\n};\nobjectWithPropsAndSymbols[Symbol('symbol1')] = 'value2';\nobjectWithPropsAndSymbols[Symbol('symbol2')] = 'value3';\ntest('an object with properties and symbols', objectWithPropsAndSymbols);\ntest('an object with sorted properties', {\n  a: 2,\n  b: 1\n});\ntest('regular expressions from constructors', new RegExp('regexp'));\ntest('regular expressions from literals', /regexp/gi);\ntest('an empty set', new Set());\nconst setWithValues = new Set();\nsetWithValues.add('value1');\nsetWithValues.add('value2');\ntest('a set with values', setWithValues);\ntest('a string', 'string');\ntest('a symbol', Symbol('symbol'));\ntest('undefined', undefined);\ntest('a WeakMap', new WeakMap());\ntest('a WeakSet', new WeakSet());\ntest('deeply nested objects', {\n  prop: {\n    prop: {\n      prop: 'value'\n    }\n  }\n});\nconst circularReferences = {};\ncircularReferences.prop = circularReferences;\ntest('circular references', circularReferences);\nconst parallelReferencesInner = {};\nconst parallelReferences = {\n  prop1: parallelReferencesInner,\n  prop2: parallelReferencesInner\n};\ntest('parallel references', parallelReferences);\ntest('able to customize indent', {\n  prop: 'value'\n});\nconst bigObj = {};\n\nfor (let i = 0; i < 50; i++) {\n  bigObj[i] = i;\n}\n\ntest('big object', bigObj);\nconst element = React.createElement('div', {\n  onClick: () => {},\n  prop: {\n    a: 1,\n    b: 2\n  }\n}, React.createElement('div', {\n  prop: {\n    a: 1,\n    b: 2\n  }\n}), React.createElement('div'), React.createElement('div', {\n  prop: {\n    a: 1,\n    b: 2\n  }\n}, React.createElement('div', null, React.createElement('div'))));\ntest('react', ReactTestRenderer.create(element).toJSON(), false, {\n  plugins: [ReactTestComponent]\n});\nTIMES_TO_RUN = 100;\ntest('massive', worldGeoJson, true);","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/pretty-format/perf/test.js"],"names":["util","chalk","require","React","ReactTestRenderer","leftPad","prettyFormat","ReactTestComponent","worldGeoJson","NANOSECONDS","TIMES_TO_RUN","testCase","name","fn","result","error","time","total","err","start","process","hrtime","i","diff","Math","round","test","value","ignoreResult","prettyFormatOpts","formatted","inspected","inspect","depth","showHidden","stringified","JSON","stringify","results","sort","a","b","winner","forEach","item","index","isWinner","isLoser","length","log","current","message","dim","bgRed","black","bgYellow","bgGreen","console","returnArguments","arguments","Uint32Array","ArrayBuffer","Error","TypeError","Function","named","Infinity","Map","mapWithValues","mapWithNonStringKeys","set","prop","NaN","Date","prop1","prop2","objectWithPropsAndSymbols","Symbol","RegExp","Set","setWithValues","add","undefined","WeakMap","WeakSet","circularReferences","parallelReferencesInner","parallelReferences","bigObj","element","createElement","onClick","create","toJSON","plugins"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport util from 'util';\n\nconst chalk = require('chalk');\nconst React = require('react');\nconst ReactTestRenderer = require('react-test-renderer');\nconst leftPad = require('left-pad');\nconst prettyFormat = require('../build');\nconst ReactTestComponent = require('../build/plugins/ReactTestComponent');\nconst worldGeoJson = require('./world.geo.json');\n\nconst NANOSECONDS = 1000000000;\nlet TIMES_TO_RUN = 100000;\n\nfunction testCase(name, fn) {\n  let result, error, time, total;\n\n  try {\n    result = fn();\n  } catch (err) {\n    error = err;\n  }\n\n  if (!error) {\n    const start = process.hrtime();\n\n    for (let i = 0; i < TIMES_TO_RUN; i++) {\n      fn();\n    }\n\n    const diff = process.hrtime(start);\n\n    total = diff[0] * 1e9 + diff[1];\n    time = Math.round(total / TIMES_TO_RUN);\n  }\n\n  return {\n    error,\n    name,\n    result,\n    time,\n    total,\n  };\n}\n\nfunction test(name, value, ignoreResult, prettyFormatOpts) {\n  const formatted = testCase('prettyFormat()  ', () =>\n    prettyFormat(value, prettyFormatOpts),\n  );\n\n  const inspected = testCase('util.inspect()  ', () =>\n    util.inspect(value, {\n      depth: null,\n      showHidden: true,\n    }),\n  );\n\n  const stringified = testCase('JSON.stringify()', () =>\n    JSON.stringify(value, null, '  '),\n  );\n\n  const results = [formatted, inspected, stringified].sort(\n    (a, b) => a.time - b.time,\n  );\n\n  const winner = results[0];\n\n  results.forEach((item, index) => {\n    item.isWinner = index === 0;\n    item.isLoser = index === results.length - 1;\n  });\n\n  function log(current) {\n    let message = current.name;\n\n    if (current.time) {\n      message += ' - ' + leftPad(current.time, 6) + 'ns';\n    }\n    if (current.total) {\n      message +=\n        ' - ' +\n        current.total / NANOSECONDS +\n        's total (' +\n        TIMES_TO_RUN +\n        ' runs)';\n    }\n    if (current.error) {\n      message += ' - Error: ' + current.error.message;\n    }\n\n    if (!ignoreResult && current.result) {\n      message += ' - ' + JSON.stringify(current.result);\n    }\n\n    message = ' ' + message + ' ';\n\n    if (current.error) {\n      message = chalk.dim(message);\n    }\n\n    const diff = current.time - winner.time;\n\n    if (diff > winner.time * 0.85) {\n      message = chalk.bgRed.black(message);\n    } else if (diff > winner.time * 0.65) {\n      message = chalk.bgYellow.black(message);\n    } else if (!current.error) {\n      message = chalk.bgGreen.black(message);\n    } else {\n      message = chalk.dim(message);\n    }\n\n    console.log('  ' + message);\n  }\n\n  console.log(name + ': ');\n  results.forEach(log);\n  console.log();\n}\n\nfunction returnArguments() {\n  return arguments;\n}\n\ntest('empty arguments', returnArguments());\ntest('arguments', returnArguments(1, 2, 3));\ntest('an empty array', []);\ntest('an array with items', [1, 2, 3]);\ntest('a typed array', new Uint32Array(3));\ntest('an array buffer', new ArrayBuffer(3));\ntest('a nested array', [[1, 2, 3]]);\ntest('true', true);\ntest('false', false);\ntest('an error', new Error());\ntest('a typed error with a message', new TypeError('message'));\n/* eslint-disable no-new-func */\ntest('a function constructor', new Function());\n/* eslint-enable no-new-func */\ntest('an anonymous function', () => {});\nfunction named() {}\ntest('a named function', named);\ntest('Infinity', Infinity);\ntest('-Infinity', -Infinity);\ntest('an empty map', new Map());\nconst mapWithValues = new Map();\nconst mapWithNonStringKeys = new Map();\nmapWithValues.set('prop1', 'value1');\nmapWithValues.set('prop2', 'value2');\nmapWithNonStringKeys.set({prop: 'value'}, {prop: 'value'});\ntest('a map with values', mapWithValues);\ntest('a map with non-string keys', mapWithNonStringKeys);\ntest('NaN', NaN);\ntest('null', null);\ntest('a number', 123);\ntest('a date', new Date(10e11));\ntest('an empty object', {});\ntest('an object with properties', {prop1: 'value1', prop2: 'value2'});\nconst objectWithPropsAndSymbols = {prop: 'value1'};\nobjectWithPropsAndSymbols[Symbol('symbol1')] = 'value2';\nobjectWithPropsAndSymbols[Symbol('symbol2')] = 'value3';\ntest('an object with properties and symbols', objectWithPropsAndSymbols);\ntest('an object with sorted properties', {a: 2, b: 1});\ntest('regular expressions from constructors', new RegExp('regexp'));\ntest('regular expressions from literals', /regexp/gi);\ntest('an empty set', new Set());\nconst setWithValues = new Set();\nsetWithValues.add('value1');\nsetWithValues.add('value2');\ntest('a set with values', setWithValues);\ntest('a string', 'string');\ntest('a symbol', Symbol('symbol'));\ntest('undefined', undefined);\ntest('a WeakMap', new WeakMap());\ntest('a WeakSet', new WeakSet());\ntest('deeply nested objects', {prop: {prop: {prop: 'value'}}});\nconst circularReferences = {};\ncircularReferences.prop = circularReferences;\ntest('circular references', circularReferences);\nconst parallelReferencesInner = {};\nconst parallelReferences = {\n  prop1: parallelReferencesInner,\n  prop2: parallelReferencesInner,\n};\ntest('parallel references', parallelReferences);\ntest('able to customize indent', {prop: 'value'});\nconst bigObj = {};\nfor (let i = 0; i < 50; i++) {\n  bigObj[i] = i;\n}\ntest('big object', bigObj);\n\nconst element = React.createElement(\n  'div',\n  {onClick: () => {}, prop: {a: 1, b: 2}},\n  React.createElement('div', {prop: {a: 1, b: 2}}),\n  React.createElement('div'),\n  React.createElement(\n    'div',\n    {prop: {a: 1, b: 2}},\n    React.createElement('div', null, React.createElement('div')),\n  ),\n);\n\ntest('react', ReactTestRenderer.create(element).toJSON(), false, {\n  plugins: [ReactTestComponent],\n});\n\nTIMES_TO_RUN = 100;\ntest('massive', worldGeoJson, true);\n"]},"metadata":{},"sourceType":"module"}