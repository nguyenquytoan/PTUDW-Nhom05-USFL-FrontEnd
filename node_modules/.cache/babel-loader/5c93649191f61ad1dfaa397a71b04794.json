{"ast":null,"code":"/**\n * @fileoverview Rule to spot scenarios where a newline looks like it is ending a statement, but is not.\n * @author Glen Mailer\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow confusing multiline expressions\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-unexpected-multiline\"\n    },\n    schema: [],\n    messages: {\n      function: \"Unexpected newline between function and ( of function call.\",\n      property: \"Unexpected newline between object and [ of property access.\",\n      taggedTemplate: \"Unexpected newline between template tag and template literal.\",\n      division: \"Unexpected newline between numerator and division operator.\"\n    }\n  },\n\n  create(context) {\n    const REGEX_FLAG_MATCHER = /^[gimsuy]+$/u;\n    const sourceCode = context.getSourceCode();\n    /**\n     * Check to see if there is a newline between the node and the following open bracket\n     * line's expression\n     * @param {ASTNode} node The node to check.\n     * @param {string} messageId The error messageId to use.\n     * @returns {void}\n     * @private\n     */\n\n    function checkForBreakAfter(node, messageId) {\n      const openParen = sourceCode.getTokenAfter(node, astUtils.isNotClosingParenToken);\n      const nodeExpressionEnd = sourceCode.getTokenBefore(openParen);\n\n      if (openParen.loc.start.line !== nodeExpressionEnd.loc.end.line) {\n        context.report({\n          node,\n          loc: openParen.loc.start,\n          messageId,\n          data: {\n            char: openParen.value\n          }\n        });\n      }\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      MemberExpression(node) {\n        if (!node.computed) {\n          return;\n        }\n\n        checkForBreakAfter(node.object, \"property\");\n      },\n\n      TaggedTemplateExpression(node) {\n        if (node.tag.loc.end.line === node.quasi.loc.start.line) {\n          return;\n        } // handle generics type parameters on template tags\n\n\n        const tokenBefore = sourceCode.getTokenBefore(node.quasi);\n\n        if (tokenBefore.loc.end.line === node.quasi.loc.start.line) {\n          return;\n        }\n\n        context.report({\n          node,\n          loc: node.loc.start,\n          messageId: \"taggedTemplate\"\n        });\n      },\n\n      CallExpression(node) {\n        if (node.arguments.length === 0) {\n          return;\n        }\n\n        checkForBreakAfter(node.callee, \"function\");\n      },\n\n      \"BinaryExpression[operator='/'] > BinaryExpression[operator='/'].left\"(node) {\n        const secondSlash = sourceCode.getTokenAfter(node, token => token.value === \"/\");\n        const tokenAfterOperator = sourceCode.getTokenAfter(secondSlash);\n\n        if (tokenAfterOperator.type === \"Identifier\" && REGEX_FLAG_MATCHER.test(tokenAfterOperator.value) && secondSlash.range[1] === tokenAfterOperator.range[0]) {\n          checkForBreakAfter(node.left, \"division\");\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-unexpected-multiline.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","function","property","taggedTemplate","division","create","context","REGEX_FLAG_MATCHER","sourceCode","getSourceCode","checkForBreakAfter","node","messageId","openParen","getTokenAfter","isNotClosingParenToken","nodeExpressionEnd","getTokenBefore","loc","start","line","end","report","data","char","value","MemberExpression","computed","object","TaggedTemplateExpression","tag","quasi","tokenBefore","CallExpression","arguments","length","callee","secondSlash","token","tokenAfterOperator","test","range","left"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to spot scenarios where a newline looks like it is ending a statement, but is not.\n * @author Glen Mailer\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow confusing multiline expressions\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-unexpected-multiline\"\n        },\n\n        schema: [],\n        messages: {\n            function: \"Unexpected newline between function and ( of function call.\",\n            property: \"Unexpected newline between object and [ of property access.\",\n            taggedTemplate: \"Unexpected newline between template tag and template literal.\",\n            division: \"Unexpected newline between numerator and division operator.\"\n        }\n    },\n\n    create(context) {\n\n        const REGEX_FLAG_MATCHER = /^[gimsuy]+$/u;\n\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Check to see if there is a newline between the node and the following open bracket\n         * line's expression\n         * @param {ASTNode} node The node to check.\n         * @param {string} messageId The error messageId to use.\n         * @returns {void}\n         * @private\n         */\n        function checkForBreakAfter(node, messageId) {\n            const openParen = sourceCode.getTokenAfter(node, astUtils.isNotClosingParenToken);\n            const nodeExpressionEnd = sourceCode.getTokenBefore(openParen);\n\n            if (openParen.loc.start.line !== nodeExpressionEnd.loc.end.line) {\n                context.report({ node, loc: openParen.loc.start, messageId, data: { char: openParen.value } });\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n\n            MemberExpression(node) {\n                if (!node.computed) {\n                    return;\n                }\n                checkForBreakAfter(node.object, \"property\");\n            },\n\n            TaggedTemplateExpression(node) {\n                if (node.tag.loc.end.line === node.quasi.loc.start.line) {\n                    return;\n                }\n\n                // handle generics type parameters on template tags\n                const tokenBefore = sourceCode.getTokenBefore(node.quasi);\n\n                if (tokenBefore.loc.end.line === node.quasi.loc.start.line) {\n                    return;\n                }\n\n                context.report({ node, loc: node.loc.start, messageId: \"taggedTemplate\" });\n            },\n\n            CallExpression(node) {\n                if (node.arguments.length === 0) {\n                    return;\n                }\n                checkForBreakAfter(node.callee, \"function\");\n            },\n\n            \"BinaryExpression[operator='/'] > BinaryExpression[operator='/'].left\"(node) {\n                const secondSlash = sourceCode.getTokenAfter(node, token => token.value === \"/\");\n                const tokenAfterOperator = sourceCode.getTokenAfter(secondSlash);\n\n                if (\n                    tokenAfterOperator.type === \"Identifier\" &&\n                    REGEX_FLAG_MATCHER.test(tokenAfterOperator.value) &&\n                    secondSlash.range[1] === tokenAfterOperator.range[0]\n                ) {\n                    checkForBreakAfter(node.left, \"division\");\n                }\n            }\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}