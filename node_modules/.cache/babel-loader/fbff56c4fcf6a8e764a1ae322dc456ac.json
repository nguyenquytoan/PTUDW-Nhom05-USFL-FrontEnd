{"ast":null,"code":"/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.mjs';\n/**\n * A minimal `EventTarget` shim.\n * This is necessary because not all browsers support constructable\n * `EventTarget`, so using a real `EventTarget` will error.\n * @private\n */\n\nclass EventTargetShim {\n  /**\n   * Creates an event listener registry\n   *\n   * @private\n   */\n  constructor() {\n    // A registry of event types to listeners.\n    this._eventListenerRegistry = {};\n  }\n  /**\n   * @param {string} type\n   * @param {Function} listener\n   * @private\n   */\n\n\n  addEventListener(type, listener) {\n    this._getEventListenersByType(type).add(listener);\n  }\n  /**\n   * @param {string} type\n   * @param {Function} listener\n   * @private\n   */\n\n\n  removeEventListener(type, listener) {\n    this._getEventListenersByType(type).delete(listener);\n  }\n  /**\n   * @param {Event} event\n   * @private\n   */\n\n\n  dispatchEvent(event) {\n    event.target = this;\n\n    this._getEventListenersByType(event.type).forEach(listener => listener(event));\n  }\n  /**\n   * Returns a Set of listeners associated with the passed event type.\n   * If no handlers have been registered, an empty Set is returned.\n   *\n   * @param {string} type The event type.\n   * @return {Set} An array of handler functions.\n   * @private\n   */\n\n\n  _getEventListenersByType(type) {\n    return this._eventListenerRegistry[type] = this._eventListenerRegistry[type] || new Set();\n  }\n\n}\n\nexport { EventTargetShim };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-window/utils/EventTargetShim.mjs"],"names":["EventTargetShim","constructor","_eventListenerRegistry","addEventListener","type","listener","_getEventListenersByType","add","removeEventListener","delete","dispatchEvent","event","target","forEach","Set"],"mappings":"AAAA;;;;;;;AAQA,OAAO,iBAAP;AAGA;;;;;;;AAMA,MAAMA,eAAN,CAAsB;AACpB;;;;;AAKAC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,sBAAL,GAA8B,EAA9B;AACD;AACD;;;;;;;AAKAC,EAAAA,gBAAgB,CAACC,IAAD,EAAOC,QAAP,EAAiB;AAC/B,SAAKC,wBAAL,CAA8BF,IAA9B,EAAoCG,GAApC,CAAwCF,QAAxC;AACD;AAED;;;;;;;AAKAG,EAAAA,mBAAmB,CAACJ,IAAD,EAAOC,QAAP,EAAiB;AAClC,SAAKC,wBAAL,CAA8BF,IAA9B,EAAoCK,MAApC,CAA2CJ,QAA3C;AACD;AAED;;;;;;AAIAK,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnBA,IAAAA,KAAK,CAACC,MAAN,GAAe,IAAf;;AACA,SAAKN,wBAAL,CAA8BK,KAAK,CAACP,IAApC,EAA0CS,OAA1C,CACKR,QAAD,IAAcA,QAAQ,CAACM,KAAD,CAD1B;AAED;AAED;;;;;;;;;;AAQAL,EAAAA,wBAAwB,CAACF,IAAD,EAAO;AAC7B,WAAO,KAAKF,sBAAL,CAA4BE,IAA5B,IACF,KAAKF,sBAAL,CAA4BE,IAA5B,KAAqC,IAAIU,GAAJ,EAD1C;AAED;;AAjDmB;;AAoDtB,SAAQd,eAAR","sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n\n/**\n * A minimal `EventTarget` shim.\n * This is necessary because not all browsers support constructable\n * `EventTarget`, so using a real `EventTarget` will error.\n * @private\n */\nclass EventTargetShim {\n  /**\n   * Creates an event listener registry\n   *\n   * @private\n   */\n  constructor() {\n    // A registry of event types to listeners.\n    this._eventListenerRegistry = {};\n  }\n  /**\n   * @param {string} type\n   * @param {Function} listener\n   * @private\n   */\n  addEventListener(type, listener) {\n    this._getEventListenersByType(type).add(listener);\n  }\n\n  /**\n   * @param {string} type\n   * @param {Function} listener\n   * @private\n   */\n  removeEventListener(type, listener) {\n    this._getEventListenersByType(type).delete(listener);\n  }\n\n  /**\n   * @param {Event} event\n   * @private\n   */\n  dispatchEvent(event) {\n    event.target = this;\n    this._getEventListenersByType(event.type).forEach(\n        (listener) => listener(event));\n  }\n\n  /**\n   * Returns a Set of listeners associated with the passed event type.\n   * If no handlers have been registered, an empty Set is returned.\n   *\n   * @param {string} type The event type.\n   * @return {Set} An array of handler functions.\n   * @private\n   */\n  _getEventListenersByType(type) {\n    return this._eventListenerRegistry[type] =\n        (this._eventListenerRegistry[type] || new Set());\n  }\n}\n\nexport {EventTargetShim};\n"]},"metadata":{},"sourceType":"module"}