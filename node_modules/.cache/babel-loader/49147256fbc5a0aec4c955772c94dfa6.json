{"ast":null,"code":"/**\n * @fileoverview Rule that warns when identifier names that are\n * blacklisted in the configuration are used.\n * @author Keith Cirkel (http://keithcirkel.co.uk)\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow specified identifiers\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/id-blacklist\"\n    },\n    schema: {\n      type: \"array\",\n      items: {\n        type: \"string\"\n      },\n      uniqueItems: true\n    },\n    messages: {\n      blacklisted: \"Identifier '{{name}}' is blacklisted.\"\n    }\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n    const blacklist = context.options;\n    /**\n     * Checks if a string matches the provided pattern\n     * @param {string} name The string to check.\n     * @returns {boolean} if the string is a match\n     * @private\n     */\n\n    function isInvalid(name) {\n      return blacklist.indexOf(name) !== -1;\n    }\n    /**\n     * Verifies if we should report an error or not based on the effective\n     * parent node and the identifier name.\n     * @param {ASTNode} effectiveParent The effective parent node of the node to be reported\n     * @param {string} name The identifier name of the identifier node\n     * @returns {boolean} whether an error should be reported or not\n     */\n\n\n    function shouldReport(effectiveParent, name) {\n      return effectiveParent.type !== \"CallExpression\" && effectiveParent.type !== \"NewExpression\" && isInvalid(name);\n    }\n    /**\n     * Reports an AST node as a rule violation.\n     * @param {ASTNode} node The node to report.\n     * @returns {void}\n     * @private\n     */\n\n\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"blacklisted\",\n        data: {\n          name: node.name\n        }\n      });\n    }\n\n    return {\n      Identifier(node) {\n        const name = node.name,\n              effectiveParent = node.parent.type === \"MemberExpression\" ? node.parent.parent : node.parent; // MemberExpressions get special rules\n\n        if (node.parent.type === \"MemberExpression\") {\n          // Always check object names\n          if (node.parent.object.type === \"Identifier\" && node.parent.object.name === node.name) {\n            if (isInvalid(name)) {\n              report(node);\n            } // Report AssignmentExpressions only if they are the left side of the assignment\n\n          } else if (effectiveParent.type === \"AssignmentExpression\" && (effectiveParent.right.type !== \"MemberExpression\" || effectiveParent.left.type === \"MemberExpression\" && effectiveParent.left.property.name === node.name)) {\n            if (isInvalid(name)) {\n              report(node);\n            }\n          } // Properties have their own rules\n\n        } else if (node.parent.type === \"Property\") {\n          if (shouldReport(effectiveParent, name)) {\n            report(node);\n          } // Report anything that is a match and not a CallExpression\n\n        } else if (shouldReport(effectiveParent, name)) {\n          report(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/id-blacklist.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","items","uniqueItems","messages","blacklisted","create","context","blacklist","options","isInvalid","name","indexOf","shouldReport","effectiveParent","report","node","messageId","data","Identifier","parent","object","right","left","property"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule that warns when identifier names that are\n * blacklisted in the configuration are used.\n * @author Keith Cirkel (http://keithcirkel.co.uk)\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow specified identifiers\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/id-blacklist\"\n        },\n\n        schema: {\n            type: \"array\",\n            items: {\n                type: \"string\"\n            },\n            uniqueItems: true\n        },\n        messages: {\n            blacklisted: \"Identifier '{{name}}' is blacklisted.\"\n        }\n    },\n\n    create(context) {\n\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        const blacklist = context.options;\n\n\n        /**\n         * Checks if a string matches the provided pattern\n         * @param {string} name The string to check.\n         * @returns {boolean} if the string is a match\n         * @private\n         */\n        function isInvalid(name) {\n            return blacklist.indexOf(name) !== -1;\n        }\n\n        /**\n         * Verifies if we should report an error or not based on the effective\n         * parent node and the identifier name.\n         * @param {ASTNode} effectiveParent The effective parent node of the node to be reported\n         * @param {string} name The identifier name of the identifier node\n         * @returns {boolean} whether an error should be reported or not\n         */\n        function shouldReport(effectiveParent, name) {\n            return effectiveParent.type !== \"CallExpression\" &&\n                effectiveParent.type !== \"NewExpression\" &&\n                isInvalid(name);\n        }\n\n        /**\n         * Reports an AST node as a rule violation.\n         * @param {ASTNode} node The node to report.\n         * @returns {void}\n         * @private\n         */\n        function report(node) {\n            context.report({\n                node,\n                messageId: \"blacklisted\",\n                data: {\n                    name: node.name\n                }\n            });\n        }\n\n        return {\n\n            Identifier(node) {\n                const name = node.name,\n                    effectiveParent = (node.parent.type === \"MemberExpression\") ? node.parent.parent : node.parent;\n\n                // MemberExpressions get special rules\n                if (node.parent.type === \"MemberExpression\") {\n\n                    // Always check object names\n                    if (node.parent.object.type === \"Identifier\" &&\n                        node.parent.object.name === node.name) {\n                        if (isInvalid(name)) {\n                            report(node);\n                        }\n\n                        // Report AssignmentExpressions only if they are the left side of the assignment\n                    } else if (effectiveParent.type === \"AssignmentExpression\" &&\n                        (effectiveParent.right.type !== \"MemberExpression\" ||\n                        effectiveParent.left.type === \"MemberExpression\" &&\n                        effectiveParent.left.property.name === node.name)) {\n                        if (isInvalid(name)) {\n                            report(node);\n                        }\n                    }\n\n                // Properties have their own rules\n                } else if (node.parent.type === \"Property\") {\n\n                    if (shouldReport(effectiveParent, name)) {\n                        report(node);\n                    }\n\n                // Report anything that is a match and not a CallExpression\n                } else if (shouldReport(effectiveParent, name)) {\n                    report(node);\n                }\n            }\n\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}