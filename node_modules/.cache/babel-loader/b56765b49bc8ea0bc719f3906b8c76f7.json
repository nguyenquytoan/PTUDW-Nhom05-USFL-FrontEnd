{"ast":null,"code":"var tls = require(\"tls\");\n\nvar promisify = require(\"./_promisify.js\");\n\nvar bind = function (c, f) {\n  return f && f.bind(c);\n};\n\nObject.defineProperties(module.exports, {\n  CLIENT_RENEG_LIMIT: {\n    enumerable: true,\n    value: tls.CLIENT_RENEG_LIMIT\n  },\n  CLIENT_RENEG_WINDOW: {\n    enumerable: true,\n    value: tls.CLIENT_RENEG_WINDOW\n  },\n  DEFAULT_CIPHERS: {\n    enumerable: true,\n    value: tls.DEFAULT_CIPHERS\n  },\n  DEFAULT_ECDH_CURVE: {\n    enumerable: true,\n    value: tls.DEFAULT_ECDH_CURVE\n  },\n  SLAB_BUFFER_SIZE: {\n    enumerable: true,\n    value: tls.SLAB_BUFFER_SIZE\n  },\n  SecureContext: {\n    enumerable: true,\n    value: tls.SecureContext\n  },\n  Server: {\n    enumerable: true,\n    value: tls.Server\n  },\n  TLSSocket: {\n    enumerable: true,\n    value: tls.TLSSocket\n  },\n  checkServerIdentity: {\n    enumerable: true,\n    value: bind(tls, tls.checkServerIdentity)\n  },\n  connect: {\n    enumerable: true,\n    value: promisify(tls, tls.connect, 1, {\n      \"returnsObject\": true\n    })\n  },\n  convertALPNProtocols: {\n    enumerable: true,\n    value: bind(tls, tls.convertALPNProtocols)\n  },\n  convertNPNProtocols: {\n    enumerable: true,\n    value: bind(tls, tls.convertNPNProtocols)\n  },\n  createSecureContext: {\n    enumerable: true,\n    value: bind(tls, tls.createSecureContext)\n  },\n  createSecurePair: {\n    enumerable: true,\n    value: bind(tls, tls.createSecurePair)\n  },\n  createServer: {\n    enumerable: true,\n    value: promisify(tls, tls.createServer, 1, {\n      \"returnsObject\": true\n    })\n  },\n  getCiphers: {\n    enumerable: true,\n    value: bind(tls, tls.getCiphers)\n  },\n  parseCertString: {\n    enumerable: true,\n    value: bind(tls, tls.parseCertString)\n  }\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/pn/tls.js"],"names":["tls","require","promisify","bind","c","f","Object","defineProperties","module","exports","CLIENT_RENEG_LIMIT","enumerable","value","CLIENT_RENEG_WINDOW","DEFAULT_CIPHERS","DEFAULT_ECDH_CURVE","SLAB_BUFFER_SIZE","SecureContext","Server","TLSSocket","checkServerIdentity","connect","convertALPNProtocols","convertNPNProtocols","createSecureContext","createSecurePair","createServer","getCiphers","parseCertString"],"mappings":"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","sourcesContent":["var tls = require(\"tls\");\nvar promisify = require(\"./_promisify.js\");\nvar bind = function(c, f) { return f && f.bind(c); };\nObject.defineProperties(module.exports, {\n  CLIENT_RENEG_LIMIT: { enumerable: true, value: tls.CLIENT_RENEG_LIMIT },\n  CLIENT_RENEG_WINDOW: { enumerable: true, value: tls.CLIENT_RENEG_WINDOW },\n  DEFAULT_CIPHERS: { enumerable: true, value: tls.DEFAULT_CIPHERS },\n  DEFAULT_ECDH_CURVE: { enumerable: true, value: tls.DEFAULT_ECDH_CURVE },\n  SLAB_BUFFER_SIZE: { enumerable: true, value: tls.SLAB_BUFFER_SIZE },\n  SecureContext: { enumerable: true, value: tls.SecureContext },\n  Server: { enumerable: true, value: tls.Server },\n  TLSSocket: { enumerable: true, value: tls.TLSSocket },\n  checkServerIdentity: { enumerable: true, value: bind(tls, tls.checkServerIdentity) },\n  connect: { enumerable: true, value: promisify(tls, tls.connect, 1, {\"returnsObject\":true}) },\n  convertALPNProtocols: { enumerable: true, value: bind(tls, tls.convertALPNProtocols) },\n  convertNPNProtocols: { enumerable: true, value: bind(tls, tls.convertNPNProtocols) },\n  createSecureContext: { enumerable: true, value: bind(tls, tls.createSecureContext) },\n  createSecurePair: { enumerable: true, value: bind(tls, tls.createSecurePair) },\n  createServer: { enumerable: true, value: promisify(tls, tls.createServer, 1, {\"returnsObject\":true}) },\n  getCiphers: { enumerable: true, value: bind(tls, tls.getCiphers) },\n  parseCertString: { enumerable: true, value: bind(tls, tls.parseCertString) },\n});"]},"metadata":{},"sourceType":"script"}