{"ast":null,"code":"/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport assert from \"assert\";\nimport { getTypes } from \"./util.js\";\nimport { makeAccessor } from \"private\";\nlet m = makeAccessor();\nlet hasOwn = Object.prototype.hasOwnProperty;\n\nfunction makePredicate(propertyName, knownTypes) {\n  function onlyChildren(node) {\n    const t = getTypes();\n    t.assertNode(node); // Assume no side effects until we find out otherwise.\n\n    let result = false;\n\n    function check(child) {\n      if (result) {// Do nothing.\n      } else if (Array.isArray(child)) {\n        child.some(check);\n      } else if (t.isNode(child)) {\n        assert.strictEqual(result, false);\n        result = predicate(child);\n      }\n\n      return result;\n    }\n\n    let keys = t.VISITOR_KEYS[node.type];\n\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        let key = keys[i];\n        let child = node[key];\n        check(child);\n      }\n    }\n\n    return result;\n  }\n\n  function predicate(node) {\n    getTypes().assertNode(node);\n    let meta = m(node);\n    if (hasOwn.call(meta, propertyName)) return meta[propertyName]; // Certain types are \"opaque,\" which means they have no side\n    // effects or leaps and we don't care about their subexpressions.\n\n    if (hasOwn.call(opaqueTypes, node.type)) return meta[propertyName] = false;\n    if (hasOwn.call(knownTypes, node.type)) return meta[propertyName] = true;\n    return meta[propertyName] = onlyChildren(node);\n  }\n\n  predicate.onlyChildren = onlyChildren;\n  return predicate;\n}\n\nlet opaqueTypes = {\n  FunctionExpression: true,\n  ArrowFunctionExpression: true\n}; // These types potentially have side effects regardless of what side\n// effects their subexpressions have.\n\nlet sideEffectTypes = {\n  CallExpression: true,\n  // Anything could happen!\n  ForInStatement: true,\n  // Modifies the key variable.\n  UnaryExpression: true,\n  // Think delete.\n  BinaryExpression: true,\n  // Might invoke .toString() or .valueOf().\n  AssignmentExpression: true,\n  // Side-effecting by definition.\n  UpdateExpression: true,\n  // Updates are essentially assignments.\n  NewExpression: true // Similar to CallExpression.\n\n}; // These types are the direct cause of all leaps in control flow.\n\nlet leapTypes = {\n  YieldExpression: true,\n  BreakStatement: true,\n  ContinueStatement: true,\n  ReturnStatement: true,\n  ThrowStatement: true\n}; // All leap types are also side effect types.\n\nfor (let type in leapTypes) {\n  if (hasOwn.call(leapTypes, type)) {\n    sideEffectTypes[type] = leapTypes[type];\n  }\n}\n\nexports.hasSideEffects = makePredicate(\"hasSideEffects\", sideEffectTypes);\nexports.containsLeap = makePredicate(\"containsLeap\", leapTypes);","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/regenerator-transform/src/meta.js"],"names":["assert","getTypes","makeAccessor","m","hasOwn","Object","prototype","hasOwnProperty","makePredicate","propertyName","knownTypes","onlyChildren","node","t","assertNode","result","check","child","Array","isArray","some","isNode","strictEqual","predicate","keys","VISITOR_KEYS","type","i","length","key","meta","call","opaqueTypes","FunctionExpression","ArrowFunctionExpression","sideEffectTypes","CallExpression","ForInStatement","UnaryExpression","BinaryExpression","AssignmentExpression","UpdateExpression","NewExpression","leapTypes","YieldExpression","BreakStatement","ContinueStatement","ReturnStatement","ThrowStatement","exports","hasSideEffects","containsLeap"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport assert from \"assert\";\nimport { getTypes } from \"./util.js\";\nimport { makeAccessor } from \"private\";\n\nlet m = makeAccessor();\nlet hasOwn = Object.prototype.hasOwnProperty;\n\nfunction makePredicate(propertyName, knownTypes) {\n  function onlyChildren(node) {\n    const t = getTypes();\n    t.assertNode(node);\n\n    // Assume no side effects until we find out otherwise.\n    let result = false;\n\n    function check(child) {\n      if (result) {\n        // Do nothing.\n      } else if (Array.isArray(child)) {\n        child.some(check);\n      } else if (t.isNode(child)) {\n        assert.strictEqual(result, false);\n        result = predicate(child);\n      }\n      return result;\n    }\n\n    let keys = t.VISITOR_KEYS[node.type];\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        let key = keys[i];\n        let child = node[key];\n        check(child);\n      }\n    }\n\n    return result;\n  }\n\n  function predicate(node) {\n    getTypes().assertNode(node);\n\n    let meta = m(node);\n    if (hasOwn.call(meta, propertyName))\n      return meta[propertyName];\n\n    // Certain types are \"opaque,\" which means they have no side\n    // effects or leaps and we don't care about their subexpressions.\n    if (hasOwn.call(opaqueTypes, node.type))\n      return meta[propertyName] = false;\n\n    if (hasOwn.call(knownTypes, node.type))\n      return meta[propertyName] = true;\n\n    return meta[propertyName] = onlyChildren(node);\n  }\n\n  predicate.onlyChildren = onlyChildren;\n\n  return predicate;\n}\n\nlet opaqueTypes = {\n  FunctionExpression: true,\n  ArrowFunctionExpression: true\n};\n\n// These types potentially have side effects regardless of what side\n// effects their subexpressions have.\nlet sideEffectTypes = {\n  CallExpression: true, // Anything could happen!\n  ForInStatement: true, // Modifies the key variable.\n  UnaryExpression: true, // Think delete.\n  BinaryExpression: true, // Might invoke .toString() or .valueOf().\n  AssignmentExpression: true, // Side-effecting by definition.\n  UpdateExpression: true, // Updates are essentially assignments.\n  NewExpression: true // Similar to CallExpression.\n};\n\n// These types are the direct cause of all leaps in control flow.\nlet leapTypes = {\n  YieldExpression: true,\n  BreakStatement: true,\n  ContinueStatement: true,\n  ReturnStatement: true,\n  ThrowStatement: true\n};\n\n// All leap types are also side effect types.\nfor (let type in leapTypes) {\n  if (hasOwn.call(leapTypes, type)) {\n    sideEffectTypes[type] = leapTypes[type];\n  }\n}\n\nexports.hasSideEffects = makePredicate(\"hasSideEffects\", sideEffectTypes);\nexports.containsLeap = makePredicate(\"containsLeap\", leapTypes);\n"]},"metadata":{},"sourceType":"module"}