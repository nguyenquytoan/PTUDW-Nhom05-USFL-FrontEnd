{"ast":null,"code":"/**\n * @fileoverview Rule to enforce a maximum number of nested callbacks.\n * @author Ian Christian Myers\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce a maximum depth that callbacks can be nested\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-nested-callbacks\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 0\n      }, {\n        type: \"object\",\n        properties: {\n          maximum: {\n            type: \"integer\",\n            minimum: 0\n          },\n          max: {\n            type: \"integer\",\n            minimum: 0\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      exceed: \"Too many nested callbacks ({{num}}). Maximum allowed is {{max}}.\"\n    }\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Constants\n    //--------------------------------------------------------------------------\n    const option = context.options[0];\n    let THRESHOLD = 10;\n\n    if (typeof option === \"object\" && (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))) {\n      THRESHOLD = option.maximum || option.max;\n    } else if (typeof option === \"number\") {\n      THRESHOLD = option;\n    } //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n\n    const callbackStack = [];\n    /**\n     * Checks a given function node for too many callbacks.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     * @private\n     */\n\n    function checkFunction(node) {\n      const parent = node.parent;\n\n      if (parent.type === \"CallExpression\") {\n        callbackStack.push(node);\n      }\n\n      if (callbackStack.length > THRESHOLD) {\n        const opts = {\n          num: callbackStack.length,\n          max: THRESHOLD\n        };\n        context.report({\n          node,\n          messageId: \"exceed\",\n          data: opts\n        });\n      }\n    }\n    /**\n     * Pops the call stack.\n     * @returns {void}\n     * @private\n     */\n\n\n    function popStack() {\n      callbackStack.pop();\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      ArrowFunctionExpression: checkFunction,\n      \"ArrowFunctionExpression:exit\": popStack,\n      FunctionExpression: checkFunction,\n      \"FunctionExpression:exit\": popStack\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/max-nested-callbacks.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","oneOf","minimum","properties","maximum","max","additionalProperties","messages","exceed","create","context","option","options","THRESHOLD","Object","prototype","hasOwnProperty","call","callbackStack","checkFunction","node","parent","push","length","opts","num","report","messageId","data","popStack","pop","ArrowFunctionExpression","FunctionExpression"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,sDADX;AAEFC,MAAAA,QAAQ,EAAE,kBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,KAAK,EAAE,CACH;AACIP,QAAAA,IAAI,EAAE,SADV;AAEIQ,QAAAA,OAAO,EAAE;AAFb,OADG,EAKH;AACIR,QAAAA,IAAI,EAAE,QADV;AAEIS,QAAAA,UAAU,EAAE;AACRC,UAAAA,OAAO,EAAE;AACLV,YAAAA,IAAI,EAAE,SADD;AAELQ,YAAAA,OAAO,EAAE;AAFJ,WADD;AAKRG,UAAAA,GAAG,EAAE;AACDX,YAAAA,IAAI,EAAE,SADL;AAEDQ,YAAAA,OAAO,EAAE;AAFR;AALG,SAFhB;AAYII,QAAAA,oBAAoB,EAAE;AAZ1B,OALG;AADX,KADI,CAVN;AAkCFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,MAAM,EAAE;AADF;AAlCR,GADO;;AAwCbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACA;AACA;AACA,UAAMC,MAAM,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAAf;AACA,QAAIC,SAAS,GAAG,EAAhB;;AAEA,QACI,OAAOF,MAAP,KAAkB,QAAlB,KACCG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,MAArC,EAA6C,SAA7C,KAA2DG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,MAArC,EAA6C,KAA7C,CAD5D,CADJ,EAGE;AACEE,MAAAA,SAAS,GAAGF,MAAM,CAACP,OAAP,IAAkBO,MAAM,CAACN,GAArC;AACH,KALD,MAKO,IAAI,OAAOM,MAAP,KAAkB,QAAtB,EAAgC;AACnCE,MAAAA,SAAS,GAAGF,MAAZ;AACH,KAfW,CAiBZ;AACA;AACA;;;AAEA,UAAMO,aAAa,GAAG,EAAtB;AAEA;;;;;;;AAMA,aAASC,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,YAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;;AAEA,UAAIA,MAAM,CAAC3B,IAAP,KAAgB,gBAApB,EAAsC;AAClCwB,QAAAA,aAAa,CAACI,IAAd,CAAmBF,IAAnB;AACH;;AAED,UAAIF,aAAa,CAACK,MAAd,GAAuBV,SAA3B,EAAsC;AAClC,cAAMW,IAAI,GAAG;AAAEC,UAAAA,GAAG,EAAEP,aAAa,CAACK,MAArB;AAA6BlB,UAAAA,GAAG,EAAEQ;AAAlC,SAAb;AAEAH,QAAAA,OAAO,CAACgB,MAAR,CAAe;AAAEN,UAAAA,IAAF;AAAQO,UAAAA,SAAS,EAAE,QAAnB;AAA6BC,UAAAA,IAAI,EAAEJ;AAAnC,SAAf;AACH;AACJ;AAED;;;;;;;AAKA,aAASK,QAAT,GAAoB;AAChBX,MAAAA,aAAa,CAACY,GAAd;AACH,KAlDW,CAoDZ;AACA;AACA;;;AAEA,WAAO;AACHC,MAAAA,uBAAuB,EAAEZ,aADtB;AAEH,sCAAgCU,QAF7B;AAIHG,MAAAA,kBAAkB,EAAEb,aAJjB;AAKH,iCAA2BU;AALxB,KAAP;AAQH;;AAxGY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to enforce a maximum number of nested callbacks.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce a maximum depth that callbacks can be nested\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/max-nested-callbacks\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n        messages: {\n            exceed: \"Too many nested callbacks ({{num}}). Maximum allowed is {{max}}.\"\n        }\n    },\n\n    create(context) {\n\n        //--------------------------------------------------------------------------\n        // Constants\n        //--------------------------------------------------------------------------\n        const option = context.options[0];\n        let THRESHOLD = 10;\n\n        if (\n            typeof option === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))\n        ) {\n            THRESHOLD = option.maximum || option.max;\n        } else if (typeof option === \"number\") {\n            THRESHOLD = option;\n        }\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        const callbackStack = [];\n\n        /**\n         * Checks a given function node for too many callbacks.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkFunction(node) {\n            const parent = node.parent;\n\n            if (parent.type === \"CallExpression\") {\n                callbackStack.push(node);\n            }\n\n            if (callbackStack.length > THRESHOLD) {\n                const opts = { num: callbackStack.length, max: THRESHOLD };\n\n                context.report({ node, messageId: \"exceed\", data: opts });\n            }\n        }\n\n        /**\n         * Pops the call stack.\n         * @returns {void}\n         * @private\n         */\n        function popStack() {\n            callbackStack.pop();\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            ArrowFunctionExpression: checkFunction,\n            \"ArrowFunctionExpression:exit\": popStack,\n\n            FunctionExpression: checkFunction,\n            \"FunctionExpression:exit\": popStack\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}