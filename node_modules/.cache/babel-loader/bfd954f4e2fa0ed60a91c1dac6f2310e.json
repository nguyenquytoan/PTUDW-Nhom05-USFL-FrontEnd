{"ast":null,"code":"import { noop, resolve, handleMaybeThenable, reject, fulfill, subscribe, FULFILLED, REJECTED, PENDING } from './-internal';\nimport { default as OwnPromise } from './promise';\nimport ownThen from './then';\nimport ownResolve from './promise/resolve';\nexport default class Enumerator {\n  constructor(Constructor, input, abortOnReject, label) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop, label);\n    this._abortOnReject = abortOnReject;\n    this._isUsingOwnPromise = Constructor === OwnPromise;\n    this._isUsingOwnResolve = Constructor.resolve === ownResolve;\n\n    this._init(...arguments);\n  }\n\n  _init(Constructor, input) {\n    let len = input.length || 0;\n    this.length = len;\n    this._remaining = len;\n    this._result = new Array(len);\n\n    this._enumerate(input);\n  }\n\n  _enumerate(input) {\n    let length = this.length;\n    let promise = this.promise;\n\n    for (let i = 0; promise._state === PENDING && i < length; i++) {\n      this._eachEntry(input[i], i, true);\n    }\n\n    this._checkFullfillment();\n  }\n\n  _checkFullfillment() {\n    if (this._remaining === 0) {\n      let result = this._result;\n      fulfill(this.promise, result);\n      this._result = null;\n    }\n  }\n\n  _settleMaybeThenable(entry, i, firstPass) {\n    let c = this._instanceConstructor;\n\n    if (this._isUsingOwnResolve) {\n      let then,\n          error,\n          succeeded = true;\n\n      try {\n        then = entry.then;\n      } catch (e) {\n        succeeded = false;\n        error = e;\n      }\n\n      if (then === ownThen && entry._state !== PENDING) {\n        entry._onError = null;\n\n        this._settledAt(entry._state, i, entry._result, firstPass);\n      } else if (typeof then !== 'function') {\n        this._settledAt(FULFILLED, i, entry, firstPass);\n      } else if (this._isUsingOwnPromise) {\n        let promise = new c(noop);\n\n        if (succeeded === false) {\n          reject(promise, error);\n        } else {\n          handleMaybeThenable(promise, entry, then);\n\n          this._willSettleAt(promise, i, firstPass);\n        }\n      } else {\n        this._willSettleAt(new c(resolve => resolve(entry)), i, firstPass);\n      }\n    } else {\n      this._willSettleAt(c.resolve(entry), i, firstPass);\n    }\n  }\n\n  _eachEntry(entry, i, firstPass) {\n    if (entry !== null && typeof entry === 'object') {\n      this._settleMaybeThenable(entry, i, firstPass);\n    } else {\n      this._setResultAt(FULFILLED, i, entry, firstPass);\n    }\n  }\n\n  _settledAt(state, i, value, firstPass) {\n    let promise = this.promise;\n\n    if (promise._state === PENDING) {\n      if (this._abortOnReject && state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._setResultAt(state, i, value, firstPass);\n\n        this._checkFullfillment();\n      }\n    }\n  }\n\n  _setResultAt(state, i, value, firstPass) {\n    this._remaining--;\n    this._result[i] = value;\n  }\n\n  _willSettleAt(promise, i, firstPass) {\n    subscribe(promise, undefined, value => this._settledAt(FULFILLED, i, value, firstPass), reason => this._settledAt(REJECTED, i, reason, firstPass));\n  }\n\n}\nexport function setSettledResult(state, i, value) {\n  this._remaining--;\n\n  if (state === FULFILLED) {\n    this._result[i] = {\n      state: 'fulfilled',\n      value: value\n    };\n  } else {\n    this._result[i] = {\n      state: 'rejected',\n      reason: value\n    };\n  }\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/rsvp/lib/rsvp/enumerator.js"],"names":["noop","resolve","handleMaybeThenable","reject","fulfill","subscribe","FULFILLED","REJECTED","PENDING","default","OwnPromise","ownThen","ownResolve","Enumerator","constructor","Constructor","input","abortOnReject","label","_instanceConstructor","promise","_abortOnReject","_isUsingOwnPromise","_isUsingOwnResolve","_init","arguments","len","length","_remaining","_result","Array","_enumerate","i","_state","_eachEntry","_checkFullfillment","result","_settleMaybeThenable","entry","firstPass","c","then","error","succeeded","e","_onError","_settledAt","_willSettleAt","_setResultAt","state","value","undefined","reason","setSettledResult"],"mappings":"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","sourcesContent":["import {\n  noop,\n  resolve,\n  handleMaybeThenable,\n  reject,\n  fulfill,\n  subscribe,\n  FULFILLED,\n  REJECTED,\n  PENDING,\n} from './-internal';\n\nimport { default as OwnPromise } from './promise';\nimport ownThen from './then';\nimport ownResolve from './promise/resolve';\n\nexport default class Enumerator {\n  constructor(Constructor, input, abortOnReject, label) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop, label);\n    this._abortOnReject = abortOnReject;\n    this._isUsingOwnPromise = Constructor === OwnPromise;\n    this._isUsingOwnResolve = Constructor.resolve === ownResolve;\n\n    this._init(...arguments);\n  }\n\n  _init(Constructor, input) {\n    let len = input.length || 0;\n    this.length     = len;\n    this._remaining = len;\n    this._result = new Array(len);\n\n    this._enumerate(input);\n  }\n\n  _enumerate(input) {\n    let length  = this.length;\n    let promise = this.promise;\n\n    for (let i = 0; promise._state === PENDING && i < length; i++) {\n      this._eachEntry(input[i], i, true);\n    }\n    this._checkFullfillment();\n  }\n\n  _checkFullfillment() {\n    if (this._remaining === 0) {\n      let result = this._result;\n      fulfill(this.promise, result);\n      this._result = null\n    }\n  }\n\n  _settleMaybeThenable(entry, i, firstPass) {\n    let c = this._instanceConstructor;\n\n    if (this._isUsingOwnResolve) {\n      let then, error, succeeded = true;\n      try {\n        then = entry.then;\n      } catch (e) {\n        succeeded = false;\n        error = e;\n      }\n\n      if (then === ownThen && entry._state !== PENDING) {\n        entry._onError = null;\n        this._settledAt(entry._state, i, entry._result, firstPass);\n      } else if (typeof then !== 'function') {\n        this._settledAt(FULFILLED, i, entry, firstPass);\n      } else if (this._isUsingOwnPromise) {\n        let promise = new c(noop);\n        if (succeeded === false) {\n          reject(promise, error);\n        } else {\n          handleMaybeThenable(promise, entry, then);\n          this._willSettleAt(promise, i, firstPass);\n        }\n      } else {\n        this._willSettleAt(new c(resolve => resolve(entry)), i, firstPass);\n      }\n    } else {\n      this._willSettleAt(c.resolve(entry), i, firstPass);\n    }\n  }\n\n  _eachEntry(entry, i, firstPass) {\n    if (entry !== null && typeof entry === 'object') {\n      this._settleMaybeThenable(entry, i, firstPass);\n    } else {\n      this._setResultAt(FULFILLED, i, entry, firstPass);\n    }\n  }\n\n  _settledAt(state, i, value, firstPass) {\n    let promise = this.promise;\n\n    if (promise._state === PENDING) {\n      if (this._abortOnReject && state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._setResultAt(state, i, value, firstPass);\n        this._checkFullfillment();\n      }\n    }\n  }\n\n  _setResultAt(state, i, value, firstPass) {\n    this._remaining--;\n    this._result[i] = value;\n  }\n\n  _willSettleAt(promise, i, firstPass) {\n    subscribe(\n      promise, undefined,\n      value  => this._settledAt(FULFILLED, i, value, firstPass),\n      reason => this._settledAt(REJECTED,  i, reason, firstPass)\n    );\n  }\n}\n\nexport function setSettledResult(state, i, value) {\n  this._remaining--;\n  if (state === FULFILLED) {\n    this._result[i] = {\n      state: 'fulfilled',\n      value: value\n    };\n  } else {\n     this._result[i] = {\n      state: 'rejected',\n      reason: value\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}