{"ast":null,"code":"'use strict';\n\nvar cssSelect = require('css-select');\n\nvar svgoCssSelectAdapter = require('./css-select-adapter');\n\nvar cssSelectOpts = {\n  xmlMode: true,\n  adapter: svgoCssSelectAdapter\n};\n\nvar JSAPI = module.exports = function (data, parentNode) {\n  Object.assign(this, data);\n\n  if (parentNode) {\n    Object.defineProperty(this, 'parentNode', {\n      writable: true,\n      value: parentNode\n    });\n  }\n};\n/**\n * Perform a deep clone of this node.\n *\n * @return {Object} element\n */\n\n\nJSAPI.prototype.clone = function () {\n  var node = this;\n  var nodeData = {};\n  Object.keys(node).forEach(function (key) {\n    if (key !== 'class' && key !== 'style' && key !== 'content') {\n      nodeData[key] = node[key];\n    }\n  }); // Deep-clone node data.\n\n  nodeData = JSON.parse(JSON.stringify(nodeData)); // parentNode gets set to a proper object by the parent clone,\n  // but it needs to be true/false now to do the right thing\n  // in the constructor.\n\n  var clonedNode = new JSAPI(nodeData, !!node.parentNode);\n\n  if (node.class) {\n    clonedNode.class = node.class.clone(clonedNode);\n  }\n\n  if (node.style) {\n    clonedNode.style = node.style.clone(clonedNode);\n  }\n\n  if (node.content) {\n    clonedNode.content = node.content.map(function (childNode) {\n      var clonedChild = childNode.clone();\n      clonedChild.parentNode = clonedNode;\n      return clonedChild;\n    });\n  }\n\n  return clonedNode;\n};\n/**\n * Determine if item is an element\n * (any, with a specific name or in a names array).\n *\n * @param {String|Array} [param] element name or names arrays\n * @return {Boolean}\n */\n\n\nJSAPI.prototype.isElem = function (param) {\n  if (!param) return !!this.elem;\n  if (Array.isArray(param)) return !!this.elem && param.indexOf(this.elem) > -1;\n  return !!this.elem && this.elem === param;\n};\n/**\n * Renames an element\n *\n * @param {String} name new element name\n * @return {Object} element\n */\n\n\nJSAPI.prototype.renameElem = function (name) {\n  if (name && typeof name === 'string') this.elem = this.local = name;\n  return this;\n};\n/**\n * Determine if element is empty.\n *\n * @return {Boolean}\n */\n\n\nJSAPI.prototype.isEmpty = function () {\n  return !this.content || !this.content.length;\n};\n/**\n * Find the closest ancestor of the current element.\n * @param elemName\n *\n * @return {?Object}\n */\n\n\nJSAPI.prototype.closestElem = function (elemName) {\n  var elem = this;\n\n  while ((elem = elem.parentNode) && !elem.isElem(elemName));\n\n  return elem;\n};\n/**\n * Changes content by removing elements and/or adding new elements.\n *\n * @param {Number} start Index at which to start changing the content.\n * @param {Number} n Number of elements to remove.\n * @param {Array|Object} [insertion] Elements to add to the content.\n * @return {Array} Removed elements.\n */\n\n\nJSAPI.prototype.spliceContent = function (start, n, insertion) {\n  if (arguments.length < 2) return [];\n  if (!Array.isArray(insertion)) insertion = Array.apply(null, arguments).slice(2);\n  insertion.forEach(function (inner) {\n    inner.parentNode = this;\n  }, this);\n  return this.content.splice.apply(this.content, [start, n].concat(insertion));\n};\n/**\n * Determine if element has an attribute\n * (any, or by name or by name + value).\n *\n * @param {String} [name] attribute name\n * @param {String} [val] attribute value (will be toString()'ed)\n * @return {Boolean}\n */\n\n\nJSAPI.prototype.hasAttr = function (name, val) {\n  if (!this.attrs || !Object.keys(this.attrs).length) return false;\n  if (!arguments.length) return !!this.attrs;\n  if (val !== undefined) return !!this.attrs[name] && this.attrs[name].value === val.toString();\n  return !!this.attrs[name];\n};\n/**\n * Determine if element has an attribute by local name\n * (any, or by name or by name + value).\n *\n * @param {String} [localName] local attribute name\n * @param {Number|String|RegExp|Function} [val] attribute value (will be toString()'ed or executed, otherwise ignored)\n * @return {Boolean}\n */\n\n\nJSAPI.prototype.hasAttrLocal = function (localName, val) {\n  if (!this.attrs || !Object.keys(this.attrs).length) return false;\n  if (!arguments.length) return !!this.attrs;\n  var callback;\n\n  switch (val != null && val.constructor && val.constructor.name) {\n    case 'Number': // same as String\n\n    case 'String':\n      callback = stringValueTest;\n      break;\n\n    case 'RegExp':\n      callback = regexpValueTest;\n      break;\n\n    case 'Function':\n      callback = funcValueTest;\n      break;\n\n    default:\n      callback = nameTest;\n  }\n\n  return this.someAttr(callback);\n\n  function nameTest(attr) {\n    return attr.local === localName;\n  }\n\n  function stringValueTest(attr) {\n    return attr.local === localName && val == attr.value;\n  }\n\n  function regexpValueTest(attr) {\n    return attr.local === localName && val.test(attr.value);\n  }\n\n  function funcValueTest(attr) {\n    return attr.local === localName && val(attr.value);\n  }\n};\n/**\n * Get a specific attribute from an element\n * (by name or name + value).\n *\n * @param {String} name attribute name\n * @param {String} [val] attribute value (will be toString()'ed)\n * @return {Object|Undefined}\n */\n\n\nJSAPI.prototype.attr = function (name, val) {\n  if (!this.hasAttr() || !arguments.length) return undefined;\n  if (val !== undefined) return this.hasAttr(name, val) ? this.attrs[name] : undefined;\n  return this.attrs[name];\n};\n/**\n * Get computed attribute value from an element\n *\n * @param {String} name attribute name\n * @return {Object|Undefined}\n */\n\n\nJSAPI.prototype.computedAttr = function (name, val) {\n  /* jshint eqnull: true */\n  if (!arguments.length) return;\n\n  for (var elem = this; elem && (!elem.hasAttr(name) || !elem.attr(name).value); elem = elem.parentNode);\n\n  if (val != null) {\n    return elem ? elem.hasAttr(name, val) : false;\n  } else if (elem && elem.hasAttr(name)) {\n    return elem.attrs[name].value;\n  }\n};\n/**\n * Remove a specific attribute.\n *\n * @param {String|Array} name attribute name\n * @param {String} [val] attribute value\n * @return {Boolean}\n */\n\n\nJSAPI.prototype.removeAttr = function (name, val, recursive) {\n  if (!arguments.length) return false;\n\n  if (Array.isArray(name)) {\n    name.forEach(this.removeAttr, this);\n    return false;\n  }\n\n  if (!this.hasAttr(name)) return false;\n  if (!recursive && val && this.attrs[name].value !== val) return false;\n  delete this.attrs[name];\n  if (!Object.keys(this.attrs).length) delete this.attrs;\n  return true;\n};\n/**\n * Add attribute.\n *\n * @param {Object} [attr={}] attribute object\n * @return {Object|Boolean} created attribute or false if no attr was passed in\n */\n\n\nJSAPI.prototype.addAttr = function (attr) {\n  attr = attr || {};\n  if (attr.name === undefined || attr.prefix === undefined || attr.local === undefined) return false;\n  this.attrs = this.attrs || {};\n  this.attrs[attr.name] = attr;\n\n  if (attr.name === 'class') {\n    // newly added class attribute\n    this.class.hasClass();\n  }\n\n  if (attr.name === 'style') {\n    // newly added style attribute\n    this.style.hasStyle();\n  }\n\n  return this.attrs[attr.name];\n};\n/**\n * Iterates over all attributes.\n *\n * @param {Function} callback callback\n * @param {Object} [context] callback context\n * @return {Boolean} false if there are no any attributes\n */\n\n\nJSAPI.prototype.eachAttr = function (callback, context) {\n  if (!this.hasAttr()) return false;\n\n  for (var name in this.attrs) {\n    callback.call(context, this.attrs[name]);\n  }\n\n  return true;\n};\n/**\n * Tests whether some attribute passes the test.\n *\n * @param {Function} callback callback\n * @param {Object} [context] callback context\n * @return {Boolean} false if there are no any attributes\n */\n\n\nJSAPI.prototype.someAttr = function (callback, context) {\n  if (!this.hasAttr()) return false;\n\n  for (var name in this.attrs) {\n    if (callback.call(context, this.attrs[name])) return true;\n  }\n\n  return false;\n};\n/**\n * Evaluate a string of CSS selectors against the element and returns matched elements.\n *\n * @param {String} selectors CSS selector(s) string\n * @return {Array} null if no elements matched\n */\n\n\nJSAPI.prototype.querySelectorAll = function (selectors) {\n  var matchedEls = cssSelect(selectors, this, cssSelectOpts);\n  return matchedEls.length > 0 ? matchedEls : null;\n};\n/**\n * Evaluate a string of CSS selectors against the element and returns only the first matched element.\n *\n * @param {String} selectors CSS selector(s) string\n * @return {Array} null if no element matched\n */\n\n\nJSAPI.prototype.querySelector = function (selectors) {\n  return cssSelect.selectOne(selectors, this, cssSelectOpts);\n};\n/**\n * Test if a selector matches a given element.\n *\n * @param {String} selector CSS selector string\n * @return {Boolean} true if element would be selected by selector string, false if it does not\n */\n\n\nJSAPI.prototype.matches = function (selector) {\n  return cssSelect.is(this, selector, cssSelectOpts);\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/svgo/lib/svgo/jsAPI.js"],"names":["cssSelect","require","svgoCssSelectAdapter","cssSelectOpts","xmlMode","adapter","JSAPI","module","exports","data","parentNode","Object","assign","defineProperty","writable","value","prototype","clone","node","nodeData","keys","forEach","key","JSON","parse","stringify","clonedNode","class","style","content","map","childNode","clonedChild","isElem","param","elem","Array","isArray","indexOf","renameElem","name","local","isEmpty","length","closestElem","elemName","spliceContent","start","n","insertion","arguments","apply","slice","inner","splice","concat","hasAttr","val","attrs","undefined","toString","hasAttrLocal","localName","callback","constructor","stringValueTest","regexpValueTest","funcValueTest","nameTest","someAttr","attr","test","computedAttr","removeAttr","recursive","addAttr","prefix","hasClass","hasStyle","eachAttr","context","call","querySelectorAll","selectors","matchedEls","querySelector","selectOne","matches","selector","is"],"mappings":"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","sourcesContent":["'use strict';\n\nvar cssSelect = require('css-select');\n\nvar svgoCssSelectAdapter = require('./css-select-adapter');\nvar cssSelectOpts = {\n  xmlMode: true,\n  adapter: svgoCssSelectAdapter\n};\n\nvar JSAPI = module.exports = function(data, parentNode) {\n    Object.assign(this, data);\n    if (parentNode) {\n        Object.defineProperty(this, 'parentNode', {\n            writable: true,\n            value: parentNode\n        });\n    }\n};\n\n/**\n * Perform a deep clone of this node.\n *\n * @return {Object} element\n */\nJSAPI.prototype.clone = function() {\n    var node = this;\n    var nodeData = {};\n\n    Object.keys(node).forEach(function(key) {\n        if (key !== 'class' && key !== 'style' && key !== 'content') {\n            nodeData[key] = node[key];\n        }\n    });\n\n    // Deep-clone node data.\n    nodeData = JSON.parse(JSON.stringify(nodeData));\n\n    // parentNode gets set to a proper object by the parent clone,\n    // but it needs to be true/false now to do the right thing\n    // in the constructor.\n    var clonedNode = new JSAPI(nodeData, !!node.parentNode);\n\n    if (node.class) {\n        clonedNode.class = node.class.clone(clonedNode);\n    }\n    if (node.style) {\n        clonedNode.style = node.style.clone(clonedNode);\n    }\n    if (node.content) {\n        clonedNode.content = node.content.map(function(childNode) {\n            var clonedChild = childNode.clone();\n            clonedChild.parentNode = clonedNode;\n            return clonedChild;\n        });\n    }\n\n    return clonedNode;\n};\n\n/**\n * Determine if item is an element\n * (any, with a specific name or in a names array).\n *\n * @param {String|Array} [param] element name or names arrays\n * @return {Boolean}\n */\nJSAPI.prototype.isElem = function(param) {\n\n    if (!param) return !!this.elem;\n\n    if (Array.isArray(param)) return !!this.elem && (param.indexOf(this.elem) > -1);\n\n    return !!this.elem && this.elem === param;\n\n};\n\n/**\n * Renames an element\n *\n * @param {String} name new element name\n * @return {Object} element\n */\nJSAPI.prototype.renameElem = function(name) {\n\n    if (name && typeof name === 'string')\n        this.elem = this.local = name;\n\n    return this;\n\n};\n\n/**\n * Determine if element is empty.\n *\n * @return {Boolean}\n */\n JSAPI.prototype.isEmpty = function() {\n\n    return !this.content || !this.content.length;\n\n};\n\n/**\n * Find the closest ancestor of the current element.\n * @param elemName\n *\n * @return {?Object}\n */\n JSAPI.prototype.closestElem = function(elemName) {\n    var elem = this;\n\n    while ((elem = elem.parentNode) && !elem.isElem(elemName));\n\n    return elem;\n};\n\n/**\n * Changes content by removing elements and/or adding new elements.\n *\n * @param {Number} start Index at which to start changing the content.\n * @param {Number} n Number of elements to remove.\n * @param {Array|Object} [insertion] Elements to add to the content.\n * @return {Array} Removed elements.\n */\n JSAPI.prototype.spliceContent = function(start, n, insertion) {\n\n    if (arguments.length < 2) return [];\n\n    if (!Array.isArray(insertion))\n        insertion = Array.apply(null, arguments).slice(2);\n\n    insertion.forEach(function(inner) { inner.parentNode = this }, this);\n\n    return this.content.splice.apply(this.content, [start, n].concat(insertion));\n\n\n};\n\n/**\n * Determine if element has an attribute\n * (any, or by name or by name + value).\n *\n * @param {String} [name] attribute name\n * @param {String} [val] attribute value (will be toString()'ed)\n * @return {Boolean}\n */\n JSAPI.prototype.hasAttr = function(name, val) {\n\n    if (!this.attrs || !Object.keys(this.attrs).length) return false;\n\n    if (!arguments.length) return !!this.attrs;\n\n    if (val !== undefined) return !!this.attrs[name] && this.attrs[name].value === val.toString();\n\n    return !!this.attrs[name];\n\n};\n\n/**\n * Determine if element has an attribute by local name\n * (any, or by name or by name + value).\n *\n * @param {String} [localName] local attribute name\n * @param {Number|String|RegExp|Function} [val] attribute value (will be toString()'ed or executed, otherwise ignored)\n * @return {Boolean}\n */\n JSAPI.prototype.hasAttrLocal = function(localName, val) {\n\n    if (!this.attrs || !Object.keys(this.attrs).length) return false;\n\n    if (!arguments.length) return !!this.attrs;\n\n    var callback;\n\n    switch (val != null && val.constructor && val.constructor.name) {\n        case 'Number':   // same as String\n        case 'String':   callback = stringValueTest; break;\n        case 'RegExp':   callback = regexpValueTest; break;\n        case 'Function': callback = funcValueTest; break;\n        default:         callback = nameTest;\n    }\n    return this.someAttr(callback);\n\n    function nameTest(attr) {\n        return attr.local === localName;\n    }\n\n    function stringValueTest(attr) {\n        return attr.local === localName && val == attr.value;\n    }\n\n    function regexpValueTest(attr) {\n        return attr.local === localName && val.test(attr.value);\n    }\n\n    function funcValueTest(attr) {\n        return attr.local === localName && val(attr.value);\n    }\n\n};\n\n/**\n * Get a specific attribute from an element\n * (by name or name + value).\n *\n * @param {String} name attribute name\n * @param {String} [val] attribute value (will be toString()'ed)\n * @return {Object|Undefined}\n */\n JSAPI.prototype.attr = function(name, val) {\n\n    if (!this.hasAttr() || !arguments.length) return undefined;\n\n    if (val !== undefined) return this.hasAttr(name, val) ? this.attrs[name] : undefined;\n\n    return this.attrs[name];\n\n};\n\n/**\n * Get computed attribute value from an element\n *\n * @param {String} name attribute name\n * @return {Object|Undefined}\n */\n JSAPI.prototype.computedAttr = function(name, val) {\n    /* jshint eqnull: true */\n    if (!arguments.length) return;\n\n    for (var elem = this; elem && (!elem.hasAttr(name) || !elem.attr(name).value); elem = elem.parentNode);\n\n    if (val != null) {\n        return elem ? elem.hasAttr(name, val) : false;\n    } else if (elem && elem.hasAttr(name)) {\n        return elem.attrs[name].value;\n    }\n\n};\n\n/**\n * Remove a specific attribute.\n *\n * @param {String|Array} name attribute name\n * @param {String} [val] attribute value\n * @return {Boolean}\n */\n JSAPI.prototype.removeAttr = function(name, val, recursive) {\n\n    if (!arguments.length) return false;\n\n    if (Array.isArray(name)) {\n        name.forEach(this.removeAttr, this);\n        return false;\n    }\n\n    if (!this.hasAttr(name)) return false;\n\n    if (!recursive && val && this.attrs[name].value !== val) return false;\n\n    delete this.attrs[name];\n\n    if (!Object.keys(this.attrs).length) delete this.attrs;\n\n    return true;\n\n};\n\n/**\n * Add attribute.\n *\n * @param {Object} [attr={}] attribute object\n * @return {Object|Boolean} created attribute or false if no attr was passed in\n */\n JSAPI.prototype.addAttr = function(attr) {\n    attr = attr || {};\n\n    if (attr.name === undefined ||\n        attr.prefix === undefined ||\n        attr.local === undefined\n    ) return false;\n\n    this.attrs = this.attrs || {};\n    this.attrs[attr.name] = attr;\n\n    if(attr.name === 'class') { // newly added class attribute\n        this.class.hasClass();\n    }\n\n    if(attr.name === 'style') { // newly added style attribute\n        this.style.hasStyle();\n    }\n\n    return this.attrs[attr.name];\n\n};\n\n/**\n * Iterates over all attributes.\n *\n * @param {Function} callback callback\n * @param {Object} [context] callback context\n * @return {Boolean} false if there are no any attributes\n */\n JSAPI.prototype.eachAttr = function(callback, context) {\n\n    if (!this.hasAttr()) return false;\n\n    for (var name in this.attrs) {\n        callback.call(context, this.attrs[name]);\n    }\n\n    return true;\n\n};\n\n/**\n * Tests whether some attribute passes the test.\n *\n * @param {Function} callback callback\n * @param {Object} [context] callback context\n * @return {Boolean} false if there are no any attributes\n */\n JSAPI.prototype.someAttr = function(callback, context) {\n\n    if (!this.hasAttr()) return false;\n\n    for (var name in this.attrs) {\n        if (callback.call(context, this.attrs[name])) return true;\n    }\n\n    return false;\n\n};\n\n/**\n * Evaluate a string of CSS selectors against the element and returns matched elements.\n *\n * @param {String} selectors CSS selector(s) string\n * @return {Array} null if no elements matched\n */\n JSAPI.prototype.querySelectorAll = function(selectors) {\n\n   var matchedEls = cssSelect(selectors, this, cssSelectOpts);\n\n   return matchedEls.length > 0 ? matchedEls : null;\n\n};\n\n/**\n * Evaluate a string of CSS selectors against the element and returns only the first matched element.\n *\n * @param {String} selectors CSS selector(s) string\n * @return {Array} null if no element matched\n */\n JSAPI.prototype.querySelector = function(selectors) {\n\n   return cssSelect.selectOne(selectors, this, cssSelectOpts);\n\n};\n\n/**\n * Test if a selector matches a given element.\n *\n * @param {String} selector CSS selector string\n * @return {Boolean} true if element would be selected by selector string, false if it does not\n */\n JSAPI.prototype.matches = function(selector) {\n\n   return cssSelect.is(this, selector, cssSelectOpts);\n\n};\n"]},"metadata":{},"sourceType":"script"}