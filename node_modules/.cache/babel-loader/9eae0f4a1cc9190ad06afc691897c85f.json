{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst address = require('address');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst url = require('url');\n\nconst chalk = require('chalk');\n\nconst detect = require('detect-port-alt');\n\nconst isRoot = require('is-root');\n\nconst inquirer = require('inquirer');\n\nconst clearConsole = require('./clearConsole');\n\nconst formatWebpackMessages = require('./formatWebpackMessages');\n\nconst getProcessForPort = require('./getProcessForPort');\n\nconst typescriptFormatter = require('./typescriptFormatter');\n\nconst forkTsCheckerWebpackPlugin = require('./ForkTsCheckerWebpackPlugin');\n\nconst isInteractive = process.stdout.isTTY;\n\nfunction prepareUrls(protocol, host, port, pathname = '/') {\n  const formatUrl = hostname => url.format({\n    protocol,\n    hostname,\n    port,\n    pathname\n  });\n\n  const prettyPrintUrl = hostname => url.format({\n    protocol,\n    hostname,\n    port: chalk.bold(port),\n    pathname\n  });\n\n  const isUnspecifiedHost = host === '0.0.0.0' || host === '::';\n  let prettyHost, lanUrlForConfig, lanUrlForTerminal;\n\n  if (isUnspecifiedHost) {\n    prettyHost = 'localhost';\n\n    try {\n      // This can only return an IPv4 address\n      lanUrlForConfig = address.ip();\n\n      if (lanUrlForConfig) {\n        // Check if the address is a private ip\n        // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces\n        if (/^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(lanUrlForConfig)) {\n          // Address is private, format it for later use\n          lanUrlForTerminal = prettyPrintUrl(lanUrlForConfig);\n        } else {\n          // Address is not private, so we will discard it\n          lanUrlForConfig = undefined;\n        }\n      }\n    } catch (_e) {// ignored\n    }\n  } else {\n    prettyHost = host;\n  }\n\n  const localUrlForTerminal = prettyPrintUrl(prettyHost);\n  const localUrlForBrowser = formatUrl(prettyHost);\n  return {\n    lanUrlForConfig,\n    lanUrlForTerminal,\n    localUrlForTerminal,\n    localUrlForBrowser\n  };\n}\n\nfunction printInstructions(appName, urls, useYarn) {\n  console.log();\n  console.log(`You can now view ${chalk.bold(appName)} in the browser.`);\n  console.log();\n\n  if (urls.lanUrlForTerminal) {\n    console.log(`  ${chalk.bold('Local:')}            ${urls.localUrlForTerminal}`);\n    console.log(`  ${chalk.bold('On Your Network:')}  ${urls.lanUrlForTerminal}`);\n  } else {\n    console.log(`  ${urls.localUrlForTerminal}`);\n  }\n\n  console.log();\n  console.log('Note that the development build is not optimized.');\n  console.log(`To create a production build, use ` + `${chalk.cyan(`${useYarn ? 'yarn' : 'npm run'} build`)}.`);\n  console.log();\n}\n\nfunction createCompiler({\n  appName,\n  config,\n  devSocket,\n  urls,\n  useYarn,\n  useTypeScript,\n  tscCompileOnError,\n  webpack\n}) {\n  // \"Compiler\" is a low-level interface to webpack.\n  // It lets us listen to some events and provide our own custom messages.\n  let compiler;\n\n  try {\n    compiler = webpack(config);\n  } catch (err) {\n    console.log(chalk.red('Failed to compile.'));\n    console.log();\n    console.log(err.message || err);\n    console.log();\n    process.exit(1);\n  } // \"invalid\" event fires when you have changed a file, and webpack is\n  // recompiling a bundle. WebpackDevServer takes care to pause serving the\n  // bundle, so if you refresh, it'll wait instead of serving the old one.\n  // \"invalid\" is short for \"bundle invalidated\", it doesn't imply any errors.\n\n\n  compiler.hooks.invalid.tap('invalid', () => {\n    if (isInteractive) {\n      clearConsole();\n    }\n\n    console.log('Compiling...');\n  });\n  let isFirstCompile = true;\n  let tsMessagesPromise;\n  let tsMessagesResolver;\n\n  if (useTypeScript) {\n    compiler.hooks.beforeCompile.tap('beforeCompile', () => {\n      tsMessagesPromise = new Promise(resolve => {\n        tsMessagesResolver = msgs => resolve(msgs);\n      });\n    });\n    forkTsCheckerWebpackPlugin.getCompilerHooks(compiler).receive.tap('afterTypeScriptCheck', (diagnostics, lints) => {\n      const allMsgs = [...diagnostics, ...lints];\n\n      const format = message => `${message.file}\\n${typescriptFormatter(message, true)}`;\n\n      tsMessagesResolver({\n        errors: allMsgs.filter(msg => msg.severity === 'error').map(format),\n        warnings: allMsgs.filter(msg => msg.severity === 'warning').map(format)\n      });\n    });\n  } // \"done\" event fires when webpack has finished recompiling the bundle.\n  // Whether or not you have warnings or errors, you will get this event.\n\n\n  compiler.hooks.done.tap('done', async stats => {\n    if (isInteractive) {\n      clearConsole();\n    } // We have switched off the default webpack output in WebpackDevServer\n    // options so we are going to \"massage\" the warnings and errors and present\n    // them in a readable focused way.\n    // We only construct the warnings and errors for speed:\n    // https://github.com/facebook/create-react-app/issues/4492#issuecomment-421959548\n\n\n    const statsData = stats.toJson({\n      all: false,\n      warnings: true,\n      errors: true\n    });\n\n    if (useTypeScript && statsData.errors.length === 0) {\n      const delayedMsg = setTimeout(() => {\n        console.log(chalk.yellow('Files successfully emitted, waiting for typecheck results...'));\n      }, 100);\n      const messages = await tsMessagesPromise;\n      clearTimeout(delayedMsg);\n\n      if (tscCompileOnError) {\n        statsData.warnings.push(...messages.errors);\n      } else {\n        statsData.errors.push(...messages.errors);\n      }\n\n      statsData.warnings.push(...messages.warnings); // Push errors and warnings into compilation result\n      // to show them after page refresh triggered by user.\n\n      if (tscCompileOnError) {\n        stats.compilation.warnings.push(...messages.errors);\n      } else {\n        stats.compilation.errors.push(...messages.errors);\n      }\n\n      stats.compilation.warnings.push(...messages.warnings);\n\n      if (messages.errors.length > 0) {\n        if (tscCompileOnError) {\n          devSocket.warnings(messages.errors);\n        } else {\n          devSocket.errors(messages.errors);\n        }\n      } else if (messages.warnings.length > 0) {\n        devSocket.warnings(messages.warnings);\n      }\n\n      if (isInteractive) {\n        clearConsole();\n      }\n    }\n\n    const messages = formatWebpackMessages(statsData);\n    const isSuccessful = !messages.errors.length && !messages.warnings.length;\n\n    if (isSuccessful) {\n      console.log(chalk.green('Compiled successfully!'));\n    }\n\n    if (isSuccessful && (isInteractive || isFirstCompile)) {\n      printInstructions(appName, urls, useYarn);\n    }\n\n    isFirstCompile = false; // If errors exist, only show errors.\n\n    if (messages.errors.length) {\n      // Only keep the first error. Others are often indicative\n      // of the same problem, but confuse the reader with noise.\n      if (messages.errors.length > 1) {\n        messages.errors.length = 1;\n      }\n\n      console.log(chalk.red('Failed to compile.\\n'));\n      console.log(messages.errors.join('\\n\\n'));\n      return;\n    } // Show warnings if no errors were found.\n\n\n    if (messages.warnings.length) {\n      console.log(chalk.yellow('Compiled with warnings.\\n'));\n      console.log(messages.warnings.join('\\n\\n')); // Teach some ESLint tricks.\n\n      console.log('\\nSearch for the ' + chalk.underline(chalk.yellow('keywords')) + ' to learn more about each warning.');\n      console.log('To ignore, add ' + chalk.cyan('// eslint-disable-next-line') + ' to the line before.\\n');\n    }\n  }); // You can safely remove this after ejecting.\n  // We only use this block for testing of Create React App itself:\n\n  const isSmokeTest = process.argv.some(arg => arg.indexOf('--smoke-test') > -1);\n\n  if (isSmokeTest) {\n    compiler.hooks.failed.tap('smokeTest', async () => {\n      await tsMessagesPromise;\n      process.exit(1);\n    });\n    compiler.hooks.done.tap('smokeTest', async stats => {\n      await tsMessagesPromise;\n\n      if (stats.hasErrors() || stats.hasWarnings()) {\n        process.exit(1);\n      } else {\n        process.exit(0);\n      }\n    });\n  }\n\n  return compiler;\n}\n\nfunction resolveLoopback(proxy) {\n  const o = url.parse(proxy);\n  o.host = undefined;\n\n  if (o.hostname !== 'localhost') {\n    return proxy;\n  } // Unfortunately, many languages (unlike node) do not yet support IPv6.\n  // This means even though localhost resolves to ::1, the application\n  // must fall back to IPv4 (on 127.0.0.1).\n  // We can re-enable this in a few years.\n\n  /*try {\n    o.hostname = address.ipv6() ? '::1' : '127.0.0.1';\n  } catch (_ignored) {\n    o.hostname = '127.0.0.1';\n  }*/\n\n\n  try {\n    // Check if we're on a network; if we are, chances are we can resolve\n    // localhost. Otherwise, we can just be safe and assume localhost is\n    // IPv4 for maximum compatibility.\n    if (!address.ip()) {\n      o.hostname = '127.0.0.1';\n    }\n  } catch (_ignored) {\n    o.hostname = '127.0.0.1';\n  }\n\n  return url.format(o);\n} // We need to provide a custom onError function for httpProxyMiddleware.\n// It allows us to log custom error messages on the console.\n\n\nfunction onProxyError(proxy) {\n  return (err, req, res) => {\n    const host = req.headers && req.headers.host;\n    console.log(chalk.red('Proxy error:') + ' Could not proxy request ' + chalk.cyan(req.url) + ' from ' + chalk.cyan(host) + ' to ' + chalk.cyan(proxy) + '.');\n    console.log('See https://nodejs.org/api/errors.html#errors_common_system_errors for more information (' + chalk.cyan(err.code) + ').');\n    console.log(); // And immediately send the proper error response to the client.\n    // Otherwise, the request will eventually timeout with ERR_EMPTY_RESPONSE on the client side.\n\n    if (res.writeHead && !res.headersSent) {\n      res.writeHead(500);\n    }\n\n    res.end('Proxy error: Could not proxy request ' + req.url + ' from ' + host + ' to ' + proxy + ' (' + err.code + ').');\n  };\n}\n\nfunction prepareProxy(proxy, appPublicFolder, servedPathname) {\n  // `proxy` lets you specify alternate servers for specific requests.\n  if (!proxy) {\n    return undefined;\n  }\n\n  if (typeof proxy !== 'string') {\n    console.log(chalk.red('When specified, \"proxy\" in package.json must be a string.'));\n    console.log(chalk.red('Instead, the type of \"proxy\" was \"' + typeof proxy + '\".'));\n    console.log(chalk.red('Either remove \"proxy\" from package.json, or make it a string.'));\n    process.exit(1);\n  } // If proxy is specified, let it handle any request except for\n  // files in the public folder and requests to the WebpackDevServer socket endpoint.\n  // https://github.com/facebook/create-react-app/issues/6720\n\n\n  const sockPath = process.env.WDS_SOCKET_PATH || '/sockjs-node';\n  const isDefaultSockHost = !process.env.WDS_SOCKET_HOST;\n\n  function mayProxy(pathname) {\n    const maybePublicPath = path.resolve(appPublicFolder, pathname.replace(new RegExp('^' + servedPathname), ''));\n    const isPublicFileRequest = fs.existsSync(maybePublicPath); // used by webpackHotDevClient\n\n    const isWdsEndpointRequest = isDefaultSockHost && pathname.startsWith(sockPath);\n    return !(isPublicFileRequest || isWdsEndpointRequest);\n  }\n\n  if (!/^http(s)?:\\/\\//.test(proxy)) {\n    console.log(chalk.red('When \"proxy\" is specified in package.json it must start with either http:// or https://'));\n    process.exit(1);\n  }\n\n  let target;\n\n  if (process.platform === 'win32') {\n    target = resolveLoopback(proxy);\n  } else {\n    target = proxy;\n  }\n\n  return [{\n    target,\n    logLevel: 'silent',\n    // For single page apps, we generally want to fallback to /index.html.\n    // However we also want to respect `proxy` for API calls.\n    // So if `proxy` is specified as a string, we need to decide which fallback to use.\n    // We use a heuristic: We want to proxy all the requests that are not meant\n    // for static assets and as all the requests for static assets will be using\n    // `GET` method, we can proxy all non-`GET` requests.\n    // For `GET` requests, if request `accept`s text/html, we pick /index.html.\n    // Modern browsers include text/html into `accept` header when navigating.\n    // However API calls like `fetch()` won’t generally accept text/html.\n    // If this heuristic doesn’t work well for you, use `src/setupProxy.js`.\n    context: function (pathname, req) {\n      return req.method !== 'GET' || mayProxy(pathname) && req.headers.accept && req.headers.accept.indexOf('text/html') === -1;\n    },\n    onProxyReq: proxyReq => {\n      // Browsers may send Origin headers even with same-origin\n      // requests. To prevent CORS issues, we have to change\n      // the Origin to match the target URL.\n      if (proxyReq.getHeader('origin')) {\n        proxyReq.setHeader('origin', target);\n      }\n    },\n    onError: onProxyError(target),\n    secure: false,\n    changeOrigin: true,\n    ws: true,\n    xfwd: true\n  }];\n}\n\nfunction choosePort(host, defaultPort) {\n  return detect(defaultPort, host).then(port => new Promise(resolve => {\n    if (port === defaultPort) {\n      return resolve(port);\n    }\n\n    const message = process.platform !== 'win32' && defaultPort < 1024 && !isRoot() ? `Admin permissions are required to run a server on a port below 1024.` : `Something is already running on port ${defaultPort}.`;\n\n    if (isInteractive) {\n      clearConsole();\n      const existingProcess = getProcessForPort(defaultPort);\n      const question = {\n        type: 'confirm',\n        name: 'shouldChangePort',\n        message: chalk.yellow(message + `${existingProcess ? ` Probably:\\n  ${existingProcess}` : ''}`) + '\\n\\nWould you like to run the app on another port instead?',\n        default: true\n      };\n      inquirer.prompt(question).then(answer => {\n        if (answer.shouldChangePort) {\n          resolve(port);\n        } else {\n          resolve(null);\n        }\n      });\n    } else {\n      console.log(chalk.red(message));\n      resolve(null);\n    }\n  }), err => {\n    throw new Error(chalk.red(`Could not find an open port at ${chalk.bold(host)}.`) + '\\n' + ('Network error message: ' + err.message || err) + '\\n');\n  });\n}\n\nmodule.exports = {\n  choosePort,\n  createCompiler,\n  prepareProxy,\n  prepareUrls\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-dev-utils/WebpackDevServerUtils.js"],"names":["address","require","fs","path","url","chalk","detect","isRoot","inquirer","clearConsole","formatWebpackMessages","getProcessForPort","typescriptFormatter","forkTsCheckerWebpackPlugin","isInteractive","process","stdout","isTTY","prepareUrls","protocol","host","port","pathname","formatUrl","hostname","format","prettyPrintUrl","bold","isUnspecifiedHost","prettyHost","lanUrlForConfig","lanUrlForTerminal","ip","test","undefined","_e","localUrlForTerminal","localUrlForBrowser","printInstructions","appName","urls","useYarn","console","log","cyan","createCompiler","config","devSocket","useTypeScript","tscCompileOnError","webpack","compiler","err","red","message","exit","hooks","invalid","tap","isFirstCompile","tsMessagesPromise","tsMessagesResolver","beforeCompile","Promise","resolve","msgs","getCompilerHooks","receive","diagnostics","lints","allMsgs","file","errors","filter","msg","severity","map","warnings","done","stats","statsData","toJson","all","length","delayedMsg","setTimeout","yellow","messages","clearTimeout","push","compilation","isSuccessful","green","join","underline","isSmokeTest","argv","some","arg","indexOf","failed","hasErrors","hasWarnings","resolveLoopback","proxy","o","parse","_ignored","onProxyError","req","res","headers","code","writeHead","headersSent","end","prepareProxy","appPublicFolder","servedPathname","sockPath","env","WDS_SOCKET_PATH","isDefaultSockHost","WDS_SOCKET_HOST","mayProxy","maybePublicPath","replace","RegExp","isPublicFileRequest","existsSync","isWdsEndpointRequest","startsWith","target","platform","logLevel","context","method","accept","onProxyReq","proxyReq","getHeader","setHeader","onError","secure","changeOrigin","ws","xfwd","choosePort","defaultPort","then","existingProcess","question","type","name","default","prompt","answer","shouldChangePort","Error","module","exports"],"mappings":"AAAA;;;;;;AAMA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,iBAAD,CAAtB;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMO,QAAQ,GAAGP,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMQ,YAAY,GAAGR,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAMS,qBAAqB,GAAGT,OAAO,CAAC,yBAAD,CAArC;;AACA,MAAMU,iBAAiB,GAAGV,OAAO,CAAC,qBAAD,CAAjC;;AACA,MAAMW,mBAAmB,GAAGX,OAAO,CAAC,uBAAD,CAAnC;;AACA,MAAMY,0BAA0B,GAAGZ,OAAO,CAAC,8BAAD,CAA1C;;AAEA,MAAMa,aAAa,GAAGC,OAAO,CAACC,MAAR,CAAeC,KAArC;;AAEA,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,QAAQ,GAAG,GAAtD,EAA2D;AACzD,QAAMC,SAAS,GAAGC,QAAQ,IACxBpB,GAAG,CAACqB,MAAJ,CAAW;AACTN,IAAAA,QADS;AAETK,IAAAA,QAFS;AAGTH,IAAAA,IAHS;AAITC,IAAAA;AAJS,GAAX,CADF;;AAOA,QAAMI,cAAc,GAAGF,QAAQ,IAC7BpB,GAAG,CAACqB,MAAJ,CAAW;AACTN,IAAAA,QADS;AAETK,IAAAA,QAFS;AAGTH,IAAAA,IAAI,EAAEhB,KAAK,CAACsB,IAAN,CAAWN,IAAX,CAHG;AAITC,IAAAA;AAJS,GAAX,CADF;;AAQA,QAAMM,iBAAiB,GAAGR,IAAI,KAAK,SAAT,IAAsBA,IAAI,KAAK,IAAzD;AACA,MAAIS,UAAJ,EAAgBC,eAAhB,EAAiCC,iBAAjC;;AACA,MAAIH,iBAAJ,EAAuB;AACrBC,IAAAA,UAAU,GAAG,WAAb;;AACA,QAAI;AACF;AACAC,MAAAA,eAAe,GAAG9B,OAAO,CAACgC,EAAR,EAAlB;;AACA,UAAIF,eAAJ,EAAqB;AACnB;AACA;AACA,YACE,wDAAwDG,IAAxD,CACEH,eADF,CADF,EAIE;AACA;AACAC,UAAAA,iBAAiB,GAAGL,cAAc,CAACI,eAAD,CAAlC;AACD,SAPD,MAOO;AACL;AACAA,UAAAA,eAAe,GAAGI,SAAlB;AACD;AACF;AACF,KAlBD,CAkBE,OAAOC,EAAP,EAAW,CACX;AACD;AACF,GAvBD,MAuBO;AACLN,IAAAA,UAAU,GAAGT,IAAb;AACD;;AACD,QAAMgB,mBAAmB,GAAGV,cAAc,CAACG,UAAD,CAA1C;AACA,QAAMQ,kBAAkB,GAAGd,SAAS,CAACM,UAAD,CAApC;AACA,SAAO;AACLC,IAAAA,eADK;AAELC,IAAAA,iBAFK;AAGLK,IAAAA,mBAHK;AAILC,IAAAA;AAJK,GAAP;AAMD;;AAED,SAASC,iBAAT,CAA2BC,OAA3B,EAAoCC,IAApC,EAA0CC,OAA1C,EAAmD;AACjDC,EAAAA,OAAO,CAACC,GAAR;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBtC,KAAK,CAACsB,IAAN,CAAWY,OAAX,CAAoB,kBAApD;AACAG,EAAAA,OAAO,CAACC,GAAR;;AAEA,MAAIH,IAAI,CAACT,iBAAT,EAA4B;AAC1BW,IAAAA,OAAO,CAACC,GAAR,CACG,KAAItC,KAAK,CAACsB,IAAN,CAAW,QAAX,CAAqB,eAAca,IAAI,CAACJ,mBAAoB,EADnE;AAGAM,IAAAA,OAAO,CAACC,GAAR,CACG,KAAItC,KAAK,CAACsB,IAAN,CAAW,kBAAX,CAA+B,KAAIa,IAAI,CAACT,iBAAkB,EADjE;AAGD,GAPD,MAOO;AACLW,IAAAA,OAAO,CAACC,GAAR,CAAa,KAAIH,IAAI,CAACJ,mBAAoB,EAA1C;AACD;;AAEDM,EAAAA,OAAO,CAACC,GAAR;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,mDAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CACG,oCAAD,GACG,GAAEtC,KAAK,CAACuC,IAAN,CAAY,GAAEH,OAAO,GAAG,MAAH,GAAY,SAAU,QAA3C,CAAoD,GAF3D;AAIAC,EAAAA,OAAO,CAACC,GAAR;AACD;;AAED,SAASE,cAAT,CAAwB;AACtBN,EAAAA,OADsB;AAEtBO,EAAAA,MAFsB;AAGtBC,EAAAA,SAHsB;AAItBP,EAAAA,IAJsB;AAKtBC,EAAAA,OALsB;AAMtBO,EAAAA,aANsB;AAOtBC,EAAAA,iBAPsB;AAQtBC,EAAAA;AARsB,CAAxB,EASG;AACD;AACA;AACA,MAAIC,QAAJ;;AACA,MAAI;AACFA,IAAAA,QAAQ,GAAGD,OAAO,CAACJ,MAAD,CAAlB;AACD,GAFD,CAEE,OAAOM,GAAP,EAAY;AACZV,IAAAA,OAAO,CAACC,GAAR,CAAYtC,KAAK,CAACgD,GAAN,CAAU,oBAAV,CAAZ;AACAX,IAAAA,OAAO,CAACC,GAAR;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYS,GAAG,CAACE,OAAJ,IAAeF,GAA3B;AACAV,IAAAA,OAAO,CAACC,GAAR;AACA5B,IAAAA,OAAO,CAACwC,IAAR,CAAa,CAAb;AACD,GAZA,CAcD;AACA;AACA;AACA;;;AACAJ,EAAAA,QAAQ,CAACK,KAAT,CAAeC,OAAf,CAAuBC,GAAvB,CAA2B,SAA3B,EAAsC,MAAM;AAC1C,QAAI5C,aAAJ,EAAmB;AACjBL,MAAAA,YAAY;AACb;;AACDiC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD,GALD;AAOA,MAAIgB,cAAc,GAAG,IAArB;AACA,MAAIC,iBAAJ;AACA,MAAIC,kBAAJ;;AAEA,MAAIb,aAAJ,EAAmB;AACjBG,IAAAA,QAAQ,CAACK,KAAT,CAAeM,aAAf,CAA6BJ,GAA7B,CAAiC,eAAjC,EAAkD,MAAM;AACtDE,MAAAA,iBAAiB,GAAG,IAAIG,OAAJ,CAAYC,OAAO,IAAI;AACzCH,QAAAA,kBAAkB,GAAGI,IAAI,IAAID,OAAO,CAACC,IAAD,CAApC;AACD,OAFmB,CAApB;AAGD,KAJD;AAMApD,IAAAA,0BAA0B,CACvBqD,gBADH,CACoBf,QADpB,EAEGgB,OAFH,CAEWT,GAFX,CAEe,sBAFf,EAEuC,CAACU,WAAD,EAAcC,KAAd,KAAwB;AAC3D,YAAMC,OAAO,GAAG,CAAC,GAAGF,WAAJ,EAAiB,GAAGC,KAApB,CAAhB;;AACA,YAAM5C,MAAM,GAAG6B,OAAO,IACnB,GAAEA,OAAO,CAACiB,IAAK,KAAI3D,mBAAmB,CAAC0C,OAAD,EAAU,IAAV,CAAgB,EADzD;;AAGAO,MAAAA,kBAAkB,CAAC;AACjBW,QAAAA,MAAM,EAAEF,OAAO,CAACG,MAAR,CAAeC,GAAG,IAAIA,GAAG,CAACC,QAAJ,KAAiB,OAAvC,EAAgDC,GAAhD,CAAoDnD,MAApD,CADS;AAEjBoD,QAAAA,QAAQ,EAAEP,OAAO,CACdG,MADO,CACAC,GAAG,IAAIA,GAAG,CAACC,QAAJ,KAAiB,SADxB,EAEPC,GAFO,CAEHnD,MAFG;AAFO,OAAD,CAAlB;AAMD,KAbH;AAcD,GAlDA,CAoDD;AACA;;;AACA0B,EAAAA,QAAQ,CAACK,KAAT,CAAesB,IAAf,CAAoBpB,GAApB,CAAwB,MAAxB,EAAgC,MAAMqB,KAAN,IAAe;AAC7C,QAAIjE,aAAJ,EAAmB;AACjBL,MAAAA,YAAY;AACb,KAH4C,CAK7C;AACA;AACA;AACA;AACA;;;AACA,UAAMuE,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC7BC,MAAAA,GAAG,EAAE,KADwB;AAE7BL,MAAAA,QAAQ,EAAE,IAFmB;AAG7BL,MAAAA,MAAM,EAAE;AAHqB,KAAb,CAAlB;;AAMA,QAAIxB,aAAa,IAAIgC,SAAS,CAACR,MAAV,CAAiBW,MAAjB,KAA4B,CAAjD,EAAoD;AAClD,YAAMC,UAAU,GAAGC,UAAU,CAAC,MAAM;AAClC3C,QAAAA,OAAO,CAACC,GAAR,CACEtC,KAAK,CAACiF,MAAN,CACE,8DADF,CADF;AAKD,OAN4B,EAM1B,GAN0B,CAA7B;AAQA,YAAMC,QAAQ,GAAG,MAAM3B,iBAAvB;AACA4B,MAAAA,YAAY,CAACJ,UAAD,CAAZ;;AACA,UAAInC,iBAAJ,EAAuB;AACrB+B,QAAAA,SAAS,CAACH,QAAV,CAAmBY,IAAnB,CAAwB,GAAGF,QAAQ,CAACf,MAApC;AACD,OAFD,MAEO;AACLQ,QAAAA,SAAS,CAACR,MAAV,CAAiBiB,IAAjB,CAAsB,GAAGF,QAAQ,CAACf,MAAlC;AACD;;AACDQ,MAAAA,SAAS,CAACH,QAAV,CAAmBY,IAAnB,CAAwB,GAAGF,QAAQ,CAACV,QAApC,EAhBkD,CAkBlD;AACA;;AACA,UAAI5B,iBAAJ,EAAuB;AACrB8B,QAAAA,KAAK,CAACW,WAAN,CAAkBb,QAAlB,CAA2BY,IAA3B,CAAgC,GAAGF,QAAQ,CAACf,MAA5C;AACD,OAFD,MAEO;AACLO,QAAAA,KAAK,CAACW,WAAN,CAAkBlB,MAAlB,CAAyBiB,IAAzB,CAA8B,GAAGF,QAAQ,CAACf,MAA1C;AACD;;AACDO,MAAAA,KAAK,CAACW,WAAN,CAAkBb,QAAlB,CAA2BY,IAA3B,CAAgC,GAAGF,QAAQ,CAACV,QAA5C;;AAEA,UAAIU,QAAQ,CAACf,MAAT,CAAgBW,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,YAAIlC,iBAAJ,EAAuB;AACrBF,UAAAA,SAAS,CAAC8B,QAAV,CAAmBU,QAAQ,CAACf,MAA5B;AACD,SAFD,MAEO;AACLzB,UAAAA,SAAS,CAACyB,MAAV,CAAiBe,QAAQ,CAACf,MAA1B;AACD;AACF,OAND,MAMO,IAAIe,QAAQ,CAACV,QAAT,CAAkBM,MAAlB,GAA2B,CAA/B,EAAkC;AACvCpC,QAAAA,SAAS,CAAC8B,QAAV,CAAmBU,QAAQ,CAACV,QAA5B;AACD;;AAED,UAAI/D,aAAJ,EAAmB;AACjBL,QAAAA,YAAY;AACb;AACF;;AAED,UAAM8E,QAAQ,GAAG7E,qBAAqB,CAACsE,SAAD,CAAtC;AACA,UAAMW,YAAY,GAAG,CAACJ,QAAQ,CAACf,MAAT,CAAgBW,MAAjB,IAA2B,CAACI,QAAQ,CAACV,QAAT,CAAkBM,MAAnE;;AACA,QAAIQ,YAAJ,EAAkB;AAChBjD,MAAAA,OAAO,CAACC,GAAR,CAAYtC,KAAK,CAACuF,KAAN,CAAY,wBAAZ,CAAZ;AACD;;AACD,QAAID,YAAY,KAAK7E,aAAa,IAAI6C,cAAtB,CAAhB,EAAuD;AACrDrB,MAAAA,iBAAiB,CAACC,OAAD,EAAUC,IAAV,EAAgBC,OAAhB,CAAjB;AACD;;AACDkB,IAAAA,cAAc,GAAG,KAAjB,CAlE6C,CAoE7C;;AACA,QAAI4B,QAAQ,CAACf,MAAT,CAAgBW,MAApB,EAA4B;AAC1B;AACA;AACA,UAAII,QAAQ,CAACf,MAAT,CAAgBW,MAAhB,GAAyB,CAA7B,EAAgC;AAC9BI,QAAAA,QAAQ,CAACf,MAAT,CAAgBW,MAAhB,GAAyB,CAAzB;AACD;;AACDzC,MAAAA,OAAO,CAACC,GAAR,CAAYtC,KAAK,CAACgD,GAAN,CAAU,sBAAV,CAAZ;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAY4C,QAAQ,CAACf,MAAT,CAAgBqB,IAAhB,CAAqB,MAArB,CAAZ;AACA;AACD,KA9E4C,CAgF7C;;;AACA,QAAIN,QAAQ,CAACV,QAAT,CAAkBM,MAAtB,EAA8B;AAC5BzC,MAAAA,OAAO,CAACC,GAAR,CAAYtC,KAAK,CAACiF,MAAN,CAAa,2BAAb,CAAZ;AACA5C,MAAAA,OAAO,CAACC,GAAR,CAAY4C,QAAQ,CAACV,QAAT,CAAkBgB,IAAlB,CAAuB,MAAvB,CAAZ,EAF4B,CAI5B;;AACAnD,MAAAA,OAAO,CAACC,GAAR,CACE,sBACEtC,KAAK,CAACyF,SAAN,CAAgBzF,KAAK,CAACiF,MAAN,CAAa,UAAb,CAAhB,CADF,GAEE,oCAHJ;AAKA5C,MAAAA,OAAO,CAACC,GAAR,CACE,oBACEtC,KAAK,CAACuC,IAAN,CAAW,6BAAX,CADF,GAEE,wBAHJ;AAKD;AACF,GAjGD,EAtDC,CAyJD;AACA;;AACA,QAAMmD,WAAW,GAAGhF,OAAO,CAACiF,IAAR,CAAaC,IAAb,CAClBC,GAAG,IAAIA,GAAG,CAACC,OAAJ,CAAY,cAAZ,IAA8B,CAAC,CADpB,CAApB;;AAGA,MAAIJ,WAAJ,EAAiB;AACf5C,IAAAA,QAAQ,CAACK,KAAT,CAAe4C,MAAf,CAAsB1C,GAAtB,CAA0B,WAA1B,EAAuC,YAAY;AACjD,YAAME,iBAAN;AACA7C,MAAAA,OAAO,CAACwC,IAAR,CAAa,CAAb;AACD,KAHD;AAIAJ,IAAAA,QAAQ,CAACK,KAAT,CAAesB,IAAf,CAAoBpB,GAApB,CAAwB,WAAxB,EAAqC,MAAMqB,KAAN,IAAe;AAClD,YAAMnB,iBAAN;;AACA,UAAImB,KAAK,CAACsB,SAAN,MAAqBtB,KAAK,CAACuB,WAAN,EAAzB,EAA8C;AAC5CvF,QAAAA,OAAO,CAACwC,IAAR,CAAa,CAAb;AACD,OAFD,MAEO;AACLxC,QAAAA,OAAO,CAACwC,IAAR,CAAa,CAAb;AACD;AACF,KAPD;AAQD;;AAED,SAAOJ,QAAP;AACD;;AAED,SAASoD,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,QAAMC,CAAC,GAAGrG,GAAG,CAACsG,KAAJ,CAAUF,KAAV,CAAV;AACAC,EAAAA,CAAC,CAACrF,IAAF,GAASc,SAAT;;AACA,MAAIuE,CAAC,CAACjF,QAAF,KAAe,WAAnB,EAAgC;AAC9B,WAAOgF,KAAP;AACD,GAL6B,CAM9B;AACA;AACA;AACA;;AACA;;;;;;;AAMA,MAAI;AACF;AACA;AACA;AACA,QAAI,CAACxG,OAAO,CAACgC,EAAR,EAAL,EAAmB;AACjByE,MAAAA,CAAC,CAACjF,QAAF,GAAa,WAAb;AACD;AACF,GAPD,CAOE,OAAOmF,QAAP,EAAiB;AACjBF,IAAAA,CAAC,CAACjF,QAAF,GAAa,WAAb;AACD;;AACD,SAAOpB,GAAG,CAACqB,MAAJ,CAAWgF,CAAX,CAAP;AACD,C,CAED;AACA;;;AACA,SAASG,YAAT,CAAsBJ,KAAtB,EAA6B;AAC3B,SAAO,CAACpD,GAAD,EAAMyD,GAAN,EAAWC,GAAX,KAAmB;AACxB,UAAM1F,IAAI,GAAGyF,GAAG,CAACE,OAAJ,IAAeF,GAAG,CAACE,OAAJ,CAAY3F,IAAxC;AACAsB,IAAAA,OAAO,CAACC,GAAR,CACEtC,KAAK,CAACgD,GAAN,CAAU,cAAV,IACE,2BADF,GAEEhD,KAAK,CAACuC,IAAN,CAAWiE,GAAG,CAACzG,GAAf,CAFF,GAGE,QAHF,GAIEC,KAAK,CAACuC,IAAN,CAAWxB,IAAX,CAJF,GAKE,MALF,GAMEf,KAAK,CAACuC,IAAN,CAAW4D,KAAX,CANF,GAOE,GARJ;AAUA9D,IAAAA,OAAO,CAACC,GAAR,CACE,8FACEtC,KAAK,CAACuC,IAAN,CAAWQ,GAAG,CAAC4D,IAAf,CADF,GAEE,IAHJ;AAKAtE,IAAAA,OAAO,CAACC,GAAR,GAjBwB,CAmBxB;AACA;;AACA,QAAImE,GAAG,CAACG,SAAJ,IAAiB,CAACH,GAAG,CAACI,WAA1B,EAAuC;AACrCJ,MAAAA,GAAG,CAACG,SAAJ,CAAc,GAAd;AACD;;AACDH,IAAAA,GAAG,CAACK,GAAJ,CACE,0CACEN,GAAG,CAACzG,GADN,GAEE,QAFF,GAGEgB,IAHF,GAIE,MAJF,GAKEoF,KALF,GAME,IANF,GAOEpD,GAAG,CAAC4D,IAPN,GAQE,IATJ;AAWD,GAnCD;AAoCD;;AAED,SAASI,YAAT,CAAsBZ,KAAtB,EAA6Ba,eAA7B,EAA8CC,cAA9C,EAA8D;AAC5D;AACA,MAAI,CAACd,KAAL,EAAY;AACV,WAAOtE,SAAP;AACD;;AACD,MAAI,OAAOsE,KAAP,KAAiB,QAArB,EAA+B;AAC7B9D,IAAAA,OAAO,CAACC,GAAR,CACEtC,KAAK,CAACgD,GAAN,CAAU,2DAAV,CADF;AAGAX,IAAAA,OAAO,CAACC,GAAR,CACEtC,KAAK,CAACgD,GAAN,CAAU,uCAAuC,OAAOmD,KAA9C,GAAsD,IAAhE,CADF;AAGA9D,IAAAA,OAAO,CAACC,GAAR,CACEtC,KAAK,CAACgD,GAAN,CAAU,+DAAV,CADF;AAGAtC,IAAAA,OAAO,CAACwC,IAAR,CAAa,CAAb;AACD,GAhB2D,CAkB5D;AACA;AACA;;;AACA,QAAMgE,QAAQ,GAAGxG,OAAO,CAACyG,GAAR,CAAYC,eAAZ,IAA+B,cAAhD;AACA,QAAMC,iBAAiB,GAAG,CAAC3G,OAAO,CAACyG,GAAR,CAAYG,eAAvC;;AACA,WAASC,QAAT,CAAkBtG,QAAlB,EAA4B;AAC1B,UAAMuG,eAAe,GAAG1H,IAAI,CAAC6D,OAAL,CACtBqD,eADsB,EAEtB/F,QAAQ,CAACwG,OAAT,CAAiB,IAAIC,MAAJ,CAAW,MAAMT,cAAjB,CAAjB,EAAmD,EAAnD,CAFsB,CAAxB;AAIA,UAAMU,mBAAmB,GAAG9H,EAAE,CAAC+H,UAAH,CAAcJ,eAAd,CAA5B,CAL0B,CAM1B;;AACA,UAAMK,oBAAoB,GACxBR,iBAAiB,IAAIpG,QAAQ,CAAC6G,UAAT,CAAoBZ,QAApB,CADvB;AAEA,WAAO,EAAES,mBAAmB,IAAIE,oBAAzB,CAAP;AACD;;AAED,MAAI,CAAC,iBAAiBjG,IAAjB,CAAsBuE,KAAtB,CAAL,EAAmC;AACjC9D,IAAAA,OAAO,CAACC,GAAR,CACEtC,KAAK,CAACgD,GAAN,CACE,yFADF,CADF;AAKAtC,IAAAA,OAAO,CAACwC,IAAR,CAAa,CAAb;AACD;;AAED,MAAI6E,MAAJ;;AACA,MAAIrH,OAAO,CAACsH,QAAR,KAAqB,OAAzB,EAAkC;AAChCD,IAAAA,MAAM,GAAG7B,eAAe,CAACC,KAAD,CAAxB;AACD,GAFD,MAEO;AACL4B,IAAAA,MAAM,GAAG5B,KAAT;AACD;;AACD,SAAO,CACL;AACE4B,IAAAA,MADF;AAEEE,IAAAA,QAAQ,EAAE,QAFZ;AAGE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,OAAO,EAAE,UAASjH,QAAT,EAAmBuF,GAAnB,EAAwB;AAC/B,aACEA,GAAG,CAAC2B,MAAJ,KAAe,KAAf,IACCZ,QAAQ,CAACtG,QAAD,CAAR,IACCuF,GAAG,CAACE,OAAJ,CAAY0B,MADb,IAEC5B,GAAG,CAACE,OAAJ,CAAY0B,MAAZ,CAAmBtC,OAAnB,CAA2B,WAA3B,MAA4C,CAAC,CAJjD;AAMD,KApBH;AAqBEuC,IAAAA,UAAU,EAAEC,QAAQ,IAAI;AACtB;AACA;AACA;AACA,UAAIA,QAAQ,CAACC,SAAT,CAAmB,QAAnB,CAAJ,EAAkC;AAChCD,QAAAA,QAAQ,CAACE,SAAT,CAAmB,QAAnB,EAA6BT,MAA7B;AACD;AACF,KA5BH;AA6BEU,IAAAA,OAAO,EAAElC,YAAY,CAACwB,MAAD,CA7BvB;AA8BEW,IAAAA,MAAM,EAAE,KA9BV;AA+BEC,IAAAA,YAAY,EAAE,IA/BhB;AAgCEC,IAAAA,EAAE,EAAE,IAhCN;AAiCEC,IAAAA,IAAI,EAAE;AAjCR,GADK,CAAP;AAqCD;;AAED,SAASC,UAAT,CAAoB/H,IAApB,EAA0BgI,WAA1B,EAAuC;AACrC,SAAO9I,MAAM,CAAC8I,WAAD,EAAchI,IAAd,CAAN,CAA0BiI,IAA1B,CACLhI,IAAI,IACF,IAAI0C,OAAJ,CAAYC,OAAO,IAAI;AACrB,QAAI3C,IAAI,KAAK+H,WAAb,EAA0B;AACxB,aAAOpF,OAAO,CAAC3C,IAAD,CAAd;AACD;;AACD,UAAMiC,OAAO,GACXvC,OAAO,CAACsH,QAAR,KAAqB,OAArB,IAAgCe,WAAW,GAAG,IAA9C,IAAsD,CAAC7I,MAAM,EAA7D,GACK,sEADL,GAEK,wCAAuC6I,WAAY,GAH1D;;AAIA,QAAItI,aAAJ,EAAmB;AACjBL,MAAAA,YAAY;AACZ,YAAM6I,eAAe,GAAG3I,iBAAiB,CAACyI,WAAD,CAAzC;AACA,YAAMG,QAAQ,GAAG;AACfC,QAAAA,IAAI,EAAE,SADS;AAEfC,QAAAA,IAAI,EAAE,kBAFS;AAGfnG,QAAAA,OAAO,EACLjD,KAAK,CAACiF,MAAN,CACEhC,OAAO,GACJ,GAAEgG,eAAe,GAAI,iBAAgBA,eAAgB,EAApC,GAAwC,EAAG,EAFjE,IAGI,4DAPS;AAQfI,QAAAA,OAAO,EAAE;AARM,OAAjB;AAUAlJ,MAAAA,QAAQ,CAACmJ,MAAT,CAAgBJ,QAAhB,EAA0BF,IAA1B,CAA+BO,MAAM,IAAI;AACvC,YAAIA,MAAM,CAACC,gBAAX,EAA6B;AAC3B7F,UAAAA,OAAO,CAAC3C,IAAD,CAAP;AACD,SAFD,MAEO;AACL2C,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,OAND;AAOD,KApBD,MAoBO;AACLtB,MAAAA,OAAO,CAACC,GAAR,CAAYtC,KAAK,CAACgD,GAAN,CAAUC,OAAV,CAAZ;AACAU,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,GAhCD,CAFG,EAmCLZ,GAAG,IAAI;AACL,UAAM,IAAI0G,KAAJ,CACJzJ,KAAK,CAACgD,GAAN,CAAW,kCAAiChD,KAAK,CAACsB,IAAN,CAAWP,IAAX,CAAiB,GAA7D,IACE,IADF,IAEG,4BAA4BgC,GAAG,CAACE,OAAhC,IAA2CF,GAF9C,IAGE,IAJE,CAAN;AAMD,GA1CI,CAAP;AA4CD;;AAED2G,MAAM,CAACC,OAAP,GAAiB;AACfb,EAAAA,UADe;AAEftG,EAAAA,cAFe;AAGfuE,EAAAA,YAHe;AAIflG,EAAAA;AAJe,CAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst address = require('address');\nconst fs = require('fs');\nconst path = require('path');\nconst url = require('url');\nconst chalk = require('chalk');\nconst detect = require('detect-port-alt');\nconst isRoot = require('is-root');\nconst inquirer = require('inquirer');\nconst clearConsole = require('./clearConsole');\nconst formatWebpackMessages = require('./formatWebpackMessages');\nconst getProcessForPort = require('./getProcessForPort');\nconst typescriptFormatter = require('./typescriptFormatter');\nconst forkTsCheckerWebpackPlugin = require('./ForkTsCheckerWebpackPlugin');\n\nconst isInteractive = process.stdout.isTTY;\n\nfunction prepareUrls(protocol, host, port, pathname = '/') {\n  const formatUrl = hostname =>\n    url.format({\n      protocol,\n      hostname,\n      port,\n      pathname,\n    });\n  const prettyPrintUrl = hostname =>\n    url.format({\n      protocol,\n      hostname,\n      port: chalk.bold(port),\n      pathname,\n    });\n\n  const isUnspecifiedHost = host === '0.0.0.0' || host === '::';\n  let prettyHost, lanUrlForConfig, lanUrlForTerminal;\n  if (isUnspecifiedHost) {\n    prettyHost = 'localhost';\n    try {\n      // This can only return an IPv4 address\n      lanUrlForConfig = address.ip();\n      if (lanUrlForConfig) {\n        // Check if the address is a private ip\n        // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces\n        if (\n          /^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(\n            lanUrlForConfig\n          )\n        ) {\n          // Address is private, format it for later use\n          lanUrlForTerminal = prettyPrintUrl(lanUrlForConfig);\n        } else {\n          // Address is not private, so we will discard it\n          lanUrlForConfig = undefined;\n        }\n      }\n    } catch (_e) {\n      // ignored\n    }\n  } else {\n    prettyHost = host;\n  }\n  const localUrlForTerminal = prettyPrintUrl(prettyHost);\n  const localUrlForBrowser = formatUrl(prettyHost);\n  return {\n    lanUrlForConfig,\n    lanUrlForTerminal,\n    localUrlForTerminal,\n    localUrlForBrowser,\n  };\n}\n\nfunction printInstructions(appName, urls, useYarn) {\n  console.log();\n  console.log(`You can now view ${chalk.bold(appName)} in the browser.`);\n  console.log();\n\n  if (urls.lanUrlForTerminal) {\n    console.log(\n      `  ${chalk.bold('Local:')}            ${urls.localUrlForTerminal}`\n    );\n    console.log(\n      `  ${chalk.bold('On Your Network:')}  ${urls.lanUrlForTerminal}`\n    );\n  } else {\n    console.log(`  ${urls.localUrlForTerminal}`);\n  }\n\n  console.log();\n  console.log('Note that the development build is not optimized.');\n  console.log(\n    `To create a production build, use ` +\n      `${chalk.cyan(`${useYarn ? 'yarn' : 'npm run'} build`)}.`\n  );\n  console.log();\n}\n\nfunction createCompiler({\n  appName,\n  config,\n  devSocket,\n  urls,\n  useYarn,\n  useTypeScript,\n  tscCompileOnError,\n  webpack,\n}) {\n  // \"Compiler\" is a low-level interface to webpack.\n  // It lets us listen to some events and provide our own custom messages.\n  let compiler;\n  try {\n    compiler = webpack(config);\n  } catch (err) {\n    console.log(chalk.red('Failed to compile.'));\n    console.log();\n    console.log(err.message || err);\n    console.log();\n    process.exit(1);\n  }\n\n  // \"invalid\" event fires when you have changed a file, and webpack is\n  // recompiling a bundle. WebpackDevServer takes care to pause serving the\n  // bundle, so if you refresh, it'll wait instead of serving the old one.\n  // \"invalid\" is short for \"bundle invalidated\", it doesn't imply any errors.\n  compiler.hooks.invalid.tap('invalid', () => {\n    if (isInteractive) {\n      clearConsole();\n    }\n    console.log('Compiling...');\n  });\n\n  let isFirstCompile = true;\n  let tsMessagesPromise;\n  let tsMessagesResolver;\n\n  if (useTypeScript) {\n    compiler.hooks.beforeCompile.tap('beforeCompile', () => {\n      tsMessagesPromise = new Promise(resolve => {\n        tsMessagesResolver = msgs => resolve(msgs);\n      });\n    });\n\n    forkTsCheckerWebpackPlugin\n      .getCompilerHooks(compiler)\n      .receive.tap('afterTypeScriptCheck', (diagnostics, lints) => {\n        const allMsgs = [...diagnostics, ...lints];\n        const format = message =>\n          `${message.file}\\n${typescriptFormatter(message, true)}`;\n\n        tsMessagesResolver({\n          errors: allMsgs.filter(msg => msg.severity === 'error').map(format),\n          warnings: allMsgs\n            .filter(msg => msg.severity === 'warning')\n            .map(format),\n        });\n      });\n  }\n\n  // \"done\" event fires when webpack has finished recompiling the bundle.\n  // Whether or not you have warnings or errors, you will get this event.\n  compiler.hooks.done.tap('done', async stats => {\n    if (isInteractive) {\n      clearConsole();\n    }\n\n    // We have switched off the default webpack output in WebpackDevServer\n    // options so we are going to \"massage\" the warnings and errors and present\n    // them in a readable focused way.\n    // We only construct the warnings and errors for speed:\n    // https://github.com/facebook/create-react-app/issues/4492#issuecomment-421959548\n    const statsData = stats.toJson({\n      all: false,\n      warnings: true,\n      errors: true,\n    });\n\n    if (useTypeScript && statsData.errors.length === 0) {\n      const delayedMsg = setTimeout(() => {\n        console.log(\n          chalk.yellow(\n            'Files successfully emitted, waiting for typecheck results...'\n          )\n        );\n      }, 100);\n\n      const messages = await tsMessagesPromise;\n      clearTimeout(delayedMsg);\n      if (tscCompileOnError) {\n        statsData.warnings.push(...messages.errors);\n      } else {\n        statsData.errors.push(...messages.errors);\n      }\n      statsData.warnings.push(...messages.warnings);\n\n      // Push errors and warnings into compilation result\n      // to show them after page refresh triggered by user.\n      if (tscCompileOnError) {\n        stats.compilation.warnings.push(...messages.errors);\n      } else {\n        stats.compilation.errors.push(...messages.errors);\n      }\n      stats.compilation.warnings.push(...messages.warnings);\n\n      if (messages.errors.length > 0) {\n        if (tscCompileOnError) {\n          devSocket.warnings(messages.errors);\n        } else {\n          devSocket.errors(messages.errors);\n        }\n      } else if (messages.warnings.length > 0) {\n        devSocket.warnings(messages.warnings);\n      }\n\n      if (isInteractive) {\n        clearConsole();\n      }\n    }\n\n    const messages = formatWebpackMessages(statsData);\n    const isSuccessful = !messages.errors.length && !messages.warnings.length;\n    if (isSuccessful) {\n      console.log(chalk.green('Compiled successfully!'));\n    }\n    if (isSuccessful && (isInteractive || isFirstCompile)) {\n      printInstructions(appName, urls, useYarn);\n    }\n    isFirstCompile = false;\n\n    // If errors exist, only show errors.\n    if (messages.errors.length) {\n      // Only keep the first error. Others are often indicative\n      // of the same problem, but confuse the reader with noise.\n      if (messages.errors.length > 1) {\n        messages.errors.length = 1;\n      }\n      console.log(chalk.red('Failed to compile.\\n'));\n      console.log(messages.errors.join('\\n\\n'));\n      return;\n    }\n\n    // Show warnings if no errors were found.\n    if (messages.warnings.length) {\n      console.log(chalk.yellow('Compiled with warnings.\\n'));\n      console.log(messages.warnings.join('\\n\\n'));\n\n      // Teach some ESLint tricks.\n      console.log(\n        '\\nSearch for the ' +\n          chalk.underline(chalk.yellow('keywords')) +\n          ' to learn more about each warning.'\n      );\n      console.log(\n        'To ignore, add ' +\n          chalk.cyan('// eslint-disable-next-line') +\n          ' to the line before.\\n'\n      );\n    }\n  });\n\n  // You can safely remove this after ejecting.\n  // We only use this block for testing of Create React App itself:\n  const isSmokeTest = process.argv.some(\n    arg => arg.indexOf('--smoke-test') > -1\n  );\n  if (isSmokeTest) {\n    compiler.hooks.failed.tap('smokeTest', async () => {\n      await tsMessagesPromise;\n      process.exit(1);\n    });\n    compiler.hooks.done.tap('smokeTest', async stats => {\n      await tsMessagesPromise;\n      if (stats.hasErrors() || stats.hasWarnings()) {\n        process.exit(1);\n      } else {\n        process.exit(0);\n      }\n    });\n  }\n\n  return compiler;\n}\n\nfunction resolveLoopback(proxy) {\n  const o = url.parse(proxy);\n  o.host = undefined;\n  if (o.hostname !== 'localhost') {\n    return proxy;\n  }\n  // Unfortunately, many languages (unlike node) do not yet support IPv6.\n  // This means even though localhost resolves to ::1, the application\n  // must fall back to IPv4 (on 127.0.0.1).\n  // We can re-enable this in a few years.\n  /*try {\n    o.hostname = address.ipv6() ? '::1' : '127.0.0.1';\n  } catch (_ignored) {\n    o.hostname = '127.0.0.1';\n  }*/\n\n  try {\n    // Check if we're on a network; if we are, chances are we can resolve\n    // localhost. Otherwise, we can just be safe and assume localhost is\n    // IPv4 for maximum compatibility.\n    if (!address.ip()) {\n      o.hostname = '127.0.0.1';\n    }\n  } catch (_ignored) {\n    o.hostname = '127.0.0.1';\n  }\n  return url.format(o);\n}\n\n// We need to provide a custom onError function for httpProxyMiddleware.\n// It allows us to log custom error messages on the console.\nfunction onProxyError(proxy) {\n  return (err, req, res) => {\n    const host = req.headers && req.headers.host;\n    console.log(\n      chalk.red('Proxy error:') +\n        ' Could not proxy request ' +\n        chalk.cyan(req.url) +\n        ' from ' +\n        chalk.cyan(host) +\n        ' to ' +\n        chalk.cyan(proxy) +\n        '.'\n    );\n    console.log(\n      'See https://nodejs.org/api/errors.html#errors_common_system_errors for more information (' +\n        chalk.cyan(err.code) +\n        ').'\n    );\n    console.log();\n\n    // And immediately send the proper error response to the client.\n    // Otherwise, the request will eventually timeout with ERR_EMPTY_RESPONSE on the client side.\n    if (res.writeHead && !res.headersSent) {\n      res.writeHead(500);\n    }\n    res.end(\n      'Proxy error: Could not proxy request ' +\n        req.url +\n        ' from ' +\n        host +\n        ' to ' +\n        proxy +\n        ' (' +\n        err.code +\n        ').'\n    );\n  };\n}\n\nfunction prepareProxy(proxy, appPublicFolder, servedPathname) {\n  // `proxy` lets you specify alternate servers for specific requests.\n  if (!proxy) {\n    return undefined;\n  }\n  if (typeof proxy !== 'string') {\n    console.log(\n      chalk.red('When specified, \"proxy\" in package.json must be a string.')\n    );\n    console.log(\n      chalk.red('Instead, the type of \"proxy\" was \"' + typeof proxy + '\".')\n    );\n    console.log(\n      chalk.red('Either remove \"proxy\" from package.json, or make it a string.')\n    );\n    process.exit(1);\n  }\n\n  // If proxy is specified, let it handle any request except for\n  // files in the public folder and requests to the WebpackDevServer socket endpoint.\n  // https://github.com/facebook/create-react-app/issues/6720\n  const sockPath = process.env.WDS_SOCKET_PATH || '/sockjs-node';\n  const isDefaultSockHost = !process.env.WDS_SOCKET_HOST;\n  function mayProxy(pathname) {\n    const maybePublicPath = path.resolve(\n      appPublicFolder,\n      pathname.replace(new RegExp('^' + servedPathname), '')\n    );\n    const isPublicFileRequest = fs.existsSync(maybePublicPath);\n    // used by webpackHotDevClient\n    const isWdsEndpointRequest =\n      isDefaultSockHost && pathname.startsWith(sockPath);\n    return !(isPublicFileRequest || isWdsEndpointRequest);\n  }\n\n  if (!/^http(s)?:\\/\\//.test(proxy)) {\n    console.log(\n      chalk.red(\n        'When \"proxy\" is specified in package.json it must start with either http:// or https://'\n      )\n    );\n    process.exit(1);\n  }\n\n  let target;\n  if (process.platform === 'win32') {\n    target = resolveLoopback(proxy);\n  } else {\n    target = proxy;\n  }\n  return [\n    {\n      target,\n      logLevel: 'silent',\n      // For single page apps, we generally want to fallback to /index.html.\n      // However we also want to respect `proxy` for API calls.\n      // So if `proxy` is specified as a string, we need to decide which fallback to use.\n      // We use a heuristic: We want to proxy all the requests that are not meant\n      // for static assets and as all the requests for static assets will be using\n      // `GET` method, we can proxy all non-`GET` requests.\n      // For `GET` requests, if request `accept`s text/html, we pick /index.html.\n      // Modern browsers include text/html into `accept` header when navigating.\n      // However API calls like `fetch()` won’t generally accept text/html.\n      // If this heuristic doesn’t work well for you, use `src/setupProxy.js`.\n      context: function(pathname, req) {\n        return (\n          req.method !== 'GET' ||\n          (mayProxy(pathname) &&\n            req.headers.accept &&\n            req.headers.accept.indexOf('text/html') === -1)\n        );\n      },\n      onProxyReq: proxyReq => {\n        // Browsers may send Origin headers even with same-origin\n        // requests. To prevent CORS issues, we have to change\n        // the Origin to match the target URL.\n        if (proxyReq.getHeader('origin')) {\n          proxyReq.setHeader('origin', target);\n        }\n      },\n      onError: onProxyError(target),\n      secure: false,\n      changeOrigin: true,\n      ws: true,\n      xfwd: true,\n    },\n  ];\n}\n\nfunction choosePort(host, defaultPort) {\n  return detect(defaultPort, host).then(\n    port =>\n      new Promise(resolve => {\n        if (port === defaultPort) {\n          return resolve(port);\n        }\n        const message =\n          process.platform !== 'win32' && defaultPort < 1024 && !isRoot()\n            ? `Admin permissions are required to run a server on a port below 1024.`\n            : `Something is already running on port ${defaultPort}.`;\n        if (isInteractive) {\n          clearConsole();\n          const existingProcess = getProcessForPort(defaultPort);\n          const question = {\n            type: 'confirm',\n            name: 'shouldChangePort',\n            message:\n              chalk.yellow(\n                message +\n                  `${existingProcess ? ` Probably:\\n  ${existingProcess}` : ''}`\n              ) + '\\n\\nWould you like to run the app on another port instead?',\n            default: true,\n          };\n          inquirer.prompt(question).then(answer => {\n            if (answer.shouldChangePort) {\n              resolve(port);\n            } else {\n              resolve(null);\n            }\n          });\n        } else {\n          console.log(chalk.red(message));\n          resolve(null);\n        }\n      }),\n    err => {\n      throw new Error(\n        chalk.red(`Could not find an open port at ${chalk.bold(host)}.`) +\n          '\\n' +\n          ('Network error message: ' + err.message || err) +\n          '\\n'\n      );\n    }\n  );\n}\n\nmodule.exports = {\n  choosePort,\n  createCompiler,\n  prepareProxy,\n  prepareUrls,\n};\n"]},"metadata":{},"sourceType":"script"}