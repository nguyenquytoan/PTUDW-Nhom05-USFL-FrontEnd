{"ast":null,"code":"var tape = require('tape');\n\nvar Hash = require('../hash');\n\nvar hex = '0A1B2C3D4E5F6G7H';\n\nfunction equal(t, a, b) {\n  t.equal(a.length, b.length);\n  t.equal(a.toString('hex'), b.toString('hex'));\n}\n\nvar hexBuf = Buffer.from('0A1B2C3D4E5F6G7H', 'utf8');\nvar count16 = {\n  strings: ['0A1B2C3D4E5F6G7H'],\n  buffers: [hexBuf, Buffer.from('80000000000000000000000000000080', 'hex')]\n};\nvar empty = {\n  strings: [''],\n  buffers: [Buffer.from('80000000000000000000000000000000', 'hex')]\n};\nvar multi = {\n  strings: ['abcd', 'efhijk', 'lmnopq'],\n  buffers: [Buffer.from('abcdefhijklmnopq', 'ascii'), Buffer.from('80000000000000000000000000000080', 'hex')]\n};\nvar long = {\n  strings: [hex + hex],\n  buffers: [hexBuf, hexBuf, Buffer.from('80000000000000000000000000000100', 'hex')]\n};\n\nfunction makeTest(name, data) {\n  tape(name, function (t) {\n    var h = new Hash(16, 8);\n    var hash = Buffer.alloc(20);\n    var n = 2;\n    var expected = data.buffers.slice(); // t.plan(expected.length + 1)\n\n    h._update = function (block) {\n      var e = expected.shift();\n      equal(t, block, e);\n\n      if (n < 0) {\n        throw new Error('expecting only 2 calls to _update');\n      }\n    };\n\n    h._hash = function () {\n      return hash;\n    };\n\n    data.strings.forEach(function (string) {\n      h.update(string, 'ascii');\n    });\n    equal(t, h.digest(), hash);\n    t.end();\n  });\n}\n\nmakeTest('Hash#update 1 in 1', count16);\nmakeTest('empty Hash#update', empty);\nmakeTest('Hash#update 1 in 3', multi);\nmakeTest('Hash#update 2 in 1', long);","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/sha.js/test/hash.js"],"names":["tape","require","Hash","hex","equal","t","a","b","length","toString","hexBuf","Buffer","from","count16","strings","buffers","empty","multi","long","makeTest","name","data","h","hash","alloc","n","expected","slice","_update","block","e","shift","Error","_hash","forEach","string","update","digest","end"],"mappings":"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","sourcesContent":["var tape = require('tape')\nvar Hash = require('../hash')\nvar hex = '0A1B2C3D4E5F6G7H'\n\nfunction equal (t, a, b) {\n  t.equal(a.length, b.length)\n  t.equal(a.toString('hex'), b.toString('hex'))\n}\n\nvar hexBuf = Buffer.from('0A1B2C3D4E5F6G7H', 'utf8')\nvar count16 = {\n  strings: ['0A1B2C3D4E5F6G7H'],\n  buffers: [\n    hexBuf,\n    Buffer.from('80000000000000000000000000000080', 'hex')\n  ]\n}\n\nvar empty = {\n  strings: [''],\n  buffers: [\n    Buffer.from('80000000000000000000000000000000', 'hex')\n  ]\n}\n\nvar multi = {\n  strings: ['abcd', 'efhijk', 'lmnopq'],\n  buffers: [\n    Buffer.from('abcdefhijklmnopq', 'ascii'),\n    Buffer.from('80000000000000000000000000000080', 'hex')\n  ]\n}\n\nvar long = {\n  strings: [hex + hex],\n  buffers: [\n    hexBuf,\n    hexBuf,\n    Buffer.from('80000000000000000000000000000100', 'hex')\n  ]\n}\n\nfunction makeTest (name, data) {\n  tape(name, function (t) {\n    var h = new Hash(16, 8)\n    var hash = Buffer.alloc(20)\n    var n = 2\n    var expected = data.buffers.slice()\n    // t.plan(expected.length + 1)\n\n    h._update = function (block) {\n      var e = expected.shift()\n      equal(t, block, e)\n\n      if (n < 0) {\n        throw new Error('expecting only 2 calls to _update')\n      }\n    }\n    h._hash = function () {\n      return hash\n    }\n\n    data.strings.forEach(function (string) {\n      h.update(string, 'ascii')\n    })\n\n    equal(t, h.digest(), hash)\n    t.end()\n  })\n}\n\nmakeTest('Hash#update 1 in 1', count16)\nmakeTest('empty Hash#update', empty)\nmakeTest('Hash#update 1 in 3', multi)\nmakeTest('Hash#update 2 in 1', long)\n"]},"metadata":{},"sourceType":"script"}