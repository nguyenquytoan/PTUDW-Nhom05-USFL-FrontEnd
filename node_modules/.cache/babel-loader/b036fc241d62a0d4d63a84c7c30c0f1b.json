{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _normalizeUrl = require('normalize-url');\n\nvar _normalizeUrl2 = _interopRequireDefault(_normalizeUrl);\n\nvar _isAbsoluteUrl = require('is-absolute-url');\n\nvar _isAbsoluteUrl2 = _interopRequireDefault(_isAbsoluteUrl);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst multiline = /\\\\[\\r\\n]/;\nconst escapeChars = /([\\s\\(\\)\"'])/g;\n\nfunction convert(url, options) {\n  if ((0, _isAbsoluteUrl2.default)(url) || url.startsWith('//')) {\n    let normalizedURL = null;\n\n    try {\n      normalizedURL = (0, _normalizeUrl2.default)(url, options);\n    } catch (e) {\n      normalizedURL = url;\n    }\n\n    return normalizedURL;\n  } // `path.normalize` always returns backslashes on Windows, need replace in `/`\n\n\n  return _path2.default.normalize(url).replace(new RegExp('\\\\' + _path2.default.sep, 'g'), '/');\n}\n\nfunction transformNamespace(rule) {\n  rule.params = (0, _postcssValueParser2.default)(rule.params).walk(node => {\n    if (node.type === 'function' && node.value.toLowerCase() === 'url' && node.nodes.length) {\n      node.type = 'string';\n      node.quote = node.nodes[0].quote || '\"';\n      node.value = node.nodes[0].value;\n    }\n\n    if (node.type === 'string') {\n      node.value = node.value.trim();\n    }\n\n    return false;\n  }).toString();\n}\n\nfunction transformDecl(decl, opts) {\n  decl.value = (0, _postcssValueParser2.default)(decl.value).walk(node => {\n    if (node.type !== 'function' || node.value.toLowerCase() !== 'url' || !node.nodes.length) {\n      return false;\n    }\n\n    let url = node.nodes[0];\n    let escaped;\n    node.before = node.after = '';\n    url.value = url.value.trim().replace(multiline, ''); // Skip empty URLs\n    // Empty URL function equals request to current stylesheet where it is declared\n\n    if (url.value.length === 0) {\n      url.quote = '';\n      return false;\n    }\n\n    if (/^data:(.*)?,/i.test(url.value)) {\n      return false;\n    }\n\n    if (!/^.+-extension:\\//i.test(url.value)) {\n      url.value = convert(url.value, opts);\n    }\n\n    if (escapeChars.test(url.value) && url.type === 'string') {\n      escaped = url.value.replace(escapeChars, '\\\\$1');\n\n      if (escaped.length < url.value.length + 2) {\n        url.value = escaped;\n        url.type = 'word';\n      }\n    } else {\n      url.type = 'word';\n    }\n\n    return false;\n  }).toString();\n}\n\nexports.default = _postcss2.default.plugin('postcss-normalize-url', opts => {\n  opts = Object.assign({}, {\n    normalizeProtocol: false,\n    stripFragment: false,\n    stripWWW: false\n  }, opts);\n  return css => {\n    css.walk(node => {\n      if (node.type === 'decl') {\n        return transformDecl(node, opts);\n      } else if (node.type === 'atrule' && node.name.toLowerCase() === 'namespace') {\n        return transformNamespace(node);\n      }\n    });\n  };\n});\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-normalize-url/dist/index.js"],"names":["Object","defineProperty","exports","value","_path","require","_path2","_interopRequireDefault","_postcss","_postcss2","_postcssValueParser","_postcssValueParser2","_normalizeUrl","_normalizeUrl2","_isAbsoluteUrl","_isAbsoluteUrl2","obj","__esModule","default","multiline","escapeChars","convert","url","options","startsWith","normalizedURL","e","normalize","replace","RegExp","sep","transformNamespace","rule","params","walk","node","type","toLowerCase","nodes","length","quote","trim","toString","transformDecl","decl","opts","escaped","before","after","test","plugin","assign","normalizeProtocol","stripFragment","stripWWW","css","name","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _normalizeUrl = require('normalize-url');\n\nvar _normalizeUrl2 = _interopRequireDefault(_normalizeUrl);\n\nvar _isAbsoluteUrl = require('is-absolute-url');\n\nvar _isAbsoluteUrl2 = _interopRequireDefault(_isAbsoluteUrl);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst multiline = /\\\\[\\r\\n]/;\nconst escapeChars = /([\\s\\(\\)\"'])/g;\n\nfunction convert(url, options) {\n    if ((0, _isAbsoluteUrl2.default)(url) || url.startsWith('//')) {\n        let normalizedURL = null;\n\n        try {\n            normalizedURL = (0, _normalizeUrl2.default)(url, options);\n        } catch (e) {\n            normalizedURL = url;\n        }\n\n        return normalizedURL;\n    }\n\n    // `path.normalize` always returns backslashes on Windows, need replace in `/`\n    return _path2.default.normalize(url).replace(new RegExp('\\\\' + _path2.default.sep, 'g'), '/');\n}\n\nfunction transformNamespace(rule) {\n    rule.params = (0, _postcssValueParser2.default)(rule.params).walk(node => {\n        if (node.type === 'function' && node.value.toLowerCase() === 'url' && node.nodes.length) {\n            node.type = 'string';\n            node.quote = node.nodes[0].quote || '\"';\n            node.value = node.nodes[0].value;\n        }\n        if (node.type === 'string') {\n            node.value = node.value.trim();\n        }\n        return false;\n    }).toString();\n}\n\nfunction transformDecl(decl, opts) {\n    decl.value = (0, _postcssValueParser2.default)(decl.value).walk(node => {\n        if (node.type !== 'function' || node.value.toLowerCase() !== 'url' || !node.nodes.length) {\n            return false;\n        }\n\n        let url = node.nodes[0];\n        let escaped;\n\n        node.before = node.after = '';\n        url.value = url.value.trim().replace(multiline, '');\n\n        // Skip empty URLs\n        // Empty URL function equals request to current stylesheet where it is declared\n        if (url.value.length === 0) {\n            url.quote = '';\n\n            return false;\n        }\n\n        if (/^data:(.*)?,/i.test(url.value)) {\n            return false;\n        }\n\n        if (!/^.+-extension:\\//i.test(url.value)) {\n            url.value = convert(url.value, opts);\n        }\n\n        if (escapeChars.test(url.value) && url.type === 'string') {\n            escaped = url.value.replace(escapeChars, '\\\\$1');\n            if (escaped.length < url.value.length + 2) {\n                url.value = escaped;\n                url.type = 'word';\n            }\n        } else {\n            url.type = 'word';\n        }\n\n        return false;\n    }).toString();\n}\n\nexports.default = _postcss2.default.plugin('postcss-normalize-url', opts => {\n    opts = Object.assign({}, {\n        normalizeProtocol: false,\n        stripFragment: false,\n        stripWWW: false\n    }, opts);\n\n    return css => {\n        css.walk(node => {\n            if (node.type === 'decl') {\n                return transformDecl(node, opts);\n            } else if (node.type === 'atrule' && node.name.toLowerCase() === 'namespace') {\n                return transformNamespace(node);\n            }\n        });\n    };\n});\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}