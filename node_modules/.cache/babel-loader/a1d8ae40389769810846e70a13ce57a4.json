{"ast":null,"code":"// @remove-on-eject-begin\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst crypto = require('crypto');\n\nconst chalk = require('react-dev-utils/chalk');\n\nconst paths = require('./paths'); // Ensure the certificate and key provided are valid and if not\n// throw an easy to debug error\n\n\nfunction validateKeyAndCerts({\n  cert,\n  key,\n  keyFile,\n  crtFile\n}) {\n  let encrypted;\n\n  try {\n    // publicEncrypt will throw an error with an invalid cert\n    encrypted = crypto.publicEncrypt(cert, Buffer.from('test'));\n  } catch (err) {\n    throw new Error(`The certificate \"${chalk.yellow(crtFile)}\" is invalid.\\n${err.message}`);\n  }\n\n  try {\n    // privateDecrypt will throw an error with an invalid key\n    crypto.privateDecrypt(key, encrypted);\n  } catch (err) {\n    throw new Error(`The certificate key \"${chalk.yellow(keyFile)}\" is invalid.\\n${err.message}`);\n  }\n} // Read file and throw an error if it doesn't exist\n\n\nfunction readEnvFile(file, type) {\n  if (!fs.existsSync(file)) {\n    throw new Error(`You specified ${chalk.cyan(type)} in your env, but the file \"${chalk.yellow(file)}\" can't be found.`);\n  }\n\n  return fs.readFileSync(file);\n} // Get the https config\n// Return cert files if provided in env, otherwise just true or false\n\n\nfunction getHttpsConfig() {\n  const {\n    SSL_CRT_FILE,\n    SSL_KEY_FILE,\n    HTTPS\n  } = process.env;\n  const isHttps = HTTPS === 'true';\n\n  if (isHttps && SSL_CRT_FILE && SSL_KEY_FILE) {\n    const crtFile = path.resolve(paths.appPath, SSL_CRT_FILE);\n    const keyFile = path.resolve(paths.appPath, SSL_KEY_FILE);\n    const config = {\n      cert: readEnvFile(crtFile, 'SSL_CRT_FILE'),\n      key: readEnvFile(keyFile, 'SSL_KEY_FILE')\n    };\n    validateKeyAndCerts({ ...config,\n      keyFile,\n      crtFile\n    });\n    return config;\n  }\n\n  return isHttps;\n}\n\nmodule.exports = getHttpsConfig;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-scripts/config/getHttpsConfig.js"],"names":["fs","require","path","crypto","chalk","paths","validateKeyAndCerts","cert","key","keyFile","crtFile","encrypted","publicEncrypt","Buffer","from","err","Error","yellow","message","privateDecrypt","readEnvFile","file","type","existsSync","cyan","readFileSync","getHttpsConfig","SSL_CRT_FILE","SSL_KEY_FILE","HTTPS","process","env","isHttps","resolve","appPath","config","module","exports"],"mappings":"AAAA;;AACA;;;;;;AAMA;AACA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,uBAAD,CAArB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,SAAD,CAArB,C,CAEA;AACA;;;AACA,SAASK,mBAAT,CAA6B;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,GAAR;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,CAA7B,EAA8D;AAC5D,MAAIC,SAAJ;;AACA,MAAI;AACF;AACAA,IAAAA,SAAS,GAAGR,MAAM,CAACS,aAAP,CAAqBL,IAArB,EAA2BM,MAAM,CAACC,IAAP,CAAY,MAAZ,CAA3B,CAAZ;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CACH,oBAAmBZ,KAAK,CAACa,MAAN,CAAaP,OAAb,CAAsB,kBAAiBK,GAAG,CAACG,OAAQ,EADnE,CAAN;AAGD;;AAED,MAAI;AACF;AACAf,IAAAA,MAAM,CAACgB,cAAP,CAAsBX,GAAtB,EAA2BG,SAA3B;AACD,GAHD,CAGE,OAAOI,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CACH,wBAAuBZ,KAAK,CAACa,MAAN,CAAaR,OAAb,CAAsB,kBAC5CM,GAAG,CAACG,OACL,EAHG,CAAN;AAKD;AACF,C,CAED;;;AACA,SAASE,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiC;AAC/B,MAAI,CAACtB,EAAE,CAACuB,UAAH,CAAcF,IAAd,CAAL,EAA0B;AACxB,UAAM,IAAIL,KAAJ,CACH,iBAAgBZ,KAAK,CAACoB,IAAN,CACfF,IADe,CAEf,+BAA8BlB,KAAK,CAACa,MAAN,CAAaI,IAAb,CAAmB,mBAH/C,CAAN;AAKD;;AACD,SAAOrB,EAAE,CAACyB,YAAH,CAAgBJ,IAAhB,CAAP;AACD,C,CAED;AACA;;;AACA,SAASK,cAAT,GAA0B;AACxB,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,YAAhB;AAA8BC,IAAAA;AAA9B,MAAwCC,OAAO,CAACC,GAAtD;AACA,QAAMC,OAAO,GAAGH,KAAK,KAAK,MAA1B;;AAEA,MAAIG,OAAO,IAAIL,YAAX,IAA2BC,YAA/B,EAA6C;AAC3C,UAAMlB,OAAO,GAAGR,IAAI,CAAC+B,OAAL,CAAa5B,KAAK,CAAC6B,OAAnB,EAA4BP,YAA5B,CAAhB;AACA,UAAMlB,OAAO,GAAGP,IAAI,CAAC+B,OAAL,CAAa5B,KAAK,CAAC6B,OAAnB,EAA4BN,YAA5B,CAAhB;AACA,UAAMO,MAAM,GAAG;AACb5B,MAAAA,IAAI,EAAEa,WAAW,CAACV,OAAD,EAAU,cAAV,CADJ;AAEbF,MAAAA,GAAG,EAAEY,WAAW,CAACX,OAAD,EAAU,cAAV;AAFH,KAAf;AAKAH,IAAAA,mBAAmB,CAAC,EAAE,GAAG6B,MAAL;AAAa1B,MAAAA,OAAb;AAAsBC,MAAAA;AAAtB,KAAD,CAAnB;AACA,WAAOyB,MAAP;AACD;;AACD,SAAOH,OAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBX,cAAjB","sourcesContent":["// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst crypto = require('crypto');\nconst chalk = require('react-dev-utils/chalk');\nconst paths = require('./paths');\n\n// Ensure the certificate and key provided are valid and if not\n// throw an easy to debug error\nfunction validateKeyAndCerts({ cert, key, keyFile, crtFile }) {\n  let encrypted;\n  try {\n    // publicEncrypt will throw an error with an invalid cert\n    encrypted = crypto.publicEncrypt(cert, Buffer.from('test'));\n  } catch (err) {\n    throw new Error(\n      `The certificate \"${chalk.yellow(crtFile)}\" is invalid.\\n${err.message}`\n    );\n  }\n\n  try {\n    // privateDecrypt will throw an error with an invalid key\n    crypto.privateDecrypt(key, encrypted);\n  } catch (err) {\n    throw new Error(\n      `The certificate key \"${chalk.yellow(keyFile)}\" is invalid.\\n${\n        err.message\n      }`\n    );\n  }\n}\n\n// Read file and throw an error if it doesn't exist\nfunction readEnvFile(file, type) {\n  if (!fs.existsSync(file)) {\n    throw new Error(\n      `You specified ${chalk.cyan(\n        type\n      )} in your env, but the file \"${chalk.yellow(file)}\" can't be found.`\n    );\n  }\n  return fs.readFileSync(file);\n}\n\n// Get the https config\n// Return cert files if provided in env, otherwise just true or false\nfunction getHttpsConfig() {\n  const { SSL_CRT_FILE, SSL_KEY_FILE, HTTPS } = process.env;\n  const isHttps = HTTPS === 'true';\n\n  if (isHttps && SSL_CRT_FILE && SSL_KEY_FILE) {\n    const crtFile = path.resolve(paths.appPath, SSL_CRT_FILE);\n    const keyFile = path.resolve(paths.appPath, SSL_KEY_FILE);\n    const config = {\n      cert: readEnvFile(crtFile, 'SSL_CRT_FILE'),\n      key: readEnvFile(keyFile, 'SSL_KEY_FILE'),\n    };\n\n    validateKeyAndCerts({ ...config, keyFile, crtFile });\n    return config;\n  }\n  return isHttps;\n}\n\nmodule.exports = getHttpsConfig;\n"]},"metadata":{},"sourceType":"script"}