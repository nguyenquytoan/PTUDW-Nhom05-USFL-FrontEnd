{"ast":null,"code":"\"use strict\";\n/**\n * Character classes for XML.\n *\n * @deprecated since 1.3.0. Import from the ``xml`` and ``xmlns`` hierarchies\n * instead.\n *\n * @author Louis-Dominique Dubeau\n * @license MIT\n * @copyright Louis-Dominique Dubeau\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ed4 = require(\"./xml/1.0/ed4\");\n\nvar ed5 = require(\"./xml/1.0/ed5\");\n\nvar nsed3 = require(\"./xmlns/1.0/ed3\"); // tslint:disable-next-line:no-console\n\n\nconsole.warn(\"DEPRECATION WARNING: the xmlchar *module* is deprecated: please \\\nreplace e.g. require('xmlchars') with require('xmlchars/xml/...')\");\n/**\n * Character class utilities for XML 1.0.\n */\n// tslint:disable-next-line:no-namespace\n\nvar XML_1_0;\n\n(function (XML_1_0) {\n  /**\n   * Fifth edition.\n   */\n  var ED5;\n\n  (function (ED5) {\n    /**\n     * Regular expression fragments. These fragments are designed to be included\n     * inside square brackets in a regular expression.\n     */\n    var fragments;\n\n    (function (fragments) {\n      fragments.CHAR = ed5.CHAR;\n      fragments.S = ed5.S;\n      fragments.NAME_START_CHAR = ed5.NAME_START_CHAR;\n      fragments.NAME_CHAR = ed5.NAME_CHAR;\n    })(fragments = ED5.fragments || (ED5.fragments = {}));\n    /**\n     * Regular expression. These correspond to the productions of the same name\n     * in the specification.\n     */\n\n\n    var regexes;\n\n    (function (regexes) {\n      regexes.CHAR = ed5.CHAR_RE;\n      regexes.S = ed5.S_RE;\n      regexes.NAME_START_CHAR = ed5.NAME_START_CHAR_RE;\n      regexes.NAME_CHAR = ed5.NAME_CHAR_RE;\n      regexes.NAME = ed5.NAME_RE;\n      regexes.NMTOKEN = ed5.NMTOKEN_RE;\n    })(regexes = ED5.regexes || (ED5.regexes = {}));\n    /**\n     * Lists of characters.\n     *\n     * The names defined in this namespace are arrays of codepoints which\n     * contain the set of codepoints that an XML production encompasses. Note\n     * that many productions are too large to be reasonably represented as sets.\n     */\n\n\n    var lists;\n\n    (function (lists) {\n      lists.S = ed5.S_LIST;\n    })(lists = ED5.lists || (ED5.lists = {}));\n    /**\n     * Determines whether a codepoint matches the ``CHAR`` production.\n     *\n     * @param c The code point.\n     *\n     * @returns ``true`` if the codepoint matches ``CHAR``.\n     */\n\n\n    ED5.isChar = ed5.isChar;\n    /**\n     * Determines whether a codepoint matches the ``S`` (space) production.\n     *\n     * @param c The code point.\n     *\n     * @returns ``true`` if the codepoint matches ``S``.\n     */\n\n    ED5.isS = ed5.isS;\n    /**\n     * Determines whether a codepoint matches the ``NAME_START_CHAR``\n     * production.\n     *\n     * @param c The code point.\n     *\n     * @returns ``true`` if the codepoint matches ``NAME_START_CHAR``.\n     */\n\n    ED5.isNameStartChar = ed5.isNameStartChar;\n    /**\n     * Determines whether a codepoint matches the ``NAME_CHAR`` production.\n     *\n     * @param c The code point.\n     *\n     * @returns ``true`` if the codepoint matches ``NAME_CHAR``.\n     */\n\n    ED5.isNameChar = ed5.isNameChar;\n  })(ED5 = XML_1_0.ED5 || (XML_1_0.ED5 = {}));\n  /**\n   * Fourth edition. These are deprecated in the 5th edition but some of the\n   * standards related to XML 1.0 (e.g. XML Schema 1.0) refer to these. So they\n   * are still generally useful.\n   */\n\n\n  var ED4;\n\n  (function (ED4) {\n    /**\n     * Regular expression fragments. These fragments are designed to be included\n     * inside square brackets in a regular expression.\n     */\n    var fragments;\n\n    (function (fragments) {\n      fragments.CHAR = ed4.CHAR;\n      fragments.S = ed4.S;\n      fragments.BASE_CHAR = ed4.BASE_CHAR;\n      fragments.IDEOGRAPHIC = ed4.IDEOGRAPHIC;\n      fragments.COMBINING_CHAR = ed4.COMBINING_CHAR;\n      fragments.DIGIT = ed4.DIGIT;\n      fragments.EXTENDER = ed4.EXTENDER;\n      fragments.LETTER = ed4.LETTER;\n      fragments.NAME_CHAR = ed4.NAME_CHAR;\n    })(fragments = ED4.fragments || (ED4.fragments = {}));\n    /**\n     * Regular expression. These correspond to the productions of the same\n     * name in the specification.\n     */\n\n\n    var regexes;\n\n    (function (regexes) {\n      regexes.CHAR = ed4.CHAR_RE;\n      regexes.S = ed4.S_RE;\n      regexes.BASE_CHAR = ed4.BASE_CHAR_RE;\n      regexes.IDEOGRAPHIC = ed4.IDEOGRAPHIC_RE;\n      regexes.COMBINING_CHAR = ed4.COMBINING_CHAR_RE;\n      regexes.DIGIT = ed4.DIGIT_RE;\n      regexes.EXTENDER = ed4.EXTENDER_RE;\n      regexes.LETTER = ed4.LETTER_RE;\n      regexes.NAME_CHAR = ed4.NAME_CHAR_RE;\n      regexes.NAME = ed4.NAME_RE;\n      regexes.NMTOKEN = ed4.NMTOKEN_RE;\n    })(regexes = ED4.regexes || (ED4.regexes = {}));\n  })(ED4 = XML_1_0.ED4 || (XML_1_0.ED4 = {}));\n})(XML_1_0 = exports.XML_1_0 || (exports.XML_1_0 = {}));\n/**\n * Character class utilities for XML NS 1.0.\n */\n// tslint:disable-next-line:no-namespace\n\n\nvar XMLNS_1_0;\n\n(function (XMLNS_1_0) {\n  /**\n   * Third edition.\n   */\n  var ED3;\n\n  (function (ED3) {\n    /**\n     * Regular expression fragments. These fragments are designed to be included\n     * inside square brackets in a regular expression.\n     */\n    var fragments;\n\n    (function (fragments) {\n      fragments.NC_NAME_START_CHAR = nsed3.NC_NAME_START_CHAR;\n      fragments.NC_NAME_CHAR = nsed3.NC_NAME_CHAR;\n    })(fragments = ED3.fragments || (ED3.fragments = {}));\n    /**\n     * Regular expression. These correspond to the productions of the same name\n     * in the specification.\n     */\n\n\n    var regexes;\n\n    (function (regexes) {\n      regexes.NC_NAME_START_CHAR = nsed3.NC_NAME_START_CHAR_RE;\n      regexes.NC_NAME_CHAR = nsed3.NC_NAME_CHAR_RE;\n      regexes.NC_NAME = nsed3.NC_NAME_RE;\n    })(regexes = ED3.regexes || (ED3.regexes = {}));\n    /**\n     * Determines whether a codepoint matches\n     * [[regexes.NC_NAME_START_CHAR]].\n     *\n     * @param c The code point.\n     *\n     * @returns ``true`` if the codepoint matches.\n     */\n\n\n    ED3.isNCNameStartChar = nsed3.isNCNameStartChar;\n    /**\n     * Determines whether a codepoint matches [[regexes.NC_NAME_CHAR]].\n     *\n     * @param c The code point.\n     *\n     * @returns ``true`` if the codepoint matches.\n     */\n\n    ED3.isNCNameChar = nsed3.isNCNameChar;\n  })(ED3 = XMLNS_1_0.ED3 || (XMLNS_1_0.ED3 = {}));\n})(XMLNS_1_0 = exports.XMLNS_1_0 || (exports.XMLNS_1_0 = {}));","map":{"version":3,"sources":["../../src/xmlchars.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Character classes for XML.\n *\n * @deprecated since 1.3.0. Import from the ``xml`` and ``xmlns`` hierarchies\n * instead.\n *\n * @author Louis-Dominique Dubeau\n * @license MIT\n * @copyright Louis-Dominique Dubeau\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ed4 = require(\"./xml/1.0/ed4\");\nvar ed5 = require(\"./xml/1.0/ed5\");\nvar nsed3 = require(\"./xmlns/1.0/ed3\");\n// tslint:disable-next-line:no-console\nconsole.warn(\"DEPRECATION WARNING: the xmlchar *module* is deprecated: please \\\nreplace e.g. require('xmlchars') with require('xmlchars/xml/...')\");\n/**\n * Character class utilities for XML 1.0.\n */\n// tslint:disable-next-line:no-namespace\nvar XML_1_0;\n(function (XML_1_0) {\n    /**\n     * Fifth edition.\n     */\n    var ED5;\n    (function (ED5) {\n        /**\n         * Regular expression fragments. These fragments are designed to be included\n         * inside square brackets in a regular expression.\n         */\n        var fragments;\n        (function (fragments) {\n            fragments.CHAR = ed5.CHAR;\n            fragments.S = ed5.S;\n            fragments.NAME_START_CHAR = ed5.NAME_START_CHAR;\n            fragments.NAME_CHAR = ed5.NAME_CHAR;\n        })(fragments = ED5.fragments || (ED5.fragments = {}));\n        /**\n         * Regular expression. These correspond to the productions of the same name\n         * in the specification.\n         */\n        var regexes;\n        (function (regexes) {\n            regexes.CHAR = ed5.CHAR_RE;\n            regexes.S = ed5.S_RE;\n            regexes.NAME_START_CHAR = ed5.NAME_START_CHAR_RE;\n            regexes.NAME_CHAR = ed5.NAME_CHAR_RE;\n            regexes.NAME = ed5.NAME_RE;\n            regexes.NMTOKEN = ed5.NMTOKEN_RE;\n        })(regexes = ED5.regexes || (ED5.regexes = {}));\n        /**\n         * Lists of characters.\n         *\n         * The names defined in this namespace are arrays of codepoints which\n         * contain the set of codepoints that an XML production encompasses. Note\n         * that many productions are too large to be reasonably represented as sets.\n         */\n        var lists;\n        (function (lists) {\n            lists.S = ed5.S_LIST;\n        })(lists = ED5.lists || (ED5.lists = {}));\n        /**\n         * Determines whether a codepoint matches the ``CHAR`` production.\n         *\n         * @param c The code point.\n         *\n         * @returns ``true`` if the codepoint matches ``CHAR``.\n         */\n        ED5.isChar = ed5.isChar;\n        /**\n         * Determines whether a codepoint matches the ``S`` (space) production.\n         *\n         * @param c The code point.\n         *\n         * @returns ``true`` if the codepoint matches ``S``.\n         */\n        ED5.isS = ed5.isS;\n        /**\n         * Determines whether a codepoint matches the ``NAME_START_CHAR``\n         * production.\n         *\n         * @param c The code point.\n         *\n         * @returns ``true`` if the codepoint matches ``NAME_START_CHAR``.\n         */\n        ED5.isNameStartChar = ed5.isNameStartChar;\n        /**\n         * Determines whether a codepoint matches the ``NAME_CHAR`` production.\n         *\n         * @param c The code point.\n         *\n         * @returns ``true`` if the codepoint matches ``NAME_CHAR``.\n         */\n        ED5.isNameChar = ed5.isNameChar;\n    })(ED5 = XML_1_0.ED5 || (XML_1_0.ED5 = {}));\n    /**\n     * Fourth edition. These are deprecated in the 5th edition but some of the\n     * standards related to XML 1.0 (e.g. XML Schema 1.0) refer to these. So they\n     * are still generally useful.\n     */\n    var ED4;\n    (function (ED4) {\n        /**\n         * Regular expression fragments. These fragments are designed to be included\n         * inside square brackets in a regular expression.\n         */\n        var fragments;\n        (function (fragments) {\n            fragments.CHAR = ed4.CHAR;\n            fragments.S = ed4.S;\n            fragments.BASE_CHAR = ed4.BASE_CHAR;\n            fragments.IDEOGRAPHIC = ed4.IDEOGRAPHIC;\n            fragments.COMBINING_CHAR = ed4.COMBINING_CHAR;\n            fragments.DIGIT = ed4.DIGIT;\n            fragments.EXTENDER = ed4.EXTENDER;\n            fragments.LETTER = ed4.LETTER;\n            fragments.NAME_CHAR = ed4.NAME_CHAR;\n        })(fragments = ED4.fragments || (ED4.fragments = {}));\n        /**\n         * Regular expression. These correspond to the productions of the same\n         * name in the specification.\n         */\n        var regexes;\n        (function (regexes) {\n            regexes.CHAR = ed4.CHAR_RE;\n            regexes.S = ed4.S_RE;\n            regexes.BASE_CHAR = ed4.BASE_CHAR_RE;\n            regexes.IDEOGRAPHIC = ed4.IDEOGRAPHIC_RE;\n            regexes.COMBINING_CHAR = ed4.COMBINING_CHAR_RE;\n            regexes.DIGIT = ed4.DIGIT_RE;\n            regexes.EXTENDER = ed4.EXTENDER_RE;\n            regexes.LETTER = ed4.LETTER_RE;\n            regexes.NAME_CHAR = ed4.NAME_CHAR_RE;\n            regexes.NAME = ed4.NAME_RE;\n            regexes.NMTOKEN = ed4.NMTOKEN_RE;\n        })(regexes = ED4.regexes || (ED4.regexes = {}));\n    })(ED4 = XML_1_0.ED4 || (XML_1_0.ED4 = {}));\n})(XML_1_0 = exports.XML_1_0 || (exports.XML_1_0 = {}));\n/**\n * Character class utilities for XML NS 1.0.\n */\n// tslint:disable-next-line:no-namespace\nvar XMLNS_1_0;\n(function (XMLNS_1_0) {\n    /**\n     * Third edition.\n     */\n    var ED3;\n    (function (ED3) {\n        /**\n         * Regular expression fragments. These fragments are designed to be included\n         * inside square brackets in a regular expression.\n         */\n        var fragments;\n        (function (fragments) {\n            fragments.NC_NAME_START_CHAR = nsed3.NC_NAME_START_CHAR;\n            fragments.NC_NAME_CHAR = nsed3.NC_NAME_CHAR;\n        })(fragments = ED3.fragments || (ED3.fragments = {}));\n        /**\n         * Regular expression. These correspond to the productions of the same name\n         * in the specification.\n         */\n        var regexes;\n        (function (regexes) {\n            regexes.NC_NAME_START_CHAR = nsed3.NC_NAME_START_CHAR_RE;\n            regexes.NC_NAME_CHAR = nsed3.NC_NAME_CHAR_RE;\n            regexes.NC_NAME = nsed3.NC_NAME_RE;\n        })(regexes = ED3.regexes || (ED3.regexes = {}));\n        /**\n         * Determines whether a codepoint matches\n         * [[regexes.NC_NAME_START_CHAR]].\n         *\n         * @param c The code point.\n         *\n         * @returns ``true`` if the codepoint matches.\n         */\n        ED3.isNCNameStartChar = nsed3.isNCNameStartChar;\n        /**\n         * Determines whether a codepoint matches [[regexes.NC_NAME_CHAR]].\n         *\n         * @param c The code point.\n         *\n         * @returns ``true`` if the codepoint matches.\n         */\n        ED3.isNCNameChar = nsed3.isNCNameChar;\n    })(ED3 = XMLNS_1_0.ED3 || (XMLNS_1_0.ED3 = {}));\n})(XMLNS_1_0 = exports.XMLNS_1_0 || (exports.XMLNS_1_0 = {}));\n//# sourceMappingURL=xmlchars.js.map"]},"metadata":{},"sourceType":"script"}