{"ast":null,"code":"import postcss from 'postcss';\n\nvar cloneRule = (decl, dir) => {\n  const rule = Object(decl.parent).type === 'rule' ? decl.parent.clone({\n    raws: {}\n  }).removeAll() : postcss.rule({\n    selector: '&'\n  });\n  rule.selectors = rule.selectors.map(selector => `${selector}:dir(${dir})`);\n  return rule;\n};\n\nconst matchLogical = /^\\s*logical\\s+/i;\nconst matchLogicalBorder = /^border(-width|-style|-color)?$/i;\nconst matchLogicalBorderSide = /^border-(block|block-start|block-end|inline|inline-start|inline-end|start|end)(-(width|style|color))?$/i;\nvar transformBorder = {\n  // border\n  'border': (decl, values, dir) => {\n    const isLogical = matchLogical.test(values[0]);\n\n    if (isLogical) {\n      values[0] = values[0].replace(matchLogical, '');\n    }\n\n    const ltrDecls = [decl.clone({\n      prop: `border-top${decl.prop.replace(matchLogicalBorder, '$1')}`,\n      value: values[0]\n    }), decl.clone({\n      prop: `border-left${decl.prop.replace(matchLogicalBorder, '$1')}`,\n      value: values[1] || values[0]\n    }), decl.clone({\n      prop: `border-bottom${decl.prop.replace(matchLogicalBorder, '$1')}`,\n      value: values[2] || values[0]\n    }), decl.clone({\n      prop: `border-right${decl.prop.replace(matchLogicalBorder, '$1')}`,\n      value: values[3] || values[1] || values[0]\n    })];\n    const rtlDecls = [decl.clone({\n      prop: `border-top${decl.prop.replace(matchLogicalBorder, '$1')}`,\n      value: values[0]\n    }), decl.clone({\n      prop: `border-right${decl.prop.replace(matchLogicalBorder, '$1')}`,\n      value: values[1] || values[0]\n    }), decl.clone({\n      prop: `border-bottom${decl.prop.replace(matchLogicalBorder, '$1')}`,\n      value: values[2] || values[0]\n    }), decl.clone({\n      prop: `border-left${decl.prop.replace(matchLogicalBorder, '$1')}`,\n      value: values[3] || values[1] || values[0]\n    })];\n    return isLogical ? 1 === values.length ? decl.clone({\n      value: decl.value.replace(matchLogical, '')\n    }) : !values[3] || values[3] === values[1] ? [decl.clone({\n      prop: `border-top${decl.prop.replace(matchLogicalBorder, '$1')}`,\n      value: values[0]\n    }), decl.clone({\n      prop: `border-right${decl.prop.replace(matchLogicalBorder, '$1')}`,\n      value: values[3] || values[1] || values[0]\n    }), decl.clone({\n      prop: `border-bottom${decl.prop.replace(matchLogicalBorder, '$1')}`,\n      value: values[2] || values[0]\n    }), decl.clone({\n      prop: `border-left${decl.prop.replace(matchLogicalBorder, '$1')}`,\n      value: values[1] || values[0]\n    })] : 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [cloneRule(decl, 'ltr').append(ltrDecls), cloneRule(decl, 'rtl').append(rtlDecls)] : null;\n  },\n  // border-block\n  'border-block': (decl, values) => [decl.clone({\n    prop: `border-top${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n    value: values[0]\n  }), decl.clone({\n    prop: `border-bottom${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n    value: values[0]\n  })],\n  // border-block-start\n  'border-block-start': decl => {\n    decl.prop = 'border-top';\n  },\n  // border-block-end\n  'border-block-end': decl => {\n    decl.prop = 'border-bottom';\n  },\n  // border-inline\n  'border-inline': (decl, values, dir) => {\n    const ltrDecls = [decl.clone({\n      prop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n      value: values[0]\n    }), decl.clone({\n      prop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n      value: values[1] || values[0]\n    })];\n    const rtlDecls = [decl.clone({\n      prop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n      value: values[0]\n    }), decl.clone({\n      prop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n      value: values[1] || values[0]\n    })];\n    const isLTR = 1 === values.length || 2 === values.length && values[0] === values[1];\n    return isLTR ? ltrDecls : 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [cloneRule(decl, 'ltr').append(ltrDecls), cloneRule(decl, 'rtl').append(rtlDecls)];\n  },\n  // border-inline-start\n  'border-inline-start': (decl, values, dir) => {\n    const ltrDecl = decl.clone({\n      prop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`\n    });\n    const rtlDecl = decl.clone({\n      prop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`\n    });\n    return 'ltr' === dir ? ltrDecl : 'rtl' === dir ? rtlDecl : [cloneRule(decl, 'ltr').append(ltrDecl), cloneRule(decl, 'rtl').append(rtlDecl)];\n  },\n  // border-inline-end\n  'border-inline-end': (decl, values, dir) => {\n    const ltrDecl = decl.clone({\n      prop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`\n    });\n    const rtlDecl = decl.clone({\n      prop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`\n    });\n    return 'ltr' === dir ? ltrDecl : 'rtl' === dir ? rtlDecl : [cloneRule(decl, 'ltr').append(ltrDecl), cloneRule(decl, 'rtl').append(rtlDecl)];\n  },\n  // border-start\n  'border-start': (decl, values, dir) => {\n    const ltrDecls = [decl.clone({\n      prop: `border-top${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n      value: values[0]\n    }), decl.clone({\n      prop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n      value: values[1] || values[0]\n    })];\n    const rtlDecls = [decl.clone({\n      prop: `border-top${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n      value: values[0]\n    }), decl.clone({\n      prop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n      value: values[1] || values[0]\n    })];\n    return 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [cloneRule(decl, 'ltr').append(ltrDecls), cloneRule(decl, 'rtl').append(rtlDecls)];\n  },\n  // border-end\n  'border-end': (decl, values, dir) => {\n    const ltrDecls = [decl.clone({\n      prop: `border-bottom${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n      value: values[0]\n    }), decl.clone({\n      prop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n      value: values[1] || values[0]\n    })];\n    const rtlDecls = [decl.clone({\n      prop: `border-bottom${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n      value: values[0]\n    }), decl.clone({\n      prop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n      value: values[1] || values[0]\n    })];\n    return 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [cloneRule(decl, 'ltr').append(ltrDecls), cloneRule(decl, 'rtl').append(rtlDecls)];\n  }\n};\n\nvar transformFloat = (decl, values, dir) => {\n  const lDecl = decl.clone({\n    value: 'left'\n  });\n  const rDecl = decl.clone({\n    value: 'right'\n  });\n  return /^inline-start$/i.test(decl.value) ? 'ltr' === dir ? lDecl : 'rtl' === dir ? rDecl : [cloneRule(decl, 'ltr').append(lDecl), cloneRule(decl, 'rtl').append(rDecl)] : /^inline-end$/i.test(decl.value) ? 'ltr' === dir ? rDecl : 'rtl' === dir ? lDecl : [cloneRule(decl, 'ltr').append(rDecl), cloneRule(decl, 'rtl').append(lDecl)] : null;\n};\n\nvar transformInset = (decl, values, dir) => {\n  if ('logical' !== values[0]) {\n    return [decl.clone({\n      prop: 'top',\n      value: values[0]\n    }), decl.clone({\n      prop: 'right',\n      value: values[1] || values[0]\n    }), decl.clone({\n      prop: 'bottom',\n      value: values[2] || values[0]\n    }), decl.clone({\n      prop: 'left',\n      value: values[3] || values[1] || values[0]\n    })];\n  }\n\n  const isLTR = !values[4] || values[4] === values[2];\n  const ltrDecls = [decl.clone({\n    prop: 'top',\n    value: values[1]\n  }), decl.clone({\n    prop: 'left',\n    value: values[2] || values[1]\n  }), decl.clone({\n    prop: 'bottom',\n    value: values[3] || values[1]\n  }), decl.clone({\n    prop: 'right',\n    value: values[4] || values[2] || values[1]\n  })];\n  const rtlDecls = [decl.clone({\n    prop: 'top',\n    value: values[1]\n  }), decl.clone({\n    prop: 'right',\n    value: values[2] || values[1]\n  }), decl.clone({\n    prop: 'bottom',\n    value: values[3] || values[1]\n  }), decl.clone({\n    prop: 'left',\n    value: values[4] || values[2] || values[1]\n  })];\n  return isLTR || 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [cloneRule(decl, 'ltr').append(ltrDecls), cloneRule(decl, 'rtl').append(rtlDecls)];\n};\n\nvar transformResize = decl => /^block$/i.test(decl.value) ? decl.clone({\n  value: 'vertical'\n}) : /^inline$/i.test(decl.value) ? decl.clone({\n  value: 'horizontal'\n}) : null;\n\nvar matchSide = /^(inset|margin|padding)(?:-(block|block-start|block-end|inline|inline-start|inline-end|start|end))$/i;\nvar matchInsetPrefix = /^inset-/i;\n\nvar cloneDecl = (decl, suffix, value) => decl.clone({\n  prop: `${decl.prop.replace(matchSide, '$1')}${suffix}`.replace(matchInsetPrefix, ''),\n  value\n});\n\nvar transformSide = {\n  // inset-block, margin-block, padding-block\n  'block': (decl, values) => [cloneDecl(decl, '-top', values[0]), cloneDecl(decl, '-bottom', values[1] || values[0])],\n  // inset-block-start, margin-block-start, padding-block-start\n  'block-start': decl => {\n    decl.prop = decl.prop.replace(matchSide, '$1-top').replace(matchInsetPrefix, '');\n  },\n  // inset-block-end, margin-block-end, padding-block-end\n  'block-end': decl => {\n    decl.prop = decl.prop.replace(matchSide, '$1-bottom').replace(matchInsetPrefix, '');\n  },\n  // inset-inline, margin-inline, padding-inline\n  'inline': (decl, values, dir) => {\n    const ltrDecls = [cloneDecl(decl, '-left', values[0]), cloneDecl(decl, '-right', values[1] || values[0])];\n    const rtlDecls = [cloneDecl(decl, '-right', values[0]), cloneDecl(decl, '-left', values[1] || values[0])];\n    const isLTR = 1 === values.length || 2 === values.length && values[0] === values[1];\n    return isLTR ? ltrDecls : 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [cloneRule(decl, 'ltr').append(ltrDecls), cloneRule(decl, 'rtl').append(rtlDecls)];\n  },\n  // inset-inline-start, margin-inline-start, padding-inline-start\n  'inline-start': (decl, values, dir) => {\n    const ltrDecl = cloneDecl(decl, '-left', decl.value);\n    const rtlDecl = cloneDecl(decl, '-right', decl.value);\n    return 'ltr' === dir ? ltrDecl : 'rtl' === dir ? rtlDecl : [cloneRule(decl, 'ltr').append(ltrDecl), cloneRule(decl, 'rtl').append(rtlDecl)];\n  },\n  // inset-inline-end, margin-inline-end, padding-inline-end\n  'inline-end': (decl, values, dir) => {\n    const ltrDecl = cloneDecl(decl, '-right', decl.value);\n    const rtlDecl = cloneDecl(decl, '-left', decl.value);\n    return 'ltr' === dir ? ltrDecl : 'rtl' === dir ? rtlDecl : [cloneRule(decl, 'ltr').append(ltrDecl), cloneRule(decl, 'rtl').append(rtlDecl)];\n  },\n  // inset-start, margin-start, padding-start\n  'start': (decl, values, dir) => {\n    const ltrDecls = [cloneDecl(decl, '-top', values[0]), cloneDecl(decl, '-left', values[1] || values[0])];\n    const rtlDecls = [cloneDecl(decl, '-top', values[0]), cloneDecl(decl, '-right', values[1] || values[0])];\n    return 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [cloneRule(decl, 'ltr').append(ltrDecls), cloneRule(decl, 'rtl').append(rtlDecls)];\n  },\n  // inset-end, margin-end, padding-end\n  'end': (decl, values, dir) => {\n    const ltrDecls = [cloneDecl(decl, '-bottom', values[0]), cloneDecl(decl, '-right', values[1] || values[0])];\n    const rtlDecls = [cloneDecl(decl, '-bottom', values[0]), cloneDecl(decl, '-left', values[1] || values[0])];\n    return 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [cloneRule(decl, 'ltr').append(ltrDecls), cloneRule(decl, 'rtl').append(rtlDecls)];\n  }\n};\nvar matchSize = /^(min-|max-)?(block|inline)-(size)$/i;\n\nvar transformSize = decl => {\n  decl.prop = decl.prop.replace(matchSize, ($0, minmax, flow) => `${minmax || ''}${'block' === flow ? 'height' : 'width'}`);\n};\n\nvar transformSpacing = (decl, values, dir) => {\n  if ('logical' !== values[0]) {\n    return null;\n  }\n\n  const isLTR = !values[4] || values[4] === values[2];\n  const ltrDecl = decl.clone({\n    value: [values[1], values[4] || values[2] || values[1], values[3] || values[1], values[2] || values[1]].join(' ')\n  });\n  const rtlDecl = decl.clone({\n    value: [values[1], values[2] || values[1], values[3] || values[1], values[4] || values[2] || values[1]].join(' ')\n  });\n  return isLTR ? decl.clone({\n    value: decl.value.replace(/^\\s*logical\\s+/i, '')\n  }) : 'ltr' === dir ? ltrDecl : 'rtl' === dir ? rtlDecl : [cloneRule(decl, 'ltr').append(ltrDecl), cloneRule(decl, 'rtl').append(rtlDecl)];\n};\n\nvar transformTextAlign = (decl, values, dir) => {\n  const lDecl = decl.clone({\n    value: 'left'\n  });\n  const rDecl = decl.clone({\n    value: 'right'\n  });\n  return /^start$/i.test(decl.value) ? 'ltr' === dir ? lDecl : 'rtl' === dir ? rDecl : [cloneRule(decl, 'ltr').append(lDecl), cloneRule(decl, 'rtl').append(rDecl)] : /^end$/i.test(decl.value) ? 'ltr' === dir ? rDecl : 'rtl' === dir ? lDecl : [cloneRule(decl, 'ltr').append(rDecl), cloneRule(decl, 'rtl').append(lDecl)] : null;\n};\n\nfunction splitByComma(string, isTrimmed) {\n  return splitByRegExp(string, /^,$/, isTrimmed);\n}\n\nfunction splitBySpace(string, isTrimmed) {\n  return splitByRegExp(string, /^\\s$/, isTrimmed);\n}\n\nfunction splitBySlash(string, isTrimmed) {\n  return splitByRegExp(string, /^\\/$/, isTrimmed);\n}\n\nfunction splitByRegExp(string, re, isTrimmed) {\n  const array = [];\n  let buffer = '';\n  let split = false;\n  let func = 0;\n  let i = -1;\n\n  while (++i < string.length) {\n    const char = string[i];\n\n    if (char === '(') {\n      func += 1;\n    } else if (char === ')') {\n      if (func > 0) {\n        func -= 1;\n      }\n    } else if (func === 0) {\n      if (re.test(char)) {\n        split = true;\n      }\n    }\n\n    if (split) {\n      if (!isTrimmed || buffer.trim()) {\n        array.push(isTrimmed ? buffer.trim() : buffer);\n      }\n\n      if (!isTrimmed) {\n        array.push(char);\n      }\n\n      buffer = '';\n      split = false;\n    } else {\n      buffer += char;\n    }\n  }\n\n  if (buffer !== '') {\n    array.push(isTrimmed ? buffer.trim() : buffer);\n  }\n\n  return array;\n}\n\nvar transformTransition = (decl, notValues, dir) => {\n  const ltrValues = [];\n  const rtlValues = [];\n  splitByComma(decl.value).forEach(value => {\n    let hasBeenSplit = false;\n    splitBySpace(value).forEach((word, index, words) => {\n      if (word in valueMap) {\n        hasBeenSplit = true;\n        valueMap[word].ltr.forEach(replacement => {\n          const clone = words.slice();\n          clone.splice(index, 1, replacement);\n\n          if (ltrValues.length && !/^,$/.test(ltrValues[ltrValues.length - 1])) {\n            ltrValues.push(',');\n          }\n\n          ltrValues.push(clone.join(''));\n        });\n        valueMap[word].rtl.forEach(replacement => {\n          const clone = words.slice();\n          clone.splice(index, 1, replacement);\n\n          if (rtlValues.length && !/^,$/.test(rtlValues[rtlValues.length - 1])) {\n            rtlValues.push(',');\n          }\n\n          rtlValues.push(clone.join(''));\n        });\n      }\n    });\n\n    if (!hasBeenSplit) {\n      ltrValues.push(value);\n      rtlValues.push(value);\n    }\n  });\n  const ltrDecl = decl.clone({\n    value: ltrValues.join('')\n  });\n  const rtlDecl = decl.clone({\n    value: rtlValues.join('')\n  });\n  return ltrValues.length && 'ltr' === dir ? ltrDecl : rtlValues.length && 'rtl' === dir ? rtlDecl : ltrDecl.value !== rtlDecl.value ? [cloneRule(decl, 'ltr').append(ltrDecl), cloneRule(decl, 'rtl').append(rtlDecl)] : null;\n};\n\nconst valueMap = {\n  'border-block': {\n    ltr: ['border-top', 'border-bottom'],\n    rtl: ['border-top', 'border-bottom']\n  },\n  'border-block-color': {\n    ltr: ['border-top-color', 'border-bottom-color'],\n    rtl: ['border-top-color', 'border-bottom-color']\n  },\n  'border-block-end': {\n    ltr: ['border-bottom'],\n    rtl: ['border-bottom']\n  },\n  'border-block-end-color': {\n    ltr: ['border-bottom-color'],\n    rtl: ['border-bottom-color']\n  },\n  'border-block-end-style': {\n    ltr: ['border-bottom-style'],\n    rtl: ['border-bottom-style']\n  },\n  'border-block-end-width': {\n    ltr: ['border-bottom-width'],\n    rtl: ['border-bottom-width']\n  },\n  'border-block-start': {\n    ltr: ['border-top'],\n    rtl: ['border-top']\n  },\n  'border-block-start-color': {\n    ltr: ['border-top-color'],\n    rtl: ['border-top-color']\n  },\n  'border-block-start-style': {\n    ltr: ['border-top-style'],\n    rtl: ['border-top-style']\n  },\n  'border-block-start-width': {\n    ltr: ['border-top-width'],\n    rtl: ['border-top-width']\n  },\n  'border-block-style': {\n    ltr: ['border-top-style', 'border-bottom-style'],\n    rtl: ['border-top-style', 'border-bottom-style']\n  },\n  'border-block-width': {\n    ltr: ['border-top-width', 'border-bottom-width'],\n    rtl: ['border-top-width', 'border-bottom-width']\n  },\n  'border-end': {\n    ltr: ['border-bottom', 'border-right'],\n    rtl: ['border-bottom', 'border-left']\n  },\n  'border-end-color': {\n    ltr: ['border-bottom-color', 'border-right-color'],\n    rtl: ['border-bottom-color', 'border-left-color']\n  },\n  'border-end-style': {\n    ltr: ['border-bottom-style', 'border-right-style'],\n    rtl: ['border-bottom-style', 'border-left-style']\n  },\n  'border-end-width': {\n    ltr: ['border-bottom-width', 'border-right-width'],\n    rtl: ['border-bottom-width', 'border-left-width']\n  },\n  'border-inline': {\n    ltr: ['border-left', 'border-right'],\n    rtl: ['border-left', 'border-right']\n  },\n  'border-inline-color': {\n    ltr: ['border-left-color', 'border-right-color'],\n    rtl: ['border-left-color', 'border-right-color']\n  },\n  'border-inline-end': {\n    ltr: ['border-right'],\n    rtl: ['border-left']\n  },\n  'border-inline-end-color': {\n    ltr: ['border-right-color'],\n    rtl: ['border-left-color']\n  },\n  'border-inline-end-style': {\n    ltr: ['border-right-style'],\n    rtl: ['border-left-style']\n  },\n  'border-inline-end-width': {\n    ltr: ['border-right-width'],\n    rtl: ['border-left-width']\n  },\n  'border-inline-start': {\n    ltr: ['border-left'],\n    rtl: ['border-right']\n  },\n  'border-inline-start-color': {\n    ltr: ['border-left-color'],\n    rtl: ['border-right-color']\n  },\n  'border-inline-start-style': {\n    ltr: ['border-left-style'],\n    rtl: ['border-right-style']\n  },\n  'border-inline-start-width': {\n    ltr: ['border-left-width'],\n    rtl: ['border-right-width']\n  },\n  'border-inline-style': {\n    ltr: ['border-left-style', 'border-right-style'],\n    rtl: ['border-left-style', 'border-right-style']\n  },\n  'border-inline-width': {\n    ltr: ['border-left-width', 'border-right-width'],\n    rtl: ['border-left-width', 'border-right-width']\n  },\n  'border-start': {\n    ltr: ['border-top', 'border-left'],\n    rtl: ['border-top', 'border-right']\n  },\n  'border-start-color': {\n    ltr: ['border-top-color', 'border-left-color'],\n    rtl: ['border-top-color', 'border-right-color']\n  },\n  'border-start-style': {\n    ltr: ['border-top-style', 'border-left-style'],\n    rtl: ['border-top-style', 'border-right-style']\n  },\n  'border-start-width': {\n    ltr: ['border-top-width', 'border-left-width'],\n    rtl: ['border-top-width', 'border-right-width']\n  },\n  'block-size': {\n    ltr: ['height'],\n    rtl: ['height']\n  },\n  'inline-size': {\n    ltr: ['width'],\n    rtl: ['width']\n  },\n  'inset': {\n    ltr: ['top', 'right', 'bottom', 'left'],\n    rtl: ['top', 'right', 'bottom', 'left']\n  },\n  'inset-block': {\n    ltr: ['top', 'bottom'],\n    rtl: ['top', 'bottom']\n  },\n  'inset-block-start': {\n    ltr: ['top'],\n    rtl: ['top']\n  },\n  'inset-block-end': {\n    ltr: ['bottom'],\n    rtl: ['bottom']\n  },\n  'inset-end': {\n    ltr: ['bottom', 'right'],\n    rtl: ['bottom', 'left']\n  },\n  'inset-inline': {\n    ltr: ['left', 'right'],\n    rtl: ['left', 'right']\n  },\n  'inset-inline-start': {\n    ltr: ['left'],\n    rtl: ['right']\n  },\n  'inset-inline-end': {\n    ltr: ['right'],\n    rtl: ['left']\n  },\n  'inset-start': {\n    ltr: ['top', 'left'],\n    rtl: ['top', 'right']\n  },\n  'margin-block': {\n    ltr: ['margin-top', 'margin-bottom'],\n    rtl: ['margin-top', 'margin-bottom']\n  },\n  'margin-block-start': {\n    ltr: ['margin-top'],\n    rtl: ['margin-top']\n  },\n  'margin-block-end': {\n    ltr: ['margin-bottom'],\n    rtl: ['margin-bottom']\n  },\n  'margin-end': {\n    ltr: ['margin-bottom', 'margin-right'],\n    rtl: ['margin-bottom', 'margin-left']\n  },\n  'margin-inline': {\n    ltr: ['margin-left', 'margin-right'],\n    rtl: ['margin-left', 'margin-right']\n  },\n  'margin-inline-start': {\n    ltr: ['margin-left'],\n    rtl: ['margin-right']\n  },\n  'margin-inline-end': {\n    ltr: ['margin-right'],\n    rtl: ['margin-left']\n  },\n  'margin-start': {\n    ltr: ['margin-top', 'margin-left'],\n    rtl: ['margin-top', 'margin-right']\n  },\n  'padding-block': {\n    ltr: ['padding-top', 'padding-bottom'],\n    rtl: ['padding-top', 'padding-bottom']\n  },\n  'padding-block-start': {\n    ltr: ['padding-top'],\n    rtl: ['padding-top']\n  },\n  'padding-block-end': {\n    ltr: ['padding-bottom'],\n    rtl: ['padding-bottom']\n  },\n  'padding-end': {\n    ltr: ['padding-bottom', 'padding-right'],\n    rtl: ['padding-bottom', 'padding-left']\n  },\n  'padding-inline': {\n    ltr: ['padding-left', 'padding-right'],\n    rtl: ['padding-left', 'padding-right']\n  },\n  'padding-inline-start': {\n    ltr: ['padding-left'],\n    rtl: ['padding-right']\n  },\n  'padding-inline-end': {\n    ltr: ['padding-right'],\n    rtl: ['padding-left']\n  },\n  'padding-start': {\n    ltr: ['padding-top', 'padding-left'],\n    rtl: ['padding-top', 'padding-right']\n  }\n};\nvar matchSupportedProperties = /^(?:(inset|margin|padding)(?:-(block|block-start|block-end|inline|inline-start|inline-end|start|end))|(min-|max-)?(block|inline)-(size))$/i; // tooling\n\nconst transforms = {\n  'border': transformBorder['border'],\n  'border-width': transformBorder['border'],\n  'border-style': transformBorder['border'],\n  'border-color': transformBorder['border'],\n  'border-block': transformBorder['border-block'],\n  'border-block-width': transformBorder['border-block'],\n  'border-block-style': transformBorder['border-block'],\n  'border-block-color': transformBorder['border-block'],\n  'border-block-start': transformBorder['border-block-start'],\n  'border-block-start-width': transformBorder['border-block-start'],\n  'border-block-start-style': transformBorder['border-block-start'],\n  'border-block-start-color': transformBorder['border-block-start'],\n  'border-block-end': transformBorder['border-block-end'],\n  'border-block-end-width': transformBorder['border-block-end'],\n  'border-block-end-style': transformBorder['border-block-end'],\n  'border-block-end-color': transformBorder['border-block-end'],\n  'border-inline': transformBorder['border-inline'],\n  'border-inline-width': transformBorder['border-inline'],\n  'border-inline-style': transformBorder['border-inline'],\n  'border-inline-color': transformBorder['border-inline'],\n  'border-inline-start': transformBorder['border-inline-start'],\n  'border-inline-start-width': transformBorder['border-inline-start'],\n  'border-inline-start-style': transformBorder['border-inline-start'],\n  'border-inline-start-color': transformBorder['border-inline-start'],\n  'border-inline-end': transformBorder['border-inline-end'],\n  'border-inline-end-width': transformBorder['border-inline-end'],\n  'border-inline-end-style': transformBorder['border-inline-end'],\n  'border-inline-end-color': transformBorder['border-inline-end'],\n  'border-start': transformBorder['border-start'],\n  'border-start-width': transformBorder['border-start'],\n  'border-start-style': transformBorder['border-start'],\n  'border-start-color': transformBorder['border-start'],\n  'border-end': transformBorder['border-end'],\n  'border-end-width': transformBorder['border-end'],\n  'border-end-style': transformBorder['border-end'],\n  'border-end-color': transformBorder['border-end'],\n  'clear': transformFloat,\n  'inset': transformInset,\n  'margin': transformSpacing,\n  'padding': transformSpacing,\n  'block': transformSide['block'],\n  'block-start': transformSide['block-start'],\n  'block-end': transformSide['block-end'],\n  'inline': transformSide['inline'],\n  'inline-start': transformSide['inline-start'],\n  'inline-end': transformSide['inline-end'],\n  'start': transformSide['start'],\n  'end': transformSide['end'],\n  'float': transformFloat,\n  'resize': transformResize,\n  'size': transformSize,\n  'text-align': transformTextAlign,\n  'transition': transformTransition,\n  'transition-property': transformTransition\n}; // properties that will be split by slash\n\nconst splitBySlashPropRegExp = /^border(-block|-inline|-start|-end)?(-width|-style|-color)?$/i; // plugin\n\nvar index = postcss.plugin('postcss-logical-properties', opts => {\n  const preserve = Boolean(Object(opts).preserve);\n  const dir = !preserve && typeof Object(opts).dir === 'string' ? /^rtl$/i.test(opts.dir) ? 'rtl' : 'ltr' : false;\n  return root => {\n    root.walkDecls(decl => {\n      const parent = decl.parent;\n      const values = splitBySlashPropRegExp.test(decl.prop) ? splitBySlash(decl.value, true) : splitBySpace(decl.value, true);\n      const prop = decl.prop.replace(matchSupportedProperties, '$2$5').toLowerCase();\n\n      if (prop in transforms) {\n        const replacer = transforms[prop](decl, values, dir);\n\n        if (replacer) {\n          [].concat(replacer).forEach(replacement => {\n            if (replacement.type === 'rule') {\n              parent.before(replacement);\n            } else {\n              decl.before(replacement);\n            }\n          });\n\n          if (!preserve) {\n            decl.remove();\n\n            if (!parent.nodes.length) {\n              parent.remove();\n            }\n          }\n        }\n      }\n    });\n  };\n});\nexport default index;","map":{"version":3,"sources":["lib/clone-rule.js","lib/transform-border.js","lib/transform-float.js","lib/transform-inset.js","lib/transform-resize.js","lib/match-side.js","lib/match-inset-prefix.js","lib/clone-decl.js","lib/transform-side.js","lib/match-size.js","lib/transform-size.js","lib/transform-spacing.js","lib/transform-text-align.js","lib/split.js","lib/transform-transition.js","lib/match-supported-properties.js","index.js"],"names":["rule","Object","decl","raws","selector","dir","matchLogical","matchLogicalBorder","matchLogicalBorderSide","isLogical","values","ltrDecls","prop","value","rtlDecls","cloneRule","isLTR","ltrDecl","rtlDecl","lDecl","rDecl","suffix","cloneDecl","minmax","splitByRegExp","array","buffer","split","func","i","string","char","re","isTrimmed","ltrValues","rtlValues","splitByComma","hasBeenSplit","splitBySpace","word","valueMap","replacement","clone","words","ltr","rtl","transforms","transformBorder","transformSide","transformTransition","splitBySlashPropRegExp","opts","preserve","Boolean","root","parent","splitBySlash","replacer"],"mappings":"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","sourcesContent":["import postcss from 'postcss';\n\nexport default (decl, dir) => {\n\tconst rule = Object(decl.parent).type === 'rule' ? decl.parent.clone({\n\t\traws: {}\n\t}).removeAll() : postcss.rule({ selector: '&' });\n\n\trule.selectors = rule.selectors.map(selector => `${selector}:dir(${dir})`);\n\n\treturn rule;\n};\n","import cloneRule from './clone-rule';\n\nconst matchLogical = /^\\s*logical\\s+/i;\nconst matchLogicalBorder = /^border(-width|-style|-color)?$/i;\nconst matchLogicalBorderSide = /^border-(block|block-start|block-end|inline|inline-start|inline-end|start|end)(-(width|style|color))?$/i;\n\nexport default {\n\t// border\n\t'border': (decl, values, dir) => {\n\t\tconst isLogical = matchLogical.test(values[0]);\n\n\t\tif (isLogical) {\n\t\t\tvalues[0] = values[0].replace(matchLogical, '');\n\t\t}\n\n\t\tconst ltrDecls = [\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-top${decl.prop.replace(matchLogicalBorder, '$1')}`,\n\t\t\t\tvalue: values[0]\n\t\t\t}),\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorder, '$1')}`,\n\t\t\t\tvalue: values[1] || values[0]\n\t\t\t}),\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-bottom${decl.prop.replace(matchLogicalBorder, '$1')}`,\n\t\t\t\tvalue: values[2] || values[0]\n\t\t\t}),\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorder, '$1')}`,\n\t\t\t\tvalue: values[3] || values[1] || values[0]\n\t\t\t})\n\t\t];\n\n\t\tconst rtlDecls = [\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-top${decl.prop.replace(matchLogicalBorder, '$1')}`,\n\t\t\t\tvalue: values[0]\n\t\t\t}),\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorder, '$1')}`,\n\t\t\t\tvalue: values[1] || values[0]\n\t\t\t}),\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-bottom${decl.prop.replace(matchLogicalBorder, '$1')}`,\n\t\t\t\tvalue: values[2] || values[0]\n\t\t\t}),\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorder, '$1')}`,\n\t\t\t\tvalue: values[3] || values[1] || values[0]\n\t\t\t})\n\t\t];\n\n\t\treturn isLogical ? 1 === values.length\n\t\t\t? decl.clone({\n\t\t\t\tvalue: decl.value.replace(matchLogical, '')\n\t\t\t})\n\t\t\t: !values[3] || values[3] === values[1]\n\t\t\t\t? [\n\t\t\t\t\tdecl.clone({\n\t\t\t\t\t\tprop: `border-top${decl.prop.replace(matchLogicalBorder, '$1')}`,\n\t\t\t\t\t\tvalue: values[0]\n\t\t\t\t\t}),\n\t\t\t\t\tdecl.clone({\n\t\t\t\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorder, '$1')}`,\n\t\t\t\t\t\tvalue: values[3] || values[1] || values[0]\n\t\t\t\t\t}),\n\t\t\t\t\tdecl.clone({\n\t\t\t\t\t\tprop: `border-bottom${decl.prop.replace(matchLogicalBorder, '$1')}`,\n\t\t\t\t\t\tvalue: values[2] || values[0]\n\t\t\t\t\t}),\n\t\t\t\t\tdecl.clone({\n\t\t\t\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorder, '$1')}`,\n\t\t\t\t\t\tvalue: values[1] || values[0]\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t\t: 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [\n\t\t\t\t\tcloneRule(decl, 'ltr').append(ltrDecls),\n\t\t\t\t\tcloneRule(decl, 'rtl').append(rtlDecls)\n\t\t\t\t]\n\t\t\t: null;\n\t},\n\n\t// border-block\n\t'border-block': (decl, values) => [\n\t\tdecl.clone({\n\t\t\tprop: `border-top${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\tvalue: values[0]\n\t\t}),\n\t\tdecl.clone({\n\t\t\tprop: `border-bottom${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\tvalue: values[0]\n\t\t})\n\t],\n\n\t// border-block-start\n\t'border-block-start': decl => {\n\t\tdecl.prop = 'border-top';\n\t},\n\n\t// border-block-end\n\t'border-block-end': decl => {\n\t\tdecl.prop = 'border-bottom';\n\t},\n\n\t// border-inline\n\t'border-inline': (decl, values, dir) => {\n\t\tconst ltrDecls = [\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\tvalue: values[0]\n\t\t\t}),\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\tvalue: values[1] || values[0]\n\t\t\t})\n\t\t];\n\n\t\tconst rtlDecls = [\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\tvalue: values[0]\n\t\t\t}),\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\tvalue: values[1] || values[0]\n\t\t\t})\n\t\t];\n\n\t\tconst isLTR = 1 === values.length || 2 === values.length && values[0] === values[1];\n\n\t\treturn isLTR ? ltrDecls : 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecls),\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecls)\n\t\t];\n\t},\n\n\t// border-inline-start\n\t'border-inline-start': (decl, values, dir) => {\n\t\tconst ltrDecl = decl.clone({\n\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`\n\t\t});\n\n\t\tconst rtlDecl = decl.clone({\n\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`\n\t\t});\n\n\t\treturn 'ltr' === dir ? ltrDecl : 'rtl' === dir ? rtlDecl : [\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecl),\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecl)\n\t\t];\n\t},\n\n\t// border-inline-end\n\t'border-inline-end': (decl, values, dir) => {\n\t\tconst ltrDecl = decl.clone({\n\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`\n\t\t});\n\n\t\tconst rtlDecl = decl.clone({\n\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`\n\t\t});\n\n\t\treturn 'ltr' === dir ? ltrDecl : 'rtl' === dir ? rtlDecl : [\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecl),\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecl)\n\t\t];\n\t},\n\n\t// border-start\n\t'border-start': (decl, values, dir) => {\n\t\tconst ltrDecls = [\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-top${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\tvalue: values[0]\n\t\t\t}),\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\tvalue: values[1] || values[0]\n\t\t\t})\n\t\t];\n\n\t\tconst rtlDecls = [\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-top${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\tvalue: values[0]\n\t\t\t}),\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\tvalue: values[1] || values[0]\n\t\t\t})\n\t\t];\n\n\t\treturn 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecls),\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecls)\n\t\t];\n\t},\n\n\t// border-end\n\t'border-end': (decl, values, dir) => {\n\t\tconst ltrDecls = [\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-bottom${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\tvalue: values[0]\n\t\t\t}),\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-right${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\tvalue: values[1] || values[0]\n\t\t\t})\n\t\t];\n\n\t\tconst rtlDecls = [\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-bottom${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\tvalue: values[0]\n\t\t\t}),\n\t\t\tdecl.clone({\n\t\t\t\tprop: `border-left${decl.prop.replace(matchLogicalBorderSide, '$2')}`,\n\t\t\t\tvalue: values[1] || values[0]\n\t\t\t})\n\t\t];\n\n\t\treturn 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecls),\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecls)\n\t\t];\n\t}\n};\n","import cloneRule from './clone-rule';\n\nexport default (decl, values, dir) => {\n\tconst lDecl = decl.clone({ value: 'left' });\n\tconst rDecl = decl.clone({ value: 'right' });\n\n\treturn /^inline-start$/i.test(decl.value) ? 'ltr' === dir ? lDecl : 'rtl' === dir ? rDecl : [\n\t\tcloneRule(decl, 'ltr').append(lDecl),\n\t\tcloneRule(decl, 'rtl').append(rDecl)\n\t] : /^inline-end$/i.test(decl.value) ? 'ltr' === dir ? rDecl : 'rtl' === dir ? lDecl : [\n\t\tcloneRule(decl, 'ltr').append(rDecl),\n\t\tcloneRule(decl, 'rtl').append(lDecl)\n\t] : null;\n};\n","import cloneRule from './clone-rule';\n\nexport default (decl, values, dir) => {\n\tif ('logical' !== values[0]) {\n\t\treturn [\n\t\t\tdecl.clone({ prop: 'top', value: values[0] }),\n\t\t\tdecl.clone({ prop: 'right', value: values[1] || values[0] }),\n\t\t\tdecl.clone({ prop: 'bottom', value: values[2] || values[0] }),\n\t\t\tdecl.clone({ prop: 'left', value: values[3] || values[1] || values[0] })\n\t\t];\n\t}\n\n\tconst isLTR = !values[4] || values[4] === values[2];\n\n\tconst ltrDecls = [\n\t\tdecl.clone({ prop: 'top', value: values[1] }),\n\t\tdecl.clone({ prop: 'left', value: values[2] || values[1] }),\n\t\tdecl.clone({ prop: 'bottom', value: values[3] || values[1] }),\n\t\tdecl.clone({ prop: 'right', value: values[4] || values[2] || values[1] })\n\t];\n\n\tconst rtlDecls = [\n\t\tdecl.clone({ prop: 'top', value: values[1] }),\n\t\tdecl.clone({ prop: 'right', value: values[2] || values[1] }),\n\t\tdecl.clone({ prop: 'bottom', value: values[3] || values[1] }),\n\t\tdecl.clone({ prop: 'left', value: values[4] || values[2] || values[1] })\n\t];\n\n\treturn isLTR || 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [\n\t\tcloneRule(decl, 'ltr').append(ltrDecls),\n\t\tcloneRule(decl, 'rtl').append(rtlDecls)\n\t];\n}\n","export default decl => /^block$/i.test(decl.value)\n\t? decl.clone({ value: 'vertical' })\n\t: /^inline$/i.test(decl.value)\n\t\t? decl.clone({ value: 'horizontal' })\n\t\t: null;\n","export default /^(inset|margin|padding)(?:-(block|block-start|block-end|inline|inline-start|inline-end|start|end))$/i;\n","export default /^inset-/i;\n","import matchSide from './match-side';\nimport matchInsetPrefix from './match-inset-prefix';\n\nexport default (decl, suffix, value) => decl.clone({\n\tprop: `${decl.prop.replace(matchSide, '$1')}${suffix}`.replace(matchInsetPrefix, ''),\n\tvalue\n});\n","import cloneDecl from './clone-decl';\nimport cloneRule from './clone-rule';\nimport matchSide from './match-side';\n\nimport matchInsetPrefix from './match-inset-prefix';\n\nexport default {\n\t// inset-block, margin-block, padding-block\n\t'block': (decl, values) => [\n\t\tcloneDecl(decl, '-top', values[0]),\n\t\tcloneDecl(decl, '-bottom', values[1] || values[0])\n\t],\n\n\t// inset-block-start, margin-block-start, padding-block-start\n\t'block-start': decl => {\n\t\tdecl.prop = decl.prop.replace(matchSide, '$1-top').replace(matchInsetPrefix, '');\n\t},\n\n\t// inset-block-end, margin-block-end, padding-block-end\n\t'block-end': decl => {\n\t\tdecl.prop = decl.prop.replace(matchSide, '$1-bottom').replace(matchInsetPrefix, '');\n\t},\n\n\t// inset-inline, margin-inline, padding-inline\n\t'inline': (decl, values, dir) => {\n\t\tconst ltrDecls = [\n\t\t\tcloneDecl(decl, '-left', values[0]),\n\t\t\tcloneDecl(decl, '-right', values[1] || values[0])\n\t\t];\n\n\t\tconst rtlDecls = [\n\t\t\tcloneDecl(decl, '-right', values[0]),\n\t\t\tcloneDecl(decl, '-left', values[1] || values[0])\n\t\t];\n\n\t\tconst isLTR = 1 === values.length || 2 === values.length && values[0] === values[1];\n\n\t\treturn isLTR ? ltrDecls : 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecls),\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecls),\n\t\t];\n\t},\n\n\t// inset-inline-start, margin-inline-start, padding-inline-start\n\t'inline-start': (decl, values, dir) => {\n\t\tconst ltrDecl = cloneDecl(decl, '-left', decl.value);\n\t\tconst rtlDecl = cloneDecl(decl, '-right', decl.value);\n\n\t\treturn 'ltr' === dir ? ltrDecl : 'rtl' === dir ? rtlDecl : [\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecl),\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecl)\n\t\t];\n\t},\n\n\t// inset-inline-end, margin-inline-end, padding-inline-end\n\t'inline-end': (decl, values, dir) => {\n\t\tconst ltrDecl = cloneDecl(decl, '-right', decl.value);\n\t\tconst rtlDecl = cloneDecl(decl, '-left', decl.value);\n\n\t\treturn 'ltr' === dir ? ltrDecl : 'rtl' === dir ? rtlDecl : [\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecl),\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecl)\n\t\t];\n\t},\n\n\t// inset-start, margin-start, padding-start\n\t'start': (decl, values, dir) => {\n\t\tconst ltrDecls = [\n\t\t\tcloneDecl(decl, '-top', values[0]),\n\t\t\tcloneDecl(decl, '-left', values[1] || values[0])\n\t\t];\n\n\t\tconst rtlDecls = [\n\t\t\tcloneDecl(decl, '-top', values[0]),\n\t\t\tcloneDecl(decl, '-right', values[1] || values[0])\n\t\t];\n\n\t\treturn 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecls),\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecls)\n\t\t];\n\t},\n\n\t// inset-end, margin-end, padding-end\n\t'end': (decl, values, dir) => {\n\t\tconst ltrDecls = [\n\t\t\tcloneDecl(decl, '-bottom', values[0]),\n\t\t\tcloneDecl(decl, '-right', values[1] || values[0])\n\t\t];\n\n\t\tconst rtlDecls = [\n\t\t\tcloneDecl(decl, '-bottom', values[0]),\n\t\t\tcloneDecl(decl, '-left', values[1] || values[0])\n\t\t];\n\n\t\treturn 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecls),\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecls)\n\t\t];\n\t}\n}\n","export default /^(min-|max-)?(block|inline)-(size)$/i;\n","import matchSize from './match-size';\n\nexport default decl => {\n\tdecl.prop = decl.prop.replace(\n\t\tmatchSize,\n\t\t($0, minmax, flow) => `${minmax||''}${'block' === flow ? 'height' : 'width'}`\n\t);\n};\n","import cloneRule from './clone-rule';\n\nexport default (decl, values, dir) => {\n\tif ('logical' !== values[0]) {\n\t\treturn null;\n\t}\n\n\tconst isLTR = !values[4] || values[4] === values[2];\n\n\tconst ltrDecl = decl.clone({\n\t\tvalue: [\n\t\t\tvalues[1],\n\t\t\tvalues[4] || values[2] || values[1],\n\t\t\tvalues[3] || values[1],\n\t\t\tvalues[2] || values[1]\n\t\t].join(' ')\n\t});\n\n\tconst rtlDecl = decl.clone({\n\t\tvalue: [\n\t\t\tvalues[1],\n\t\t\tvalues[2] || values[1],\n\t\t\tvalues[3] || values[1],\n\t\t\tvalues[4] || values[2] || values[1]\n\t\t].join(' ')\n\t});\n\n\treturn isLTR ? decl.clone({\n\t\tvalue: decl.value.replace(/^\\s*logical\\s+/i, '')\n\t}) : 'ltr' === dir ? ltrDecl : 'rtl' === dir ? rtlDecl : [\n\t\tcloneRule(decl, 'ltr').append(ltrDecl),\n\t\tcloneRule(decl, 'rtl').append(rtlDecl)\n\t];\n};\n","import cloneRule from './clone-rule';\n\nexport default (decl, values, dir) => {\n\tconst lDecl = decl.clone({ value: 'left' });\n\tconst rDecl = decl.clone({ value: 'right' });\n\n\treturn /^start$/i.test(decl.value) ? 'ltr' === dir ? lDecl : 'rtl' === dir ? rDecl : [\n\t\tcloneRule(decl, 'ltr').append(lDecl),\n\t\tcloneRule(decl, 'rtl').append(rDecl)\n\t] : /^end$/i.test(decl.value) ? 'ltr' === dir ? rDecl : 'rtl' === dir ? lDecl : [\n\t\tcloneRule(decl, 'ltr').append(rDecl),\n\t\tcloneRule(decl, 'rtl').append(lDecl)\n\t] : null;\n};\n","export function splitByComma(string, isTrimmed) {\n\treturn splitByRegExp(string, /^,$/, isTrimmed);\n}\n\nexport function splitBySpace(string, isTrimmed) {\n\treturn splitByRegExp(string, /^\\s$/, isTrimmed);\n}\n\nexport function splitBySlash(string, isTrimmed) {\n\treturn splitByRegExp(string, /^\\/$/, isTrimmed);\n}\n\nfunction splitByRegExp(string, re, isTrimmed) {\n\tconst array = [];\n\tlet buffer = '';\n\tlet split = false;\n\tlet func = 0;\n\tlet i = -1;\n\n\twhile (++i < string.length) {\n\t\tconst char = string[i];\n\n\t\tif (char === '(') {\n\t\t\tfunc += 1;\n\t\t} else if (char === ')') {\n\t\t\tif (func > 0) {\n\t\t\t\tfunc -= 1;\n\t\t\t}\n\t\t} else if (func === 0) {\n\t\t\tif (re.test(char)) {\n\t\t\t\tsplit = true;\n\t\t\t}\n\t\t}\n\n\t\tif (split) {\n\t\t\tif (!isTrimmed || buffer.trim()) {\n\t\t\t\tarray.push(isTrimmed ? buffer.trim() : buffer);\n\t\t\t}\n\n\t\t\tif (!isTrimmed) {\n\t\t\t\tarray.push(char);\n\t\t\t}\n\n\t\t\tbuffer = '';\n\t\t\tsplit = false;\n\t\t} else {\n\t\t\tbuffer += char\n\t\t}\n\t}\n\n\tif (buffer !== '') {\n\t\tarray.push(isTrimmed ? buffer.trim() : buffer);\n\t}\n\n\treturn array;\n}\n","import cloneRule from './clone-rule';\nimport { splitByComma, splitBySpace } from './split';\n\nexport default (decl, notValues, dir) => {\n\tconst ltrValues = [];\n\tconst rtlValues = [];\n\n\tsplitByComma(decl.value).forEach(value => {\n\t\tlet hasBeenSplit = false;\n\n\t\tsplitBySpace(value).forEach((word, index, words) => {\n\t\t\tif (word in valueMap) {\n\t\t\t\thasBeenSplit = true;\n\n\t\t\t\tvalueMap[word].ltr.forEach(replacement => {\n\t\t\t\t\tconst clone = words.slice();\n\n\t\t\t\t\tclone.splice(index, 1, replacement);\n\n\t\t\t\t\tif (ltrValues.length && !/^,$/.test(ltrValues[ltrValues.length - 1])) {\n\t\t\t\t\t\tltrValues.push(',');\n\t\t\t\t\t}\n\n\t\t\t\t\tltrValues.push(clone.join(''));\n\t\t\t\t});\n\n\t\t\t\tvalueMap[word].rtl.forEach(replacement => {\n\t\t\t\t\tconst clone = words.slice();\n\n\t\t\t\t\tclone.splice(index, 1, replacement);\n\n\t\t\t\t\tif (rtlValues.length && !/^,$/.test(rtlValues[rtlValues.length - 1])) {\n\t\t\t\t\t\trtlValues.push(',');\n\t\t\t\t\t}\n\n\t\t\t\t\trtlValues.push(clone.join(''));\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tif (!hasBeenSplit) {\n\t\t\tltrValues.push(value);\n\t\t\trtlValues.push(value);\n\t\t}\n\t});\n\n\tconst ltrDecl = decl.clone({ value: ltrValues.join('') });\n\tconst rtlDecl = decl.clone({ value: rtlValues.join('') });\n\n\treturn ltrValues.length && 'ltr' === dir\n\t\t? ltrDecl\n\t: rtlValues.length && 'rtl' === dir\n\t\t? rtlDecl\n\t: ltrDecl.value !== rtlDecl.value\n\t\t? [\n\t\t\tcloneRule(decl, 'ltr').append(ltrDecl),\n\t\t\tcloneRule(decl, 'rtl').append(rtlDecl)\n\t\t]\n\t: null;\n};\n\nconst valueMap = {\n\t'border-block': { ltr: ['border-top', 'border-bottom'], rtl: ['border-top', 'border-bottom'] },\n\t'border-block-color': { ltr: ['border-top-color', 'border-bottom-color'], rtl: ['border-top-color', 'border-bottom-color'] },\n\t'border-block-end': { ltr: ['border-bottom'], rtl: ['border-bottom'] },\n\t'border-block-end-color': { ltr: ['border-bottom-color'], rtl: ['border-bottom-color'] },\n\t'border-block-end-style': { ltr: ['border-bottom-style'], rtl: ['border-bottom-style'] },\n\t'border-block-end-width': { ltr: ['border-bottom-width'], rtl: ['border-bottom-width'] },\n\t'border-block-start': { ltr: ['border-top'], rtl: ['border-top'] },\n\t'border-block-start-color': { ltr: ['border-top-color'], rtl: ['border-top-color'] },\n\t'border-block-start-style': { ltr: ['border-top-style'], rtl: ['border-top-style'] },\n\t'border-block-start-width': { ltr: ['border-top-width'], rtl: ['border-top-width'] },\n\t'border-block-style': { ltr: ['border-top-style', 'border-bottom-style'], rtl: ['border-top-style', 'border-bottom-style'] },\n\t'border-block-width': { ltr: ['border-top-width', 'border-bottom-width'], rtl: ['border-top-width', 'border-bottom-width'] },\n\t'border-end': { ltr: ['border-bottom', 'border-right'], rtl: ['border-bottom', 'border-left'] },\n\t'border-end-color': { ltr: ['border-bottom-color', 'border-right-color'], rtl: ['border-bottom-color', 'border-left-color'] },\n\t'border-end-style': { ltr: ['border-bottom-style', 'border-right-style'], rtl: ['border-bottom-style', 'border-left-style'] },\n\t'border-end-width': { ltr: ['border-bottom-width', 'border-right-width'], rtl: ['border-bottom-width', 'border-left-width'] },\n\t'border-inline': { ltr: ['border-left', 'border-right'], rtl: ['border-left', 'border-right'] },\n\t'border-inline-color': { ltr: ['border-left-color', 'border-right-color'], rtl: ['border-left-color', 'border-right-color'] },\n\t'border-inline-end': { ltr: ['border-right'], rtl: ['border-left'] },\n\t'border-inline-end-color': { ltr: ['border-right-color'], rtl: ['border-left-color'] },\n\t'border-inline-end-style': { ltr: ['border-right-style'], rtl: ['border-left-style'] },\n\t'border-inline-end-width': { ltr: ['border-right-width'], rtl: ['border-left-width'] },\n\t'border-inline-start': { ltr: ['border-left'], rtl: ['border-right'] },\n\t'border-inline-start-color': { ltr: ['border-left-color'], rtl: ['border-right-color'] },\n\t'border-inline-start-style': { ltr: ['border-left-style'], rtl: ['border-right-style'] },\n\t'border-inline-start-width': { ltr: ['border-left-width'], rtl: ['border-right-width'] },\n\t'border-inline-style': { ltr: ['border-left-style', 'border-right-style'], rtl: ['border-left-style', 'border-right-style'] },\n\t'border-inline-width': { ltr: ['border-left-width', 'border-right-width'], rtl: ['border-left-width', 'border-right-width'] },\n\t'border-start': { ltr: ['border-top', 'border-left'], rtl: ['border-top', 'border-right'] },\n\t'border-start-color': { ltr: ['border-top-color', 'border-left-color'], rtl: ['border-top-color', 'border-right-color'] },\n\t'border-start-style': { ltr: ['border-top-style', 'border-left-style'], rtl: ['border-top-style', 'border-right-style'] },\n\t'border-start-width': { ltr: ['border-top-width', 'border-left-width'], rtl: ['border-top-width', 'border-right-width'] },\n\t'block-size': { ltr: ['height'], rtl: ['height'] },\n\t'inline-size': { ltr: ['width'], rtl: ['width'] },\n\t'inset': { ltr: ['top', 'right', 'bottom', 'left'], rtl: ['top', 'right', 'bottom', 'left'] },\n\t'inset-block': { ltr: ['top', 'bottom'], rtl: ['top', 'bottom'] },\n\t'inset-block-start': { ltr: ['top'], rtl: ['top'] },\n\t'inset-block-end': { ltr: ['bottom'], rtl: ['bottom'] },\n\t'inset-end': { ltr: ['bottom', 'right'], rtl: ['bottom', 'left'] },\n\t'inset-inline': { ltr: ['left', 'right'], rtl: ['left', 'right'] },\n\t'inset-inline-start': { ltr: ['left'], rtl: ['right'] },\n\t'inset-inline-end': { ltr: ['right'], rtl: ['left'] },\n\t'inset-start': { ltr: ['top', 'left'], rtl: ['top', 'right'] },\n\t'margin-block': { ltr: ['margin-top', 'margin-bottom'], rtl: ['margin-top', 'margin-bottom'] },\n\t'margin-block-start': { ltr: ['margin-top'], rtl: ['margin-top'] },\n\t'margin-block-end': { ltr: ['margin-bottom'], rtl: ['margin-bottom'] },\n\t'margin-end': { ltr: ['margin-bottom', 'margin-right'], rtl: ['margin-bottom', 'margin-left'] },\n\t'margin-inline': { ltr: ['margin-left', 'margin-right'], rtl: ['margin-left', 'margin-right'] },\n\t'margin-inline-start': { ltr: ['margin-left'], rtl: ['margin-right'] },\n\t'margin-inline-end': { ltr: ['margin-right'], rtl: ['margin-left'] },\n\t'margin-start': { ltr: ['margin-top', 'margin-left'], rtl: ['margin-top', 'margin-right'] },\n\t'padding-block': { ltr: ['padding-top', 'padding-bottom'], rtl: ['padding-top', 'padding-bottom'] },\n\t'padding-block-start': { ltr: ['padding-top'], rtl: ['padding-top'] },\n\t'padding-block-end': { ltr: ['padding-bottom'], rtl: ['padding-bottom'] },\n\t'padding-end': { ltr: ['padding-bottom', 'padding-right'], rtl: ['padding-bottom', 'padding-left'] },\n\t'padding-inline': { ltr: ['padding-left', 'padding-right'], rtl: ['padding-left', 'padding-right'] },\n\t'padding-inline-start': { ltr: ['padding-left'], rtl: ['padding-right'] },\n\t'padding-inline-end': { ltr: ['padding-right'], rtl: ['padding-left'] },\n\t'padding-start': { ltr: ['padding-top', 'padding-left'], rtl: ['padding-top', 'padding-right'] },\n};\n","export default /^(?:(inset|margin|padding)(?:-(block|block-start|block-end|inline|inline-start|inline-end|start|end))|(min-|max-)?(block|inline)-(size))$/i;\n","// tooling\nimport postcss from 'postcss';\n\n// internal tooling\nimport transformBorder from './lib/transform-border';\nimport transformFloat from './lib/transform-float';\nimport transformInset from './lib/transform-inset';\nimport transformResize from './lib/transform-resize';\nimport transformSide from './lib/transform-side';\nimport transformSize from './lib/transform-size';\nimport transformSpacing from './lib/transform-spacing';\nimport transformTextAlign from './lib/transform-text-align';\nimport transformTransition from './lib/transform-transition';\nimport matchSupportedProperties from './lib/match-supported-properties';\nimport { splitBySlash, splitBySpace } from './lib/split';\n\n// supported transforms\nconst transforms = {\n\t'border': transformBorder['border'], 'border-width': transformBorder['border'], 'border-style': transformBorder['border'], 'border-color': transformBorder['border'],\n\t'border-block': transformBorder['border-block'], 'border-block-width': transformBorder['border-block'], 'border-block-style': transformBorder['border-block'], 'border-block-color': transformBorder['border-block'],\n\t'border-block-start': transformBorder['border-block-start'], 'border-block-start-width': transformBorder['border-block-start'], 'border-block-start-style': transformBorder['border-block-start'], 'border-block-start-color': transformBorder['border-block-start'],\n\t'border-block-end': transformBorder['border-block-end'], 'border-block-end-width': transformBorder['border-block-end'], 'border-block-end-style': transformBorder['border-block-end'], 'border-block-end-color': transformBorder['border-block-end'],\n\t'border-inline': transformBorder['border-inline'], 'border-inline-width': transformBorder['border-inline'], 'border-inline-style': transformBorder['border-inline'], 'border-inline-color': transformBorder['border-inline'],\n\t'border-inline-start': transformBorder['border-inline-start'], 'border-inline-start-width': transformBorder['border-inline-start'], 'border-inline-start-style': transformBorder['border-inline-start'], 'border-inline-start-color': transformBorder['border-inline-start'],\n\t'border-inline-end': transformBorder['border-inline-end'], 'border-inline-end-width': transformBorder['border-inline-end'], 'border-inline-end-style': transformBorder['border-inline-end'], 'border-inline-end-color': transformBorder['border-inline-end'],\n\t'border-start': transformBorder['border-start'], 'border-start-width': transformBorder['border-start'], 'border-start-style': transformBorder['border-start'], 'border-start-color': transformBorder['border-start'],\n\t'border-end': transformBorder['border-end'], 'border-end-width': transformBorder['border-end'], 'border-end-style': transformBorder['border-end'], 'border-end-color': transformBorder['border-end'],\n\t'clear': transformFloat,\n\t'inset': transformInset,\n\t'margin': transformSpacing,\n\t'padding': transformSpacing,\n\t'block': transformSide['block'],\n\t'block-start': transformSide['block-start'],\n\t'block-end': transformSide['block-end'],\n\t'inline': transformSide['inline'],\n\t'inline-start': transformSide['inline-start'],\n\t'inline-end': transformSide['inline-end'],\n\t'start': transformSide['start'],\n\t'end': transformSide['end'],\n\t'float': transformFloat,\n\t'resize': transformResize,\n\t'size': transformSize,\n\t'text-align': transformTextAlign,\n\t'transition': transformTransition,\n\t'transition-property': transformTransition\n};\n\n// properties that will be split by slash\nconst splitBySlashPropRegExp = /^border(-block|-inline|-start|-end)?(-width|-style|-color)?$/i;\n\n// plugin\nexport default postcss.plugin('postcss-logical-properties', opts => {\n\tconst preserve = Boolean(Object(opts).preserve);\n\tconst dir = !preserve && typeof Object(opts).dir === 'string'\n\t\t? /^rtl$/i.test(opts.dir)\n\t\t\t? 'rtl'\n\t\t: 'ltr'\n\t: false;\n\n\treturn root => {\n\t\troot.walkDecls(decl => {\n\t\t\tconst parent = decl.parent;\n\t\t\tconst values = splitBySlashPropRegExp.test(decl.prop) ? splitBySlash(decl.value, true) : splitBySpace(decl.value, true);\n\t\t\tconst prop = decl.prop.replace(matchSupportedProperties, '$2$5').toLowerCase();\n\n\t\t\tif (prop in transforms) {\n\t\t\t\tconst replacer = transforms[prop](decl, values, dir);\n\n\t\t\t\tif (replacer) {\n\t\t\t\t\t[].concat(replacer).forEach(replacement => {\n\t\t\t\t\t\tif (replacement.type === 'rule') {\n\t\t\t\t\t\t\tparent.before(replacement);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdecl.before(replacement);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!preserve) {\n\t\t\t\t\t\tdecl.remove();\n\n\t\t\t\t\t\tif (!parent.nodes.length) {\n\t\t\t\t\t\t\tparent.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n});\n"]},"metadata":{},"sourceType":"module"}