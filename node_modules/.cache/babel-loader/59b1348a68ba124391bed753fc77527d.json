{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar chalk = require('chalk');\n\nvar filesize = require('filesize');\n\nvar recursive = require('recursive-readdir');\n\nvar stripAnsi = require('strip-ansi');\n\nvar gzipSize = require('gzip-size').sync;\n\nfunction canReadAsset(asset) {\n  return /\\.(js|css)$/.test(asset) && !/service-worker\\.js/.test(asset) && !/precache-manifest\\.[0-9a-f]+\\.js/.test(asset);\n} // Prints a detailed summary of build files.\n\n\nfunction printFileSizesAfterBuild(webpackStats, previousSizeMap, buildFolder, maxBundleGzipSize, maxChunkGzipSize) {\n  var root = previousSizeMap.root;\n  var sizes = previousSizeMap.sizes;\n  var assets = (webpackStats.stats || [webpackStats]).map(stats => stats.toJson({\n    all: false,\n    assets: true\n  }).assets.filter(asset => canReadAsset(asset.name)).map(asset => {\n    var fileContents = fs.readFileSync(path.join(root, asset.name));\n    var size = gzipSize(fileContents);\n    var previousSize = sizes[removeFileNameHash(root, asset.name)];\n    var difference = getDifferenceLabel(size, previousSize);\n    return {\n      folder: path.join(path.basename(buildFolder), path.dirname(asset.name)),\n      name: path.basename(asset.name),\n      size: size,\n      sizeLabel: filesize(size) + (difference ? ' (' + difference + ')' : '')\n    };\n  })).reduce((single, all) => all.concat(single), []);\n  assets.sort((a, b) => b.size - a.size);\n  var longestSizeLabelLength = Math.max.apply(null, assets.map(a => stripAnsi(a.sizeLabel).length));\n  var suggestBundleSplitting = false;\n  assets.forEach(asset => {\n    var sizeLabel = asset.sizeLabel;\n    var sizeLength = stripAnsi(sizeLabel).length;\n\n    if (sizeLength < longestSizeLabelLength) {\n      var rightPadding = ' '.repeat(longestSizeLabelLength - sizeLength);\n      sizeLabel += rightPadding;\n    }\n\n    var isMainBundle = asset.name.indexOf('main.') === 0;\n    var maxRecommendedSize = isMainBundle ? maxBundleGzipSize : maxChunkGzipSize;\n    var isLarge = maxRecommendedSize && asset.size > maxRecommendedSize;\n\n    if (isLarge && path.extname(asset.name) === '.js') {\n      suggestBundleSplitting = true;\n    }\n\n    console.log('  ' + (isLarge ? chalk.yellow(sizeLabel) : sizeLabel) + '  ' + chalk.dim(asset.folder + path.sep) + chalk.cyan(asset.name));\n  });\n\n  if (suggestBundleSplitting) {\n    console.log();\n    console.log(chalk.yellow('The bundle size is significantly larger than recommended.'));\n    console.log(chalk.yellow('Consider reducing it with code splitting: https://goo.gl/9VhYWB'));\n    console.log(chalk.yellow('You can also analyze the project dependencies: https://goo.gl/LeUzfb'));\n  }\n}\n\nfunction removeFileNameHash(buildFolder, fileName) {\n  return fileName.replace(buildFolder, '').replace(/\\\\/g, '/').replace(/\\/?(.*)(\\.[0-9a-f]+)(\\.chunk)?(\\.js|\\.css)/, (match, p1, p2, p3, p4) => p1 + p4);\n} // Input: 1024, 2048\n// Output: \"(+1 KB)\"\n\n\nfunction getDifferenceLabel(currentSize, previousSize) {\n  var FIFTY_KILOBYTES = 1024 * 50;\n  var difference = currentSize - previousSize;\n  var fileSize = !Number.isNaN(difference) ? filesize(difference) : 0;\n\n  if (difference >= FIFTY_KILOBYTES) {\n    return chalk.red('+' + fileSize);\n  } else if (difference < FIFTY_KILOBYTES && difference > 0) {\n    return chalk.yellow('+' + fileSize);\n  } else if (difference < 0) {\n    return chalk.green(fileSize);\n  } else {\n    return '';\n  }\n}\n\nfunction measureFileSizesBeforeBuild(buildFolder) {\n  return new Promise(resolve => {\n    recursive(buildFolder, (err, fileNames) => {\n      var sizes;\n\n      if (!err && fileNames) {\n        sizes = fileNames.filter(canReadAsset).reduce((memo, fileName) => {\n          var contents = fs.readFileSync(fileName);\n          var key = removeFileNameHash(buildFolder, fileName);\n          memo[key] = gzipSize(contents);\n          return memo;\n        }, {});\n      }\n\n      resolve({\n        root: buildFolder,\n        sizes: sizes || {}\n      });\n    });\n  });\n}\n\nmodule.exports = {\n  measureFileSizesBeforeBuild: measureFileSizesBeforeBuild,\n  printFileSizesAfterBuild: printFileSizesAfterBuild\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-dev-utils/FileSizeReporter.js"],"names":["fs","require","path","chalk","filesize","recursive","stripAnsi","gzipSize","sync","canReadAsset","asset","test","printFileSizesAfterBuild","webpackStats","previousSizeMap","buildFolder","maxBundleGzipSize","maxChunkGzipSize","root","sizes","assets","stats","map","toJson","all","filter","name","fileContents","readFileSync","join","size","previousSize","removeFileNameHash","difference","getDifferenceLabel","folder","basename","dirname","sizeLabel","reduce","single","concat","sort","a","b","longestSizeLabelLength","Math","max","apply","length","suggestBundleSplitting","forEach","sizeLength","rightPadding","repeat","isMainBundle","indexOf","maxRecommendedSize","isLarge","extname","console","log","yellow","dim","sep","cyan","fileName","replace","match","p1","p2","p3","p4","currentSize","FIFTY_KILOBYTES","fileSize","Number","isNaN","red","green","measureFileSizesBeforeBuild","Promise","resolve","err","fileNames","memo","contents","key","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar chalk = require('chalk');\nvar filesize = require('filesize');\nvar recursive = require('recursive-readdir');\nvar stripAnsi = require('strip-ansi');\nvar gzipSize = require('gzip-size').sync;\n\nfunction canReadAsset(asset) {\n  return (\n    /\\.(js|css)$/.test(asset) &&\n    !/service-worker\\.js/.test(asset) &&\n    !/precache-manifest\\.[0-9a-f]+\\.js/.test(asset)\n  );\n}\n\n// Prints a detailed summary of build files.\nfunction printFileSizesAfterBuild(\n  webpackStats,\n  previousSizeMap,\n  buildFolder,\n  maxBundleGzipSize,\n  maxChunkGzipSize\n) {\n  var root = previousSizeMap.root;\n  var sizes = previousSizeMap.sizes;\n  var assets = (webpackStats.stats || [webpackStats])\n    .map(stats =>\n      stats\n        .toJson({ all: false, assets: true })\n        .assets.filter(asset => canReadAsset(asset.name))\n        .map(asset => {\n          var fileContents = fs.readFileSync(path.join(root, asset.name));\n          var size = gzipSize(fileContents);\n          var previousSize = sizes[removeFileNameHash(root, asset.name)];\n          var difference = getDifferenceLabel(size, previousSize);\n          return {\n            folder: path.join(\n              path.basename(buildFolder),\n              path.dirname(asset.name)\n            ),\n            name: path.basename(asset.name),\n            size: size,\n            sizeLabel:\n              filesize(size) + (difference ? ' (' + difference + ')' : ''),\n          };\n        })\n    )\n    .reduce((single, all) => all.concat(single), []);\n  assets.sort((a, b) => b.size - a.size);\n  var longestSizeLabelLength = Math.max.apply(\n    null,\n    assets.map(a => stripAnsi(a.sizeLabel).length)\n  );\n  var suggestBundleSplitting = false;\n  assets.forEach(asset => {\n    var sizeLabel = asset.sizeLabel;\n    var sizeLength = stripAnsi(sizeLabel).length;\n    if (sizeLength < longestSizeLabelLength) {\n      var rightPadding = ' '.repeat(longestSizeLabelLength - sizeLength);\n      sizeLabel += rightPadding;\n    }\n    var isMainBundle = asset.name.indexOf('main.') === 0;\n    var maxRecommendedSize = isMainBundle\n      ? maxBundleGzipSize\n      : maxChunkGzipSize;\n    var isLarge = maxRecommendedSize && asset.size > maxRecommendedSize;\n    if (isLarge && path.extname(asset.name) === '.js') {\n      suggestBundleSplitting = true;\n    }\n    console.log(\n      '  ' +\n        (isLarge ? chalk.yellow(sizeLabel) : sizeLabel) +\n        '  ' +\n        chalk.dim(asset.folder + path.sep) +\n        chalk.cyan(asset.name)\n    );\n  });\n  if (suggestBundleSplitting) {\n    console.log();\n    console.log(\n      chalk.yellow('The bundle size is significantly larger than recommended.')\n    );\n    console.log(\n      chalk.yellow(\n        'Consider reducing it with code splitting: https://goo.gl/9VhYWB'\n      )\n    );\n    console.log(\n      chalk.yellow(\n        'You can also analyze the project dependencies: https://goo.gl/LeUzfb'\n      )\n    );\n  }\n}\n\nfunction removeFileNameHash(buildFolder, fileName) {\n  return fileName\n    .replace(buildFolder, '')\n    .replace(/\\\\/g, '/')\n    .replace(\n      /\\/?(.*)(\\.[0-9a-f]+)(\\.chunk)?(\\.js|\\.css)/,\n      (match, p1, p2, p3, p4) => p1 + p4\n    );\n}\n\n// Input: 1024, 2048\n// Output: \"(+1 KB)\"\nfunction getDifferenceLabel(currentSize, previousSize) {\n  var FIFTY_KILOBYTES = 1024 * 50;\n  var difference = currentSize - previousSize;\n  var fileSize = !Number.isNaN(difference) ? filesize(difference) : 0;\n  if (difference >= FIFTY_KILOBYTES) {\n    return chalk.red('+' + fileSize);\n  } else if (difference < FIFTY_KILOBYTES && difference > 0) {\n    return chalk.yellow('+' + fileSize);\n  } else if (difference < 0) {\n    return chalk.green(fileSize);\n  } else {\n    return '';\n  }\n}\n\nfunction measureFileSizesBeforeBuild(buildFolder) {\n  return new Promise(resolve => {\n    recursive(buildFolder, (err, fileNames) => {\n      var sizes;\n      if (!err && fileNames) {\n        sizes = fileNames.filter(canReadAsset).reduce((memo, fileName) => {\n          var contents = fs.readFileSync(fileName);\n          var key = removeFileNameHash(buildFolder, fileName);\n          memo[key] = gzipSize(contents);\n          return memo;\n        }, {});\n      }\n      resolve({\n        root: buildFolder,\n        sizes: sizes || {},\n      });\n    });\n  });\n}\n\nmodule.exports = {\n  measureFileSizesBeforeBuild: measureFileSizesBeforeBuild,\n  printFileSizesAfterBuild: printFileSizesAfterBuild,\n};\n"]},"metadata":{},"sourceType":"script"}