{"ast":null,"code":"'use strict';\n\nvar traverse = require('../index');\n\nvar assert = require('assert');\n\ndescribe('json-schema-traverse', function () {\n  var calls;\n  beforeEach(function () {\n    calls = [];\n  });\n  it('should traverse all keywords containing schemas recursively', function () {\n    var schema = require('./fixtures/schema').schema;\n\n    var expectedCalls = require('./fixtures/schema').expectedCalls;\n\n    traverse(schema, {\n      cb: callback\n    });\n    assert.deepStrictEqual(calls, expectedCalls);\n  });\n  describe('Legacy v0.3.1 API', function () {\n    it('should traverse all keywords containing schemas recursively', function () {\n      var schema = require('./fixtures/schema').schema;\n\n      var expectedCalls = require('./fixtures/schema').expectedCalls;\n\n      traverse(schema, callback);\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n    it('should work when an options object is provided', function () {\n      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\n      var schema = require('./fixtures/schema').schema;\n\n      var expectedCalls = require('./fixtures/schema').expectedCalls;\n\n      traverse(schema, {}, callback);\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n  });\n  describe('allKeys option', function () {\n    var schema = {\n      someObject: {\n        minimum: 1,\n        maximum: 2\n      }\n    };\n    it('should traverse objects with allKeys: true option', function () {\n      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\n      var expectedCalls = [[schema, '', schema, undefined, undefined, undefined, undefined], [schema.someObject, '/someObject', schema, '', 'someObject', schema, undefined]];\n      traverse(schema, {\n        allKeys: true,\n        cb: callback\n      });\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n    it('should NOT traverse objects with allKeys: false option', function () {\n      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\n      var expectedCalls = [[schema, '', schema, undefined, undefined, undefined, undefined]];\n      traverse(schema, {\n        allKeys: false,\n        cb: callback\n      });\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n    it('should NOT traverse objects without allKeys option', function () {\n      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\n      var expectedCalls = [[schema, '', schema, undefined, undefined, undefined, undefined]];\n      traverse(schema, {\n        cb: callback\n      });\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n    it('should NOT travers objects in standard keywords which value is not a schema', function () {\n      var schema2 = {\n        const: {\n          foo: 'bar'\n        },\n        enum: ['a', 'b'],\n        required: ['foo'],\n        another: {},\n        patternProperties: {},\n        // will not traverse - no properties\n        dependencies: true,\n        // will not traverse - invalid\n        properties: {\n          smaller: {\n            type: 'number'\n          },\n          larger: {\n            type: 'number',\n            minimum: {\n              $data: '1/smaller'\n            }\n          }\n        }\n      }; // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\n\n      var expectedCalls = [[schema2, '', schema2, undefined, undefined, undefined, undefined], [schema2.another, '/another', schema2, '', 'another', schema2, undefined], [schema2.properties.smaller, '/properties/smaller', schema2, '', 'properties', schema2, 'smaller'], [schema2.properties.larger, '/properties/larger', schema2, '', 'properties', schema2, 'larger']];\n      traverse(schema2, {\n        allKeys: true,\n        cb: callback\n      });\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n  });\n  describe('pre and post', function () {\n    var schema = {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string'\n        },\n        age: {\n          type: 'number'\n        }\n      }\n    };\n    it('should traverse schema in pre-order', function () {\n      traverse(schema, {\n        cb: {\n          pre\n        }\n      });\n      var expectedCalls = [['pre', schema, '', schema, undefined, undefined, undefined, undefined], ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'], ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age']];\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n    it('should traverse schema in post-order', function () {\n      traverse(schema, {\n        cb: {\n          post\n        }\n      });\n      var expectedCalls = [['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'], ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'], ['post', schema, '', schema, undefined, undefined, undefined, undefined]];\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n    it('should traverse schema in pre- and post-order at the same time', function () {\n      traverse(schema, {\n        cb: {\n          pre,\n          post\n        }\n      });\n      var expectedCalls = [['pre', schema, '', schema, undefined, undefined, undefined, undefined], ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'], ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'], ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'], ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'], ['post', schema, '', schema, undefined, undefined, undefined, undefined]];\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n  });\n\n  function callback() {\n    calls.push(Array.prototype.slice.call(arguments));\n  }\n\n  function pre() {\n    calls.push(['pre'].concat(Array.prototype.slice.call(arguments)));\n  }\n\n  function post() {\n    calls.push(['post'].concat(Array.prototype.slice.call(arguments)));\n  }\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/json-schema-traverse/spec/index.spec.js"],"names":["traverse","require","assert","describe","calls","beforeEach","it","schema","expectedCalls","cb","callback","deepStrictEqual","someObject","minimum","maximum","undefined","allKeys","schema2","const","foo","enum","required","another","patternProperties","dependencies","properties","smaller","type","larger","$data","name","age","pre","post","push","Array","prototype","slice","call","arguments","concat"],"mappings":"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","sourcesContent":["'use strict';\n\nvar traverse = require('../index');\nvar assert = require('assert');\n\ndescribe('json-schema-traverse', function() {\n  var calls;\n\n  beforeEach(function() {\n    calls = [];\n  });\n\n  it('should traverse all keywords containing schemas recursively', function() {\n    var schema = require('./fixtures/schema').schema;\n    var expectedCalls = require('./fixtures/schema').expectedCalls;\n\n    traverse(schema, {cb: callback});\n    assert.deepStrictEqual(calls, expectedCalls);\n  });\n\n  describe('Legacy v0.3.1 API', function() {\n    it('should traverse all keywords containing schemas recursively', function() {\n      var schema = require('./fixtures/schema').schema;\n      var expectedCalls = require('./fixtures/schema').expectedCalls;\n\n      traverse(schema, callback);\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n\n    it('should work when an options object is provided', function() {\n      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\n      var schema = require('./fixtures/schema').schema;\n      var expectedCalls = require('./fixtures/schema').expectedCalls;\n\n      traverse(schema, {}, callback);\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n  });\n\n\n  describe('allKeys option', function() {\n    var schema = {\n      someObject: {\n        minimum: 1,\n        maximum: 2\n      }\n    };\n\n    it('should traverse objects with allKeys: true option', function() {\n      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\n      var expectedCalls = [\n        [schema, '', schema, undefined, undefined, undefined, undefined],\n        [schema.someObject, '/someObject', schema, '', 'someObject', schema, undefined]\n      ];\n\n      traverse(schema, {allKeys: true, cb: callback});\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n\n\n    it('should NOT traverse objects with allKeys: false option', function() {\n      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\n      var expectedCalls = [\n        [schema, '', schema, undefined, undefined, undefined, undefined]\n      ];\n\n      traverse(schema, {allKeys: false, cb: callback});\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n\n\n    it('should NOT traverse objects without allKeys option', function() {\n      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\n      var expectedCalls = [\n        [schema, '', schema, undefined, undefined, undefined, undefined]\n      ];\n\n      traverse(schema, {cb: callback});\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n\n\n    it('should NOT travers objects in standard keywords which value is not a schema', function() {\n      var schema2 = {\n        const: {foo: 'bar'},\n        enum: ['a', 'b'],\n        required: ['foo'],\n        another: {\n\n        },\n        patternProperties: {}, // will not traverse - no properties\n        dependencies: true, // will not traverse - invalid\n        properties: {\n          smaller: {\n            type: 'number'\n          },\n          larger: {\n            type: 'number',\n            minimum: {$data: '1/smaller'}\n          }\n        }\n      };\n\n      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\n      var expectedCalls = [\n        [schema2, '', schema2, undefined, undefined, undefined, undefined],\n        [schema2.another, '/another', schema2, '', 'another', schema2, undefined],\n        [schema2.properties.smaller, '/properties/smaller', schema2, '', 'properties', schema2, 'smaller'],\n        [schema2.properties.larger, '/properties/larger', schema2, '', 'properties', schema2, 'larger'],\n      ];\n\n      traverse(schema2, {allKeys: true, cb: callback});\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n  });\n\n  describe('pre and post', function() {\n    var schema = {\n      type: 'object',\n      properties: {\n        name: {type: 'string'},\n        age: {type: 'number'}\n      }\n    };\n\n    it('should traverse schema in pre-order', function() {\n      traverse(schema, {cb: {pre}});\n      var expectedCalls = [\n        ['pre', schema, '', schema, undefined, undefined, undefined, undefined],\n        ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n        ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n      ];\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n\n    it('should traverse schema in post-order', function() {\n      traverse(schema, {cb: {post}});\n      var expectedCalls = [\n        ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n        ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n        ['post', schema, '', schema, undefined, undefined, undefined, undefined],\n      ];\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n\n    it('should traverse schema in pre- and post-order at the same time', function() {\n      traverse(schema, {cb: {pre, post}});\n      var expectedCalls = [\n        ['pre', schema, '', schema, undefined, undefined, undefined, undefined],\n        ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n        ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n        ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n        ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n        ['post', schema, '', schema, undefined, undefined, undefined, undefined],\n      ];\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n  });\n\n  function callback() {\n    calls.push(Array.prototype.slice.call(arguments));\n  }\n\n  function pre() {\n    calls.push(['pre'].concat(Array.prototype.slice.call(arguments)));\n  }\n\n  function post() {\n    calls.push(['post'].concat(Array.prototype.slice.call(arguments)));\n  }\n});\n"]},"metadata":{},"sourceType":"script"}