{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _os = _interopRequireDefault(require(\"os\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _cloneDeep = _interopRequireDefault(require(\"clone-deep\"));\n\nvar _proxyCustomImporters = _interopRequireDefault(require(\"./proxyCustomImporters\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction isProductionLikeMode(loaderContext) {\n  return loaderContext.mode === 'production' || !loaderContext.mode || loaderContext.minimize;\n}\n/**\n * Derives the sass options from the loader context and normalizes its values with sane defaults.\n *\n * @param {object} loaderContext\n * @param {object} loaderOptions\n * @param {string} content\n * @param {object} implementation\n * @returns {Object}\n */\n\n\nfunction getSassOptions(loaderContext, loaderOptions, content, implementation) {\n  const options = (0, _cloneDeep.default)(loaderOptions.sassOptions ? typeof loaderOptions.sassOptions === 'function' ? loaderOptions.sassOptions(loaderContext) || {} : loaderOptions.sassOptions : {});\n  const isDartSass = implementation.info.includes('dart-sass');\n\n  if (isDartSass) {\n    const shouldTryToResolveFibers = !options.fiber && options.fiber !== false;\n\n    if (shouldTryToResolveFibers) {\n      let fibers;\n\n      try {\n        fibers = require.resolve('fibers');\n      } catch (_error) {// Nothing\n      }\n\n      if (fibers) {\n        // eslint-disable-next-line global-require, import/no-dynamic-require\n        options.fiber = require(fibers);\n      }\n    } else if (options.fiber === false) {\n      // Don't pass the `fiber` option for `sass` (`Dart Sass`)\n      delete options.fiber;\n    }\n  } else {\n    // Don't pass the `fiber` option for `node-sass`\n    delete options.fiber;\n  }\n\n  options.data = loaderOptions.prependData ? typeof loaderOptions.prependData === 'function' ? loaderOptions.prependData(loaderContext) + _os.default.EOL + content : loaderOptions.prependData + _os.default.EOL + content : content; // opt.outputStyle\n\n  if (!options.outputStyle && isProductionLikeMode(loaderContext)) {\n    options.outputStyle = 'compressed';\n  }\n\n  const useSourceMap = typeof loaderOptions.sourceMap === 'boolean' ? loaderOptions.sourceMap : loaderContext.sourceMap; // opt.sourceMap\n  // Not using the `this.sourceMap` flag because css source maps are different\n  // @see https://github.com/webpack/css-loader/pull/40\n\n  if (useSourceMap) {\n    // Deliberately overriding the sourceMap option here.\n    // node-sass won't produce source maps if the data option is used and options.sourceMap is not a string.\n    // In case it is a string, options.sourceMap should be a path where the source map is written.\n    // But since we're using the data option, the source map will not actually be written, but\n    // all paths in sourceMap.sources will be relative to that path.\n    // Pretty complicated... :(\n    options.sourceMap = _path.default.join(process.cwd(), '/sass.map');\n\n    if ('sourceMapRoot' in options === false) {\n      options.sourceMapRoot = process.cwd();\n    }\n\n    if ('omitSourceMapUrl' in options === false) {\n      // The source map url doesn't make sense because we don't know the output path\n      // The css-loader will handle that for us\n      options.omitSourceMapUrl = true;\n    }\n\n    if ('sourceMapContents' in options === false) {\n      // If sourceMapContents option is not set, set it to true otherwise maps will be empty/null\n      // when exported by webpack-extract-text-plugin.\n      options.sourceMapContents = true;\n    }\n  }\n\n  const {\n    resourcePath\n  } = loaderContext;\n\n  const ext = _path.default.extname(resourcePath); // If we are compiling sass and indentedSyntax isn't set, automatically set it.\n\n\n  if (ext && ext.toLowerCase() === '.sass' && 'indentedSyntax' in options === false) {\n    options.indentedSyntax = true;\n  } else {\n    options.indentedSyntax = Boolean(options.indentedSyntax);\n  } // Allow passing custom importers to `node-sass`. Accepts `Function` or an array of `Function`s.\n\n\n  options.importer = options.importer ? (0, _proxyCustomImporters.default)(options.importer, resourcePath) : [];\n  options.includePaths = (options.includePaths || []).concat(_path.default.dirname(resourcePath));\n  return options;\n}\n\nvar _default = getSassOptions;\nexports.default = _default;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/sass-loader/dist/getSassOptions.js"],"names":["Object","defineProperty","exports","value","default","_os","_interopRequireDefault","require","_path","_cloneDeep","_proxyCustomImporters","obj","__esModule","isProductionLikeMode","loaderContext","mode","minimize","getSassOptions","loaderOptions","content","implementation","options","sassOptions","isDartSass","info","includes","shouldTryToResolveFibers","fiber","fibers","resolve","_error","data","prependData","EOL","outputStyle","useSourceMap","sourceMap","join","process","cwd","sourceMapRoot","omitSourceMapUrl","sourceMapContents","resourcePath","ext","extname","toLowerCase","indentedSyntax","Boolean","importer","includePaths","concat","dirname","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _os = _interopRequireDefault(require(\"os\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _cloneDeep = _interopRequireDefault(require(\"clone-deep\"));\n\nvar _proxyCustomImporters = _interopRequireDefault(require(\"./proxyCustomImporters\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isProductionLikeMode(loaderContext) {\n  return loaderContext.mode === 'production' || !loaderContext.mode || loaderContext.minimize;\n}\n/**\n * Derives the sass options from the loader context and normalizes its values with sane defaults.\n *\n * @param {object} loaderContext\n * @param {object} loaderOptions\n * @param {string} content\n * @param {object} implementation\n * @returns {Object}\n */\n\n\nfunction getSassOptions(loaderContext, loaderOptions, content, implementation) {\n  const options = (0, _cloneDeep.default)(loaderOptions.sassOptions ? typeof loaderOptions.sassOptions === 'function' ? loaderOptions.sassOptions(loaderContext) || {} : loaderOptions.sassOptions : {});\n  const isDartSass = implementation.info.includes('dart-sass');\n\n  if (isDartSass) {\n    const shouldTryToResolveFibers = !options.fiber && options.fiber !== false;\n\n    if (shouldTryToResolveFibers) {\n      let fibers;\n\n      try {\n        fibers = require.resolve('fibers');\n      } catch (_error) {// Nothing\n      }\n\n      if (fibers) {\n        // eslint-disable-next-line global-require, import/no-dynamic-require\n        options.fiber = require(fibers);\n      }\n    } else if (options.fiber === false) {\n      // Don't pass the `fiber` option for `sass` (`Dart Sass`)\n      delete options.fiber;\n    }\n  } else {\n    // Don't pass the `fiber` option for `node-sass`\n    delete options.fiber;\n  }\n\n  options.data = loaderOptions.prependData ? typeof loaderOptions.prependData === 'function' ? loaderOptions.prependData(loaderContext) + _os.default.EOL + content : loaderOptions.prependData + _os.default.EOL + content : content; // opt.outputStyle\n\n  if (!options.outputStyle && isProductionLikeMode(loaderContext)) {\n    options.outputStyle = 'compressed';\n  }\n\n  const useSourceMap = typeof loaderOptions.sourceMap === 'boolean' ? loaderOptions.sourceMap : loaderContext.sourceMap; // opt.sourceMap\n  // Not using the `this.sourceMap` flag because css source maps are different\n  // @see https://github.com/webpack/css-loader/pull/40\n\n  if (useSourceMap) {\n    // Deliberately overriding the sourceMap option here.\n    // node-sass won't produce source maps if the data option is used and options.sourceMap is not a string.\n    // In case it is a string, options.sourceMap should be a path where the source map is written.\n    // But since we're using the data option, the source map will not actually be written, but\n    // all paths in sourceMap.sources will be relative to that path.\n    // Pretty complicated... :(\n    options.sourceMap = _path.default.join(process.cwd(), '/sass.map');\n\n    if ('sourceMapRoot' in options === false) {\n      options.sourceMapRoot = process.cwd();\n    }\n\n    if ('omitSourceMapUrl' in options === false) {\n      // The source map url doesn't make sense because we don't know the output path\n      // The css-loader will handle that for us\n      options.omitSourceMapUrl = true;\n    }\n\n    if ('sourceMapContents' in options === false) {\n      // If sourceMapContents option is not set, set it to true otherwise maps will be empty/null\n      // when exported by webpack-extract-text-plugin.\n      options.sourceMapContents = true;\n    }\n  }\n\n  const {\n    resourcePath\n  } = loaderContext;\n\n  const ext = _path.default.extname(resourcePath); // If we are compiling sass and indentedSyntax isn't set, automatically set it.\n\n\n  if (ext && ext.toLowerCase() === '.sass' && 'indentedSyntax' in options === false) {\n    options.indentedSyntax = true;\n  } else {\n    options.indentedSyntax = Boolean(options.indentedSyntax);\n  } // Allow passing custom importers to `node-sass`. Accepts `Function` or an array of `Function`s.\n\n\n  options.importer = options.importer ? (0, _proxyCustomImporters.default)(options.importer, resourcePath) : [];\n  options.includePaths = (options.includePaths || []).concat(_path.default.dirname(resourcePath));\n  return options;\n}\n\nvar _default = getSassOptions;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}