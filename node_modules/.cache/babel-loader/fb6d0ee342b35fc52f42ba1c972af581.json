{"ast":null,"code":"/* eslint-env mocha */\nvar assert = require('assert');\n\nvar https = require('https');\n\nvar http = require('http');\n\nvar util = require('util');\n\nvar fixtures = require('./fixtures');\n\nvar spdy = require('../'); // Node.js 0.10 and 0.12 support\n\n\nObject.assign = process.versions.modules >= 46 ? Object.assign // eslint-disable-next-line\n: util._extend;\ndescribe('SPDY Client', function () {\n  describe('regular', function () {\n    fixtures.everyConfig(function (protocol, alpn, version, plain) {\n      var server;\n      var agent;\n      var hmodule;\n      beforeEach(function (done) {\n        hmodule = plain ? http : https;\n        var options = Object.assign({\n          spdy: {\n            plain: plain\n          }\n        }, fixtures.keys);\n        server = spdy.createServer(options, function (req, res) {\n          var body = '';\n          req.on('data', function (chunk) {\n            body += chunk;\n          });\n          req.on('end', function () {\n            res.writeHead(200, req.headers);\n            res.addTrailers({\n              trai: 'ler'\n            });\n            var push = res.push('/push', {\n              request: {\n                push: 'yes'\n              }\n            }, function (err) {\n              assert(!err);\n              push.end('push');\n              push.on('error', function () {});\n              res.end(body || 'okay');\n            });\n          });\n        });\n        server.listen(fixtures.port, function () {\n          agent = spdy.createAgent({\n            rejectUnauthorized: false,\n            port: fixtures.port,\n            spdy: {\n              plain: plain,\n              protocol: plain ? alpn : null,\n              protocols: [alpn]\n            }\n          });\n          done();\n        });\n      });\n      afterEach(function (done) {\n        var waiting = 2;\n        agent.close(next);\n        server.close(next);\n\n        function next() {\n          if (--waiting === 0) {\n            done();\n          }\n        }\n      });\n      it('should send GET request', function (done) {\n        var req = hmodule.request({\n          agent: agent,\n          method: 'GET',\n          path: '/get',\n          headers: {\n            a: 'b'\n          }\n        }, function (res) {\n          assert.strictEqual(res.statusCode, 200);\n          assert.strictEqual(res.headers.a, 'b');\n          fixtures.expectData(res, 'okay', done);\n        });\n        req.end();\n      });\n      it('should send POST request', function (done) {\n        var req = hmodule.request({\n          agent: agent,\n          method: 'POST',\n          path: '/post',\n          headers: {\n            post: 'headers'\n          }\n        }, function (res) {\n          assert.strictEqual(res.statusCode, 200);\n          assert.strictEqual(res.headers.post, 'headers');\n          fixtures.expectData(res, 'post body', done);\n        });\n\n        agent._spdyState.socket.once(plain ? 'connect' : 'secureConnect', function () {\n          req.end('post body');\n        });\n      });\n      it('should receive PUSH_PROMISE', function (done) {\n        var req = hmodule.request({\n          agent: agent,\n          method: 'GET',\n          path: '/get'\n        }, function (res) {\n          assert.strictEqual(res.statusCode, 200);\n          res.resume();\n        });\n        req.on('push', function (push) {\n          assert.strictEqual(push.path, '/push');\n          assert.strictEqual(push.headers.push, 'yes');\n          push.resume();\n          push.once('end', done);\n        });\n        req.end();\n      });\n      it('should receive trailing headers', function (done) {\n        var req = hmodule.request({\n          agent: agent,\n          method: 'GET',\n          path: '/get'\n        }, function (res) {\n          assert.strictEqual(res.statusCode, 200);\n          res.on('trailers', function (headers) {\n            assert.strictEqual(headers.trai, 'ler');\n            fixtures.expectData(res, 'okay', done);\n          });\n        });\n        req.end();\n      });\n    });\n  });\n  describe('x-forwarded-for', function () {\n    fixtures.everyConfig(function (protocol, alpn, version, plain) {\n      var server;\n      var agent;\n      var hmodule; // The underlying spdy Connection created by the agent.\n\n      var connection;\n      beforeEach(function (done) {\n        hmodule = plain ? http : https;\n        var options = Object.assign({\n          spdy: {\n            plain: plain,\n            'x-forwarded-for': true\n          }\n        }, fixtures.keys);\n        server = spdy.createServer(options, function (req, res) {\n          res.writeHead(200, req.headers);\n          res.end();\n        });\n        server.listen(fixtures.port, function () {\n          agent = spdy.createAgent({\n            rejectUnauthorized: false,\n            port: fixtures.port,\n            spdy: {\n              'x-forwarded-for': '1.2.3.4',\n              plain: plain,\n              protocol: plain ? alpn : null,\n              protocols: [alpn]\n            }\n          }); // Once aagent has connection, keep a copy for testing.\n\n          agent.once('_connect', function () {\n            connection = agent._spdyState.connection;\n            done();\n          });\n        });\n      });\n      afterEach(function (done) {\n        var waiting = 2;\n        agent.close(next);\n        server.close(next);\n\n        function next() {\n          if (--waiting === 0) {\n            done();\n          }\n        }\n      });\n      it('should send x-forwarded-for', function (done) {\n        var req = hmodule.request({\n          agent: agent,\n          method: 'GET',\n          path: '/get'\n        }, function (res) {\n          assert.strictEqual(res.statusCode, 200);\n          assert.strictEqual(res.headers['x-forwarded-for'], '1.2.3.4');\n          res.resume();\n          res.once('end', done);\n        });\n        req.end();\n      });\n      it('agent should emit connection level errors', function (done) {\n        agent.once('error', function (err) {\n          assert.strictEqual(err.message, 'mock error');\n          done();\n        });\n        connection.emit('error', new Error('mock error'));\n      });\n    });\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/spdy/test/client-test.js"],"names":["assert","require","https","http","util","fixtures","spdy","Object","assign","process","versions","modules","_extend","describe","everyConfig","protocol","alpn","version","plain","server","agent","hmodule","beforeEach","done","options","keys","createServer","req","res","body","on","chunk","writeHead","headers","addTrailers","trai","push","request","err","end","listen","port","createAgent","rejectUnauthorized","protocols","afterEach","waiting","close","next","it","method","path","a","strictEqual","statusCode","expectData","post","_spdyState","socket","once","resume","connection","message","emit","Error"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\n\nvar assert = require('assert')\nvar https = require('https')\nvar http = require('http')\nvar util = require('util')\n\nvar fixtures = require('./fixtures')\nvar spdy = require('../')\n\n// Node.js 0.10 and 0.12 support\nObject.assign = process.versions.modules >= 46\n  ? Object.assign // eslint-disable-next-line\n  : util._extend\n\ndescribe('SPDY Client', function () {\n  describe('regular', function () {\n    fixtures.everyConfig(function (protocol, alpn, version, plain) {\n      var server\n      var agent\n      var hmodule\n\n      beforeEach(function (done) {\n        hmodule = plain ? http : https\n\n        var options = Object.assign({\n          spdy: {\n            plain: plain\n          }\n        }, fixtures.keys)\n        server = spdy.createServer(options, function (req, res) {\n          var body = ''\n          req.on('data', function (chunk) {\n            body += chunk\n          })\n          req.on('end', function () {\n            res.writeHead(200, req.headers)\n            res.addTrailers({ trai: 'ler' })\n\n            var push = res.push('/push', {\n              request: {\n                push: 'yes'\n              }\n            }, function (err) {\n              assert(!err)\n\n              push.end('push')\n              push.on('error', function () {\n              })\n\n              res.end(body || 'okay')\n            })\n          })\n        })\n\n        server.listen(fixtures.port, function () {\n          agent = spdy.createAgent({\n            rejectUnauthorized: false,\n            port: fixtures.port,\n            spdy: {\n              plain: plain,\n              protocol: plain ? alpn : null,\n              protocols: [alpn]\n            }\n          })\n\n          done()\n        })\n      })\n\n      afterEach(function (done) {\n        var waiting = 2\n        agent.close(next)\n        server.close(next)\n\n        function next () {\n          if (--waiting === 0) {\n            done()\n          }\n        }\n      })\n\n      it('should send GET request', function (done) {\n        var req = hmodule.request({\n          agent: agent,\n\n          method: 'GET',\n          path: '/get',\n          headers: {\n            a: 'b'\n          }\n        }, function (res) {\n          assert.strictEqual(res.statusCode, 200)\n          assert.strictEqual(res.headers.a, 'b')\n\n          fixtures.expectData(res, 'okay', done)\n        })\n        req.end()\n      })\n\n      it('should send POST request', function (done) {\n        var req = hmodule.request({\n          agent: agent,\n\n          method: 'POST',\n          path: '/post',\n\n          headers: {\n            post: 'headers'\n          }\n        }, function (res) {\n          assert.strictEqual(res.statusCode, 200)\n          assert.strictEqual(res.headers.post, 'headers')\n\n          fixtures.expectData(res, 'post body', done)\n        })\n\n        agent._spdyState.socket.once(plain ? 'connect' : 'secureConnect',\n          function () {\n            req.end('post body')\n          })\n      })\n\n      it('should receive PUSH_PROMISE', function (done) {\n        var req = hmodule.request({\n          agent: agent,\n\n          method: 'GET',\n          path: '/get'\n        }, function (res) {\n          assert.strictEqual(res.statusCode, 200)\n\n          res.resume()\n        })\n        req.on('push', function (push) {\n          assert.strictEqual(push.path, '/push')\n          assert.strictEqual(push.headers.push, 'yes')\n\n          push.resume()\n          push.once('end', done)\n        })\n        req.end()\n      })\n\n      it('should receive trailing headers', function (done) {\n        var req = hmodule.request({\n          agent: agent,\n\n          method: 'GET',\n          path: '/get'\n        }, function (res) {\n          assert.strictEqual(res.statusCode, 200)\n\n          res.on('trailers', function (headers) {\n            assert.strictEqual(headers.trai, 'ler')\n            fixtures.expectData(res, 'okay', done)\n          })\n        })\n        req.end()\n      })\n    })\n  })\n\n  describe('x-forwarded-for', function () {\n    fixtures.everyConfig(function (protocol, alpn, version, plain) {\n      var server\n      var agent\n      var hmodule\n      // The underlying spdy Connection created by the agent.\n      var connection\n\n      beforeEach(function (done) {\n        hmodule = plain ? http : https\n\n        var options = Object.assign({\n          spdy: {\n            plain: plain,\n            'x-forwarded-for': true\n          }\n        }, fixtures.keys)\n        server = spdy.createServer(options, function (req, res) {\n          res.writeHead(200, req.headers)\n          res.end()\n        })\n\n        server.listen(fixtures.port, function () {\n          agent = spdy.createAgent({\n            rejectUnauthorized: false,\n            port: fixtures.port,\n            spdy: {\n              'x-forwarded-for': '1.2.3.4',\n              plain: plain,\n              protocol: plain ? alpn : null,\n              protocols: [alpn]\n            }\n          })\n          // Once aagent has connection, keep a copy for testing.\n          agent.once('_connect', function () {\n            connection = agent._spdyState.connection\n            done()\n          })\n        })\n      })\n\n      afterEach(function (done) {\n        var waiting = 2\n        agent.close(next)\n        server.close(next)\n\n        function next () {\n          if (--waiting === 0) {\n            done()\n          }\n        }\n      })\n\n      it('should send x-forwarded-for', function (done) {\n        var req = hmodule.request({\n          agent: agent,\n\n          method: 'GET',\n          path: '/get'\n        }, function (res) {\n          assert.strictEqual(res.statusCode, 200)\n          assert.strictEqual(res.headers['x-forwarded-for'], '1.2.3.4')\n\n          res.resume()\n          res.once('end', done)\n        })\n        req.end()\n      })\n\n      it('agent should emit connection level errors', function (done) {\n        agent.once('error', function (err) {\n          assert.strictEqual(err.message, 'mock error')\n          done()\n        })\n        connection.emit('error', new Error('mock error'))\n      })\n    })\n  })\n})\n"]},"metadata":{},"sourceType":"script"}