{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of an empty block statement\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow empty block statements\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-empty\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowEmptyCatch: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpected: \"Empty {{type}} statement.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0] || {},\n          allowEmptyCatch = options.allowEmptyCatch || false;\n    const sourceCode = context.getSourceCode();\n    return {\n      BlockStatement(node) {\n        // if the body is not empty, we can just return immediately\n        if (node.body.length !== 0) {\n          return;\n        } // a function is generally allowed to be empty\n\n\n        if (astUtils.isFunction(node.parent)) {\n          return;\n        }\n\n        if (allowEmptyCatch && node.parent.type === \"CatchClause\") {\n          return;\n        } // any other block is only allowed to be empty, if it contains a comment\n\n\n        if (sourceCode.getCommentsInside(node).length > 0) {\n          return;\n        }\n\n        context.report({\n          node,\n          messageId: \"unexpected\",\n          data: {\n            type: \"block\"\n          }\n        });\n      },\n\n      SwitchStatement(node) {\n        if (typeof node.cases === \"undefined\" || node.cases.length === 0) {\n          context.report({\n            node,\n            messageId: \"unexpected\",\n            data: {\n              type: \"switch\"\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-empty.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","allowEmptyCatch","default","additionalProperties","messages","unexpected","create","context","options","sourceCode","getSourceCode","BlockStatement","node","body","length","isFunction","parent","getCommentsInside","report","messageId","data","SwitchStatement","cases"],"mappings":"AAAA;;;;AAIA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,iCADX;AAEFC,MAAAA,QAAQ,EAAE,iBAFR;AAGFC,MAAAA,WAAW,EAAE,IAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,CACJ;AACIN,MAAAA,IAAI,EAAE,QADV;AAEIO,MAAAA,UAAU,EAAE;AACRC,QAAAA,eAAe,EAAE;AACbR,UAAAA,IAAI,EAAE,SADO;AAEbS,UAAAA,OAAO,EAAE;AAFI;AADT,OAFhB;AAQIC,MAAAA,oBAAoB,EAAE;AAR1B,KADI,CAVN;AAuBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN;AAvBR,GADO;;AA6BbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,OAAO,GAAGD,OAAO,CAACC,OAAR,CAAgB,CAAhB,KAAsB,EAAtC;AAAA,UACIP,eAAe,GAAGO,OAAO,CAACP,eAAR,IAA2B,KADjD;AAGA,UAAMQ,UAAU,GAAGF,OAAO,CAACG,aAAR,EAAnB;AAEA,WAAO;AACHC,MAAAA,cAAc,CAACC,IAAD,EAAO;AAEjB;AACA,YAAIA,IAAI,CAACC,IAAL,CAAUC,MAAV,KAAqB,CAAzB,EAA4B;AACxB;AACH,SALgB,CAOjB;;;AACA,YAAI1B,QAAQ,CAAC2B,UAAT,CAAoBH,IAAI,CAACI,MAAzB,CAAJ,EAAsC;AAClC;AACH;;AAED,YAAIf,eAAe,IAAIW,IAAI,CAACI,MAAL,CAAYvB,IAAZ,KAAqB,aAA5C,EAA2D;AACvD;AACH,SAdgB,CAgBjB;;;AACA,YAAIgB,UAAU,CAACQ,iBAAX,CAA6BL,IAA7B,EAAmCE,MAAnC,GAA4C,CAAhD,EAAmD;AAC/C;AACH;;AAEDP,QAAAA,OAAO,CAACW,MAAR,CAAe;AAAEN,UAAAA,IAAF;AAAQO,UAAAA,SAAS,EAAE,YAAnB;AAAiCC,UAAAA,IAAI,EAAE;AAAE3B,YAAAA,IAAI,EAAE;AAAR;AAAvC,SAAf;AACH,OAvBE;;AAyBH4B,MAAAA,eAAe,CAACT,IAAD,EAAO;AAElB,YAAI,OAAOA,IAAI,CAACU,KAAZ,KAAsB,WAAtB,IAAqCV,IAAI,CAACU,KAAL,CAAWR,MAAX,KAAsB,CAA/D,EAAkE;AAC9DP,UAAAA,OAAO,CAACW,MAAR,CAAe;AAAEN,YAAAA,IAAF;AAAQO,YAAAA,SAAS,EAAE,YAAnB;AAAiCC,YAAAA,IAAI,EAAE;AAAE3B,cAAAA,IAAI,EAAE;AAAR;AAAvC,WAAf;AACH;AACJ;;AA9BE,KAAP;AAiCH;;AApEY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to flag use of an empty block statement\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow empty block statements\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-empty\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allowEmptyCatch: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpected: \"Empty {{type}} statement.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {},\n            allowEmptyCatch = options.allowEmptyCatch || false;\n\n        const sourceCode = context.getSourceCode();\n\n        return {\n            BlockStatement(node) {\n\n                // if the body is not empty, we can just return immediately\n                if (node.body.length !== 0) {\n                    return;\n                }\n\n                // a function is generally allowed to be empty\n                if (astUtils.isFunction(node.parent)) {\n                    return;\n                }\n\n                if (allowEmptyCatch && node.parent.type === \"CatchClause\") {\n                    return;\n                }\n\n                // any other block is only allowed to be empty, if it contains a comment\n                if (sourceCode.getCommentsInside(node).length > 0) {\n                    return;\n                }\n\n                context.report({ node, messageId: \"unexpected\", data: { type: \"block\" } });\n            },\n\n            SwitchStatement(node) {\n\n                if (typeof node.cases === \"undefined\" || node.cases.length === 0) {\n                    context.report({ node, messageId: \"unexpected\", data: { type: \"switch\" } });\n                }\n            }\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}