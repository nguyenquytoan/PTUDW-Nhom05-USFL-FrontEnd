{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"chai\").assert,\n    coerceToArrayLength = require(\"../../array-length/coerce\");\n\ndescribe(\"array-length/coerce\", function () {\n  it(\"Should coerce float\", function () {\n    assert.equal(coerceToArrayLength(123.123), 123);\n    assert.equal(coerceToArrayLength(123.823), 123);\n  });\n  it(\"Should coerce string\", function () {\n    assert.equal(coerceToArrayLength(\"12.123\"), 12);\n  });\n  it(\"Should coerce booleans\", function () {\n    assert.equal(coerceToArrayLength(true), 1);\n  });\n  it(\"Should coerce number objects\", function () {\n    assert.equal(coerceToArrayLength(new Number(343)), 343);\n  });\n  it(\"Should coerce objects\", function () {\n    assert.equal(coerceToArrayLength({\n      valueOf: function () {\n        return 23;\n      }\n    }), 23);\n  });\n  it(\"Should reject infinite number\", function () {\n    assert.equal(coerceToArrayLength(Infinity), null);\n  });\n  it(\"Should reject number beyond Number.MAX_SAFE_INTEGER\", function () {\n    assert.equal(coerceToArrayLength(9007199254740992), null);\n  });\n  it(\"Should reject negative number\", function () {\n    assert.equal(coerceToArrayLength(-9), null);\n  });\n  it(\"Should reject NaN\", function () {\n    assert.equal(coerceToArrayLength(NaN), null);\n  });\n\n  if (typeof Object.create === \"function\") {\n    it(\"Should not coerce objects with no number representation\", function () {\n      assert.equal(coerceToArrayLength(Object.create(null)), null);\n    });\n  }\n\n  it(\"Should not coerce null\", function () {\n    assert.equal(coerceToArrayLength(null), null);\n  });\n  it(\"Should not coerce undefined\", function () {\n    assert.equal(coerceToArrayLength(undefined), null);\n  });\n\n  if (typeof Symbol === \"function\") {\n    it(\"Should not coerce symbols\", function () {\n      assert.equal(coerceToArrayLength(Symbol(\"foo\")), null);\n    });\n  }\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type/test/array-length/coerce.js"],"names":["assert","require","coerceToArrayLength","describe","it","equal","Number","valueOf","Infinity","NaN","Object","create","undefined","Symbol"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar assert              = require(\"chai\").assert\n  , coerceToArrayLength = require(\"../../array-length/coerce\");\n\ndescribe(\"array-length/coerce\", function () {\n\tit(\"Should coerce float\", function () {\n\t\tassert.equal(coerceToArrayLength(123.123), 123);\n\t\tassert.equal(coerceToArrayLength(123.823), 123);\n\t});\n\tit(\"Should coerce string\", function () { assert.equal(coerceToArrayLength(\"12.123\"), 12); });\n\tit(\"Should coerce booleans\", function () { assert.equal(coerceToArrayLength(true), 1); });\n\tit(\"Should coerce number objects\", function () {\n\t\tassert.equal(coerceToArrayLength(new Number(343)), 343);\n\t});\n\tit(\"Should coerce objects\", function () {\n\t\tassert.equal(coerceToArrayLength({ valueOf: function () { return 23; } }), 23);\n\t});\n\tit(\"Should reject infinite number\", function () {\n\t\tassert.equal(coerceToArrayLength(Infinity), null);\n\t});\n\tit(\"Should reject number beyond Number.MAX_SAFE_INTEGER\", function () {\n\t\tassert.equal(coerceToArrayLength(9007199254740992), null);\n\t});\n\tit(\"Should reject negative number\", function () {\n\t\tassert.equal(coerceToArrayLength(-9), null);\n\t});\n\n\tit(\"Should reject NaN\", function () { assert.equal(coerceToArrayLength(NaN), null); });\n\n\tif (typeof Object.create === \"function\") {\n\t\tit(\"Should not coerce objects with no number representation\", function () {\n\t\t\tassert.equal(coerceToArrayLength(Object.create(null)), null);\n\t\t});\n\t}\n\n\tit(\"Should not coerce null\", function () { assert.equal(coerceToArrayLength(null), null); });\n\tit(\"Should not coerce undefined\", function () {\n\t\tassert.equal(coerceToArrayLength(undefined), null);\n\t});\n\n\tif (typeof Symbol === \"function\") {\n\t\tit(\"Should not coerce symbols\", function () {\n\t\t\tassert.equal(coerceToArrayLength(Symbol(\"foo\")), null);\n\t\t});\n\t}\n});\n"]},"metadata":{},"sourceType":"script"}