{"ast":null,"code":"/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nvar os = require('os'),\n    path = require('path'),\n    postcss = require('postcss');\n\nvar fileProtocol = require('../file-protocol');\n\nvar ORPHAN_CR_REGEX = /\\r(?!\\n)(.|\\n)?/g;\n/**\n * Process the given CSS content into reworked CSS content.\n *\n * @param {string} sourceFile The absolute path of the file being processed\n * @param {string} sourceContent CSS content without source-map\n * @param {{outputSourceMap: boolean, transformDeclaration:function, absSourceMap:object,\n *        sourceMapConsumer:object, removeCR:boolean}} params Named parameters\n * @return {{content: string, map: object}} Reworked CSS and optional source-map\n */\n\nfunction process(sourceFile, sourceContent, params) {\n  // #107 libsass emits orphan CR not considered newline, postcss does consider newline (content vs source-map mismatch)\n  var correctedContent = params.removeCR && os.EOL !== '\\r' ? sourceContent.replace(ORPHAN_CR_REGEX, ' $1') : sourceContent; // prepend file protocol to all sources to avoid problems with source map\n\n  return postcss([postcss.plugin('postcss-resolve-url', postcssPlugin)]).process(correctedContent, {\n    from: fileProtocol.prepend(sourceFile),\n    map: params.outputSourceMap && {\n      prev: !!params.absSourceMap && fileProtocol.prepend(params.absSourceMap),\n      inline: false,\n      annotation: false,\n      sourcesContent: true // #98 sourcesContent missing from output map\n\n    }\n  }).then(result => ({\n    content: result.css,\n    map: params.outputSourceMap ? fileProtocol.remove(result.map.toJSON()) : null\n  }));\n  /**\n   * Plugin for postcss that follows SASS transpilation.\n   */\n\n  function postcssPlugin() {\n    return function (styles) {\n      styles.walkDecls(eachDeclaration);\n    };\n    /**\n     * Process a declaration from the syntax tree.\n     * @param declaration\n     */\n\n    function eachDeclaration(declaration) {\n      var isValid = declaration.value && declaration.value.indexOf('url') >= 0;\n\n      if (isValid) {\n        // reverse the original source-map to find the original source file before transpilation\n        var startPosApparent = declaration.source.start,\n            startPosOriginal = params.sourceMapConsumer && params.sourceMapConsumer.originalPositionFor(startPosApparent); // we require a valid directory for the specified file\n\n        var directory = startPosOriginal && startPosOriginal.source && fileProtocol.remove(path.dirname(startPosOriginal.source));\n\n        if (directory) {\n          declaration.value = params.transformDeclaration(declaration.value, directory);\n        } // source-map present but invalid entry\n        else if (params.sourceMapConsumer) {\n            throw new Error('source-map information is not available at url() declaration ' + (ORPHAN_CR_REGEX.test(sourceContent) ? '(found orphan CR, try removeCR option)' : '(no orphan CR found)'));\n          }\n      }\n    }\n  }\n}\n\nmodule.exports = process;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/resolve-url-loader/lib/engine/postcss.js"],"names":["os","require","path","postcss","fileProtocol","ORPHAN_CR_REGEX","process","sourceFile","sourceContent","params","correctedContent","removeCR","EOL","replace","plugin","postcssPlugin","from","prepend","map","outputSourceMap","prev","absSourceMap","inline","annotation","sourcesContent","then","result","content","css","remove","toJSON","styles","walkDecls","eachDeclaration","declaration","isValid","value","indexOf","startPosApparent","source","start","startPosOriginal","sourceMapConsumer","originalPositionFor","directory","dirname","transformDeclaration","Error","test","module","exports"],"mappings":"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","sourcesContent":["/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nvar os      = require('os'),\n    path    = require('path'),\n    postcss = require('postcss');\n\nvar fileProtocol = require('../file-protocol');\n\nvar ORPHAN_CR_REGEX = /\\r(?!\\n)(.|\\n)?/g;\n\n/**\n * Process the given CSS content into reworked CSS content.\n *\n * @param {string} sourceFile The absolute path of the file being processed\n * @param {string} sourceContent CSS content without source-map\n * @param {{outputSourceMap: boolean, transformDeclaration:function, absSourceMap:object,\n *        sourceMapConsumer:object, removeCR:boolean}} params Named parameters\n * @return {{content: string, map: object}} Reworked CSS and optional source-map\n */\nfunction process(sourceFile, sourceContent, params) {\n  // #107 libsass emits orphan CR not considered newline, postcss does consider newline (content vs source-map mismatch)\n  var correctedContent = params.removeCR && (os.EOL !== '\\r') ?\n    sourceContent.replace(ORPHAN_CR_REGEX, ' $1') :\n    sourceContent;\n\n  // prepend file protocol to all sources to avoid problems with source map\n  return postcss([\n    postcss.plugin('postcss-resolve-url', postcssPlugin)\n  ])\n    .process(correctedContent, {\n      from: fileProtocol.prepend(sourceFile),\n      map : params.outputSourceMap && {\n        prev          : !!params.absSourceMap && fileProtocol.prepend(params.absSourceMap),\n        inline        : false,\n        annotation    : false,\n        sourcesContent: true  // #98 sourcesContent missing from output map\n      }\n    })\n    .then(result => ({\n      content: result.css,\n      map    : params.outputSourceMap ? fileProtocol.remove(result.map.toJSON()) : null\n    }));\n\n  /**\n   * Plugin for postcss that follows SASS transpilation.\n   */\n  function postcssPlugin() {\n    return function(styles) {\n      styles.walkDecls(eachDeclaration);\n    };\n\n    /**\n     * Process a declaration from the syntax tree.\n     * @param declaration\n     */\n    function eachDeclaration(declaration) {\n      var isValid = declaration.value && (declaration.value.indexOf('url') >= 0);\n      if (isValid) {\n\n        // reverse the original source-map to find the original source file before transpilation\n        var startPosApparent = declaration.source.start,\n            startPosOriginal = params.sourceMapConsumer &&\n              params.sourceMapConsumer.originalPositionFor(startPosApparent);\n\n        // we require a valid directory for the specified file\n        var directory =\n          startPosOriginal &&\n          startPosOriginal.source &&\n          fileProtocol.remove(path.dirname(startPosOriginal.source));\n        if (directory) {\n          declaration.value = params.transformDeclaration(declaration.value, directory);\n        }\n        // source-map present but invalid entry\n        else if (params.sourceMapConsumer) {\n          throw new Error(\n            'source-map information is not available at url() declaration ' +\n            (ORPHAN_CR_REGEX.test(sourceContent) ? '(found orphan CR, try removeCR option)' : '(no orphan CR found)')\n          );\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = process;\n"]},"metadata":{},"sourceType":"script"}