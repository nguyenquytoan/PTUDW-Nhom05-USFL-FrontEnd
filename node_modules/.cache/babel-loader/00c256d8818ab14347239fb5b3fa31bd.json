{"ast":null,"code":"/**\n * @fileoverview Enforce a maximum number of classes per file\n * @author James Garbutt <https://github.com/43081j>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce a maximum number of classes per file\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-classes-per-file\"\n    },\n    schema: [{\n      type: \"integer\",\n      minimum: 1\n    }],\n    messages: {\n      maximumExceeded: \"File has too many classes ({{ classCount }}). Maximum allowed is {{ max }}.\"\n    }\n  },\n\n  create(context) {\n    const maxClasses = context.options[0] || 1;\n    let classCount = 0;\n    return {\n      Program() {\n        classCount = 0;\n      },\n\n      \"Program:exit\"(node) {\n        if (classCount > maxClasses) {\n          context.report({\n            node,\n            messageId: \"maximumExceeded\",\n            data: {\n              classCount,\n              max: maxClasses\n            }\n          });\n        }\n      },\n\n      \"ClassDeclaration, ClassExpression\"() {\n        classCount++;\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/max-classes-per-file.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","minimum","messages","maximumExceeded","create","context","maxClasses","options","classCount","Program","node","report","messageId","data","max"],"mappings":"AAAA;;;;AAIA,a,CAEA;AACA;AACA;AAGA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,8CADX;AAEFC,MAAAA,QAAQ,EAAE,gBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,CACJ;AACIN,MAAAA,IAAI,EAAE,SADV;AAEIO,MAAAA,OAAO,EAAE;AAFb,KADI,CAVN;AAiBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,eAAe,EAAE;AADX;AAjBR,GADO;;AAsBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,CAAzC;AAEA,QAAIC,UAAU,GAAG,CAAjB;AAEA,WAAO;AACHC,MAAAA,OAAO,GAAG;AACND,QAAAA,UAAU,GAAG,CAAb;AACH,OAHE;;AAIH,qBAAeE,IAAf,EAAqB;AACjB,YAAIF,UAAU,GAAGF,UAAjB,EAA6B;AACzBD,UAAAA,OAAO,CAACM,MAAR,CAAe;AACXD,YAAAA,IADW;AAEXE,YAAAA,SAAS,EAAE,iBAFA;AAGXC,YAAAA,IAAI,EAAE;AACFL,cAAAA,UADE;AAEFM,cAAAA,GAAG,EAAER;AAFH;AAHK,WAAf;AAQH;AACJ,OAfE;;AAgBH,4CAAsC;AAClCE,QAAAA,UAAU;AACb;;AAlBE,KAAP;AAoBH;;AAhDY,CAAjB","sourcesContent":["/**\n * @fileoverview Enforce a maximum number of classes per file\n * @author James Garbutt <https://github.com/43081j>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce a maximum number of classes per file\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/max-classes-per-file\"\n        },\n\n        schema: [\n            {\n                type: \"integer\",\n                minimum: 1\n            }\n        ],\n\n        messages: {\n            maximumExceeded: \"File has too many classes ({{ classCount }}). Maximum allowed is {{ max }}.\"\n        }\n    },\n    create(context) {\n\n        const maxClasses = context.options[0] || 1;\n\n        let classCount = 0;\n\n        return {\n            Program() {\n                classCount = 0;\n            },\n            \"Program:exit\"(node) {\n                if (classCount > maxClasses) {\n                    context.report({\n                        node,\n                        messageId: \"maximumExceeded\",\n                        data: {\n                            classCount,\n                            max: maxClasses\n                        }\n                    });\n                }\n            },\n            \"ClassDeclaration, ClassExpression\"() {\n                classCount++;\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}