{"ast":null,"code":"/* eslint-disable class-methods-use-this */\n'use strict';\n\nconst Q = require('q');\n/**\n * COA Object\n *\n * Base class for all COA-related objects\n *\n * --------|-----|-----|-----\n *         | Cmd | Opt | Arg\n * --------|-----|-----|-----\n *  name   | ✓   | ✓   | ✓\n *  title  | ✓   | ✓   | ✓\n *  comp   | ✓   | ✓   | ✓\n *  reject | ✓   | ✓   | ✓\n *  end    | ✓   | ✓   | ✓\n *  apply  | ✓   | ✓   | ✓\n *\n * @class CoaObject\n */\n\n\nmodule.exports = class CoaObject {\n  constructor(cmd) {\n    this._cmd = cmd;\n    this._name = null;\n    this._title = null;\n    this._comp = null;\n  }\n  /**\n   * Set a canonical identifier to be used anywhere in the API.\n   *\n   * @param {String} name - command, option or argument name\n   * @returns {COA.CoaObject} - this instance (for chainability)\n   */\n\n\n  name(name) {\n    this._name = name;\n    return this;\n  }\n  /**\n   * Set a long description to be used anywhere in text messages.\n   * @param {String} title - human readable entity title\n   * @returns {COA.CoaObject} - this instance (for chainability)\n   */\n\n\n  title(title) {\n    this._title = title;\n    return this;\n  }\n  /**\n   * Set custom additional completion for current object.\n   *\n   * @param {Function} comp - completion generation function,\n   *         invoked in the context of object instance.\n   *         Accepts parameters:\n   *                 - {Object} opts - completion options\n   *         It can return promise or any other value threated as a result.\n   * @returns {COA.CoaObject} - this instance (for chainability)\n   */\n\n\n  comp(comp) {\n    this._comp = comp;\n    return this;\n  }\n  /**\n   * Apply function with arguments in a context of object instance.\n   *\n   * @param {Function} fn - body\n   * @param {Array.<*>} args... - arguments\n   * @returns {COA.CoaObject} - this instance (for chainability)\n   */\n\n\n  apply(fn) {\n    arguments.length > 1 ? fn.apply(this, [].slice.call(arguments, 1)) : fn.call(this);\n    return this;\n  }\n  /**\n   * Return reject of actions results promise with error code.\n   * Use in .act() for return with error.\n   * @param {Object} reason - reject reason\n   *         You can customize toString() method and exitCode property\n   *         of reason object.\n   * @returns {Q.promise} rejected promise\n   */\n\n\n  reject(reason) {\n    return Q.reject(reason);\n  }\n  /**\n   * Finish chain for current subcommand and return parent command instance.\n   * @returns {COA.Cmd} parent command\n   */\n\n\n  end() {\n    return this._cmd;\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/coa/lib/coaobject.js"],"names":["Q","require","module","exports","CoaObject","constructor","cmd","_cmd","_name","_title","_comp","name","title","comp","apply","fn","arguments","length","slice","call","reject","reason","end"],"mappings":"AAAA;AACA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAjB;AAEA;;;;;;;;;;;;;;;;;;;AAiBAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,SAAN,CAAgB;AAC7BC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKC,IAAL,GAAYD,GAAZ;AACA,SAAKE,KAAL,GAAa,IAAb;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,KAAL,GAAa,IAAb;AACH;AAED;;;;;;;;AAMAC,EAAAA,IAAI,CAACA,IAAD,EAAO;AACP,SAAKH,KAAL,GAAaG,IAAb;AACA,WAAO,IAAP;AACH;AAED;;;;;;;AAKAC,EAAAA,KAAK,CAACA,KAAD,EAAQ;AACT,SAAKH,MAAL,GAAcG,KAAd;AACA,WAAO,IAAP;AACH;AAED;;;;;;;;;;;;AAUAC,EAAAA,IAAI,CAACA,IAAD,EAAO;AACP,SAAKH,KAAL,GAAaG,IAAb;AACA,WAAO,IAAP;AACH;AAED;;;;;;;;;AAOAC,EAAAA,KAAK,CAACC,EAAD,EAAK;AACNC,IAAAA,SAAS,CAACC,MAAV,GAAmB,CAAnB,GACIF,EAAE,CAACD,KAAH,CAAS,IAAT,EAAe,GAAGI,KAAH,CAASC,IAAT,CAAcH,SAAd,EAAyB,CAAzB,CAAf,CADJ,GAEMD,EAAE,CAACI,IAAH,CAAQ,IAAR,CAFN;AAIA,WAAO,IAAP;AACH;AAED;;;;;;;;;;AAQAC,EAAAA,MAAM,CAACC,MAAD,EAAS;AACX,WAAOrB,CAAC,CAACoB,MAAF,CAASC,MAAT,CAAP;AACH;AAED;;;;;;AAIAC,EAAAA,GAAG,GAAG;AACF,WAAO,KAAKf,IAAZ;AACH;;AA7E4B,CAAjC","sourcesContent":["/* eslint-disable class-methods-use-this */\n'use strict';\n\nconst Q = require('q');\n\n/**\n * COA Object\n *\n * Base class for all COA-related objects\n *\n * --------|-----|-----|-----\n *         | Cmd | Opt | Arg\n * --------|-----|-----|-----\n *  name   | ✓   | ✓   | ✓\n *  title  | ✓   | ✓   | ✓\n *  comp   | ✓   | ✓   | ✓\n *  reject | ✓   | ✓   | ✓\n *  end    | ✓   | ✓   | ✓\n *  apply  | ✓   | ✓   | ✓\n *\n * @class CoaObject\n */\nmodule.exports = class CoaObject {\n    constructor(cmd) {\n        this._cmd = cmd;\n        this._name = null;\n        this._title = null;\n        this._comp = null;\n    }\n\n    /**\n     * Set a canonical identifier to be used anywhere in the API.\n     *\n     * @param {String} name - command, option or argument name\n     * @returns {COA.CoaObject} - this instance (for chainability)\n     */\n    name(name) {\n        this._name = name;\n        return this;\n    }\n\n    /**\n     * Set a long description to be used anywhere in text messages.\n     * @param {String} title - human readable entity title\n     * @returns {COA.CoaObject} - this instance (for chainability)\n     */\n    title(title) {\n        this._title = title;\n        return this;\n    }\n\n    /**\n     * Set custom additional completion for current object.\n     *\n     * @param {Function} comp - completion generation function,\n     *         invoked in the context of object instance.\n     *         Accepts parameters:\n     *                 - {Object} opts - completion options\n     *         It can return promise or any other value threated as a result.\n     * @returns {COA.CoaObject} - this instance (for chainability)\n     */\n    comp(comp) {\n        this._comp = comp;\n        return this;\n    }\n\n    /**\n     * Apply function with arguments in a context of object instance.\n     *\n     * @param {Function} fn - body\n     * @param {Array.<*>} args... - arguments\n     * @returns {COA.CoaObject} - this instance (for chainability)\n     */\n    apply(fn) {\n        arguments.length > 1?\n            fn.apply(this, [].slice.call(arguments, 1))\n            : fn.call(this);\n\n        return this;\n    }\n\n    /**\n     * Return reject of actions results promise with error code.\n     * Use in .act() for return with error.\n     * @param {Object} reason - reject reason\n     *         You can customize toString() method and exitCode property\n     *         of reason object.\n     * @returns {Q.promise} rejected promise\n     */\n    reject(reason) {\n        return Q.reject(reason);\n    }\n\n    /**\n     * Finish chain for current subcommand and return parent command instance.\n     * @returns {COA.Cmd} parent command\n     */\n    end() {\n        return this._cmd;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}