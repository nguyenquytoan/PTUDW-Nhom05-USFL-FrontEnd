{"ast":null,"code":"import { merge, subexp } from \"./util\";\nexport function buildExps(isIRI) {\n  const ALPHA$$ = \"[A-Za-z]\",\n        CR$ = \"[\\\\x0D]\",\n        DIGIT$$ = \"[0-9]\",\n        DQUOTE$$ = \"[\\\\x22]\",\n        HEXDIG$$ = merge(DIGIT$$, \"[A-Fa-f]\"),\n        //case-insensitive\n  LF$$ = \"[\\\\x0A]\",\n        SP$$ = \"[\\\\x20]\",\n        PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)),\n        //expanded\n  GEN_DELIMS$$ = \"[\\\\:\\\\/\\\\?\\\\#\\\\[\\\\]\\\\@]\",\n        SUB_DELIMS$$ = \"[\\\\!\\\\$\\\\&\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\=]\",\n        RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),\n        UCSCHAR$$ = isIRI ? \"[\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]\" : \"[]\",\n        //subset, excludes bidi control characters\n  IPRIVATE$$ = isIRI ? \"[\\\\uE000-\\\\uF8FF]\" : \"[]\",\n        //subset\n  UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, \"[\\\\-\\\\.\\\\_\\\\~]\", UCSCHAR$$),\n        SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\") + \"*\"),\n        USERINFO$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\")) + \"*\"),\n        DEC_OCTET$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"[1-9]\" + DIGIT$$) + \"|\" + DIGIT$$),\n        DEC_OCTET_RELAXED$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"0?[1-9]\" + DIGIT$$) + \"|0?0?\" + DIGIT$$),\n        //relaxed parsing rules\n  IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$),\n        H16$ = subexp(HEXDIG$$ + \"{1,4}\"),\n        LS32$ = subexp(subexp(H16$ + \"\\\\:\" + H16$) + \"|\" + IPV4ADDRESS$),\n        IPV6ADDRESS1$ = subexp(subexp(H16$ + \"\\\\:\") + \"{6}\" + LS32$),\n        //                           6( h16 \":\" ) ls32\n  IPV6ADDRESS2$ = subexp(\"\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{5}\" + LS32$),\n        //                      \"::\" 5( h16 \":\" ) ls32\n  IPV6ADDRESS3$ = subexp(subexp(H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{4}\" + LS32$),\n        //[               h16 ] \"::\" 4( h16 \":\" ) ls32\n  IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,1}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{3}\" + LS32$),\n        //[ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n  IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,2}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{2}\" + LS32$),\n        //[ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n  IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,3}\" + H16$) + \"?\\\\:\\\\:\" + H16$ + \"\\\\:\" + LS32$),\n        //[ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n  IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,4}\" + H16$) + \"?\\\\:\\\\:\" + LS32$),\n        //[ *4( h16 \":\" ) h16 ] \"::\"              ls32\n  IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,5}\" + H16$) + \"?\\\\:\\\\:\" + H16$),\n        //[ *5( h16 \":\" ) h16 ] \"::\"              h16\n  IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,6}\" + H16$) + \"?\\\\:\\\\:\"),\n        //[ *6( h16 \":\" ) h16 ] \"::\"\n  IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join(\"|\")),\n        ZONEID$ = subexp(subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$) + \"+\"),\n        //RFC 6874\n  IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + \"\\\\%25\" + ZONEID$),\n        //RFC 6874\n  IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + ZONEID$),\n        //RFC 6874, with relaxed parsing rules\n  IPVFUTURE$ = subexp(\"[vV]\" + HEXDIG$$ + \"+\\\\.\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\") + \"+\"),\n        IP_LITERAL$ = subexp(\"\\\\[\" + subexp(IPV6ADDRZ_RELAXED$ + \"|\" + IPV6ADDRESS$ + \"|\" + IPVFUTURE$) + \"\\\\]\"),\n        //RFC 6874\n  REG_NAME$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$)) + \"*\"),\n        HOST$ = subexp(IP_LITERAL$ + \"|\" + IPV4ADDRESS$ + \"(?!\" + REG_NAME$ + \")\" + \"|\" + REG_NAME$),\n        PORT$ = subexp(DIGIT$$ + \"*\"),\n        AUTHORITY$ = subexp(subexp(USERINFO$ + \"@\") + \"?\" + HOST$ + subexp(\"\\\\:\" + PORT$) + \"?\"),\n        PCHAR$ = subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@]\")),\n        SEGMENT$ = subexp(PCHAR$ + \"*\"),\n        SEGMENT_NZ$ = subexp(PCHAR$ + \"+\"),\n        SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\@]\")) + \"+\"),\n        PATH_ABEMPTY$ = subexp(subexp(\"\\\\/\" + SEGMENT$) + \"*\"),\n        PATH_ABSOLUTE$ = subexp(\"\\\\/\" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + \"?\"),\n        //simplified\n  PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),\n        //simplified\n  PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),\n        //simplified\n  PATH_EMPTY$ = \"(?!\" + PCHAR$ + \")\",\n        PATH$ = subexp(PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n        QUERY$ = subexp(subexp(PCHAR$ + \"|\" + merge(\"[\\\\/\\\\?]\", IPRIVATE$$)) + \"*\"),\n        FRAGMENT$ = subexp(subexp(PCHAR$ + \"|[\\\\/\\\\?]\") + \"*\"),\n        HIER_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n        URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n        RELATIVE_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$),\n        RELATIVE$ = subexp(RELATIVE_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n        URI_REFERENCE$ = subexp(URI$ + \"|\" + RELATIVE$),\n        ABSOLUTE_URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\"),\n        GENERIC_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n        RELATIVE_REF$ = \"^(){0}\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n        ABSOLUTE_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?$\",\n        SAMEDOC_REF$ = \"^\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n        AUTHORITY_REF$ = \"^\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?$\";\n  return {\n    NOT_SCHEME: new RegExp(merge(\"[^]\", ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\"), \"g\"),\n    NOT_USERINFO: new RegExp(merge(\"[^\\\\%\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n    NOT_HOST: new RegExp(merge(\"[^\\\\%\\\\[\\\\]\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n    NOT_PATH: new RegExp(merge(\"[^\\\\%\\\\/\\\\:\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n    NOT_PATH_NOSCHEME: new RegExp(merge(\"[^\\\\%\\\\/\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n    NOT_QUERY: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\", IPRIVATE$$), \"g\"),\n    NOT_FRAGMENT: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\"), \"g\"),\n    ESCAPE: new RegExp(merge(\"[^]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n    UNRESERVED: new RegExp(UNRESERVED$$, \"g\"),\n    OTHER_CHARS: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, RESERVED$$), \"g\"),\n    PCT_ENCODED: new RegExp(PCT_ENCODED$, \"g\"),\n    IPV4ADDRESS: new RegExp(\"^(\" + IPV4ADDRESS$ + \")$\"),\n    IPV6ADDRESS: new RegExp(\"^\\\\[?(\" + IPV6ADDRESS$ + \")\" + subexp(subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + \"(\" + ZONEID$ + \")\") + \"?\\\\]?$\") //RFC 6874, with relaxed parsing rules\n\n  };\n}\nexport default buildExps(false);","map":{"version":3,"sources":["../../src/regexps-uri.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { merge, subexp } from \"./util\";\r\nexport function buildExps(isIRI) {\r\n    const ALPHA$$ = \"[A-Za-z]\", CR$ = \"[\\\\x0D]\", DIGIT$$ = \"[0-9]\", DQUOTE$$ = \"[\\\\x22]\", HEXDIG$$ = merge(DIGIT$$, \"[A-Fa-f]\"), //case-insensitive\r\n    LF$$ = \"[\\\\x0A]\", SP$$ = \"[\\\\x20]\", PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)), //expanded\r\n    GEN_DELIMS$$ = \"[\\\\:\\\\/\\\\?\\\\#\\\\[\\\\]\\\\@]\", SUB_DELIMS$$ = \"[\\\\!\\\\$\\\\&\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\=]\", RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$), UCSCHAR$$ = isIRI ? \"[\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]\" : \"[]\", //subset, excludes bidi control characters\r\n    IPRIVATE$$ = isIRI ? \"[\\\\uE000-\\\\uF8FF]\" : \"[]\", //subset\r\n    UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, \"[\\\\-\\\\.\\\\_\\\\~]\", UCSCHAR$$), SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\") + \"*\"), USERINFO$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\")) + \"*\"), DEC_OCTET$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"[1-9]\" + DIGIT$$) + \"|\" + DIGIT$$), DEC_OCTET_RELAXED$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"0?[1-9]\" + DIGIT$$) + \"|0?0?\" + DIGIT$$), //relaxed parsing rules\r\n    IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$), H16$ = subexp(HEXDIG$$ + \"{1,4}\"), LS32$ = subexp(subexp(H16$ + \"\\\\:\" + H16$) + \"|\" + IPV4ADDRESS$), IPV6ADDRESS1$ = subexp(subexp(H16$ + \"\\\\:\") + \"{6}\" + LS32$), //                           6( h16 \":\" ) ls32\r\n    IPV6ADDRESS2$ = subexp(\"\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{5}\" + LS32$), //                      \"::\" 5( h16 \":\" ) ls32\r\n    IPV6ADDRESS3$ = subexp(subexp(H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{4}\" + LS32$), //[               h16 ] \"::\" 4( h16 \":\" ) ls32\r\n    IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,1}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{3}\" + LS32$), //[ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\r\n    IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,2}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{2}\" + LS32$), //[ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\r\n    IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,3}\" + H16$) + \"?\\\\:\\\\:\" + H16$ + \"\\\\:\" + LS32$), //[ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\r\n    IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,4}\" + H16$) + \"?\\\\:\\\\:\" + LS32$), //[ *4( h16 \":\" ) h16 ] \"::\"              ls32\r\n    IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,5}\" + H16$) + \"?\\\\:\\\\:\" + H16$), //[ *5( h16 \":\" ) h16 ] \"::\"              h16\r\n    IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,6}\" + H16$) + \"?\\\\:\\\\:\"), //[ *6( h16 \":\" ) h16 ] \"::\"\r\n    IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join(\"|\")), ZONEID$ = subexp(subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$) + \"+\"), //RFC 6874\r\n    IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + \"\\\\%25\" + ZONEID$), //RFC 6874\r\n    IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + ZONEID$), //RFC 6874, with relaxed parsing rules\r\n    IPVFUTURE$ = subexp(\"[vV]\" + HEXDIG$$ + \"+\\\\.\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\") + \"+\"), IP_LITERAL$ = subexp(\"\\\\[\" + subexp(IPV6ADDRZ_RELAXED$ + \"|\" + IPV6ADDRESS$ + \"|\" + IPVFUTURE$) + \"\\\\]\"), //RFC 6874\r\n    REG_NAME$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$)) + \"*\"), HOST$ = subexp(IP_LITERAL$ + \"|\" + IPV4ADDRESS$ + \"(?!\" + REG_NAME$ + \")\" + \"|\" + REG_NAME$), PORT$ = subexp(DIGIT$$ + \"*\"), AUTHORITY$ = subexp(subexp(USERINFO$ + \"@\") + \"?\" + HOST$ + subexp(\"\\\\:\" + PORT$) + \"?\"), PCHAR$ = subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@]\")), SEGMENT$ = subexp(PCHAR$ + \"*\"), SEGMENT_NZ$ = subexp(PCHAR$ + \"+\"), SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\@]\")) + \"+\"), PATH_ABEMPTY$ = subexp(subexp(\"\\\\/\" + SEGMENT$) + \"*\"), PATH_ABSOLUTE$ = subexp(\"\\\\/\" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + \"?\"), //simplified\r\n    PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$), //simplified\r\n    PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$), //simplified\r\n    PATH_EMPTY$ = \"(?!\" + PCHAR$ + \")\", PATH$ = subexp(PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$), QUERY$ = subexp(subexp(PCHAR$ + \"|\" + merge(\"[\\\\/\\\\?]\", IPRIVATE$$)) + \"*\"), FRAGMENT$ = subexp(subexp(PCHAR$ + \"|[\\\\/\\\\?]\") + \"*\"), HIER_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$), URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"), RELATIVE_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$), RELATIVE$ = subexp(RELATIVE_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"), URI_REFERENCE$ = subexp(URI$ + \"|\" + RELATIVE$), ABSOLUTE_URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\"), GENERIC_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\", RELATIVE_REF$ = \"^(){0}\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\", ABSOLUTE_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?$\", SAMEDOC_REF$ = \"^\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\", AUTHORITY_REF$ = \"^\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?$\";\r\n    return {\r\n        NOT_SCHEME: new RegExp(merge(\"[^]\", ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\"), \"g\"),\r\n        NOT_USERINFO: new RegExp(merge(\"[^\\\\%\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\r\n        NOT_HOST: new RegExp(merge(\"[^\\\\%\\\\[\\\\]\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\r\n        NOT_PATH: new RegExp(merge(\"[^\\\\%\\\\/\\\\:\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\r\n        NOT_PATH_NOSCHEME: new RegExp(merge(\"[^\\\\%\\\\/\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\r\n        NOT_QUERY: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\", IPRIVATE$$), \"g\"),\r\n        NOT_FRAGMENT: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\"), \"g\"),\r\n        ESCAPE: new RegExp(merge(\"[^]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\r\n        UNRESERVED: new RegExp(UNRESERVED$$, \"g\"),\r\n        OTHER_CHARS: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, RESERVED$$), \"g\"),\r\n        PCT_ENCODED: new RegExp(PCT_ENCODED$, \"g\"),\r\n        IPV4ADDRESS: new RegExp(\"^(\" + IPV4ADDRESS$ + \")$\"),\r\n        IPV6ADDRESS: new RegExp(\"^\\\\[?(\" + IPV6ADDRESS$ + \")\" + subexp(subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + \"(\" + ZONEID$ + \")\") + \"?\\\\]?$\") //RFC 6874, with relaxed parsing rules\r\n    };\r\n}\r\nexport default buildExps(false);\r\n//# sourceMappingURL=regexps-uri.js.map"]},"metadata":{},"sourceType":"module"}