{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar assert = require('assert');\n\nvar path = require('.');\n\nvar isWindows = process.platform === 'win32'; // Mock the node.js path\n\nvar f = __dirname + '/simple/test-path.js';\nassert.equal(path.basename(f), 'test-path.js');\nassert.equal(path.basename(f, '.js'), 'test-path');\nassert.equal(path.basename(''), '');\nassert.equal(path.basename('/dir/basename.ext'), 'basename.ext');\nassert.equal(path.basename('/basename.ext'), 'basename.ext');\nassert.equal(path.basename('basename.ext'), 'basename.ext');\nassert.equal(path.basename('basename.ext/'), 'basename.ext');\nassert.equal(path.basename('basename.ext//'), 'basename.ext');\n\nif (isWindows) {\n  // On Windows a backslash acts as a path separator.\n  assert.equal(path.basename('\\\\dir\\\\basename.ext'), 'basename.ext');\n  assert.equal(path.basename('\\\\basename.ext'), 'basename.ext');\n  assert.equal(path.basename('basename.ext'), 'basename.ext');\n  assert.equal(path.basename('basename.ext\\\\'), 'basename.ext');\n  assert.equal(path.basename('basename.ext\\\\\\\\'), 'basename.ext');\n} else {\n  // On unix a backslash is just treated as any other character.\n  assert.equal(path.basename('\\\\dir\\\\basename.ext'), '\\\\dir\\\\basename.ext');\n  assert.equal(path.basename('\\\\basename.ext'), '\\\\basename.ext');\n  assert.equal(path.basename('basename.ext'), 'basename.ext');\n  assert.equal(path.basename('basename.ext\\\\'), 'basename.ext\\\\');\n  assert.equal(path.basename('basename.ext\\\\\\\\'), 'basename.ext\\\\\\\\');\n} // POSIX filenames may include control characters\n// c.f. http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html\n\n\nif (!isWindows) {\n  var controlCharFilename = 'Icon' + String.fromCharCode(13);\n  assert.equal(path.basename('/a/b/' + controlCharFilename), controlCharFilename);\n}\n\nassert.equal(path.extname(f), '.js');\nassert.equal(path.dirname(f).substr(-11), isWindows ? 'test\\\\simple' : 'test/simple');\nassert.equal(path.dirname('/a/b/'), '/a');\nassert.equal(path.dirname('/a/b'), '/a');\nassert.equal(path.dirname('/a'), '/');\nassert.equal(path.dirname(''), '.');\nassert.equal(path.dirname('/'), '/');\nassert.equal(path.dirname('////'), '/');\n\nif (isWindows) {\n  assert.equal(path.dirname('c:\\\\'), 'c:\\\\');\n  assert.equal(path.dirname('c:\\\\foo'), 'c:\\\\');\n  assert.equal(path.dirname('c:\\\\foo\\\\'), 'c:\\\\');\n  assert.equal(path.dirname('c:\\\\foo\\\\bar'), 'c:\\\\foo');\n  assert.equal(path.dirname('c:\\\\foo\\\\bar\\\\'), 'c:\\\\foo');\n  assert.equal(path.dirname('c:\\\\foo\\\\bar\\\\baz'), 'c:\\\\foo\\\\bar');\n  assert.equal(path.dirname('\\\\'), '\\\\');\n  assert.equal(path.dirname('\\\\foo'), '\\\\');\n  assert.equal(path.dirname('\\\\foo\\\\'), '\\\\');\n  assert.equal(path.dirname('\\\\foo\\\\bar'), '\\\\foo');\n  assert.equal(path.dirname('\\\\foo\\\\bar\\\\'), '\\\\foo');\n  assert.equal(path.dirname('\\\\foo\\\\bar\\\\baz'), '\\\\foo\\\\bar');\n  assert.equal(path.dirname('c:'), 'c:');\n  assert.equal(path.dirname('c:foo'), 'c:');\n  assert.equal(path.dirname('c:foo\\\\'), 'c:');\n  assert.equal(path.dirname('c:foo\\\\bar'), 'c:foo');\n  assert.equal(path.dirname('c:foo\\\\bar\\\\'), 'c:foo');\n  assert.equal(path.dirname('c:foo\\\\bar\\\\baz'), 'c:foo\\\\bar');\n  assert.equal(path.dirname('\\\\\\\\unc\\\\share'), '\\\\\\\\unc\\\\share');\n  assert.equal(path.dirname('\\\\\\\\unc\\\\share\\\\foo'), '\\\\\\\\unc\\\\share\\\\');\n  assert.equal(path.dirname('\\\\\\\\unc\\\\share\\\\foo\\\\'), '\\\\\\\\unc\\\\share\\\\');\n  assert.equal(path.dirname('\\\\\\\\unc\\\\share\\\\foo\\\\bar'), '\\\\\\\\unc\\\\share\\\\foo');\n  assert.equal(path.dirname('\\\\\\\\unc\\\\share\\\\foo\\\\bar\\\\'), '\\\\\\\\unc\\\\share\\\\foo');\n  assert.equal(path.dirname('\\\\\\\\unc\\\\share\\\\foo\\\\bar\\\\baz'), '\\\\\\\\unc\\\\share\\\\foo\\\\bar');\n}\n\nassert.equal(path.extname(''), '');\nassert.equal(path.extname('/path/to/file'), '');\nassert.equal(path.extname('/path/to/file.ext'), '.ext');\nassert.equal(path.extname('/path.to/file.ext'), '.ext');\nassert.equal(path.extname('/path.to/file'), '');\nassert.equal(path.extname('/path.to/.file'), '');\nassert.equal(path.extname('/path.to/.file.ext'), '.ext');\nassert.equal(path.extname('/path/to/f.ext'), '.ext');\nassert.equal(path.extname('/path/to/..ext'), '.ext');\nassert.equal(path.extname('file'), '');\nassert.equal(path.extname('file.ext'), '.ext');\nassert.equal(path.extname('.file'), '');\nassert.equal(path.extname('.file.ext'), '.ext');\nassert.equal(path.extname('/file'), '');\nassert.equal(path.extname('/file.ext'), '.ext');\nassert.equal(path.extname('/.file'), '');\nassert.equal(path.extname('/.file.ext'), '.ext');\nassert.equal(path.extname('.path/file.ext'), '.ext');\nassert.equal(path.extname('file.ext.ext'), '.ext');\nassert.equal(path.extname('file.'), '.');\nassert.equal(path.extname('.'), '');\nassert.equal(path.extname('./'), '');\nassert.equal(path.extname('.file.ext'), '.ext');\nassert.equal(path.extname('.file'), '');\nassert.equal(path.extname('.file.'), '.');\nassert.equal(path.extname('.file..'), '.');\nassert.equal(path.extname('..'), '');\nassert.equal(path.extname('../'), '');\nassert.equal(path.extname('..file.ext'), '.ext');\nassert.equal(path.extname('..file'), '.file');\nassert.equal(path.extname('..file.'), '.');\nassert.equal(path.extname('..file..'), '.');\nassert.equal(path.extname('...'), '.');\nassert.equal(path.extname('...ext'), '.ext');\nassert.equal(path.extname('....'), '.');\nassert.equal(path.extname('file.ext/'), '.ext');\nassert.equal(path.extname('file.ext//'), '.ext');\nassert.equal(path.extname('file/'), '');\nassert.equal(path.extname('file//'), '');\nassert.equal(path.extname('file./'), '.');\nassert.equal(path.extname('file.//'), '.');\n\nif (isWindows) {\n  // On windows, backspace is a path separator.\n  assert.equal(path.extname('.\\\\'), '');\n  assert.equal(path.extname('..\\\\'), '');\n  assert.equal(path.extname('file.ext\\\\'), '.ext');\n  assert.equal(path.extname('file.ext\\\\\\\\'), '.ext');\n  assert.equal(path.extname('file\\\\'), '');\n  assert.equal(path.extname('file\\\\\\\\'), '');\n  assert.equal(path.extname('file.\\\\'), '.');\n  assert.equal(path.extname('file.\\\\\\\\'), '.');\n} else {\n  // On unix, backspace is a valid name component like any other character.\n  assert.equal(path.extname('.\\\\'), '');\n  assert.equal(path.extname('..\\\\'), '.\\\\');\n  assert.equal(path.extname('file.ext\\\\'), '.ext\\\\');\n  assert.equal(path.extname('file.ext\\\\\\\\'), '.ext\\\\\\\\');\n  assert.equal(path.extname('file\\\\'), '');\n  assert.equal(path.extname('file\\\\\\\\'), '');\n  assert.equal(path.extname('file.\\\\'), '.\\\\');\n  assert.equal(path.extname('file.\\\\\\\\'), '.\\\\\\\\');\n} // path.join tests\n\n\nvar failures = [];\nvar joinTests = // arguments                     result\n[[['.', 'x/b', '..', '/b/c.js'], 'x/b/c.js'], [['/.', 'x/b', '..', '/b/c.js'], '/x/b/c.js'], [['/foo', '../../../bar'], '/bar'], [['foo', '../../../bar'], '../../bar'], [['foo/', '../../../bar'], '../../bar'], [['foo/x', '../../../bar'], '../bar'], [['foo/x', './bar'], 'foo/x/bar'], [['foo/x/', './bar'], 'foo/x/bar'], [['foo/x/', '.', 'bar'], 'foo/x/bar'], [['./'], './'], [['.', './'], './'], [['.', '.', '.'], '.'], [['.', './', '.'], '.'], [['.', '/./', '.'], '.'], [['.', '/////./', '.'], '.'], [['.'], '.'], [['', '.'], '.'], [['', 'foo'], 'foo'], [['foo', '/bar'], 'foo/bar'], [['', '/foo'], '/foo'], [['', '', '/foo'], '/foo'], [['', '', 'foo'], 'foo'], [['foo', ''], 'foo'], [['foo/', ''], 'foo/'], [['foo', '', '/bar'], 'foo/bar'], [['./', '..', '/foo'], '../foo'], [['./', '..', '..', '/foo'], '../../foo'], [['.', '..', '..', '/foo'], '../../foo'], [['', '..', '..', '/foo'], '../../foo'], [['/'], '/'], [['/', '.'], '/'], [['/', '..'], '/'], [['/', '..', '..'], '/'], [[''], '.'], [['', ''], '.'], [[' /foo'], ' /foo'], [[' ', 'foo'], ' /foo'], [[' ', '.'], ' '], [[' ', '/'], ' /'], [[' ', ''], ' '], [['/', 'foo'], '/foo'], [['/', '/foo'], '/foo'], [['/', '//foo'], '/foo'], [['/', '', '/foo'], '/foo'], [['', '/', 'foo'], '/foo'], [['', '/', '/foo'], '/foo']]; // Windows-specific join tests\n\nif (isWindows) {\n  joinTests = joinTests.concat([// UNC path expected\n  [['//foo/bar'], '//foo/bar/'], [['\\\\/foo/bar'], '//foo/bar/'], [['\\\\\\\\foo/bar'], '//foo/bar/'], // UNC path expected - server and share separate\n  [['//foo', 'bar'], '//foo/bar/'], [['//foo/', 'bar'], '//foo/bar/'], [['//foo', '/bar'], '//foo/bar/'], // UNC path expected - questionable\n  [['//foo', '', 'bar'], '//foo/bar/'], [['//foo/', '', 'bar'], '//foo/bar/'], [['//foo/', '', '/bar'], '//foo/bar/'], // UNC path expected - even more questionable\n  [['', '//foo', 'bar'], '//foo/bar/'], [['', '//foo/', 'bar'], '//foo/bar/'], [['', '//foo/', '/bar'], '//foo/bar/'], // No UNC path expected (no double slash in first component)\n  [['\\\\', 'foo/bar'], '/foo/bar'], [['\\\\', '/foo/bar'], '/foo/bar'], [['', '/', '/foo/bar'], '/foo/bar'], // No UNC path expected (no non-slashes in first component - questionable)\n  [['//', 'foo/bar'], '/foo/bar'], [['//', '/foo/bar'], '/foo/bar'], [['\\\\\\\\', '/', '/foo/bar'], '/foo/bar'], [['//'], '/'], // No UNC path expected (share name missing - questionable).\n  [['//foo'], '/foo'], [['//foo/'], '/foo/'], [['//foo', '/'], '/foo/'], [['//foo', '', '/'], '/foo/'], // No UNC path expected (too many leading slashes - questionable)\n  [['///foo/bar'], '/foo/bar'], [['////foo', 'bar'], '/foo/bar'], [['\\\\\\\\\\\\/foo/bar'], '/foo/bar'], // Drive-relative vs drive-absolute paths. This merely describes the\n  // status quo, rather than being obviously right\n  [['c:'], 'c:.'], [['c:.'], 'c:.'], [['c:', ''], 'c:.'], [['', 'c:'], 'c:.'], [['c:.', '/'], 'c:./'], [['c:.', 'file'], 'c:file'], [['c:', '/'], 'c:/'], [['c:', 'file'], 'c:/file']]);\n} // Run the join tests.\n\n\njoinTests.forEach(function (test) {\n  var actual = path.join.apply(path, test[0]);\n  var expected = isWindows ? test[1].replace(/\\//g, '\\\\') : test[1];\n  var message = 'path.join(' + test[0].map(JSON.stringify).join(',') + ')' + '\\n  expect=' + JSON.stringify(expected) + '\\n  actual=' + JSON.stringify(actual);\n  if (actual !== expected) failures.push('\\n' + message); // assert.equal(actual, expected, message);\n});\nassert.equal(failures.length, 0, failures.join(''));\nvar joinThrowTests = [true, false, 7, null, {}, undefined, [], NaN];\njoinThrowTests.forEach(function (test) {\n  assert.throws(function () {\n    path.join(test);\n  }, TypeError);\n  assert.throws(function () {\n    path.resolve(test);\n  }, TypeError);\n}); // path normalize tests\n\nif (isWindows) {\n  assert.equal(path.normalize('./fixtures///b/../b/c.js'), 'fixtures\\\\b\\\\c.js');\n  assert.equal(path.normalize('/foo/../../../bar'), '\\\\bar');\n  assert.equal(path.normalize('a//b//../b'), 'a\\\\b');\n  assert.equal(path.normalize('a//b//./c'), 'a\\\\b\\\\c');\n  assert.equal(path.normalize('a//b//.'), 'a\\\\b');\n  assert.equal(path.normalize('//server/share/dir/file.ext'), '\\\\\\\\server\\\\share\\\\dir\\\\file.ext');\n} else {\n  assert.equal(path.normalize('./fixtures///b/../b/c.js'), 'fixtures/b/c.js');\n  assert.equal(path.normalize('/foo/../../../bar'), '/bar');\n  assert.equal(path.normalize('a//b//../b'), 'a/b');\n  assert.equal(path.normalize('a//b//./c'), 'a/b/c');\n  assert.equal(path.normalize('a//b//.'), 'a/b');\n} // path.resolve tests\n\n\nif (isWindows) {\n  // windows\n  var resolveTests = // arguments                                    result\n  [[['c:/blah\\\\blah', 'd:/games', 'c:../a'], 'c:\\\\blah\\\\a'], [['c:/ignore', 'd:\\\\a/b\\\\c/d', '\\\\e.exe'], 'd:\\\\e.exe'], [['c:/ignore', 'c:/some/file'], 'c:\\\\some\\\\file'], [['d:/ignore', 'd:some/dir//'], 'd:\\\\ignore\\\\some\\\\dir'], [['.'], process.cwd()], [['//server/share', '..', 'relative\\\\'], '\\\\\\\\server\\\\share\\\\relative'], [['c:/', '//'], 'c:\\\\'], [['c:/', '//dir'], 'c:\\\\dir'], [['c:/', '//server/share'], '\\\\\\\\server\\\\share\\\\'], [['c:/', '//server//share'], '\\\\\\\\server\\\\share\\\\'], [['c:/', '///some//dir'], 'c:\\\\some\\\\dir']];\n} else {\n  // Posix\n  var resolveTests = // arguments                                    result\n  [[['/var/lib', '../', 'file/'], '/var/file'], [['/var/lib', '/../', 'file/'], '/file'], [['a/b/c/', '../../..'], process.cwd()], [['.'], process.cwd()], [['/some/dir', '.', '/absolute/'], '/absolute']];\n}\n\nvar failures = [];\nresolveTests.forEach(function (test) {\n  var actual = path.resolve.apply(path, test[0]);\n  var expected = test[1];\n  var message = 'path.resolve(' + test[0].map(JSON.stringify).join(',') + ')' + '\\n  expect=' + JSON.stringify(expected) + '\\n  actual=' + JSON.stringify(actual);\n  if (actual !== expected) failures.push('\\n' + message); // assert.equal(actual, expected, message);\n});\nassert.equal(failures.length, 0, failures.join('')); // path.isAbsolute tests\n\nif (isWindows) {\n  assert.equal(path.isAbsolute('//server/file'), true);\n  assert.equal(path.isAbsolute('\\\\\\\\server\\\\file'), true);\n  assert.equal(path.isAbsolute('C:/Users/'), true);\n  assert.equal(path.isAbsolute('C:\\\\Users\\\\'), true);\n  assert.equal(path.isAbsolute('C:cwd/another'), false);\n  assert.equal(path.isAbsolute('C:cwd\\\\another'), false);\n  assert.equal(path.isAbsolute('directory/directory'), false);\n  assert.equal(path.isAbsolute('directory\\\\directory'), false);\n} else {\n  assert.equal(path.isAbsolute('/home/foo'), true);\n  assert.equal(path.isAbsolute('/home/foo/..'), true);\n  assert.equal(path.isAbsolute('bar/'), false);\n  assert.equal(path.isAbsolute('./baz'), false);\n} // path.relative tests\n\n\nif (isWindows) {\n  // windows\n  var relativeTests = // arguments                     result\n  [['c:/blah\\\\blah', 'd:/games', 'd:\\\\games'], ['c:/aaaa/bbbb', 'c:/aaaa', '..'], ['c:/aaaa/bbbb', 'c:/cccc', '..\\\\..\\\\cccc'], ['c:/aaaa/bbbb', 'c:/aaaa/bbbb', ''], ['c:/aaaa/bbbb', 'c:/aaaa/cccc', '..\\\\cccc'], ['c:/aaaa/', 'c:/aaaa/cccc', 'cccc'], ['c:/', 'c:\\\\aaaa\\\\bbbb', 'aaaa\\\\bbbb'], ['c:/aaaa/bbbb', 'd:\\\\', 'd:\\\\']];\n} else {\n  // posix\n  var relativeTests = // arguments                    result\n  [['/var/lib', '/var', '..'], ['/var/lib', '/bin', '../../bin'], ['/var/lib', '/var/lib', ''], ['/var/lib', '/var/apache', '../apache'], ['/var/', '/var/lib', 'lib'], ['/', '/var/lib', 'var/lib']];\n}\n\nvar failures = [];\nrelativeTests.forEach(function (test) {\n  var actual = path.relative(test[0], test[1]);\n  var expected = test[2];\n  var message = 'path.relative(' + test.slice(0, 2).map(JSON.stringify).join(',') + ')' + '\\n  expect=' + JSON.stringify(expected) + '\\n  actual=' + JSON.stringify(actual);\n  if (actual !== expected) failures.push('\\n' + message);\n});\nassert.equal(failures.length, 0, failures.join('')); // path.sep tests\n\nif (isWindows) {\n  // windows\n  assert.equal(path.sep, '\\\\');\n} else {\n  // posix\n  assert.equal(path.sep, '/');\n} // path.delimiter tests\n\n\nif (isWindows) {\n  // windows\n  assert.equal(path.delimiter, ';');\n} else {\n  // posix\n  assert.equal(path.delimiter, ':');\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/path-browserify/test/test-path.js"],"names":["assert","require","path","isWindows","process","platform","f","__dirname","equal","basename","controlCharFilename","String","fromCharCode","extname","dirname","substr","failures","joinTests","concat","forEach","test","actual","join","apply","expected","replace","message","map","JSON","stringify","push","length","joinThrowTests","undefined","NaN","throws","TypeError","resolve","normalize","resolveTests","cwd","isAbsolute","relativeTests","relative","slice","sep","delimiter"],"mappings":"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","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar assert = require('assert');\n\nvar path = require('.');\n\nvar isWindows = process.platform === 'win32';\n\n// Mock the node.js path\nvar f = __dirname + '/simple/test-path.js';\n\nassert.equal(path.basename(f), 'test-path.js');\nassert.equal(path.basename(f, '.js'), 'test-path');\nassert.equal(path.basename(''), '');\nassert.equal(path.basename('/dir/basename.ext'), 'basename.ext');\nassert.equal(path.basename('/basename.ext'), 'basename.ext');\nassert.equal(path.basename('basename.ext'), 'basename.ext');\nassert.equal(path.basename('basename.ext/'), 'basename.ext');\nassert.equal(path.basename('basename.ext//'), 'basename.ext');\n\nif (isWindows) {\n  // On Windows a backslash acts as a path separator.\n  assert.equal(path.basename('\\\\dir\\\\basename.ext'), 'basename.ext');\n  assert.equal(path.basename('\\\\basename.ext'), 'basename.ext');\n  assert.equal(path.basename('basename.ext'), 'basename.ext');\n  assert.equal(path.basename('basename.ext\\\\'), 'basename.ext');\n  assert.equal(path.basename('basename.ext\\\\\\\\'), 'basename.ext');\n\n} else {\n  // On unix a backslash is just treated as any other character.\n  assert.equal(path.basename('\\\\dir\\\\basename.ext'), '\\\\dir\\\\basename.ext');\n  assert.equal(path.basename('\\\\basename.ext'), '\\\\basename.ext');\n  assert.equal(path.basename('basename.ext'), 'basename.ext');\n  assert.equal(path.basename('basename.ext\\\\'), 'basename.ext\\\\');\n  assert.equal(path.basename('basename.ext\\\\\\\\'), 'basename.ext\\\\\\\\');\n}\n\n// POSIX filenames may include control characters\n// c.f. http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html\nif (!isWindows) {\n  var controlCharFilename = 'Icon' + String.fromCharCode(13);\n  assert.equal(path.basename('/a/b/' + controlCharFilename),\n               controlCharFilename);\n}\n\nassert.equal(path.extname(f), '.js');\n\nassert.equal(path.dirname(f).substr(-11),\n             isWindows ? 'test\\\\simple' : 'test/simple');\nassert.equal(path.dirname('/a/b/'), '/a');\nassert.equal(path.dirname('/a/b'), '/a');\nassert.equal(path.dirname('/a'), '/');\nassert.equal(path.dirname(''), '.');\nassert.equal(path.dirname('/'), '/');\nassert.equal(path.dirname('////'), '/');\n\nif (isWindows) {\n  assert.equal(path.dirname('c:\\\\'), 'c:\\\\');\n  assert.equal(path.dirname('c:\\\\foo'), 'c:\\\\');\n  assert.equal(path.dirname('c:\\\\foo\\\\'), 'c:\\\\');\n  assert.equal(path.dirname('c:\\\\foo\\\\bar'), 'c:\\\\foo');\n  assert.equal(path.dirname('c:\\\\foo\\\\bar\\\\'), 'c:\\\\foo');\n  assert.equal(path.dirname('c:\\\\foo\\\\bar\\\\baz'), 'c:\\\\foo\\\\bar');\n  assert.equal(path.dirname('\\\\'), '\\\\');\n  assert.equal(path.dirname('\\\\foo'), '\\\\');\n  assert.equal(path.dirname('\\\\foo\\\\'), '\\\\');\n  assert.equal(path.dirname('\\\\foo\\\\bar'), '\\\\foo');\n  assert.equal(path.dirname('\\\\foo\\\\bar\\\\'), '\\\\foo');\n  assert.equal(path.dirname('\\\\foo\\\\bar\\\\baz'), '\\\\foo\\\\bar');\n  assert.equal(path.dirname('c:'), 'c:');\n  assert.equal(path.dirname('c:foo'), 'c:');\n  assert.equal(path.dirname('c:foo\\\\'), 'c:');\n  assert.equal(path.dirname('c:foo\\\\bar'), 'c:foo');\n  assert.equal(path.dirname('c:foo\\\\bar\\\\'), 'c:foo');\n  assert.equal(path.dirname('c:foo\\\\bar\\\\baz'), 'c:foo\\\\bar');\n  assert.equal(path.dirname('\\\\\\\\unc\\\\share'), '\\\\\\\\unc\\\\share');\n  assert.equal(path.dirname('\\\\\\\\unc\\\\share\\\\foo'), '\\\\\\\\unc\\\\share\\\\');\n  assert.equal(path.dirname('\\\\\\\\unc\\\\share\\\\foo\\\\'), '\\\\\\\\unc\\\\share\\\\');\n  assert.equal(path.dirname('\\\\\\\\unc\\\\share\\\\foo\\\\bar'),\n               '\\\\\\\\unc\\\\share\\\\foo');\n  assert.equal(path.dirname('\\\\\\\\unc\\\\share\\\\foo\\\\bar\\\\'),\n               '\\\\\\\\unc\\\\share\\\\foo');\n  assert.equal(path.dirname('\\\\\\\\unc\\\\share\\\\foo\\\\bar\\\\baz'),\n               '\\\\\\\\unc\\\\share\\\\foo\\\\bar');\n}\n\n\nassert.equal(path.extname(''), '');\nassert.equal(path.extname('/path/to/file'), '');\nassert.equal(path.extname('/path/to/file.ext'), '.ext');\nassert.equal(path.extname('/path.to/file.ext'), '.ext');\nassert.equal(path.extname('/path.to/file'), '');\nassert.equal(path.extname('/path.to/.file'), '');\nassert.equal(path.extname('/path.to/.file.ext'), '.ext');\nassert.equal(path.extname('/path/to/f.ext'), '.ext');\nassert.equal(path.extname('/path/to/..ext'), '.ext');\nassert.equal(path.extname('file'), '');\nassert.equal(path.extname('file.ext'), '.ext');\nassert.equal(path.extname('.file'), '');\nassert.equal(path.extname('.file.ext'), '.ext');\nassert.equal(path.extname('/file'), '');\nassert.equal(path.extname('/file.ext'), '.ext');\nassert.equal(path.extname('/.file'), '');\nassert.equal(path.extname('/.file.ext'), '.ext');\nassert.equal(path.extname('.path/file.ext'), '.ext');\nassert.equal(path.extname('file.ext.ext'), '.ext');\nassert.equal(path.extname('file.'), '.');\nassert.equal(path.extname('.'), '');\nassert.equal(path.extname('./'), '');\nassert.equal(path.extname('.file.ext'), '.ext');\nassert.equal(path.extname('.file'), '');\nassert.equal(path.extname('.file.'), '.');\nassert.equal(path.extname('.file..'), '.');\nassert.equal(path.extname('..'), '');\nassert.equal(path.extname('../'), '');\nassert.equal(path.extname('..file.ext'), '.ext');\nassert.equal(path.extname('..file'), '.file');\nassert.equal(path.extname('..file.'), '.');\nassert.equal(path.extname('..file..'), '.');\nassert.equal(path.extname('...'), '.');\nassert.equal(path.extname('...ext'), '.ext');\nassert.equal(path.extname('....'), '.');\nassert.equal(path.extname('file.ext/'), '.ext');\nassert.equal(path.extname('file.ext//'), '.ext');\nassert.equal(path.extname('file/'), '');\nassert.equal(path.extname('file//'), '');\nassert.equal(path.extname('file./'), '.');\nassert.equal(path.extname('file.//'), '.');\n\nif (isWindows) {\n  // On windows, backspace is a path separator.\n  assert.equal(path.extname('.\\\\'), '');\n  assert.equal(path.extname('..\\\\'), '');\n  assert.equal(path.extname('file.ext\\\\'), '.ext');\n  assert.equal(path.extname('file.ext\\\\\\\\'), '.ext');\n  assert.equal(path.extname('file\\\\'), '');\n  assert.equal(path.extname('file\\\\\\\\'), '');\n  assert.equal(path.extname('file.\\\\'), '.');\n  assert.equal(path.extname('file.\\\\\\\\'), '.');\n\n} else {\n  // On unix, backspace is a valid name component like any other character.\n  assert.equal(path.extname('.\\\\'), '');\n  assert.equal(path.extname('..\\\\'), '.\\\\');\n  assert.equal(path.extname('file.ext\\\\'), '.ext\\\\');\n  assert.equal(path.extname('file.ext\\\\\\\\'), '.ext\\\\\\\\');\n  assert.equal(path.extname('file\\\\'), '');\n  assert.equal(path.extname('file\\\\\\\\'), '');\n  assert.equal(path.extname('file.\\\\'), '.\\\\');\n  assert.equal(path.extname('file.\\\\\\\\'), '.\\\\\\\\');\n}\n\n// path.join tests\nvar failures = [];\nvar joinTests =\n    // arguments                     result\n    [[['.', 'x/b', '..', '/b/c.js'], 'x/b/c.js'],\n     [['/.', 'x/b', '..', '/b/c.js'], '/x/b/c.js'],\n     [['/foo', '../../../bar'], '/bar'],\n     [['foo', '../../../bar'], '../../bar'],\n     [['foo/', '../../../bar'], '../../bar'],\n     [['foo/x', '../../../bar'], '../bar'],\n     [['foo/x', './bar'], 'foo/x/bar'],\n     [['foo/x/', './bar'], 'foo/x/bar'],\n     [['foo/x/', '.', 'bar'], 'foo/x/bar'],\n     [['./'], './'],\n     [['.', './'], './'],\n     [['.', '.', '.'], '.'],\n     [['.', './', '.'], '.'],\n     [['.', '/./', '.'], '.'],\n     [['.', '/////./', '.'], '.'],\n     [['.'], '.'],\n     [['', '.'], '.'],\n     [['', 'foo'], 'foo'],\n     [['foo', '/bar'], 'foo/bar'],\n     [['', '/foo'], '/foo'],\n     [['', '', '/foo'], '/foo'],\n     [['', '', 'foo'], 'foo'],\n     [['foo', ''], 'foo'],\n     [['foo/', ''], 'foo/'],\n     [['foo', '', '/bar'], 'foo/bar'],\n     [['./', '..', '/foo'], '../foo'],\n     [['./', '..', '..', '/foo'], '../../foo'],\n     [['.', '..', '..', '/foo'], '../../foo'],\n     [['', '..', '..', '/foo'], '../../foo'],\n     [['/'], '/'],\n     [['/', '.'], '/'],\n     [['/', '..'], '/'],\n     [['/', '..', '..'], '/'],\n     [[''], '.'],\n     [['', ''], '.'],\n     [[' /foo'], ' /foo'],\n     [[' ', 'foo'], ' /foo'],\n     [[' ', '.'], ' '],\n     [[' ', '/'], ' /'],\n     [[' ', ''], ' '],\n     [['/', 'foo'], '/foo'],\n     [['/', '/foo'], '/foo'],\n     [['/', '//foo'], '/foo'],\n     [['/', '', '/foo'], '/foo'],\n     [['', '/', 'foo'], '/foo'],\n     [['', '/', '/foo'], '/foo']\n    ];\n\n// Windows-specific join tests\nif (isWindows) {\n  joinTests = joinTests.concat(\n    [// UNC path expected\n     [['//foo/bar'], '//foo/bar/'],\n     [['\\\\/foo/bar'], '//foo/bar/'],\n     [['\\\\\\\\foo/bar'], '//foo/bar/'],\n     // UNC path expected - server and share separate\n     [['//foo', 'bar'], '//foo/bar/'],\n     [['//foo/', 'bar'], '//foo/bar/'],\n     [['//foo', '/bar'], '//foo/bar/'],\n     // UNC path expected - questionable\n     [['//foo', '', 'bar'], '//foo/bar/'],\n     [['//foo/', '', 'bar'], '//foo/bar/'],\n     [['//foo/', '', '/bar'], '//foo/bar/'],\n     // UNC path expected - even more questionable\n     [['', '//foo', 'bar'], '//foo/bar/'],\n     [['', '//foo/', 'bar'], '//foo/bar/'],\n     [['', '//foo/', '/bar'], '//foo/bar/'],\n     // No UNC path expected (no double slash in first component)\n     [['\\\\', 'foo/bar'], '/foo/bar'],\n     [['\\\\', '/foo/bar'], '/foo/bar'],\n     [['', '/', '/foo/bar'], '/foo/bar'],\n     // No UNC path expected (no non-slashes in first component - questionable)\n     [['//', 'foo/bar'], '/foo/bar'],\n     [['//', '/foo/bar'], '/foo/bar'],\n     [['\\\\\\\\', '/', '/foo/bar'], '/foo/bar'],\n     [['//'], '/'],\n     // No UNC path expected (share name missing - questionable).\n     [['//foo'], '/foo'],\n     [['//foo/'], '/foo/'],\n     [['//foo', '/'], '/foo/'],\n     [['//foo', '', '/'], '/foo/'],\n     // No UNC path expected (too many leading slashes - questionable)\n     [['///foo/bar'], '/foo/bar'],\n     [['////foo', 'bar'], '/foo/bar'],\n     [['\\\\\\\\\\\\/foo/bar'], '/foo/bar'],\n     // Drive-relative vs drive-absolute paths. This merely describes the\n     // status quo, rather than being obviously right\n     [['c:'], 'c:.'],\n     [['c:.'], 'c:.'],\n     [['c:', ''], 'c:.'],\n     [['', 'c:'], 'c:.'],\n     [['c:.', '/'], 'c:./'],\n     [['c:.', 'file'], 'c:file'],\n     [['c:', '/'], 'c:/'],\n     [['c:', 'file'], 'c:/file']\n    ]);\n}\n\n// Run the join tests.\njoinTests.forEach(function(test) {\n  var actual = path.join.apply(path, test[0]);\n  var expected = isWindows ? test[1].replace(/\\//g, '\\\\') : test[1];\n  var message = 'path.join(' + test[0].map(JSON.stringify).join(',') + ')' +\n                '\\n  expect=' + JSON.stringify(expected) +\n                '\\n  actual=' + JSON.stringify(actual);\n  if (actual !== expected) failures.push('\\n' + message);\n  // assert.equal(actual, expected, message);\n});\nassert.equal(failures.length, 0, failures.join(''));\nvar joinThrowTests = [true, false, 7, null, {}, undefined, [], NaN];\njoinThrowTests.forEach(function(test) {\n  assert.throws(function() {\n    path.join(test);\n  }, TypeError);\n  assert.throws(function() {\n    path.resolve(test);\n  }, TypeError);\n});\n\n\n// path normalize tests\nif (isWindows) {\n  assert.equal(path.normalize('./fixtures///b/../b/c.js'),\n               'fixtures\\\\b\\\\c.js');\n  assert.equal(path.normalize('/foo/../../../bar'), '\\\\bar');\n  assert.equal(path.normalize('a//b//../b'), 'a\\\\b');\n  assert.equal(path.normalize('a//b//./c'), 'a\\\\b\\\\c');\n  assert.equal(path.normalize('a//b//.'), 'a\\\\b');\n  assert.equal(path.normalize('//server/share/dir/file.ext'),\n               '\\\\\\\\server\\\\share\\\\dir\\\\file.ext');\n} else {\n  assert.equal(path.normalize('./fixtures///b/../b/c.js'),\n               'fixtures/b/c.js');\n  assert.equal(path.normalize('/foo/../../../bar'), '/bar');\n  assert.equal(path.normalize('a//b//../b'), 'a/b');\n  assert.equal(path.normalize('a//b//./c'), 'a/b/c');\n  assert.equal(path.normalize('a//b//.'), 'a/b');\n}\n\n// path.resolve tests\nif (isWindows) {\n  // windows\n  var resolveTests =\n      // arguments                                    result\n      [[['c:/blah\\\\blah', 'd:/games', 'c:../a'], 'c:\\\\blah\\\\a'],\n       [['c:/ignore', 'd:\\\\a/b\\\\c/d', '\\\\e.exe'], 'd:\\\\e.exe'],\n       [['c:/ignore', 'c:/some/file'], 'c:\\\\some\\\\file'],\n       [['d:/ignore', 'd:some/dir//'], 'd:\\\\ignore\\\\some\\\\dir'],\n       [['.'], process.cwd()],\n       [['//server/share', '..', 'relative\\\\'], '\\\\\\\\server\\\\share\\\\relative'],\n       [['c:/', '//'], 'c:\\\\'],\n       [['c:/', '//dir'], 'c:\\\\dir'],\n       [['c:/', '//server/share'], '\\\\\\\\server\\\\share\\\\'],\n       [['c:/', '//server//share'], '\\\\\\\\server\\\\share\\\\'],\n       [['c:/', '///some//dir'], 'c:\\\\some\\\\dir']\n      ];\n} else {\n  // Posix\n  var resolveTests =\n      // arguments                                    result\n      [[['/var/lib', '../', 'file/'], '/var/file'],\n       [['/var/lib', '/../', 'file/'], '/file'],\n       [['a/b/c/', '../../..'], process.cwd()],\n       [['.'], process.cwd()],\n       [['/some/dir', '.', '/absolute/'], '/absolute']];\n}\nvar failures = [];\nresolveTests.forEach(function(test) {\n  var actual = path.resolve.apply(path, test[0]);\n  var expected = test[1];\n  var message = 'path.resolve(' + test[0].map(JSON.stringify).join(',') + ')' +\n                '\\n  expect=' + JSON.stringify(expected) +\n                '\\n  actual=' + JSON.stringify(actual);\n  if (actual !== expected) failures.push('\\n' + message);\n  // assert.equal(actual, expected, message);\n});\nassert.equal(failures.length, 0, failures.join(''));\n\n// path.isAbsolute tests\nif (isWindows) {\n  assert.equal(path.isAbsolute('//server/file'), true);\n  assert.equal(path.isAbsolute('\\\\\\\\server\\\\file'), true);\n  assert.equal(path.isAbsolute('C:/Users/'), true);\n  assert.equal(path.isAbsolute('C:\\\\Users\\\\'), true);\n  assert.equal(path.isAbsolute('C:cwd/another'), false);\n  assert.equal(path.isAbsolute('C:cwd\\\\another'), false);\n  assert.equal(path.isAbsolute('directory/directory'), false);\n  assert.equal(path.isAbsolute('directory\\\\directory'), false);\n} else {\n  assert.equal(path.isAbsolute('/home/foo'), true);\n  assert.equal(path.isAbsolute('/home/foo/..'), true);\n  assert.equal(path.isAbsolute('bar/'), false);\n  assert.equal(path.isAbsolute('./baz'), false);\n}\n\n// path.relative tests\nif (isWindows) {\n  // windows\n  var relativeTests =\n      // arguments                     result\n      [['c:/blah\\\\blah', 'd:/games', 'd:\\\\games'],\n       ['c:/aaaa/bbbb', 'c:/aaaa', '..'],\n       ['c:/aaaa/bbbb', 'c:/cccc', '..\\\\..\\\\cccc'],\n       ['c:/aaaa/bbbb', 'c:/aaaa/bbbb', ''],\n       ['c:/aaaa/bbbb', 'c:/aaaa/cccc', '..\\\\cccc'],\n       ['c:/aaaa/', 'c:/aaaa/cccc', 'cccc'],\n       ['c:/', 'c:\\\\aaaa\\\\bbbb', 'aaaa\\\\bbbb'],\n       ['c:/aaaa/bbbb', 'd:\\\\', 'd:\\\\']];\n} else {\n  // posix\n  var relativeTests =\n      // arguments                    result\n      [['/var/lib', '/var', '..'],\n       ['/var/lib', '/bin', '../../bin'],\n       ['/var/lib', '/var/lib', ''],\n       ['/var/lib', '/var/apache', '../apache'],\n       ['/var/', '/var/lib', 'lib'],\n       ['/', '/var/lib', 'var/lib']];\n}\nvar failures = [];\nrelativeTests.forEach(function(test) {\n  var actual = path.relative(test[0], test[1]);\n  var expected = test[2];\n  var message = 'path.relative(' +\n                test.slice(0, 2).map(JSON.stringify).join(',') +\n                ')' +\n                '\\n  expect=' + JSON.stringify(expected) +\n                '\\n  actual=' + JSON.stringify(actual);\n  if (actual !== expected) failures.push('\\n' + message);\n});\nassert.equal(failures.length, 0, failures.join(''));\n\n// path.sep tests\nif (isWindows) {\n  // windows\n  assert.equal(path.sep, '\\\\');\n} else {\n  // posix\n  assert.equal(path.sep, '/');\n}\n\n// path.delimiter tests\nif (isWindows) {\n  // windows\n  assert.equal(path.delimiter, ';');\n} else {\n  // posix\n  assert.equal(path.delimiter, ':');\n}\n"]},"metadata":{},"sourceType":"script"}