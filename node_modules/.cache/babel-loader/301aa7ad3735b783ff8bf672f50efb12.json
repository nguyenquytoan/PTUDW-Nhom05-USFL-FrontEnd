{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.resolvePathname = factory();\n})(this, function () {\n  'use strict';\n\n  function isAbsolute(pathname) {\n    return pathname.charAt(0) === '/';\n  } // About 1.5x faster than the two-arg version of Array#splice()\n\n\n  function spliceOne(list, index) {\n    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n      list[i] = list[k];\n    }\n\n    list.pop();\n  } // This implementation is based heavily on node's url.parse\n\n\n  function resolvePathname(to, from) {\n    if (from === undefined) from = '';\n    var toParts = to && to.split('/') || [];\n    var fromParts = from && from.split('/') || [];\n    var isToAbs = to && isAbsolute(to);\n    var isFromAbs = from && isAbsolute(from);\n    var mustEndAbs = isToAbs || isFromAbs;\n\n    if (to && isAbsolute(to)) {\n      // to is absolute\n      fromParts = toParts;\n    } else if (toParts.length) {\n      // to is relative, drop the filename\n      fromParts.pop();\n      fromParts = fromParts.concat(toParts);\n    }\n\n    if (!fromParts.length) return '/';\n    var hasTrailingSlash;\n\n    if (fromParts.length) {\n      var last = fromParts[fromParts.length - 1];\n      hasTrailingSlash = last === '.' || last === '..' || last === '';\n    } else {\n      hasTrailingSlash = false;\n    }\n\n    var up = 0;\n\n    for (var i = fromParts.length; i >= 0; i--) {\n      var part = fromParts[i];\n\n      if (part === '.') {\n        spliceOne(fromParts, i);\n      } else if (part === '..') {\n        spliceOne(fromParts, i);\n        up++;\n      } else if (up) {\n        spliceOne(fromParts, i);\n        up--;\n      }\n    }\n\n    if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');\n    if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');\n    var result = fromParts.join('/');\n    if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n    return result;\n  }\n\n  return resolvePathname;\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/resolve-pathname/umd/resolve-pathname.js"],"names":["global","factory","exports","module","define","amd","resolvePathname","isAbsolute","pathname","charAt","spliceOne","list","index","i","k","n","length","pop","to","from","undefined","toParts","split","fromParts","isToAbs","isFromAbs","mustEndAbs","concat","hasTrailingSlash","last","up","part","unshift","result","join","substr"],"mappings":"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","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.resolvePathname = factory());\n}(this, (function () { 'use strict';\n\n  function isAbsolute(pathname) {\n    return pathname.charAt(0) === '/';\n  }\n\n  // About 1.5x faster than the two-arg version of Array#splice()\n  function spliceOne(list, index) {\n    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n      list[i] = list[k];\n    }\n\n    list.pop();\n  }\n\n  // This implementation is based heavily on node's url.parse\n  function resolvePathname(to, from) {\n    if (from === undefined) from = '';\n\n    var toParts = (to && to.split('/')) || [];\n    var fromParts = (from && from.split('/')) || [];\n\n    var isToAbs = to && isAbsolute(to);\n    var isFromAbs = from && isAbsolute(from);\n    var mustEndAbs = isToAbs || isFromAbs;\n\n    if (to && isAbsolute(to)) {\n      // to is absolute\n      fromParts = toParts;\n    } else if (toParts.length) {\n      // to is relative, drop the filename\n      fromParts.pop();\n      fromParts = fromParts.concat(toParts);\n    }\n\n    if (!fromParts.length) return '/';\n\n    var hasTrailingSlash;\n    if (fromParts.length) {\n      var last = fromParts[fromParts.length - 1];\n      hasTrailingSlash = last === '.' || last === '..' || last === '';\n    } else {\n      hasTrailingSlash = false;\n    }\n\n    var up = 0;\n    for (var i = fromParts.length; i >= 0; i--) {\n      var part = fromParts[i];\n\n      if (part === '.') {\n        spliceOne(fromParts, i);\n      } else if (part === '..') {\n        spliceOne(fromParts, i);\n        up++;\n      } else if (up) {\n        spliceOne(fromParts, i);\n        up--;\n      }\n    }\n\n    if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');\n\n    if (\n      mustEndAbs &&\n      fromParts[0] !== '' &&\n      (!fromParts[0] || !isAbsolute(fromParts[0]))\n    )\n      fromParts.unshift('');\n\n    var result = fromParts.join('/');\n\n    if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n\n    return result;\n  }\n\n  return resolvePathname;\n\n})));\n"]},"metadata":{},"sourceType":"script"}