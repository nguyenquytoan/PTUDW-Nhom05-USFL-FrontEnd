{"ast":null,"code":"/**\n * @fileoverview Disallows or enforces spaces inside of object literals.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent spacing inside braces\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/object-curly-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }, {\n      type: \"object\",\n      properties: {\n        arraysInObjects: {\n          type: \"boolean\"\n        },\n        objectsInObjects: {\n          type: \"boolean\"\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const spaced = context.options[0] === \"always\",\n          sourceCode = context.getSourceCode();\n    /**\n     * Determines whether an option is set, relative to the spacing option.\n     * If spaced is \"always\", then check whether option is set to false.\n     * If spaced is \"never\", then check whether option is set to true.\n     * @param {Object} option The option to exclude.\n     * @returns {boolean} Whether or not the property is excluded.\n     */\n\n    function isOptionSet(option) {\n      return context.options[1] ? context.options[1][option] === !spaced : false;\n    }\n\n    const options = {\n      spaced,\n      arraysInObjectsException: isOptionSet(\"arraysInObjects\"),\n      objectsInObjectsException: isOptionSet(\"objectsInObjects\")\n    }; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Reports that there shouldn't be a space after the first token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n\n    function reportNoBeginningSpace(node, token) {\n      const nextToken = context.getSourceCode().getTokenAfter(token, {\n        includeComments: true\n      });\n      context.report({\n        node,\n        loc: {\n          start: token.loc.end,\n          end: nextToken.loc.start\n        },\n        message: \"There should be no space after '{{token}}'.\",\n        data: {\n          token: token.value\n        },\n\n        fix(fixer) {\n          return fixer.removeRange([token.range[1], nextToken.range[0]]);\n        }\n\n      });\n    }\n    /**\n     * Reports that there shouldn't be a space before the last token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n\n\n    function reportNoEndingSpace(node, token) {\n      const previousToken = context.getSourceCode().getTokenBefore(token, {\n        includeComments: true\n      });\n      context.report({\n        node,\n        loc: {\n          start: previousToken.loc.end,\n          end: token.loc.start\n        },\n        message: \"There should be no space before '{{token}}'.\",\n        data: {\n          token: token.value\n        },\n\n        fix(fixer) {\n          return fixer.removeRange([previousToken.range[1], token.range[0]]);\n        }\n\n      });\n    }\n    /**\n     * Reports that there should be a space after the first token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n\n\n    function reportRequiredBeginningSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        message: \"A space is required after '{{token}}'.\",\n        data: {\n          token: token.value\n        },\n\n        fix(fixer) {\n          return fixer.insertTextAfter(token, \" \");\n        }\n\n      });\n    }\n    /**\n     * Reports that there should be a space before the last token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n\n\n    function reportRequiredEndingSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        message: \"A space is required before '{{token}}'.\",\n        data: {\n          token: token.value\n        },\n\n        fix(fixer) {\n          return fixer.insertTextBefore(token, \" \");\n        }\n\n      });\n    }\n    /**\n     * Determines if spacing in curly braces is valid.\n     * @param {ASTNode} node The AST node to check.\n     * @param {Token} first The first token to check (should be the opening brace)\n     * @param {Token} second The second token to check (should be first after the opening brace)\n     * @param {Token} penultimate The penultimate token to check (should be last before closing brace)\n     * @param {Token} last The last token to check (should be closing brace)\n     * @returns {void}\n     */\n\n\n    function validateBraceSpacing(node, first, second, penultimate, last) {\n      if (astUtils.isTokenOnSameLine(first, second)) {\n        const firstSpaced = sourceCode.isSpaceBetweenTokens(first, second);\n\n        if (options.spaced && !firstSpaced) {\n          reportRequiredBeginningSpace(node, first);\n        }\n\n        if (!options.spaced && firstSpaced && second.type !== \"Line\") {\n          reportNoBeginningSpace(node, first);\n        }\n      }\n\n      if (astUtils.isTokenOnSameLine(penultimate, last)) {\n        const shouldCheckPenultimate = options.arraysInObjectsException && astUtils.isClosingBracketToken(penultimate) || options.objectsInObjectsException && astUtils.isClosingBraceToken(penultimate);\n        const penultimateType = shouldCheckPenultimate && sourceCode.getNodeByRangeIndex(penultimate.range[0]).type;\n        const closingCurlyBraceMustBeSpaced = options.arraysInObjectsException && penultimateType === \"ArrayExpression\" || options.objectsInObjectsException && (penultimateType === \"ObjectExpression\" || penultimateType === \"ObjectPattern\") ? !options.spaced : options.spaced;\n        const lastSpaced = sourceCode.isSpaceBetweenTokens(penultimate, last);\n\n        if (closingCurlyBraceMustBeSpaced && !lastSpaced) {\n          reportRequiredEndingSpace(node, last);\n        }\n\n        if (!closingCurlyBraceMustBeSpaced && lastSpaced) {\n          reportNoEndingSpace(node, last);\n        }\n      }\n    }\n    /**\n     * Gets '}' token of an object node.\n     *\n     * Because the last token of object patterns might be a type annotation,\n     * this traverses tokens preceded by the last property, then returns the\n     * first '}' token.\n     * @param {ASTNode} node The node to get. This node is an\n     *      ObjectExpression or an ObjectPattern. And this node has one or\n     *      more properties.\n     * @returns {Token} '}' token.\n     */\n\n\n    function getClosingBraceOfObject(node) {\n      const lastProperty = node.properties[node.properties.length - 1];\n      return sourceCode.getTokenAfter(lastProperty, astUtils.isClosingBraceToken);\n    }\n    /**\n     * Reports a given object node if spacing in curly braces is invalid.\n     * @param {ASTNode} node An ObjectExpression or ObjectPattern node to check.\n     * @returns {void}\n     */\n\n\n    function checkForObject(node) {\n      if (node.properties.length === 0) {\n        return;\n      }\n\n      const first = sourceCode.getFirstToken(node),\n            last = getClosingBraceOfObject(node),\n            second = sourceCode.getTokenAfter(first, {\n        includeComments: true\n      }),\n            penultimate = sourceCode.getTokenBefore(last, {\n        includeComments: true\n      });\n      validateBraceSpacing(node, first, second, penultimate, last);\n    }\n    /**\n     * Reports a given import node if spacing in curly braces is invalid.\n     * @param {ASTNode} node An ImportDeclaration node to check.\n     * @returns {void}\n     */\n\n\n    function checkForImport(node) {\n      if (node.specifiers.length === 0) {\n        return;\n      }\n\n      let firstSpecifier = node.specifiers[0];\n      const lastSpecifier = node.specifiers[node.specifiers.length - 1];\n\n      if (lastSpecifier.type !== \"ImportSpecifier\") {\n        return;\n      }\n\n      if (firstSpecifier.type !== \"ImportSpecifier\") {\n        firstSpecifier = node.specifiers[1];\n      }\n\n      const first = sourceCode.getTokenBefore(firstSpecifier),\n            last = sourceCode.getTokenAfter(lastSpecifier, astUtils.isNotCommaToken),\n            second = sourceCode.getTokenAfter(first, {\n        includeComments: true\n      }),\n            penultimate = sourceCode.getTokenBefore(last, {\n        includeComments: true\n      });\n      validateBraceSpacing(node, first, second, penultimate, last);\n    }\n    /**\n     * Reports a given export node if spacing in curly braces is invalid.\n     * @param {ASTNode} node An ExportNamedDeclaration node to check.\n     * @returns {void}\n     */\n\n\n    function checkForExport(node) {\n      if (node.specifiers.length === 0) {\n        return;\n      }\n\n      const firstSpecifier = node.specifiers[0],\n            lastSpecifier = node.specifiers[node.specifiers.length - 1],\n            first = sourceCode.getTokenBefore(firstSpecifier),\n            last = sourceCode.getTokenAfter(lastSpecifier, astUtils.isNotCommaToken),\n            second = sourceCode.getTokenAfter(first, {\n        includeComments: true\n      }),\n            penultimate = sourceCode.getTokenBefore(last, {\n        includeComments: true\n      });\n      validateBraceSpacing(node, first, second, penultimate, last);\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      // var {x} = y;\n      ObjectPattern: checkForObject,\n      // var y = {x: 'y'}\n      ObjectExpression: checkForObject,\n      // import {y} from 'x';\n      ImportDeclaration: checkForImport,\n      // export {name} from 'yo';\n      ExportNamedDeclaration: checkForExport\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/object-curly-spacing.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","properties","arraysInObjects","objectsInObjects","additionalProperties","create","context","spaced","options","sourceCode","getSourceCode","isOptionSet","option","arraysInObjectsException","objectsInObjectsException","reportNoBeginningSpace","node","token","nextToken","getTokenAfter","includeComments","report","loc","start","end","message","data","value","fix","fixer","removeRange","range","reportNoEndingSpace","previousToken","getTokenBefore","reportRequiredBeginningSpace","insertTextAfter","reportRequiredEndingSpace","insertTextBefore","validateBraceSpacing","first","second","penultimate","last","isTokenOnSameLine","firstSpaced","isSpaceBetweenTokens","shouldCheckPenultimate","isClosingBracketToken","isClosingBraceToken","penultimateType","getNodeByRangeIndex","closingCurlyBraceMustBeSpaced","lastSpaced","getClosingBraceOfObject","lastProperty","length","checkForObject","getFirstToken","checkForImport","specifiers","firstSpecifier","lastSpecifier","isNotCommaToken","checkForExport","ObjectPattern","ObjectExpression","ImportDeclaration","ExportNamedDeclaration"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Disallows or enforces spaces inside of object literals.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent spacing inside braces\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/object-curly-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    arraysInObjects: {\n                        type: \"boolean\"\n                    },\n                    objectsInObjects: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create(context) {\n        const spaced = context.options[0] === \"always\",\n            sourceCode = context.getSourceCode();\n\n        /**\n         * Determines whether an option is set, relative to the spacing option.\n         * If spaced is \"always\", then check whether option is set to false.\n         * If spaced is \"never\", then check whether option is set to true.\n         * @param {Object} option The option to exclude.\n         * @returns {boolean} Whether or not the property is excluded.\n         */\n        function isOptionSet(option) {\n            return context.options[1] ? context.options[1][option] === !spaced : false;\n        }\n\n        const options = {\n            spaced,\n            arraysInObjectsException: isOptionSet(\"arraysInObjects\"),\n            objectsInObjectsException: isOptionSet(\"objectsInObjects\")\n        };\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports that there shouldn't be a space after the first token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportNoBeginningSpace(node, token) {\n            const nextToken = context.getSourceCode().getTokenAfter(token, { includeComments: true });\n\n            context.report({\n                node,\n                loc: { start: token.loc.end, end: nextToken.loc.start },\n                message: \"There should be no space after '{{token}}'.\",\n                data: {\n                    token: token.value\n                },\n                fix(fixer) {\n                    return fixer.removeRange([token.range[1], nextToken.range[0]]);\n                }\n            });\n        }\n\n        /**\n         * Reports that there shouldn't be a space before the last token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportNoEndingSpace(node, token) {\n            const previousToken = context.getSourceCode().getTokenBefore(token, { includeComments: true });\n\n            context.report({\n                node,\n                loc: { start: previousToken.loc.end, end: token.loc.start },\n                message: \"There should be no space before '{{token}}'.\",\n                data: {\n                    token: token.value\n                },\n                fix(fixer) {\n                    return fixer.removeRange([previousToken.range[1], token.range[0]]);\n                }\n            });\n        }\n\n        /**\n         * Reports that there should be a space after the first token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportRequiredBeginningSpace(node, token) {\n            context.report({\n                node,\n                loc: token.loc,\n                message: \"A space is required after '{{token}}'.\",\n                data: {\n                    token: token.value\n                },\n                fix(fixer) {\n                    return fixer.insertTextAfter(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Reports that there should be a space before the last token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportRequiredEndingSpace(node, token) {\n            context.report({\n                node,\n                loc: token.loc,\n                message: \"A space is required before '{{token}}'.\",\n                data: {\n                    token: token.value\n                },\n                fix(fixer) {\n                    return fixer.insertTextBefore(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Determines if spacing in curly braces is valid.\n         * @param {ASTNode} node The AST node to check.\n         * @param {Token} first The first token to check (should be the opening brace)\n         * @param {Token} second The second token to check (should be first after the opening brace)\n         * @param {Token} penultimate The penultimate token to check (should be last before closing brace)\n         * @param {Token} last The last token to check (should be closing brace)\n         * @returns {void}\n         */\n        function validateBraceSpacing(node, first, second, penultimate, last) {\n            if (astUtils.isTokenOnSameLine(first, second)) {\n                const firstSpaced = sourceCode.isSpaceBetweenTokens(first, second);\n\n                if (options.spaced && !firstSpaced) {\n                    reportRequiredBeginningSpace(node, first);\n                }\n                if (!options.spaced && firstSpaced && second.type !== \"Line\") {\n                    reportNoBeginningSpace(node, first);\n                }\n            }\n\n            if (astUtils.isTokenOnSameLine(penultimate, last)) {\n                const shouldCheckPenultimate = (\n                    options.arraysInObjectsException && astUtils.isClosingBracketToken(penultimate) ||\n                    options.objectsInObjectsException && astUtils.isClosingBraceToken(penultimate)\n                );\n                const penultimateType = shouldCheckPenultimate && sourceCode.getNodeByRangeIndex(penultimate.range[0]).type;\n\n                const closingCurlyBraceMustBeSpaced = (\n                    options.arraysInObjectsException && penultimateType === \"ArrayExpression\" ||\n                    options.objectsInObjectsException && (penultimateType === \"ObjectExpression\" || penultimateType === \"ObjectPattern\")\n                ) ? !options.spaced : options.spaced;\n\n                const lastSpaced = sourceCode.isSpaceBetweenTokens(penultimate, last);\n\n                if (closingCurlyBraceMustBeSpaced && !lastSpaced) {\n                    reportRequiredEndingSpace(node, last);\n                }\n                if (!closingCurlyBraceMustBeSpaced && lastSpaced) {\n                    reportNoEndingSpace(node, last);\n                }\n            }\n        }\n\n        /**\n         * Gets '}' token of an object node.\n         *\n         * Because the last token of object patterns might be a type annotation,\n         * this traverses tokens preceded by the last property, then returns the\n         * first '}' token.\n         * @param {ASTNode} node The node to get. This node is an\n         *      ObjectExpression or an ObjectPattern. And this node has one or\n         *      more properties.\n         * @returns {Token} '}' token.\n         */\n        function getClosingBraceOfObject(node) {\n            const lastProperty = node.properties[node.properties.length - 1];\n\n            return sourceCode.getTokenAfter(lastProperty, astUtils.isClosingBraceToken);\n        }\n\n        /**\n         * Reports a given object node if spacing in curly braces is invalid.\n         * @param {ASTNode} node An ObjectExpression or ObjectPattern node to check.\n         * @returns {void}\n         */\n        function checkForObject(node) {\n            if (node.properties.length === 0) {\n                return;\n            }\n\n            const first = sourceCode.getFirstToken(node),\n                last = getClosingBraceOfObject(node),\n                second = sourceCode.getTokenAfter(first, { includeComments: true }),\n                penultimate = sourceCode.getTokenBefore(last, { includeComments: true });\n\n            validateBraceSpacing(node, first, second, penultimate, last);\n        }\n\n        /**\n         * Reports a given import node if spacing in curly braces is invalid.\n         * @param {ASTNode} node An ImportDeclaration node to check.\n         * @returns {void}\n         */\n        function checkForImport(node) {\n            if (node.specifiers.length === 0) {\n                return;\n            }\n\n            let firstSpecifier = node.specifiers[0];\n            const lastSpecifier = node.specifiers[node.specifiers.length - 1];\n\n            if (lastSpecifier.type !== \"ImportSpecifier\") {\n                return;\n            }\n            if (firstSpecifier.type !== \"ImportSpecifier\") {\n                firstSpecifier = node.specifiers[1];\n            }\n\n            const first = sourceCode.getTokenBefore(firstSpecifier),\n                last = sourceCode.getTokenAfter(lastSpecifier, astUtils.isNotCommaToken),\n                second = sourceCode.getTokenAfter(first, { includeComments: true }),\n                penultimate = sourceCode.getTokenBefore(last, { includeComments: true });\n\n            validateBraceSpacing(node, first, second, penultimate, last);\n        }\n\n        /**\n         * Reports a given export node if spacing in curly braces is invalid.\n         * @param {ASTNode} node An ExportNamedDeclaration node to check.\n         * @returns {void}\n         */\n        function checkForExport(node) {\n            if (node.specifiers.length === 0) {\n                return;\n            }\n\n            const firstSpecifier = node.specifiers[0],\n                lastSpecifier = node.specifiers[node.specifiers.length - 1],\n                first = sourceCode.getTokenBefore(firstSpecifier),\n                last = sourceCode.getTokenAfter(lastSpecifier, astUtils.isNotCommaToken),\n                second = sourceCode.getTokenAfter(first, { includeComments: true }),\n                penultimate = sourceCode.getTokenBefore(last, { includeComments: true });\n\n            validateBraceSpacing(node, first, second, penultimate, last);\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n\n            // var {x} = y;\n            ObjectPattern: checkForObject,\n\n            // var y = {x: 'y'}\n            ObjectExpression: checkForObject,\n\n            // import {y} from 'x';\n            ImportDeclaration: checkForImport,\n\n            // export {name} from 'yo';\n            ExportNamedDeclaration: checkForExport\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}