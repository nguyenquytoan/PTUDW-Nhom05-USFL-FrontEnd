{"ast":null,"code":"import postcss from 'postcss';\n\nfunction _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nconst space = postcss.list.space; // overflow shorthand property matcher\n\nconst overflowPropertyRegExp = /^overflow$/i;\nvar index = postcss.plugin('postcss-overflow-shorthand', opts => {\n  const preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : true;\n  return root => {\n    // for each overflow declaration\n    root.walkDecls(overflowPropertyRegExp, decl => {\n      // split the declaration values\n      const _space = space(decl.value),\n            _space2 = _toArray(_space),\n            overflowX = _space2[0],\n            overflowY = _space2[1],\n            invalidatingValues = _space2.slice(2); // if there are two values, but no invalidating values\n\n\n      if (overflowY && !invalidatingValues.length) {\n        // insert the overflow-* longhand declarations\n        decl.cloneBefore({\n          prop: `${decl.prop}-x`,\n          value: overflowX\n        });\n        decl.cloneBefore({\n          prop: `${decl.prop}-y`,\n          value: overflowY\n        }); // conditionally remove the original declaration\n\n        if (!preserve) {\n          decl.remove();\n        }\n      }\n    });\n  };\n});\nexport default index;","map":{"version":3,"sources":["index.js"],"names":["list","space","postcss","overflowPropertyRegExp","opts","preserve","Object","Boolean","root","decl","overflowX","overflowY","invalidatingValues","prop","value"],"mappings":";;;;;;;;;;;;;;;;;;MAGgBC,KAAAA,GAAYC,OAAAA,CAApBF,IAAoBE,CAAZD,K,EAAAA;;AAGhB,MAAME,sBAAsB,GAA5B,aAAA;AAEA,IAAA,KAAA,GAAe,OAAO,CAAP,MAAA,CAAA,4BAAA,EAA6CC,IAAI,IAAI;QAC7DC,QAAQ,GAAG,cAAcC,MAAM,CAApB,IAAoB,CAApB,GAA6BC,OAAO,CAACH,IAAI,CAAzC,QAAoC,CAApC,GAAjB,I;SAEOI,IAAI,IAAI;;AAEdA,IAAAA,IAAI,CAAJA,SAAAA,CAAAA,sBAAAA,EAAuCC,IAAI,IAAI;;qBAEQR,KAAK,CAACQ,IAAI,CAFlB,KAEa,C;;YAApDC,SAFuC,GAAA,OAAA,CAAA,CAAA,C;YAE5BC,SAF4B,GAAA,OAAA,CAAA,CAAA,C;YAEdC,kBAFc,GAAA,OAAA,CAAA,KAAA,CAAA,CAAA,C,CAAA,CAAA;;;UAK1CD,SAAS,IAAI,CAACC,kBAAkB,CAApC,M,EAA6C;;AAE5CH,QAAAA,IAAI,CAAJA,WAAAA,CAAiB;AAChBI,UAAAA,IAAI,EAAG,GAAEJ,IAAI,CAACI,IADE,IAAA;AAEhBC,UAAAA,KAAK,EAAEJ;AAFS,SAAjBD;AAKAA,QAAAA,IAAI,CAAJA,WAAAA,CAAiB;AAChBI,UAAAA,IAAI,EAAG,GAAEJ,IAAI,CAACI,IADE,IAAA;AAEhBC,UAAAA,KAAK,EAAEH;AAFS,SAAjBF,EAP4C,CAAA;;YAaxC,CAAJ,Q,EAAe;AACdA,UAAAA,IAAI,CAAJA,MAAAA;;;AAnBHD,KAAAA;AAFD,G;AAHD,CAAe,CAAf","sourcesContent":["import postcss from 'postcss';\n\n// space-separated values splitter\nconst { list: { space } } = postcss\n\n// overflow shorthand property matcher\nconst overflowPropertyRegExp = /^overflow$/i;\n\nexport default postcss.plugin('postcss-overflow-shorthand', opts => {\n\tconst preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : true;\n\n\treturn root => {\n\t\t// for each overflow declaration\n\t\troot.walkDecls(overflowPropertyRegExp, decl => {\n\t\t\t// split the declaration values\n\t\t\tconst [overflowX, overflowY, ...invalidatingValues] = space(decl.value);\n\n\t\t\t// if there are two values, but no invalidating values\n\t\t\tif (overflowY && !invalidatingValues.length) {\n\t\t\t\t// insert the overflow-* longhand declarations\n\t\t\t\tdecl.cloneBefore({\n\t\t\t\t\tprop: `${decl.prop}-x`,\n\t\t\t\t\tvalue: overflowX\n\t\t\t\t});\n\n\t\t\t\tdecl.cloneBefore({\n\t\t\t\t\tprop: `${decl.prop}-y`,\n\t\t\t\t\tvalue: overflowY\n\t\t\t\t});\n\n\t\t\t\t// conditionally remove the original declaration\n\t\t\t\tif (!preserve) {\n\t\t\t\t\tdecl.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t};\n});\n"]},"metadata":{},"sourceType":"module"}