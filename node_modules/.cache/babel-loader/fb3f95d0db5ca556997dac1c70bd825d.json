{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"chai\").assert,\n    toShortString = require(\"../../lib/to-short-string\");\n\ndescribe(\"lib/to-short-string\", function () {\n  it(\"Should return input string\", function () {\n    assert.equal(toShortString(\"foo\"), \"foo\");\n  });\n  it(\"Should coerce numbers\", function () {\n    assert.equal(toShortString(12), \"12\");\n  });\n  it(\"Should coerce booleans\", function () {\n    assert.equal(toShortString(true), \"true\");\n  });\n  it(\"Should coerce string objects\", function () {\n    assert.equal(toShortString(new String(\"bar\")), \"bar\");\n  });\n  it(\"Should coerce objects\", function () {\n    assert.equal(toShortString({\n      toString: function () {\n        return \"Some object\";\n      }\n    }), \"Some object\");\n  });\n  it(\"Should coerce null\", function () {\n    assert.equal(toShortString(null), \"null\");\n  });\n  it(\"Should coerce undefined\", function () {\n    assert.equal(toShortString(undefined), \"undefined\");\n  });\n\n  if (typeof Symbol === \"function\") {\n    it(\"Should coerce symbols\", function () {\n      // eslint-disable-next-line no-undef\n      assert.equal(toShortString(Symbol()), \"Symbol()\");\n    });\n  }\n\n  it(\"Should return replacement non coercible values\", function () {\n    assert.equal(toShortString({\n      toString: null\n    }), \"<Non-coercible to string value>\");\n  });\n  it(\"Should replace new line characters\", function () {\n    assert.equal(toShortString(\"foo\\n\\r\\u2028\\u2029bar\"), \"foo\\\\n\\\\r\\\\u2028\\\\u2029bar\");\n  });\n  it(\"Should truncate long string\", function () {\n    var str = Math.random().toString(36);\n\n    while (str.length < 200) str += str;\n\n    assert.equal(toShortString(str).length, 100);\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type/test/lib/to-short-string.js"],"names":["assert","require","toShortString","describe","it","equal","String","toString","undefined","Symbol","str","Math","random","length"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAUC,OAAO,CAAC,MAAD,CAAP,CAAgBD,MAApC;AAAA,IACIE,aAAa,GAAGD,OAAO,CAAC,2BAAD,CAD3B;;AAGAE,QAAQ,CAAC,qBAAD,EAAwB,YAAY;AAC3CC,EAAAA,EAAE,CAAC,4BAAD,EAA+B,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,aAAa,CAAC,KAAD,CAA1B,EAAmC,KAAnC;AAA4C,GAAzF,CAAF;AACAE,EAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,aAAa,CAAC,EAAD,CAA1B,EAAgC,IAAhC;AAAwC,GAAhF,CAAF;AACAE,EAAAA,EAAE,CAAC,wBAAD,EAA2B,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,aAAa,CAAC,IAAD,CAA1B,EAAkC,MAAlC;AAA4C,GAArF,CAAF;AACAE,EAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAY;AAC9CJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,aAAa,CAAC,IAAII,MAAJ,CAAW,KAAX,CAAD,CAA1B,EAA+C,KAA/C;AACA,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAY;AACvCJ,IAAAA,MAAM,CAACK,KAAP,CACCH,aAAa,CAAC;AAAEK,MAAAA,QAAQ,EAAE,YAAY;AAAE,eAAO,aAAP;AAAuB;AAAjD,KAAD,CADd,EACqE,aADrE;AAGA,GAJC,CAAF;AAKAH,EAAAA,EAAE,CAAC,oBAAD,EAAuB,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,aAAa,CAAC,IAAD,CAA1B,EAAkC,MAAlC;AAA4C,GAAjF,CAAF;AACAE,EAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAY;AACzCJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,aAAa,CAACM,SAAD,CAA1B,EAAuC,WAAvC;AACA,GAFC,CAAF;;AAIA,MAAI,OAAOC,MAAP,KAAkB,UAAtB,EAAkC;AACjCL,IAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAY;AACvC;AACAJ,MAAAA,MAAM,CAACK,KAAP,CAAaH,aAAa,CAACO,MAAM,EAAP,CAA1B,EAAsC,UAAtC;AACA,KAHC,CAAF;AAIA;;AACDL,EAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAY;AAChEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,aAAa,CAAC;AAAEK,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAA1B,EAAgD,iCAAhD;AACA,GAFC,CAAF;AAIAH,EAAAA,EAAE,CAAC,oCAAD,EAAuC,YAAY;AACpDJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,aAAa,CAAC,wBAAD,CAA1B,EAAsD,4BAAtD;AACA,GAFC,CAAF;AAGAE,EAAAA,EAAE,CAAC,6BAAD,EAAgC,YAAY;AAC7C,QAAIM,GAAG,GAAGC,IAAI,CAACC,MAAL,GAAcL,QAAd,CAAuB,EAAvB,CAAV;;AACA,WAAOG,GAAG,CAACG,MAAJ,GAAa,GAApB,EAAyBH,GAAG,IAAIA,GAAP;;AACzBV,IAAAA,MAAM,CAACK,KAAP,CAAaH,aAAa,CAACQ,GAAD,CAAb,CAAmBG,MAAhC,EAAwC,GAAxC;AACA,GAJC,CAAF;AAKA,CAnCO,CAAR","sourcesContent":["\"use strict\";\n\nvar assert        = require(\"chai\").assert\n  , toShortString = require(\"../../lib/to-short-string\");\n\ndescribe(\"lib/to-short-string\", function () {\n\tit(\"Should return input string\", function () { assert.equal(toShortString(\"foo\"), \"foo\"); });\n\tit(\"Should coerce numbers\", function () { assert.equal(toShortString(12), \"12\"); });\n\tit(\"Should coerce booleans\", function () { assert.equal(toShortString(true), \"true\"); });\n\tit(\"Should coerce string objects\", function () {\n\t\tassert.equal(toShortString(new String(\"bar\")), \"bar\");\n\t});\n\tit(\"Should coerce objects\", function () {\n\t\tassert.equal(\n\t\t\ttoShortString({ toString: function () { return \"Some object\"; } }), \"Some object\"\n\t\t);\n\t});\n\tit(\"Should coerce null\", function () { assert.equal(toShortString(null), \"null\"); });\n\tit(\"Should coerce undefined\", function () {\n\t\tassert.equal(toShortString(undefined), \"undefined\");\n\t});\n\n\tif (typeof Symbol === \"function\") {\n\t\tit(\"Should coerce symbols\", function () {\n\t\t\t// eslint-disable-next-line no-undef\n\t\t\tassert.equal(toShortString(Symbol()), \"Symbol()\");\n\t\t});\n\t}\n\tit(\"Should return replacement non coercible values\", function () {\n\t\tassert.equal(toShortString({ toString: null }), \"<Non-coercible to string value>\");\n\t});\n\n\tit(\"Should replace new line characters\", function () {\n\t\tassert.equal(toShortString(\"foo\\n\\r\\u2028\\u2029bar\"), \"foo\\\\n\\\\r\\\\u2028\\\\u2029bar\");\n\t});\n\tit(\"Should truncate long string\", function () {\n\t\tvar str = Math.random().toString(36);\n\t\twhile (str.length < 200) str += str;\n\t\tassert.equal(toShortString(str).length, 100);\n\t});\n});\n"]},"metadata":{},"sourceType":"script"}