{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n\nconst _require = require('workbox-build'),\n      generateSWString = _require.generateSWString;\n\nconst path = require('path');\n\nconst convertStringToAsset = require('./lib/convert-string-to-asset');\n\nconst getDefaultConfig = require('./lib/get-default-config');\n\nconst formatManifestFilename = require('./lib/format-manifest-filename');\n\nconst getAssetHash = require('./lib/get-asset-hash');\n\nconst getManifestEntriesFromCompilation = require('./lib/get-manifest-entries-from-compilation');\n\nconst getWorkboxSWImports = require('./lib/get-workbox-sw-imports');\n\nconst relativeToOutputPath = require('./lib/relative-to-output-path');\n\nconst sanitizeConfig = require('./lib/sanitize-config');\n\nconst stringifyManifest = require('./lib/stringify-manifest');\n\nconst warnAboutConfig = require('./lib/warn-about-config');\n/**\n * This class supports creating a new, ready-to-use service worker file as\n * part of the webpack compilation process.\n *\n * Use an instance of `GenerateSW` in the\n * [`plugins` array](https://webpack.js.org/concepts/plugins/#usage) of a\n * webpack config.\n *\n * @module workbox-webpack-plugin\n */\n\n\nclass GenerateSW {\n  /**\n   * Creates an instance of GenerateSW.\n   *\n   * @param {Object} [config] See the\n   * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin#configuration)\n   * for all supported options and defaults.\n   */\n  constructor(config = {}) {\n    this.config = Object.assign(getDefaultConfig(), {\n      // Hardcode this default filename, since we don't have swSrc to read from\n      // (like we do in InjectManifest).\n      swDest: 'service-worker.js'\n    }, config);\n  }\n  /**\n   * @param {Object} compilation The webpack compilation.\n   * @private\n   */\n\n\n  handleEmit(compilation) {\n    var _this = this;\n\n    return (0, _asyncToGenerator2.default)(function* () {\n      const configWarning = warnAboutConfig(_this.config);\n\n      if (configWarning) {\n        compilation.warnings.push(configWarning);\n      }\n\n      const workboxSWImports = yield getWorkboxSWImports(compilation, _this.config);\n      const entries = getManifestEntriesFromCompilation(compilation, _this.config);\n      const importScriptsArray = [].concat(_this.config.importScripts);\n      const manifestString = stringifyManifest(entries);\n      const manifestAsset = convertStringToAsset(manifestString);\n      const manifestHash = getAssetHash(manifestAsset);\n      const manifestFilename = formatManifestFilename(_this.config.precacheManifestFilename, manifestHash);\n      const pathToManifestFile = relativeToOutputPath(compilation, path.join(_this.config.importsDirectory, manifestFilename));\n      compilation.assets[pathToManifestFile] = manifestAsset;\n      importScriptsArray.push((compilation.options.output.publicPath || '') + pathToManifestFile.split(path.sep).join('/')); // workboxSWImports might be null if importWorkboxFrom is 'disabled'.\n\n      let workboxSWImport;\n\n      if (workboxSWImports) {\n        if (workboxSWImports.length === 1) {\n          // When importWorkboxFrom is 'cdn' or 'local', or a chunk name\n          // that only contains one JavaScript asset, then this will be a one\n          // element array, containing just the Workbox SW code.\n          workboxSWImport = workboxSWImports[0];\n        } else {\n          // If importWorkboxFrom was a chunk name that contained multiple\n          // JavaScript assets, then we don't know which contains the Workbox SW\n          // code. Just import them first as part of the \"main\" importScripts().\n          importScriptsArray.unshift(...workboxSWImports);\n        }\n      }\n\n      const sanitizedConfig = sanitizeConfig.forGenerateSWString(_this.config); // If globPatterns isn't explicitly set, then default to [], instead of\n      // the workbox-build.generateSWString() default.\n\n      sanitizedConfig.globPatterns = sanitizedConfig.globPatterns || [];\n      sanitizedConfig.importScripts = importScriptsArray;\n      sanitizedConfig.workboxSWImport = workboxSWImport;\n\n      const _ref = yield generateSWString(sanitizedConfig),\n            swString = _ref.swString,\n            warnings = _ref.warnings;\n\n      compilation.warnings = compilation.warnings.concat(warnings || []);\n      const relSwDest = relativeToOutputPath(compilation, _this.config.swDest);\n      compilation.assets[relSwDest] = convertStringToAsset(swString);\n    })();\n  }\n  /**\n   * @param {Object} [compiler] default compiler object passed from webpack\n   *\n   * @private\n   */\n\n\n  apply(compiler) {\n    if ('hooks' in compiler) {\n      // We're in webpack 4+.\n      compiler.hooks.emit.tapPromise(this.constructor.name, compilation => this.handleEmit(compilation));\n    } else {\n      // We're in webpack 2 or 3.\n      compiler.plugin('emit', (compilation, callback) => {\n        this.handleEmit(compilation).then(callback).catch(callback);\n      });\n    }\n  }\n\n}\n\nmodule.exports = GenerateSW;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-webpack-plugin/build/generate-sw.js"],"names":["_interopRequireDefault","require","_asyncToGenerator2","_require","generateSWString","path","convertStringToAsset","getDefaultConfig","formatManifestFilename","getAssetHash","getManifestEntriesFromCompilation","getWorkboxSWImports","relativeToOutputPath","sanitizeConfig","stringifyManifest","warnAboutConfig","GenerateSW","constructor","config","Object","assign","swDest","handleEmit","compilation","_this","default","configWarning","warnings","push","workboxSWImports","entries","importScriptsArray","concat","importScripts","manifestString","manifestAsset","manifestHash","manifestFilename","precacheManifestFilename","pathToManifestFile","join","importsDirectory","assets","options","output","publicPath","split","sep","workboxSWImport","length","unshift","sanitizedConfig","forGenerateSWString","globPatterns","_ref","swString","relSwDest","apply","compiler","hooks","emit","tapPromise","name","plugin","callback","then","catch","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst _require = require('workbox-build'),\n      generateSWString = _require.generateSWString;\n\nconst path = require('path');\n\nconst convertStringToAsset = require('./lib/convert-string-to-asset');\n\nconst getDefaultConfig = require('./lib/get-default-config');\n\nconst formatManifestFilename = require('./lib/format-manifest-filename');\n\nconst getAssetHash = require('./lib/get-asset-hash');\n\nconst getManifestEntriesFromCompilation = require('./lib/get-manifest-entries-from-compilation');\n\nconst getWorkboxSWImports = require('./lib/get-workbox-sw-imports');\n\nconst relativeToOutputPath = require('./lib/relative-to-output-path');\n\nconst sanitizeConfig = require('./lib/sanitize-config');\n\nconst stringifyManifest = require('./lib/stringify-manifest');\n\nconst warnAboutConfig = require('./lib/warn-about-config');\n/**\n * This class supports creating a new, ready-to-use service worker file as\n * part of the webpack compilation process.\n *\n * Use an instance of `GenerateSW` in the\n * [`plugins` array](https://webpack.js.org/concepts/plugins/#usage) of a\n * webpack config.\n *\n * @module workbox-webpack-plugin\n */\n\n\nclass GenerateSW {\n  /**\n   * Creates an instance of GenerateSW.\n   *\n   * @param {Object} [config] See the\n   * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin#configuration)\n   * for all supported options and defaults.\n   */\n  constructor(config = {}) {\n    this.config = Object.assign(getDefaultConfig(), {\n      // Hardcode this default filename, since we don't have swSrc to read from\n      // (like we do in InjectManifest).\n      swDest: 'service-worker.js'\n    }, config);\n  }\n  /**\n   * @param {Object} compilation The webpack compilation.\n   * @private\n   */\n\n\n  handleEmit(compilation) {\n    var _this = this;\n\n    return (0, _asyncToGenerator2.default)(function* () {\n      const configWarning = warnAboutConfig(_this.config);\n\n      if (configWarning) {\n        compilation.warnings.push(configWarning);\n      }\n\n      const workboxSWImports = yield getWorkboxSWImports(compilation, _this.config);\n      const entries = getManifestEntriesFromCompilation(compilation, _this.config);\n      const importScriptsArray = [].concat(_this.config.importScripts);\n      const manifestString = stringifyManifest(entries);\n      const manifestAsset = convertStringToAsset(manifestString);\n      const manifestHash = getAssetHash(manifestAsset);\n      const manifestFilename = formatManifestFilename(_this.config.precacheManifestFilename, manifestHash);\n      const pathToManifestFile = relativeToOutputPath(compilation, path.join(_this.config.importsDirectory, manifestFilename));\n      compilation.assets[pathToManifestFile] = manifestAsset;\n      importScriptsArray.push((compilation.options.output.publicPath || '') + pathToManifestFile.split(path.sep).join('/')); // workboxSWImports might be null if importWorkboxFrom is 'disabled'.\n\n      let workboxSWImport;\n\n      if (workboxSWImports) {\n        if (workboxSWImports.length === 1) {\n          // When importWorkboxFrom is 'cdn' or 'local', or a chunk name\n          // that only contains one JavaScript asset, then this will be a one\n          // element array, containing just the Workbox SW code.\n          workboxSWImport = workboxSWImports[0];\n        } else {\n          // If importWorkboxFrom was a chunk name that contained multiple\n          // JavaScript assets, then we don't know which contains the Workbox SW\n          // code. Just import them first as part of the \"main\" importScripts().\n          importScriptsArray.unshift(...workboxSWImports);\n        }\n      }\n\n      const sanitizedConfig = sanitizeConfig.forGenerateSWString(_this.config); // If globPatterns isn't explicitly set, then default to [], instead of\n      // the workbox-build.generateSWString() default.\n\n      sanitizedConfig.globPatterns = sanitizedConfig.globPatterns || [];\n      sanitizedConfig.importScripts = importScriptsArray;\n      sanitizedConfig.workboxSWImport = workboxSWImport;\n\n      const _ref = yield generateSWString(sanitizedConfig),\n            swString = _ref.swString,\n            warnings = _ref.warnings;\n\n      compilation.warnings = compilation.warnings.concat(warnings || []);\n      const relSwDest = relativeToOutputPath(compilation, _this.config.swDest);\n      compilation.assets[relSwDest] = convertStringToAsset(swString);\n    })();\n  }\n  /**\n   * @param {Object} [compiler] default compiler object passed from webpack\n   *\n   * @private\n   */\n\n\n  apply(compiler) {\n    if ('hooks' in compiler) {\n      // We're in webpack 4+.\n      compiler.hooks.emit.tapPromise(this.constructor.name, compilation => this.handleEmit(compilation));\n    } else {\n      // We're in webpack 2 or 3.\n      compiler.plugin('emit', (compilation, callback) => {\n        this.handleEmit(compilation).then(callback).catch(callback);\n      });\n    }\n  }\n\n}\n\nmodule.exports = GenerateSW;"]},"metadata":{},"sourceType":"script"}