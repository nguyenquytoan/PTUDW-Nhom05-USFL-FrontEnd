{"ast":null,"code":"var everyValuesPair = require('./every-values-pair');\n\nvar hasInherit = require('./has-inherit');\n\nvar populateComponents = require('./populate-components');\n\nvar compactable = require('../compactable');\n\nvar deepClone = require('../clone').deep;\n\nvar restoreWithComponents = require('../restore-with-components');\n\nvar restoreFromOptimizing = require('../../restore-from-optimizing');\n\nvar wrapSingle = require('../../wrap-for-optimizing').single;\n\nvar serializeBody = require('../../../writer/one-time').body;\n\nvar Token = require('../../../tokenizer/token');\n\nfunction mergeIntoShorthands(properties, validator) {\n  var candidates = {};\n  var descriptor;\n  var componentOf;\n  var property;\n  var i, l;\n  var j, m; // there is no shorthand property made up of less than 3 longhands\n\n  if (properties.length < 3) {\n    return;\n  }\n\n  for (i = 0, l = properties.length; i < l; i++) {\n    property = properties[i];\n    descriptor = compactable[property.name];\n\n    if (property.unused) {\n      continue;\n    }\n\n    if (property.hack) {\n      continue;\n    }\n\n    if (property.block) {\n      continue;\n    }\n\n    invalidateOrCompact(properties, i, candidates, validator);\n\n    if (descriptor && descriptor.componentOf) {\n      for (j = 0, m = descriptor.componentOf.length; j < m; j++) {\n        componentOf = descriptor.componentOf[j];\n        candidates[componentOf] = candidates[componentOf] || {};\n        candidates[componentOf][property.name] = property;\n      }\n    }\n  }\n\n  invalidateOrCompact(properties, i, candidates, validator);\n}\n\nfunction invalidateOrCompact(properties, position, candidates, validator) {\n  var invalidatedBy = properties[position];\n  var shorthandName;\n  var shorthandDescriptor;\n  var candidateComponents;\n\n  for (shorthandName in candidates) {\n    if (undefined !== invalidatedBy && shorthandName == invalidatedBy.name) {\n      continue;\n    }\n\n    shorthandDescriptor = compactable[shorthandName];\n    candidateComponents = candidates[shorthandName];\n\n    if (invalidatedBy && invalidates(candidates, shorthandName, invalidatedBy)) {\n      delete candidates[shorthandName];\n      continue;\n    }\n\n    if (shorthandDescriptor.components.length > Object.keys(candidateComponents).length) {\n      continue;\n    }\n\n    if (mixedImportance(candidateComponents)) {\n      continue;\n    }\n\n    if (!overridable(candidateComponents, shorthandName, validator)) {\n      continue;\n    }\n\n    if (!mergeable(candidateComponents)) {\n      continue;\n    }\n\n    if (mixedInherit(candidateComponents)) {\n      replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator);\n    } else {\n      replaceWithShorthand(properties, candidateComponents, shorthandName, validator);\n    }\n  }\n}\n\nfunction invalidates(candidates, shorthandName, invalidatedBy) {\n  var shorthandDescriptor = compactable[shorthandName];\n  var invalidatedByDescriptor = compactable[invalidatedBy.name];\n  var componentName;\n\n  if ('overridesShorthands' in shorthandDescriptor && shorthandDescriptor.overridesShorthands.indexOf(invalidatedBy.name) > -1) {\n    return true;\n  }\n\n  if (invalidatedByDescriptor && 'componentOf' in invalidatedByDescriptor) {\n    for (componentName in candidates[shorthandName]) {\n      if (invalidatedByDescriptor.componentOf.indexOf(componentName) > -1) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction mixedImportance(components) {\n  var important;\n  var componentName;\n\n  for (componentName in components) {\n    if (undefined !== important && components[componentName].important != important) {\n      return true;\n    }\n\n    important = components[componentName].important;\n  }\n\n  return false;\n}\n\nfunction overridable(components, shorthandName, validator) {\n  var descriptor = compactable[shorthandName];\n  var newValuePlaceholder = [Token.PROPERTY, [Token.PROPERTY_NAME, shorthandName], [Token.PROPERTY_VALUE, descriptor.defaultValue]];\n  var newProperty = wrapSingle(newValuePlaceholder);\n  var component;\n  var mayOverride;\n  var i, l;\n  populateComponents([newProperty], validator, []);\n\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n    mayOverride = compactable[component.name].canOverride;\n\n    if (!everyValuesPair(mayOverride.bind(null, validator), newProperty.components[i], component)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction mergeable(components) {\n  var lastCount = null;\n  var currentCount;\n  var componentName;\n  var component;\n  var descriptor;\n  var values;\n\n  for (componentName in components) {\n    component = components[componentName];\n    descriptor = compactable[componentName];\n\n    if (!('restore' in descriptor)) {\n      continue;\n    }\n\n    restoreFromOptimizing([component.all[component.position]], restoreWithComponents);\n    values = descriptor.restore(component, compactable);\n    currentCount = values.length;\n\n    if (lastCount !== null && currentCount !== lastCount) {\n      return false;\n    }\n\n    lastCount = currentCount;\n  }\n\n  return true;\n}\n\nfunction mixedInherit(components) {\n  var componentName;\n  var lastValue = null;\n  var currentValue;\n\n  for (componentName in components) {\n    currentValue = hasInherit(components[componentName]);\n\n    if (lastValue !== null && lastValue !== currentValue) {\n      return true;\n    }\n\n    lastValue = currentValue;\n  }\n\n  return false;\n}\n\nfunction replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator) {\n  var viaLonghands = buildSequenceWithInheritLonghands(candidateComponents, shorthandName, validator);\n  var viaShorthand = buildSequenceWithInheritShorthand(candidateComponents, shorthandName, validator);\n  var longhandTokensSequence = viaLonghands[0];\n  var shorthandTokensSequence = viaShorthand[0];\n  var isLonghandsShorter = serializeBody(longhandTokensSequence).length < serializeBody(shorthandTokensSequence).length;\n  var newTokensSequence = isLonghandsShorter ? longhandTokensSequence : shorthandTokensSequence;\n  var newProperty = isLonghandsShorter ? viaLonghands[1] : viaShorthand[1];\n  var newComponents = isLonghandsShorter ? viaLonghands[2] : viaShorthand[2];\n  var all = candidateComponents[Object.keys(candidateComponents)[0]].all;\n  var componentName;\n  var oldComponent;\n  var newComponent;\n  var newToken;\n  newProperty.position = all.length;\n  newProperty.shorthand = true;\n  newProperty.dirty = true;\n  newProperty.all = all;\n  newProperty.all.push(newTokensSequence[0]);\n  properties.push(newProperty);\n\n  for (componentName in candidateComponents) {\n    oldComponent = candidateComponents[componentName];\n    oldComponent.unused = true;\n\n    if (oldComponent.name in newComponents) {\n      newComponent = newComponents[oldComponent.name];\n      newToken = findTokenIn(newTokensSequence, componentName);\n      newComponent.position = all.length;\n      newComponent.all = all;\n      newComponent.all.push(newToken);\n      properties.push(newComponent);\n    }\n  }\n}\n\nfunction buildSequenceWithInheritLonghands(components, shorthandName, validator) {\n  var tokensSequence = [];\n  var inheritComponents = {};\n  var nonInheritComponents = {};\n  var descriptor = compactable[shorthandName];\n  var shorthandToken = [Token.PROPERTY, [Token.PROPERTY_NAME, shorthandName], [Token.PROPERTY_VALUE, descriptor.defaultValue]];\n  var newProperty = wrapSingle(shorthandToken);\n  var component;\n  var longhandToken;\n  var newComponent;\n  var nameMetadata;\n  var i, l;\n  populateComponents([newProperty], validator, []);\n\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n\n    if (hasInherit(component)) {\n      longhandToken = component.all[component.position].slice(0, 2);\n      Array.prototype.push.apply(longhandToken, component.value);\n      tokensSequence.push(longhandToken);\n      newComponent = deepClone(component);\n      newComponent.value = inferComponentValue(components, newComponent.name);\n      newProperty.components[i] = newComponent;\n      inheritComponents[component.name] = deepClone(component);\n    } else {\n      newComponent = deepClone(component);\n      newComponent.all = component.all;\n      newProperty.components[i] = newComponent;\n      nonInheritComponents[component.name] = component;\n    }\n  }\n\n  nameMetadata = joinMetadata(nonInheritComponents, 1);\n  shorthandToken[1].push(nameMetadata);\n  restoreFromOptimizing([newProperty], restoreWithComponents);\n  shorthandToken = shorthandToken.slice(0, 2);\n  Array.prototype.push.apply(shorthandToken, newProperty.value);\n  tokensSequence.unshift(shorthandToken);\n  return [tokensSequence, newProperty, inheritComponents];\n}\n\nfunction inferComponentValue(components, propertyName) {\n  var descriptor = compactable[propertyName];\n\n  if ('oppositeTo' in descriptor) {\n    return components[descriptor.oppositeTo].value;\n  } else {\n    return [[Token.PROPERTY_VALUE, descriptor.defaultValue]];\n  }\n}\n\nfunction joinMetadata(components, at) {\n  var metadata = [];\n  var component;\n  var originalValue;\n  var componentMetadata;\n  var componentName;\n\n  for (componentName in components) {\n    component = components[componentName];\n    originalValue = component.all[component.position];\n    componentMetadata = originalValue[at][originalValue[at].length - 1];\n    Array.prototype.push.apply(metadata, componentMetadata);\n  }\n\n  return metadata.sort(metadataSorter);\n}\n\nfunction metadataSorter(metadata1, metadata2) {\n  var line1 = metadata1[0];\n  var line2 = metadata2[0];\n  var column1 = metadata1[1];\n  var column2 = metadata2[1];\n\n  if (line1 < line2) {\n    return -1;\n  } else if (line1 === line2) {\n    return column1 < column2 ? -1 : 1;\n  } else {\n    return 1;\n  }\n}\n\nfunction buildSequenceWithInheritShorthand(components, shorthandName, validator) {\n  var tokensSequence = [];\n  var inheritComponents = {};\n  var nonInheritComponents = {};\n  var descriptor = compactable[shorthandName];\n  var shorthandToken = [Token.PROPERTY, [Token.PROPERTY_NAME, shorthandName], [Token.PROPERTY_VALUE, 'inherit']];\n  var newProperty = wrapSingle(shorthandToken);\n  var component;\n  var longhandToken;\n  var nameMetadata;\n  var valueMetadata;\n  var i, l;\n  populateComponents([newProperty], validator, []);\n\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n\n    if (hasInherit(component)) {\n      inheritComponents[component.name] = component;\n    } else {\n      longhandToken = component.all[component.position].slice(0, 2);\n      Array.prototype.push.apply(longhandToken, component.value);\n      tokensSequence.push(longhandToken);\n      nonInheritComponents[component.name] = deepClone(component);\n    }\n  }\n\n  nameMetadata = joinMetadata(inheritComponents, 1);\n  shorthandToken[1].push(nameMetadata);\n  valueMetadata = joinMetadata(inheritComponents, 2);\n  shorthandToken[2].push(valueMetadata);\n  tokensSequence.unshift(shorthandToken);\n  return [tokensSequence, newProperty, nonInheritComponents];\n}\n\nfunction findTokenIn(tokens, componentName) {\n  var i, l;\n\n  for (i = 0, l = tokens.length; i < l; i++) {\n    if (tokens[i][1][1] == componentName) {\n      return tokens[i];\n    }\n  }\n}\n\nfunction replaceWithShorthand(properties, candidateComponents, shorthandName, validator) {\n  var descriptor = compactable[shorthandName];\n  var nameMetadata;\n  var valueMetadata;\n  var newValuePlaceholder = [Token.PROPERTY, [Token.PROPERTY_NAME, shorthandName], [Token.PROPERTY_VALUE, descriptor.defaultValue]];\n  var all;\n  var newProperty = wrapSingle(newValuePlaceholder);\n  newProperty.shorthand = true;\n  newProperty.dirty = true;\n  populateComponents([newProperty], validator, []);\n\n  for (var i = 0, l = descriptor.components.length; i < l; i++) {\n    var component = candidateComponents[descriptor.components[i]];\n    newProperty.components[i] = deepClone(component);\n    newProperty.important = component.important;\n    all = component.all;\n  }\n\n  for (var componentName in candidateComponents) {\n    candidateComponents[componentName].unused = true;\n  }\n\n  nameMetadata = joinMetadata(candidateComponents, 1);\n  newValuePlaceholder[1].push(nameMetadata);\n  valueMetadata = joinMetadata(candidateComponents, 2);\n  newValuePlaceholder[2].push(valueMetadata);\n  newProperty.position = all.length;\n  newProperty.all = all;\n  newProperty.all.push(newValuePlaceholder);\n  properties.push(newProperty);\n}\n\nmodule.exports = mergeIntoShorthands;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/clean-css/lib/optimizer/level-2/properties/merge-into-shorthands.js"],"names":["everyValuesPair","require","hasInherit","populateComponents","compactable","deepClone","deep","restoreWithComponents","restoreFromOptimizing","wrapSingle","single","serializeBody","body","Token","mergeIntoShorthands","properties","validator","candidates","descriptor","componentOf","property","i","l","j","m","length","name","unused","hack","block","invalidateOrCompact","position","invalidatedBy","shorthandName","shorthandDescriptor","candidateComponents","undefined","invalidates","components","Object","keys","mixedImportance","overridable","mergeable","mixedInherit","replaceWithInheritBestFit","replaceWithShorthand","invalidatedByDescriptor","componentName","overridesShorthands","indexOf","important","newValuePlaceholder","PROPERTY","PROPERTY_NAME","PROPERTY_VALUE","defaultValue","newProperty","component","mayOverride","canOverride","bind","lastCount","currentCount","values","all","restore","lastValue","currentValue","viaLonghands","buildSequenceWithInheritLonghands","viaShorthand","buildSequenceWithInheritShorthand","longhandTokensSequence","shorthandTokensSequence","isLonghandsShorter","newTokensSequence","newComponents","oldComponent","newComponent","newToken","shorthand","dirty","push","findTokenIn","tokensSequence","inheritComponents","nonInheritComponents","shorthandToken","longhandToken","nameMetadata","slice","Array","prototype","apply","value","inferComponentValue","joinMetadata","unshift","propertyName","oppositeTo","at","metadata","originalValue","componentMetadata","sort","metadataSorter","metadata1","metadata2","line1","line2","column1","column2","valueMetadata","tokens","module","exports"],"mappings":"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","sourcesContent":["var everyValuesPair = require('./every-values-pair');\nvar hasInherit = require('./has-inherit');\nvar populateComponents = require('./populate-components');\n\nvar compactable = require('../compactable');\nvar deepClone = require('../clone').deep;\nvar restoreWithComponents = require('../restore-with-components');\n\nvar restoreFromOptimizing = require('../../restore-from-optimizing');\nvar wrapSingle = require('../../wrap-for-optimizing').single;\n\nvar serializeBody = require('../../../writer/one-time').body;\nvar Token = require('../../../tokenizer/token');\n\nfunction mergeIntoShorthands(properties, validator) {\n  var candidates = {};\n  var descriptor;\n  var componentOf;\n  var property;\n  var i, l;\n  var j, m;\n\n  // there is no shorthand property made up of less than 3 longhands\n  if (properties.length < 3) {\n    return;\n  }\n\n  for (i = 0, l = properties.length; i < l; i++) {\n    property = properties[i];\n    descriptor = compactable[property.name];\n\n    if (property.unused) {\n      continue;\n    }\n\n    if (property.hack) {\n      continue;\n    }\n\n    if (property.block) {\n      continue;\n    }\n\n    invalidateOrCompact(properties, i, candidates, validator);\n\n    if (descriptor && descriptor.componentOf) {\n      for (j = 0, m = descriptor.componentOf.length; j < m; j++) {\n        componentOf = descriptor.componentOf[j];\n\n        candidates[componentOf] = candidates[componentOf] || {};\n        candidates[componentOf][property.name] = property;\n      }\n    }\n  }\n\n  invalidateOrCompact(properties, i, candidates, validator);\n}\n\nfunction invalidateOrCompact(properties, position, candidates, validator) {\n  var invalidatedBy = properties[position];\n  var shorthandName;\n  var shorthandDescriptor;\n  var candidateComponents;\n\n  for (shorthandName in candidates) {\n    if (undefined !== invalidatedBy && shorthandName == invalidatedBy.name) {\n      continue;\n    }\n\n    shorthandDescriptor = compactable[shorthandName];\n    candidateComponents = candidates[shorthandName];\n    if (invalidatedBy && invalidates(candidates, shorthandName, invalidatedBy)) {\n      delete candidates[shorthandName];\n      continue;\n    }\n\n    if (shorthandDescriptor.components.length > Object.keys(candidateComponents).length) {\n      continue;\n    }\n\n    if (mixedImportance(candidateComponents)) {\n      continue;\n    }\n\n    if (!overridable(candidateComponents, shorthandName, validator)) {\n      continue;\n    }\n\n    if (!mergeable(candidateComponents)) {\n      continue;\n    }\n\n    if (mixedInherit(candidateComponents)) {\n      replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator);\n    } else {\n      replaceWithShorthand(properties, candidateComponents, shorthandName, validator);\n    }\n  }\n}\n\nfunction invalidates(candidates, shorthandName, invalidatedBy) {\n  var shorthandDescriptor = compactable[shorthandName];\n  var invalidatedByDescriptor = compactable[invalidatedBy.name];\n  var componentName;\n\n  if ('overridesShorthands' in shorthandDescriptor && shorthandDescriptor.overridesShorthands.indexOf(invalidatedBy.name) > -1) {\n    return true;\n  }\n\n  if (invalidatedByDescriptor && 'componentOf' in invalidatedByDescriptor) {\n    for (componentName in candidates[shorthandName]) {\n      if (invalidatedByDescriptor.componentOf.indexOf(componentName) > -1) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction mixedImportance(components) {\n  var important;\n  var componentName;\n\n  for (componentName in components) {\n    if (undefined !== important && components[componentName].important != important) {\n      return true;\n    }\n\n    important = components[componentName].important;\n  }\n\n  return false;\n}\n\nfunction overridable(components, shorthandName, validator) {\n  var descriptor = compactable[shorthandName];\n  var newValuePlaceholder = [\n    Token.PROPERTY,\n    [Token.PROPERTY_NAME, shorthandName],\n    [Token.PROPERTY_VALUE, descriptor.defaultValue]\n  ];\n  var newProperty = wrapSingle(newValuePlaceholder);\n  var component;\n  var mayOverride;\n  var i, l;\n\n  populateComponents([newProperty], validator, []);\n\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n    mayOverride = compactable[component.name].canOverride;\n\n    if (!everyValuesPair(mayOverride.bind(null, validator), newProperty.components[i], component)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction mergeable(components) {\n  var lastCount = null;\n  var currentCount;\n  var componentName;\n  var component;\n  var descriptor;\n  var values;\n\n  for (componentName in components) {\n    component = components[componentName];\n    descriptor = compactable[componentName];\n\n    if (!('restore' in descriptor)) {\n      continue;\n    }\n\n    restoreFromOptimizing([component.all[component.position]], restoreWithComponents);\n    values = descriptor.restore(component, compactable);\n\n    currentCount = values.length;\n\n    if (lastCount !== null && currentCount !== lastCount) {\n      return false;\n    }\n\n    lastCount = currentCount;\n  }\n\n  return true;\n}\n\nfunction mixedInherit(components) {\n  var componentName;\n  var lastValue = null;\n  var currentValue;\n\n  for (componentName in components) {\n    currentValue = hasInherit(components[componentName]);\n\n    if (lastValue !== null && lastValue !== currentValue) {\n      return true;\n    }\n\n    lastValue = currentValue;\n  }\n\n  return false;\n}\n\nfunction replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator) {\n  var viaLonghands = buildSequenceWithInheritLonghands(candidateComponents, shorthandName, validator);\n  var viaShorthand = buildSequenceWithInheritShorthand(candidateComponents, shorthandName, validator);\n  var longhandTokensSequence = viaLonghands[0];\n  var shorthandTokensSequence = viaShorthand[0];\n  var isLonghandsShorter = serializeBody(longhandTokensSequence).length < serializeBody(shorthandTokensSequence).length;\n  var newTokensSequence = isLonghandsShorter ? longhandTokensSequence : shorthandTokensSequence;\n  var newProperty = isLonghandsShorter ? viaLonghands[1] : viaShorthand[1];\n  var newComponents = isLonghandsShorter ? viaLonghands[2] : viaShorthand[2];\n  var all = candidateComponents[Object.keys(candidateComponents)[0]].all;\n  var componentName;\n  var oldComponent;\n  var newComponent;\n  var newToken;\n\n  newProperty.position = all.length;\n  newProperty.shorthand = true;\n  newProperty.dirty = true;\n  newProperty.all = all;\n  newProperty.all.push(newTokensSequence[0]);\n\n  properties.push(newProperty);\n\n  for (componentName in candidateComponents) {\n    oldComponent = candidateComponents[componentName];\n    oldComponent.unused = true;\n\n    if (oldComponent.name in newComponents) {\n      newComponent = newComponents[oldComponent.name];\n      newToken = findTokenIn(newTokensSequence, componentName);\n\n      newComponent.position = all.length;\n      newComponent.all = all;\n      newComponent.all.push(newToken);\n\n      properties.push(newComponent);\n    }\n  }\n}\n\nfunction buildSequenceWithInheritLonghands(components, shorthandName, validator) {\n  var tokensSequence = [];\n  var inheritComponents = {};\n  var nonInheritComponents = {};\n  var descriptor = compactable[shorthandName];\n  var shorthandToken = [\n    Token.PROPERTY,\n    [Token.PROPERTY_NAME, shorthandName],\n    [Token.PROPERTY_VALUE, descriptor.defaultValue]\n  ];\n  var newProperty = wrapSingle(shorthandToken);\n  var component;\n  var longhandToken;\n  var newComponent;\n  var nameMetadata;\n  var i, l;\n\n  populateComponents([newProperty], validator, []);\n\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n\n    if (hasInherit(component)) {\n      longhandToken = component.all[component.position].slice(0, 2);\n      Array.prototype.push.apply(longhandToken, component.value);\n      tokensSequence.push(longhandToken);\n\n      newComponent = deepClone(component);\n      newComponent.value = inferComponentValue(components, newComponent.name);\n\n      newProperty.components[i] = newComponent;\n      inheritComponents[component.name] = deepClone(component);\n    } else {\n      newComponent = deepClone(component);\n      newComponent.all = component.all;\n      newProperty.components[i] = newComponent;\n\n      nonInheritComponents[component.name] = component;\n    }\n  }\n\n  nameMetadata = joinMetadata(nonInheritComponents, 1);\n  shorthandToken[1].push(nameMetadata);\n\n  restoreFromOptimizing([newProperty], restoreWithComponents);\n\n  shorthandToken = shorthandToken.slice(0, 2);\n  Array.prototype.push.apply(shorthandToken, newProperty.value);\n\n  tokensSequence.unshift(shorthandToken);\n\n  return [tokensSequence, newProperty, inheritComponents];\n}\n\nfunction inferComponentValue(components, propertyName) {\n  var descriptor = compactable[propertyName];\n\n  if ('oppositeTo' in descriptor) {\n    return components[descriptor.oppositeTo].value;\n  } else {\n    return [[Token.PROPERTY_VALUE, descriptor.defaultValue]];\n  }\n}\n\nfunction joinMetadata(components, at) {\n  var metadata = [];\n  var component;\n  var originalValue;\n  var componentMetadata;\n  var componentName;\n\n  for (componentName in components) {\n    component = components[componentName];\n    originalValue = component.all[component.position];\n    componentMetadata = originalValue[at][originalValue[at].length - 1];\n\n    Array.prototype.push.apply(metadata, componentMetadata);\n  }\n\n  return metadata.sort(metadataSorter);\n}\n\nfunction metadataSorter(metadata1, metadata2) {\n  var line1 = metadata1[0];\n  var line2 = metadata2[0];\n  var column1 = metadata1[1];\n  var column2 = metadata2[1];\n\n  if (line1 < line2) {\n    return -1;\n  } else if (line1 === line2) {\n    return column1 < column2 ? -1 : 1;\n  } else {\n    return 1;\n  }\n}\n\nfunction buildSequenceWithInheritShorthand(components, shorthandName, validator) {\n  var tokensSequence = [];\n  var inheritComponents = {};\n  var nonInheritComponents = {};\n  var descriptor = compactable[shorthandName];\n  var shorthandToken = [\n    Token.PROPERTY,\n    [Token.PROPERTY_NAME, shorthandName],\n    [Token.PROPERTY_VALUE, 'inherit']\n  ];\n  var newProperty = wrapSingle(shorthandToken);\n  var component;\n  var longhandToken;\n  var nameMetadata;\n  var valueMetadata;\n  var i, l;\n\n  populateComponents([newProperty], validator, []);\n\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n\n    if (hasInherit(component)) {\n      inheritComponents[component.name] = component;\n    } else {\n      longhandToken = component.all[component.position].slice(0, 2);\n      Array.prototype.push.apply(longhandToken, component.value);\n      tokensSequence.push(longhandToken);\n\n      nonInheritComponents[component.name] = deepClone(component);\n    }\n  }\n\n  nameMetadata = joinMetadata(inheritComponents, 1);\n  shorthandToken[1].push(nameMetadata);\n\n  valueMetadata = joinMetadata(inheritComponents, 2);\n  shorthandToken[2].push(valueMetadata);\n\n  tokensSequence.unshift(shorthandToken);\n\n  return [tokensSequence, newProperty, nonInheritComponents];\n}\n\nfunction findTokenIn(tokens, componentName) {\n  var i, l;\n\n  for (i = 0, l = tokens.length; i < l; i++) {\n    if (tokens[i][1][1] == componentName) {\n      return tokens[i];\n    }\n  }\n}\n\nfunction replaceWithShorthand(properties, candidateComponents, shorthandName, validator) {\n  var descriptor = compactable[shorthandName];\n  var nameMetadata;\n  var valueMetadata;\n  var newValuePlaceholder = [\n    Token.PROPERTY,\n    [Token.PROPERTY_NAME, shorthandName],\n    [Token.PROPERTY_VALUE, descriptor.defaultValue]\n  ];\n  var all;\n\n  var newProperty = wrapSingle(newValuePlaceholder);\n  newProperty.shorthand = true;\n  newProperty.dirty = true;\n\n  populateComponents([newProperty], validator, []);\n\n  for (var i = 0, l = descriptor.components.length; i < l; i++) {\n    var component = candidateComponents[descriptor.components[i]];\n\n    newProperty.components[i] = deepClone(component);\n    newProperty.important = component.important;\n\n    all = component.all;\n  }\n\n  for (var componentName in candidateComponents) {\n    candidateComponents[componentName].unused = true;\n  }\n\n  nameMetadata = joinMetadata(candidateComponents, 1);\n  newValuePlaceholder[1].push(nameMetadata);\n\n  valueMetadata = joinMetadata(candidateComponents, 2);\n  newValuePlaceholder[2].push(valueMetadata);\n\n  newProperty.position = all.length;\n  newProperty.all = all;\n  newProperty.all.push(newValuePlaceholder);\n\n  properties.push(newProperty);\n}\n\nmodule.exports = mergeIntoShorthands;\n"]},"metadata":{},"sourceType":"script"}