{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = remove;\n/* eslint-disable no-param-reassign */\n\nfunction isInside(scope, regex) {\n  if (!scope.hub.file.opts) {\n    return true;\n  }\n\n  var filename = scope.hub.file.opts.filename;\n\n  if (!filename) {\n    return true;\n  }\n\n  if (!regex) {\n    return false;\n  }\n\n  return regex.test(filename);\n} // Remove a specific path.\n\n\nfunction remove(path, globalOptions, options) {\n  var visitedKey = globalOptions.visitedKey,\n      unsafeWrapTemplate = globalOptions.unsafeWrapTemplate,\n      wrapTemplate = globalOptions.wrapTemplate,\n      mode = globalOptions.mode,\n      ignoreFilenames = globalOptions.ignoreFilenames,\n      types = globalOptions.types;\n\n  if (ignoreFilenames && isInside(path.scope, ignoreFilenames)) {\n    return;\n  } // Prevent infinity loop.\n\n\n  if (path.node[visitedKey]) {\n    return;\n  }\n\n  path.node[visitedKey] = true;\n\n  if (mode === 'remove') {\n    // remove() crash in some conditions.\n    if (path.parentPath.type === 'ConditionalExpression') {\n      path.replaceWith(types.unaryExpression('void', types.numericLiteral(0)));\n    } else {\n      path.remove();\n    }\n\n    return;\n  }\n\n  if (mode === 'wrap' || mode === 'unsafe-wrap') {\n    switch (options.type) {\n      // This is legacy, we do not optimize it.\n      case 'createClass':\n        break;\n      // Inspired from babel-plugin-transform-class-properties.\n\n      case 'class static':\n        {\n          var ref;\n          var pathClassDeclaration = options.pathClassDeclaration;\n\n          if (!pathClassDeclaration.isClassExpression() && pathClassDeclaration.node.id) {\n            ref = pathClassDeclaration.node.id;\n          } else {\n            // Class without name not supported\n            return;\n          }\n\n          var node = types.expressionStatement(types.assignmentExpression('=', types.memberExpression(ref, path.node.key), path.node.value)); // We need to append the node at the parent level in this case.\n\n          if (pathClassDeclaration.parentPath.isExportDeclaration()) {\n            pathClassDeclaration = pathClassDeclaration.parentPath;\n          }\n\n          pathClassDeclaration.insertAfter(node);\n          path.remove();\n          break;\n        }\n\n      case 'assign':\n        if (mode === 'unsafe-wrap') {\n          path.replaceWith(unsafeWrapTemplate({\n            NODE: path.node\n          }));\n        } else {\n          path.replaceWith(wrapTemplate({\n            LEFT: path.node.left,\n            RIGHT: path.node.right\n          }));\n        }\n\n        path.node[visitedKey] = true;\n        break;\n\n      case 'declarator':\n        path.replaceWith(wrapTemplate({\n          LEFT: path.node.id,\n          RIGHT: path.node.init\n        }, {\n          as: 'variableDeclarator'\n        }));\n        path.node[visitedKey] = true;\n        break;\n\n      default:\n        break;\n    }\n\n    return;\n  }\n\n  throw new Error(\"transform-react-remove-prop-type: unsupported mode \".concat(mode, \".\"));\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/babel-plugin-transform-react-remove-prop-types/lib/remove.js"],"names":["Object","defineProperty","exports","value","default","remove","isInside","scope","regex","hub","file","opts","filename","test","path","globalOptions","options","visitedKey","unsafeWrapTemplate","wrapTemplate","mode","ignoreFilenames","types","node","parentPath","type","replaceWith","unaryExpression","numericLiteral","ref","pathClassDeclaration","isClassExpression","id","expressionStatement","assignmentExpression","memberExpression","key","isExportDeclaration","insertAfter","NODE","LEFT","left","RIGHT","right","init","as","Error","concat"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = remove;\n\n/* eslint-disable no-param-reassign */\nfunction isInside(scope, regex) {\n  if (!scope.hub.file.opts) {\n    return true;\n  }\n\n  var filename = scope.hub.file.opts.filename;\n\n  if (!filename) {\n    return true;\n  }\n\n  if (!regex) {\n    return false;\n  }\n\n  return regex.test(filename);\n} // Remove a specific path.\n\n\nfunction remove(path, globalOptions, options) {\n  var visitedKey = globalOptions.visitedKey,\n      unsafeWrapTemplate = globalOptions.unsafeWrapTemplate,\n      wrapTemplate = globalOptions.wrapTemplate,\n      mode = globalOptions.mode,\n      ignoreFilenames = globalOptions.ignoreFilenames,\n      types = globalOptions.types;\n\n  if (ignoreFilenames && isInside(path.scope, ignoreFilenames)) {\n    return;\n  } // Prevent infinity loop.\n\n\n  if (path.node[visitedKey]) {\n    return;\n  }\n\n  path.node[visitedKey] = true;\n\n  if (mode === 'remove') {\n    // remove() crash in some conditions.\n    if (path.parentPath.type === 'ConditionalExpression') {\n      path.replaceWith(types.unaryExpression('void', types.numericLiteral(0)));\n    } else {\n      path.remove();\n    }\n\n    return;\n  }\n\n  if (mode === 'wrap' || mode === 'unsafe-wrap') {\n    switch (options.type) {\n      // This is legacy, we do not optimize it.\n      case 'createClass':\n        break;\n      // Inspired from babel-plugin-transform-class-properties.\n\n      case 'class static':\n        {\n          var ref;\n          var pathClassDeclaration = options.pathClassDeclaration;\n\n          if (!pathClassDeclaration.isClassExpression() && pathClassDeclaration.node.id) {\n            ref = pathClassDeclaration.node.id;\n          } else {\n            // Class without name not supported\n            return;\n          }\n\n          var node = types.expressionStatement(types.assignmentExpression('=', types.memberExpression(ref, path.node.key), path.node.value)); // We need to append the node at the parent level in this case.\n\n          if (pathClassDeclaration.parentPath.isExportDeclaration()) {\n            pathClassDeclaration = pathClassDeclaration.parentPath;\n          }\n\n          pathClassDeclaration.insertAfter(node);\n          path.remove();\n          break;\n        }\n\n      case 'assign':\n        if (mode === 'unsafe-wrap') {\n          path.replaceWith(unsafeWrapTemplate({\n            NODE: path.node\n          }));\n        } else {\n          path.replaceWith(wrapTemplate({\n            LEFT: path.node.left,\n            RIGHT: path.node.right\n          }));\n        }\n\n        path.node[visitedKey] = true;\n        break;\n\n      case 'declarator':\n        path.replaceWith(wrapTemplate({\n          LEFT: path.node.id,\n          RIGHT: path.node.init\n        }, {\n          as: 'variableDeclarator'\n        }));\n        path.node[visitedKey] = true;\n        break;\n\n      default:\n        break;\n    }\n\n    return;\n  }\n\n  throw new Error(\"transform-react-remove-prop-type: unsupported mode \".concat(mode, \".\"));\n}"]},"metadata":{},"sourceType":"script"}