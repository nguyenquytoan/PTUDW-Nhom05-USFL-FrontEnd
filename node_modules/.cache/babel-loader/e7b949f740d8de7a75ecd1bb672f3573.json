{"ast":null,"code":"var List = require('css-tree').List;\n\nmodule.exports = function compressBackground(node) {\n  function lastType() {\n    if (buffer.length) {\n      return buffer[buffer.length - 1].type;\n    }\n  }\n\n  function flush() {\n    if (lastType() === 'WhiteSpace') {\n      buffer.pop();\n    }\n\n    if (!buffer.length) {\n      buffer.unshift({\n        type: 'Number',\n        loc: null,\n        value: '0'\n      }, {\n        type: 'WhiteSpace',\n        value: ' '\n      }, {\n        type: 'Number',\n        loc: null,\n        value: '0'\n      });\n    }\n\n    newValue.push.apply(newValue, buffer);\n    buffer = [];\n  }\n\n  var newValue = [];\n  var buffer = [];\n  node.children.each(function (node) {\n    if (node.type === 'Operator' && node.value === ',') {\n      flush();\n      newValue.push(node);\n      return;\n    } // remove defaults\n\n\n    if (node.type === 'Identifier') {\n      if (node.name === 'transparent' || node.name === 'none' || node.name === 'repeat' || node.name === 'scroll') {\n        return;\n      }\n    } // don't add redundant spaces\n\n\n    if (node.type === 'WhiteSpace' && (!buffer.length || lastType() === 'WhiteSpace')) {\n      return;\n    }\n\n    buffer.push(node);\n  });\n  flush();\n  node.children = new List().fromArray(newValue);\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/csso/lib/replace/property/background.js"],"names":["List","require","module","exports","compressBackground","node","lastType","buffer","length","type","flush","pop","unshift","loc","value","newValue","push","apply","children","each","name","fromArray"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoBD,IAA/B;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;AAC/C,WAASC,QAAT,GAAoB;AAChB,QAAIC,MAAM,CAACC,MAAX,EAAmB;AACf,aAAOD,MAAM,CAACA,MAAM,CAACC,MAAP,GAAgB,CAAjB,CAAN,CAA0BC,IAAjC;AACH;AACJ;;AAED,WAASC,KAAT,GAAiB;AACb,QAAIJ,QAAQ,OAAO,YAAnB,EAAiC;AAC7BC,MAAAA,MAAM,CAACI,GAAP;AACH;;AAED,QAAI,CAACJ,MAAM,CAACC,MAAZ,EAAoB;AAChBD,MAAAA,MAAM,CAACK,OAAP,CACI;AACIH,QAAAA,IAAI,EAAE,QADV;AAEII,QAAAA,GAAG,EAAE,IAFT;AAGIC,QAAAA,KAAK,EAAE;AAHX,OADJ,EAMI;AACIL,QAAAA,IAAI,EAAE,YADV;AAEIK,QAAAA,KAAK,EAAE;AAFX,OANJ,EAUI;AACIL,QAAAA,IAAI,EAAE,QADV;AAEII,QAAAA,GAAG,EAAE,IAFT;AAGIC,QAAAA,KAAK,EAAE;AAHX,OAVJ;AAgBH;;AAEDC,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBF,QAApB,EAA8BR,MAA9B;AAEAA,IAAAA,MAAM,GAAG,EAAT;AACH;;AAED,MAAIQ,QAAQ,GAAG,EAAf;AACA,MAAIR,MAAM,GAAG,EAAb;AAEAF,EAAAA,IAAI,CAACa,QAAL,CAAcC,IAAd,CAAmB,UAASd,IAAT,EAAe;AAC9B,QAAIA,IAAI,CAACI,IAAL,KAAc,UAAd,IAA4BJ,IAAI,CAACS,KAAL,KAAe,GAA/C,EAAoD;AAChDJ,MAAAA,KAAK;AACLK,MAAAA,QAAQ,CAACC,IAAT,CAAcX,IAAd;AACA;AACH,KAL6B,CAO9B;;;AACA,QAAIA,IAAI,CAACI,IAAL,KAAc,YAAlB,EAAgC;AAC5B,UAAIJ,IAAI,CAACe,IAAL,KAAc,aAAd,IACAf,IAAI,CAACe,IAAL,KAAc,MADd,IAEAf,IAAI,CAACe,IAAL,KAAc,QAFd,IAGAf,IAAI,CAACe,IAAL,KAAc,QAHlB,EAG4B;AACxB;AACH;AACJ,KAf6B,CAiB9B;;;AACA,QAAIf,IAAI,CAACI,IAAL,KAAc,YAAd,KAA+B,CAACF,MAAM,CAACC,MAAR,IAAkBF,QAAQ,OAAO,YAAhE,CAAJ,EAAmF;AAC/E;AACH;;AAEDC,IAAAA,MAAM,CAACS,IAAP,CAAYX,IAAZ;AACH,GAvBD;AAyBAK,EAAAA,KAAK;AACLL,EAAAA,IAAI,CAACa,QAAL,GAAgB,IAAIlB,IAAJ,GAAWqB,SAAX,CAAqBN,QAArB,CAAhB;AACH,CAlED","sourcesContent":["var List = require('css-tree').List;\n\nmodule.exports = function compressBackground(node) {\n    function lastType() {\n        if (buffer.length) {\n            return buffer[buffer.length - 1].type;\n        }\n    }\n\n    function flush() {\n        if (lastType() === 'WhiteSpace') {\n            buffer.pop();\n        }\n\n        if (!buffer.length) {\n            buffer.unshift(\n                {\n                    type: 'Number',\n                    loc: null,\n                    value: '0'\n                },\n                {\n                    type: 'WhiteSpace',\n                    value: ' '\n                },\n                {\n                    type: 'Number',\n                    loc: null,\n                    value: '0'\n                }\n            );\n        }\n\n        newValue.push.apply(newValue, buffer);\n\n        buffer = [];\n    }\n\n    var newValue = [];\n    var buffer = [];\n\n    node.children.each(function(node) {\n        if (node.type === 'Operator' && node.value === ',') {\n            flush();\n            newValue.push(node);\n            return;\n        }\n\n        // remove defaults\n        if (node.type === 'Identifier') {\n            if (node.name === 'transparent' ||\n                node.name === 'none' ||\n                node.name === 'repeat' ||\n                node.name === 'scroll') {\n                return;\n            }\n        }\n\n        // don't add redundant spaces\n        if (node.type === 'WhiteSpace' && (!buffer.length || lastType() === 'WhiteSpace')) {\n            return;\n        }\n\n        buffer.push(node);\n    });\n\n    flush();\n    node.children = new List().fromArray(newValue);\n};\n"]},"metadata":{},"sourceType":"script"}