{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar chalk = require('chalk');\n\nvar execSync = require('child_process').execSync;\n\nvar path = require('path');\n\nvar execOptions = {\n  encoding: 'utf8',\n  stdio: ['pipe', // stdin (default)\n  'pipe', // stdout (default)\n  'ignore' //stderr\n  ]\n};\n\nfunction isProcessAReactApp(processCommand) {\n  return /^node .*react-scripts\\/scripts\\/start\\.js\\s?$/.test(processCommand);\n}\n\nfunction getProcessIdOnPort(port) {\n  return execSync('lsof -i:' + port + ' -P -t -sTCP:LISTEN', execOptions).split('\\n')[0].trim();\n}\n\nfunction getPackageNameInDirectory(directory) {\n  var packagePath = path.join(directory.trim(), 'package.json');\n\n  try {\n    return require(packagePath).name;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction getProcessCommand(processId, processDirectory) {\n  var command = execSync('ps -o command -p ' + processId + ' | sed -n 2p', execOptions);\n  command = command.replace(/\\n$/, '');\n\n  if (isProcessAReactApp(command)) {\n    const packageName = getPackageNameInDirectory(processDirectory);\n    return packageName ? packageName : command;\n  } else {\n    return command;\n  }\n}\n\nfunction getDirectoryOfProcessById(processId) {\n  return execSync('lsof -p ' + processId + ' | awk \\'$4==\"cwd\" {for (i=9; i<=NF; i++) printf \"%s \", $i}\\'', execOptions).trim();\n}\n\nfunction getProcessForPort(port) {\n  try {\n    var processId = getProcessIdOnPort(port);\n    var directory = getDirectoryOfProcessById(processId);\n    var command = getProcessCommand(processId, directory);\n    return chalk.cyan(command) + chalk.grey(' (pid ' + processId + ')\\n') + chalk.blue('  in ') + chalk.cyan(directory);\n  } catch (e) {\n    return null;\n  }\n}\n\nmodule.exports = getProcessForPort;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-dev-utils/getProcessForPort.js"],"names":["chalk","require","execSync","path","execOptions","encoding","stdio","isProcessAReactApp","processCommand","test","getProcessIdOnPort","port","split","trim","getPackageNameInDirectory","directory","packagePath","join","name","e","getProcessCommand","processId","processDirectory","command","replace","packageName","getDirectoryOfProcessById","getProcessForPort","cyan","grey","blue","module","exports"],"mappings":"AAAA;;;;;;AAOA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,eAAD,CAAP,CAAyBC,QAAxC;;AACA,IAAIC,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIG,WAAW,GAAG;AAChBC,EAAAA,QAAQ,EAAE,MADM;AAEhBC,EAAAA,KAAK,EAAE,CACL,MADK,EACG;AACR,QAFK,EAEG;AACR,UAHK,CAGK;AAHL;AAFS,CAAlB;;AASA,SAASC,kBAAT,CAA4BC,cAA5B,EAA4C;AAC1C,SAAO,gDAAgDC,IAAhD,CAAqDD,cAArD,CAAP;AACD;;AAED,SAASE,kBAAT,CAA4BC,IAA5B,EAAkC;AAChC,SAAOT,QAAQ,CAAC,aAAaS,IAAb,GAAoB,qBAArB,EAA4CP,WAA5C,CAAR,CACJQ,KADI,CACE,IADF,EACQ,CADR,EAEJC,IAFI,EAAP;AAGD;;AAED,SAASC,yBAAT,CAAmCC,SAAnC,EAA8C;AAC5C,MAAIC,WAAW,GAAGb,IAAI,CAACc,IAAL,CAAUF,SAAS,CAACF,IAAV,EAAV,EAA4B,cAA5B,CAAlB;;AAEA,MAAI;AACF,WAAOZ,OAAO,CAACe,WAAD,CAAP,CAAqBE,IAA5B;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACV,WAAO,IAAP;AACD;AACF;;AAED,SAASC,iBAAT,CAA2BC,SAA3B,EAAsCC,gBAAtC,EAAwD;AACtD,MAAIC,OAAO,GAAGrB,QAAQ,CACpB,sBAAsBmB,SAAtB,GAAkC,cADd,EAEpBjB,WAFoB,CAAtB;AAKAmB,EAAAA,OAAO,GAAGA,OAAO,CAACC,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAV;;AAEA,MAAIjB,kBAAkB,CAACgB,OAAD,CAAtB,EAAiC;AAC/B,UAAME,WAAW,GAAGX,yBAAyB,CAACQ,gBAAD,CAA7C;AACA,WAAOG,WAAW,GAAGA,WAAH,GAAiBF,OAAnC;AACD,GAHD,MAGO;AACL,WAAOA,OAAP;AACD;AACF;;AAED,SAASG,yBAAT,CAAmCL,SAAnC,EAA8C;AAC5C,SAAOnB,QAAQ,CACb,aACEmB,SADF,GAEE,+DAHW,EAIbjB,WAJa,CAAR,CAKLS,IALK,EAAP;AAMD;;AAED,SAASc,iBAAT,CAA2BhB,IAA3B,EAAiC;AAC/B,MAAI;AACF,QAAIU,SAAS,GAAGX,kBAAkB,CAACC,IAAD,CAAlC;AACA,QAAII,SAAS,GAAGW,yBAAyB,CAACL,SAAD,CAAzC;AACA,QAAIE,OAAO,GAAGH,iBAAiB,CAACC,SAAD,EAAYN,SAAZ,CAA/B;AACA,WACEf,KAAK,CAAC4B,IAAN,CAAWL,OAAX,IACAvB,KAAK,CAAC6B,IAAN,CAAW,WAAWR,SAAX,GAAuB,KAAlC,CADA,GAEArB,KAAK,CAAC8B,IAAN,CAAW,OAAX,CAFA,GAGA9B,KAAK,CAAC4B,IAAN,CAAWb,SAAX,CAJF;AAMD,GAVD,CAUE,OAAOI,CAAP,EAAU;AACV,WAAO,IAAP;AACD;AACF;;AAEDY,MAAM,CAACC,OAAP,GAAiBL,iBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar chalk = require('chalk');\nvar execSync = require('child_process').execSync;\nvar path = require('path');\n\nvar execOptions = {\n  encoding: 'utf8',\n  stdio: [\n    'pipe', // stdin (default)\n    'pipe', // stdout (default)\n    'ignore', //stderr\n  ],\n};\n\nfunction isProcessAReactApp(processCommand) {\n  return /^node .*react-scripts\\/scripts\\/start\\.js\\s?$/.test(processCommand);\n}\n\nfunction getProcessIdOnPort(port) {\n  return execSync('lsof -i:' + port + ' -P -t -sTCP:LISTEN', execOptions)\n    .split('\\n')[0]\n    .trim();\n}\n\nfunction getPackageNameInDirectory(directory) {\n  var packagePath = path.join(directory.trim(), 'package.json');\n\n  try {\n    return require(packagePath).name;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction getProcessCommand(processId, processDirectory) {\n  var command = execSync(\n    'ps -o command -p ' + processId + ' | sed -n 2p',\n    execOptions\n  );\n\n  command = command.replace(/\\n$/, '');\n\n  if (isProcessAReactApp(command)) {\n    const packageName = getPackageNameInDirectory(processDirectory);\n    return packageName ? packageName : command;\n  } else {\n    return command;\n  }\n}\n\nfunction getDirectoryOfProcessById(processId) {\n  return execSync(\n    'lsof -p ' +\n      processId +\n      ' | awk \\'$4==\"cwd\" {for (i=9; i<=NF; i++) printf \"%s \", $i}\\'',\n    execOptions\n  ).trim();\n}\n\nfunction getProcessForPort(port) {\n  try {\n    var processId = getProcessIdOnPort(port);\n    var directory = getDirectoryOfProcessById(processId);\n    var command = getProcessCommand(processId, directory);\n    return (\n      chalk.cyan(command) +\n      chalk.grey(' (pid ' + processId + ')\\n') +\n      chalk.blue('  in ') +\n      chalk.cyan(directory)\n    );\n  } catch (e) {\n    return null;\n  }\n}\n\nmodule.exports = getProcessForPort;\n"]},"metadata":{},"sourceType":"script"}