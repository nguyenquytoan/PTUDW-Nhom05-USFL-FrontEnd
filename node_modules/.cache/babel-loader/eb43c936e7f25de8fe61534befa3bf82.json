{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.mjs';\nimport { assert } from 'workbox-core/_private/assert.mjs';\nimport '../_version.mjs';\n/**\n * @param {string} rangeHeader A Range: header value.\n * @return {Object} An object with `start` and `end` properties, reflecting\n * the parsed value of the Range: header. If either the `start` or `end` are\n * omitted, then `null` will be returned.\n *\n * @private\n */\n\nfunction parseRangeHeader(rangeHeader) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert.isType(rangeHeader, 'string', {\n      moduleName: 'workbox-range-requests',\n      funcName: 'parseRangeHeader',\n      paramName: 'rangeHeader'\n    });\n  }\n\n  const normalizedRangeHeader = rangeHeader.trim().toLowerCase();\n\n  if (!normalizedRangeHeader.startsWith('bytes=')) {\n    throw new WorkboxError('unit-must-be-bytes', {\n      normalizedRangeHeader\n    });\n  } // Specifying multiple ranges separate by commas is valid syntax, but this\n  // library only attempts to handle a single, contiguous sequence of bytes.\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range#Syntax\n\n\n  if (normalizedRangeHeader.includes(',')) {\n    throw new WorkboxError('single-range-only', {\n      normalizedRangeHeader\n    });\n  }\n\n  const rangeParts = /(\\d*)-(\\d*)/.exec(normalizedRangeHeader); // We need either at least one of the start or end values.\n\n  if (rangeParts === null || !(rangeParts[1] || rangeParts[2])) {\n    throw new WorkboxError('invalid-range-values', {\n      normalizedRangeHeader\n    });\n  }\n\n  return {\n    start: rangeParts[1] === '' ? null : Number(rangeParts[1]),\n    end: rangeParts[2] === '' ? null : Number(rangeParts[2])\n  };\n}\n\nexport { parseRangeHeader };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-range-requests/utils/parseRangeHeader.mjs"],"names":["WorkboxError","assert","parseRangeHeader","rangeHeader","process","env","NODE_ENV","isType","moduleName","funcName","paramName","normalizedRangeHeader","trim","toLowerCase","startsWith","includes","rangeParts","exec","start","Number","end"],"mappings":"AAAA;;;;;;;AAQA,SAAQA,YAAR,QAA2B,wCAA3B;AACA,SAAQC,MAAR,QAAqB,kCAArB;AAEA,OAAO,iBAAP;AAEA;;;;;;;;;AAQA,SAASC,gBAAT,CAA0BC,WAA1B,EAAuC;AACrC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCL,IAAAA,MAAM,CAACM,MAAP,CAAcJ,WAAd,EAA2B,QAA3B,EAAqC;AACnCK,MAAAA,UAAU,EAAE,wBADuB;AAEnCC,MAAAA,QAAQ,EAAE,kBAFyB;AAGnCC,MAAAA,SAAS,EAAE;AAHwB,KAArC;AAKD;;AAED,QAAMC,qBAAqB,GAAGR,WAAW,CAACS,IAAZ,GAAmBC,WAAnB,EAA9B;;AACA,MAAI,CAACF,qBAAqB,CAACG,UAAtB,CAAiC,QAAjC,CAAL,EAAiD;AAC/C,UAAM,IAAId,YAAJ,CAAiB,oBAAjB,EAAuC;AAACW,MAAAA;AAAD,KAAvC,CAAN;AACD,GAZoC,CAcrC;AACA;AACA;;;AACA,MAAIA,qBAAqB,CAACI,QAAtB,CAA+B,GAA/B,CAAJ,EAAyC;AACvC,UAAM,IAAIf,YAAJ,CAAiB,mBAAjB,EAAsC;AAACW,MAAAA;AAAD,KAAtC,CAAN;AACD;;AAED,QAAMK,UAAU,GAAG,cAAcC,IAAd,CAAmBN,qBAAnB,CAAnB,CArBqC,CAsBrC;;AACA,MAAIK,UAAU,KAAK,IAAf,IAAuB,EAAEA,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAA7B,CAA3B,EAA8D;AAC5D,UAAM,IAAIhB,YAAJ,CAAiB,sBAAjB,EAAyC;AAACW,MAAAA;AAAD,KAAzC,CAAN;AACD;;AAED,SAAO;AACLO,IAAAA,KAAK,EAAEF,UAAU,CAAC,CAAD,CAAV,KAAkB,EAAlB,GAAuB,IAAvB,GAA8BG,MAAM,CAACH,UAAU,CAAC,CAAD,CAAX,CADtC;AAELI,IAAAA,GAAG,EAAEJ,UAAU,CAAC,CAAD,CAAV,KAAkB,EAAlB,GAAuB,IAAvB,GAA8BG,MAAM,CAACH,UAAU,CAAC,CAAD,CAAX;AAFpC,GAAP;AAID;;AAED,SAAQd,gBAAR","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\n\nimport '../_version.mjs';\n\n/**\n * @param {string} rangeHeader A Range: header value.\n * @return {Object} An object with `start` and `end` properties, reflecting\n * the parsed value of the Range: header. If either the `start` or `end` are\n * omitted, then `null` will be returned.\n *\n * @private\n */\nfunction parseRangeHeader(rangeHeader) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert.isType(rangeHeader, 'string', {\n      moduleName: 'workbox-range-requests',\n      funcName: 'parseRangeHeader',\n      paramName: 'rangeHeader',\n    });\n  }\n\n  const normalizedRangeHeader = rangeHeader.trim().toLowerCase();\n  if (!normalizedRangeHeader.startsWith('bytes=')) {\n    throw new WorkboxError('unit-must-be-bytes', {normalizedRangeHeader});\n  }\n\n  // Specifying multiple ranges separate by commas is valid syntax, but this\n  // library only attempts to handle a single, contiguous sequence of bytes.\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range#Syntax\n  if (normalizedRangeHeader.includes(',')) {\n    throw new WorkboxError('single-range-only', {normalizedRangeHeader});\n  }\n\n  const rangeParts = /(\\d*)-(\\d*)/.exec(normalizedRangeHeader);\n  // We need either at least one of the start or end values.\n  if (rangeParts === null || !(rangeParts[1] || rangeParts[2])) {\n    throw new WorkboxError('invalid-range-values', {normalizedRangeHeader});\n  }\n\n  return {\n    start: rangeParts[1] === '' ? null : Number(rangeParts[1]),\n    end: rangeParts[2] === '' ? null : Number(rangeParts[2]),\n  };\n}\n\nexport {parseRangeHeader};\n"]},"metadata":{},"sourceType":"module"}