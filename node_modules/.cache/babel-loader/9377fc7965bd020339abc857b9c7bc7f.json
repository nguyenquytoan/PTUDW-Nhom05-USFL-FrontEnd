{"ast":null,"code":"/**\n * Extractor function for a BindExpression type value node.\n * A bind expression looks like `::this.foo`\n * This will return `this.foo.bind(this)` as the value to indicate its existence,\n * since we can not execute the function this.foo.bind(this) in a static environment.\n *\n * @param - value - AST Value object with type `BindExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromBindExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('./index.js').default;\n\n  const callee = getValue(value.callee); // If value.object === null, the callee must be a MemberExpression.\n  // https://github.com/babel/babylon/blob/master/ast/spec.md#bindexpression\n\n  const object = value.object === null ? getValue(value.callee.object) : getValue(value.object);\n\n  if (value.object && value.object.property) {\n    return `${object}.${callee}.bind(${object})`;\n  }\n\n  return `${callee}.bind(${object})`;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/src/values/expressions/BindExpression.js"],"names":["extractValueFromBindExpression","value","getValue","require","default","callee","object","property"],"mappings":"AAAA;;;;;;;;;AASA,eAAe,SAASA,8BAAT,CAAwCC,KAAxC,EAA+C;AAC5D;AACA,QAAMC,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBC,OAAvC;;AACA,QAAMC,MAAM,GAAGH,QAAQ,CAACD,KAAK,CAACI,MAAP,CAAvB,CAH4D,CAK5D;AACA;;AACA,QAAMC,MAAM,GAAGL,KAAK,CAACK,MAAN,KAAiB,IAAjB,GAAwBJ,QAAQ,CAACD,KAAK,CAACI,MAAN,CAAaC,MAAd,CAAhC,GAAwDJ,QAAQ,CAACD,KAAK,CAACK,MAAP,CAA/E;;AAEA,MAAIL,KAAK,CAACK,MAAN,IAAgBL,KAAK,CAACK,MAAN,CAAaC,QAAjC,EAA2C;AACzC,WAAQ,GAAED,MAAO,IAAGD,MAAO,SAAQC,MAAO,GAA1C;AACD;;AAED,SAAQ,GAAED,MAAO,SAAQC,MAAO,GAAhC;AACD","sourcesContent":["/**\n * Extractor function for a BindExpression type value node.\n * A bind expression looks like `::this.foo`\n * This will return `this.foo.bind(this)` as the value to indicate its existence,\n * since we can not execute the function this.foo.bind(this) in a static environment.\n *\n * @param - value - AST Value object with type `BindExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromBindExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('./index.js').default;\n  const callee = getValue(value.callee);\n\n  // If value.object === null, the callee must be a MemberExpression.\n  // https://github.com/babel/babylon/blob/master/ast/spec.md#bindexpression\n  const object = value.object === null ? getValue(value.callee.object) : getValue(value.object);\n\n  if (value.object && value.object.property) {\n    return `${object}.${callee}.bind(${object})`;\n  }\n\n  return `${callee}.bind(${object})`;\n}\n"]},"metadata":{},"sourceType":"module"}