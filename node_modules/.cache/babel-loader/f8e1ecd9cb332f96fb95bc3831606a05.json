{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst pluginName = 'postcss-url-parser';\nconst isUrlFunc = /url/i;\nconst isImageSetFunc = /^(?:-webkit-)?image-set$/i;\nconst needParseDecl = /(?:url|(?:-webkit-)?image-set)\\(/i;\n\nfunction getNodeFromUrlFunc(node) {\n  return node.nodes && node.nodes[0];\n}\n\nfunction walkUrls(parsed, callback) {\n  parsed.walk(node => {\n    if (node.type !== 'function') {\n      return;\n    }\n\n    if (isUrlFunc.test(node.value)) {\n      const {\n        nodes\n      } = node;\n      const isStringValue = nodes.length !== 0 && nodes[0].type === 'string';\n      const url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n      callback(getNodeFromUrlFunc(node), url, false, isStringValue); // Do not traverse inside `url`\n      // eslint-disable-next-line consistent-return\n\n      return false;\n    }\n\n    if (isImageSetFunc.test(node.value)) {\n      node.nodes.forEach(nNode => {\n        const {\n          type,\n          value\n        } = nNode;\n\n        if (type === 'function' && isUrlFunc.test(value)) {\n          const {\n            nodes\n          } = nNode;\n          const isStringValue = nodes.length !== 0 && nodes[0].type === 'string';\n          const url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n          callback(getNodeFromUrlFunc(nNode), url, false, isStringValue);\n        }\n\n        if (type === 'string') {\n          callback(nNode, value, true, true);\n        }\n      }); // Do not traverse inside `image-set`\n      // eslint-disable-next-line consistent-return\n\n      return false;\n    }\n  });\n}\n\nfunction getUrlsFromValue(value, result, filter, decl) {\n  if (!needParseDecl.test(value)) {\n    return;\n  }\n\n  const parsed = (0, _postcssValueParser.default)(value);\n  const urls = [];\n  walkUrls(parsed, (node, url, needQuotes, isStringValue) => {\n    if (url.trim().replace(/\\\\[\\r\\n]/g, '').length === 0) {\n      result.warn(`Unable to find uri in '${decl ? decl.toString() : value}'`, {\n        node: decl\n      });\n      return;\n    }\n\n    if (filter && !filter(url)) {\n      return;\n    }\n\n    const splittedUrl = url.split(/(\\?)?#/);\n    const [urlWithoutHash, singleQuery, hashValue] = splittedUrl;\n    const hash = singleQuery || hashValue ? `${singleQuery ? '?' : ''}${hashValue ? `#${hashValue}` : ''}` : '';\n    const normalizedUrl = (0, _utils.normalizeUrl)(urlWithoutHash, isStringValue);\n    urls.push({\n      node,\n      url: normalizedUrl,\n      hash,\n      needQuotes\n    });\n  }); // eslint-disable-next-line consistent-return\n\n  return {\n    parsed,\n    urls\n  };\n}\n\nfunction walkDecls(css, result, filter) {\n  const items = [];\n  css.walkDecls(decl => {\n    const item = getUrlsFromValue(decl.value, result, filter, decl);\n\n    if (!item || item.urls.length === 0) {\n      return;\n    }\n\n    items.push({\n      decl,\n      parsed: item.parsed,\n      urls: item.urls\n    });\n  });\n  return items;\n}\n\nfunction flatten(array) {\n  return array.reduce((a, b) => a.concat(b), []);\n}\n\nfunction collectUniqueUrlsWithNodes(array) {\n  return array.reduce((accumulator, currentValue) => {\n    const {\n      url,\n      needQuotes,\n      hash,\n      node\n    } = currentValue;\n    const found = accumulator.find(item => url === item.url && needQuotes === item.needQuotes && hash === item.hash);\n\n    if (!found) {\n      accumulator.push({\n        url,\n        hash,\n        needQuotes,\n        nodes: [node]\n      });\n    } else {\n      found.nodes.push(node);\n    }\n\n    return accumulator;\n  }, []);\n}\n\nvar _default = _postcss.default.plugin(pluginName, options => function process(css, result) {\n  const traversed = walkDecls(css, result, options.filter);\n  const flattenTraversed = flatten(traversed.map(item => item.urls));\n  const urlsWithNodes = collectUniqueUrlsWithNodes(flattenTraversed);\n  const replacers = new Map();\n  urlsWithNodes.forEach((urlWithNodes, index) => {\n    const {\n      url,\n      hash,\n      needQuotes,\n      nodes\n    } = urlWithNodes;\n    const replacementName = `___CSS_LOADER_URL_REPLACEMENT_${index}___`;\n    result.messages.push({\n      pluginName,\n      type: 'import',\n      value: {\n        type: 'url',\n        replacementName,\n        url,\n        needQuotes,\n        hash\n      }\n    }, {\n      pluginName,\n      type: 'replacer',\n      value: {\n        type: 'url',\n        replacementName\n      }\n    });\n    nodes.forEach(node => {\n      replacers.set(node, replacementName);\n    });\n  });\n  traversed.forEach(item => {\n    walkUrls(item.parsed, node => {\n      const replacementName = replacers.get(node);\n\n      if (!replacementName) {\n        return;\n      } // eslint-disable-next-line no-param-reassign\n\n\n      node.type = 'word'; // eslint-disable-next-line no-param-reassign\n\n      node.value = replacementName;\n    }); // eslint-disable-next-line no-param-reassign\n\n    item.decl.value = item.parsed.toString();\n  });\n});\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/css-loader/dist/plugins/postcss-url-parser.js"],"names":["Object","defineProperty","exports","value","default","_postcss","_interopRequireDefault","require","_postcssValueParser","_utils","obj","__esModule","pluginName","isUrlFunc","isImageSetFunc","needParseDecl","getNodeFromUrlFunc","node","nodes","walkUrls","parsed","callback","walk","type","test","isStringValue","length","url","stringify","forEach","nNode","getUrlsFromValue","result","filter","decl","urls","needQuotes","trim","replace","warn","toString","splittedUrl","split","urlWithoutHash","singleQuery","hashValue","hash","normalizedUrl","normalizeUrl","push","walkDecls","css","items","item","flatten","array","reduce","a","b","concat","collectUniqueUrlsWithNodes","accumulator","currentValue","found","find","_default","plugin","options","process","traversed","flattenTraversed","map","urlsWithNodes","replacers","Map","urlWithNodes","index","replacementName","messages","set","get"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst pluginName = 'postcss-url-parser';\nconst isUrlFunc = /url/i;\nconst isImageSetFunc = /^(?:-webkit-)?image-set$/i;\nconst needParseDecl = /(?:url|(?:-webkit-)?image-set)\\(/i;\n\nfunction getNodeFromUrlFunc(node) {\n  return node.nodes && node.nodes[0];\n}\n\nfunction walkUrls(parsed, callback) {\n  parsed.walk(node => {\n    if (node.type !== 'function') {\n      return;\n    }\n\n    if (isUrlFunc.test(node.value)) {\n      const {\n        nodes\n      } = node;\n      const isStringValue = nodes.length !== 0 && nodes[0].type === 'string';\n      const url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n      callback(getNodeFromUrlFunc(node), url, false, isStringValue); // Do not traverse inside `url`\n      // eslint-disable-next-line consistent-return\n\n      return false;\n    }\n\n    if (isImageSetFunc.test(node.value)) {\n      node.nodes.forEach(nNode => {\n        const {\n          type,\n          value\n        } = nNode;\n\n        if (type === 'function' && isUrlFunc.test(value)) {\n          const {\n            nodes\n          } = nNode;\n          const isStringValue = nodes.length !== 0 && nodes[0].type === 'string';\n          const url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n          callback(getNodeFromUrlFunc(nNode), url, false, isStringValue);\n        }\n\n        if (type === 'string') {\n          callback(nNode, value, true, true);\n        }\n      }); // Do not traverse inside `image-set`\n      // eslint-disable-next-line consistent-return\n\n      return false;\n    }\n  });\n}\n\nfunction getUrlsFromValue(value, result, filter, decl) {\n  if (!needParseDecl.test(value)) {\n    return;\n  }\n\n  const parsed = (0, _postcssValueParser.default)(value);\n  const urls = [];\n  walkUrls(parsed, (node, url, needQuotes, isStringValue) => {\n    if (url.trim().replace(/\\\\[\\r\\n]/g, '').length === 0) {\n      result.warn(`Unable to find uri in '${decl ? decl.toString() : value}'`, {\n        node: decl\n      });\n      return;\n    }\n\n    if (filter && !filter(url)) {\n      return;\n    }\n\n    const splittedUrl = url.split(/(\\?)?#/);\n    const [urlWithoutHash, singleQuery, hashValue] = splittedUrl;\n    const hash = singleQuery || hashValue ? `${singleQuery ? '?' : ''}${hashValue ? `#${hashValue}` : ''}` : '';\n    const normalizedUrl = (0, _utils.normalizeUrl)(urlWithoutHash, isStringValue);\n    urls.push({\n      node,\n      url: normalizedUrl,\n      hash,\n      needQuotes\n    });\n  }); // eslint-disable-next-line consistent-return\n\n  return {\n    parsed,\n    urls\n  };\n}\n\nfunction walkDecls(css, result, filter) {\n  const items = [];\n  css.walkDecls(decl => {\n    const item = getUrlsFromValue(decl.value, result, filter, decl);\n\n    if (!item || item.urls.length === 0) {\n      return;\n    }\n\n    items.push({\n      decl,\n      parsed: item.parsed,\n      urls: item.urls\n    });\n  });\n  return items;\n}\n\nfunction flatten(array) {\n  return array.reduce((a, b) => a.concat(b), []);\n}\n\nfunction collectUniqueUrlsWithNodes(array) {\n  return array.reduce((accumulator, currentValue) => {\n    const {\n      url,\n      needQuotes,\n      hash,\n      node\n    } = currentValue;\n    const found = accumulator.find(item => url === item.url && needQuotes === item.needQuotes && hash === item.hash);\n\n    if (!found) {\n      accumulator.push({\n        url,\n        hash,\n        needQuotes,\n        nodes: [node]\n      });\n    } else {\n      found.nodes.push(node);\n    }\n\n    return accumulator;\n  }, []);\n}\n\nvar _default = _postcss.default.plugin(pluginName, options => function process(css, result) {\n  const traversed = walkDecls(css, result, options.filter);\n  const flattenTraversed = flatten(traversed.map(item => item.urls));\n  const urlsWithNodes = collectUniqueUrlsWithNodes(flattenTraversed);\n  const replacers = new Map();\n  urlsWithNodes.forEach((urlWithNodes, index) => {\n    const {\n      url,\n      hash,\n      needQuotes,\n      nodes\n    } = urlWithNodes;\n    const replacementName = `___CSS_LOADER_URL_REPLACEMENT_${index}___`;\n    result.messages.push({\n      pluginName,\n      type: 'import',\n      value: {\n        type: 'url',\n        replacementName,\n        url,\n        needQuotes,\n        hash\n      }\n    }, {\n      pluginName,\n      type: 'replacer',\n      value: {\n        type: 'url',\n        replacementName\n      }\n    });\n    nodes.forEach(node => {\n      replacers.set(node, replacementName);\n    });\n  });\n  traversed.forEach(item => {\n    walkUrls(item.parsed, node => {\n      const replacementName = replacers.get(node);\n\n      if (!replacementName) {\n        return;\n      } // eslint-disable-next-line no-param-reassign\n\n\n      node.type = 'word'; // eslint-disable-next-line no-param-reassign\n\n      node.value = replacementName;\n    }); // eslint-disable-next-line no-param-reassign\n\n    item.decl.value = item.parsed.toString();\n  });\n});\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}