{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst errors = require('./errors');\n/**\n * Escaping user input to be treated as a literal string within a regular\n * expression can be accomplished by simple replacement.\n *\n * From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n *\n * @private\n * @param  {string} string The string to be used as part of a regular\n *                         expression\n * @return {string}        A string that is safe to use in a regular\n *                         expression.\n *\n * @private\n */\n\n\nconst escapeRegExp = string => {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\n\nmodule.exports = modifyURLPrefix => {\n  if (!modifyURLPrefix || typeof modifyURLPrefix !== 'object' || Array.isArray(modifyURLPrefix)) {\n    throw new Error(errors['modify-url-prefix-bad-prefixes']);\n  } // If there are no entries in modifyURLPrefix, just return an identity\n  // function as a shortcut.\n\n\n  if (Object.keys(modifyURLPrefix).length === 0) {\n    return entry => entry;\n  }\n\n  Object.keys(modifyURLPrefix).forEach(key => {\n    if (typeof modifyURLPrefix[key] !== 'string') {\n      throw new Error(errors['modify-url-prefix-bad-prefixes']);\n    }\n  }); // Escape the user input so it's safe to use in a regex.\n\n  const safeModifyURLPrefixes = Object.keys(modifyURLPrefix).map(escapeRegExp); // Join all the `modifyURLPrefix` keys so a single regex can be used.\n\n  const prefixMatchesStrings = safeModifyURLPrefixes.join('|'); // Add `^` to the front the prefix matches so it only matches the start of\n  // a string.\n\n  const modifyRegex = new RegExp(`^(${prefixMatchesStrings})`);\n  return originalManifest => {\n    const manifest = originalManifest.map(entry => {\n      if (typeof entry.url !== 'string') {\n        throw new Error(errors['manifest-entry-bad-url']);\n      }\n\n      entry.url = entry.url.replace(modifyRegex, match => {\n        return modifyURLPrefix[match];\n      });\n      return entry;\n    });\n    return {\n      manifest\n    };\n  };\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-build/src/lib/modify-url-prefix-transform.js"],"names":["errors","require","escapeRegExp","string","replace","module","exports","modifyURLPrefix","Array","isArray","Error","Object","keys","length","entry","forEach","key","safeModifyURLPrefixes","map","prefixMatchesStrings","join","modifyRegex","RegExp","originalManifest","manifest","url","match"],"mappings":"AAAA;;;;;;;AAQA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;AAEA;;;;;;;;;;;;;;;;AAcA,MAAMC,YAAY,GAAIC,MAAD,IAAY;AAC/B,SAAOA,MAAM,CAACC,OAAP,CAAe,qBAAf,EAAsC,MAAtC,CAAP;AACD,CAFD;;AAIAC,MAAM,CAACC,OAAP,GAAkBC,eAAD,IAAqB;AACpC,MAAI,CAACA,eAAD,IACA,OAAOA,eAAP,KAA2B,QAD3B,IAEAC,KAAK,CAACC,OAAN,CAAcF,eAAd,CAFJ,EAEoC;AAClC,UAAM,IAAIG,KAAJ,CAAUV,MAAM,CAAC,gCAAD,CAAhB,CAAN;AACD,GALmC,CAOpC;AACA;;;AACA,MAAIW,MAAM,CAACC,IAAP,CAAYL,eAAZ,EAA6BM,MAA7B,KAAwC,CAA5C,EAA+C;AAC7C,WAAQC,KAAD,IAAWA,KAAlB;AACD;;AAEDH,EAAAA,MAAM,CAACC,IAAP,CAAYL,eAAZ,EAA6BQ,OAA7B,CAAsCC,GAAD,IAAS;AAC5C,QAAI,OAAOT,eAAe,CAACS,GAAD,CAAtB,KAAgC,QAApC,EAA8C;AAC5C,YAAM,IAAIN,KAAJ,CAAUV,MAAM,CAAC,gCAAD,CAAhB,CAAN;AACD;AACF,GAJD,EAboC,CAmBpC;;AACA,QAAMiB,qBAAqB,GAAGN,MAAM,CAACC,IAAP,CAAYL,eAAZ,EAA6BW,GAA7B,CAAiChB,YAAjC,CAA9B,CApBoC,CAqBpC;;AACA,QAAMiB,oBAAoB,GAAGF,qBAAqB,CAACG,IAAtB,CAA2B,GAA3B,CAA7B,CAtBoC,CAuBpC;AACA;;AACA,QAAMC,WAAW,GAAG,IAAIC,MAAJ,CAAY,KAAIH,oBAAqB,GAArC,CAApB;AAEA,SAAQI,gBAAD,IAAsB;AAC3B,UAAMC,QAAQ,GAAGD,gBAAgB,CAACL,GAAjB,CAAsBJ,KAAD,IAAW;AAC/C,UAAI,OAAOA,KAAK,CAACW,GAAb,KAAqB,QAAzB,EAAmC;AACjC,cAAM,IAAIf,KAAJ,CAAUV,MAAM,CAAC,wBAAD,CAAhB,CAAN;AACD;;AAEDc,MAAAA,KAAK,CAACW,GAAN,GAAYX,KAAK,CAACW,GAAN,CAAUrB,OAAV,CAAkBiB,WAAlB,EAAgCK,KAAD,IAAW;AACpD,eAAOnB,eAAe,CAACmB,KAAD,CAAtB;AACD,OAFW,CAAZ;AAIA,aAAOZ,KAAP;AACD,KAVgB,CAAjB;AAYA,WAAO;AAACU,MAAAA;AAAD,KAAP;AACD,GAdD;AAeD,CA1CD","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst errors = require('./errors');\n\n/**\n * Escaping user input to be treated as a literal string within a regular\n * expression can be accomplished by simple replacement.\n *\n * From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n *\n * @private\n * @param  {string} string The string to be used as part of a regular\n *                         expression\n * @return {string}        A string that is safe to use in a regular\n *                         expression.\n *\n * @private\n */\nconst escapeRegExp = (string) => {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\n\nmodule.exports = (modifyURLPrefix) => {\n  if (!modifyURLPrefix ||\n      typeof modifyURLPrefix !== 'object' ||\n      Array.isArray(modifyURLPrefix)) {\n    throw new Error(errors['modify-url-prefix-bad-prefixes']);\n  }\n\n  // If there are no entries in modifyURLPrefix, just return an identity\n  // function as a shortcut.\n  if (Object.keys(modifyURLPrefix).length === 0) {\n    return (entry) => entry;\n  }\n\n  Object.keys(modifyURLPrefix).forEach((key) => {\n    if (typeof modifyURLPrefix[key] !== 'string') {\n      throw new Error(errors['modify-url-prefix-bad-prefixes']);\n    }\n  });\n\n  // Escape the user input so it's safe to use in a regex.\n  const safeModifyURLPrefixes = Object.keys(modifyURLPrefix).map(escapeRegExp);\n  // Join all the `modifyURLPrefix` keys so a single regex can be used.\n  const prefixMatchesStrings = safeModifyURLPrefixes.join('|');\n  // Add `^` to the front the prefix matches so it only matches the start of\n  // a string.\n  const modifyRegex = new RegExp(`^(${prefixMatchesStrings})`);\n\n  return (originalManifest) => {\n    const manifest = originalManifest.map((entry) => {\n      if (typeof entry.url !== 'string') {\n        throw new Error(errors['manifest-entry-bad-url']);\n      }\n\n      entry.url = entry.url.replace(modifyRegex, (match) => {\n        return modifyURLPrefix[match];\n      });\n\n      return entry;\n    });\n\n    return {manifest};\n  };\n};\n"]},"metadata":{},"sourceType":"script"}