{"ast":null,"code":"var override = require('../utils/override');\n\nvar INTEGER_PATTERN = /^\\d+$/;\nvar ALL_UNITS = ['*', 'all'];\nvar DEFAULT_PRECISION = 'off'; // all precision changes are disabled\n\nvar DIRECTIVES_SEPARATOR = ','; // e.g. *=5,px=3\n\nvar DIRECTIVE_VALUE_SEPARATOR = '='; // e.g. *=5\n\nfunction roundingPrecisionFrom(source) {\n  return override(defaults(DEFAULT_PRECISION), buildPrecisionFrom(source));\n}\n\nfunction defaults(value) {\n  return {\n    'ch': value,\n    'cm': value,\n    'em': value,\n    'ex': value,\n    'in': value,\n    'mm': value,\n    'pc': value,\n    'pt': value,\n    'px': value,\n    'q': value,\n    'rem': value,\n    'vh': value,\n    'vmax': value,\n    'vmin': value,\n    'vw': value,\n    '%': value\n  };\n}\n\nfunction buildPrecisionFrom(source) {\n  if (source === null || source === undefined) {\n    return {};\n  }\n\n  if (typeof source == 'boolean') {\n    return {};\n  }\n\n  if (typeof source == 'number' && source == -1) {\n    return defaults(DEFAULT_PRECISION);\n  }\n\n  if (typeof source == 'number') {\n    return defaults(source);\n  }\n\n  if (typeof source == 'string' && INTEGER_PATTERN.test(source)) {\n    return defaults(parseInt(source));\n  }\n\n  if (typeof source == 'string' && source == DEFAULT_PRECISION) {\n    return defaults(DEFAULT_PRECISION);\n  }\n\n  if (typeof source == 'object') {\n    return source;\n  }\n\n  return source.split(DIRECTIVES_SEPARATOR).reduce(function (accumulator, directive) {\n    var directiveParts = directive.split(DIRECTIVE_VALUE_SEPARATOR);\n    var name = directiveParts[0];\n    var value = parseInt(directiveParts[1]);\n\n    if (isNaN(value) || value == -1) {\n      value = DEFAULT_PRECISION;\n    }\n\n    if (ALL_UNITS.indexOf(name) > -1) {\n      accumulator = override(accumulator, defaults(value));\n    } else {\n      accumulator[name] = value;\n    }\n\n    return accumulator;\n  }, {});\n}\n\nmodule.exports = {\n  DEFAULT: DEFAULT_PRECISION,\n  roundingPrecisionFrom: roundingPrecisionFrom\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/clean-css/lib/options/rounding-precision.js"],"names":["override","require","INTEGER_PATTERN","ALL_UNITS","DEFAULT_PRECISION","DIRECTIVES_SEPARATOR","DIRECTIVE_VALUE_SEPARATOR","roundingPrecisionFrom","source","defaults","buildPrecisionFrom","value","undefined","test","parseInt","split","reduce","accumulator","directive","directiveParts","name","isNaN","indexOf","module","exports","DEFAULT"],"mappings":"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","sourcesContent":["var override = require('../utils/override');\n\nvar INTEGER_PATTERN = /^\\d+$/;\n\nvar ALL_UNITS = ['*', 'all'];\nvar DEFAULT_PRECISION = 'off'; // all precision changes are disabled\nvar DIRECTIVES_SEPARATOR = ','; // e.g. *=5,px=3\nvar DIRECTIVE_VALUE_SEPARATOR = '='; // e.g. *=5\n\nfunction roundingPrecisionFrom(source) {\n  return override(defaults(DEFAULT_PRECISION), buildPrecisionFrom(source));\n}\n\nfunction defaults(value) {\n  return {\n    'ch': value,\n    'cm': value,\n    'em': value,\n    'ex': value,\n    'in': value,\n    'mm': value,\n    'pc': value,\n    'pt': value,\n    'px': value,\n    'q': value,\n    'rem': value,\n    'vh': value,\n    'vmax': value,\n    'vmin': value,\n    'vw': value,\n    '%': value\n  };\n}\n\nfunction buildPrecisionFrom(source) {\n  if (source === null || source === undefined) {\n    return {};\n  }\n\n  if (typeof source == 'boolean') {\n    return {};\n  }\n\n  if (typeof source == 'number' && source == -1) {\n    return defaults(DEFAULT_PRECISION);\n  }\n\n  if (typeof source == 'number') {\n    return defaults(source);\n  }\n\n  if (typeof source == 'string' && INTEGER_PATTERN.test(source)) {\n    return defaults(parseInt(source));\n  }\n\n  if (typeof source == 'string' && source == DEFAULT_PRECISION) {\n    return defaults(DEFAULT_PRECISION);\n  }\n\n  if (typeof source == 'object') {\n    return source;\n  }\n\n  return source\n    .split(DIRECTIVES_SEPARATOR)\n    .reduce(function (accumulator, directive) {\n      var directiveParts = directive.split(DIRECTIVE_VALUE_SEPARATOR);\n      var name = directiveParts[0];\n      var value = parseInt(directiveParts[1]);\n\n      if (isNaN(value) || value == -1) {\n        value = DEFAULT_PRECISION;\n      }\n\n      if (ALL_UNITS.indexOf(name) > -1) {\n        accumulator = override(accumulator, defaults(value));\n      } else {\n        accumulator[name] = value;\n      }\n\n      return accumulator;\n    }, {});\n}\n\nmodule.exports = {\n  DEFAULT: DEFAULT_PRECISION,\n  roundingPrecisionFrom: roundingPrecisionFrom\n};\n"]},"metadata":{},"sourceType":"script"}