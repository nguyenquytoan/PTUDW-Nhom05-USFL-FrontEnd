{"ast":null,"code":"/* eslint-env mocha */\nvar assert = require('assert');\n\nvar tls = require('tls');\n\nvar net = require('net');\n\nvar https = require('https');\n\nvar transport = require('spdy-transport');\n\nvar util = require('util');\n\nvar fixtures = require('./fixtures');\n\nvar spdy = require('../');\n\ndescribe('SPDY Server', function () {\n  fixtures.everyConfig(function (protocol, alpn, version, plain) {\n    var server;\n    var client;\n    beforeEach(function (done) {\n      server = spdy.createServer(Object.assign({\n        spdy: {\n          'x-forwarded-for': true,\n          plain: plain\n        }\n      }, fixtures.keys));\n      server.listen(fixtures.port, function () {\n        var socket = (plain ? net : tls).connect({\n          rejectUnauthorized: false,\n          port: fixtures.port,\n          ALPNProtocols: [alpn]\n        }, function () {\n          client = transport.connection.create(socket, {\n            protocol: protocol,\n            isServer: false\n          });\n          client.start(version);\n          done();\n        });\n      });\n    });\n    afterEach(function (done) {\n      client.socket.destroy();\n      server.close(done);\n    });\n    it('should process GET request', function (done) {\n      var stream = client.request({\n        method: 'GET',\n        path: '/get',\n        headers: {\n          a: 'b'\n        }\n      }, function (err) {\n        assert(!err);\n        stream.on('error', err => {\n          done(err);\n        });\n        stream.on('response', function (status, headers) {\n          assert.strictEqual(status, 200);\n          assert.strictEqual(headers.ok, 'yes');\n          fixtures.expectData(stream, 'response', done);\n        });\n        stream.end();\n      });\n      server.on('request', function (req, res) {\n        assert.strictEqual(req.isSpdy, res.isSpdy);\n        assert.strictEqual(req.spdyVersion, res.spdyVersion);\n        assert(req.isSpdy);\n\n        if (!plain) {\n          assert(req.socket.encrypted);\n          assert(req.socket.getPeerCertificate());\n        } // Auto-detection\n\n\n        if (version === 3.1) {\n          assert(req.spdyVersion >= 3 && req.spdyVersion <= 3.1);\n        } else {\n          assert.strictEqual(req.spdyVersion, version);\n        }\n\n        assert(req.spdyStream);\n        assert(res.spdyStream);\n        assert.strictEqual(req.method, 'GET');\n        assert.strictEqual(req.url, '/get');\n        assert.deepStrictEqual(req.headers, {\n          a: 'b',\n          host: 'localhost'\n        });\n        req.on('end', function () {\n          res.writeHead(200, {\n            ok: 'yes'\n          });\n          res.end('response');\n          assert(res.finished, 'res.finished should be set');\n        });\n        req.resume();\n      });\n    });\n    it('should process POST request', function (done) {\n      var stream = client.request({\n        method: 'POST',\n        path: '/post'\n      }, function (err) {\n        assert(!err);\n        stream.on('response', function (status, headers) {\n          assert.strictEqual(status, 200);\n          assert.strictEqual(headers.ok, 'yes');\n          fixtures.expectData(stream, 'response', next);\n        });\n        stream.end('request');\n      });\n      server.on('request', function (req, res) {\n        assert.strictEqual(req.method, 'POST');\n        assert.strictEqual(req.url, '/post');\n        res.writeHead(200, {\n          ok: 'yes'\n        });\n        res.end('response');\n        fixtures.expectData(req, 'request', next);\n      });\n      var waiting = 2;\n\n      function next() {\n        if (--waiting === 0) {\n          return done();\n        }\n      }\n    });\n    it('should process expect-continue request', function (done) {\n      var stream = client.request({\n        method: 'GET',\n        path: '/get',\n        headers: {\n          Expect: '100-continue'\n        }\n      }, function (err) {\n        assert(!err);\n        stream.on('response', function (status, headers) {\n          assert.strictEqual(status, 100);\n          fixtures.expectData(stream, 'response', done);\n        });\n        stream.end();\n      });\n      server.on('request', function (req, res) {\n        req.on('end', function () {\n          res.end('response');\n        });\n        req.resume();\n      });\n    });\n    it('should emit `checkContinue` request', function (done) {\n      var stream = client.request({\n        method: 'GET',\n        path: '/get',\n        headers: {\n          Expect: '100-continue'\n        }\n      }, function (err) {\n        assert(!err);\n        stream.on('response', function (status, headers) {\n          assert.strictEqual(status, 100);\n          fixtures.expectData(stream, 'response', done);\n        });\n        stream.end();\n      });\n      server.on('checkContinue', function (req, res) {\n        req.on('end', function () {\n          res.writeContinue();\n          res.end('response');\n        });\n        req.resume();\n      });\n    });\n    it('should send PUSH_PROMISE', function (done) {\n      var stream = client.request({\n        method: 'POST',\n        path: '/page'\n      }, function (err) {\n        assert(!err);\n        stream.on('pushPromise', function (push) {\n          assert.strictEqual(push.path, '/push');\n          assert.strictEqual(push.headers.yes, 'push');\n          fixtures.expectData(push, 'push', next);\n          fixtures.expectData(stream, 'response', next);\n        });\n        stream.end('request');\n      });\n      server.on('request', function (req, res) {\n        assert.strictEqual(req.method, 'POST');\n        assert.strictEqual(req.url, '/page');\n        res.writeHead(200, {\n          ok: 'yes'\n        });\n        var push = res.push('/push', {\n          request: {\n            yes: 'push'\n          }\n        });\n        push.end('push');\n        res.end('response');\n        fixtures.expectData(req, 'request', next);\n      });\n      var waiting = 3;\n\n      function next() {\n        if (--waiting === 0) {\n          return done();\n        }\n      }\n    });\n    it('should receive trailing headers', function (done) {\n      var stream = client.request({\n        method: 'POST',\n        path: '/post'\n      }, function (err) {\n        assert(!err);\n        stream.sendHeaders({\n          trai: 'ler'\n        });\n        stream.end();\n        stream.on('response', function (status, headers) {\n          assert.strictEqual(status, 200);\n          assert.strictEqual(headers.ok, 'yes');\n          fixtures.expectData(stream, 'response', done);\n        });\n      });\n      server.on('request', function (req, res) {\n        var gotHeaders = false;\n        req.on('trailers', function (headers) {\n          gotHeaders = true;\n          assert.strictEqual(headers.trai, 'ler');\n        });\n        req.on('end', function () {\n          assert(gotHeaders);\n          res.writeHead(200, {\n            ok: 'yes'\n          });\n          res.end('response');\n        });\n        req.resume();\n      });\n    });\n    it('should call .writeHead() automatically', function (done) {\n      var stream = client.request({\n        method: 'POST',\n        path: '/post'\n      }, function (err) {\n        assert(!err);\n        stream.on('response', function (status, headers) {\n          assert.strictEqual(status, 300);\n          fixtures.expectData(stream, 'response', done);\n        });\n        stream.end();\n      });\n      server.on('request', function (req, res) {\n        req.on('end', function () {\n          res.statusCode = 300;\n          res.end('response');\n        });\n        req.resume();\n      });\n    });\n    it('should not crash on .writeHead() after socket close', function (done) {\n      var stream = client.request({\n        method: 'POST',\n        path: '/post'\n      }, function (err) {\n        assert(!err);\n        setTimeout(function () {\n          client.socket.destroy();\n        }, 50);\n        stream.on('error', function () {});\n        stream.end();\n      });\n      server.on('request', function (req, res) {\n        req.connection.on('close', function () {\n          assert.doesNotThrow(function () {\n            res.writeHead(200);\n            res.end('response');\n          });\n          done();\n        });\n      });\n    });\n    it('should not crash on .push() after socket close', function (done) {\n      var stream = client.request({\n        method: 'POST',\n        path: '/post'\n      }, function (err) {\n        assert(!err);\n        setTimeout(function () {\n          client.socket.destroy();\n        }, 50);\n        stream.on('error', function () {});\n        stream.end();\n      });\n      server.on('request', function (req, res) {\n        req.connection.on('close', function () {\n          assert.doesNotThrow(function () {\n            assert.strictEqual(res.push('/push', {}), undefined);\n            res.end('response');\n          });\n          done();\n        });\n      });\n    });\n    it('should end response after writing everything down', function (done) {\n      var stream = client.request({\n        method: 'GET',\n        path: '/post'\n      }, function (err) {\n        assert(!err);\n        stream.on('response', function (status, headers) {\n          assert.strictEqual(status, 200);\n          fixtures.expectData(stream, 'hello world, what\\'s up?', done);\n        });\n        stream.end();\n      });\n      server.on('request', function (req, res) {\n        req.resume();\n        res.writeHead(200);\n        res.write('hello ');\n        res.write('world');\n        res.write(', what\\'s');\n        res.write(' up?');\n        res.end();\n      });\n    });\n    it('should handle x-forwarded-for', function (done) {\n      client.sendXForwardedFor('1.2.3.4');\n      var stream = client.request({\n        method: 'GET',\n        path: '/post'\n      }, function (err) {\n        assert(!err);\n        stream.resume();\n        stream.on('end', done);\n        stream.end();\n      });\n      server.on('request', function (req, res) {\n        assert.strictEqual(req.headers['x-forwarded-for'], '1.2.3.4');\n        req.resume();\n        res.end();\n      });\n    });\n    it('should destroy request after end', function (done) {\n      var stream = client.request({\n        method: 'POST',\n        path: '/post'\n      }, function (err) {\n        assert(!err);\n      });\n      stream.end();\n      stream.on('error', function () {});\n      server.on('request', function (req, res) {\n        res.end();\n        res.destroy();\n        res.socket.on('close', function () {\n          done();\n        });\n      });\n    });\n  });\n  it('should respond to http/1.1', function (done) {\n    var server = spdy.createServer(fixtures.keys, function (req, res) {\n      assert.strictEqual(req.isSpdy, res.isSpdy);\n      assert.strictEqual(req.spdyVersion, res.spdyVersion);\n      assert(!req.isSpdy);\n      assert.strictEqual(req.spdyVersion, 1);\n      res.writeHead(200);\n      res.end();\n    });\n    server.listen(fixtures.port, function () {\n      var req = https.request({\n        agent: false,\n        rejectUnauthorized: false,\n        NPNProtocols: ['http/1.1'],\n        port: fixtures.port,\n        method: 'GET',\n        path: '/'\n      }, function (res) {\n        assert.strictEqual(res.statusCode, 200);\n        res.resume();\n        res.on('end', function () {\n          server.close(done);\n        });\n      });\n      req.end();\n    });\n  });\n  it('should support custom base', function (done) {\n    function Pseuver(options, listener) {\n      https.Server.call(this, options, listener);\n    }\n\n    util.inherits(Pseuver, https.Server);\n    var server = spdy.createServer(Pseuver, fixtures.keys, function (req, res) {\n      assert.strictEqual(req.isSpdy, res.isSpdy);\n      assert.strictEqual(req.spdyVersion, res.spdyVersion);\n      assert(!req.isSpdy);\n      assert.strictEqual(req.spdyVersion, 1);\n      res.writeHead(200);\n      res.end();\n    });\n    server.listen(fixtures.port, function () {\n      var req = https.request({\n        agent: false,\n        rejectUnauthorized: false,\n        NPNProtocols: ['http/1.1'],\n        port: fixtures.port,\n        method: 'GET',\n        path: '/'\n      }, function (res) {\n        assert.strictEqual(res.statusCode, 200);\n        res.resume();\n        res.on('end', function () {\n          server.close(done);\n        });\n      });\n      req.end();\n    });\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/spdy/test/server-test.js"],"names":["assert","require","tls","net","https","transport","util","fixtures","spdy","describe","everyConfig","protocol","alpn","version","plain","server","client","beforeEach","done","createServer","Object","assign","keys","listen","port","socket","connect","rejectUnauthorized","ALPNProtocols","connection","create","isServer","start","afterEach","destroy","close","it","stream","request","method","path","headers","a","err","on","status","strictEqual","ok","expectData","end","req","res","isSpdy","spdyVersion","encrypted","getPeerCertificate","spdyStream","url","deepStrictEqual","host","writeHead","finished","resume","next","waiting","Expect","writeContinue","push","yes","sendHeaders","trai","gotHeaders","statusCode","setTimeout","doesNotThrow","undefined","write","sendXForwardedFor","agent","NPNProtocols","Pseuver","options","listener","Server","call","inherits"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\n\nvar assert = require('assert')\nvar tls = require('tls')\nvar net = require('net')\nvar https = require('https')\nvar transport = require('spdy-transport')\nvar util = require('util')\n\nvar fixtures = require('./fixtures')\nvar spdy = require('../')\n\ndescribe('SPDY Server', function () {\n  fixtures.everyConfig(function (protocol, alpn, version, plain) {\n    var server\n    var client\n\n    beforeEach(function (done) {\n      server = spdy.createServer(Object.assign({\n        spdy: {\n          'x-forwarded-for': true,\n          plain: plain\n        }\n      }, fixtures.keys))\n\n      server.listen(fixtures.port, function () {\n        var socket = (plain ? net : tls).connect({\n          rejectUnauthorized: false,\n          port: fixtures.port,\n          ALPNProtocols: [alpn]\n        }, function () {\n          client = transport.connection.create(socket, {\n            protocol: protocol,\n            isServer: false\n          })\n          client.start(version)\n          done()\n        })\n      })\n    })\n\n    afterEach(function (done) {\n      client.socket.destroy()\n      server.close(done)\n    })\n\n    it('should process GET request', function (done) {\n      var stream = client.request({\n        method: 'GET',\n        path: '/get',\n        headers: {\n          a: 'b'\n        }\n      }, function (err) {\n        assert(!err)\n\n        stream.on('error', (err) => {\n          done(err)\n        })\n\n        stream.on('response', function (status, headers) {\n          assert.strictEqual(status, 200)\n          assert.strictEqual(headers.ok, 'yes')\n\n          fixtures.expectData(stream, 'response', done)\n        })\n\n        stream.end()\n      })\n\n      server.on('request', function (req, res) {\n        assert.strictEqual(req.isSpdy, res.isSpdy)\n        assert.strictEqual(req.spdyVersion, res.spdyVersion)\n        assert(req.isSpdy)\n        if (!plain) {\n          assert(req.socket.encrypted)\n          assert(req.socket.getPeerCertificate())\n        }\n\n        // Auto-detection\n        if (version === 3.1) {\n          assert(req.spdyVersion >= 3 && req.spdyVersion <= 3.1)\n        } else {\n          assert.strictEqual(req.spdyVersion, version)\n        }\n        assert(req.spdyStream)\n        assert(res.spdyStream)\n\n        assert.strictEqual(req.method, 'GET')\n        assert.strictEqual(req.url, '/get')\n        assert.deepStrictEqual(req.headers, { a: 'b', host: 'localhost' })\n\n        req.on('end', function () {\n          res.writeHead(200, {\n            ok: 'yes'\n          })\n          res.end('response')\n          assert(res.finished, 'res.finished should be set')\n        })\n        req.resume()\n      })\n    })\n\n    it('should process POST request', function (done) {\n      var stream = client.request({\n        method: 'POST',\n        path: '/post'\n      }, function (err) {\n        assert(!err)\n\n        stream.on('response', function (status, headers) {\n          assert.strictEqual(status, 200)\n          assert.strictEqual(headers.ok, 'yes')\n\n          fixtures.expectData(stream, 'response', next)\n        })\n\n        stream.end('request')\n      })\n\n      server.on('request', function (req, res) {\n        assert.strictEqual(req.method, 'POST')\n        assert.strictEqual(req.url, '/post')\n\n        res.writeHead(200, {\n          ok: 'yes'\n        })\n        res.end('response')\n\n        fixtures.expectData(req, 'request', next)\n      })\n\n      var waiting = 2\n      function next () {\n        if (--waiting === 0) {\n          return done()\n        }\n      }\n    })\n\n    it('should process expect-continue request', function (done) {\n      var stream = client.request({\n        method: 'GET',\n        path: '/get',\n        headers: {\n          Expect: '100-continue'\n        }\n      }, function (err) {\n        assert(!err)\n\n        stream.on('response', function (status, headers) {\n          assert.strictEqual(status, 100)\n\n          fixtures.expectData(stream, 'response', done)\n        })\n\n        stream.end()\n      })\n\n      server.on('request', function (req, res) {\n        req.on('end', function () {\n          res.end('response')\n        })\n        req.resume()\n      })\n    })\n\n    it('should emit `checkContinue` request', function (done) {\n      var stream = client.request({\n        method: 'GET',\n        path: '/get',\n        headers: {\n          Expect: '100-continue'\n        }\n      }, function (err) {\n        assert(!err)\n\n        stream.on('response', function (status, headers) {\n          assert.strictEqual(status, 100)\n\n          fixtures.expectData(stream, 'response', done)\n        })\n\n        stream.end()\n      })\n\n      server.on('checkContinue', function (req, res) {\n        req.on('end', function () {\n          res.writeContinue()\n          res.end('response')\n        })\n        req.resume()\n      })\n    })\n\n    it('should send PUSH_PROMISE', function (done) {\n      var stream = client.request({\n        method: 'POST',\n        path: '/page'\n      }, function (err) {\n        assert(!err)\n\n        stream.on('pushPromise', function (push) {\n          assert.strictEqual(push.path, '/push')\n          assert.strictEqual(push.headers.yes, 'push')\n\n          fixtures.expectData(push, 'push', next)\n          fixtures.expectData(stream, 'response', next)\n        })\n\n        stream.end('request')\n      })\n\n      server.on('request', function (req, res) {\n        assert.strictEqual(req.method, 'POST')\n        assert.strictEqual(req.url, '/page')\n\n        res.writeHead(200, {\n          ok: 'yes'\n        })\n\n        var push = res.push('/push', {\n          request: {\n            yes: 'push'\n          }\n        })\n        push.end('push')\n\n        res.end('response')\n\n        fixtures.expectData(req, 'request', next)\n      })\n\n      var waiting = 3\n      function next () {\n        if (--waiting === 0) {\n          return done()\n        }\n      }\n    })\n\n    it('should receive trailing headers', function (done) {\n      var stream = client.request({\n        method: 'POST',\n        path: '/post'\n      }, function (err) {\n        assert(!err)\n\n        stream.sendHeaders({ trai: 'ler' })\n        stream.end()\n\n        stream.on('response', function (status, headers) {\n          assert.strictEqual(status, 200)\n          assert.strictEqual(headers.ok, 'yes')\n\n          fixtures.expectData(stream, 'response', done)\n        })\n      })\n\n      server.on('request', function (req, res) {\n        var gotHeaders = false\n        req.on('trailers', function (headers) {\n          gotHeaders = true\n          assert.strictEqual(headers.trai, 'ler')\n        })\n\n        req.on('end', function () {\n          assert(gotHeaders)\n\n          res.writeHead(200, {\n            ok: 'yes'\n          })\n          res.end('response')\n        })\n        req.resume()\n      })\n    })\n\n    it('should call .writeHead() automatically', function (done) {\n      var stream = client.request({\n        method: 'POST',\n        path: '/post'\n      }, function (err) {\n        assert(!err)\n\n        stream.on('response', function (status, headers) {\n          assert.strictEqual(status, 300)\n\n          fixtures.expectData(stream, 'response', done)\n        })\n        stream.end()\n      })\n\n      server.on('request', function (req, res) {\n        req.on('end', function () {\n          res.statusCode = 300\n          res.end('response')\n        })\n        req.resume()\n      })\n    })\n\n    it('should not crash on .writeHead() after socket close', function (done) {\n      var stream = client.request({\n        method: 'POST',\n        path: '/post'\n      }, function (err) {\n        assert(!err)\n\n        setTimeout(function () {\n          client.socket.destroy()\n        }, 50)\n        stream.on('error', function () {})\n        stream.end()\n      })\n\n      server.on('request', function (req, res) {\n        req.connection.on('close', function () {\n          assert.doesNotThrow(function () {\n            res.writeHead(200)\n            res.end('response')\n          })\n          done()\n        })\n      })\n    })\n\n    it('should not crash on .push() after socket close', function (done) {\n      var stream = client.request({\n        method: 'POST',\n        path: '/post'\n      }, function (err) {\n        assert(!err)\n\n        setTimeout(function () {\n          client.socket.destroy()\n        }, 50)\n        stream.on('error', function () {})\n        stream.end()\n      })\n\n      server.on('request', function (req, res) {\n        req.connection.on('close', function () {\n          assert.doesNotThrow(function () {\n            assert.strictEqual(res.push('/push', {}), undefined)\n            res.end('response')\n          })\n          done()\n        })\n      })\n    })\n\n    it('should end response after writing everything down', function (done) {\n      var stream = client.request({\n        method: 'GET',\n        path: '/post'\n      }, function (err) {\n        assert(!err)\n\n        stream.on('response', function (status, headers) {\n          assert.strictEqual(status, 200)\n\n          fixtures.expectData(stream, 'hello world, what\\'s up?', done)\n        })\n\n        stream.end()\n      })\n\n      server.on('request', function (req, res) {\n        req.resume()\n        res.writeHead(200)\n        res.write('hello ')\n        res.write('world')\n        res.write(', what\\'s')\n        res.write(' up?')\n        res.end()\n      })\n    })\n\n    it('should handle x-forwarded-for', function (done) {\n      client.sendXForwardedFor('1.2.3.4')\n\n      var stream = client.request({\n        method: 'GET',\n        path: '/post'\n      }, function (err) {\n        assert(!err)\n\n        stream.resume()\n        stream.on('end', done)\n        stream.end()\n      })\n\n      server.on('request', function (req, res) {\n        assert.strictEqual(req.headers['x-forwarded-for'], '1.2.3.4')\n        req.resume()\n        res.end()\n      })\n    })\n\n    it('should destroy request after end', function (done) {\n      var stream = client.request({\n        method: 'POST',\n        path: '/post'\n      }, function (err) {\n        assert(!err)\n      })\n      stream.end()\n      stream.on('error', function () {})\n\n      server.on('request', function (req, res) {\n        res.end()\n        res.destroy()\n        res.socket.on('close', function () {\n          done()\n        })\n      })\n    })\n  })\n\n  it('should respond to http/1.1', function (done) {\n    var server = spdy.createServer(fixtures.keys, function (req, res) {\n      assert.strictEqual(req.isSpdy, res.isSpdy)\n      assert.strictEqual(req.spdyVersion, res.spdyVersion)\n      assert(!req.isSpdy)\n      assert.strictEqual(req.spdyVersion, 1)\n\n      res.writeHead(200)\n      res.end()\n    })\n\n    server.listen(fixtures.port, function () {\n      var req = https.request({\n        agent: false,\n        rejectUnauthorized: false,\n        NPNProtocols: ['http/1.1'],\n        port: fixtures.port,\n        method: 'GET',\n        path: '/'\n      }, function (res) {\n        assert.strictEqual(res.statusCode, 200)\n        res.resume()\n        res.on('end', function () {\n          server.close(done)\n        })\n      })\n\n      req.end()\n    })\n  })\n\n  it('should support custom base', function (done) {\n    function Pseuver (options, listener) {\n      https.Server.call(this, options, listener)\n    }\n    util.inherits(Pseuver, https.Server)\n\n    var server = spdy.createServer(Pseuver, fixtures.keys, function (req, res) {\n      assert.strictEqual(req.isSpdy, res.isSpdy)\n      assert.strictEqual(req.spdyVersion, res.spdyVersion)\n      assert(!req.isSpdy)\n      assert.strictEqual(req.spdyVersion, 1)\n\n      res.writeHead(200)\n      res.end()\n    })\n\n    server.listen(fixtures.port, function () {\n      var req = https.request({\n        agent: false,\n        rejectUnauthorized: false,\n        NPNProtocols: ['http/1.1'],\n        port: fixtures.port,\n        method: 'GET',\n        path: '/'\n      }, function (res) {\n        assert.strictEqual(res.statusCode, 200)\n        res.resume()\n        res.on('end', function () {\n          server.close(done)\n        })\n      })\n\n      req.end()\n    })\n  })\n})\n"]},"metadata":{},"sourceType":"script"}