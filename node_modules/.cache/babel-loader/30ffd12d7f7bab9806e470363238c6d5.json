{"ast":null,"code":"/**\n * @fileoverview Disallows or enforces spaces inside computed properties.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent spacing inside computed property brackets\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/computed-property-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }, {\n      type: \"object\",\n      properties: {\n        enforceForClassMembers: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedSpaceBefore: \"There should be no space before '{{tokenValue}}'.\",\n      unexpectedSpaceAfter: \"There should be no space after '{{tokenValue}}'.\",\n      missingSpaceBefore: \"A space is required before '{{tokenValue}}'.\",\n      missingSpaceAfter: \"A space is required after '{{tokenValue}}'.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const propertyNameMustBeSpaced = context.options[0] === \"always\"; // default is \"never\"\n\n    const enforceForClassMembers = context.options[1] && context.options[1].enforceForClassMembers; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Reports that there shouldn't be a space after the first token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @param {Token} tokenAfter The token after `token`.\n     * @returns {void}\n     */\n\n    function reportNoBeginningSpace(node, token, tokenAfter) {\n      context.report({\n        node,\n        loc: token.loc.start,\n        messageId: \"unexpectedSpaceAfter\",\n        data: {\n          tokenValue: token.value\n        },\n\n        fix(fixer) {\n          return fixer.removeRange([token.range[1], tokenAfter.range[0]]);\n        }\n\n      });\n    }\n    /**\n     * Reports that there shouldn't be a space before the last token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @param {Token} tokenBefore The token before `token`.\n     * @returns {void}\n     */\n\n\n    function reportNoEndingSpace(node, token, tokenBefore) {\n      context.report({\n        node,\n        loc: token.loc.start,\n        messageId: \"unexpectedSpaceBefore\",\n        data: {\n          tokenValue: token.value\n        },\n\n        fix(fixer) {\n          return fixer.removeRange([tokenBefore.range[1], token.range[0]]);\n        }\n\n      });\n    }\n    /**\n     * Reports that there should be a space after the first token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n\n\n    function reportRequiredBeginningSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc.start,\n        messageId: \"missingSpaceAfter\",\n        data: {\n          tokenValue: token.value\n        },\n\n        fix(fixer) {\n          return fixer.insertTextAfter(token, \" \");\n        }\n\n      });\n    }\n    /**\n     * Reports that there should be a space before the last token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n\n\n    function reportRequiredEndingSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc.start,\n        messageId: \"missingSpaceBefore\",\n        data: {\n          tokenValue: token.value\n        },\n\n        fix(fixer) {\n          return fixer.insertTextBefore(token, \" \");\n        }\n\n      });\n    }\n    /**\n     * Returns a function that checks the spacing of a node on the property name\n     * that was passed in.\n     * @param {string} propertyName The property on the node to check for spacing\n     * @returns {Function} A function that will check spacing on a node\n     */\n\n\n    function checkSpacing(propertyName) {\n      return function (node) {\n        if (!node.computed) {\n          return;\n        }\n\n        const property = node[propertyName];\n        const before = sourceCode.getTokenBefore(property, astUtils.isOpeningBracketToken),\n              first = sourceCode.getTokenAfter(before, {\n          includeComments: true\n        }),\n              after = sourceCode.getTokenAfter(property, astUtils.isClosingBracketToken),\n              last = sourceCode.getTokenBefore(after, {\n          includeComments: true\n        });\n\n        if (astUtils.isTokenOnSameLine(before, first)) {\n          if (propertyNameMustBeSpaced) {\n            if (!sourceCode.isSpaceBetweenTokens(before, first) && astUtils.isTokenOnSameLine(before, first)) {\n              reportRequiredBeginningSpace(node, before);\n            }\n          } else {\n            if (sourceCode.isSpaceBetweenTokens(before, first)) {\n              reportNoBeginningSpace(node, before, first);\n            }\n          }\n        }\n\n        if (astUtils.isTokenOnSameLine(last, after)) {\n          if (propertyNameMustBeSpaced) {\n            if (!sourceCode.isSpaceBetweenTokens(last, after) && astUtils.isTokenOnSameLine(last, after)) {\n              reportRequiredEndingSpace(node, after);\n            }\n          } else {\n            if (sourceCode.isSpaceBetweenTokens(last, after)) {\n              reportNoEndingSpace(node, after, last);\n            }\n          }\n        }\n      };\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    const listeners = {\n      Property: checkSpacing(\"key\"),\n      MemberExpression: checkSpacing(\"property\")\n    };\n\n    if (enforceForClassMembers) {\n      listeners.MethodDefinition = checkSpacing(\"key\");\n    }\n\n    return listeners;\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/computed-property-spacing.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","properties","enforceForClassMembers","default","additionalProperties","messages","unexpectedSpaceBefore","unexpectedSpaceAfter","missingSpaceBefore","missingSpaceAfter","create","context","sourceCode","getSourceCode","propertyNameMustBeSpaced","options","reportNoBeginningSpace","node","token","tokenAfter","report","loc","start","messageId","data","tokenValue","value","fix","fixer","removeRange","range","reportNoEndingSpace","tokenBefore","reportRequiredBeginningSpace","insertTextAfter","reportRequiredEndingSpace","insertTextBefore","checkSpacing","propertyName","computed","property","before","getTokenBefore","isOpeningBracketToken","first","getTokenAfter","includeComments","after","isClosingBracketToken","last","isTokenOnSameLine","isSpaceBetweenTokens","listeners","Property","MemberExpression","MethodDefinition"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Disallows or enforces spaces inside computed properties.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent spacing inside computed property brackets\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/computed-property-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    enforceForClassMembers: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpectedSpaceBefore: \"There should be no space before '{{tokenValue}}'.\",\n            unexpectedSpaceAfter: \"There should be no space after '{{tokenValue}}'.\",\n\n            missingSpaceBefore: \"A space is required before '{{tokenValue}}'.\",\n            missingSpaceAfter: \"A space is required after '{{tokenValue}}'.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        const propertyNameMustBeSpaced = context.options[0] === \"always\"; // default is \"never\"\n        const enforceForClassMembers = context.options[1] && context.options[1].enforceForClassMembers;\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports that there shouldn't be a space after the first token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @param {Token} tokenAfter The token after `token`.\n         * @returns {void}\n         */\n        function reportNoBeginningSpace(node, token, tokenAfter) {\n            context.report({\n                node,\n                loc: token.loc.start,\n                messageId: \"unexpectedSpaceAfter\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.removeRange([token.range[1], tokenAfter.range[0]]);\n                }\n            });\n        }\n\n        /**\n         * Reports that there shouldn't be a space before the last token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @param {Token} tokenBefore The token before `token`.\n         * @returns {void}\n         */\n        function reportNoEndingSpace(node, token, tokenBefore) {\n            context.report({\n                node,\n                loc: token.loc.start,\n                messageId: \"unexpectedSpaceBefore\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.removeRange([tokenBefore.range[1], token.range[0]]);\n                }\n            });\n        }\n\n        /**\n         * Reports that there should be a space after the first token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportRequiredBeginningSpace(node, token) {\n            context.report({\n                node,\n                loc: token.loc.start,\n                messageId: \"missingSpaceAfter\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.insertTextAfter(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Reports that there should be a space before the last token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportRequiredEndingSpace(node, token) {\n            context.report({\n                node,\n                loc: token.loc.start,\n                messageId: \"missingSpaceBefore\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.insertTextBefore(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Returns a function that checks the spacing of a node on the property name\n         * that was passed in.\n         * @param {string} propertyName The property on the node to check for spacing\n         * @returns {Function} A function that will check spacing on a node\n         */\n        function checkSpacing(propertyName) {\n            return function(node) {\n                if (!node.computed) {\n                    return;\n                }\n\n                const property = node[propertyName];\n\n                const before = sourceCode.getTokenBefore(property, astUtils.isOpeningBracketToken),\n                    first = sourceCode.getTokenAfter(before, { includeComments: true }),\n                    after = sourceCode.getTokenAfter(property, astUtils.isClosingBracketToken),\n                    last = sourceCode.getTokenBefore(after, { includeComments: true });\n\n                if (astUtils.isTokenOnSameLine(before, first)) {\n                    if (propertyNameMustBeSpaced) {\n                        if (!sourceCode.isSpaceBetweenTokens(before, first) && astUtils.isTokenOnSameLine(before, first)) {\n                            reportRequiredBeginningSpace(node, before);\n                        }\n                    } else {\n                        if (sourceCode.isSpaceBetweenTokens(before, first)) {\n                            reportNoBeginningSpace(node, before, first);\n                        }\n                    }\n                }\n\n                if (astUtils.isTokenOnSameLine(last, after)) {\n                    if (propertyNameMustBeSpaced) {\n                        if (!sourceCode.isSpaceBetweenTokens(last, after) && astUtils.isTokenOnSameLine(last, after)) {\n                            reportRequiredEndingSpace(node, after);\n                        }\n                    } else {\n                        if (sourceCode.isSpaceBetweenTokens(last, after)) {\n                            reportNoEndingSpace(node, after, last);\n                        }\n                    }\n                }\n            };\n        }\n\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        const listeners = {\n            Property: checkSpacing(\"key\"),\n            MemberExpression: checkSpacing(\"property\")\n        };\n\n        if (enforceForClassMembers) {\n            listeners.MethodDefinition = checkSpacing(\"key\");\n        }\n\n        return listeners;\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}