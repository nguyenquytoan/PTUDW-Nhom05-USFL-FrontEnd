{"ast":null,"code":"/**\n * @fileoverview A rule to disallow unnecessary `.call()` and `.apply()`.\n * @author Toru Nagashima\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a node is a `.call()`/`.apply()`.\n * @param {ASTNode} node A CallExpression node to check.\n * @returns {boolean} Whether or not the node is a `.call()`/`.apply()`.\n */\n\n\nfunction isCallOrNonVariadicApply(node) {\n  return node.callee.type === \"MemberExpression\" && node.callee.property.type === \"Identifier\" && node.callee.computed === false && (node.callee.property.name === \"call\" && node.arguments.length >= 1 || node.callee.property.name === \"apply\" && node.arguments.length === 2 && node.arguments[1].type === \"ArrayExpression\");\n}\n/**\n * Checks whether or not `thisArg` is not changed by `.call()`/`.apply()`.\n * @param {ASTNode|null} expectedThis The node that is the owner of the applied function.\n * @param {ASTNode} thisArg The node that is given to the first argument of the `.call()`/`.apply()`.\n * @param {SourceCode} sourceCode The ESLint source code object.\n * @returns {boolean} Whether or not `thisArg` is not changed by `.call()`/`.apply()`.\n */\n\n\nfunction isValidThisArg(expectedThis, thisArg, sourceCode) {\n  if (!expectedThis) {\n    return astUtils.isNullOrUndefined(thisArg);\n  }\n\n  return astUtils.equalTokens(expectedThis, thisArg, sourceCode);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unnecessary calls to `.call()` and `.apply()`\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-useless-call\"\n    },\n    schema: []\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      CallExpression(node) {\n        if (!isCallOrNonVariadicApply(node)) {\n          return;\n        }\n\n        const applied = node.callee.object;\n        const expectedThis = applied.type === \"MemberExpression\" ? applied.object : null;\n        const thisArg = node.arguments[0];\n\n        if (isValidThisArg(expectedThis, thisArg, sourceCode)) {\n          context.report({\n            node,\n            message: \"unnecessary '.{{name}}()'.\",\n            data: {\n              name: node.callee.property.name\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-useless-call.js"],"names":["astUtils","require","isCallOrNonVariadicApply","node","callee","type","property","computed","name","arguments","length","isValidThisArg","expectedThis","thisArg","sourceCode","isNullOrUndefined","equalTokens","module","exports","meta","docs","description","category","recommended","url","schema","create","context","getSourceCode","CallExpression","applied","object","report","message","data"],"mappings":"AAAA;;;;AAKA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;;;;;AAKA,SAASC,wBAAT,CAAkCC,IAAlC,EAAwC;AACpC,SACIA,IAAI,CAACC,MAAL,CAAYC,IAAZ,KAAqB,kBAArB,IACAF,IAAI,CAACC,MAAL,CAAYE,QAAZ,CAAqBD,IAArB,KAA8B,YAD9B,IAEAF,IAAI,CAACC,MAAL,CAAYG,QAAZ,KAAyB,KAFzB,KAIKJ,IAAI,CAACC,MAAL,CAAYE,QAAZ,CAAqBE,IAArB,KAA8B,MAA9B,IAAwCL,IAAI,CAACM,SAAL,CAAeC,MAAf,IAAyB,CAAlE,IACCP,IAAI,CAACC,MAAL,CAAYE,QAAZ,CAAqBE,IAArB,KAA8B,OAA9B,IAAyCL,IAAI,CAACM,SAAL,CAAeC,MAAf,KAA0B,CAAnE,IAAwEP,IAAI,CAACM,SAAL,CAAe,CAAf,EAAkBJ,IAAlB,KAA2B,iBALxG,CADJ;AASH;AAGD;;;;;;;;;AAOA,SAASM,cAAT,CAAwBC,YAAxB,EAAsCC,OAAtC,EAA+CC,UAA/C,EAA2D;AACvD,MAAI,CAACF,YAAL,EAAmB;AACf,WAAOZ,QAAQ,CAACe,iBAAT,CAA2BF,OAA3B,CAAP;AACH;;AACD,SAAOb,QAAQ,CAACgB,WAAT,CAAqBJ,YAArB,EAAmCC,OAAnC,EAA4CC,UAA5C,CAAP;AACH,C,CAED;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFd,IAAAA,IAAI,EAAE,YADJ;AAGFe,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,wDADX;AAEFC,MAAAA,QAAQ,EAAE,gBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE;AAVN,GADO;;AAcbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMb,UAAU,GAAGa,OAAO,CAACC,aAAR,EAAnB;AAEA,WAAO;AACHC,MAAAA,cAAc,CAAC1B,IAAD,EAAO;AACjB,YAAI,CAACD,wBAAwB,CAACC,IAAD,CAA7B,EAAqC;AACjC;AACH;;AAED,cAAM2B,OAAO,GAAG3B,IAAI,CAACC,MAAL,CAAY2B,MAA5B;AACA,cAAMnB,YAAY,GAAIkB,OAAO,CAACzB,IAAR,KAAiB,kBAAlB,GAAwCyB,OAAO,CAACC,MAAhD,GAAyD,IAA9E;AACA,cAAMlB,OAAO,GAAGV,IAAI,CAACM,SAAL,CAAe,CAAf,CAAhB;;AAEA,YAAIE,cAAc,CAACC,YAAD,EAAeC,OAAf,EAAwBC,UAAxB,CAAlB,EAAuD;AACnDa,UAAAA,OAAO,CAACK,MAAR,CAAe;AAAE7B,YAAAA,IAAF;AAAQ8B,YAAAA,OAAO,EAAE,4BAAjB;AAA+CC,YAAAA,IAAI,EAAE;AAAE1B,cAAAA,IAAI,EAAEL,IAAI,CAACC,MAAL,CAAYE,QAAZ,CAAqBE;AAA7B;AAArD,WAAf;AACH;AACJ;;AAbE,KAAP;AAeH;;AAhCY,CAAjB","sourcesContent":["/**\n * @fileoverview A rule to disallow unnecessary `.call()` and `.apply()`.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a node is a `.call()`/`.apply()`.\n * @param {ASTNode} node A CallExpression node to check.\n * @returns {boolean} Whether or not the node is a `.call()`/`.apply()`.\n */\nfunction isCallOrNonVariadicApply(node) {\n    return (\n        node.callee.type === \"MemberExpression\" &&\n        node.callee.property.type === \"Identifier\" &&\n        node.callee.computed === false &&\n        (\n            (node.callee.property.name === \"call\" && node.arguments.length >= 1) ||\n            (node.callee.property.name === \"apply\" && node.arguments.length === 2 && node.arguments[1].type === \"ArrayExpression\")\n        )\n    );\n}\n\n\n/**\n * Checks whether or not `thisArg` is not changed by `.call()`/`.apply()`.\n * @param {ASTNode|null} expectedThis The node that is the owner of the applied function.\n * @param {ASTNode} thisArg The node that is given to the first argument of the `.call()`/`.apply()`.\n * @param {SourceCode} sourceCode The ESLint source code object.\n * @returns {boolean} Whether or not `thisArg` is not changed by `.call()`/`.apply()`.\n */\nfunction isValidThisArg(expectedThis, thisArg, sourceCode) {\n    if (!expectedThis) {\n        return astUtils.isNullOrUndefined(thisArg);\n    }\n    return astUtils.equalTokens(expectedThis, thisArg, sourceCode);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow unnecessary calls to `.call()` and `.apply()`\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-useless-call\"\n        },\n\n        schema: []\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        return {\n            CallExpression(node) {\n                if (!isCallOrNonVariadicApply(node)) {\n                    return;\n                }\n\n                const applied = node.callee.object;\n                const expectedThis = (applied.type === \"MemberExpression\") ? applied.object : null;\n                const thisArg = node.arguments[0];\n\n                if (isValidThisArg(expectedThis, thisArg, sourceCode)) {\n                    context.report({ node, message: \"unnecessary '.{{name}}()'.\", data: { name: node.callee.property.name } });\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}