{"ast":null,"code":"/**\n * @fileoverview Rule to enforce a particular function style\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce the consistent use of either `function` declarations or expressions\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/func-style\"\n    },\n    schema: [{\n      enum: [\"declaration\", \"expression\"]\n    }, {\n      type: \"object\",\n      properties: {\n        allowArrowFunctions: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      expression: \"Expected a function expression.\",\n      declaration: \"Expected a function declaration.\"\n    }\n  },\n\n  create(context) {\n    const style = context.options[0],\n          allowArrowFunctions = context.options[1] && context.options[1].allowArrowFunctions,\n          enforceDeclarations = style === \"declaration\",\n          stack = [];\n    const nodesToCheck = {\n      FunctionDeclaration(node) {\n        stack.push(false);\n\n        if (!enforceDeclarations && node.parent.type !== \"ExportDefaultDeclaration\") {\n          context.report({\n            node,\n            messageId: \"expression\"\n          });\n        }\n      },\n\n      \"FunctionDeclaration:exit\"() {\n        stack.pop();\n      },\n\n      FunctionExpression(node) {\n        stack.push(false);\n\n        if (enforceDeclarations && node.parent.type === \"VariableDeclarator\") {\n          context.report({\n            node: node.parent,\n            messageId: \"declaration\"\n          });\n        }\n      },\n\n      \"FunctionExpression:exit\"() {\n        stack.pop();\n      },\n\n      ThisExpression() {\n        if (stack.length > 0) {\n          stack[stack.length - 1] = true;\n        }\n      }\n\n    };\n\n    if (!allowArrowFunctions) {\n      nodesToCheck.ArrowFunctionExpression = function () {\n        stack.push(false);\n      };\n\n      nodesToCheck[\"ArrowFunctionExpression:exit\"] = function (node) {\n        const hasThisExpr = stack.pop();\n\n        if (enforceDeclarations && !hasThisExpr && node.parent.type === \"VariableDeclarator\") {\n          context.report({\n            node: node.parent,\n            messageId: \"declaration\"\n          });\n        }\n      };\n    }\n\n    return nodesToCheck;\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/func-style.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","enum","properties","allowArrowFunctions","default","additionalProperties","messages","expression","declaration","create","context","style","options","enforceDeclarations","stack","nodesToCheck","FunctionDeclaration","node","push","parent","report","messageId","pop","FunctionExpression","ThisExpression","length","ArrowFunctionExpression","hasThisExpr"],"mappings":"AAAA;;;;AAIA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,6EADX;AAEFC,MAAAA,QAAQ,EAAE,kBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,CAAC,aAAD,EAAgB,YAAhB;AADV,KADI,EAIJ;AACIP,MAAAA,IAAI,EAAE,QADV;AAEIQ,MAAAA,UAAU,EAAE;AACRC,QAAAA,mBAAmB,EAAE;AACjBT,UAAAA,IAAI,EAAE,SADW;AAEjBU,UAAAA,OAAO,EAAE;AAFQ;AADb,OAFhB;AAQIC,MAAAA,oBAAoB,EAAE;AAR1B,KAJI,CAVN;AA0BFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE,iCADN;AAENC,MAAAA,WAAW,EAAE;AAFP;AA1BR,GADO;;AAiCbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,UAAMC,KAAK,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAAd;AAAA,UACIT,mBAAmB,GAAGO,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsBF,OAAO,CAACE,OAAR,CAAgB,CAAhB,EAAmBT,mBADnE;AAAA,UAEIU,mBAAmB,GAAIF,KAAK,KAAK,aAFrC;AAAA,UAGIG,KAAK,GAAG,EAHZ;AAKA,UAAMC,YAAY,GAAG;AACjBC,MAAAA,mBAAmB,CAACC,IAAD,EAAO;AACtBH,QAAAA,KAAK,CAACI,IAAN,CAAW,KAAX;;AAEA,YAAI,CAACL,mBAAD,IAAwBI,IAAI,CAACE,MAAL,CAAYzB,IAAZ,KAAqB,0BAAjD,EAA6E;AACzEgB,UAAAA,OAAO,CAACU,MAAR,CAAe;AAAEH,YAAAA,IAAF;AAAQI,YAAAA,SAAS,EAAE;AAAnB,WAAf;AACH;AACJ,OAPgB;;AAQjB,mCAA6B;AACzBP,QAAAA,KAAK,CAACQ,GAAN;AACH,OAVgB;;AAYjBC,MAAAA,kBAAkB,CAACN,IAAD,EAAO;AACrBH,QAAAA,KAAK,CAACI,IAAN,CAAW,KAAX;;AAEA,YAAIL,mBAAmB,IAAII,IAAI,CAACE,MAAL,CAAYzB,IAAZ,KAAqB,oBAAhD,EAAsE;AAClEgB,UAAAA,OAAO,CAACU,MAAR,CAAe;AAAEH,YAAAA,IAAI,EAAEA,IAAI,CAACE,MAAb;AAAqBE,YAAAA,SAAS,EAAE;AAAhC,WAAf;AACH;AACJ,OAlBgB;;AAmBjB,kCAA4B;AACxBP,QAAAA,KAAK,CAACQ,GAAN;AACH,OArBgB;;AAuBjBE,MAAAA,cAAc,GAAG;AACb,YAAIV,KAAK,CAACW,MAAN,GAAe,CAAnB,EAAsB;AAClBX,UAAAA,KAAK,CAACA,KAAK,CAACW,MAAN,GAAe,CAAhB,CAAL,GAA0B,IAA1B;AACH;AACJ;;AA3BgB,KAArB;;AA8BA,QAAI,CAACtB,mBAAL,EAA0B;AACtBY,MAAAA,YAAY,CAACW,uBAAb,GAAuC,YAAW;AAC9CZ,QAAAA,KAAK,CAACI,IAAN,CAAW,KAAX;AACH,OAFD;;AAIAH,MAAAA,YAAY,CAAC,8BAAD,CAAZ,GAA+C,UAASE,IAAT,EAAe;AAC1D,cAAMU,WAAW,GAAGb,KAAK,CAACQ,GAAN,EAApB;;AAEA,YAAIT,mBAAmB,IAAI,CAACc,WAAxB,IAAuCV,IAAI,CAACE,MAAL,CAAYzB,IAAZ,KAAqB,oBAAhE,EAAsF;AAClFgB,UAAAA,OAAO,CAACU,MAAR,CAAe;AAAEH,YAAAA,IAAI,EAAEA,IAAI,CAACE,MAAb;AAAqBE,YAAAA,SAAS,EAAE;AAAhC,WAAf;AACH;AACJ,OAND;AAOH;;AAED,WAAON,YAAP;AAEH;;AAtFY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to enforce a particular function style\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce the consistent use of either `function` declarations or expressions\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/func-style\"\n        },\n\n        schema: [\n            {\n                enum: [\"declaration\", \"expression\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    allowArrowFunctions: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            expression: \"Expected a function expression.\",\n            declaration: \"Expected a function declaration.\"\n        }\n    },\n\n    create(context) {\n\n        const style = context.options[0],\n            allowArrowFunctions = context.options[1] && context.options[1].allowArrowFunctions,\n            enforceDeclarations = (style === \"declaration\"),\n            stack = [];\n\n        const nodesToCheck = {\n            FunctionDeclaration(node) {\n                stack.push(false);\n\n                if (!enforceDeclarations && node.parent.type !== \"ExportDefaultDeclaration\") {\n                    context.report({ node, messageId: \"expression\" });\n                }\n            },\n            \"FunctionDeclaration:exit\"() {\n                stack.pop();\n            },\n\n            FunctionExpression(node) {\n                stack.push(false);\n\n                if (enforceDeclarations && node.parent.type === \"VariableDeclarator\") {\n                    context.report({ node: node.parent, messageId: \"declaration\" });\n                }\n            },\n            \"FunctionExpression:exit\"() {\n                stack.pop();\n            },\n\n            ThisExpression() {\n                if (stack.length > 0) {\n                    stack[stack.length - 1] = true;\n                }\n            }\n        };\n\n        if (!allowArrowFunctions) {\n            nodesToCheck.ArrowFunctionExpression = function() {\n                stack.push(false);\n            };\n\n            nodesToCheck[\"ArrowFunctionExpression:exit\"] = function(node) {\n                const hasThisExpr = stack.pop();\n\n                if (enforceDeclarations && !hasThisExpr && node.parent.type === \"VariableDeclarator\") {\n                    context.report({ node: node.parent, messageId: \"declaration\" });\n                }\n            };\n        }\n\n        return nodesToCheck;\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}