{"ast":null,"code":"\"use strict\";\n\nif (typeof window === \"undefined\") {\n  window = {};\n}\n\nvar logMethods = [\"trace\", \"debug\", \"info\", \"warn\", \"error\"];\ndefine(function () {\n  function getStorageKey(loggerName) {\n    var key = \"loglevel\";\n\n    if (loggerName) {\n      key += \":\" + loggerName;\n    }\n\n    return key;\n  }\n\n  var self = {}; // Jasmine matcher to check the log level of a log object\n\n  self.toBeAtLevel = function toBeAtLevel(level) {\n    var log = this.actual;\n    var expectedWorkingCalls = log.levels.SILENT - log.levels[level.toUpperCase()];\n    var realLogMethod = window.console.log;\n    var priorCalls = realLogMethod.calls.length;\n\n    for (var ii = 0; ii < logMethods.length; ii++) {\n      var methodName = logMethods[ii];\n      log[methodName](methodName);\n    }\n\n    expect(realLogMethod.calls.length - priorCalls).toEqual(expectedWorkingCalls);\n    return true;\n  };\n\n  self.isCookieStorageAvailable = function isCookieStorageAvailable() {\n    if (window && window.document && window.document.cookie) {\n      // We need to check not just that the cookie objects are available, but that they work, because\n      // if we run from file:// URLs they appear present but are non-functional\n      window.document.cookie = \"test=hi;\";\n      var result = window.document.cookie.indexOf('test=hi') !== -1;\n      window.document.cookie = \"test=; expires=Thu, 01 Jan 1970 00:00:01 GMT;\";\n      return result;\n    } else {\n      return false;\n    }\n  };\n\n  self.isLocalStorageAvailable = function isLocalStorageAvailable() {\n    try {\n      return !!window.localStorage;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  self.isAnyLevelStoragePossible = function isAnyLevelStoragePossible() {\n    return self.isCookieStorageAvailable() || self.isLocalStorageAvailable();\n  };\n\n  self.toBeTheLevelStoredByCookie = function toBeTheLevelStoredByCookie(name) {\n    var level = this.actual.toUpperCase();\n    var storageKey = encodeURIComponent(getStorageKey(name));\n\n    if (window.document.cookie.indexOf(storageKey + \"=\" + level) !== -1) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  self.toBeTheLevelStoredByLocalStorage = function toBeTheLevelStoredByLocalStorage(name) {\n    var level = this.actual.toUpperCase();\n\n    if (window.localStorage[getStorageKey(name)] === level) {\n      return true;\n    }\n\n    return false;\n  }; // Jasmine matcher to check whether a given string was saved by loglevel\n\n\n  self.toBeTheStoredLevel = function toBeTheStoredLevel(name) {\n    return self.toBeTheLevelStoredByLocalStorage.call(this, name) || self.toBeTheLevelStoredByCookie.call(this, name);\n  };\n\n  self.setCookieStoredLevel = function setCookieStoredLevel(level, name) {\n    window.document.cookie = encodeURIComponent(getStorageKey(name)) + \"=\" + level.toUpperCase() + \";\";\n  };\n\n  self.setLocalStorageStoredLevel = function setLocalStorageStoredLevel(level, name) {\n    window.localStorage[getStorageKey(name)] = level.toUpperCase();\n  };\n\n  self.setStoredLevel = function setStoredLevel(level, name) {\n    if (self.isCookieStorageAvailable()) {\n      self.setCookieStoredLevel(level, name);\n    }\n\n    if (self.isLocalStorageAvailable()) {\n      self.setLocalStorageStoredLevel(level, name);\n    }\n  };\n\n  self.clearStoredLevels = function clearStoredLevels() {\n    if (self.isLocalStorageAvailable()) {\n      window.localStorage.clear();\n    }\n\n    if (self.isCookieStorageAvailable()) {\n      var storedKeys = window.document.cookie.match(/(?:^|;\\s)(loglevel(\\:\\w+)?)(?=\\=)/g);\n\n      if (storedKeys) {\n        for (var i = 0; i < storedKeys.length; i++) {\n          window.document.cookie = storedKeys[i] + \"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;\";\n        }\n      }\n    }\n  };\n\n  self.describeIf = function describeIf(condition, name, test) {\n    if (condition) {\n      jasmine.getEnv().describe(name, test);\n    }\n  };\n\n  self.itIf = function itIf(condition, name, test) {\n    if (condition) {\n      jasmine.getEnv().it(name, test);\n    }\n  }; // Forcibly reloads loglevel, and asynchronously hands the resulting log back to the given callback\n  // via Jasmine async magic\n\n\n  self.withFreshLog = function withFreshLog(toRun) {\n    require.undef(\"lib/loglevel\");\n\n    var freshLog;\n    waitsFor(function () {\n      require(['lib/loglevel'], function (log) {\n        freshLog = log;\n      });\n\n      return typeof freshLog !== \"undefined\";\n    });\n    runs(function () {\n      toRun(freshLog);\n    });\n  }; // Wraps Jasmine's it(name, test) call to reload the loglevel dependency for the given test\n\n\n  self.itWithFreshLog = function itWithFreshLog(name, test) {\n    jasmine.getEnv().it(name, function () {\n      self.withFreshLog(test);\n    });\n  };\n\n  return self;\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/loglevel/test/test-helpers.js"],"names":["window","logMethods","define","getStorageKey","loggerName","key","self","toBeAtLevel","level","log","actual","expectedWorkingCalls","levels","SILENT","toUpperCase","realLogMethod","console","priorCalls","calls","length","ii","methodName","expect","toEqual","isCookieStorageAvailable","document","cookie","result","indexOf","isLocalStorageAvailable","localStorage","e","isAnyLevelStoragePossible","toBeTheLevelStoredByCookie","name","storageKey","encodeURIComponent","toBeTheLevelStoredByLocalStorage","toBeTheStoredLevel","call","setCookieStoredLevel","setLocalStorageStoredLevel","setStoredLevel","clearStoredLevels","clear","storedKeys","match","i","describeIf","condition","test","jasmine","getEnv","describe","itIf","it","withFreshLog","toRun","require","undef","freshLog","waitsFor","runs","itWithFreshLog"],"mappings":"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","sourcesContent":["\"use strict\";\n\nif (typeof window === \"undefined\") {\n    window = {};\n}\n\nvar logMethods = [\n    \"trace\",\n    \"debug\",\n    \"info\",\n    \"warn\",\n    \"error\"\n];\n\ndefine(function () {\n    function getStorageKey(loggerName) {\n        var key = \"loglevel\";\n        if (loggerName) {\n            key += \":\" + loggerName;\n        }\n        return key;\n    }\n\n    var self = {};\n\n    // Jasmine matcher to check the log level of a log object\n    self.toBeAtLevel = function toBeAtLevel(level) {\n        var log = this.actual;\n        var expectedWorkingCalls = log.levels.SILENT - log.levels[level.toUpperCase()];\n        var realLogMethod = window.console.log;\n        var priorCalls = realLogMethod.calls.length;\n\n        for (var ii = 0; ii < logMethods.length; ii++) {\n            var methodName = logMethods[ii];\n            log[methodName](methodName);\n        }\n\n        expect(realLogMethod.calls.length - priorCalls).toEqual(expectedWorkingCalls);\n        return true;\n    };\n\n    self.isCookieStorageAvailable = function isCookieStorageAvailable() {\n        if (window && window.document && window.document.cookie) {\n            // We need to check not just that the cookie objects are available, but that they work, because\n            // if we run from file:// URLs they appear present but are non-functional\n            window.document.cookie = \"test=hi;\";\n\n            var result = window.document.cookie.indexOf('test=hi') !== -1;\n            window.document.cookie = \"test=; expires=Thu, 01 Jan 1970 00:00:01 GMT;\";\n\n            return result;\n        } else {\n            return false;\n        }\n    };\n\n    self.isLocalStorageAvailable = function isLocalStorageAvailable() {\n        try {\n            return !!window.localStorage;\n        } catch (e){\n            return false;\n        }\n    };\n\n    self.isAnyLevelStoragePossible = function isAnyLevelStoragePossible() {\n        return self.isCookieStorageAvailable() || self.isLocalStorageAvailable();\n    };\n\n    self.toBeTheLevelStoredByCookie = function toBeTheLevelStoredByCookie(name) {\n        var level = this.actual.toUpperCase();\n        var storageKey = encodeURIComponent(getStorageKey(name));\n\n        if (window.document.cookie.indexOf(storageKey + \"=\" + level) !== -1) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    self.toBeTheLevelStoredByLocalStorage = function toBeTheLevelStoredByLocalStorage(name) {\n        var level = this.actual.toUpperCase();\n\n        if (window.localStorage[getStorageKey(name)] === level) {\n            return true;\n        }\n\n        return false;\n    };\n\n    // Jasmine matcher to check whether a given string was saved by loglevel\n    self.toBeTheStoredLevel = function toBeTheStoredLevel(name) {\n        return self.toBeTheLevelStoredByLocalStorage.call(this, name) ||\n               self.toBeTheLevelStoredByCookie.call(this, name);\n    };\n\n    self.setCookieStoredLevel = function setCookieStoredLevel(level, name) {\n        window.document.cookie =\n            encodeURIComponent(getStorageKey(name)) + \"=\" +\n            level.toUpperCase() + \";\";\n    };\n\n    self.setLocalStorageStoredLevel = function setLocalStorageStoredLevel(level, name) {\n        window.localStorage[getStorageKey(name)] = level.toUpperCase();\n    };\n\n    self.setStoredLevel = function setStoredLevel(level, name) {\n        if (self.isCookieStorageAvailable()) {\n            self.setCookieStoredLevel(level, name);\n        }\n        if (self.isLocalStorageAvailable()) {\n            self.setLocalStorageStoredLevel(level, name);\n        }\n    };\n\n    self.clearStoredLevels = function clearStoredLevels() {\n        if (self.isLocalStorageAvailable()) {\n            window.localStorage.clear();\n        }\n        if (self.isCookieStorageAvailable()) {\n            var storedKeys = window.document.cookie.match(/(?:^|;\\s)(loglevel(\\:\\w+)?)(?=\\=)/g);\n            if (storedKeys) {\n                for (var i = 0; i < storedKeys.length; i++) {\n                    window.document.cookie = storedKeys[i] + \"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;\";\n                }\n            }\n        }\n    };\n\n    self.describeIf = function describeIf(condition, name, test) {\n        if (condition) {\n            jasmine.getEnv().describe(name, test);\n        }\n    };\n\n    self.itIf = function itIf(condition, name, test) {\n        if (condition) {\n            jasmine.getEnv().it(name, test);\n        }\n    };\n\n    // Forcibly reloads loglevel, and asynchronously hands the resulting log back to the given callback\n    // via Jasmine async magic\n    self.withFreshLog = function withFreshLog(toRun) {\n        require.undef(\"lib/loglevel\");\n\n        var freshLog;\n\n        waitsFor(function() {\n            require(['lib/loglevel'], function(log) {\n                freshLog = log;\n            });\n            return typeof freshLog !== \"undefined\";\n        });\n\n        runs(function() {\n            toRun(freshLog);\n        });\n    };\n\n    // Wraps Jasmine's it(name, test) call to reload the loglevel dependency for the given test\n    self.itWithFreshLog = function itWithFreshLog(name, test) {\n        jasmine.getEnv().it(name, function() {\n            self.withFreshLog(test);\n        });\n    };\n\n    return self;\n});\n"]},"metadata":{},"sourceType":"script"}