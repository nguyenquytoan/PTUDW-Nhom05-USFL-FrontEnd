{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.mjs';\nimport { BroadcastCacheUpdate } from './BroadcastCacheUpdate.mjs';\nimport './_version.mjs';\n/**\n * This plugin will automatically broadcast a message whenever a cached response\n * is updated.\n *\n * @memberof workbox.broadcastUpdate\n */\n\nclass Plugin {\n  /**\n   * Construct a BroadcastCacheUpdate instance with the passed options and\n   * calls its `notifyIfUpdated()` method whenever the plugin's\n   * `cacheDidUpdate` callback is invoked.\n   *\n   * @param {Object} options\n   * @param {Array<string>}\n   *     [options.headersToCheck=['content-length', 'etag', 'last-modified']]\n   *     A list of headers that will be used to determine whether the responses\n   *     differ.\n   * @param {string} [options.channelName='workbox'] The name that will be used\n   *.    when creating the `BroadcastChannel`, which defaults to 'workbox' (the\n   *     channel name used by the `workbox-window` package).\n   * @param {string} [options.deferNoticationTimeout=10000] The amount of time\n   *     to wait for a ready message from the window on navigation requests\n   *     before sending the update.\n   */\n  constructor(options) {\n    this._broadcastUpdate = new BroadcastCacheUpdate(options);\n  }\n  /**\n   * A \"lifecycle\" callback that will be triggered automatically by the\n   * `workbox-sw` and `workbox-runtime-caching` handlers when an entry is\n   * added to a cache.\n   *\n   * @private\n   * @param {Object} options The input object to this function.\n   * @param {string} options.cacheName Name of the cache being updated.\n   * @param {Response} [options.oldResponse] The previous cached value, if any.\n   * @param {Response} options.newResponse The new value in the cache.\n   * @param {Request} options.request The request that triggered the udpate.\n   * @param {Request} [options.event] The event that triggered the update.\n   */\n\n\n  cacheDidUpdate({\n    cacheName,\n    oldResponse,\n    newResponse,\n    request,\n    event\n  }) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(cacheName, 'string', {\n        moduleName: 'workbox-broadcast-update',\n        className: 'Plugin',\n        funcName: 'cacheDidUpdate',\n        paramName: 'cacheName'\n      });\n      assert.isInstance(newResponse, Response, {\n        moduleName: 'workbox-broadcast-update',\n        className: 'Plugin',\n        funcName: 'cacheDidUpdate',\n        paramName: 'newResponse'\n      });\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-broadcast-update',\n        className: 'Plugin',\n        funcName: 'cacheDidUpdate',\n        paramName: 'request'\n      });\n    }\n\n    if (!oldResponse) {\n      // Without a two responses there is nothing to compare.\n      return;\n    }\n\n    this._broadcastUpdate.notifyIfUpdated({\n      cacheName,\n      oldResponse,\n      newResponse,\n      event,\n      url: request.url\n    });\n  }\n\n}\n\nexport { Plugin };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-broadcast-update/Plugin.mjs"],"names":["assert","BroadcastCacheUpdate","Plugin","constructor","options","_broadcastUpdate","cacheDidUpdate","cacheName","oldResponse","newResponse","request","event","process","env","NODE_ENV","isType","moduleName","className","funcName","paramName","isInstance","Response","Request","notifyIfUpdated","url"],"mappings":"AAAA;;;;;;;AAQA,SAAQA,MAAR,QAAqB,kCAArB;AACA,SAAQC,oBAAR,QAAmC,4BAAnC;AACA,OAAO,gBAAP;AAEA;;;;;;;AAMA,MAAMC,MAAN,CAAa;AACX;;;;;;;;;;;;;;;;;AAiBAC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKC,gBAAL,GAAwB,IAAIJ,oBAAJ,CAAyBG,OAAzB,CAAxB;AACD;AAED;;;;;;;;;;;;;;;AAaAE,EAAAA,cAAc,CAAC;AAACC,IAAAA,SAAD;AAAYC,IAAAA,WAAZ;AAAyBC,IAAAA,WAAzB;AAAsCC,IAAAA,OAAtC;AAA+CC,IAAAA;AAA/C,GAAD,EAAwD;AACpE,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCd,MAAAA,MAAM,CAACe,MAAP,CAAcR,SAAd,EAAyB,QAAzB,EAAmC;AACjCS,QAAAA,UAAU,EAAE,0BADqB;AAEjCC,QAAAA,SAAS,EAAE,QAFsB;AAGjCC,QAAAA,QAAQ,EAAE,gBAHuB;AAIjCC,QAAAA,SAAS,EAAE;AAJsB,OAAnC;AAMAnB,MAAAA,MAAM,CAACoB,UAAP,CAAkBX,WAAlB,EAA+BY,QAA/B,EAAyC;AACvCL,QAAAA,UAAU,EAAE,0BAD2B;AAEvCC,QAAAA,SAAS,EAAE,QAF4B;AAGvCC,QAAAA,QAAQ,EAAE,gBAH6B;AAIvCC,QAAAA,SAAS,EAAE;AAJ4B,OAAzC;AAMAnB,MAAAA,MAAM,CAACoB,UAAP,CAAkBV,OAAlB,EAA2BY,OAA3B,EAAoC;AAClCN,QAAAA,UAAU,EAAE,0BADsB;AAElCC,QAAAA,SAAS,EAAE,QAFuB;AAGlCC,QAAAA,QAAQ,EAAE,gBAHwB;AAIlCC,QAAAA,SAAS,EAAE;AAJuB,OAApC;AAMD;;AAED,QAAI,CAACX,WAAL,EAAkB;AAChB;AACA;AACD;;AACD,SAAKH,gBAAL,CAAsBkB,eAAtB,CAAsC;AACpChB,MAAAA,SADoC;AAEpCC,MAAAA,WAFoC;AAGpCC,MAAAA,WAHoC;AAIpCE,MAAAA,KAJoC;AAKpCa,MAAAA,GAAG,EAAEd,OAAO,CAACc;AALuB,KAAtC;AAOD;;AApEU;;AAuEb,SAAQtB,MAAR","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {BroadcastCacheUpdate} from './BroadcastCacheUpdate.mjs';\nimport './_version.mjs';\n\n/**\n * This plugin will automatically broadcast a message whenever a cached response\n * is updated.\n *\n * @memberof workbox.broadcastUpdate\n */\nclass Plugin {\n  /**\n   * Construct a BroadcastCacheUpdate instance with the passed options and\n   * calls its `notifyIfUpdated()` method whenever the plugin's\n   * `cacheDidUpdate` callback is invoked.\n   *\n   * @param {Object} options\n   * @param {Array<string>}\n   *     [options.headersToCheck=['content-length', 'etag', 'last-modified']]\n   *     A list of headers that will be used to determine whether the responses\n   *     differ.\n   * @param {string} [options.channelName='workbox'] The name that will be used\n   *.    when creating the `BroadcastChannel`, which defaults to 'workbox' (the\n   *     channel name used by the `workbox-window` package).\n   * @param {string} [options.deferNoticationTimeout=10000] The amount of time\n   *     to wait for a ready message from the window on navigation requests\n   *     before sending the update.\n   */\n  constructor(options) {\n    this._broadcastUpdate = new BroadcastCacheUpdate(options);\n  }\n\n  /**\n   * A \"lifecycle\" callback that will be triggered automatically by the\n   * `workbox-sw` and `workbox-runtime-caching` handlers when an entry is\n   * added to a cache.\n   *\n   * @private\n   * @param {Object} options The input object to this function.\n   * @param {string} options.cacheName Name of the cache being updated.\n   * @param {Response} [options.oldResponse] The previous cached value, if any.\n   * @param {Response} options.newResponse The new value in the cache.\n   * @param {Request} options.request The request that triggered the udpate.\n   * @param {Request} [options.event] The event that triggered the update.\n   */\n  cacheDidUpdate({cacheName, oldResponse, newResponse, request, event}) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(cacheName, 'string', {\n        moduleName: 'workbox-broadcast-update',\n        className: 'Plugin',\n        funcName: 'cacheDidUpdate',\n        paramName: 'cacheName',\n      });\n      assert.isInstance(newResponse, Response, {\n        moduleName: 'workbox-broadcast-update',\n        className: 'Plugin',\n        funcName: 'cacheDidUpdate',\n        paramName: 'newResponse',\n      });\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-broadcast-update',\n        className: 'Plugin',\n        funcName: 'cacheDidUpdate',\n        paramName: 'request',\n      });\n    }\n\n    if (!oldResponse) {\n      // Without a two responses there is nothing to compare.\n      return;\n    }\n    this._broadcastUpdate.notifyIfUpdated({\n      cacheName,\n      oldResponse,\n      newResponse,\n      event,\n      url: request.url,\n    });\n  }\n}\n\nexport {Plugin};\n"]},"metadata":{},"sourceType":"module"}