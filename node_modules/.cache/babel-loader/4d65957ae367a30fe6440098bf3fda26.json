{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar path = require(\"path\");\n\nvar deep_1 = require(\"./filters/deep\");\n\nvar entry_1 = require(\"./filters/entry\");\n\nvar pathUtil = require(\"../utils/path\");\n\nvar Reader =\n/** @class */\nfunction () {\n  function Reader(options) {\n    this.options = options;\n    this.micromatchOptions = this.getMicromatchOptions();\n    this.entryFilter = new entry_1.default(options, this.micromatchOptions);\n    this.deepFilter = new deep_1.default(options, this.micromatchOptions);\n  }\n  /**\r\n   * Returns root path to scanner.\r\n   */\n\n\n  Reader.prototype.getRootDirectory = function (task) {\n    return path.resolve(this.options.cwd, task.base);\n  };\n  /**\r\n   * Returns options for reader.\r\n   */\n\n\n  Reader.prototype.getReaderOptions = function (task) {\n    return {\n      basePath: task.base === '.' ? '' : task.base,\n      filter: this.entryFilter.getFilter(task.positive, task.negative),\n      deep: this.deepFilter.getFilter(task.positive, task.negative),\n      sep: '/'\n    };\n  };\n  /**\r\n   * Returns options for micromatch.\r\n   */\n\n\n  Reader.prototype.getMicromatchOptions = function () {\n    return {\n      dot: this.options.dot,\n      nobrace: !this.options.brace,\n      noglobstar: !this.options.globstar,\n      noext: !this.options.extension,\n      nocase: !this.options.case,\n      matchBase: this.options.matchBase\n    };\n  };\n  /**\r\n   * Returns transformed entry.\r\n   */\n\n\n  Reader.prototype.transform = function (entry) {\n    if (this.options.absolute) {\n      entry.path = pathUtil.makeAbsolute(this.options.cwd, entry.path);\n    }\n\n    if (this.options.markDirectories && entry.isDirectory()) {\n      entry.path += '/';\n    }\n\n    var item = this.options.stats ? entry : entry.path;\n\n    if (this.options.transform === null) {\n      return item;\n    }\n\n    return this.options.transform(item);\n  };\n  /**\r\n   * Returns true if error has ENOENT code.\r\n   */\n\n\n  Reader.prototype.isEnoentCodeError = function (err) {\n    return err.code === 'ENOENT';\n  };\n\n  return Reader;\n}();\n\nexports.default = Reader;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/fast-glob/out/providers/reader.js"],"names":["Object","defineProperty","exports","value","path","require","deep_1","entry_1","pathUtil","Reader","options","micromatchOptions","getMicromatchOptions","entryFilter","default","deepFilter","prototype","getRootDirectory","task","resolve","cwd","base","getReaderOptions","basePath","filter","getFilter","positive","negative","deep","sep","dot","nobrace","brace","noglobstar","globstar","noext","extension","nocase","case","matchBase","transform","entry","absolute","makeAbsolute","markDirectories","isDirectory","item","stats","isEnoentCodeError","err","code"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar path = require(\"path\");\r\nvar deep_1 = require(\"./filters/deep\");\r\nvar entry_1 = require(\"./filters/entry\");\r\nvar pathUtil = require(\"../utils/path\");\r\nvar Reader = /** @class */ (function () {\r\n    function Reader(options) {\r\n        this.options = options;\r\n        this.micromatchOptions = this.getMicromatchOptions();\r\n        this.entryFilter = new entry_1.default(options, this.micromatchOptions);\r\n        this.deepFilter = new deep_1.default(options, this.micromatchOptions);\r\n    }\r\n    /**\r\n     * Returns root path to scanner.\r\n     */\r\n    Reader.prototype.getRootDirectory = function (task) {\r\n        return path.resolve(this.options.cwd, task.base);\r\n    };\r\n    /**\r\n     * Returns options for reader.\r\n     */\r\n    Reader.prototype.getReaderOptions = function (task) {\r\n        return {\r\n            basePath: task.base === '.' ? '' : task.base,\r\n            filter: this.entryFilter.getFilter(task.positive, task.negative),\r\n            deep: this.deepFilter.getFilter(task.positive, task.negative),\r\n            sep: '/'\r\n        };\r\n    };\r\n    /**\r\n     * Returns options for micromatch.\r\n     */\r\n    Reader.prototype.getMicromatchOptions = function () {\r\n        return {\r\n            dot: this.options.dot,\r\n            nobrace: !this.options.brace,\r\n            noglobstar: !this.options.globstar,\r\n            noext: !this.options.extension,\r\n            nocase: !this.options.case,\r\n            matchBase: this.options.matchBase\r\n        };\r\n    };\r\n    /**\r\n     * Returns transformed entry.\r\n     */\r\n    Reader.prototype.transform = function (entry) {\r\n        if (this.options.absolute) {\r\n            entry.path = pathUtil.makeAbsolute(this.options.cwd, entry.path);\r\n        }\r\n        if (this.options.markDirectories && entry.isDirectory()) {\r\n            entry.path += '/';\r\n        }\r\n        var item = this.options.stats ? entry : entry.path;\r\n        if (this.options.transform === null) {\r\n            return item;\r\n        }\r\n        return this.options.transform(item);\r\n    };\r\n    /**\r\n     * Returns true if error has ENOENT code.\r\n     */\r\n    Reader.prototype.isEnoentCodeError = function (err) {\r\n        return err.code === 'ENOENT';\r\n    };\r\n    return Reader;\r\n}());\r\nexports.default = Reader;\r\n"]},"metadata":{},"sourceType":"script"}