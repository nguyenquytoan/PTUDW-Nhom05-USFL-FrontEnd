{"ast":null,"code":"'use strict';\n\nvar PlainValue = require('./PlainValue-ec8e588e.js');\n\nvar resolveSeq = require('./resolveSeq-4a68b39b.js');\n\nvar warnings = require('./warnings-39684f17.js');\n\nfunction createMap(schema, obj, ctx) {\n  const map = new resolveSeq.YAMLMap(schema);\n\n  if (obj instanceof Map) {\n    for (const [key, value] of obj) map.items.push(schema.createPair(key, value, ctx));\n  } else if (obj && typeof obj === 'object') {\n    for (const key of Object.keys(obj)) map.items.push(schema.createPair(key, obj[key], ctx));\n  }\n\n  if (typeof schema.sortMapEntries === 'function') {\n    map.items.sort(schema.sortMapEntries);\n  }\n\n  return map;\n}\n\nconst map = {\n  createNode: createMap,\n  default: true,\n  nodeClass: resolveSeq.YAMLMap,\n  tag: 'tag:yaml.org,2002:map',\n  resolve: resolveSeq.resolveMap\n};\n\nfunction createSeq(schema, obj, ctx) {\n  const seq = new resolveSeq.YAMLSeq(schema);\n\n  if (obj && obj[Symbol.iterator]) {\n    for (const it of obj) {\n      const v = schema.createNode(it, ctx.wrapScalars, null, ctx);\n      seq.items.push(v);\n    }\n  }\n\n  return seq;\n}\n\nconst seq = {\n  createNode: createSeq,\n  default: true,\n  nodeClass: resolveSeq.YAMLSeq,\n  tag: 'tag:yaml.org,2002:seq',\n  resolve: resolveSeq.resolveSeq\n};\nconst string = {\n  identify: value => typeof value === 'string',\n  default: true,\n  tag: 'tag:yaml.org,2002:str',\n  resolve: resolveSeq.resolveString,\n\n  stringify(item, ctx, onComment, onChompKeep) {\n    ctx = Object.assign({\n      actualString: true\n    }, ctx);\n    return resolveSeq.stringifyString(item, ctx, onComment, onChompKeep);\n  },\n\n  options: resolveSeq.strOptions\n};\nconst failsafe = [map, seq, string];\n/* global BigInt */\n\nconst intIdentify = value => typeof value === 'bigint' || Number.isInteger(value);\n\nconst intResolve = (src, part, radix) => resolveSeq.intOptions.asBigInt ? BigInt(src) : parseInt(part, radix);\n\nfunction intStringify(node, radix, prefix) {\n  const {\n    value\n  } = node;\n  if (intIdentify(value) && value >= 0) return prefix + value.toString(radix);\n  return resolveSeq.stringifyNumber(node);\n}\n\nconst nullObj = {\n  identify: value => value == null,\n  createNode: (schema, value, ctx) => ctx.wrapScalars ? new resolveSeq.Scalar(null) : null,\n  default: true,\n  tag: 'tag:yaml.org,2002:null',\n  test: /^(?:~|[Nn]ull|NULL)?$/,\n  resolve: () => null,\n  options: resolveSeq.nullOptions,\n  stringify: () => resolveSeq.nullOptions.nullStr\n};\nconst boolObj = {\n  identify: value => typeof value === 'boolean',\n  default: true,\n  tag: 'tag:yaml.org,2002:bool',\n  test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,\n  resolve: str => str[0] === 't' || str[0] === 'T',\n  options: resolveSeq.boolOptions,\n  stringify: ({\n    value\n  }) => value ? resolveSeq.boolOptions.trueStr : resolveSeq.boolOptions.falseStr\n};\nconst octObj = {\n  identify: value => intIdentify(value) && value >= 0,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'OCT',\n  test: /^0o([0-7]+)$/,\n  resolve: (str, oct) => intResolve(str, oct, 8),\n  options: resolveSeq.intOptions,\n  stringify: node => intStringify(node, 8, '0o')\n};\nconst intObj = {\n  identify: intIdentify,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  test: /^[-+]?[0-9]+$/,\n  resolve: str => intResolve(str, str, 10),\n  options: resolveSeq.intOptions,\n  stringify: resolveSeq.stringifyNumber\n};\nconst hexObj = {\n  identify: value => intIdentify(value) && value >= 0,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'HEX',\n  test: /^0x([0-9a-fA-F]+)$/,\n  resolve: (str, hex) => intResolve(str, hex, 16),\n  options: resolveSeq.intOptions,\n  stringify: node => intStringify(node, 16, '0x')\n};\nconst nanObj = {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^(?:[-+]?\\.inf|(\\.nan))$/i,\n  resolve: (str, nan) => nan ? NaN : str[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,\n  stringify: resolveSeq.stringifyNumber\n};\nconst expObj = {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  format: 'EXP',\n  test: /^[-+]?(?:\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)[eE][-+]?[0-9]+$/,\n  resolve: str => parseFloat(str),\n  stringify: ({\n    value\n  }) => Number(value).toExponential()\n};\nconst floatObj = {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^[-+]?(?:\\.([0-9]+)|[0-9]+\\.([0-9]*))$/,\n\n  resolve(str, frac1, frac2) {\n    const frac = frac1 || frac2;\n    const node = new resolveSeq.Scalar(parseFloat(str));\n    if (frac && frac[frac.length - 1] === '0') node.minFractionDigits = frac.length;\n    return node;\n  },\n\n  stringify: resolveSeq.stringifyNumber\n};\nconst core = failsafe.concat([nullObj, boolObj, octObj, intObj, hexObj, nanObj, expObj, floatObj]);\n/* global BigInt */\n\nconst intIdentify$1 = value => typeof value === 'bigint' || Number.isInteger(value);\n\nconst stringifyJSON = ({\n  value\n}) => JSON.stringify(value);\n\nconst json = [map, seq, {\n  identify: value => typeof value === 'string',\n  default: true,\n  tag: 'tag:yaml.org,2002:str',\n  resolve: resolveSeq.resolveString,\n  stringify: stringifyJSON\n}, {\n  identify: value => value == null,\n  createNode: (schema, value, ctx) => ctx.wrapScalars ? new resolveSeq.Scalar(null) : null,\n  default: true,\n  tag: 'tag:yaml.org,2002:null',\n  test: /^null$/,\n  resolve: () => null,\n  stringify: stringifyJSON\n}, {\n  identify: value => typeof value === 'boolean',\n  default: true,\n  tag: 'tag:yaml.org,2002:bool',\n  test: /^true|false$/,\n  resolve: str => str === 'true',\n  stringify: stringifyJSON\n}, {\n  identify: intIdentify$1,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  test: /^-?(?:0|[1-9][0-9]*)$/,\n  resolve: str => resolveSeq.intOptions.asBigInt ? BigInt(str) : parseInt(str, 10),\n  stringify: ({\n    value\n  }) => intIdentify$1(value) ? value.toString() : JSON.stringify(value)\n}, {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,\n  resolve: str => parseFloat(str),\n  stringify: stringifyJSON\n}];\n\njson.scalarFallback = str => {\n  throw new SyntaxError(`Unresolved plain scalar ${JSON.stringify(str)}`);\n};\n/* global BigInt */\n\n\nconst boolStringify = ({\n  value\n}) => value ? resolveSeq.boolOptions.trueStr : resolveSeq.boolOptions.falseStr;\n\nconst intIdentify$2 = value => typeof value === 'bigint' || Number.isInteger(value);\n\nfunction intResolve$1(sign, src, radix) {\n  let str = src.replace(/_/g, '');\n\n  if (resolveSeq.intOptions.asBigInt) {\n    switch (radix) {\n      case 2:\n        str = `0b${str}`;\n        break;\n\n      case 8:\n        str = `0o${str}`;\n        break;\n\n      case 16:\n        str = `0x${str}`;\n        break;\n    }\n\n    const n = BigInt(str);\n    return sign === '-' ? BigInt(-1) * n : n;\n  }\n\n  const n = parseInt(str, radix);\n  return sign === '-' ? -1 * n : n;\n}\n\nfunction intStringify$1(node, radix, prefix) {\n  const {\n    value\n  } = node;\n\n  if (intIdentify$2(value)) {\n    const str = value.toString(radix);\n    return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;\n  }\n\n  return resolveSeq.stringifyNumber(node);\n}\n\nconst yaml11 = failsafe.concat([{\n  identify: value => value == null,\n  createNode: (schema, value, ctx) => ctx.wrapScalars ? new resolveSeq.Scalar(null) : null,\n  default: true,\n  tag: 'tag:yaml.org,2002:null',\n  test: /^(?:~|[Nn]ull|NULL)?$/,\n  resolve: () => null,\n  options: resolveSeq.nullOptions,\n  stringify: () => resolveSeq.nullOptions.nullStr\n}, {\n  identify: value => typeof value === 'boolean',\n  default: true,\n  tag: 'tag:yaml.org,2002:bool',\n  test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,\n  resolve: () => true,\n  options: resolveSeq.boolOptions,\n  stringify: boolStringify\n}, {\n  identify: value => typeof value === 'boolean',\n  default: true,\n  tag: 'tag:yaml.org,2002:bool',\n  test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,\n  resolve: () => false,\n  options: resolveSeq.boolOptions,\n  stringify: boolStringify\n}, {\n  identify: intIdentify$2,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'BIN',\n  test: /^([-+]?)0b([0-1_]+)$/,\n  resolve: (str, sign, bin) => intResolve$1(sign, bin, 2),\n  stringify: node => intStringify$1(node, 2, '0b')\n}, {\n  identify: intIdentify$2,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'OCT',\n  test: /^([-+]?)0([0-7_]+)$/,\n  resolve: (str, sign, oct) => intResolve$1(sign, oct, 8),\n  stringify: node => intStringify$1(node, 8, '0')\n}, {\n  identify: intIdentify$2,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  test: /^([-+]?)([0-9][0-9_]*)$/,\n  resolve: (str, sign, abs) => intResolve$1(sign, abs, 10),\n  stringify: resolveSeq.stringifyNumber\n}, {\n  identify: intIdentify$2,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'HEX',\n  test: /^([-+]?)0x([0-9a-fA-F_]+)$/,\n  resolve: (str, sign, hex) => intResolve$1(sign, hex, 16),\n  stringify: node => intStringify$1(node, 16, '0x')\n}, {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^(?:[-+]?\\.inf|(\\.nan))$/i,\n  resolve: (str, nan) => nan ? NaN : str[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,\n  stringify: resolveSeq.stringifyNumber\n}, {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  format: 'EXP',\n  test: /^[-+]?([0-9][0-9_]*)?(\\.[0-9_]*)?[eE][-+]?[0-9]+$/,\n  resolve: str => parseFloat(str.replace(/_/g, '')),\n  stringify: ({\n    value\n  }) => Number(value).toExponential()\n}, {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^[-+]?(?:[0-9][0-9_]*)?\\.([0-9_]*)$/,\n\n  resolve(str, frac) {\n    const node = new resolveSeq.Scalar(parseFloat(str.replace(/_/g, '')));\n\n    if (frac) {\n      const f = frac.replace(/_/g, '');\n      if (f[f.length - 1] === '0') node.minFractionDigits = f.length;\n    }\n\n    return node;\n  },\n\n  stringify: resolveSeq.stringifyNumber\n}], warnings.binary, warnings.omap, warnings.pairs, warnings.set, warnings.intTime, warnings.floatTime, warnings.timestamp);\nconst schemas = {\n  core,\n  failsafe,\n  json,\n  yaml11\n};\nconst tags = {\n  binary: warnings.binary,\n  bool: boolObj,\n  float: floatObj,\n  floatExp: expObj,\n  floatNaN: nanObj,\n  floatTime: warnings.floatTime,\n  int: intObj,\n  intHex: hexObj,\n  intOct: octObj,\n  intTime: warnings.intTime,\n  map,\n  null: nullObj,\n  omap: warnings.omap,\n  pairs: warnings.pairs,\n  seq,\n  set: warnings.set,\n  timestamp: warnings.timestamp\n};\n\nfunction findTagObject(value, tagName, tags) {\n  if (tagName) {\n    const match = tags.filter(t => t.tag === tagName);\n    const tagObj = match.find(t => !t.format) || match[0];\n    if (!tagObj) throw new Error(`Tag ${tagName} not found`);\n    return tagObj;\n  } // TODO: deprecate/remove class check\n\n\n  return tags.find(t => (t.identify && t.identify(value) || t.class && value instanceof t.class) && !t.format);\n}\n\nfunction createNode(value, tagName, ctx) {\n  if (value instanceof resolveSeq.Node) return value;\n  const {\n    defaultPrefix,\n    onTagObj,\n    prevObjects,\n    schema,\n    wrapScalars\n  } = ctx;\n  if (tagName && tagName.startsWith('!!')) tagName = defaultPrefix + tagName.slice(2);\n  let tagObj = findTagObject(value, tagName, schema.tags);\n\n  if (!tagObj) {\n    if (typeof value.toJSON === 'function') value = value.toJSON();\n    if (typeof value !== 'object') return wrapScalars ? new resolveSeq.Scalar(value) : value;\n    tagObj = value instanceof Map ? map : value[Symbol.iterator] ? seq : map;\n  }\n\n  if (onTagObj) {\n    onTagObj(tagObj);\n    delete ctx.onTagObj;\n  } // Detect duplicate references to the same object & use Alias nodes for all\n  // after first. The `obj` wrapper allows for circular references to resolve.\n\n\n  const obj = {};\n\n  if (value && typeof value === 'object' && prevObjects) {\n    const prev = prevObjects.get(value);\n\n    if (prev) {\n      const alias = new resolveSeq.Alias(prev); // leaves source dirty; must be cleaned by caller\n\n      ctx.aliasNodes.push(alias); // defined along with prevObjects\n\n      return alias;\n    }\n\n    obj.value = value;\n    prevObjects.set(value, obj);\n  }\n\n  obj.node = tagObj.createNode ? tagObj.createNode(ctx.schema, value, ctx) : wrapScalars ? new resolveSeq.Scalar(value) : value;\n  if (tagName && obj.node instanceof resolveSeq.Node) obj.node.tag = tagName;\n  return obj.node;\n}\n\nfunction getSchemaTags(schemas, knownTags, customTags, schemaId) {\n  let tags = schemas[schemaId.replace(/\\W/g, '')]; // 'yaml-1.1' -> 'yaml11'\n\n  if (!tags) {\n    const keys = Object.keys(schemas).map(key => JSON.stringify(key)).join(', ');\n    throw new Error(`Unknown schema \"${schemaId}\"; use one of ${keys}`);\n  }\n\n  if (Array.isArray(customTags)) {\n    for (const tag of customTags) tags = tags.concat(tag);\n  } else if (typeof customTags === 'function') {\n    tags = customTags(tags.slice());\n  }\n\n  for (let i = 0; i < tags.length; ++i) {\n    const tag = tags[i];\n\n    if (typeof tag === 'string') {\n      const tagObj = knownTags[tag];\n\n      if (!tagObj) {\n        const keys = Object.keys(knownTags).map(key => JSON.stringify(key)).join(', ');\n        throw new Error(`Unknown custom tag \"${tag}\"; use one of ${keys}`);\n      }\n\n      tags[i] = tagObj;\n    }\n  }\n\n  return tags;\n}\n\nconst sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;\n\nclass Schema {\n  // TODO: remove in v2\n  // TODO: remove in v2\n  constructor({\n    customTags,\n    merge,\n    schema,\n    sortMapEntries,\n    tags: deprecatedCustomTags\n  }) {\n    this.merge = !!merge;\n    this.name = schema;\n    this.sortMapEntries = sortMapEntries === true ? sortMapEntriesByKey : sortMapEntries || null;\n    if (!customTags && deprecatedCustomTags) warnings.warnOptionDeprecation('tags', 'customTags');\n    this.tags = getSchemaTags(schemas, tags, customTags || deprecatedCustomTags, schema);\n  }\n\n  createNode(value, wrapScalars, tagName, ctx) {\n    const baseCtx = {\n      defaultPrefix: Schema.defaultPrefix,\n      schema: this,\n      wrapScalars\n    };\n    const createCtx = ctx ? Object.assign(ctx, baseCtx) : baseCtx;\n    return createNode(value, tagName, createCtx);\n  }\n\n  createPair(key, value, ctx) {\n    if (!ctx) ctx = {\n      wrapScalars: true\n    };\n    const k = this.createNode(key, ctx.wrapScalars, null, ctx);\n    const v = this.createNode(value, ctx.wrapScalars, null, ctx);\n    return new resolveSeq.Pair(k, v);\n  }\n\n}\n\nPlainValue._defineProperty(Schema, \"defaultPrefix\", PlainValue.defaultTagPrefix);\n\nPlainValue._defineProperty(Schema, \"defaultTags\", PlainValue.defaultTags);\n\nexports.Schema = Schema;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/yaml/dist/Schema-42e9705c.js"],"names":["PlainValue","require","resolveSeq","warnings","createMap","schema","obj","ctx","map","YAMLMap","Map","key","value","items","push","createPair","Object","keys","sortMapEntries","sort","createNode","default","nodeClass","tag","resolve","resolveMap","createSeq","seq","YAMLSeq","Symbol","iterator","it","v","wrapScalars","string","identify","resolveString","stringify","item","onComment","onChompKeep","assign","actualString","stringifyString","options","strOptions","failsafe","intIdentify","Number","isInteger","intResolve","src","part","radix","intOptions","asBigInt","BigInt","parseInt","intStringify","node","prefix","toString","stringifyNumber","nullObj","Scalar","test","nullOptions","nullStr","boolObj","str","boolOptions","trueStr","falseStr","octObj","format","oct","intObj","hexObj","hex","nanObj","nan","NaN","NEGATIVE_INFINITY","POSITIVE_INFINITY","expObj","parseFloat","toExponential","floatObj","frac1","frac2","frac","length","minFractionDigits","core","concat","intIdentify$1","stringifyJSON","JSON","json","scalarFallback","SyntaxError","boolStringify","intIdentify$2","intResolve$1","sign","replace","n","intStringify$1","substr","yaml11","bin","abs","f","binary","omap","pairs","set","intTime","floatTime","timestamp","schemas","tags","bool","float","floatExp","floatNaN","int","intHex","intOct","null","findTagObject","tagName","match","filter","t","tagObj","find","Error","class","Node","defaultPrefix","onTagObj","prevObjects","startsWith","slice","toJSON","prev","get","alias","Alias","aliasNodes","getSchemaTags","knownTags","customTags","schemaId","join","Array","isArray","i","sortMapEntriesByKey","a","b","Schema","constructor","merge","deprecatedCustomTags","name","warnOptionDeprecation","baseCtx","createCtx","k","Pair","_defineProperty","defaultTagPrefix","defaultTags","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar PlainValue = require('./PlainValue-ec8e588e.js');\nvar resolveSeq = require('./resolveSeq-4a68b39b.js');\nvar warnings = require('./warnings-39684f17.js');\n\nfunction createMap(schema, obj, ctx) {\n  const map = new resolveSeq.YAMLMap(schema);\n\n  if (obj instanceof Map) {\n    for (const [key, value] of obj) map.items.push(schema.createPair(key, value, ctx));\n  } else if (obj && typeof obj === 'object') {\n    for (const key of Object.keys(obj)) map.items.push(schema.createPair(key, obj[key], ctx));\n  }\n\n  if (typeof schema.sortMapEntries === 'function') {\n    map.items.sort(schema.sortMapEntries);\n  }\n\n  return map;\n}\n\nconst map = {\n  createNode: createMap,\n  default: true,\n  nodeClass: resolveSeq.YAMLMap,\n  tag: 'tag:yaml.org,2002:map',\n  resolve: resolveSeq.resolveMap\n};\n\nfunction createSeq(schema, obj, ctx) {\n  const seq = new resolveSeq.YAMLSeq(schema);\n\n  if (obj && obj[Symbol.iterator]) {\n    for (const it of obj) {\n      const v = schema.createNode(it, ctx.wrapScalars, null, ctx);\n      seq.items.push(v);\n    }\n  }\n\n  return seq;\n}\n\nconst seq = {\n  createNode: createSeq,\n  default: true,\n  nodeClass: resolveSeq.YAMLSeq,\n  tag: 'tag:yaml.org,2002:seq',\n  resolve: resolveSeq.resolveSeq\n};\n\nconst string = {\n  identify: value => typeof value === 'string',\n  default: true,\n  tag: 'tag:yaml.org,2002:str',\n  resolve: resolveSeq.resolveString,\n\n  stringify(item, ctx, onComment, onChompKeep) {\n    ctx = Object.assign({\n      actualString: true\n    }, ctx);\n    return resolveSeq.stringifyString(item, ctx, onComment, onChompKeep);\n  },\n\n  options: resolveSeq.strOptions\n};\n\nconst failsafe = [map, seq, string];\n\n/* global BigInt */\n\nconst intIdentify = value => typeof value === 'bigint' || Number.isInteger(value);\n\nconst intResolve = (src, part, radix) => resolveSeq.intOptions.asBigInt ? BigInt(src) : parseInt(part, radix);\n\nfunction intStringify(node, radix, prefix) {\n  const {\n    value\n  } = node;\n  if (intIdentify(value) && value >= 0) return prefix + value.toString(radix);\n  return resolveSeq.stringifyNumber(node);\n}\n\nconst nullObj = {\n  identify: value => value == null,\n  createNode: (schema, value, ctx) => ctx.wrapScalars ? new resolveSeq.Scalar(null) : null,\n  default: true,\n  tag: 'tag:yaml.org,2002:null',\n  test: /^(?:~|[Nn]ull|NULL)?$/,\n  resolve: () => null,\n  options: resolveSeq.nullOptions,\n  stringify: () => resolveSeq.nullOptions.nullStr\n};\nconst boolObj = {\n  identify: value => typeof value === 'boolean',\n  default: true,\n  tag: 'tag:yaml.org,2002:bool',\n  test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,\n  resolve: str => str[0] === 't' || str[0] === 'T',\n  options: resolveSeq.boolOptions,\n  stringify: ({\n    value\n  }) => value ? resolveSeq.boolOptions.trueStr : resolveSeq.boolOptions.falseStr\n};\nconst octObj = {\n  identify: value => intIdentify(value) && value >= 0,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'OCT',\n  test: /^0o([0-7]+)$/,\n  resolve: (str, oct) => intResolve(str, oct, 8),\n  options: resolveSeq.intOptions,\n  stringify: node => intStringify(node, 8, '0o')\n};\nconst intObj = {\n  identify: intIdentify,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  test: /^[-+]?[0-9]+$/,\n  resolve: str => intResolve(str, str, 10),\n  options: resolveSeq.intOptions,\n  stringify: resolveSeq.stringifyNumber\n};\nconst hexObj = {\n  identify: value => intIdentify(value) && value >= 0,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'HEX',\n  test: /^0x([0-9a-fA-F]+)$/,\n  resolve: (str, hex) => intResolve(str, hex, 16),\n  options: resolveSeq.intOptions,\n  stringify: node => intStringify(node, 16, '0x')\n};\nconst nanObj = {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^(?:[-+]?\\.inf|(\\.nan))$/i,\n  resolve: (str, nan) => nan ? NaN : str[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,\n  stringify: resolveSeq.stringifyNumber\n};\nconst expObj = {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  format: 'EXP',\n  test: /^[-+]?(?:\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)[eE][-+]?[0-9]+$/,\n  resolve: str => parseFloat(str),\n  stringify: ({\n    value\n  }) => Number(value).toExponential()\n};\nconst floatObj = {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^[-+]?(?:\\.([0-9]+)|[0-9]+\\.([0-9]*))$/,\n\n  resolve(str, frac1, frac2) {\n    const frac = frac1 || frac2;\n    const node = new resolveSeq.Scalar(parseFloat(str));\n    if (frac && frac[frac.length - 1] === '0') node.minFractionDigits = frac.length;\n    return node;\n  },\n\n  stringify: resolveSeq.stringifyNumber\n};\nconst core = failsafe.concat([nullObj, boolObj, octObj, intObj, hexObj, nanObj, expObj, floatObj]);\n\n/* global BigInt */\n\nconst intIdentify$1 = value => typeof value === 'bigint' || Number.isInteger(value);\n\nconst stringifyJSON = ({\n  value\n}) => JSON.stringify(value);\n\nconst json = [map, seq, {\n  identify: value => typeof value === 'string',\n  default: true,\n  tag: 'tag:yaml.org,2002:str',\n  resolve: resolveSeq.resolveString,\n  stringify: stringifyJSON\n}, {\n  identify: value => value == null,\n  createNode: (schema, value, ctx) => ctx.wrapScalars ? new resolveSeq.Scalar(null) : null,\n  default: true,\n  tag: 'tag:yaml.org,2002:null',\n  test: /^null$/,\n  resolve: () => null,\n  stringify: stringifyJSON\n}, {\n  identify: value => typeof value === 'boolean',\n  default: true,\n  tag: 'tag:yaml.org,2002:bool',\n  test: /^true|false$/,\n  resolve: str => str === 'true',\n  stringify: stringifyJSON\n}, {\n  identify: intIdentify$1,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  test: /^-?(?:0|[1-9][0-9]*)$/,\n  resolve: str => resolveSeq.intOptions.asBigInt ? BigInt(str) : parseInt(str, 10),\n  stringify: ({\n    value\n  }) => intIdentify$1(value) ? value.toString() : JSON.stringify(value)\n}, {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,\n  resolve: str => parseFloat(str),\n  stringify: stringifyJSON\n}];\n\njson.scalarFallback = str => {\n  throw new SyntaxError(`Unresolved plain scalar ${JSON.stringify(str)}`);\n};\n\n/* global BigInt */\n\nconst boolStringify = ({\n  value\n}) => value ? resolveSeq.boolOptions.trueStr : resolveSeq.boolOptions.falseStr;\n\nconst intIdentify$2 = value => typeof value === 'bigint' || Number.isInteger(value);\n\nfunction intResolve$1(sign, src, radix) {\n  let str = src.replace(/_/g, '');\n\n  if (resolveSeq.intOptions.asBigInt) {\n    switch (radix) {\n      case 2:\n        str = `0b${str}`;\n        break;\n\n      case 8:\n        str = `0o${str}`;\n        break;\n\n      case 16:\n        str = `0x${str}`;\n        break;\n    }\n\n    const n = BigInt(str);\n    return sign === '-' ? BigInt(-1) * n : n;\n  }\n\n  const n = parseInt(str, radix);\n  return sign === '-' ? -1 * n : n;\n}\n\nfunction intStringify$1(node, radix, prefix) {\n  const {\n    value\n  } = node;\n\n  if (intIdentify$2(value)) {\n    const str = value.toString(radix);\n    return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;\n  }\n\n  return resolveSeq.stringifyNumber(node);\n}\n\nconst yaml11 = failsafe.concat([{\n  identify: value => value == null,\n  createNode: (schema, value, ctx) => ctx.wrapScalars ? new resolveSeq.Scalar(null) : null,\n  default: true,\n  tag: 'tag:yaml.org,2002:null',\n  test: /^(?:~|[Nn]ull|NULL)?$/,\n  resolve: () => null,\n  options: resolveSeq.nullOptions,\n  stringify: () => resolveSeq.nullOptions.nullStr\n}, {\n  identify: value => typeof value === 'boolean',\n  default: true,\n  tag: 'tag:yaml.org,2002:bool',\n  test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,\n  resolve: () => true,\n  options: resolveSeq.boolOptions,\n  stringify: boolStringify\n}, {\n  identify: value => typeof value === 'boolean',\n  default: true,\n  tag: 'tag:yaml.org,2002:bool',\n  test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,\n  resolve: () => false,\n  options: resolveSeq.boolOptions,\n  stringify: boolStringify\n}, {\n  identify: intIdentify$2,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'BIN',\n  test: /^([-+]?)0b([0-1_]+)$/,\n  resolve: (str, sign, bin) => intResolve$1(sign, bin, 2),\n  stringify: node => intStringify$1(node, 2, '0b')\n}, {\n  identify: intIdentify$2,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'OCT',\n  test: /^([-+]?)0([0-7_]+)$/,\n  resolve: (str, sign, oct) => intResolve$1(sign, oct, 8),\n  stringify: node => intStringify$1(node, 8, '0')\n}, {\n  identify: intIdentify$2,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  test: /^([-+]?)([0-9][0-9_]*)$/,\n  resolve: (str, sign, abs) => intResolve$1(sign, abs, 10),\n  stringify: resolveSeq.stringifyNumber\n}, {\n  identify: intIdentify$2,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'HEX',\n  test: /^([-+]?)0x([0-9a-fA-F_]+)$/,\n  resolve: (str, sign, hex) => intResolve$1(sign, hex, 16),\n  stringify: node => intStringify$1(node, 16, '0x')\n}, {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^(?:[-+]?\\.inf|(\\.nan))$/i,\n  resolve: (str, nan) => nan ? NaN : str[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,\n  stringify: resolveSeq.stringifyNumber\n}, {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  format: 'EXP',\n  test: /^[-+]?([0-9][0-9_]*)?(\\.[0-9_]*)?[eE][-+]?[0-9]+$/,\n  resolve: str => parseFloat(str.replace(/_/g, '')),\n  stringify: ({\n    value\n  }) => Number(value).toExponential()\n}, {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^[-+]?(?:[0-9][0-9_]*)?\\.([0-9_]*)$/,\n\n  resolve(str, frac) {\n    const node = new resolveSeq.Scalar(parseFloat(str.replace(/_/g, '')));\n\n    if (frac) {\n      const f = frac.replace(/_/g, '');\n      if (f[f.length - 1] === '0') node.minFractionDigits = f.length;\n    }\n\n    return node;\n  },\n\n  stringify: resolveSeq.stringifyNumber\n}], warnings.binary, warnings.omap, warnings.pairs, warnings.set, warnings.intTime, warnings.floatTime, warnings.timestamp);\n\nconst schemas = {\n  core,\n  failsafe,\n  json,\n  yaml11\n};\nconst tags = {\n  binary: warnings.binary,\n  bool: boolObj,\n  float: floatObj,\n  floatExp: expObj,\n  floatNaN: nanObj,\n  floatTime: warnings.floatTime,\n  int: intObj,\n  intHex: hexObj,\n  intOct: octObj,\n  intTime: warnings.intTime,\n  map,\n  null: nullObj,\n  omap: warnings.omap,\n  pairs: warnings.pairs,\n  seq,\n  set: warnings.set,\n  timestamp: warnings.timestamp\n};\n\nfunction findTagObject(value, tagName, tags) {\n  if (tagName) {\n    const match = tags.filter(t => t.tag === tagName);\n    const tagObj = match.find(t => !t.format) || match[0];\n    if (!tagObj) throw new Error(`Tag ${tagName} not found`);\n    return tagObj;\n  } // TODO: deprecate/remove class check\n\n\n  return tags.find(t => (t.identify && t.identify(value) || t.class && value instanceof t.class) && !t.format);\n}\n\nfunction createNode(value, tagName, ctx) {\n  if (value instanceof resolveSeq.Node) return value;\n  const {\n    defaultPrefix,\n    onTagObj,\n    prevObjects,\n    schema,\n    wrapScalars\n  } = ctx;\n  if (tagName && tagName.startsWith('!!')) tagName = defaultPrefix + tagName.slice(2);\n  let tagObj = findTagObject(value, tagName, schema.tags);\n\n  if (!tagObj) {\n    if (typeof value.toJSON === 'function') value = value.toJSON();\n    if (typeof value !== 'object') return wrapScalars ? new resolveSeq.Scalar(value) : value;\n    tagObj = value instanceof Map ? map : value[Symbol.iterator] ? seq : map;\n  }\n\n  if (onTagObj) {\n    onTagObj(tagObj);\n    delete ctx.onTagObj;\n  } // Detect duplicate references to the same object & use Alias nodes for all\n  // after first. The `obj` wrapper allows for circular references to resolve.\n\n\n  const obj = {};\n\n  if (value && typeof value === 'object' && prevObjects) {\n    const prev = prevObjects.get(value);\n\n    if (prev) {\n      const alias = new resolveSeq.Alias(prev); // leaves source dirty; must be cleaned by caller\n\n      ctx.aliasNodes.push(alias); // defined along with prevObjects\n\n      return alias;\n    }\n\n    obj.value = value;\n    prevObjects.set(value, obj);\n  }\n\n  obj.node = tagObj.createNode ? tagObj.createNode(ctx.schema, value, ctx) : wrapScalars ? new resolveSeq.Scalar(value) : value;\n  if (tagName && obj.node instanceof resolveSeq.Node) obj.node.tag = tagName;\n  return obj.node;\n}\n\nfunction getSchemaTags(schemas, knownTags, customTags, schemaId) {\n  let tags = schemas[schemaId.replace(/\\W/g, '')]; // 'yaml-1.1' -> 'yaml11'\n\n  if (!tags) {\n    const keys = Object.keys(schemas).map(key => JSON.stringify(key)).join(', ');\n    throw new Error(`Unknown schema \"${schemaId}\"; use one of ${keys}`);\n  }\n\n  if (Array.isArray(customTags)) {\n    for (const tag of customTags) tags = tags.concat(tag);\n  } else if (typeof customTags === 'function') {\n    tags = customTags(tags.slice());\n  }\n\n  for (let i = 0; i < tags.length; ++i) {\n    const tag = tags[i];\n\n    if (typeof tag === 'string') {\n      const tagObj = knownTags[tag];\n\n      if (!tagObj) {\n        const keys = Object.keys(knownTags).map(key => JSON.stringify(key)).join(', ');\n        throw new Error(`Unknown custom tag \"${tag}\"; use one of ${keys}`);\n      }\n\n      tags[i] = tagObj;\n    }\n  }\n\n  return tags;\n}\n\nconst sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;\n\nclass Schema {\n  // TODO: remove in v2\n  // TODO: remove in v2\n  constructor({\n    customTags,\n    merge,\n    schema,\n    sortMapEntries,\n    tags: deprecatedCustomTags\n  }) {\n    this.merge = !!merge;\n    this.name = schema;\n    this.sortMapEntries = sortMapEntries === true ? sortMapEntriesByKey : sortMapEntries || null;\n    if (!customTags && deprecatedCustomTags) warnings.warnOptionDeprecation('tags', 'customTags');\n    this.tags = getSchemaTags(schemas, tags, customTags || deprecatedCustomTags, schema);\n  }\n\n  createNode(value, wrapScalars, tagName, ctx) {\n    const baseCtx = {\n      defaultPrefix: Schema.defaultPrefix,\n      schema: this,\n      wrapScalars\n    };\n    const createCtx = ctx ? Object.assign(ctx, baseCtx) : baseCtx;\n    return createNode(value, tagName, createCtx);\n  }\n\n  createPair(key, value, ctx) {\n    if (!ctx) ctx = {\n      wrapScalars: true\n    };\n    const k = this.createNode(key, ctx.wrapScalars, null, ctx);\n    const v = this.createNode(value, ctx.wrapScalars, null, ctx);\n    return new resolveSeq.Pair(k, v);\n  }\n\n}\n\nPlainValue._defineProperty(Schema, \"defaultPrefix\", PlainValue.defaultTagPrefix);\n\nPlainValue._defineProperty(Schema, \"defaultTags\", PlainValue.defaultTags);\n\nexports.Schema = Schema;\n"]},"metadata":{},"sourceType":"script"}