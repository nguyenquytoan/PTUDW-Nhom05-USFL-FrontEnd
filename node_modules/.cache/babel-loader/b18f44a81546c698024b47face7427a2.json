{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.options = exports.docs = exports.usage = exports.check = void 0;\n\nfunction _jestConfig() {\n  const data = require('jest-config');\n\n  _jestConfig = function _jestConfig() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _isCi() {\n  const data = _interopRequireDefault(require('is-ci'));\n\n  _isCi = function _isCi() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst check = argv => {\n  if (argv.runInBand && argv.hasOwnProperty('maxWorkers')) {\n    throw new Error('Both --runInBand and --maxWorkers were specified, but these two ' + 'options do not make sense together. Which is it?');\n  }\n\n  var _arr = ['onlyChanged', 'lastCommit', 'changedFilesWithAncestor', 'changedSince'];\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    const key = _arr[_i];\n\n    if (argv[key] && argv.watchAll) {\n      throw new Error(`Both --${key} and --watchAll were specified, but these two ` + 'options do not make sense together. Try the --watch option which ' + 'reruns only tests related to changed files.');\n    }\n  }\n\n  if (argv.findRelatedTests && argv._.length === 0) {\n    throw new Error('The --findRelatedTests option requires file paths to be specified.\\n' + 'Example usage: jest --findRelatedTests ./src/source.js ' + './src/index.js.');\n  }\n\n  if (argv.hasOwnProperty('maxWorkers') && argv.maxWorkers === undefined) {\n    throw new Error('The --maxWorkers (-w) option requires a number or string to be specified.\\n' + 'Example usage: jest --maxWorkers 2\\n' + 'Example usage: jest --maxWorkers 50%\\n' + 'Or did you mean --watch?');\n  }\n\n  if (argv.config && !(0, _jestConfig().isJSONString)(argv.config) && !argv.config.match(/\\.js(on)?$/)) {\n    throw new Error('The --config option requires a JSON string literal, or a file path with a .js or .json extension.\\n' + 'Example usage: jest --config ./jest.config.js');\n  }\n\n  return true;\n};\n\nexports.check = check;\nconst usage = 'Usage: $0 [--config=<pathToConfigFile>] [TestPathPattern]';\nexports.usage = usage;\nconst docs = 'Documentation: https://jestjs.io/';\nexports.docs = docs;\nconst options = {\n  all: {\n    default: undefined,\n    description: 'The opposite of `onlyChanged`. If `onlyChanged` is set by ' + 'default, running jest with `--all` will force Jest to run all tests ' + 'instead of running only tests related to changed files.',\n    type: 'boolean'\n  },\n  automock: {\n    default: undefined,\n    description: 'Automock all files by default.',\n    type: 'boolean'\n  },\n  bail: {\n    alias: 'b',\n    default: undefined,\n    description: 'Exit the test suite immediately after `n` number of failing tests.',\n    type: 'boolean'\n  },\n  browser: {\n    default: undefined,\n    description: 'Respect the \"browser\" field in package.json ' + 'when resolving modules. Some packages export different versions ' + 'based on whether they are operating in node.js or a browser.',\n    type: 'boolean'\n  },\n  cache: {\n    default: undefined,\n    description: 'Whether to use the transform cache. Disable the cache ' + 'using --no-cache.',\n    type: 'boolean'\n  },\n  cacheDirectory: {\n    description: 'The directory where Jest should store its cached ' + ' dependency information.',\n    type: 'string'\n  },\n  changedFilesWithAncestor: {\n    default: undefined,\n    description: 'Runs tests related to the current changes and the changes made in the ' + 'last commit. Behaves similarly to `--onlyChanged`.',\n    type: 'boolean'\n  },\n  changedSince: {\n    description: 'Runs tests related to the changes since the provided branch. If the ' + 'current branch has diverged from the given branch, then only changes ' + 'made locally will be tested. Behaves similarly to `--onlyChanged`.',\n    nargs: 1,\n    type: 'string'\n  },\n  ci: {\n    default: _isCi().default,\n    description: 'Whether to run Jest in continuous integration (CI) mode. ' + 'This option is on by default in most popular CI environments. It will ' + ' prevent snapshots from being written unless explicitly requested.',\n    type: 'boolean'\n  },\n  clearCache: {\n    default: undefined,\n    description: 'Clears the configured Jest cache directory and then exits. ' + 'Default directory can be found by calling jest --showConfig',\n    type: 'boolean'\n  },\n  clearMocks: {\n    default: undefined,\n    description: 'Automatically clear mock calls and instances between every ' + 'test. Equivalent to calling jest.clearAllMocks() between each test.',\n    type: 'boolean'\n  },\n  collectCoverage: {\n    default: undefined,\n    description: 'Alias for --coverage.',\n    type: 'boolean'\n  },\n  collectCoverageFrom: {\n    description: 'A glob pattern relative to <rootDir> matching the files that coverage ' + 'info needs to be collected from.',\n    type: 'string'\n  },\n  collectCoverageOnlyFrom: {\n    description: 'Explicit list of paths coverage will be restricted to.',\n    string: true,\n    type: 'array'\n  },\n  color: {\n    default: undefined,\n    description: 'Forces test results output color highlighting (even if ' + 'stdout is not a TTY). Set to false if you would like to have no colors.',\n    type: 'boolean'\n  },\n  colors: {\n    default: undefined,\n    description: 'Alias for `--color`.',\n    type: 'boolean'\n  },\n  config: {\n    alias: 'c',\n    description: 'The path to a jest config file specifying how to find ' + 'and execute tests. If no rootDir is set in the config, the directory ' + 'containing the config file is assumed to be the rootDir for the project.' + 'This can also be a JSON encoded value which Jest will use as configuration.',\n    type: 'string'\n  },\n  coverage: {\n    default: undefined,\n    description: 'Indicates that test coverage information should be ' + 'collected and reported in the output.',\n    type: 'boolean'\n  },\n  coverageDirectory: {\n    description: 'The directory where Jest should output its coverage files.',\n    type: 'string'\n  },\n  coveragePathIgnorePatterns: {\n    description: 'An array of regexp pattern strings that are matched ' + 'against all file paths before executing the test. If the file path' + 'matches any of the patterns, coverage information will be skipped.',\n    string: true,\n    type: 'array'\n  },\n  coverageReporters: {\n    description: 'A list of reporter names that Jest uses when writing ' + 'coverage reports. Any istanbul reporter can be used.',\n    string: true,\n    type: 'array'\n  },\n  coverageThreshold: {\n    description: 'A JSON string with which will be used to configure ' + 'minimum threshold enforcement for coverage results',\n    type: 'string'\n  },\n  debug: {\n    default: undefined,\n    description: 'Print debugging info about your jest config.',\n    type: 'boolean'\n  },\n  detectLeaks: {\n    default: false,\n    description: '**EXPERIMENTAL**: Detect memory leaks in tests. After executing a ' + 'test, it will try to garbage collect the global object used, and fail ' + 'if it was leaked',\n    type: 'boolean'\n  },\n  detectOpenHandles: {\n    default: false,\n    description: 'Print out remaining open handles preventing Jest from exiting at the ' + 'end of a test run. Implies `runInBand`.',\n    type: 'boolean'\n  },\n  env: {\n    description: 'The test environment used for all tests. This can point to ' + 'any file or node module. Examples: `jsdom`, `node` or ' + '`path/to/my-environment.js`',\n    type: 'string'\n  },\n  errorOnDeprecated: {\n    default: false,\n    description: 'Make calling deprecated APIs throw helpful error messages.',\n    type: 'boolean'\n  },\n  expand: {\n    alias: 'e',\n    default: undefined,\n    description: 'Use this flag to show full diffs instead of a patch.',\n    type: 'boolean'\n  },\n  filter: {\n    default: undefined,\n    description: 'Path to a module exporting a filtering function. This method receives ' + 'a list of tests which can be manipulated to exclude tests from ' + 'running. Especially useful when used in conjunction with a testing ' + 'infrastructure to filter known broken tests.',\n    type: 'string'\n  },\n  findRelatedTests: {\n    default: undefined,\n    description: 'Find related tests for a list of source files that were ' + 'passed in as arguments. Useful for pre-commit hook integration to run ' + 'the minimal amount of tests necessary.',\n    type: 'boolean'\n  },\n  forceExit: {\n    default: undefined,\n    description: 'Force Jest to exit after all tests have completed running. ' + 'This is useful when resources set up by test code cannot be ' + 'adequately cleaned up.',\n    type: 'boolean'\n  },\n  globalSetup: {\n    description: 'The path to a module that runs before All Tests.',\n    type: 'string'\n  },\n  globalTeardown: {\n    description: 'The path to a module that runs after All Tests.',\n    type: 'string'\n  },\n  globals: {\n    description: 'A JSON string with map of global variables that need ' + 'to be available in all test environments.',\n    type: 'string'\n  },\n  haste: {\n    description: 'A JSON string with map of variables for the haste module system',\n    type: 'string'\n  },\n  init: {\n    description: 'Generate a basic configuration file',\n    type: 'boolean'\n  },\n  json: {\n    default: undefined,\n    description: 'Prints the test results in JSON. This mode will send all ' + 'other test output and user messages to stderr.',\n    type: 'boolean'\n  },\n  lastCommit: {\n    default: undefined,\n    description: 'Run all tests affected by file changes in the last commit made. ' + 'Behaves similarly to `--onlyChanged`.',\n    type: 'boolean'\n  },\n  listTests: {\n    default: false,\n    description: 'Lists all tests Jest will run given the arguments and ' + 'exits. Most useful in a CI system together with `--findRelatedTests` ' + 'to determine the tests Jest will run based on specific files',\n    type: 'boolean'\n  },\n  logHeapUsage: {\n    default: undefined,\n    description: 'Logs the heap usage after every test. Useful to debug ' + 'memory leaks. Use together with `--runInBand` and `--expose-gc` in ' + 'node.',\n    type: 'boolean'\n  },\n  mapCoverage: {\n    default: undefined,\n    description: 'Maps code coverage reports against original source code ' + 'when transformers supply source maps.\\n\\nDEPRECATED',\n    type: 'boolean'\n  },\n  maxConcurrency: {\n    default: 5,\n    description: 'Specifies the maximum number of tests that are allowed to run' + 'concurrently. This only affects tests using `test.concurrent`.',\n    type: 'number'\n  },\n  maxWorkers: {\n    alias: 'w',\n    description: 'Specifies the maximum number of workers the worker-pool ' + 'will spawn for running tests. This defaults to the number of the ' + 'cores available on your machine. (its usually best not to override ' + 'this default)',\n    type: 'string'\n  },\n  moduleDirectories: {\n    description: 'An array of directory names to be searched recursively ' + \"up from the requiring module's location.\",\n    string: true,\n    type: 'array'\n  },\n  moduleFileExtensions: {\n    description: 'An array of file extensions your modules use. If you ' + 'require modules without specifying a file extension, these are the ' + 'extensions Jest will look for. ',\n    string: true,\n    type: 'array'\n  },\n  moduleNameMapper: {\n    description: 'A JSON string with a map from regular expressions to ' + 'module names that allow to stub out resources, like images or ' + 'styles with a single module',\n    type: 'string'\n  },\n  modulePathIgnorePatterns: {\n    description: 'An array of regexp pattern strings that are matched ' + 'against all module paths before those paths are to be considered ' + '\"visible\" to the module loader.',\n    string: true,\n    type: 'array'\n  },\n  modulePaths: {\n    description: 'An alternative API to setting the NODE_PATH env variable, ' + 'modulePaths is an array of absolute paths to additional locations to ' + 'search when resolving modules.',\n    string: true,\n    type: 'array'\n  },\n  noStackTrace: {\n    default: undefined,\n    description: 'Disables stack trace in test results output',\n    type: 'boolean'\n  },\n  notify: {\n    default: undefined,\n    description: 'Activates notifications for test results.',\n    type: 'boolean'\n  },\n  notifyMode: {\n    default: 'failure-change',\n    description: 'Specifies when notifications will appear for test results.',\n    type: 'string'\n  },\n  onlyChanged: {\n    alias: 'o',\n    default: undefined,\n    description: 'Attempts to identify which tests to run based on which ' + \"files have changed in the current repository. Only works if you're \" + 'running tests in a git or hg repository at the moment.',\n    type: 'boolean'\n  },\n  onlyFailures: {\n    alias: 'f',\n    default: undefined,\n    description: 'Run tests that failed in the previous execution.',\n    type: 'boolean'\n  },\n  outputFile: {\n    description: 'Write test results to a file when the --json option is ' + 'also specified.',\n    type: 'string'\n  },\n  passWithNoTests: {\n    default: false,\n    description: 'Will not fail if no tests are found (for example while using `--testPathPattern`.)',\n    type: 'boolean'\n  },\n  preset: {\n    description: \"A preset that is used as a base for Jest's configuration.\",\n    type: 'string'\n  },\n  prettierPath: {\n    default: undefined,\n    description: 'The path to the \"prettier\" module used for inline snapshots.',\n    type: 'string'\n  },\n  projects: {\n    description: 'A list of projects that use Jest to run all tests of all ' + 'projects in a single instance of Jest.',\n    string: true,\n    type: 'array'\n  },\n  reporters: {\n    description: 'A list of custom reporters for the test suite.',\n    string: true,\n    type: 'array'\n  },\n  resetMocks: {\n    default: undefined,\n    description: 'Automatically reset mock state between every test. ' + 'Equivalent to calling jest.resetAllMocks() between each test.',\n    type: 'boolean'\n  },\n  resetModules: {\n    default: undefined,\n    description: 'If enabled, the module registry for every test file will ' + 'be reset before running each individual test.',\n    type: 'boolean'\n  },\n  resolver: {\n    description: 'A JSON string which allows the use of a custom resolver.',\n    type: 'string'\n  },\n  restoreMocks: {\n    default: undefined,\n    description: 'Automatically restore mock state and implementation between every test. ' + 'Equivalent to calling jest.restoreAllMocks() between each test.',\n    type: 'boolean'\n  },\n  rootDir: {\n    description: 'The root directory that Jest should scan for tests and ' + 'modules within.',\n    type: 'string'\n  },\n  roots: {\n    description: 'A list of paths to directories that Jest should use to ' + 'search for files in.',\n    string: true,\n    type: 'array'\n  },\n  runInBand: {\n    alias: 'i',\n    default: undefined,\n    description: 'Run all tests serially in the current process (rather than ' + 'creating a worker pool of child processes that run tests). This ' + 'is sometimes useful for debugging, but such use cases are pretty ' + 'rare.',\n    type: 'boolean'\n  },\n  runTestsByPath: {\n    default: false,\n    description: 'Used when provided patterns are exact file paths. This avoids ' + 'converting them into a regular expression and matching it against ' + 'every single file.',\n    type: 'boolean'\n  },\n  runner: {\n    description: \"Allows to use a custom runner instead of Jest's default test runner.\",\n    type: 'string'\n  },\n  setupFiles: {\n    description: 'A list of paths to modules that run some code to configure or ' + 'set up the testing environment before each test. ',\n    string: true,\n    type: 'array'\n  },\n  setupFilesAfterEnv: {\n    description: 'A list of paths to modules that run some code to configure or ' + 'set up the testing framework before each test ',\n    string: true,\n    type: 'array'\n  },\n  showConfig: {\n    default: undefined,\n    description: 'Print your jest config and then exits.',\n    type: 'boolean'\n  },\n  silent: {\n    default: undefined,\n    description: 'Prevent tests from printing messages through the console.',\n    type: 'boolean'\n  },\n  skipFilter: {\n    default: undefined,\n    description: 'Disables the filter provided by --filter. Useful for CI jobs, or ' + 'local enforcement when fixing tests.',\n    type: 'boolean'\n  },\n  snapshotSerializers: {\n    description: 'A list of paths to snapshot serializer modules Jest should ' + 'use for snapshot testing.',\n    string: true,\n    type: 'array'\n  },\n  testEnvironment: {\n    description: 'Alias for --env',\n    type: 'string'\n  },\n  testEnvironmentOptions: {\n    description: 'Test environment options that will be passed to the testEnvironment. ' + 'The relevant options depend on the environment.',\n    type: 'string' // Object\n\n  },\n  testFailureExitCode: {\n    description: 'Exit code of `jest` command if the test run failed',\n    type: 'string' // number\n\n  },\n  testLocationInResults: {\n    default: false,\n    description: 'Add `location` information to the test results',\n    type: 'boolean'\n  },\n  testMatch: {\n    description: 'The glob patterns Jest uses to detect test files.',\n    string: true,\n    type: 'array'\n  },\n  testNamePattern: {\n    alias: 't',\n    description: 'Run only tests with a name that matches the regex pattern.',\n    type: 'string'\n  },\n  testPathIgnorePatterns: {\n    description: 'An array of regexp pattern strings that are matched ' + 'against all test paths before executing the test. If the test path ' + 'matches any of the patterns, it will be skipped.',\n    string: true,\n    type: 'array'\n  },\n  testPathPattern: {\n    description: 'A regexp pattern string that is matched against all tests ' + 'paths before executing the test.',\n    string: true,\n    type: 'array'\n  },\n  testRegex: {\n    description: 'A string or array of string regexp patterns that Jest uses to detect test files.',\n    string: true,\n    type: 'array'\n  },\n  testResultsProcessor: {\n    description: 'Allows the use of a custom results processor. ' + 'This processor must be a node module that exports ' + 'a function expecting as the first argument the result object.',\n    type: 'string'\n  },\n  testRunner: {\n    description: 'Allows to specify a custom test runner. The default is ' + ' `jasmine2`. A path to a custom test runner can be provided: ' + '`<rootDir>/path/to/testRunner.js`.',\n    type: 'string'\n  },\n  testSequencer: {\n    description: 'Allows to specify a custom test sequencer. The default is ' + '`@jest/test-sequencer`. A path to a custom test sequencer can be ' + 'provided: `<rootDir>/path/to/testSequencer.js`',\n    type: 'string'\n  },\n  testTimeout: {\n    description: 'This option sets the default timeouts of test cases.',\n    type: 'number'\n  },\n  testURL: {\n    description: 'This option sets the URL for the jsdom environment.',\n    type: 'string'\n  },\n  timers: {\n    description: 'Setting this value to fake allows the use of fake timers ' + 'for functions such as setTimeout.',\n    type: 'string'\n  },\n  transform: {\n    description: 'A JSON string which maps from regular expressions to paths ' + 'to transformers.',\n    type: 'string'\n  },\n  transformIgnorePatterns: {\n    description: 'An array of regexp pattern strings that are matched ' + 'against all source file paths before transformation.',\n    string: true,\n    type: 'array'\n  },\n  unmockedModulePathPatterns: {\n    description: 'An array of regexp pattern strings that are matched ' + 'against all modules before the module loader will automatically ' + 'return a mock for them.',\n    string: true,\n    type: 'array'\n  },\n  updateSnapshot: {\n    alias: 'u',\n    default: undefined,\n    description: 'Use this flag to re-record snapshots. ' + 'Can be used together with a test suite pattern or with ' + '`--testNamePattern` to re-record snapshot for test matching ' + 'the pattern',\n    type: 'boolean'\n  },\n  useStderr: {\n    default: undefined,\n    description: 'Divert all output to stderr.',\n    type: 'boolean'\n  },\n  verbose: {\n    default: undefined,\n    description: 'Display individual test results with the test suite hierarchy.',\n    type: 'boolean'\n  },\n  version: {\n    alias: 'v',\n    default: undefined,\n    description: 'Print the version and exit',\n    type: 'boolean'\n  },\n  watch: {\n    default: undefined,\n    description: 'Watch files for changes and rerun tests related to ' + 'changed files. If you want to re-run all tests when a file has ' + 'changed, use the `--watchAll` option.',\n    type: 'boolean'\n  },\n  watchAll: {\n    default: undefined,\n    description: 'Watch files for changes and rerun all tests. If you want ' + 'to re-run only the tests related to the changed files, use the ' + '`--watch` option.',\n    type: 'boolean'\n  },\n  watchPathIgnorePatterns: {\n    description: 'An array of regexp pattern strings that are matched ' + 'against all paths before trigger test re-run in watch mode. ' + 'If the test path matches any of the patterns, it will be skipped.',\n    string: true,\n    type: 'array'\n  },\n  watchman: {\n    default: undefined,\n    description: 'Whether to use watchman for file crawling. Disable using ' + '--no-watchman.',\n    type: 'boolean'\n  }\n};\nexports.options = options;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest/node_modules/jest-cli/build/cli/args.js"],"names":["Object","defineProperty","exports","value","options","docs","usage","check","_jestConfig","data","require","_isCi","_interopRequireDefault","obj","__esModule","default","argv","runInBand","hasOwnProperty","Error","_arr","_i","length","key","watchAll","findRelatedTests","_","maxWorkers","undefined","config","isJSONString","match","all","description","type","automock","bail","alias","browser","cache","cacheDirectory","changedFilesWithAncestor","changedSince","nargs","ci","clearCache","clearMocks","collectCoverage","collectCoverageFrom","collectCoverageOnlyFrom","string","color","colors","coverage","coverageDirectory","coveragePathIgnorePatterns","coverageReporters","coverageThreshold","debug","detectLeaks","detectOpenHandles","env","errorOnDeprecated","expand","filter","forceExit","globalSetup","globalTeardown","globals","haste","init","json","lastCommit","listTests","logHeapUsage","mapCoverage","maxConcurrency","moduleDirectories","moduleFileExtensions","moduleNameMapper","modulePathIgnorePatterns","modulePaths","noStackTrace","notify","notifyMode","onlyChanged","onlyFailures","outputFile","passWithNoTests","preset","prettierPath","projects","reporters","resetMocks","resetModules","resolver","restoreMocks","rootDir","roots","runTestsByPath","runner","setupFiles","setupFilesAfterEnv","showConfig","silent","skipFilter","snapshotSerializers","testEnvironment","testEnvironmentOptions","testFailureExitCode","testLocationInResults","testMatch","testNamePattern","testPathIgnorePatterns","testPathPattern","testRegex","testResultsProcessor","testRunner","testSequencer","testTimeout","testURL","timers","transform","transformIgnorePatterns","unmockedModulePathPatterns","updateSnapshot","useStderr","verbose","version","watch","watchPathIgnorePatterns","watchman"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.options = exports.docs = exports.usage = exports.check = void 0;\n\nfunction _jestConfig() {\n  const data = require('jest-config');\n\n  _jestConfig = function _jestConfig() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _isCi() {\n  const data = _interopRequireDefault(require('is-ci'));\n\n  _isCi = function _isCi() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst check = argv => {\n  if (argv.runInBand && argv.hasOwnProperty('maxWorkers')) {\n    throw new Error(\n      'Both --runInBand and --maxWorkers were specified, but these two ' +\n        'options do not make sense together. Which is it?'\n    );\n  }\n\n  var _arr = [\n    'onlyChanged',\n    'lastCommit',\n    'changedFilesWithAncestor',\n    'changedSince'\n  ];\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    const key = _arr[_i];\n\n    if (argv[key] && argv.watchAll) {\n      throw new Error(\n        `Both --${key} and --watchAll were specified, but these two ` +\n          'options do not make sense together. Try the --watch option which ' +\n          'reruns only tests related to changed files.'\n      );\n    }\n  }\n\n  if (argv.findRelatedTests && argv._.length === 0) {\n    throw new Error(\n      'The --findRelatedTests option requires file paths to be specified.\\n' +\n        'Example usage: jest --findRelatedTests ./src/source.js ' +\n        './src/index.js.'\n    );\n  }\n\n  if (argv.hasOwnProperty('maxWorkers') && argv.maxWorkers === undefined) {\n    throw new Error(\n      'The --maxWorkers (-w) option requires a number or string to be specified.\\n' +\n        'Example usage: jest --maxWorkers 2\\n' +\n        'Example usage: jest --maxWorkers 50%\\n' +\n        'Or did you mean --watch?'\n    );\n  }\n\n  if (\n    argv.config &&\n    !(0, _jestConfig().isJSONString)(argv.config) &&\n    !argv.config.match(/\\.js(on)?$/)\n  ) {\n    throw new Error(\n      'The --config option requires a JSON string literal, or a file path with a .js or .json extension.\\n' +\n        'Example usage: jest --config ./jest.config.js'\n    );\n  }\n\n  return true;\n};\n\nexports.check = check;\nconst usage = 'Usage: $0 [--config=<pathToConfigFile>] [TestPathPattern]';\nexports.usage = usage;\nconst docs = 'Documentation: https://jestjs.io/';\nexports.docs = docs;\nconst options = {\n  all: {\n    default: undefined,\n    description:\n      'The opposite of `onlyChanged`. If `onlyChanged` is set by ' +\n      'default, running jest with `--all` will force Jest to run all tests ' +\n      'instead of running only tests related to changed files.',\n    type: 'boolean'\n  },\n  automock: {\n    default: undefined,\n    description: 'Automock all files by default.',\n    type: 'boolean'\n  },\n  bail: {\n    alias: 'b',\n    default: undefined,\n    description:\n      'Exit the test suite immediately after `n` number of failing tests.',\n    type: 'boolean'\n  },\n  browser: {\n    default: undefined,\n    description:\n      'Respect the \"browser\" field in package.json ' +\n      'when resolving modules. Some packages export different versions ' +\n      'based on whether they are operating in node.js or a browser.',\n    type: 'boolean'\n  },\n  cache: {\n    default: undefined,\n    description:\n      'Whether to use the transform cache. Disable the cache ' +\n      'using --no-cache.',\n    type: 'boolean'\n  },\n  cacheDirectory: {\n    description:\n      'The directory where Jest should store its cached ' +\n      ' dependency information.',\n    type: 'string'\n  },\n  changedFilesWithAncestor: {\n    default: undefined,\n    description:\n      'Runs tests related to the current changes and the changes made in the ' +\n      'last commit. Behaves similarly to `--onlyChanged`.',\n    type: 'boolean'\n  },\n  changedSince: {\n    description:\n      'Runs tests related to the changes since the provided branch. If the ' +\n      'current branch has diverged from the given branch, then only changes ' +\n      'made locally will be tested. Behaves similarly to `--onlyChanged`.',\n    nargs: 1,\n    type: 'string'\n  },\n  ci: {\n    default: _isCi().default,\n    description:\n      'Whether to run Jest in continuous integration (CI) mode. ' +\n      'This option is on by default in most popular CI environments. It will ' +\n      ' prevent snapshots from being written unless explicitly requested.',\n    type: 'boolean'\n  },\n  clearCache: {\n    default: undefined,\n    description:\n      'Clears the configured Jest cache directory and then exits. ' +\n      'Default directory can be found by calling jest --showConfig',\n    type: 'boolean'\n  },\n  clearMocks: {\n    default: undefined,\n    description:\n      'Automatically clear mock calls and instances between every ' +\n      'test. Equivalent to calling jest.clearAllMocks() between each test.',\n    type: 'boolean'\n  },\n  collectCoverage: {\n    default: undefined,\n    description: 'Alias for --coverage.',\n    type: 'boolean'\n  },\n  collectCoverageFrom: {\n    description:\n      'A glob pattern relative to <rootDir> matching the files that coverage ' +\n      'info needs to be collected from.',\n    type: 'string'\n  },\n  collectCoverageOnlyFrom: {\n    description: 'Explicit list of paths coverage will be restricted to.',\n    string: true,\n    type: 'array'\n  },\n  color: {\n    default: undefined,\n    description:\n      'Forces test results output color highlighting (even if ' +\n      'stdout is not a TTY). Set to false if you would like to have no colors.',\n    type: 'boolean'\n  },\n  colors: {\n    default: undefined,\n    description: 'Alias for `--color`.',\n    type: 'boolean'\n  },\n  config: {\n    alias: 'c',\n    description:\n      'The path to a jest config file specifying how to find ' +\n      'and execute tests. If no rootDir is set in the config, the directory ' +\n      'containing the config file is assumed to be the rootDir for the project.' +\n      'This can also be a JSON encoded value which Jest will use as configuration.',\n    type: 'string'\n  },\n  coverage: {\n    default: undefined,\n    description:\n      'Indicates that test coverage information should be ' +\n      'collected and reported in the output.',\n    type: 'boolean'\n  },\n  coverageDirectory: {\n    description: 'The directory where Jest should output its coverage files.',\n    type: 'string'\n  },\n  coveragePathIgnorePatterns: {\n    description:\n      'An array of regexp pattern strings that are matched ' +\n      'against all file paths before executing the test. If the file path' +\n      'matches any of the patterns, coverage information will be skipped.',\n    string: true,\n    type: 'array'\n  },\n  coverageReporters: {\n    description:\n      'A list of reporter names that Jest uses when writing ' +\n      'coverage reports. Any istanbul reporter can be used.',\n    string: true,\n    type: 'array'\n  },\n  coverageThreshold: {\n    description:\n      'A JSON string with which will be used to configure ' +\n      'minimum threshold enforcement for coverage results',\n    type: 'string'\n  },\n  debug: {\n    default: undefined,\n    description: 'Print debugging info about your jest config.',\n    type: 'boolean'\n  },\n  detectLeaks: {\n    default: false,\n    description:\n      '**EXPERIMENTAL**: Detect memory leaks in tests. After executing a ' +\n      'test, it will try to garbage collect the global object used, and fail ' +\n      'if it was leaked',\n    type: 'boolean'\n  },\n  detectOpenHandles: {\n    default: false,\n    description:\n      'Print out remaining open handles preventing Jest from exiting at the ' +\n      'end of a test run. Implies `runInBand`.',\n    type: 'boolean'\n  },\n  env: {\n    description:\n      'The test environment used for all tests. This can point to ' +\n      'any file or node module. Examples: `jsdom`, `node` or ' +\n      '`path/to/my-environment.js`',\n    type: 'string'\n  },\n  errorOnDeprecated: {\n    default: false,\n    description: 'Make calling deprecated APIs throw helpful error messages.',\n    type: 'boolean'\n  },\n  expand: {\n    alias: 'e',\n    default: undefined,\n    description: 'Use this flag to show full diffs instead of a patch.',\n    type: 'boolean'\n  },\n  filter: {\n    default: undefined,\n    description:\n      'Path to a module exporting a filtering function. This method receives ' +\n      'a list of tests which can be manipulated to exclude tests from ' +\n      'running. Especially useful when used in conjunction with a testing ' +\n      'infrastructure to filter known broken tests.',\n    type: 'string'\n  },\n  findRelatedTests: {\n    default: undefined,\n    description:\n      'Find related tests for a list of source files that were ' +\n      'passed in as arguments. Useful for pre-commit hook integration to run ' +\n      'the minimal amount of tests necessary.',\n    type: 'boolean'\n  },\n  forceExit: {\n    default: undefined,\n    description:\n      'Force Jest to exit after all tests have completed running. ' +\n      'This is useful when resources set up by test code cannot be ' +\n      'adequately cleaned up.',\n    type: 'boolean'\n  },\n  globalSetup: {\n    description: 'The path to a module that runs before All Tests.',\n    type: 'string'\n  },\n  globalTeardown: {\n    description: 'The path to a module that runs after All Tests.',\n    type: 'string'\n  },\n  globals: {\n    description:\n      'A JSON string with map of global variables that need ' +\n      'to be available in all test environments.',\n    type: 'string'\n  },\n  haste: {\n    description:\n      'A JSON string with map of variables for the haste module system',\n    type: 'string'\n  },\n  init: {\n    description: 'Generate a basic configuration file',\n    type: 'boolean'\n  },\n  json: {\n    default: undefined,\n    description:\n      'Prints the test results in JSON. This mode will send all ' +\n      'other test output and user messages to stderr.',\n    type: 'boolean'\n  },\n  lastCommit: {\n    default: undefined,\n    description:\n      'Run all tests affected by file changes in the last commit made. ' +\n      'Behaves similarly to `--onlyChanged`.',\n    type: 'boolean'\n  },\n  listTests: {\n    default: false,\n    description:\n      'Lists all tests Jest will run given the arguments and ' +\n      'exits. Most useful in a CI system together with `--findRelatedTests` ' +\n      'to determine the tests Jest will run based on specific files',\n    type: 'boolean'\n  },\n  logHeapUsage: {\n    default: undefined,\n    description:\n      'Logs the heap usage after every test. Useful to debug ' +\n      'memory leaks. Use together with `--runInBand` and `--expose-gc` in ' +\n      'node.',\n    type: 'boolean'\n  },\n  mapCoverage: {\n    default: undefined,\n    description:\n      'Maps code coverage reports against original source code ' +\n      'when transformers supply source maps.\\n\\nDEPRECATED',\n    type: 'boolean'\n  },\n  maxConcurrency: {\n    default: 5,\n    description:\n      'Specifies the maximum number of tests that are allowed to run' +\n      'concurrently. This only affects tests using `test.concurrent`.',\n    type: 'number'\n  },\n  maxWorkers: {\n    alias: 'w',\n    description:\n      'Specifies the maximum number of workers the worker-pool ' +\n      'will spawn for running tests. This defaults to the number of the ' +\n      'cores available on your machine. (its usually best not to override ' +\n      'this default)',\n    type: 'string'\n  },\n  moduleDirectories: {\n    description:\n      'An array of directory names to be searched recursively ' +\n      \"up from the requiring module's location.\",\n    string: true,\n    type: 'array'\n  },\n  moduleFileExtensions: {\n    description:\n      'An array of file extensions your modules use. If you ' +\n      'require modules without specifying a file extension, these are the ' +\n      'extensions Jest will look for. ',\n    string: true,\n    type: 'array'\n  },\n  moduleNameMapper: {\n    description:\n      'A JSON string with a map from regular expressions to ' +\n      'module names that allow to stub out resources, like images or ' +\n      'styles with a single module',\n    type: 'string'\n  },\n  modulePathIgnorePatterns: {\n    description:\n      'An array of regexp pattern strings that are matched ' +\n      'against all module paths before those paths are to be considered ' +\n      '\"visible\" to the module loader.',\n    string: true,\n    type: 'array'\n  },\n  modulePaths: {\n    description:\n      'An alternative API to setting the NODE_PATH env variable, ' +\n      'modulePaths is an array of absolute paths to additional locations to ' +\n      'search when resolving modules.',\n    string: true,\n    type: 'array'\n  },\n  noStackTrace: {\n    default: undefined,\n    description: 'Disables stack trace in test results output',\n    type: 'boolean'\n  },\n  notify: {\n    default: undefined,\n    description: 'Activates notifications for test results.',\n    type: 'boolean'\n  },\n  notifyMode: {\n    default: 'failure-change',\n    description: 'Specifies when notifications will appear for test results.',\n    type: 'string'\n  },\n  onlyChanged: {\n    alias: 'o',\n    default: undefined,\n    description:\n      'Attempts to identify which tests to run based on which ' +\n      \"files have changed in the current repository. Only works if you're \" +\n      'running tests in a git or hg repository at the moment.',\n    type: 'boolean'\n  },\n  onlyFailures: {\n    alias: 'f',\n    default: undefined,\n    description: 'Run tests that failed in the previous execution.',\n    type: 'boolean'\n  },\n  outputFile: {\n    description:\n      'Write test results to a file when the --json option is ' +\n      'also specified.',\n    type: 'string'\n  },\n  passWithNoTests: {\n    default: false,\n    description:\n      'Will not fail if no tests are found (for example while using `--testPathPattern`.)',\n    type: 'boolean'\n  },\n  preset: {\n    description: \"A preset that is used as a base for Jest's configuration.\",\n    type: 'string'\n  },\n  prettierPath: {\n    default: undefined,\n    description: 'The path to the \"prettier\" module used for inline snapshots.',\n    type: 'string'\n  },\n  projects: {\n    description:\n      'A list of projects that use Jest to run all tests of all ' +\n      'projects in a single instance of Jest.',\n    string: true,\n    type: 'array'\n  },\n  reporters: {\n    description: 'A list of custom reporters for the test suite.',\n    string: true,\n    type: 'array'\n  },\n  resetMocks: {\n    default: undefined,\n    description:\n      'Automatically reset mock state between every test. ' +\n      'Equivalent to calling jest.resetAllMocks() between each test.',\n    type: 'boolean'\n  },\n  resetModules: {\n    default: undefined,\n    description:\n      'If enabled, the module registry for every test file will ' +\n      'be reset before running each individual test.',\n    type: 'boolean'\n  },\n  resolver: {\n    description: 'A JSON string which allows the use of a custom resolver.',\n    type: 'string'\n  },\n  restoreMocks: {\n    default: undefined,\n    description:\n      'Automatically restore mock state and implementation between every test. ' +\n      'Equivalent to calling jest.restoreAllMocks() between each test.',\n    type: 'boolean'\n  },\n  rootDir: {\n    description:\n      'The root directory that Jest should scan for tests and ' +\n      'modules within.',\n    type: 'string'\n  },\n  roots: {\n    description:\n      'A list of paths to directories that Jest should use to ' +\n      'search for files in.',\n    string: true,\n    type: 'array'\n  },\n  runInBand: {\n    alias: 'i',\n    default: undefined,\n    description:\n      'Run all tests serially in the current process (rather than ' +\n      'creating a worker pool of child processes that run tests). This ' +\n      'is sometimes useful for debugging, but such use cases are pretty ' +\n      'rare.',\n    type: 'boolean'\n  },\n  runTestsByPath: {\n    default: false,\n    description:\n      'Used when provided patterns are exact file paths. This avoids ' +\n      'converting them into a regular expression and matching it against ' +\n      'every single file.',\n    type: 'boolean'\n  },\n  runner: {\n    description:\n      \"Allows to use a custom runner instead of Jest's default test runner.\",\n    type: 'string'\n  },\n  setupFiles: {\n    description:\n      'A list of paths to modules that run some code to configure or ' +\n      'set up the testing environment before each test. ',\n    string: true,\n    type: 'array'\n  },\n  setupFilesAfterEnv: {\n    description:\n      'A list of paths to modules that run some code to configure or ' +\n      'set up the testing framework before each test ',\n    string: true,\n    type: 'array'\n  },\n  showConfig: {\n    default: undefined,\n    description: 'Print your jest config and then exits.',\n    type: 'boolean'\n  },\n  silent: {\n    default: undefined,\n    description: 'Prevent tests from printing messages through the console.',\n    type: 'boolean'\n  },\n  skipFilter: {\n    default: undefined,\n    description:\n      'Disables the filter provided by --filter. Useful for CI jobs, or ' +\n      'local enforcement when fixing tests.',\n    type: 'boolean'\n  },\n  snapshotSerializers: {\n    description:\n      'A list of paths to snapshot serializer modules Jest should ' +\n      'use for snapshot testing.',\n    string: true,\n    type: 'array'\n  },\n  testEnvironment: {\n    description: 'Alias for --env',\n    type: 'string'\n  },\n  testEnvironmentOptions: {\n    description:\n      'Test environment options that will be passed to the testEnvironment. ' +\n      'The relevant options depend on the environment.',\n    type: 'string' // Object\n  },\n  testFailureExitCode: {\n    description: 'Exit code of `jest` command if the test run failed',\n    type: 'string' // number\n  },\n  testLocationInResults: {\n    default: false,\n    description: 'Add `location` information to the test results',\n    type: 'boolean'\n  },\n  testMatch: {\n    description: 'The glob patterns Jest uses to detect test files.',\n    string: true,\n    type: 'array'\n  },\n  testNamePattern: {\n    alias: 't',\n    description: 'Run only tests with a name that matches the regex pattern.',\n    type: 'string'\n  },\n  testPathIgnorePatterns: {\n    description:\n      'An array of regexp pattern strings that are matched ' +\n      'against all test paths before executing the test. If the test path ' +\n      'matches any of the patterns, it will be skipped.',\n    string: true,\n    type: 'array'\n  },\n  testPathPattern: {\n    description:\n      'A regexp pattern string that is matched against all tests ' +\n      'paths before executing the test.',\n    string: true,\n    type: 'array'\n  },\n  testRegex: {\n    description:\n      'A string or array of string regexp patterns that Jest uses to detect test files.',\n    string: true,\n    type: 'array'\n  },\n  testResultsProcessor: {\n    description:\n      'Allows the use of a custom results processor. ' +\n      'This processor must be a node module that exports ' +\n      'a function expecting as the first argument the result object.',\n    type: 'string'\n  },\n  testRunner: {\n    description:\n      'Allows to specify a custom test runner. The default is ' +\n      ' `jasmine2`. A path to a custom test runner can be provided: ' +\n      '`<rootDir>/path/to/testRunner.js`.',\n    type: 'string'\n  },\n  testSequencer: {\n    description:\n      'Allows to specify a custom test sequencer. The default is ' +\n      '`@jest/test-sequencer`. A path to a custom test sequencer can be ' +\n      'provided: `<rootDir>/path/to/testSequencer.js`',\n    type: 'string'\n  },\n  testTimeout: {\n    description: 'This option sets the default timeouts of test cases.',\n    type: 'number'\n  },\n  testURL: {\n    description: 'This option sets the URL for the jsdom environment.',\n    type: 'string'\n  },\n  timers: {\n    description:\n      'Setting this value to fake allows the use of fake timers ' +\n      'for functions such as setTimeout.',\n    type: 'string'\n  },\n  transform: {\n    description:\n      'A JSON string which maps from regular expressions to paths ' +\n      'to transformers.',\n    type: 'string'\n  },\n  transformIgnorePatterns: {\n    description:\n      'An array of regexp pattern strings that are matched ' +\n      'against all source file paths before transformation.',\n    string: true,\n    type: 'array'\n  },\n  unmockedModulePathPatterns: {\n    description:\n      'An array of regexp pattern strings that are matched ' +\n      'against all modules before the module loader will automatically ' +\n      'return a mock for them.',\n    string: true,\n    type: 'array'\n  },\n  updateSnapshot: {\n    alias: 'u',\n    default: undefined,\n    description:\n      'Use this flag to re-record snapshots. ' +\n      'Can be used together with a test suite pattern or with ' +\n      '`--testNamePattern` to re-record snapshot for test matching ' +\n      'the pattern',\n    type: 'boolean'\n  },\n  useStderr: {\n    default: undefined,\n    description: 'Divert all output to stderr.',\n    type: 'boolean'\n  },\n  verbose: {\n    default: undefined,\n    description:\n      'Display individual test results with the test suite hierarchy.',\n    type: 'boolean'\n  },\n  version: {\n    alias: 'v',\n    default: undefined,\n    description: 'Print the version and exit',\n    type: 'boolean'\n  },\n  watch: {\n    default: undefined,\n    description:\n      'Watch files for changes and rerun tests related to ' +\n      'changed files. If you want to re-run all tests when a file has ' +\n      'changed, use the `--watchAll` option.',\n    type: 'boolean'\n  },\n  watchAll: {\n    default: undefined,\n    description:\n      'Watch files for changes and rerun all tests. If you want ' +\n      'to re-run only the tests related to the changed files, use the ' +\n      '`--watch` option.',\n    type: 'boolean'\n  },\n  watchPathIgnorePatterns: {\n    description:\n      'An array of regexp pattern strings that are matched ' +\n      'against all paths before trigger test re-run in watch mode. ' +\n      'If the test path matches any of the patterns, it will be skipped.',\n    string: true,\n    type: 'array'\n  },\n  watchman: {\n    default: undefined,\n    description:\n      'Whether to use watchman for file crawling. Disable using ' +\n      '--no-watchman.',\n    type: 'boolean'\n  }\n};\nexports.options = options;\n"]},"metadata":{},"sourceType":"script"}