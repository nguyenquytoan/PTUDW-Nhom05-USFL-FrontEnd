{"ast":null,"code":"var parse = require('../');\n\nvar test = require('tape');\n\ntest('flag boolean default false', function (t) {\n  var argv = parse(['moo'], {\n    boolean: ['t', 'verbose'],\n    default: {\n      verbose: false,\n      t: false\n    }\n  });\n  t.deepEqual(argv, {\n    verbose: false,\n    t: false,\n    _: ['moo']\n  });\n  t.deepEqual(typeof argv.verbose, 'boolean');\n  t.deepEqual(typeof argv.t, 'boolean');\n  t.end();\n});\ntest('boolean groups', function (t) {\n  var argv = parse(['-x', '-z', 'one', 'two', 'three'], {\n    boolean: ['x', 'y', 'z']\n  });\n  t.deepEqual(argv, {\n    x: true,\n    y: false,\n    z: true,\n    _: ['one', 'two', 'three']\n  });\n  t.deepEqual(typeof argv.x, 'boolean');\n  t.deepEqual(typeof argv.y, 'boolean');\n  t.deepEqual(typeof argv.z, 'boolean');\n  t.end();\n});\ntest('boolean and alias with chainable api', function (t) {\n  var aliased = ['-h', 'derp'];\n  var regular = ['--herp', 'derp'];\n  var opts = {\n    herp: {\n      alias: 'h',\n      boolean: true\n    }\n  };\n  var aliasedArgv = parse(aliased, {\n    boolean: 'herp',\n    alias: {\n      h: 'herp'\n    }\n  });\n  var propertyArgv = parse(regular, {\n    boolean: 'herp',\n    alias: {\n      h: 'herp'\n    }\n  });\n  var expected = {\n    herp: true,\n    h: true,\n    '_': ['derp']\n  };\n  t.same(aliasedArgv, expected);\n  t.same(propertyArgv, expected);\n  t.end();\n});\ntest('boolean and alias with options hash', function (t) {\n  var aliased = ['-h', 'derp'];\n  var regular = ['--herp', 'derp'];\n  var opts = {\n    alias: {\n      'h': 'herp'\n    },\n    boolean: 'herp'\n  };\n  var aliasedArgv = parse(aliased, opts);\n  var propertyArgv = parse(regular, opts);\n  var expected = {\n    herp: true,\n    h: true,\n    '_': ['derp']\n  };\n  t.same(aliasedArgv, expected);\n  t.same(propertyArgv, expected);\n  t.end();\n});\ntest('boolean and alias array with options hash', function (t) {\n  var aliased = ['-h', 'derp'];\n  var regular = ['--herp', 'derp'];\n  var alt = ['--harp', 'derp'];\n  var opts = {\n    alias: {\n      'h': ['herp', 'harp']\n    },\n    boolean: 'h'\n  };\n  var aliasedArgv = parse(aliased, opts);\n  var propertyArgv = parse(regular, opts);\n  var altPropertyArgv = parse(alt, opts);\n  var expected = {\n    harp: true,\n    herp: true,\n    h: true,\n    '_': ['derp']\n  };\n  t.same(aliasedArgv, expected);\n  t.same(propertyArgv, expected);\n  t.same(altPropertyArgv, expected);\n  t.end();\n});\ntest('boolean and alias using explicit true', function (t) {\n  var aliased = ['-h', 'true'];\n  var regular = ['--herp', 'true'];\n  var opts = {\n    alias: {\n      h: 'herp'\n    },\n    boolean: 'h'\n  };\n  var aliasedArgv = parse(aliased, opts);\n  var propertyArgv = parse(regular, opts);\n  var expected = {\n    herp: true,\n    h: true,\n    '_': []\n  };\n  t.same(aliasedArgv, expected);\n  t.same(propertyArgv, expected);\n  t.end();\n}); // regression, see https://github.com/substack/node-optimist/issues/71\n\ntest('boolean and --x=true', function (t) {\n  var parsed = parse(['--boool', '--other=true'], {\n    boolean: 'boool'\n  });\n  t.same(parsed.boool, true);\n  t.same(parsed.other, 'true');\n  parsed = parse(['--boool', '--other=false'], {\n    boolean: 'boool'\n  });\n  t.same(parsed.boool, true);\n  t.same(parsed.other, 'false');\n  t.end();\n});\ntest('boolean --boool=true', function (t) {\n  var parsed = parse(['--boool=true'], {\n    default: {\n      boool: false\n    },\n    boolean: ['boool']\n  });\n  t.same(parsed.boool, true);\n  t.end();\n});\ntest('boolean --boool=false', function (t) {\n  var parsed = parse(['--boool=false'], {\n    default: {\n      boool: true\n    },\n    boolean: ['boool']\n  });\n  t.same(parsed.boool, false);\n  t.end();\n});\ntest('boolean using something similar to true', function (t) {\n  var opts = {\n    boolean: 'h'\n  };\n  var result = parse(['-h', 'true.txt'], opts);\n  var expected = {\n    h: true,\n    '_': ['true.txt']\n  };\n  t.same(result, expected);\n  t.end();\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/minimist/test/bool.js"],"names":["parse","require","test","t","argv","boolean","default","verbose","deepEqual","_","end","x","y","z","aliased","regular","opts","herp","alias","aliasedArgv","h","propertyArgv","expected","same","alt","altPropertyArgv","harp","parsed","boool","other","result"],"mappings":"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","sourcesContent":["var parse = require('../');\nvar test = require('tape');\n\ntest('flag boolean default false', function (t) {\n    var argv = parse(['moo'], {\n        boolean: ['t', 'verbose'],\n        default: { verbose: false, t: false }\n    });\n    \n    t.deepEqual(argv, {\n        verbose: false,\n        t: false,\n        _: ['moo']\n    });\n    \n    t.deepEqual(typeof argv.verbose, 'boolean');\n    t.deepEqual(typeof argv.t, 'boolean');\n    t.end();\n\n});\n\ntest('boolean groups', function (t) {\n    var argv = parse([ '-x', '-z', 'one', 'two', 'three' ], {\n        boolean: ['x','y','z']\n    });\n    \n    t.deepEqual(argv, {\n        x : true,\n        y : false,\n        z : true,\n        _ : [ 'one', 'two', 'three' ]\n    });\n    \n    t.deepEqual(typeof argv.x, 'boolean');\n    t.deepEqual(typeof argv.y, 'boolean');\n    t.deepEqual(typeof argv.z, 'boolean');\n    t.end();\n});\ntest('boolean and alias with chainable api', function (t) {\n    var aliased = [ '-h', 'derp' ];\n    var regular = [ '--herp',  'derp' ];\n    var opts = {\n        herp: { alias: 'h', boolean: true }\n    };\n    var aliasedArgv = parse(aliased, {\n        boolean: 'herp',\n        alias: { h: 'herp' }\n    });\n    var propertyArgv = parse(regular, {\n        boolean: 'herp',\n        alias: { h: 'herp' }\n    });\n    var expected = {\n        herp: true,\n        h: true,\n        '_': [ 'derp' ]\n    };\n    \n    t.same(aliasedArgv, expected);\n    t.same(propertyArgv, expected); \n    t.end();\n});\n\ntest('boolean and alias with options hash', function (t) {\n    var aliased = [ '-h', 'derp' ];\n    var regular = [ '--herp', 'derp' ];\n    var opts = {\n        alias: { 'h': 'herp' },\n        boolean: 'herp'\n    };\n    var aliasedArgv = parse(aliased, opts);\n    var propertyArgv = parse(regular, opts);\n    var expected = {\n        herp: true,\n        h: true,\n        '_': [ 'derp' ]\n    };\n    t.same(aliasedArgv, expected);\n    t.same(propertyArgv, expected);\n    t.end();\n});\n\ntest('boolean and alias array with options hash', function (t) {\n    var aliased = [ '-h', 'derp' ];\n    var regular = [ '--herp', 'derp' ];\n    var alt = [ '--harp', 'derp' ];\n    var opts = {\n        alias: { 'h': ['herp', 'harp'] },\n        boolean: 'h'\n    };\n    var aliasedArgv = parse(aliased, opts);\n    var propertyArgv = parse(regular, opts);\n    var altPropertyArgv = parse(alt, opts);\n    var expected = {\n        harp: true,\n        herp: true,\n        h: true,\n        '_': [ 'derp' ]\n    };\n    t.same(aliasedArgv, expected);\n    t.same(propertyArgv, expected);\n    t.same(altPropertyArgv, expected);\n    t.end();\n});\n\ntest('boolean and alias using explicit true', function (t) {\n    var aliased = [ '-h', 'true' ];\n    var regular = [ '--herp',  'true' ];\n    var opts = {\n        alias: { h: 'herp' },\n        boolean: 'h'\n    };\n    var aliasedArgv = parse(aliased, opts);\n    var propertyArgv = parse(regular, opts);\n    var expected = {\n        herp: true,\n        h: true,\n        '_': [ ]\n    };\n\n    t.same(aliasedArgv, expected);\n    t.same(propertyArgv, expected); \n    t.end();\n});\n\n// regression, see https://github.com/substack/node-optimist/issues/71\ntest('boolean and --x=true', function(t) {\n    var parsed = parse(['--boool', '--other=true'], {\n        boolean: 'boool'\n    });\n\n    t.same(parsed.boool, true);\n    t.same(parsed.other, 'true');\n\n    parsed = parse(['--boool', '--other=false'], {\n        boolean: 'boool'\n    });\n    \n    t.same(parsed.boool, true);\n    t.same(parsed.other, 'false');\n    t.end();\n});\n\ntest('boolean --boool=true', function (t) {\n    var parsed = parse(['--boool=true'], {\n        default: {\n            boool: false\n        },\n        boolean: ['boool']\n    });\n\n    t.same(parsed.boool, true);\n    t.end();\n});\n\ntest('boolean --boool=false', function (t) {\n    var parsed = parse(['--boool=false'], {\n        default: {\n          boool: true\n        },\n        boolean: ['boool']\n    });\n\n    t.same(parsed.boool, false);\n    t.end();\n});\n\ntest('boolean using something similar to true', function (t) {\n    var opts = { boolean: 'h' };\n    var result = parse(['-h', 'true.txt'], opts);\n    var expected = {\n        h: true,\n        '_': ['true.txt']\n    };\n\n    t.same(result, expected);\n    t.end();\n});"]},"metadata":{},"sourceType":"script"}