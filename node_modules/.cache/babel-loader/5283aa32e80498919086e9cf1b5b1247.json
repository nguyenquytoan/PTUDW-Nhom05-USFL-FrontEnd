{"ast":null,"code":"/**\n * Functions for manipulating web forms.\n *\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n * @author Dave Longley\n * @author Mike Johnson\n *\n * Copyright (c) 2011-2014 Digital Bazaar, Inc. All rights reserved.\n */\nvar forge = require('./forge');\n/* Form API */\n\n\nvar form = module.exports = forge.form = forge.form || {};\n\n(function ($) {\n  /**\n   * Regex for parsing a single name property (handles array brackets).\n   */\n  var _regex = /([^\\[]*?)\\[(.*?)\\]/g;\n  /**\n   * Parses a single name property into an array with the name and any\n   * array indices.\n   *\n   * @param name the name to parse.\n   *\n   * @return the array of the name and its array indices in order.\n   */\n\n  var _parseName = function (name) {\n    var rval = [];\n    var matches;\n\n    while (!!(matches = _regex.exec(name))) {\n      if (matches[1].length > 0) {\n        rval.push(matches[1]);\n      }\n\n      if (matches.length >= 2) {\n        rval.push(matches[2]);\n      }\n    }\n\n    if (rval.length === 0) {\n      rval.push(name);\n    }\n\n    return rval;\n  };\n  /**\n   * Adds a field from the given form to the given object.\n   *\n   * @param obj the object.\n   * @param names the field as an array of object property names.\n   * @param value the value of the field.\n   * @param dict a dictionary of names to replace.\n   */\n\n\n  var _addField = function (obj, names, value, dict) {\n    // combine array names that fall within square brackets\n    var tmp = [];\n\n    for (var i = 0; i < names.length; ++i) {\n      // check name for starting square bracket but no ending one\n      var name = names[i];\n\n      if (name.indexOf('[') !== -1 && name.indexOf(']') === -1 && i < names.length - 1) {\n        do {\n          name += '.' + names[++i];\n        } while (i < names.length - 1 && names[i].indexOf(']') === -1);\n      }\n\n      tmp.push(name);\n    }\n\n    names = tmp; // split out array indexes\n\n    var tmp = [];\n    $.each(names, function (n, name) {\n      tmp = tmp.concat(_parseName(name));\n    });\n    names = tmp; // iterate over object property names until value is set\n\n    $.each(names, function (n, name) {\n      // do dictionary name replacement\n      if (dict && name.length !== 0 && name in dict) {\n        name = dict[name];\n      } // blank name indicates appending to an array, set name to\n      // new last index of array\n\n\n      if (name.length === 0) {\n        name = obj.length;\n      } // value already exists, append value\n\n\n      if (obj[name]) {\n        // last name in the field\n        if (n == names.length - 1) {\n          // more than one value, so convert into an array\n          if (!$.isArray(obj[name])) {\n            obj[name] = [obj[name]];\n          }\n\n          obj[name].push(value);\n        } else {\n          // not last name, go deeper into object\n          obj = obj[name];\n        }\n      } else if (n == names.length - 1) {\n        // new value, last name in the field, set value\n        obj[name] = value;\n      } else {\n        // new value, not last name, go deeper\n        // get next name\n        var next = names[n + 1]; // blank next value indicates array-appending, so create array\n\n        if (next.length === 0) {\n          obj[name] = [];\n        } else {\n          // if next name is a number create an array, otherwise a map\n          var isNum = next - 0 == next && next.length > 0;\n          obj[name] = isNum ? [] : {};\n        }\n\n        obj = obj[name];\n      }\n    });\n  };\n  /**\n   * Serializes a form to a JSON object. Object properties will be separated\n   * using the given separator (defaults to '.') and by square brackets.\n   *\n   * @param input the jquery form to serialize.\n   * @param sep the object-property separator (defaults to '.').\n   * @param dict a dictionary of names to replace (name=replace).\n   *\n   * @return the JSON-serialized form.\n   */\n\n\n  form.serialize = function (input, sep, dict) {\n    var rval = {}; // add all fields in the form to the object\n\n    sep = sep || '.';\n    $.each(input.serializeArray(), function () {\n      _addField(rval, this.name.split(sep), this.value || '', dict);\n    });\n    return rval;\n  };\n})(jQuery);","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/node-forge/lib/form.js"],"names":["forge","require","form","module","exports","$","_regex","_parseName","name","rval","matches","exec","length","push","_addField","obj","names","value","dict","tmp","i","indexOf","each","n","concat","isArray","next","isNum","serialize","input","sep","serializeArray","split","jQuery"],"mappings":"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","sourcesContent":["/**\n * Functions for manipulating web forms.\n *\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n * @author Dave Longley\n * @author Mike Johnson\n *\n * Copyright (c) 2011-2014 Digital Bazaar, Inc. All rights reserved.\n */\nvar forge = require('./forge');\n\n/* Form API */\nvar form = module.exports = forge.form = forge.form || {};\n\n(function($) {\n\n/**\n * Regex for parsing a single name property (handles array brackets).\n */\nvar _regex = /([^\\[]*?)\\[(.*?)\\]/g;\n\n/**\n * Parses a single name property into an array with the name and any\n * array indices.\n *\n * @param name the name to parse.\n *\n * @return the array of the name and its array indices in order.\n */\nvar _parseName = function(name) {\n  var rval = [];\n\n  var matches;\n  while(!!(matches = _regex.exec(name))) {\n    if(matches[1].length > 0) {\n      rval.push(matches[1]);\n    }\n    if(matches.length >= 2) {\n      rval.push(matches[2]);\n    }\n  }\n  if(rval.length === 0) {\n    rval.push(name);\n  }\n\n  return rval;\n};\n\n/**\n * Adds a field from the given form to the given object.\n *\n * @param obj the object.\n * @param names the field as an array of object property names.\n * @param value the value of the field.\n * @param dict a dictionary of names to replace.\n */\nvar _addField = function(obj, names, value, dict) {\n  // combine array names that fall within square brackets\n  var tmp = [];\n  for(var i = 0; i < names.length; ++i) {\n    // check name for starting square bracket but no ending one\n    var name = names[i];\n    if(name.indexOf('[') !== -1 && name.indexOf(']') === -1 &&\n      i < names.length - 1) {\n      do {\n        name += '.' + names[++i];\n      } while(i < names.length - 1 && names[i].indexOf(']') === -1);\n    }\n    tmp.push(name);\n  }\n  names = tmp;\n\n  // split out array indexes\n  var tmp = [];\n  $.each(names, function(n, name) {\n    tmp = tmp.concat(_parseName(name));\n  });\n  names = tmp;\n\n  // iterate over object property names until value is set\n  $.each(names, function(n, name) {\n    // do dictionary name replacement\n    if(dict && name.length !== 0 && name in dict) {\n       name = dict[name];\n    }\n\n    // blank name indicates appending to an array, set name to\n    // new last index of array\n    if(name.length === 0) {\n       name = obj.length;\n    }\n\n    // value already exists, append value\n    if(obj[name]) {\n      // last name in the field\n      if(n == names.length - 1) {\n        // more than one value, so convert into an array\n        if(!$.isArray(obj[name])) {\n          obj[name] = [obj[name]];\n        }\n        obj[name].push(value);\n      } else {\n        // not last name, go deeper into object\n        obj = obj[name];\n      }\n    } else if(n == names.length - 1) {\n      // new value, last name in the field, set value\n      obj[name] = value;\n    } else {\n      // new value, not last name, go deeper\n      // get next name\n      var next = names[n + 1];\n\n      // blank next value indicates array-appending, so create array\n      if(next.length === 0) {\n         obj[name] = [];\n      } else {\n        // if next name is a number create an array, otherwise a map\n        var isNum = ((next - 0) == next && next.length > 0);\n        obj[name] = isNum ? [] : {};\n      }\n      obj = obj[name];\n    }\n  });\n};\n\n/**\n * Serializes a form to a JSON object. Object properties will be separated\n * using the given separator (defaults to '.') and by square brackets.\n *\n * @param input the jquery form to serialize.\n * @param sep the object-property separator (defaults to '.').\n * @param dict a dictionary of names to replace (name=replace).\n *\n * @return the JSON-serialized form.\n */\nform.serialize = function(input, sep, dict) {\n  var rval = {};\n\n  // add all fields in the form to the object\n  sep = sep || '.';\n  $.each(input.serializeArray(), function() {\n    _addField(rval, this.name.split(sep), this.value || '', dict);\n  });\n\n  return rval;\n};\n\n})(jQuery);\n"]},"metadata":{},"sourceType":"script"}