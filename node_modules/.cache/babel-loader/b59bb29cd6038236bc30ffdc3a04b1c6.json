{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { createPartialResponse } from './createPartialResponse.mjs';\nimport './_version.mjs';\n/**\n * The range request plugin makes it easy for a request with a 'Range' header to\n * be fulfilled by a cached response.\n *\n * It does this by intercepting the `cachedResponseWillBeUsed` plugin callback\n * and returning the appropriate subset of the cached response body.\n *\n * @memberof workbox.rangeRequests\n */\n\nclass Plugin {\n  /**\n   * @param {Object} options\n   * @param {Request} options.request The original request, which may or may not\n   * contain a Range: header.\n   * @param {Response} options.cachedResponse The complete cached response.\n   * @return {Promise<Response>} If request contains a 'Range' header, then a\n   * new response with status 206 whose body is a subset of `cachedResponse` is\n   * returned. Otherwise, `cachedResponse` is returned as-is.\n   *\n   * @private\n   */\n  async cachedResponseWillBeUsed({\n    request,\n    cachedResponse\n  }) {\n    // Only return a sliced response if there's something valid in the cache,\n    // and there's a Range: header in the request.\n    if (cachedResponse && request.headers.has('range')) {\n      return await createPartialResponse(request, cachedResponse);\n    } // If there was no Range: header, or if cachedResponse wasn't valid, just\n    // pass it through as-is.\n\n\n    return cachedResponse;\n  }\n\n}\n\nexport { Plugin };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-range-requests/Plugin.mjs"],"names":["createPartialResponse","Plugin","cachedResponseWillBeUsed","request","cachedResponse","headers","has"],"mappings":"AAAA;;;;;;;AAQA,SAAQA,qBAAR,QAAoC,6BAApC;AAEA,OAAO,gBAAP;AAEA;;;;;;;;;;AASA,MAAMC,MAAN,CAAa;AACX;;;;;;;;;;;AAWA,QAAMC,wBAAN,CAA+B;AAACC,IAAAA,OAAD;AAAUC,IAAAA;AAAV,GAA/B,EAA0D;AACxD;AACA;AACA,QAAIA,cAAc,IAAID,OAAO,CAACE,OAAR,CAAgBC,GAAhB,CAAoB,OAApB,CAAtB,EAAoD;AAClD,aAAO,MAAMN,qBAAqB,CAACG,OAAD,EAAUC,cAAV,CAAlC;AACD,KALuD,CAOxD;AACA;;;AACA,WAAOA,cAAP;AACD;;AAtBU;;AAyBb,SAAQH,MAAR","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {createPartialResponse} from './createPartialResponse.mjs';\n\nimport './_version.mjs';\n\n/**\n * The range request plugin makes it easy for a request with a 'Range' header to\n * be fulfilled by a cached response.\n *\n * It does this by intercepting the `cachedResponseWillBeUsed` plugin callback\n * and returning the appropriate subset of the cached response body.\n *\n * @memberof workbox.rangeRequests\n */\nclass Plugin {\n  /**\n   * @param {Object} options\n   * @param {Request} options.request The original request, which may or may not\n   * contain a Range: header.\n   * @param {Response} options.cachedResponse The complete cached response.\n   * @return {Promise<Response>} If request contains a 'Range' header, then a\n   * new response with status 206 whose body is a subset of `cachedResponse` is\n   * returned. Otherwise, `cachedResponse` is returned as-is.\n   *\n   * @private\n   */\n  async cachedResponseWillBeUsed({request, cachedResponse}) {\n    // Only return a sliced response if there's something valid in the cache,\n    // and there's a Range: header in the request.\n    if (cachedResponse && request.headers.has('range')) {\n      return await createPartialResponse(request, cachedResponse);\n    }\n\n    // If there was no Range: header, or if cachedResponse wasn't valid, just\n    // pass it through as-is.\n    return cachedResponse;\n  }\n}\n\nexport {Plugin};\n"]},"metadata":{},"sourceType":"module"}