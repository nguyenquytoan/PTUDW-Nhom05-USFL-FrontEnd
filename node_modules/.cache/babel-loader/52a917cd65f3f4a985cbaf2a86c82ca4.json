{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { createHeaders } from './utils/createHeaders.mjs';\nimport { concatenate } from './concatenate.mjs';\nimport './_version.mjs';\n/**\n * Takes multiple source Promises, each of which could resolve to a Response, a\n * ReadableStream, or a [BodyInit](https://fetch.spec.whatwg.org/#bodyinit),\n * along with a\n * [HeadersInit](https://fetch.spec.whatwg.org/#typedefdef-headersinit).\n *\n * Returns an object exposing a Response whose body consists of each individual\n * stream's data returned in sequence, along with a Promise which signals when\n * the stream is finished (useful for passing to a FetchEvent's waitUntil()).\n *\n * @param {Array<Promise<workbox.streams.StreamSource>>} sourcePromises\n * @param {HeadersInit} [headersInit] If there's no `Content-Type` specified,\n * `'text/html'` will be used by default.\n * @return {Object<{done: Promise, response: Response}>}\n *\n * @memberof workbox.streams\n */\n\nfunction concatenateToResponse(sourcePromises, headersInit) {\n  const {\n    done,\n    stream\n  } = concatenate(sourcePromises);\n  const headers = createHeaders(headersInit);\n  const response = new Response(stream, {\n    headers\n  });\n  return {\n    done,\n    response\n  };\n}\n\nexport { concatenateToResponse };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-streams/concatenateToResponse.mjs"],"names":["createHeaders","concatenate","concatenateToResponse","sourcePromises","headersInit","done","stream","headers","response","Response"],"mappings":"AAAA;;;;;;;AAQA,SAAQA,aAAR,QAA4B,2BAA5B;AACA,SAAQC,WAAR,QAA0B,mBAA1B;AAEA,OAAO,gBAAP;AAEA;;;;;;;;;;;;;;;;;;AAiBA,SAASC,qBAAT,CAA+BC,cAA/B,EAA+CC,WAA/C,EAA4D;AAC1D,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAiBL,WAAW,CAACE,cAAD,CAAlC;AAEA,QAAMI,OAAO,GAAGP,aAAa,CAACI,WAAD,CAA7B;AACA,QAAMI,QAAQ,GAAG,IAAIC,QAAJ,CAAaH,MAAb,EAAqB;AAACC,IAAAA;AAAD,GAArB,CAAjB;AAEA,SAAO;AAACF,IAAAA,IAAD;AAAOG,IAAAA;AAAP,GAAP;AACD;;AAED,SAAQN,qBAAR","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {createHeaders} from './utils/createHeaders.mjs';\nimport {concatenate} from './concatenate.mjs';\n\nimport './_version.mjs';\n\n/**\n * Takes multiple source Promises, each of which could resolve to a Response, a\n * ReadableStream, or a [BodyInit](https://fetch.spec.whatwg.org/#bodyinit),\n * along with a\n * [HeadersInit](https://fetch.spec.whatwg.org/#typedefdef-headersinit).\n *\n * Returns an object exposing a Response whose body consists of each individual\n * stream's data returned in sequence, along with a Promise which signals when\n * the stream is finished (useful for passing to a FetchEvent's waitUntil()).\n *\n * @param {Array<Promise<workbox.streams.StreamSource>>} sourcePromises\n * @param {HeadersInit} [headersInit] If there's no `Content-Type` specified,\n * `'text/html'` will be used by default.\n * @return {Object<{done: Promise, response: Response}>}\n *\n * @memberof workbox.streams\n */\nfunction concatenateToResponse(sourcePromises, headersInit) {\n  const {done, stream} = concatenate(sourcePromises);\n\n  const headers = createHeaders(headersInit);\n  const response = new Response(stream, {headers});\n\n  return {done, response};\n}\n\nexport {concatenateToResponse};\n"]},"metadata":{},"sourceType":"module"}