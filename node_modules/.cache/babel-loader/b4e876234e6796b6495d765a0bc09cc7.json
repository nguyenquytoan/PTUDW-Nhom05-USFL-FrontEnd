{"ast":null,"code":"\"use strict\";\n\nvar _types = require(\"../selectors/types\");\n\nvar _helpers = require(\"./util/helpers\");\n\n(0, _helpers.test)('multiple combinating spaces', 'h1         h2', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[1].value, ' ');\n  t.deepEqual(tree.nodes[0].nodes[1].toString(), '         ');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');\n});\n(0, _helpers.test)('column combinator', '.selected||td', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'selected');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '||');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'td');\n});\n(0, _helpers.test)('column combinator (2)', '.selected || td', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'selected');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.before, ' ');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '||');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.after, ' ');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'td');\n});\n(0, _helpers.test)('descendant combinator', 'h1 h2', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[1].value, ' ');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');\n});\n(0, _helpers.test)('multiple descendant combinators', 'h1 h2 h3 h4', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[1].value, ' ', 'should have a combinator');\n  t.deepEqual(tree.nodes[0].nodes[3].value, ' ', 'should have a combinator');\n  t.deepEqual(tree.nodes[0].nodes[5].value, ' ', 'should have a combinator');\n});\n(0, _helpers.test)('adjacent sibling combinator', 'h1~h2', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '~');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');\n});\n(0, _helpers.test)('adjacent sibling combinator (2)', 'h1 ~h2', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.before, ' ');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '~');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');\n});\n(0, _helpers.test)('adjacent sibling combinator (3)', 'h1~ h2', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '~');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.after, ' ');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');\n});\n(0, _helpers.test)('adjacent sibling combinator (4)', 'h1 ~ h2', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.before, ' ');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '~');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.after, ' ');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');\n});\n(0, _helpers.test)('adjacent sibling combinator (5)', 'h1~h2~h3', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '~');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');\n  t.deepEqual(tree.nodes[0].nodes[3].value, '~');\n  t.deepEqual(tree.nodes[0].nodes[4].value, 'h3');\n});\n(0, _helpers.test)('piercing combinator', '.a >>> .b', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'a');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.before, ' ');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '>>>');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.after, ' ');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'b');\n});\n(0, _helpers.test)('named combinators', 'a /deep/ b', function (t, tree) {\n  var nodes = tree.nodes[0].nodes;\n  t.deepEqual(nodes[0].value, 'a');\n  t.deepEqual(nodes[1].type, _types.COMBINATOR);\n  t.deepEqual(nodes[1].toString(), ' /deep/ ');\n  t.deepEqual(nodes[1].value, '/deep/');\n  t.deepEqual(nodes[2].value, 'b');\n});\n(0, _helpers.test)('named combinators with escapes', 'a /dee\\\\p/ b', function (t, tree) {\n  var nodes = tree.nodes[0].nodes;\n  t.deepEqual(nodes[0].value, 'a');\n  t.deepEqual(nodes[1].type, _types.COMBINATOR);\n  t.deepEqual(nodes[1].toString(), ' /dee\\\\p/ ');\n  t.deepEqual(nodes[1].value, '/deep/');\n  t.deepEqual(nodes[2].value, 'b');\n});\n(0, _helpers.test)('named combinators with escapes and uppercase', 'a /DeE\\\\p/ b', function (t, tree) {\n  var nodes = tree.nodes[0].nodes;\n  t.deepEqual(nodes[0].value, 'a');\n  t.deepEqual(nodes[1].type, _types.COMBINATOR);\n  t.deepEqual(nodes[1].toString(), ' /DeE\\\\p/ ');\n  t.deepEqual(nodes[1].value, '/deep/');\n  t.deepEqual(nodes[2].value, 'b');\n});\n(0, _helpers.test)('multiple combinators', 'h1~h2>h3', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[1].value, '~', 'should have a combinator');\n  t.deepEqual(tree.nodes[0].nodes[3].value, '>', 'should have a combinator');\n});\n(0, _helpers.test)('multiple combinators with whitespaces', 'h1 + h2 > h3', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[1].value, '+', 'should have a combinator');\n  t.deepEqual(tree.nodes[0].nodes[3].value, '>', 'should have a combinator');\n});\n(0, _helpers.test)('multiple combinators with whitespaces (2)', 'h1+ h2 >h3', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[1].value, '+', 'should have a combinator');\n  t.deepEqual(tree.nodes[0].nodes[3].value, '>', 'should have a combinator');\n});\n(0, _helpers.test)('trailing combinator & spaces', 'p +        ', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'p', 'should be a paragraph');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '+', 'should have a combinator');\n});\n(0, _helpers.test)('trailing sibling combinator', 'p ~', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'p', 'should be a paragraph');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '~', 'should have a combinator');\n});\n(0, _helpers.test)('ending in comment has no trailing combinator', \".bar /* comment 3 */\", function (t, tree) {\n  var nodeTypes = tree.nodes[0].map(function (n) {\n    return n.type;\n  });\n  t.deepEqual(nodeTypes, [\"class\"]);\n});\n(0, _helpers.test)('The combinating space is not a space character', \".bar\\n.baz\", function (t, tree) {\n  var nodeTypes = tree.nodes[0].map(function (n) {\n    return n.type;\n  });\n  t.deepEqual(nodeTypes, [\"class\", \"combinator\", \"class\"]);\n  t.deepEqual(tree.nodes[0].nodes[1].value, ' ', 'should have a combinator');\n  t.deepEqual(tree.nodes[0].nodes[1].raws.value, '\\n', 'should have a raw combinator value');\n});\n(0, _helpers.test)('with spaces and a comment has only one combinator', \".bar /* comment 3 */ > .foo\", function (t, tree) {\n  var nodeTypes = tree.nodes[0].map(function (n) {\n    return n.type;\n  });\n  t.deepEqual(nodeTypes, [\"class\", \"combinator\", \"class\"]);\n});\n(0, _helpers.test)('with a meaningful comment in the middle of a compound selector', \"div/* wtf */.foo\", function (t, tree) {\n  var nodeTypes = tree.nodes[0].map(function (n) {\n    return n.type;\n  });\n  t.deepEqual(nodeTypes, [\"tag\", \"comment\", \"class\"]);\n});\n(0, _helpers.test)('with a comment in the middle of a descendant selector', \"div/* wtf */ .foo\", function (t, tree) {\n  var nodeTypes = tree.nodes[0].map(function (n) {\n    return n.type;\n  });\n  t.deepEqual(nodeTypes, [\"tag\", \"comment\", \"combinator\", \"class\"]);\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-selector-parser/dist/__tests__/combinators.js"],"names":["_types","require","_helpers","test","t","tree","deepEqual","nodes","value","toString","spaces","before","after","type","COMBINATOR","nodeTypes","map","n","raws"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _types = require(\"../selectors/types\");\n\nvar _helpers = require(\"./util/helpers\");\n\n(0, _helpers.test)('multiple combinating spaces', 'h1         h2', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[1].value, ' ');\n  t.deepEqual(tree.nodes[0].nodes[1].toString(), '         ');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');\n});\n(0, _helpers.test)('column combinator', '.selected||td', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'selected');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '||');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'td');\n});\n(0, _helpers.test)('column combinator (2)', '.selected || td', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'selected');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.before, ' ');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '||');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.after, ' ');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'td');\n});\n(0, _helpers.test)('descendant combinator', 'h1 h2', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[1].value, ' ');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');\n});\n(0, _helpers.test)('multiple descendant combinators', 'h1 h2 h3 h4', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[1].value, ' ', 'should have a combinator');\n  t.deepEqual(tree.nodes[0].nodes[3].value, ' ', 'should have a combinator');\n  t.deepEqual(tree.nodes[0].nodes[5].value, ' ', 'should have a combinator');\n});\n(0, _helpers.test)('adjacent sibling combinator', 'h1~h2', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '~');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');\n});\n(0, _helpers.test)('adjacent sibling combinator (2)', 'h1 ~h2', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.before, ' ');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '~');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');\n});\n(0, _helpers.test)('adjacent sibling combinator (3)', 'h1~ h2', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '~');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.after, ' ');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');\n});\n(0, _helpers.test)('adjacent sibling combinator (4)', 'h1 ~ h2', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.before, ' ');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '~');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.after, ' ');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');\n});\n(0, _helpers.test)('adjacent sibling combinator (5)', 'h1~h2~h3', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '~');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');\n  t.deepEqual(tree.nodes[0].nodes[3].value, '~');\n  t.deepEqual(tree.nodes[0].nodes[4].value, 'h3');\n});\n(0, _helpers.test)('piercing combinator', '.a >>> .b', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'a');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.before, ' ');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '>>>');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.after, ' ');\n  t.deepEqual(tree.nodes[0].nodes[2].value, 'b');\n});\n(0, _helpers.test)('named combinators', 'a /deep/ b', function (t, tree) {\n  var nodes = tree.nodes[0].nodes;\n  t.deepEqual(nodes[0].value, 'a');\n  t.deepEqual(nodes[1].type, _types.COMBINATOR);\n  t.deepEqual(nodes[1].toString(), ' /deep/ ');\n  t.deepEqual(nodes[1].value, '/deep/');\n  t.deepEqual(nodes[2].value, 'b');\n});\n(0, _helpers.test)('named combinators with escapes', 'a /dee\\\\p/ b', function (t, tree) {\n  var nodes = tree.nodes[0].nodes;\n  t.deepEqual(nodes[0].value, 'a');\n  t.deepEqual(nodes[1].type, _types.COMBINATOR);\n  t.deepEqual(nodes[1].toString(), ' /dee\\\\p/ ');\n  t.deepEqual(nodes[1].value, '/deep/');\n  t.deepEqual(nodes[2].value, 'b');\n});\n(0, _helpers.test)('named combinators with escapes and uppercase', 'a /DeE\\\\p/ b', function (t, tree) {\n  var nodes = tree.nodes[0].nodes;\n  t.deepEqual(nodes[0].value, 'a');\n  t.deepEqual(nodes[1].type, _types.COMBINATOR);\n  t.deepEqual(nodes[1].toString(), ' /DeE\\\\p/ ');\n  t.deepEqual(nodes[1].value, '/deep/');\n  t.deepEqual(nodes[2].value, 'b');\n});\n(0, _helpers.test)('multiple combinators', 'h1~h2>h3', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[1].value, '~', 'should have a combinator');\n  t.deepEqual(tree.nodes[0].nodes[3].value, '>', 'should have a combinator');\n});\n(0, _helpers.test)('multiple combinators with whitespaces', 'h1 + h2 > h3', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[1].value, '+', 'should have a combinator');\n  t.deepEqual(tree.nodes[0].nodes[3].value, '>', 'should have a combinator');\n});\n(0, _helpers.test)('multiple combinators with whitespaces (2)', 'h1+ h2 >h3', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[1].value, '+', 'should have a combinator');\n  t.deepEqual(tree.nodes[0].nodes[3].value, '>', 'should have a combinator');\n});\n(0, _helpers.test)('trailing combinator & spaces', 'p +        ', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'p', 'should be a paragraph');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '+', 'should have a combinator');\n});\n(0, _helpers.test)('trailing sibling combinator', 'p ~', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'p', 'should be a paragraph');\n  t.deepEqual(tree.nodes[0].nodes[1].value, '~', 'should have a combinator');\n});\n(0, _helpers.test)('ending in comment has no trailing combinator', \".bar /* comment 3 */\", function (t, tree) {\n  var nodeTypes = tree.nodes[0].map(function (n) {\n    return n.type;\n  });\n  t.deepEqual(nodeTypes, [\"class\"]);\n});\n(0, _helpers.test)('The combinating space is not a space character', \".bar\\n.baz\", function (t, tree) {\n  var nodeTypes = tree.nodes[0].map(function (n) {\n    return n.type;\n  });\n  t.deepEqual(nodeTypes, [\"class\", \"combinator\", \"class\"]);\n  t.deepEqual(tree.nodes[0].nodes[1].value, ' ', 'should have a combinator');\n  t.deepEqual(tree.nodes[0].nodes[1].raws.value, '\\n', 'should have a raw combinator value');\n});\n(0, _helpers.test)('with spaces and a comment has only one combinator', \".bar /* comment 3 */ > .foo\", function (t, tree) {\n  var nodeTypes = tree.nodes[0].map(function (n) {\n    return n.type;\n  });\n  t.deepEqual(nodeTypes, [\"class\", \"combinator\", \"class\"]);\n});\n(0, _helpers.test)('with a meaningful comment in the middle of a compound selector', \"div/* wtf */.foo\", function (t, tree) {\n  var nodeTypes = tree.nodes[0].map(function (n) {\n    return n.type;\n  });\n  t.deepEqual(nodeTypes, [\"tag\", \"comment\", \"class\"]);\n});\n(0, _helpers.test)('with a comment in the middle of a descendant selector', \"div/* wtf */ .foo\", function (t, tree) {\n  var nodeTypes = tree.nodes[0].map(function (n) {\n    return n.type;\n  });\n  t.deepEqual(nodeTypes, [\"tag\", \"comment\", \"combinator\", \"class\"]);\n});"]},"metadata":{},"sourceType":"script"}