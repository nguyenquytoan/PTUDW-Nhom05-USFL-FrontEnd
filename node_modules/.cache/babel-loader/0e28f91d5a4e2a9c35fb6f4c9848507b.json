{"ast":null,"code":"/**\n * @fileoverview A module that filters reported problems based on `eslint-disable` and `eslint-enable` comments\n * @author Teddy Katz\n */\n\"use strict\";\n\nconst lodash = require(\"lodash\");\n/**\n * Compares the locations of two objects in a source file\n * @param {{line: number, column: number}} itemA The first object\n * @param {{line: number, column: number}} itemB The second object\n * @returns {number} A value less than 1 if itemA appears before itemB in the source file, greater than 1 if\n * itemA appears after itemB in the source file, or 0 if itemA and itemB have the same location.\n */\n\n\nfunction compareLocations(itemA, itemB) {\n  return itemA.line - itemB.line || itemA.column - itemB.column;\n}\n/**\n * This is the same as the exported function, except that it\n * doesn't handle disable-line and disable-next-line directives, and it always reports unused\n * disable directives.\n * @param {Object} options options for applying directives. This is the same as the options\n * for the exported function, except that `reportUnusedDisableDirectives` is not supported\n * (this function always reports unused disable directives).\n * @returns {{problems: Problem[], unusedDisableDirectives: Problem[]}} An object with a list\n * of filtered problems and unused eslint-disable directives\n */\n\n\nfunction applyDirectives(options) {\n  const problems = [];\n  let nextDirectiveIndex = 0;\n  let currentGlobalDisableDirective = null;\n  const disabledRuleMap = new Map(); // enabledRules is only used when there is a current global disable directive.\n\n  const enabledRules = new Set();\n  const usedDisableDirectives = new Set();\n\n  for (const problem of options.problems) {\n    while (nextDirectiveIndex < options.directives.length && compareLocations(options.directives[nextDirectiveIndex], problem) <= 0) {\n      const directive = options.directives[nextDirectiveIndex++];\n\n      switch (directive.type) {\n        case \"disable\":\n          if (directive.ruleId === null) {\n            currentGlobalDisableDirective = directive;\n            disabledRuleMap.clear();\n            enabledRules.clear();\n          } else if (currentGlobalDisableDirective) {\n            enabledRules.delete(directive.ruleId);\n            disabledRuleMap.set(directive.ruleId, directive);\n          } else {\n            disabledRuleMap.set(directive.ruleId, directive);\n          }\n\n          break;\n\n        case \"enable\":\n          if (directive.ruleId === null) {\n            currentGlobalDisableDirective = null;\n            disabledRuleMap.clear();\n          } else if (currentGlobalDisableDirective) {\n            enabledRules.add(directive.ruleId);\n            disabledRuleMap.delete(directive.ruleId);\n          } else {\n            disabledRuleMap.delete(directive.ruleId);\n          }\n\n          break;\n        // no default\n      }\n    }\n\n    if (disabledRuleMap.has(problem.ruleId)) {\n      usedDisableDirectives.add(disabledRuleMap.get(problem.ruleId));\n    } else if (currentGlobalDisableDirective && !enabledRules.has(problem.ruleId)) {\n      usedDisableDirectives.add(currentGlobalDisableDirective);\n    } else {\n      problems.push(problem);\n    }\n  }\n\n  const unusedDisableDirectives = options.directives.filter(directive => directive.type === \"disable\" && !usedDisableDirectives.has(directive)).map(directive => ({\n    ruleId: null,\n    message: directive.ruleId ? `Unused eslint-disable directive (no problems were reported from '${directive.ruleId}').` : \"Unused eslint-disable directive (no problems were reported).\",\n    line: directive.unprocessedDirective.line,\n    column: directive.unprocessedDirective.column,\n    severity: options.reportUnusedDisableDirectives === \"warn\" ? 1 : 2,\n    nodeType: null\n  }));\n  return {\n    problems,\n    unusedDisableDirectives\n  };\n}\n/**\n * Given a list of directive comments (i.e. metadata about eslint-disable and eslint-enable comments) and a list\n * of reported problems, determines which problems should be reported.\n * @param {Object} options Information about directives and problems\n * @param {{\n *      type: (\"disable\"|\"enable\"|\"disable-line\"|\"disable-next-line\"),\n *      ruleId: (string|null),\n *      line: number,\n *      column: number\n * }} options.directives Directive comments found in the file, with one-based columns.\n * Two directive comments can only have the same location if they also have the same type (e.g. a single eslint-disable\n * comment for two different rules is represented as two directives).\n * @param {{ruleId: (string|null), line: number, column: number}[]} options.problems\n * A list of problems reported by rules, sorted by increasing location in the file, with one-based columns.\n * @param {\"off\" | \"warn\" | \"error\"} options.reportUnusedDisableDirectives If `\"warn\"` or `\"error\"`, adds additional problems for unused directives\n * @returns {{ruleId: (string|null), line: number, column: number}[]}\n * A list of reported problems that were not disabled by the directive comments.\n */\n\n\nmodule.exports = ({\n  directives,\n  problems,\n  reportUnusedDisableDirectives = \"off\"\n}) => {\n  const blockDirectives = directives.filter(directive => directive.type === \"disable\" || directive.type === \"enable\").map(directive => Object.assign({}, directive, {\n    unprocessedDirective: directive\n  })).sort(compareLocations);\n  const lineDirectives = lodash.flatMap(directives, directive => {\n    switch (directive.type) {\n      case \"disable\":\n      case \"enable\":\n        return [];\n\n      case \"disable-line\":\n        return [{\n          type: \"disable\",\n          line: directive.line,\n          column: 1,\n          ruleId: directive.ruleId,\n          unprocessedDirective: directive\n        }, {\n          type: \"enable\",\n          line: directive.line + 1,\n          column: 0,\n          ruleId: directive.ruleId,\n          unprocessedDirective: directive\n        }];\n\n      case \"disable-next-line\":\n        return [{\n          type: \"disable\",\n          line: directive.line + 1,\n          column: 1,\n          ruleId: directive.ruleId,\n          unprocessedDirective: directive\n        }, {\n          type: \"enable\",\n          line: directive.line + 2,\n          column: 0,\n          ruleId: directive.ruleId,\n          unprocessedDirective: directive\n        }];\n\n      default:\n        throw new TypeError(`Unrecognized directive type '${directive.type}'`);\n    }\n  }).sort(compareLocations);\n  const blockDirectivesResult = applyDirectives({\n    problems,\n    directives: blockDirectives,\n    reportUnusedDisableDirectives\n  });\n  const lineDirectivesResult = applyDirectives({\n    problems: blockDirectivesResult.problems,\n    directives: lineDirectives,\n    reportUnusedDisableDirectives\n  });\n  return reportUnusedDisableDirectives !== \"off\" ? lineDirectivesResult.problems.concat(blockDirectivesResult.unusedDisableDirectives).concat(lineDirectivesResult.unusedDisableDirectives).sort(compareLocations) : lineDirectivesResult.problems;\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/linter/apply-disable-directives.js"],"names":["lodash","require","compareLocations","itemA","itemB","line","column","applyDirectives","options","problems","nextDirectiveIndex","currentGlobalDisableDirective","disabledRuleMap","Map","enabledRules","Set","usedDisableDirectives","problem","directives","length","directive","type","ruleId","clear","delete","set","add","has","get","push","unusedDisableDirectives","filter","map","message","unprocessedDirective","severity","reportUnusedDisableDirectives","nodeType","module","exports","blockDirectives","Object","assign","sort","lineDirectives","flatMap","TypeError","blockDirectivesResult","lineDirectivesResult","concat"],"mappings":"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","sourcesContent":["/**\n * @fileoverview A module that filters reported problems based on `eslint-disable` and `eslint-enable` comments\n * @author Teddy Katz\n */\n\n\"use strict\";\n\nconst lodash = require(\"lodash\");\n\n/**\n * Compares the locations of two objects in a source file\n * @param {{line: number, column: number}} itemA The first object\n * @param {{line: number, column: number}} itemB The second object\n * @returns {number} A value less than 1 if itemA appears before itemB in the source file, greater than 1 if\n * itemA appears after itemB in the source file, or 0 if itemA and itemB have the same location.\n */\nfunction compareLocations(itemA, itemB) {\n    return itemA.line - itemB.line || itemA.column - itemB.column;\n}\n\n/**\n * This is the same as the exported function, except that it\n * doesn't handle disable-line and disable-next-line directives, and it always reports unused\n * disable directives.\n * @param {Object} options options for applying directives. This is the same as the options\n * for the exported function, except that `reportUnusedDisableDirectives` is not supported\n * (this function always reports unused disable directives).\n * @returns {{problems: Problem[], unusedDisableDirectives: Problem[]}} An object with a list\n * of filtered problems and unused eslint-disable directives\n */\nfunction applyDirectives(options) {\n    const problems = [];\n    let nextDirectiveIndex = 0;\n    let currentGlobalDisableDirective = null;\n    const disabledRuleMap = new Map();\n\n    // enabledRules is only used when there is a current global disable directive.\n    const enabledRules = new Set();\n    const usedDisableDirectives = new Set();\n\n    for (const problem of options.problems) {\n        while (\n            nextDirectiveIndex < options.directives.length &&\n            compareLocations(options.directives[nextDirectiveIndex], problem) <= 0\n        ) {\n            const directive = options.directives[nextDirectiveIndex++];\n\n            switch (directive.type) {\n                case \"disable\":\n                    if (directive.ruleId === null) {\n                        currentGlobalDisableDirective = directive;\n                        disabledRuleMap.clear();\n                        enabledRules.clear();\n                    } else if (currentGlobalDisableDirective) {\n                        enabledRules.delete(directive.ruleId);\n                        disabledRuleMap.set(directive.ruleId, directive);\n                    } else {\n                        disabledRuleMap.set(directive.ruleId, directive);\n                    }\n                    break;\n\n                case \"enable\":\n                    if (directive.ruleId === null) {\n                        currentGlobalDisableDirective = null;\n                        disabledRuleMap.clear();\n                    } else if (currentGlobalDisableDirective) {\n                        enabledRules.add(directive.ruleId);\n                        disabledRuleMap.delete(directive.ruleId);\n                    } else {\n                        disabledRuleMap.delete(directive.ruleId);\n                    }\n                    break;\n\n                // no default\n            }\n        }\n\n        if (disabledRuleMap.has(problem.ruleId)) {\n            usedDisableDirectives.add(disabledRuleMap.get(problem.ruleId));\n        } else if (currentGlobalDisableDirective && !enabledRules.has(problem.ruleId)) {\n            usedDisableDirectives.add(currentGlobalDisableDirective);\n        } else {\n            problems.push(problem);\n        }\n    }\n\n    const unusedDisableDirectives = options.directives\n        .filter(directive => directive.type === \"disable\" && !usedDisableDirectives.has(directive))\n        .map(directive => ({\n            ruleId: null,\n            message: directive.ruleId\n                ? `Unused eslint-disable directive (no problems were reported from '${directive.ruleId}').`\n                : \"Unused eslint-disable directive (no problems were reported).\",\n            line: directive.unprocessedDirective.line,\n            column: directive.unprocessedDirective.column,\n            severity: options.reportUnusedDisableDirectives === \"warn\" ? 1 : 2,\n            nodeType: null\n        }));\n\n    return { problems, unusedDisableDirectives };\n}\n\n/**\n * Given a list of directive comments (i.e. metadata about eslint-disable and eslint-enable comments) and a list\n * of reported problems, determines which problems should be reported.\n * @param {Object} options Information about directives and problems\n * @param {{\n *      type: (\"disable\"|\"enable\"|\"disable-line\"|\"disable-next-line\"),\n *      ruleId: (string|null),\n *      line: number,\n *      column: number\n * }} options.directives Directive comments found in the file, with one-based columns.\n * Two directive comments can only have the same location if they also have the same type (e.g. a single eslint-disable\n * comment for two different rules is represented as two directives).\n * @param {{ruleId: (string|null), line: number, column: number}[]} options.problems\n * A list of problems reported by rules, sorted by increasing location in the file, with one-based columns.\n * @param {\"off\" | \"warn\" | \"error\"} options.reportUnusedDisableDirectives If `\"warn\"` or `\"error\"`, adds additional problems for unused directives\n * @returns {{ruleId: (string|null), line: number, column: number}[]}\n * A list of reported problems that were not disabled by the directive comments.\n */\nmodule.exports = ({ directives, problems, reportUnusedDisableDirectives = \"off\" }) => {\n    const blockDirectives = directives\n        .filter(directive => directive.type === \"disable\" || directive.type === \"enable\")\n        .map(directive => Object.assign({}, directive, { unprocessedDirective: directive }))\n        .sort(compareLocations);\n\n    const lineDirectives = lodash.flatMap(directives, directive => {\n        switch (directive.type) {\n            case \"disable\":\n            case \"enable\":\n                return [];\n\n            case \"disable-line\":\n                return [\n                    { type: \"disable\", line: directive.line, column: 1, ruleId: directive.ruleId, unprocessedDirective: directive },\n                    { type: \"enable\", line: directive.line + 1, column: 0, ruleId: directive.ruleId, unprocessedDirective: directive }\n                ];\n\n            case \"disable-next-line\":\n                return [\n                    { type: \"disable\", line: directive.line + 1, column: 1, ruleId: directive.ruleId, unprocessedDirective: directive },\n                    { type: \"enable\", line: directive.line + 2, column: 0, ruleId: directive.ruleId, unprocessedDirective: directive }\n                ];\n\n            default:\n                throw new TypeError(`Unrecognized directive type '${directive.type}'`);\n        }\n    }).sort(compareLocations);\n\n    const blockDirectivesResult = applyDirectives({\n        problems,\n        directives: blockDirectives,\n        reportUnusedDisableDirectives\n    });\n    const lineDirectivesResult = applyDirectives({\n        problems: blockDirectivesResult.problems,\n        directives: lineDirectives,\n        reportUnusedDisableDirectives\n    });\n\n    return reportUnusedDisableDirectives !== \"off\"\n        ? lineDirectivesResult.problems\n            .concat(blockDirectivesResult.unusedDisableDirectives)\n            .concat(lineDirectivesResult.unusedDisableDirectives)\n            .sort(compareLocations)\n        : lineDirectivesResult.problems;\n};\n"]},"metadata":{},"sourceType":"script"}