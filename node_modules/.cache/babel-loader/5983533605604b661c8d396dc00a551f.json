{"ast":null,"code":"/**\n * @fileoverview Rule to check spacing between template tags and their literals\n * @author Jonathan Wilsson\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require or disallow spacing between template tags and their literals\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/template-tag-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }],\n    messages: {\n      unexpected: \"Unexpected space between template tag and template literal.\",\n      missing: \"Missing space between template tag and template literal.\"\n    }\n  },\n\n  create(context) {\n    const never = context.options[0] !== \"always\";\n    const sourceCode = context.getSourceCode();\n    /**\n     * Check if a space is present between a template tag and its literal\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n    function checkSpacing(node) {\n      const tagToken = sourceCode.getTokenBefore(node.quasi);\n      const literalToken = sourceCode.getFirstToken(node.quasi);\n      const hasWhitespace = sourceCode.isSpaceBetweenTokens(tagToken, literalToken);\n\n      if (never && hasWhitespace) {\n        context.report({\n          node,\n          loc: tagToken.loc.start,\n          messageId: \"unexpected\",\n\n          fix(fixer) {\n            const comments = sourceCode.getCommentsBefore(node.quasi); // Don't fix anything if there's a single line comment after the template tag\n\n            if (comments.some(comment => comment.type === \"Line\")) {\n              return null;\n            }\n\n            return fixer.replaceTextRange([tagToken.range[1], literalToken.range[0]], comments.reduce((text, comment) => text + sourceCode.getText(comment), \"\"));\n          }\n\n        });\n      } else if (!never && !hasWhitespace) {\n        context.report({\n          node,\n          loc: tagToken.loc.start,\n          messageId: \"missing\",\n\n          fix(fixer) {\n            return fixer.insertTextAfter(tagToken, \" \");\n          }\n\n        });\n      }\n    }\n\n    return {\n      TaggedTemplateExpression: checkSpacing\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/template-tag-spacing.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","messages","unexpected","missing","create","context","never","options","sourceCode","getSourceCode","checkSpacing","node","tagToken","getTokenBefore","quasi","literalToken","getFirstToken","hasWhitespace","isSpaceBetweenTokens","report","loc","start","messageId","fix","fixer","comments","getCommentsBefore","some","comment","replaceTextRange","range","reduce","text","getText","insertTextAfter","TaggedTemplateExpression"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,QADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,sEADX;AAEFC,MAAAA,QAAQ,EAAE,kBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,OAAO,EAAE,YAVP;AAYFC,IAAAA,MAAM,EAAE,CACJ;AAAEC,MAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,OAAX;AAAR,KADI,CAZN;AAeFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE,6DADN;AAENC,MAAAA,OAAO,EAAE;AAFH;AAfR,GADO;;AAsBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,KAAK,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,MAAuB,QAArC;AACA,UAAMC,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB;AAEA;;;;;;;AAMA,aAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,YAAMC,QAAQ,GAAGJ,UAAU,CAACK,cAAX,CAA0BF,IAAI,CAACG,KAA/B,CAAjB;AACA,YAAMC,YAAY,GAAGP,UAAU,CAACQ,aAAX,CAAyBL,IAAI,CAACG,KAA9B,CAArB;AACA,YAAMG,aAAa,GAAGT,UAAU,CAACU,oBAAX,CAAgCN,QAAhC,EAA0CG,YAA1C,CAAtB;;AAEA,UAAIT,KAAK,IAAIW,aAAb,EAA4B;AACxBZ,QAAAA,OAAO,CAACc,MAAR,CAAe;AACXR,UAAAA,IADW;AAEXS,UAAAA,GAAG,EAAER,QAAQ,CAACQ,GAAT,CAAaC,KAFP;AAGXC,UAAAA,SAAS,EAAE,YAHA;;AAIXC,UAAAA,GAAG,CAACC,KAAD,EAAQ;AACP,kBAAMC,QAAQ,GAAGjB,UAAU,CAACkB,iBAAX,CAA6Bf,IAAI,CAACG,KAAlC,CAAjB,CADO,CAGP;;AACA,gBAAIW,QAAQ,CAACE,IAAT,CAAcC,OAAO,IAAIA,OAAO,CAACpC,IAAR,KAAiB,MAA1C,CAAJ,EAAuD;AACnD,qBAAO,IAAP;AACH;;AAED,mBAAOgC,KAAK,CAACK,gBAAN,CACH,CAACjB,QAAQ,CAACkB,KAAT,CAAe,CAAf,CAAD,EAAoBf,YAAY,CAACe,KAAb,CAAmB,CAAnB,CAApB,CADG,EAEHL,QAAQ,CAACM,MAAT,CAAgB,CAACC,IAAD,EAAOJ,OAAP,KAAmBI,IAAI,GAAGxB,UAAU,CAACyB,OAAX,CAAmBL,OAAnB,CAA1C,EAAuE,EAAvE,CAFG,CAAP;AAIH;;AAhBU,SAAf;AAkBH,OAnBD,MAmBO,IAAI,CAACtB,KAAD,IAAU,CAACW,aAAf,EAA8B;AACjCZ,QAAAA,OAAO,CAACc,MAAR,CAAe;AACXR,UAAAA,IADW;AAEXS,UAAAA,GAAG,EAAER,QAAQ,CAACQ,GAAT,CAAaC,KAFP;AAGXC,UAAAA,SAAS,EAAE,SAHA;;AAIXC,UAAAA,GAAG,CAACC,KAAD,EAAQ;AACP,mBAAOA,KAAK,CAACU,eAAN,CAAsBtB,QAAtB,EAAgC,GAAhC,CAAP;AACH;;AANU,SAAf;AAQH;AACJ;;AAED,WAAO;AACHuB,MAAAA,wBAAwB,EAAEzB;AADvB,KAAP;AAGH;;AAvEY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to check spacing between template tags and their literals\n * @author Jonathan Wilsson\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require or disallow spacing between template tags and their literals\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/template-tag-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            { enum: [\"always\", \"never\"] }\n        ],\n        messages: {\n            unexpected: \"Unexpected space between template tag and template literal.\",\n            missing: \"Missing space between template tag and template literal.\"\n        }\n    },\n\n    create(context) {\n        const never = context.options[0] !== \"always\";\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Check if a space is present between a template tag and its literal\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkSpacing(node) {\n            const tagToken = sourceCode.getTokenBefore(node.quasi);\n            const literalToken = sourceCode.getFirstToken(node.quasi);\n            const hasWhitespace = sourceCode.isSpaceBetweenTokens(tagToken, literalToken);\n\n            if (never && hasWhitespace) {\n                context.report({\n                    node,\n                    loc: tagToken.loc.start,\n                    messageId: \"unexpected\",\n                    fix(fixer) {\n                        const comments = sourceCode.getCommentsBefore(node.quasi);\n\n                        // Don't fix anything if there's a single line comment after the template tag\n                        if (comments.some(comment => comment.type === \"Line\")) {\n                            return null;\n                        }\n\n                        return fixer.replaceTextRange(\n                            [tagToken.range[1], literalToken.range[0]],\n                            comments.reduce((text, comment) => text + sourceCode.getText(comment), \"\")\n                        );\n                    }\n                });\n            } else if (!never && !hasWhitespace) {\n                context.report({\n                    node,\n                    loc: tagToken.loc.start,\n                    messageId: \"missing\",\n                    fix(fixer) {\n                        return fixer.insertTextAfter(tagToken, \" \");\n                    }\n                });\n            }\n        }\n\n        return {\n            TaggedTemplateExpression: checkSpacing\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}