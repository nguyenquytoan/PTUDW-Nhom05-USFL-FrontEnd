{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _prettyFormat() {\n  const data = _interopRequireDefault(require('pretty-format'));\n\n  _prettyFormat = function _prettyFormat() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst format = value => (0, _prettyFormat().default)(value, {\n  min: true\n});\n\nvar _default = {\n  mapCoverage: () => `  Option ${_chalk().default.bold('\"mapCoverage\"')} has been removed, as it's no longer necessary.\n\n  Please update your configuration.`,\n  preprocessorIgnorePatterns: function (_preprocessorIgnorePatterns) {\n    function preprocessorIgnorePatterns(_x) {\n      return _preprocessorIgnorePatterns.apply(this, arguments);\n    }\n\n    preprocessorIgnorePatterns.toString = function () {\n      return _preprocessorIgnorePatterns.toString();\n    };\n\n    return preprocessorIgnorePatterns;\n  }(options => `  Option ${_chalk().default.bold('\"preprocessorIgnorePatterns\"')} was replaced by ${_chalk().default.bold('\"transformIgnorePatterns\"')}, which support multiple preprocessors.\n\n  Jest now treats your current configuration as:\n  {\n    ${_chalk().default.bold('\"transformIgnorePatterns\"')}: ${_chalk().default.bold(format(options.preprocessorIgnorePatterns))}\n  }\n\n  Please update your configuration.`),\n  scriptPreprocessor: function (_scriptPreprocessor) {\n    function scriptPreprocessor(_x2) {\n      return _scriptPreprocessor.apply(this, arguments);\n    }\n\n    scriptPreprocessor.toString = function () {\n      return _scriptPreprocessor.toString();\n    };\n\n    return scriptPreprocessor;\n  }(options => `  Option ${_chalk().default.bold('\"scriptPreprocessor\"')} was replaced by ${_chalk().default.bold('\"transform\"')}, which support multiple preprocessors.\n\n  Jest now treats your current configuration as:\n  {\n    ${_chalk().default.bold('\"transform\"')}: ${_chalk().default.bold(`{\".*\": ${format(options.scriptPreprocessor)}}`)}\n  }\n\n  Please update your configuration.`),\n  setupTestFrameworkScriptFile: function (_setupTestFrameworkScriptFile) {\n    function setupTestFrameworkScriptFile(_x3) {\n      return _setupTestFrameworkScriptFile.apply(this, arguments);\n    }\n\n    setupTestFrameworkScriptFile.toString = function () {\n      return _setupTestFrameworkScriptFile.toString();\n    };\n\n    return setupTestFrameworkScriptFile;\n  }(_options => `  Option ${_chalk().default.bold('\"setupTestFrameworkScriptFile\"')} was replaced by configuration ${_chalk().default.bold('\"setupFilesAfterEnv\"')}, which supports multiple paths.\n\n  Please update your configuration.`),\n  testPathDirs: function (_testPathDirs) {\n    function testPathDirs(_x4) {\n      return _testPathDirs.apply(this, arguments);\n    }\n\n    testPathDirs.toString = function () {\n      return _testPathDirs.toString();\n    };\n\n    return testPathDirs;\n  }(options => `  Option ${_chalk().default.bold('\"testPathDirs\"')} was replaced by ${_chalk().default.bold('\"roots\"')}.\n\n  Jest now treats your current configuration as:\n  {\n    ${_chalk().default.bold('\"roots\"')}: ${_chalk().default.bold(format(options.testPathDirs))}\n  }\n\n  Please update your configuration.\n  `)\n};\nexports.default = _default;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-config/build/Deprecated.js"],"names":["Object","defineProperty","exports","value","default","_chalk","data","_interopRequireDefault","require","_prettyFormat","obj","__esModule","format","min","_default","mapCoverage","bold","preprocessorIgnorePatterns","_preprocessorIgnorePatterns","_x","apply","arguments","toString","options","scriptPreprocessor","_scriptPreprocessor","_x2","setupTestFrameworkScriptFile","_setupTestFrameworkScriptFile","_x3","_options","testPathDirs","_testPathDirs","_x4"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _prettyFormat() {\n  const data = _interopRequireDefault(require('pretty-format'));\n\n  _prettyFormat = function _prettyFormat() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst format = value =>\n  (0, _prettyFormat().default)(value, {\n    min: true\n  });\n\nvar _default = {\n  mapCoverage: () => `  Option ${_chalk().default.bold(\n    '\"mapCoverage\"'\n  )} has been removed, as it's no longer necessary.\n\n  Please update your configuration.`,\n  preprocessorIgnorePatterns: (function(_preprocessorIgnorePatterns) {\n    function preprocessorIgnorePatterns(_x) {\n      return _preprocessorIgnorePatterns.apply(this, arguments);\n    }\n\n    preprocessorIgnorePatterns.toString = function() {\n      return _preprocessorIgnorePatterns.toString();\n    };\n\n    return preprocessorIgnorePatterns;\n  })(\n    options => `  Option ${_chalk().default.bold(\n      '\"preprocessorIgnorePatterns\"'\n    )} was replaced by ${_chalk().default.bold(\n      '\"transformIgnorePatterns\"'\n    )}, which support multiple preprocessors.\n\n  Jest now treats your current configuration as:\n  {\n    ${_chalk().default.bold(\n      '\"transformIgnorePatterns\"'\n    )}: ${_chalk().default.bold(format(options.preprocessorIgnorePatterns))}\n  }\n\n  Please update your configuration.`\n  ),\n  scriptPreprocessor: (function(_scriptPreprocessor) {\n    function scriptPreprocessor(_x2) {\n      return _scriptPreprocessor.apply(this, arguments);\n    }\n\n    scriptPreprocessor.toString = function() {\n      return _scriptPreprocessor.toString();\n    };\n\n    return scriptPreprocessor;\n  })(\n    options => `  Option ${_chalk().default.bold(\n      '\"scriptPreprocessor\"'\n    )} was replaced by ${_chalk().default.bold(\n      '\"transform\"'\n    )}, which support multiple preprocessors.\n\n  Jest now treats your current configuration as:\n  {\n    ${_chalk().default.bold('\"transform\"')}: ${_chalk().default.bold(\n      `{\".*\": ${format(options.scriptPreprocessor)}}`\n    )}\n  }\n\n  Please update your configuration.`\n  ),\n  setupTestFrameworkScriptFile: (function(_setupTestFrameworkScriptFile) {\n    function setupTestFrameworkScriptFile(_x3) {\n      return _setupTestFrameworkScriptFile.apply(this, arguments);\n    }\n\n    setupTestFrameworkScriptFile.toString = function() {\n      return _setupTestFrameworkScriptFile.toString();\n    };\n\n    return setupTestFrameworkScriptFile;\n  })(\n    _options => `  Option ${_chalk().default.bold(\n      '\"setupTestFrameworkScriptFile\"'\n    )} was replaced by configuration ${_chalk().default.bold(\n      '\"setupFilesAfterEnv\"'\n    )}, which supports multiple paths.\n\n  Please update your configuration.`\n  ),\n  testPathDirs: (function(_testPathDirs) {\n    function testPathDirs(_x4) {\n      return _testPathDirs.apply(this, arguments);\n    }\n\n    testPathDirs.toString = function() {\n      return _testPathDirs.toString();\n    };\n\n    return testPathDirs;\n  })(\n    options => `  Option ${_chalk().default.bold(\n      '\"testPathDirs\"'\n    )} was replaced by ${_chalk().default.bold('\"roots\"')}.\n\n  Jest now treats your current configuration as:\n  {\n    ${_chalk().default.bold('\"roots\"')}: ${_chalk().default.bold(\n      format(options.testPathDirs)\n    )}\n  }\n\n  Please update your configuration.\n  `\n  )\n};\nexports.default = _default;\n"]},"metadata":{},"sourceType":"script"}