{"ast":null,"code":"import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nexport class ColdObservable extends Observable {\n  constructor(messages, scheduler) {\n    super(function (subscriber) {\n      const observable = this;\n      const index = observable.logSubscribedFrame();\n      const subscription = new Subscription();\n      subscription.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscription;\n    });\n    this.messages = messages;\n    this.subscriptions = [];\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber) {\n    const messagesLength = this.messages.length;\n\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(this.scheduler.schedule(({\n        message,\n        subscriber\n      }) => {\n        message.notification.observe(subscriber);\n      }, message.frame, {\n        message,\n        subscriber\n      }));\n    }\n  }\n\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);","map":{"version":3,"sources":["../../../src/internal/testing/ColdObservable.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,YAAT,QAA6B,iBAA7B;AAIA,SAAS,oBAAT,QAAqC,wBAArC;AACA,SAAS,WAAT,QAA4B,qBAA5B;AAQA,OAAM,MAAO,cAAP,SAAiC,UAAjC,CAA8C;AAMlD,EAAA,WAAA,CAAmB,QAAnB,EACY,SADZ,EACgC;AAC9B,UAAM,UAA+B,UAA/B,EAA0D;AAC9D,YAAM,UAAU,GAAsB,IAAtC;AACA,YAAM,KAAK,GAAG,UAAU,CAAC,kBAAX,EAAd;AACA,YAAM,YAAY,GAAG,IAAI,YAAJ,EAArB;AACA,MAAA,YAAY,CAAC,GAAb,CAAiB,IAAI,YAAJ,CAAiB,MAAK;AACrC,QAAA,UAAU,CAAC,oBAAX,CAAgC,KAAhC;AACD,OAFgB,CAAjB;AAGA,MAAA,UAAU,CAAC,gBAAX,CAA4B,UAA5B;AACA,aAAO,YAAP;AACD,KATD;AAFiB,SAAA,QAAA,GAAA,QAAA;AALZ,SAAA,aAAA,GAAmC,EAAnC;AAiBL,SAAK,SAAL,GAAiB,SAAjB;AACD;;AAED,EAAA,gBAAgB,CAAC,UAAD,EAA4B;AAC1C,UAAM,cAAc,GAAG,KAAK,QAAL,CAAc,MAArC;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,cAApB,EAAoC,CAAC,EAArC,EAAyC;AACvC,YAAM,OAAO,GAAG,KAAK,QAAL,CAAc,CAAd,CAAhB;AACA,MAAA,UAAU,CAAC,GAAX,CACE,KAAK,SAAL,CAAe,QAAf,CAAwB,CAAC;AAAE,QAAA,OAAF;AAAW,QAAA;AAAX,OAAD,KAA4B;AAAG,QAAA,OAAO,CAAC,YAAR,CAAqB,OAArB,CAA6B,UAA7B;AAA2C,OAAlG,EACE,OAAO,CAAC,KADV,EAEE;AAAE,QAAA,OAAF;AAAW,QAAA;AAAX,OAFF,CADF;AAKD;AACF;;AA/BiD;AAiCpD,WAAW,CAAC,cAAD,EAAiB,CAAC,oBAAD,CAAjB,CAAX","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nexport class ColdObservable extends Observable {\n    constructor(messages, scheduler) {\n        super(function (subscriber) {\n            const observable = this;\n            const index = observable.logSubscribedFrame();\n            const subscription = new Subscription();\n            subscription.add(new Subscription(() => {\n                observable.logUnsubscribedFrame(index);\n            }));\n            observable.scheduleMessages(subscriber);\n            return subscription;\n        });\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    scheduleMessages(subscriber) {\n        const messagesLength = this.messages.length;\n        for (let i = 0; i < messagesLength; i++) {\n            const message = this.messages[i];\n            subscriber.add(this.scheduler.schedule(({ message, subscriber }) => { message.notification.observe(subscriber); }, message.frame, { message, subscriber }));\n        }\n    }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n//# sourceMappingURL=ColdObservable.js.map"]},"metadata":{},"sourceType":"module"}