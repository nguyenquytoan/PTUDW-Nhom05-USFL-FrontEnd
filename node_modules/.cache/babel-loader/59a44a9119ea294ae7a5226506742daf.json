{"ast":null,"code":"/* eslint-env mocha */\nvar assert = require(\"assert\");\n\nvar p = require(\"path\");\n\nvar readdir = require(\"../index\");\n\nfunction getAbsolutePath(file) {\n  return p.join(__dirname, file);\n}\n\nfunction getAbsolutePaths(files) {\n  return files.map(getAbsolutePath);\n}\n\ndescribe(\"readdir\", function () {\n  it(\"correctly lists all files in nested directories\", function (done) {\n    var expectedFiles = getAbsolutePaths([\"/testdir/a/a\", \"/testdir/a/beans\", \"/testdir/b/123\", \"/testdir/b/b/hurp-durp\", \"/testdir/c.txt\", \"/testdir/d.txt\"]);\n    readdir(p.join(__dirname, \"testdir\"), function (err, list) {\n      assert.ifError(err);\n      assert.deepEqual(list.sort(), expectedFiles.sort());\n      done();\n    });\n  });\n  it(\"ignores the files listed in the ignores array\", function (done) {\n    var notExpectedFiles = getAbsolutePaths([\"/testdir/d.txt\", \"/testdir/a/beans\"]);\n    readdir(p.join(__dirname, \"testdir\"), [\"d.txt\", \"beans\"], function (err, list) {\n      assert.ifError(err);\n      list.forEach(function (file) {\n        assert.equal(notExpectedFiles.indexOf(file), -1, 'Failed to ignore file \"' + file + '\".');\n      });\n      done();\n    });\n  });\n  it(\"ignores the directories listed in the ignores array\", function (done) {\n    var notExpectedFiles = getAbsolutePaths([\"/testdir/a/a\", \"/testdir/a/beans\"]);\n    readdir(p.join(__dirname, \"testdir\"), [\"**/testdir/a\"], function (err, list) {\n      assert.ifError(err);\n      list.forEach(function (file) {\n        assert.equal(notExpectedFiles.indexOf(file), -1, 'Failed to ignore file \"' + file + '\".');\n      });\n      done();\n    });\n  });\n  it(\"ignores symlinked files and directories listed in the ignores array\", function (done) {\n    var notExpectedFiles = getAbsolutePaths([\"/testsymlinks/testdir/linkeddir/hi.docx\", \"/testsymlinks/testdir/linkedfile.wmf\"]);\n    readdir(p.join(__dirname, \"testsymlinks/testdir\"), [\"linkeddir\", \"linkedfile.wmf\"], function (err, list) {\n      assert.ifError(err);\n      list.forEach(function (file) {\n        assert.equal(notExpectedFiles.indexOf(file), -1, 'Failed to ignore file \"' + file + '\".');\n      });\n      done();\n    });\n  });\n  it(\"supports ignoring files with just basename globbing\", function (done) {\n    var notExpectedFiles = getAbsolutePaths([\"/testdir/d.txt\", \"/testdir/a/beans\"]);\n    readdir(p.join(__dirname, \"testdir\"), [\"*.txt\", \"beans\"], function (err, list) {\n      assert.ifError(err);\n      list.forEach(function (file) {\n        assert.equal(notExpectedFiles.indexOf(file), -1, 'Failed to ignore file \"' + file + '\".');\n      });\n      done();\n    });\n  });\n  it(\"supports ignoring files with the globstar syntax\", function (done) {\n    var notExpectedFiles = getAbsolutePaths([\"/testdir/d.txt\", \"/testdir/a/beans\"]);\n    var ignores = [\"**/*.txt\", \"**/a/beans\"];\n    readdir(p.join(__dirname, \"testdir\"), ignores, function (err, list) {\n      assert.ifError(err);\n      list.forEach(function (file) {\n        assert.equal(notExpectedFiles.indexOf(file), -1, 'Failed to ignore file \"' + file + '\".');\n      });\n      done();\n    });\n  });\n  context(\"when there is a function in the ignores array\", function () {\n    it(\"passes each file and directory path to the function\", function (done) {\n      var expectedPaths = getAbsolutePaths([\"/testdir/a\", \"/testdir/a/a\", \"/testdir/a/beans\", \"/testdir/b\", \"/testdir/b/123\", \"/testdir/b/b\", \"/testdir/b/b/hurp-durp\", \"/testdir/c.txt\", \"/testdir/d.txt\"]);\n      var paths = [];\n\n      function ignoreFunction(path) {\n        paths.push(path);\n        return false;\n      }\n\n      readdir(p.join(__dirname, \"testdir\"), [ignoreFunction], function (err, list) {\n        assert.ifError(err);\n        assert.deepEqual(paths.sort(), expectedPaths.sort());\n        done();\n      });\n    });\n    it(\"passes the stat object of each file to the function as its second argument\", function (done) {\n      var paths = {};\n\n      function ignoreFunction(path, stats) {\n        paths[path] = stats;\n        return false;\n      }\n\n      readdir(p.join(__dirname, \"testdir\"), [ignoreFunction], function (err, list) {\n        assert.ifError(err);\n        assert(paths[getAbsolutePath(\"/testdir/a\")].isDirectory());\n        assert(paths[getAbsolutePath(\"/testdir/c.txt\")].isFile());\n        done();\n      });\n    });\n    it(\"ignores files that the function returns true for\", function (done) {\n      var ignoredFiles = getAbsolutePaths([\"/testdir/d.txt\", \"/testdir/a/beans\"]);\n\n      function ignoreFunction(path) {\n        return ignoredFiles.indexOf(path) != -1;\n      }\n\n      readdir(p.join(__dirname, \"testdir\"), [ignoreFunction], function (err, list) {\n        assert.ifError(err);\n        list.forEach(function (file) {\n          assert.equal(ignoredFiles.indexOf(file), -1, 'Failed to ignore file \"' + file + '\".');\n        });\n        done();\n      });\n    });\n    it(\"does not ignore files that the function returns false for\", function (done) {\n      var notIgnoredFiles = getAbsolutePaths([\"/testdir/d.txt\", \"/testdir/a/beans\"]);\n\n      function ignoreFunction(path) {\n        return notIgnoredFiles.indexOf(path) == -1;\n      }\n\n      readdir(p.join(__dirname, \"testdir\"), [ignoreFunction], function (err, list) {\n        assert.ifError(err);\n        notIgnoredFiles.forEach(function (file) {\n          assert.notEqual(notIgnoredFiles.indexOf(file), -1, 'Incorrectly ignored file \"' + file + '\".');\n        });\n        done();\n      });\n    });\n    it(\"ignores directories that the function returns true for\", function (done) {\n      var ignoredDirectory = getAbsolutePath(\"/testdir/a\");\n      var ignoredFiles = getAbsolutePaths([\"/testdir/a/a\", \"/testdir/a/beans\"]);\n\n      function ignoreFunction(path) {\n        return ignoredDirectory == path;\n      }\n\n      readdir(p.join(__dirname, \"testdir\"), [ignoreFunction], function (err, list) {\n        assert.ifError(err);\n        list.forEach(function (file) {\n          assert.equal(ignoredFiles.indexOf(file), -1, 'Failed to ignore file \"' + file + '\".');\n        });\n        done();\n      });\n    });\n    it(\"does not ignore directories that the function returns false for\", function (done) {\n      var ignoredDirectory = getAbsolutePath(\"/testdir/a\");\n      var notIgnoredFiles = getAbsolutePaths([\"/testdir/b/123\", \"/testdir/b/b/hurp-durp\"]);\n\n      function ignoreFunction(path) {\n        return ignoredDirectory == path;\n      }\n\n      readdir(p.join(__dirname, \"testdir\"), [ignoreFunction], function (err, list) {\n        assert.ifError(err);\n        notIgnoredFiles.forEach(function (file) {\n          assert.notEqual(notIgnoredFiles.indexOf(file), -1, 'Incorrectly ignored file \"' + file + '\".');\n        });\n        done();\n      });\n    });\n    it(\"does not descend into directories that the function returns true for\", function (done) {\n      var ignoredDirectory = getAbsolutePath(\"/testdir/a\");\n      var ignoredFiles = getAbsolutePaths([\"/testdir/a/a\", \"/testdir/a/beans\"]);\n      var paths = [];\n\n      function ignoreFunction(path) {\n        paths.push(path);\n        return ignoredDirectory == path;\n      }\n\n      readdir(p.join(__dirname, \"testdir\"), [ignoreFunction], function (err, list) {\n        assert.ifError(err);\n        paths.forEach(function (file) {\n          assert.equal(ignoredFiles.indexOf(file), -1, 'Transversed file in ignored directory \"' + file + '\".');\n        });\n        done();\n      });\n    });\n  });\n  it(\"works when there are no files to report except ignored files\", function (done) {\n    readdir(p.join(__dirname, \"testdirBeta\"), [\"*\"], function (err, list) {\n      assert.ifError(err);\n      assert.equal(list.length, 0, \"expect to report 0 files\");\n      done();\n    });\n  });\n  it(\"works when negated ignore list is given\", function (done) {\n    var expectedFiles = getAbsolutePaths([\"/testdirBeta/ignore.txt\"]);\n    readdir(p.join(__dirname, \"testdirBeta\"), [\"!*.txt\"], function (err, list) {\n      assert.ifError(err);\n      assert.deepEqual(list.sort(), expectedFiles, \"Failed to find expected files.\");\n      done();\n    });\n  });\n  it(\"traverses directory and file symbolic links\", function (done) {\n    var expectedFiles = getAbsolutePaths([\"/testsymlinks/testdir/linkeddir/hi.docx\", \"/testsymlinks/testdir/linkedfile.wmf\"]);\n    readdir(p.join(__dirname, \"testsymlinks\", \"testdir\"), function (err, list) {\n      assert.ifError(err);\n      assert.deepEqual(list.sort(), expectedFiles, \"Failed to find expected files.\");\n      done();\n    });\n  });\n\n  if (!global.Promise) {\n    console.log(\"Native Promise not supported - skipping tests\");\n  } else {\n    it(\"works with promises\", function (done) {\n      var expectedFiles = getAbsolutePaths([\"/testdir/a/a\", \"/testdir/a/beans\", \"/testdir/b/123\", \"/testdir/b/b/hurp-durp\", \"/testdir/c.txt\", \"/testdir/d.txt\"]);\n      readdir(p.join(__dirname, \"testdir\")).then(function (list) {\n        assert.deepEqual(list.sort(), expectedFiles.sort());\n        done();\n      }).catch(done);\n    });\n    it(\"correctly ignores when using promises\", function (done) {\n      var expectedFiles = getAbsolutePaths([\"/testdir/a/a\", \"/testdir/a/beans\", \"/testdir/b/123\", \"/testdir/b/b/hurp-durp\"]);\n      readdir(p.join(__dirname, \"testdir\"), [\"*.txt\"]).then(function (list) {\n        assert.deepEqual(list.sort(), expectedFiles.sort());\n        done();\n      }).catch(done);\n    });\n  }\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/recursive-readdir/test/recursive-readdir-test.js"],"names":["assert","require","p","readdir","getAbsolutePath","file","join","__dirname","getAbsolutePaths","files","map","describe","it","done","expectedFiles","err","list","ifError","deepEqual","sort","notExpectedFiles","forEach","equal","indexOf","ignores","context","expectedPaths","paths","ignoreFunction","path","push","stats","isDirectory","isFile","ignoredFiles","notIgnoredFiles","notEqual","ignoredDirectory","length","global","Promise","console","log","then","catch"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nvar assert = require(\"assert\");\nvar p = require(\"path\");\nvar readdir = require(\"../index\");\n\nfunction getAbsolutePath(file) {\n  return p.join(__dirname, file);\n}\n\nfunction getAbsolutePaths(files) {\n  return files.map(getAbsolutePath);\n}\n\ndescribe(\"readdir\", function() {\n  it(\"correctly lists all files in nested directories\", function(done) {\n    var expectedFiles = getAbsolutePaths([\n      \"/testdir/a/a\",\n      \"/testdir/a/beans\",\n      \"/testdir/b/123\",\n      \"/testdir/b/b/hurp-durp\",\n      \"/testdir/c.txt\",\n      \"/testdir/d.txt\"\n    ]);\n\n    readdir(p.join(__dirname, \"testdir\"), function(err, list) {\n      assert.ifError(err);\n      assert.deepEqual(list.sort(), expectedFiles.sort());\n      done();\n    });\n  });\n\n  it(\"ignores the files listed in the ignores array\", function(done) {\n    var notExpectedFiles = getAbsolutePaths([\n      \"/testdir/d.txt\",\n      \"/testdir/a/beans\"\n    ]);\n\n    readdir(p.join(__dirname, \"testdir\"), [\"d.txt\", \"beans\"], function(\n      err,\n      list\n    ) {\n      assert.ifError(err);\n      list.forEach(function(file) {\n        assert.equal(\n          notExpectedFiles.indexOf(file),\n          -1,\n          'Failed to ignore file \"' + file + '\".'\n        );\n      });\n      done();\n    });\n  });\n\n  it(\"ignores the directories listed in the ignores array\", function(done) {\n    var notExpectedFiles = getAbsolutePaths([\n      \"/testdir/a/a\",\n      \"/testdir/a/beans\"\n    ]);\n\n    readdir(p.join(__dirname, \"testdir\"), [\"**/testdir/a\"], function(\n      err,\n      list\n    ) {\n      assert.ifError(err);\n      list.forEach(function(file) {\n        assert.equal(\n          notExpectedFiles.indexOf(file),\n          -1,\n          'Failed to ignore file \"' + file + '\".'\n        );\n      });\n      done();\n    });\n  });\n\n  it(\"ignores symlinked files and directories listed in the ignores array\", function(\n    done\n  ) {\n    var notExpectedFiles = getAbsolutePaths([\n      \"/testsymlinks/testdir/linkeddir/hi.docx\",\n      \"/testsymlinks/testdir/linkedfile.wmf\"\n    ]);\n    readdir(\n      p.join(__dirname, \"testsymlinks/testdir\"),\n      [\"linkeddir\", \"linkedfile.wmf\"],\n      function(err, list) {\n        assert.ifError(err);\n        list.forEach(function(file) {\n          assert.equal(\n            notExpectedFiles.indexOf(file),\n            -1,\n            'Failed to ignore file \"' + file + '\".'\n          );\n        });\n        done();\n      }\n    );\n  });\n\n  it(\"supports ignoring files with just basename globbing\", function(done) {\n    var notExpectedFiles = getAbsolutePaths([\n      \"/testdir/d.txt\",\n      \"/testdir/a/beans\"\n    ]);\n\n    readdir(p.join(__dirname, \"testdir\"), [\"*.txt\", \"beans\"], function(\n      err,\n      list\n    ) {\n      assert.ifError(err);\n      list.forEach(function(file) {\n        assert.equal(\n          notExpectedFiles.indexOf(file),\n          -1,\n          'Failed to ignore file \"' + file + '\".'\n        );\n      });\n      done();\n    });\n  });\n\n  it(\"supports ignoring files with the globstar syntax\", function(done) {\n    var notExpectedFiles = getAbsolutePaths([\n      \"/testdir/d.txt\",\n      \"/testdir/a/beans\"\n    ]);\n\n    var ignores = [\"**/*.txt\", \"**/a/beans\"];\n\n    readdir(p.join(__dirname, \"testdir\"), ignores, function(err, list) {\n      assert.ifError(err);\n      list.forEach(function(file) {\n        assert.equal(\n          notExpectedFiles.indexOf(file),\n          -1,\n          'Failed to ignore file \"' + file + '\".'\n        );\n      });\n      done();\n    });\n  });\n\n  context(\"when there is a function in the ignores array\", function() {\n    it(\"passes each file and directory path to the function\", function(done) {\n      var expectedPaths = getAbsolutePaths([\n        \"/testdir/a\",\n        \"/testdir/a/a\",\n        \"/testdir/a/beans\",\n        \"/testdir/b\",\n        \"/testdir/b/123\",\n        \"/testdir/b/b\",\n        \"/testdir/b/b/hurp-durp\",\n        \"/testdir/c.txt\",\n        \"/testdir/d.txt\"\n      ]);\n      var paths = [];\n      function ignoreFunction(path) {\n        paths.push(path);\n        return false;\n      }\n      readdir(p.join(__dirname, \"testdir\"), [ignoreFunction], function(\n        err,\n        list\n      ) {\n        assert.ifError(err);\n        assert.deepEqual(paths.sort(), expectedPaths.sort());\n        done();\n      });\n    });\n\n    it(\"passes the stat object of each file to the function as its second argument\", function(\n      done\n    ) {\n      var paths = {};\n      function ignoreFunction(path, stats) {\n        paths[path] = stats;\n        return false;\n      }\n      readdir(p.join(__dirname, \"testdir\"), [ignoreFunction], function(\n        err,\n        list\n      ) {\n        assert.ifError(err);\n        assert(paths[getAbsolutePath(\"/testdir/a\")].isDirectory());\n        assert(paths[getAbsolutePath(\"/testdir/c.txt\")].isFile());\n        done();\n      });\n    });\n\n    it(\"ignores files that the function returns true for\", function(done) {\n      var ignoredFiles = getAbsolutePaths([\n        \"/testdir/d.txt\",\n        \"/testdir/a/beans\"\n      ]);\n      function ignoreFunction(path) {\n        return ignoredFiles.indexOf(path) != -1;\n      }\n\n      readdir(p.join(__dirname, \"testdir\"), [ignoreFunction], function(\n        err,\n        list\n      ) {\n        assert.ifError(err);\n        list.forEach(function(file) {\n          assert.equal(\n            ignoredFiles.indexOf(file),\n            -1,\n            'Failed to ignore file \"' + file + '\".'\n          );\n        });\n        done();\n      });\n    });\n\n    it(\"does not ignore files that the function returns false for\", function(\n      done\n    ) {\n      var notIgnoredFiles = getAbsolutePaths([\n        \"/testdir/d.txt\",\n        \"/testdir/a/beans\"\n      ]);\n      function ignoreFunction(path) {\n        return notIgnoredFiles.indexOf(path) == -1;\n      }\n\n      readdir(p.join(__dirname, \"testdir\"), [ignoreFunction], function(\n        err,\n        list\n      ) {\n        assert.ifError(err);\n        notIgnoredFiles.forEach(function(file) {\n          assert.notEqual(\n            notIgnoredFiles.indexOf(file),\n            -1,\n            'Incorrectly ignored file \"' + file + '\".'\n          );\n        });\n        done();\n      });\n    });\n\n    it(\"ignores directories that the function returns true for\", function(\n      done\n    ) {\n      var ignoredDirectory = getAbsolutePath(\"/testdir/a\");\n      var ignoredFiles = getAbsolutePaths([\"/testdir/a/a\", \"/testdir/a/beans\"]);\n      function ignoreFunction(path) {\n        return ignoredDirectory == path;\n      }\n\n      readdir(p.join(__dirname, \"testdir\"), [ignoreFunction], function(\n        err,\n        list\n      ) {\n        assert.ifError(err);\n        list.forEach(function(file) {\n          assert.equal(\n            ignoredFiles.indexOf(file),\n            -1,\n            'Failed to ignore file \"' + file + '\".'\n          );\n        });\n        done();\n      });\n    });\n\n    it(\"does not ignore directories that the function returns false for\", function(\n      done\n    ) {\n      var ignoredDirectory = getAbsolutePath(\"/testdir/a\");\n      var notIgnoredFiles = getAbsolutePaths([\n        \"/testdir/b/123\",\n        \"/testdir/b/b/hurp-durp\"\n      ]);\n      function ignoreFunction(path) {\n        return ignoredDirectory == path;\n      }\n\n      readdir(p.join(__dirname, \"testdir\"), [ignoreFunction], function(\n        err,\n        list\n      ) {\n        assert.ifError(err);\n        notIgnoredFiles.forEach(function(file) {\n          assert.notEqual(\n            notIgnoredFiles.indexOf(file),\n            -1,\n            'Incorrectly ignored file \"' + file + '\".'\n          );\n        });\n        done();\n      });\n    });\n\n    it(\"does not descend into directories that the function returns true for\", function(\n      done\n    ) {\n      var ignoredDirectory = getAbsolutePath(\"/testdir/a\");\n      var ignoredFiles = getAbsolutePaths([\"/testdir/a/a\", \"/testdir/a/beans\"]);\n      var paths = [];\n      function ignoreFunction(path) {\n        paths.push(path);\n        return ignoredDirectory == path;\n      }\n\n      readdir(p.join(__dirname, \"testdir\"), [ignoreFunction], function(\n        err,\n        list\n      ) {\n        assert.ifError(err);\n        paths.forEach(function(file) {\n          assert.equal(\n            ignoredFiles.indexOf(file),\n            -1,\n            'Transversed file in ignored directory \"' + file + '\".'\n          );\n        });\n        done();\n      });\n    });\n  });\n\n  it(\"works when there are no files to report except ignored files\", function(\n    done\n  ) {\n    readdir(p.join(__dirname, \"testdirBeta\"), [\"*\"], function(err, list) {\n      assert.ifError(err);\n      assert.equal(list.length, 0, \"expect to report 0 files\");\n      done();\n    });\n  });\n\n  it(\"works when negated ignore list is given\", function(done) {\n    var expectedFiles = getAbsolutePaths([\"/testdirBeta/ignore.txt\"]);\n\n    readdir(p.join(__dirname, \"testdirBeta\"), [\"!*.txt\"], function(err, list) {\n      assert.ifError(err);\n      assert.deepEqual(\n        list.sort(),\n        expectedFiles,\n        \"Failed to find expected files.\"\n      );\n      done();\n    });\n  });\n\n  it(\"traverses directory and file symbolic links\", function(done) {\n    var expectedFiles = getAbsolutePaths([\n      \"/testsymlinks/testdir/linkeddir/hi.docx\",\n      \"/testsymlinks/testdir/linkedfile.wmf\"\n    ]);\n\n    readdir(p.join(__dirname, \"testsymlinks\", \"testdir\"), function(err, list) {\n      assert.ifError(err);\n      assert.deepEqual(\n        list.sort(),\n        expectedFiles,\n        \"Failed to find expected files.\"\n      );\n      done();\n    });\n  });\n\n  if (!global.Promise) {\n    console.log(\"Native Promise not supported - skipping tests\");\n  } else {\n    it(\"works with promises\", function(done) {\n      var expectedFiles = getAbsolutePaths([\n        \"/testdir/a/a\",\n        \"/testdir/a/beans\",\n        \"/testdir/b/123\",\n        \"/testdir/b/b/hurp-durp\",\n        \"/testdir/c.txt\",\n        \"/testdir/d.txt\"\n      ]);\n\n      readdir(p.join(__dirname, \"testdir\"))\n        .then(function(list) {\n          assert.deepEqual(list.sort(), expectedFiles.sort());\n          done();\n        })\n        .catch(done);\n    });\n\n    it(\"correctly ignores when using promises\", function(done) {\n      var expectedFiles = getAbsolutePaths([\n        \"/testdir/a/a\",\n        \"/testdir/a/beans\",\n        \"/testdir/b/123\",\n        \"/testdir/b/b/hurp-durp\"\n      ]);\n\n      readdir(p.join(__dirname, \"testdir\"), [\"*.txt\"])\n        .then(function(list) {\n          assert.deepEqual(list.sort(), expectedFiles.sort());\n          done();\n        })\n        .catch(done);\n    });\n  }\n});\n"]},"metadata":{},"sourceType":"script"}