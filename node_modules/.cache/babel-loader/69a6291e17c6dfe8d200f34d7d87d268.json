{"ast":null,"code":"import propName from './propName';\nconst DEFAULT_OPTIONS = {\n  spreadStrict: true,\n  ignoreCase: true\n};\n/**\n * Returns boolean indicating whether an prop exists on the props\n * property of a JSX element node.\n */\n\nexport default function hasProp(props = [], prop = '', options = DEFAULT_OPTIONS) {\n  const propToCheck = options.ignoreCase ? prop.toUpperCase() : prop;\n  return props.some(attribute => {\n    // If the props contain a spread prop, then refer to strict param.\n    if (attribute.type === 'JSXSpreadAttribute') {\n      return !options.spreadStrict;\n    }\n\n    const currentProp = options.ignoreCase ? propName(attribute).toUpperCase() : propName(attribute);\n    return propToCheck === currentProp;\n  });\n}\n/**\n * Given the props on a node and a list of props to check, this returns a boolean\n * indicating if any of them exist on the node.\n */\n\nexport function hasAnyProp(nodeProps = [], props = [], options = DEFAULT_OPTIONS) {\n  const propsToCheck = typeof props === 'string' ? props.split(' ') : props;\n  return propsToCheck.some(prop => hasProp(nodeProps, prop, options));\n}\n/**\n * Given the props on a node and a list of props to check, this returns a boolean\n * indicating if all of them exist on the node\n */\n\nexport function hasEveryProp(nodeProps = [], props = [], options = DEFAULT_OPTIONS) {\n  const propsToCheck = typeof props === 'string' ? props.split(' ') : props;\n  return propsToCheck.every(prop => hasProp(nodeProps, prop, options));\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/src/hasProp.js"],"names":["propName","DEFAULT_OPTIONS","spreadStrict","ignoreCase","hasProp","props","prop","options","propToCheck","toUpperCase","some","attribute","type","currentProp","hasAnyProp","nodeProps","propsToCheck","split","hasEveryProp","every"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,YAAY,EAAE,IADQ;AAEtBC,EAAAA,UAAU,EAAE;AAFU,CAAxB;AAKA;;;;;AAIA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAG,EAAzB,EAA6BC,IAAI,GAAG,EAApC,EAAwCC,OAAO,GAAGN,eAAlD,EAAmE;AAChF,QAAMO,WAAW,GAAGD,OAAO,CAACJ,UAAR,GAAqBG,IAAI,CAACG,WAAL,EAArB,GAA0CH,IAA9D;AAEA,SAAOD,KAAK,CAACK,IAAN,CAAYC,SAAD,IAAe;AAC/B;AACA,QAAIA,SAAS,CAACC,IAAV,KAAmB,oBAAvB,EAA6C;AAC3C,aAAO,CAACL,OAAO,CAACL,YAAhB;AACD;;AAED,UAAMW,WAAW,GAAGN,OAAO,CAACJ,UAAR,GAChBH,QAAQ,CAACW,SAAD,CAAR,CAAoBF,WAApB,EADgB,GAEhBT,QAAQ,CAACW,SAAD,CAFZ;AAIA,WAAOH,WAAW,KAAKK,WAAvB;AACD,GAXM,CAAP;AAYD;AAED;;;;;AAIA,OAAO,SAASC,UAAT,CAAoBC,SAAS,GAAG,EAAhC,EAAoCV,KAAK,GAAG,EAA5C,EAAgDE,OAAO,GAAGN,eAA1D,EAA2E;AAChF,QAAMe,YAAY,GAAG,OAAOX,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,CAACY,KAAN,CAAY,GAAZ,CAA5B,GAA+CZ,KAApE;AAEA,SAAOW,YAAY,CAACN,IAAb,CAAmBJ,IAAD,IAAUF,OAAO,CAACW,SAAD,EAAYT,IAAZ,EAAkBC,OAAlB,CAAnC,CAAP;AACD;AAED;;;;;AAIA,OAAO,SAASW,YAAT,CAAsBH,SAAS,GAAG,EAAlC,EAAsCV,KAAK,GAAG,EAA9C,EAAkDE,OAAO,GAAGN,eAA5D,EAA6E;AAClF,QAAMe,YAAY,GAAG,OAAOX,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,CAACY,KAAN,CAAY,GAAZ,CAA5B,GAA+CZ,KAApE;AAEA,SAAOW,YAAY,CAACG,KAAb,CAAoBb,IAAD,IAAUF,OAAO,CAACW,SAAD,EAAYT,IAAZ,EAAkBC,OAAlB,CAApC,CAAP;AACD","sourcesContent":["import propName from './propName';\n\nconst DEFAULT_OPTIONS = {\n  spreadStrict: true,\n  ignoreCase: true,\n};\n\n/**\n * Returns boolean indicating whether an prop exists on the props\n * property of a JSX element node.\n */\nexport default function hasProp(props = [], prop = '', options = DEFAULT_OPTIONS) {\n  const propToCheck = options.ignoreCase ? prop.toUpperCase() : prop;\n\n  return props.some((attribute) => {\n    // If the props contain a spread prop, then refer to strict param.\n    if (attribute.type === 'JSXSpreadAttribute') {\n      return !options.spreadStrict;\n    }\n\n    const currentProp = options.ignoreCase\n      ? propName(attribute).toUpperCase()\n      : propName(attribute);\n\n    return propToCheck === currentProp;\n  });\n}\n\n/**\n * Given the props on a node and a list of props to check, this returns a boolean\n * indicating if any of them exist on the node.\n */\nexport function hasAnyProp(nodeProps = [], props = [], options = DEFAULT_OPTIONS) {\n  const propsToCheck = typeof props === 'string' ? props.split(' ') : props;\n\n  return propsToCheck.some((prop) => hasProp(nodeProps, prop, options));\n}\n\n/**\n * Given the props on a node and a list of props to check, this returns a boolean\n * indicating if all of them exist on the node\n */\nexport function hasEveryProp(nodeProps = [], props = [], options = DEFAULT_OPTIONS) {\n  const propsToCheck = typeof props === 'string' ? props.split(' ') : props;\n\n  return propsToCheck.every((prop) => hasProp(nodeProps, prop, options));\n}\n"]},"metadata":{},"sourceType":"module"}