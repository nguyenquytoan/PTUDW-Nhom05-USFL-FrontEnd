{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"chai\").assert,\n    isPlainObject = require(\"../../plain-object/is\");\n\ndescribe(\"plain-object/is\", function () {\n  it(\"Should return true on plain object\", function () {\n    assert.equal(isPlainObject({}), true);\n  });\n\n  if (typeof Object.create === \"function\") {\n    it(\"Should return true on object with no prototype\", function () {\n      assert.equal(isPlainObject(Object.create(null)), true);\n    });\n    it(\"Should return false on object that inherits from object with no prototype\", function () {\n      assert.equal(isPlainObject(Object.create(Object.create(null))), false);\n    });\n  }\n\n  it(\"Should return false on Object.prototype\", function () {\n    assert.equal(isPlainObject(Object.prototype), false);\n  });\n  it(\"Should return false on prototype that derives from Object.prototype\", function () {\n    assert.equal(isPlainObject(RegExp.prototype), false);\n  });\n  it(\"Should return false on function\", function () {\n    assert.equal(isPlainObject(function () {\n      return true;\n    }), false);\n  });\n  it(\"Should return false on string\", function () {\n    assert.equal(isPlainObject(\"foo\"), false);\n  });\n  it(\"Should return false on empty string\", function () {\n    assert.equal(isPlainObject(\"\"), false);\n  });\n  it(\"Should return false on number\", function () {\n    assert.equal(isPlainObject(123), false);\n  });\n  it(\"Should return false on NaN\", function () {\n    assert.equal(isPlainObject(NaN), false);\n  });\n  it(\"Should return false on boolean\", function () {\n    assert.equal(isPlainObject(true), false);\n  });\n\n  if (typeof Symbol === \"function\") {\n    it(\"Should return false on symbol\", function () {\n      assert.equal(isPlainObject(Symbol(\"foo\")), false);\n    });\n  }\n\n  it(\"Should return false on null\", function () {\n    assert.equal(isPlainObject(null), false);\n  });\n  it(\"Should return false on undefined\", function () {\n    assert.equal(isPlainObject(void 0), false);\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type/test/plain-object/is.js"],"names":["assert","require","isPlainObject","describe","it","equal","Object","create","prototype","RegExp","NaN","Symbol"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar assert        = require(\"chai\").assert\n  , isPlainObject = require(\"../../plain-object/is\");\n\ndescribe(\"plain-object/is\", function () {\n\tit(\"Should return true on plain object\", function () {\n\t\tassert.equal(isPlainObject({}), true);\n\t});\n\tif (typeof Object.create === \"function\") {\n\t\tit(\"Should return true on object with no prototype\", function () {\n\t\t\tassert.equal(isPlainObject(Object.create(null)), true);\n\t\t});\n\t\tit(\n\t\t\t\"Should return false on object that inherits from object with no prototype\",\n\t\t\tfunction () { assert.equal(isPlainObject(Object.create(Object.create(null))), false); }\n\t\t);\n\t}\n\tit(\"Should return false on Object.prototype\", function () {\n\t\tassert.equal(isPlainObject(Object.prototype), false);\n\t});\n\tit(\"Should return false on prototype that derives from Object.prototype\", function () {\n\t\tassert.equal(isPlainObject(RegExp.prototype), false);\n\t});\n\n\tit(\"Should return false on function\", function () {\n\t\tassert.equal(isPlainObject(function () { return true; }), false);\n\t});\n\n\tit(\"Should return false on string\", function () { assert.equal(isPlainObject(\"foo\"), false); });\n\tit(\"Should return false on empty string\", function () {\n\t\tassert.equal(isPlainObject(\"\"), false);\n\t});\n\tit(\"Should return false on number\", function () { assert.equal(isPlainObject(123), false); });\n\tit(\"Should return false on NaN\", function () { assert.equal(isPlainObject(NaN), false); });\n\tit(\"Should return false on boolean\", function () { assert.equal(isPlainObject(true), false); });\n\tif (typeof Symbol === \"function\") {\n\t\tit(\"Should return false on symbol\", function () {\n\t\t\tassert.equal(isPlainObject(Symbol(\"foo\")), false);\n\t\t});\n\t}\n\n\tit(\"Should return false on null\", function () { assert.equal(isPlainObject(null), false); });\n\tit(\"Should return false on undefined\", function () {\n\t\tassert.equal(isPlainObject(void 0), false);\n\t});\n});\n"]},"metadata":{},"sourceType":"script"}