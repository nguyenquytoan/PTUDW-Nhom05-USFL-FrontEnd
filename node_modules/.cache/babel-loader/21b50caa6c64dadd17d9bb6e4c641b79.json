{"ast":null,"code":"var Space_Separator = /[\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/,\n    ID_Start = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/,\n    ID_Continue = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF9\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE83\\uDE86-\\uDE99\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/,\n    unicode = {\n  Space_Separator: Space_Separator,\n  ID_Start: ID_Start,\n  ID_Continue: ID_Continue\n},\n    util = {\n  isSpaceSeparator: u => \"string\" == typeof u && unicode.Space_Separator.test(u),\n  isIdStartChar: u => \"string\" == typeof u && (u >= \"a\" && u <= \"z\" || u >= \"A\" && u <= \"Z\" || \"$\" === u || \"_\" === u || unicode.ID_Start.test(u)),\n  isIdContinueChar: u => \"string\" == typeof u && (u >= \"a\" && u <= \"z\" || u >= \"A\" && u <= \"Z\" || u >= \"0\" && u <= \"9\" || \"$\" === u || \"_\" === u || \"‌\" === u || \"‍\" === u || unicode.ID_Continue.test(u)),\n  isDigit: u => \"string\" == typeof u && /[0-9]/.test(u),\n  isHexDigit: u => \"string\" == typeof u && /[0-9A-Fa-f]/.test(u)\n};\nlet source, parseState, stack, pos, line, column, token, key, root;\n\nvar parse = function (u, D) {\n  source = String(u), parseState = \"start\", stack = [], pos = 0, line = 1, column = 0, token = void 0, key = void 0, root = void 0;\n\n  do {\n    token = lex(), parseStates[parseState]();\n  } while (\"eof\" !== token.type);\n\n  return \"function\" == typeof D ? internalize({\n    \"\": root\n  }, \"\", D) : root;\n};\n\nfunction internalize(u, D, e) {\n  const r = u[D];\n  if (null != r && \"object\" == typeof r) for (const u in r) {\n    const D = internalize(r, u, e);\n    void 0 === D ? delete r[u] : r[u] = D;\n  }\n  return e.call(u, D, r);\n}\n\nlet lexState, buffer, doubleQuote, sign, c;\n\nfunction lex() {\n  for (lexState = \"default\", buffer = \"\", doubleQuote = !1, sign = 1;;) {\n    c = peek();\n    const u = lexStates[lexState]();\n    if (u) return u;\n  }\n}\n\nfunction peek() {\n  if (source[pos]) return String.fromCodePoint(source.codePointAt(pos));\n}\n\nfunction read() {\n  const u = peek();\n  return \"\\n\" === u ? (line++, column = 0) : u ? column += u.length : column++, u && (pos += u.length), u;\n}\n\nconst lexStates = {\n  default() {\n    switch (c) {\n      case \"\\t\":\n      case \"\\v\":\n      case \"\\f\":\n      case \" \":\n      case \" \":\n      case \"\\ufeff\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return void read();\n\n      case \"/\":\n        return read(), void (lexState = \"comment\");\n\n      case void 0:\n        return read(), newToken(\"eof\");\n    }\n\n    if (!util.isSpaceSeparator(c)) return lexStates[parseState]();\n    read();\n  },\n\n  comment() {\n    switch (c) {\n      case \"*\":\n        return read(), void (lexState = \"multiLineComment\");\n\n      case \"/\":\n        return read(), void (lexState = \"singleLineComment\");\n    }\n\n    throw invalidChar(read());\n  },\n\n  multiLineComment() {\n    switch (c) {\n      case \"*\":\n        return read(), void (lexState = \"multiLineCommentAsterisk\");\n\n      case void 0:\n        throw invalidChar(read());\n    }\n\n    read();\n  },\n\n  multiLineCommentAsterisk() {\n    switch (c) {\n      case \"*\":\n        return void read();\n\n      case \"/\":\n        return read(), void (lexState = \"default\");\n\n      case void 0:\n        throw invalidChar(read());\n    }\n\n    read(), lexState = \"multiLineComment\";\n  },\n\n  singleLineComment() {\n    switch (c) {\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return read(), void (lexState = \"default\");\n\n      case void 0:\n        return read(), newToken(\"eof\");\n    }\n\n    read();\n  },\n\n  value() {\n    switch (c) {\n      case \"{\":\n      case \"[\":\n        return newToken(\"punctuator\", read());\n\n      case \"n\":\n        return read(), literal(\"ull\"), newToken(\"null\", null);\n\n      case \"t\":\n        return read(), literal(\"rue\"), newToken(\"boolean\", !0);\n\n      case \"f\":\n        return read(), literal(\"alse\"), newToken(\"boolean\", !1);\n\n      case \"-\":\n      case \"+\":\n        return \"-\" === read() && (sign = -1), void (lexState = \"sign\");\n\n      case \".\":\n        return buffer = read(), void (lexState = \"decimalPointLeading\");\n\n      case \"0\":\n        return buffer = read(), void (lexState = \"zero\");\n\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        return buffer = read(), void (lexState = \"decimalInteger\");\n\n      case \"I\":\n        return read(), literal(\"nfinity\"), newToken(\"numeric\", 1 / 0);\n\n      case \"N\":\n        return read(), literal(\"aN\"), newToken(\"numeric\", NaN);\n\n      case '\"':\n      case \"'\":\n        return doubleQuote = '\"' === read(), buffer = \"\", void (lexState = \"string\");\n    }\n\n    throw invalidChar(read());\n  },\n\n  identifierNameStartEscape() {\n    if (\"u\" !== c) throw invalidChar(read());\n    read();\n    const u = unicodeEscape();\n\n    switch (u) {\n      case \"$\":\n      case \"_\":\n        break;\n\n      default:\n        if (!util.isIdStartChar(u)) throw invalidIdentifier();\n    }\n\n    buffer += u, lexState = \"identifierName\";\n  },\n\n  identifierName() {\n    switch (c) {\n      case \"$\":\n      case \"_\":\n      case \"‌\":\n      case \"‍\":\n        return void (buffer += read());\n\n      case \"\\\\\":\n        return read(), void (lexState = \"identifierNameEscape\");\n    }\n\n    if (!util.isIdContinueChar(c)) return newToken(\"identifier\", buffer);\n    buffer += read();\n  },\n\n  identifierNameEscape() {\n    if (\"u\" !== c) throw invalidChar(read());\n    read();\n    const u = unicodeEscape();\n\n    switch (u) {\n      case \"$\":\n      case \"_\":\n      case \"‌\":\n      case \"‍\":\n        break;\n\n      default:\n        if (!util.isIdContinueChar(u)) throw invalidIdentifier();\n    }\n\n    buffer += u, lexState = \"identifierName\";\n  },\n\n  sign() {\n    switch (c) {\n      case \".\":\n        return buffer = read(), void (lexState = \"decimalPointLeading\");\n\n      case \"0\":\n        return buffer = read(), void (lexState = \"zero\");\n\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        return buffer = read(), void (lexState = \"decimalInteger\");\n\n      case \"I\":\n        return read(), literal(\"nfinity\"), newToken(\"numeric\", sign * (1 / 0));\n\n      case \"N\":\n        return read(), literal(\"aN\"), newToken(\"numeric\", NaN);\n    }\n\n    throw invalidChar(read());\n  },\n\n  zero() {\n    switch (c) {\n      case \".\":\n        return buffer += read(), void (lexState = \"decimalPoint\");\n\n      case \"e\":\n      case \"E\":\n        return buffer += read(), void (lexState = \"decimalExponent\");\n\n      case \"x\":\n      case \"X\":\n        return buffer += read(), void (lexState = \"hexadecimal\");\n    }\n\n    return newToken(\"numeric\", 0 * sign);\n  },\n\n  decimalInteger() {\n    switch (c) {\n      case \".\":\n        return buffer += read(), void (lexState = \"decimalPoint\");\n\n      case \"e\":\n      case \"E\":\n        return buffer += read(), void (lexState = \"decimalExponent\");\n    }\n\n    if (!util.isDigit(c)) return newToken(\"numeric\", sign * Number(buffer));\n    buffer += read();\n  },\n\n  decimalPointLeading() {\n    if (util.isDigit(c)) return buffer += read(), void (lexState = \"decimalFraction\");\n    throw invalidChar(read());\n  },\n\n  decimalPoint() {\n    switch (c) {\n      case \"e\":\n      case \"E\":\n        return buffer += read(), void (lexState = \"decimalExponent\");\n    }\n\n    return util.isDigit(c) ? (buffer += read(), void (lexState = \"decimalFraction\")) : newToken(\"numeric\", sign * Number(buffer));\n  },\n\n  decimalFraction() {\n    switch (c) {\n      case \"e\":\n      case \"E\":\n        return buffer += read(), void (lexState = \"decimalExponent\");\n    }\n\n    if (!util.isDigit(c)) return newToken(\"numeric\", sign * Number(buffer));\n    buffer += read();\n  },\n\n  decimalExponent() {\n    switch (c) {\n      case \"+\":\n      case \"-\":\n        return buffer += read(), void (lexState = \"decimalExponentSign\");\n    }\n\n    if (util.isDigit(c)) return buffer += read(), void (lexState = \"decimalExponentInteger\");\n    throw invalidChar(read());\n  },\n\n  decimalExponentSign() {\n    if (util.isDigit(c)) return buffer += read(), void (lexState = \"decimalExponentInteger\");\n    throw invalidChar(read());\n  },\n\n  decimalExponentInteger() {\n    if (!util.isDigit(c)) return newToken(\"numeric\", sign * Number(buffer));\n    buffer += read();\n  },\n\n  hexadecimal() {\n    if (util.isHexDigit(c)) return buffer += read(), void (lexState = \"hexadecimalInteger\");\n    throw invalidChar(read());\n  },\n\n  hexadecimalInteger() {\n    if (!util.isHexDigit(c)) return newToken(\"numeric\", sign * Number(buffer));\n    buffer += read();\n  },\n\n  string() {\n    switch (c) {\n      case \"\\\\\":\n        return read(), void (buffer += escape());\n\n      case '\"':\n        return doubleQuote ? (read(), newToken(\"string\", buffer)) : void (buffer += read());\n\n      case \"'\":\n        return doubleQuote ? void (buffer += read()) : (read(), newToken(\"string\", buffer));\n\n      case \"\\n\":\n      case \"\\r\":\n        throw invalidChar(read());\n\n      case \"\\u2028\":\n      case \"\\u2029\":\n        separatorChar(c);\n        break;\n\n      case void 0:\n        throw invalidChar(read());\n    }\n\n    buffer += read();\n  },\n\n  start() {\n    switch (c) {\n      case \"{\":\n      case \"[\":\n        return newToken(\"punctuator\", read());\n    }\n\n    lexState = \"value\";\n  },\n\n  beforePropertyName() {\n    switch (c) {\n      case \"$\":\n      case \"_\":\n        return buffer = read(), void (lexState = \"identifierName\");\n\n      case \"\\\\\":\n        return read(), void (lexState = \"identifierNameStartEscape\");\n\n      case \"}\":\n        return newToken(\"punctuator\", read());\n\n      case '\"':\n      case \"'\":\n        return doubleQuote = '\"' === read(), void (lexState = \"string\");\n    }\n\n    if (util.isIdStartChar(c)) return buffer += read(), void (lexState = \"identifierName\");\n    throw invalidChar(read());\n  },\n\n  afterPropertyName() {\n    if (\":\" === c) return newToken(\"punctuator\", read());\n    throw invalidChar(read());\n  },\n\n  beforePropertyValue() {\n    lexState = \"value\";\n  },\n\n  afterPropertyValue() {\n    switch (c) {\n      case \",\":\n      case \"}\":\n        return newToken(\"punctuator\", read());\n    }\n\n    throw invalidChar(read());\n  },\n\n  beforeArrayValue() {\n    if (\"]\" === c) return newToken(\"punctuator\", read());\n    lexState = \"value\";\n  },\n\n  afterArrayValue() {\n    switch (c) {\n      case \",\":\n      case \"]\":\n        return newToken(\"punctuator\", read());\n    }\n\n    throw invalidChar(read());\n  },\n\n  end() {\n    throw invalidChar(read());\n  }\n\n};\n\nfunction newToken(u, D) {\n  return {\n    type: u,\n    value: D,\n    line: line,\n    column: column\n  };\n}\n\nfunction literal(u) {\n  for (const D of u) {\n    if (peek() !== D) throw invalidChar(read());\n    read();\n  }\n}\n\nfunction escape() {\n  switch (peek()) {\n    case \"b\":\n      return read(), \"\\b\";\n\n    case \"f\":\n      return read(), \"\\f\";\n\n    case \"n\":\n      return read(), \"\\n\";\n\n    case \"r\":\n      return read(), \"\\r\";\n\n    case \"t\":\n      return read(), \"\\t\";\n\n    case \"v\":\n      return read(), \"\\v\";\n\n    case \"0\":\n      if (read(), util.isDigit(peek())) throw invalidChar(read());\n      return \"\\0\";\n\n    case \"x\":\n      return read(), hexEscape();\n\n    case \"u\":\n      return read(), unicodeEscape();\n\n    case \"\\n\":\n    case \"\\u2028\":\n    case \"\\u2029\":\n      return read(), \"\";\n\n    case \"\\r\":\n      return read(), \"\\n\" === peek() && read(), \"\";\n\n    case \"1\":\n    case \"2\":\n    case \"3\":\n    case \"4\":\n    case \"5\":\n    case \"6\":\n    case \"7\":\n    case \"8\":\n    case \"9\":\n    case void 0:\n      throw invalidChar(read());\n  }\n\n  return read();\n}\n\nfunction hexEscape() {\n  let u = \"\",\n      D = peek();\n  if (!util.isHexDigit(D)) throw invalidChar(read());\n  if (u += read(), D = peek(), !util.isHexDigit(D)) throw invalidChar(read());\n  return u += read(), String.fromCodePoint(parseInt(u, 16));\n}\n\nfunction unicodeEscape() {\n  let u = \"\",\n      D = 4;\n\n  for (; D-- > 0;) {\n    const D = peek();\n    if (!util.isHexDigit(D)) throw invalidChar(read());\n    u += read();\n  }\n\n  return String.fromCodePoint(parseInt(u, 16));\n}\n\nconst parseStates = {\n  start() {\n    if (\"eof\" === token.type) throw invalidEOF();\n    push();\n  },\n\n  beforePropertyName() {\n    switch (token.type) {\n      case \"identifier\":\n      case \"string\":\n        return key = token.value, void (parseState = \"afterPropertyName\");\n\n      case \"punctuator\":\n        return void pop();\n\n      case \"eof\":\n        throw invalidEOF();\n    }\n  },\n\n  afterPropertyName() {\n    if (\"eof\" === token.type) throw invalidEOF();\n    parseState = \"beforePropertyValue\";\n  },\n\n  beforePropertyValue() {\n    if (\"eof\" === token.type) throw invalidEOF();\n    push();\n  },\n\n  beforeArrayValue() {\n    if (\"eof\" === token.type) throw invalidEOF();\n    \"punctuator\" !== token.type || \"]\" !== token.value ? push() : pop();\n  },\n\n  afterPropertyValue() {\n    if (\"eof\" === token.type) throw invalidEOF();\n\n    switch (token.value) {\n      case \",\":\n        return void (parseState = \"beforePropertyName\");\n\n      case \"}\":\n        pop();\n    }\n  },\n\n  afterArrayValue() {\n    if (\"eof\" === token.type) throw invalidEOF();\n\n    switch (token.value) {\n      case \",\":\n        return void (parseState = \"beforeArrayValue\");\n\n      case \"]\":\n        pop();\n    }\n  },\n\n  end() {}\n\n};\n\nfunction push() {\n  let u;\n\n  switch (token.type) {\n    case \"punctuator\":\n      switch (token.value) {\n        case \"{\":\n          u = {};\n          break;\n\n        case \"[\":\n          u = [];\n      }\n\n      break;\n\n    case \"null\":\n    case \"boolean\":\n    case \"numeric\":\n    case \"string\":\n      u = token.value;\n  }\n\n  if (void 0 === root) root = u;else {\n    const D = stack[stack.length - 1];\n    Array.isArray(D) ? D.push(u) : D[key] = u;\n  }\n  if (null !== u && \"object\" == typeof u) stack.push(u), parseState = Array.isArray(u) ? \"beforeArrayValue\" : \"beforePropertyName\";else {\n    const u = stack[stack.length - 1];\n    parseState = null == u ? \"end\" : Array.isArray(u) ? \"afterArrayValue\" : \"afterPropertyValue\";\n  }\n}\n\nfunction pop() {\n  stack.pop();\n  const u = stack[stack.length - 1];\n  parseState = null == u ? \"end\" : Array.isArray(u) ? \"afterArrayValue\" : \"afterPropertyValue\";\n}\n\nfunction invalidChar(u) {\n  return syntaxError(void 0 === u ? `JSON5: invalid end of input at ${line}:${column}` : `JSON5: invalid character '${formatChar(u)}' at ${line}:${column}`);\n}\n\nfunction invalidEOF() {\n  return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);\n}\n\nfunction invalidIdentifier() {\n  return syntaxError(`JSON5: invalid identifier character at ${line}:${column -= 5}`);\n}\n\nfunction separatorChar(u) {\n  console.warn(`JSON5: '${formatChar(u)}' in strings is not valid ECMAScript; consider escaping`);\n}\n\nfunction formatChar(u) {\n  const D = {\n    \"'\": \"\\\\'\",\n    '\"': '\\\\\"',\n    \"\\\\\": \"\\\\\\\\\",\n    \"\\b\": \"\\\\b\",\n    \"\\f\": \"\\\\f\",\n    \"\\n\": \"\\\\n\",\n    \"\\r\": \"\\\\r\",\n    \"\\t\": \"\\\\t\",\n    \"\\v\": \"\\\\v\",\n    \"\\0\": \"\\\\0\",\n    \"\\u2028\": \"\\\\u2028\",\n    \"\\u2029\": \"\\\\u2029\"\n  };\n  if (D[u]) return D[u];\n\n  if (u < \" \") {\n    const D = u.charCodeAt(0).toString(16);\n    return \"\\\\x\" + (\"00\" + D).substring(D.length);\n  }\n\n  return u;\n}\n\nfunction syntaxError(u) {\n  const D = new SyntaxError(u);\n  return D.lineNumber = line, D.columnNumber = column, D;\n}\n\nvar stringify = function (u, D, e) {\n  const r = [];\n  let t,\n      F,\n      C,\n      a = \"\",\n      A = \"\";\n  if (null == D || \"object\" != typeof D || Array.isArray(D) || (e = D.space, C = D.quote, D = D.replacer), \"function\" == typeof D) F = D;else if (Array.isArray(D)) {\n    t = [];\n\n    for (const u of D) {\n      let D;\n      \"string\" == typeof u ? D = u : (\"number\" == typeof u || u instanceof String || u instanceof Number) && (D = String(u)), void 0 !== D && t.indexOf(D) < 0 && t.push(D);\n    }\n  }\n  return e instanceof Number ? e = Number(e) : e instanceof String && (e = String(e)), \"number\" == typeof e ? e > 0 && (e = Math.min(10, Math.floor(e)), A = \"          \".substr(0, e)) : \"string\" == typeof e && (A = e.substr(0, 10)), E(\"\", {\n    \"\": u\n  });\n\n  function E(u, D) {\n    let e = D[u];\n\n    switch (null != e && (\"function\" == typeof e.toJSON5 ? e = e.toJSON5(u) : \"function\" == typeof e.toJSON && (e = e.toJSON(u))), F && (e = F.call(D, u, e)), e instanceof Number ? e = Number(e) : e instanceof String ? e = String(e) : e instanceof Boolean && (e = e.valueOf()), e) {\n      case null:\n        return \"null\";\n\n      case !0:\n        return \"true\";\n\n      case !1:\n        return \"false\";\n    }\n\n    return \"string\" == typeof e ? n(e) : \"number\" == typeof e ? String(e) : \"object\" == typeof e ? Array.isArray(e) ? function (u) {\n      if (r.indexOf(u) >= 0) throw TypeError(\"Converting circular structure to JSON5\");\n      r.push(u);\n      let D = a;\n      a += A;\n      let e,\n          t = [];\n\n      for (let D = 0; D < u.length; D++) {\n        const e = E(String(D), u);\n        t.push(void 0 !== e ? e : \"null\");\n      }\n\n      if (0 === t.length) e = \"[]\";else if (\"\" === A) {\n        let u = t.join(\",\");\n        e = \"[\" + u + \"]\";\n      } else {\n        let u = \",\\n\" + a,\n            r = t.join(u);\n        e = \"[\\n\" + a + r + \",\\n\" + D + \"]\";\n      }\n      return r.pop(), a = D, e;\n    }(e) : function (u) {\n      if (r.indexOf(u) >= 0) throw TypeError(\"Converting circular structure to JSON5\");\n      r.push(u);\n      let D = a;\n      a += A;\n      let e,\n          F = t || Object.keys(u),\n          C = [];\n\n      for (const D of F) {\n        const e = E(D, u);\n\n        if (void 0 !== e) {\n          let u = i(D) + \":\";\n          \"\" !== A && (u += \" \"), u += e, C.push(u);\n        }\n      }\n\n      if (0 === C.length) e = \"{}\";else {\n        let u;\n        if (\"\" === A) u = C.join(\",\"), e = \"{\" + u + \"}\";else {\n          let r = \",\\n\" + a;\n          u = C.join(r), e = \"{\\n\" + a + u + \",\\n\" + D + \"}\";\n        }\n      }\n      return r.pop(), a = D, e;\n    }(e) : void 0;\n  }\n\n  function n(u) {\n    const D = {\n      \"'\": .1,\n      '\"': .2\n    },\n          e = {\n      \"'\": \"\\\\'\",\n      '\"': '\\\\\"',\n      \"\\\\\": \"\\\\\\\\\",\n      \"\\b\": \"\\\\b\",\n      \"\\f\": \"\\\\f\",\n      \"\\n\": \"\\\\n\",\n      \"\\r\": \"\\\\r\",\n      \"\\t\": \"\\\\t\",\n      \"\\v\": \"\\\\v\",\n      \"\\0\": \"\\\\0\",\n      \"\\u2028\": \"\\\\u2028\",\n      \"\\u2029\": \"\\\\u2029\"\n    };\n    let r = \"\";\n\n    for (let t = 0; t < u.length; t++) {\n      const F = u[t];\n\n      switch (F) {\n        case \"'\":\n        case '\"':\n          D[F]++, r += F;\n          continue;\n\n        case \"\\0\":\n          if (util.isDigit(u[t + 1])) {\n            r += \"\\\\x00\";\n            continue;\n          }\n\n      }\n\n      if (e[F]) r += e[F];else if (F < \" \") {\n        let u = F.charCodeAt(0).toString(16);\n        r += \"\\\\x\" + (\"00\" + u).substring(u.length);\n      } else r += F;\n    }\n\n    const t = C || Object.keys(D).reduce((u, e) => D[u] < D[e] ? u : e);\n    return t + (r = r.replace(new RegExp(t, \"g\"), e[t])) + t;\n  }\n\n  function i(u) {\n    if (0 === u.length) return n(u);\n    const D = String.fromCodePoint(u.codePointAt(0));\n    if (!util.isIdStartChar(D)) return n(u);\n\n    for (let e = D.length; e < u.length; e++) if (!util.isIdContinueChar(String.fromCodePoint(u.codePointAt(e)))) return n(u);\n\n    return u;\n  }\n};\n\nconst JSON5 = {\n  parse: parse,\n  stringify: stringify\n};\nvar lib = JSON5;\nexport default lib;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/json5/dist/index.min.mjs"],"names":["Space_Separator","ID_Start","ID_Continue","unicode","util","isSpaceSeparator","u","test","isIdStartChar","isIdContinueChar","isDigit","isHexDigit","source","parseState","stack","pos","line","column","token","key","root","parse","D","String","lex","parseStates","type","internalize","e","r","call","lexState","buffer","doubleQuote","sign","c","peek","lexStates","fromCodePoint","codePointAt","read","length","default","newToken","comment","invalidChar","multiLineComment","multiLineCommentAsterisk","singleLineComment","value","literal","NaN","identifierNameStartEscape","unicodeEscape","invalidIdentifier","identifierName","identifierNameEscape","zero","decimalInteger","Number","decimalPointLeading","decimalPoint","decimalFraction","decimalExponent","decimalExponentSign","decimalExponentInteger","hexadecimal","hexadecimalInteger","string","escape","separatorChar","start","beforePropertyName","afterPropertyName","beforePropertyValue","afterPropertyValue","beforeArrayValue","afterArrayValue","end","hexEscape","parseInt","invalidEOF","push","pop","Array","isArray","syntaxError","formatChar","console","warn","charCodeAt","toString","substring","SyntaxError","lineNumber","columnNumber","stringify","t","F","C","a","A","space","quote","replacer","indexOf","Math","min","floor","substr","E","toJSON5","toJSON","Boolean","valueOf","n","TypeError","join","Object","keys","i","reduce","replace","RegExp","JSON5","lib"],"mappings":"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","sourcesContent":["var Space_Separator=/[\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/,ID_Start=/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/,ID_Continue=/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF9\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE83\\uDE86-\\uDE99\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/,unicode={Space_Separator:Space_Separator,ID_Start:ID_Start,ID_Continue:ID_Continue},util={isSpaceSeparator:u=>\"string\"==typeof u&&unicode.Space_Separator.test(u),isIdStartChar:u=>\"string\"==typeof u&&(u>=\"a\"&&u<=\"z\"||u>=\"A\"&&u<=\"Z\"||\"$\"===u||\"_\"===u||unicode.ID_Start.test(u)),isIdContinueChar:u=>\"string\"==typeof u&&(u>=\"a\"&&u<=\"z\"||u>=\"A\"&&u<=\"Z\"||u>=\"0\"&&u<=\"9\"||\"$\"===u||\"_\"===u||\"‌\"===u||\"‍\"===u||unicode.ID_Continue.test(u)),isDigit:u=>\"string\"==typeof u&&/[0-9]/.test(u),isHexDigit:u=>\"string\"==typeof u&&/[0-9A-Fa-f]/.test(u)};let source,parseState,stack,pos,line,column,token,key,root;var parse=function(u,D){source=String(u),parseState=\"start\",stack=[],pos=0,line=1,column=0,token=void 0,key=void 0,root=void 0;do{token=lex(),parseStates[parseState]()}while(\"eof\"!==token.type);return\"function\"==typeof D?internalize({\"\":root},\"\",D):root};function internalize(u,D,e){const r=u[D];if(null!=r&&\"object\"==typeof r)for(const u in r){const D=internalize(r,u,e);void 0===D?delete r[u]:r[u]=D}return e.call(u,D,r)}let lexState,buffer,doubleQuote,sign,c;function lex(){for(lexState=\"default\",buffer=\"\",doubleQuote=!1,sign=1;;){c=peek();const u=lexStates[lexState]();if(u)return u}}function peek(){if(source[pos])return String.fromCodePoint(source.codePointAt(pos))}function read(){const u=peek();return\"\\n\"===u?(line++,column=0):u?column+=u.length:column++,u&&(pos+=u.length),u}const lexStates={default(){switch(c){case\"\\t\":case\"\\v\":case\"\\f\":case\" \":case\" \":case\"\\ufeff\":case\"\\n\":case\"\\r\":case\"\\u2028\":case\"\\u2029\":return void read();case\"/\":return read(),void(lexState=\"comment\");case void 0:return read(),newToken(\"eof\")}if(!util.isSpaceSeparator(c))return lexStates[parseState]();read()},comment(){switch(c){case\"*\":return read(),void(lexState=\"multiLineComment\");case\"/\":return read(),void(lexState=\"singleLineComment\")}throw invalidChar(read())},multiLineComment(){switch(c){case\"*\":return read(),void(lexState=\"multiLineCommentAsterisk\");case void 0:throw invalidChar(read())}read()},multiLineCommentAsterisk(){switch(c){case\"*\":return void read();case\"/\":return read(),void(lexState=\"default\");case void 0:throw invalidChar(read())}read(),lexState=\"multiLineComment\"},singleLineComment(){switch(c){case\"\\n\":case\"\\r\":case\"\\u2028\":case\"\\u2029\":return read(),void(lexState=\"default\");case void 0:return read(),newToken(\"eof\")}read()},value(){switch(c){case\"{\":case\"[\":return newToken(\"punctuator\",read());case\"n\":return read(),literal(\"ull\"),newToken(\"null\",null);case\"t\":return read(),literal(\"rue\"),newToken(\"boolean\",!0);case\"f\":return read(),literal(\"alse\"),newToken(\"boolean\",!1);case\"-\":case\"+\":return\"-\"===read()&&(sign=-1),void(lexState=\"sign\");case\".\":return buffer=read(),void(lexState=\"decimalPointLeading\");case\"0\":return buffer=read(),void(lexState=\"zero\");case\"1\":case\"2\":case\"3\":case\"4\":case\"5\":case\"6\":case\"7\":case\"8\":case\"9\":return buffer=read(),void(lexState=\"decimalInteger\");case\"I\":return read(),literal(\"nfinity\"),newToken(\"numeric\",1/0);case\"N\":return read(),literal(\"aN\"),newToken(\"numeric\",NaN);case'\"':case\"'\":return doubleQuote='\"'===read(),buffer=\"\",void(lexState=\"string\")}throw invalidChar(read())},identifierNameStartEscape(){if(\"u\"!==c)throw invalidChar(read());read();const u=unicodeEscape();switch(u){case\"$\":case\"_\":break;default:if(!util.isIdStartChar(u))throw invalidIdentifier()}buffer+=u,lexState=\"identifierName\"},identifierName(){switch(c){case\"$\":case\"_\":case\"‌\":case\"‍\":return void(buffer+=read());case\"\\\\\":return read(),void(lexState=\"identifierNameEscape\")}if(!util.isIdContinueChar(c))return newToken(\"identifier\",buffer);buffer+=read()},identifierNameEscape(){if(\"u\"!==c)throw invalidChar(read());read();const u=unicodeEscape();switch(u){case\"$\":case\"_\":case\"‌\":case\"‍\":break;default:if(!util.isIdContinueChar(u))throw invalidIdentifier()}buffer+=u,lexState=\"identifierName\"},sign(){switch(c){case\".\":return buffer=read(),void(lexState=\"decimalPointLeading\");case\"0\":return buffer=read(),void(lexState=\"zero\");case\"1\":case\"2\":case\"3\":case\"4\":case\"5\":case\"6\":case\"7\":case\"8\":case\"9\":return buffer=read(),void(lexState=\"decimalInteger\");case\"I\":return read(),literal(\"nfinity\"),newToken(\"numeric\",sign*(1/0));case\"N\":return read(),literal(\"aN\"),newToken(\"numeric\",NaN)}throw invalidChar(read())},zero(){switch(c){case\".\":return buffer+=read(),void(lexState=\"decimalPoint\");case\"e\":case\"E\":return buffer+=read(),void(lexState=\"decimalExponent\");case\"x\":case\"X\":return buffer+=read(),void(lexState=\"hexadecimal\")}return newToken(\"numeric\",0*sign)},decimalInteger(){switch(c){case\".\":return buffer+=read(),void(lexState=\"decimalPoint\");case\"e\":case\"E\":return buffer+=read(),void(lexState=\"decimalExponent\")}if(!util.isDigit(c))return newToken(\"numeric\",sign*Number(buffer));buffer+=read()},decimalPointLeading(){if(util.isDigit(c))return buffer+=read(),void(lexState=\"decimalFraction\");throw invalidChar(read())},decimalPoint(){switch(c){case\"e\":case\"E\":return buffer+=read(),void(lexState=\"decimalExponent\")}return util.isDigit(c)?(buffer+=read(),void(lexState=\"decimalFraction\")):newToken(\"numeric\",sign*Number(buffer))},decimalFraction(){switch(c){case\"e\":case\"E\":return buffer+=read(),void(lexState=\"decimalExponent\")}if(!util.isDigit(c))return newToken(\"numeric\",sign*Number(buffer));buffer+=read()},decimalExponent(){switch(c){case\"+\":case\"-\":return buffer+=read(),void(lexState=\"decimalExponentSign\")}if(util.isDigit(c))return buffer+=read(),void(lexState=\"decimalExponentInteger\");throw invalidChar(read())},decimalExponentSign(){if(util.isDigit(c))return buffer+=read(),void(lexState=\"decimalExponentInteger\");throw invalidChar(read())},decimalExponentInteger(){if(!util.isDigit(c))return newToken(\"numeric\",sign*Number(buffer));buffer+=read()},hexadecimal(){if(util.isHexDigit(c))return buffer+=read(),void(lexState=\"hexadecimalInteger\");throw invalidChar(read())},hexadecimalInteger(){if(!util.isHexDigit(c))return newToken(\"numeric\",sign*Number(buffer));buffer+=read()},string(){switch(c){case\"\\\\\":return read(),void(buffer+=escape());case'\"':return doubleQuote?(read(),newToken(\"string\",buffer)):void(buffer+=read());case\"'\":return doubleQuote?void(buffer+=read()):(read(),newToken(\"string\",buffer));case\"\\n\":case\"\\r\":throw invalidChar(read());case\"\\u2028\":case\"\\u2029\":separatorChar(c);break;case void 0:throw invalidChar(read())}buffer+=read()},start(){switch(c){case\"{\":case\"[\":return newToken(\"punctuator\",read())}lexState=\"value\"},beforePropertyName(){switch(c){case\"$\":case\"_\":return buffer=read(),void(lexState=\"identifierName\");case\"\\\\\":return read(),void(lexState=\"identifierNameStartEscape\");case\"}\":return newToken(\"punctuator\",read());case'\"':case\"'\":return doubleQuote='\"'===read(),void(lexState=\"string\")}if(util.isIdStartChar(c))return buffer+=read(),void(lexState=\"identifierName\");throw invalidChar(read())},afterPropertyName(){if(\":\"===c)return newToken(\"punctuator\",read());throw invalidChar(read())},beforePropertyValue(){lexState=\"value\"},afterPropertyValue(){switch(c){case\",\":case\"}\":return newToken(\"punctuator\",read())}throw invalidChar(read())},beforeArrayValue(){if(\"]\"===c)return newToken(\"punctuator\",read());lexState=\"value\"},afterArrayValue(){switch(c){case\",\":case\"]\":return newToken(\"punctuator\",read())}throw invalidChar(read())},end(){throw invalidChar(read())}};function newToken(u,D){return{type:u,value:D,line:line,column:column}}function literal(u){for(const D of u){if(peek()!==D)throw invalidChar(read());read()}}function escape(){switch(peek()){case\"b\":return read(),\"\\b\";case\"f\":return read(),\"\\f\";case\"n\":return read(),\"\\n\";case\"r\":return read(),\"\\r\";case\"t\":return read(),\"\\t\";case\"v\":return read(),\"\\v\";case\"0\":if(read(),util.isDigit(peek()))throw invalidChar(read());return\"\\0\";case\"x\":return read(),hexEscape();case\"u\":return read(),unicodeEscape();case\"\\n\":case\"\\u2028\":case\"\\u2029\":return read(),\"\";case\"\\r\":return read(),\"\\n\"===peek()&&read(),\"\";case\"1\":case\"2\":case\"3\":case\"4\":case\"5\":case\"6\":case\"7\":case\"8\":case\"9\":case void 0:throw invalidChar(read())}return read()}function hexEscape(){let u=\"\",D=peek();if(!util.isHexDigit(D))throw invalidChar(read());if(u+=read(),D=peek(),!util.isHexDigit(D))throw invalidChar(read());return u+=read(),String.fromCodePoint(parseInt(u,16))}function unicodeEscape(){let u=\"\",D=4;for(;D-- >0;){const D=peek();if(!util.isHexDigit(D))throw invalidChar(read());u+=read()}return String.fromCodePoint(parseInt(u,16))}const parseStates={start(){if(\"eof\"===token.type)throw invalidEOF();push()},beforePropertyName(){switch(token.type){case\"identifier\":case\"string\":return key=token.value,void(parseState=\"afterPropertyName\");case\"punctuator\":return void pop();case\"eof\":throw invalidEOF()}},afterPropertyName(){if(\"eof\"===token.type)throw invalidEOF();parseState=\"beforePropertyValue\"},beforePropertyValue(){if(\"eof\"===token.type)throw invalidEOF();push()},beforeArrayValue(){if(\"eof\"===token.type)throw invalidEOF();\"punctuator\"!==token.type||\"]\"!==token.value?push():pop()},afterPropertyValue(){if(\"eof\"===token.type)throw invalidEOF();switch(token.value){case\",\":return void(parseState=\"beforePropertyName\");case\"}\":pop()}},afterArrayValue(){if(\"eof\"===token.type)throw invalidEOF();switch(token.value){case\",\":return void(parseState=\"beforeArrayValue\");case\"]\":pop()}},end(){}};function push(){let u;switch(token.type){case\"punctuator\":switch(token.value){case\"{\":u={};break;case\"[\":u=[]}break;case\"null\":case\"boolean\":case\"numeric\":case\"string\":u=token.value}if(void 0===root)root=u;else{const D=stack[stack.length-1];Array.isArray(D)?D.push(u):D[key]=u}if(null!==u&&\"object\"==typeof u)stack.push(u),parseState=Array.isArray(u)?\"beforeArrayValue\":\"beforePropertyName\";else{const u=stack[stack.length-1];parseState=null==u?\"end\":Array.isArray(u)?\"afterArrayValue\":\"afterPropertyValue\"}}function pop(){stack.pop();const u=stack[stack.length-1];parseState=null==u?\"end\":Array.isArray(u)?\"afterArrayValue\":\"afterPropertyValue\"}function invalidChar(u){return syntaxError(void 0===u?`JSON5: invalid end of input at ${line}:${column}`:`JSON5: invalid character '${formatChar(u)}' at ${line}:${column}`)}function invalidEOF(){return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)}function invalidIdentifier(){return syntaxError(`JSON5: invalid identifier character at ${line}:${column-=5}`)}function separatorChar(u){console.warn(`JSON5: '${formatChar(u)}' in strings is not valid ECMAScript; consider escaping`)}function formatChar(u){const D={\"'\":\"\\\\'\",'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\",\"\\b\":\"\\\\b\",\"\\f\":\"\\\\f\",\"\\n\":\"\\\\n\",\"\\r\":\"\\\\r\",\"\\t\":\"\\\\t\",\"\\v\":\"\\\\v\",\"\\0\":\"\\\\0\",\"\\u2028\":\"\\\\u2028\",\"\\u2029\":\"\\\\u2029\"};if(D[u])return D[u];if(u<\" \"){const D=u.charCodeAt(0).toString(16);return\"\\\\x\"+(\"00\"+D).substring(D.length)}return u}function syntaxError(u){const D=new SyntaxError(u);return D.lineNumber=line,D.columnNumber=column,D}var stringify=function(u,D,e){const r=[];let t,F,C,a=\"\",A=\"\";if(null==D||\"object\"!=typeof D||Array.isArray(D)||(e=D.space,C=D.quote,D=D.replacer),\"function\"==typeof D)F=D;else if(Array.isArray(D)){t=[];for(const u of D){let D;\"string\"==typeof u?D=u:(\"number\"==typeof u||u instanceof String||u instanceof Number)&&(D=String(u)),void 0!==D&&t.indexOf(D)<0&&t.push(D)}}return e instanceof Number?e=Number(e):e instanceof String&&(e=String(e)),\"number\"==typeof e?e>0&&(e=Math.min(10,Math.floor(e)),A=\"          \".substr(0,e)):\"string\"==typeof e&&(A=e.substr(0,10)),E(\"\",{\"\":u});function E(u,D){let e=D[u];switch(null!=e&&(\"function\"==typeof e.toJSON5?e=e.toJSON5(u):\"function\"==typeof e.toJSON&&(e=e.toJSON(u))),F&&(e=F.call(D,u,e)),e instanceof Number?e=Number(e):e instanceof String?e=String(e):e instanceof Boolean&&(e=e.valueOf()),e){case null:return\"null\";case!0:return\"true\";case!1:return\"false\"}return\"string\"==typeof e?n(e):\"number\"==typeof e?String(e):\"object\"==typeof e?Array.isArray(e)?function(u){if(r.indexOf(u)>=0)throw TypeError(\"Converting circular structure to JSON5\");r.push(u);let D=a;a+=A;let e,t=[];for(let D=0;D<u.length;D++){const e=E(String(D),u);t.push(void 0!==e?e:\"null\")}if(0===t.length)e=\"[]\";else if(\"\"===A){let u=t.join(\",\");e=\"[\"+u+\"]\"}else{let u=\",\\n\"+a,r=t.join(u);e=\"[\\n\"+a+r+\",\\n\"+D+\"]\"}return r.pop(),a=D,e}(e):function(u){if(r.indexOf(u)>=0)throw TypeError(\"Converting circular structure to JSON5\");r.push(u);let D=a;a+=A;let e,F=t||Object.keys(u),C=[];for(const D of F){const e=E(D,u);if(void 0!==e){let u=i(D)+\":\";\"\"!==A&&(u+=\" \"),u+=e,C.push(u)}}if(0===C.length)e=\"{}\";else{let u;if(\"\"===A)u=C.join(\",\"),e=\"{\"+u+\"}\";else{let r=\",\\n\"+a;u=C.join(r),e=\"{\\n\"+a+u+\",\\n\"+D+\"}\"}}return r.pop(),a=D,e}(e):void 0}function n(u){const D={\"'\":.1,'\"':.2},e={\"'\":\"\\\\'\",'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\",\"\\b\":\"\\\\b\",\"\\f\":\"\\\\f\",\"\\n\":\"\\\\n\",\"\\r\":\"\\\\r\",\"\\t\":\"\\\\t\",\"\\v\":\"\\\\v\",\"\\0\":\"\\\\0\",\"\\u2028\":\"\\\\u2028\",\"\\u2029\":\"\\\\u2029\"};let r=\"\";for(let t=0;t<u.length;t++){const F=u[t];switch(F){case\"'\":case'\"':D[F]++,r+=F;continue;case\"\\0\":if(util.isDigit(u[t+1])){r+=\"\\\\x00\";continue}}if(e[F])r+=e[F];else if(F<\" \"){let u=F.charCodeAt(0).toString(16);r+=\"\\\\x\"+(\"00\"+u).substring(u.length)}else r+=F}const t=C||Object.keys(D).reduce((u,e)=>D[u]<D[e]?u:e);return t+(r=r.replace(new RegExp(t,\"g\"),e[t]))+t}function i(u){if(0===u.length)return n(u);const D=String.fromCodePoint(u.codePointAt(0));if(!util.isIdStartChar(D))return n(u);for(let e=D.length;e<u.length;e++)if(!util.isIdContinueChar(String.fromCodePoint(u.codePointAt(e))))return n(u);return u}};const JSON5={parse:parse,stringify:stringify};var lib=JSON5;export default lib;\n"]},"metadata":{},"sourceType":"module"}