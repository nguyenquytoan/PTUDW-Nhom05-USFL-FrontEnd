{"ast":null,"code":"var tape = require('tape');\n\nvar vectors = require('hash-test-vectors'); // var from = require('bops/typedarray/from')\n\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar createHash = require('../');\n\nfunction makeTest(alg, i, verbose) {\n  var v = vectors[i];\n  tape(alg + ': NIST vector ' + i, function (t) {\n    if (verbose) {\n      console.log(v);\n      console.log('VECTOR', i);\n      console.log('INPUT', v.input);\n      console.log(Buffer.from(v.input, 'base64').toString('hex'));\n    }\n\n    var buf = Buffer.from(v.input, 'base64');\n    t.equal(createHash(alg).update(buf).digest('hex'), v[alg]);\n    i = ~~(buf.length / 2);\n    var buf1 = buf.slice(0, i);\n    var buf2 = buf.slice(i, buf.length);\n    console.log(buf1.length, buf2.length, buf.length);\n    console.log(createHash(alg)._block.length);\n    t.equal(createHash(alg).update(buf1).update(buf2).digest('hex'), v[alg]);\n    var j, buf3;\n    i = ~~(buf.length / 3);\n    j = ~~(buf.length * 2 / 3);\n    buf1 = buf.slice(0, i);\n    buf2 = buf.slice(i, j);\n    buf3 = buf.slice(j, buf.length);\n    t.equal(createHash(alg).update(buf1).update(buf2).update(buf3).digest('hex'), v[alg]);\n    setTimeout(function () {\n      // avoid \"too much recursion\" errors in tape in firefox\n      t.end();\n    });\n  });\n}\n\nif (process.argv[2]) {\n  makeTest(process.argv[2], parseInt(process.argv[3], 10), true);\n} else {\n  vectors.forEach(function (v, i) {\n    makeTest('sha', i);\n    makeTest('sha1', i);\n    makeTest('sha224', i);\n    makeTest('sha256', i);\n    makeTest('sha384', i);\n    makeTest('sha512', i);\n  });\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/sha.js/test/vectors.js"],"names":["tape","require","vectors","Buffer","createHash","makeTest","alg","i","verbose","v","t","console","log","input","from","toString","buf","equal","update","digest","length","buf1","slice","buf2","_block","j","buf3","setTimeout","end","process","argv","parseInt","forEach"],"mappings":"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","sourcesContent":["var tape = require('tape')\nvar vectors = require('hash-test-vectors')\n// var from = require('bops/typedarray/from')\nvar Buffer = require('safe-buffer').Buffer\n\nvar createHash = require('../')\n\nfunction makeTest (alg, i, verbose) {\n  var v = vectors[i]\n\n  tape(alg + ': NIST vector ' + i, function (t) {\n    if (verbose) {\n      console.log(v)\n      console.log('VECTOR', i)\n      console.log('INPUT', v.input)\n      console.log(Buffer.from(v.input, 'base64').toString('hex'))\n    }\n\n    var buf = Buffer.from(v.input, 'base64')\n    t.equal(createHash(alg).update(buf).digest('hex'), v[alg])\n\n    i = ~~(buf.length / 2)\n    var buf1 = buf.slice(0, i)\n    var buf2 = buf.slice(i, buf.length)\n\n    console.log(buf1.length, buf2.length, buf.length)\n    console.log(createHash(alg)._block.length)\n\n    t.equal(\n      createHash(alg)\n        .update(buf1)\n        .update(buf2)\n        .digest('hex'),\n      v[alg]\n    )\n\n    var j, buf3\n\n    i = ~~(buf.length / 3)\n    j = ~~(buf.length * 2 / 3)\n    buf1 = buf.slice(0, i)\n    buf2 = buf.slice(i, j)\n    buf3 = buf.slice(j, buf.length)\n\n    t.equal(\n      createHash(alg)\n        .update(buf1)\n        .update(buf2)\n        .update(buf3)\n        .digest('hex'),\n      v[alg]\n    )\n\n    setTimeout(function () {\n      // avoid \"too much recursion\" errors in tape in firefox\n      t.end()\n    })\n  })\n}\n\nif (process.argv[2]) {\n  makeTest(process.argv[2], parseInt(process.argv[3], 10), true)\n} else {\n  vectors.forEach(function (v, i) {\n    makeTest('sha', i)\n    makeTest('sha1', i)\n    makeTest('sha224', i)\n    makeTest('sha256', i)\n    makeTest('sha384', i)\n    makeTest('sha512', i)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}