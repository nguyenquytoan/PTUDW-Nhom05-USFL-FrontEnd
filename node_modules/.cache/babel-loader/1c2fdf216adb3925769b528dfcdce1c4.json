{"ast":null,"code":"var common = require('../common');\n\nvar assert = common.assert;\n\nvar retry = require(common.dir.lib + '/retry');\n\n(function testDefaultValues() {\n  var timeouts = retry.timeouts();\n  assert.equal(timeouts.length, 10);\n  assert.equal(timeouts[0], 1000);\n  assert.equal(timeouts[1], 2000);\n  assert.equal(timeouts[2], 4000);\n})();\n\n(function testDefaultValuesWithRandomize() {\n  var minTimeout = 5000;\n  var timeouts = retry.timeouts({\n    minTimeout: minTimeout,\n    randomize: true\n  });\n  assert.equal(timeouts.length, 10);\n  assert.ok(timeouts[0] > minTimeout);\n  assert.ok(timeouts[1] > timeouts[0]);\n  assert.ok(timeouts[2] > timeouts[1]);\n})();\n\n(function testPassedTimeoutsAreUsed() {\n  var timeoutsArray = [1000, 2000, 3000];\n  var timeouts = retry.timeouts(timeoutsArray);\n  assert.deepEqual(timeouts, timeoutsArray);\n  assert.notStrictEqual(timeouts, timeoutsArray);\n})();\n\n(function testTimeoutsAreWithinBoundaries() {\n  var minTimeout = 1000;\n  var maxTimeout = 10000;\n  var timeouts = retry.timeouts({\n    minTimeout: minTimeout,\n    maxTimeout: maxTimeout\n  });\n\n  for (var i = 0; i < timeouts; i++) {\n    assert.ok(timeouts[i] >= minTimeout);\n    assert.ok(timeouts[i] <= maxTimeout);\n  }\n})();\n\n(function testTimeoutsAreIncremental() {\n  var timeouts = retry.timeouts();\n  var lastTimeout = timeouts[0];\n\n  for (var i = 0; i < timeouts; i++) {\n    assert.ok(timeouts[i] > lastTimeout);\n    lastTimeout = timeouts[i];\n  }\n})();\n\n(function testTimeoutsAreIncrementalForFactorsLessThanOne() {\n  var timeouts = retry.timeouts({\n    retries: 3,\n    factor: 0.5\n  });\n  var expected = [250, 500, 1000];\n  assert.deepEqual(expected, timeouts);\n})();\n\n(function testRetries() {\n  var timeouts = retry.timeouts({\n    retries: 2\n  });\n  assert.strictEqual(timeouts.length, 2);\n})();","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/retry/test/integration/test-timeouts.js"],"names":["common","require","assert","retry","dir","lib","testDefaultValues","timeouts","equal","length","testDefaultValuesWithRandomize","minTimeout","randomize","ok","testPassedTimeoutsAreUsed","timeoutsArray","deepEqual","notStrictEqual","testTimeoutsAreWithinBoundaries","maxTimeout","i","testTimeoutsAreIncremental","lastTimeout","testTimeoutsAreIncrementalForFactorsLessThanOne","retries","factor","expected","testRetries","strictEqual"],"mappings":"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","sourcesContent":["var common = require('../common');\nvar assert = common.assert;\nvar retry = require(common.dir.lib + '/retry');\n\n(function testDefaultValues() {\n  var timeouts = retry.timeouts();\n\n  assert.equal(timeouts.length, 10);\n  assert.equal(timeouts[0], 1000);\n  assert.equal(timeouts[1], 2000);\n  assert.equal(timeouts[2], 4000);\n})();\n\n(function testDefaultValuesWithRandomize() {\n  var minTimeout = 5000;\n  var timeouts = retry.timeouts({\n    minTimeout: minTimeout,\n    randomize: true\n  });\n\n  assert.equal(timeouts.length, 10);\n  assert.ok(timeouts[0] > minTimeout);\n  assert.ok(timeouts[1] > timeouts[0]);\n  assert.ok(timeouts[2] > timeouts[1]);\n})();\n\n(function testPassedTimeoutsAreUsed() {\n  var timeoutsArray = [1000, 2000, 3000];\n  var timeouts = retry.timeouts(timeoutsArray);\n  assert.deepEqual(timeouts, timeoutsArray);\n  assert.notStrictEqual(timeouts, timeoutsArray);\n})();\n\n(function testTimeoutsAreWithinBoundaries() {\n  var minTimeout = 1000;\n  var maxTimeout = 10000;\n  var timeouts = retry.timeouts({\n    minTimeout: minTimeout,\n    maxTimeout: maxTimeout\n  });\n  for (var i = 0; i < timeouts; i++) {\n    assert.ok(timeouts[i] >= minTimeout);\n    assert.ok(timeouts[i] <= maxTimeout);\n  }\n})();\n\n(function testTimeoutsAreIncremental() {\n  var timeouts = retry.timeouts();\n  var lastTimeout = timeouts[0];\n  for (var i = 0; i < timeouts; i++) {\n    assert.ok(timeouts[i] > lastTimeout);\n    lastTimeout = timeouts[i];\n  }\n})();\n\n(function testTimeoutsAreIncrementalForFactorsLessThanOne() {\n  var timeouts = retry.timeouts({\n    retries: 3,\n    factor: 0.5\n  });\n\n  var expected = [250, 500, 1000];\n  assert.deepEqual(expected, timeouts);\n})();\n\n(function testRetries() {\n  var timeouts = retry.timeouts({retries: 2});\n  assert.strictEqual(timeouts.length, 2);\n})();\n"]},"metadata":{},"sourceType":"script"}