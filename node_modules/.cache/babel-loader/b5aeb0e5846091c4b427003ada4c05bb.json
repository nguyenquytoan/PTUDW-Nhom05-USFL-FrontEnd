{"ast":null,"code":"'use strict';\n\nconst preserveCamelCase = input => {\n  let isLastCharLower = false;\n  let isLastCharUpper = false;\n  let isLastLastCharUpper = false;\n\n  for (let i = 0; i < input.length; i++) {\n    const c = input[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(c) && c.toUpperCase() === c) {\n      input = input.slice(0, i) + '-' + input.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(c) && c.toLowerCase() === c) {\n      input = input.slice(0, i - 1) + '-' + input.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = c.toLowerCase() === c;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = c.toUpperCase() === c;\n    }\n  }\n\n  return input;\n};\n\nmodule.exports = (input, options) => {\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  const postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n  if (Array.isArray(input)) {\n    input = input.map(x => x.trim()).filter(x => x.length).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  if (/^[a-z\\d]+$/.test(input)) {\n    return postProcess(input);\n  }\n\n  const hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n  return postProcess(input);\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/adjust-sourcemap-loader/node_modules/camelcase/index.js"],"names":["preserveCamelCase","input","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","length","c","test","toUpperCase","slice","toLowerCase","module","exports","options","Object","assign","pascalCase","postProcess","x","charAt","Array","isArray","map","trim","filter","join","hasUpperCase","replace","m","p1"],"mappings":"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","sourcesContent":["'use strict';\n\nconst preserveCamelCase = input => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < input.length; i++) {\n\t\tconst c = input[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(c) && c.toUpperCase() === c) {\n\t\t\tinput = input.slice(0, i) + '-' + input.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(c) && c.toLowerCase() === c) {\n\t\t\tinput = input.slice(0, i - 1) + '-' + input.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = c.toLowerCase() === c;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = c.toUpperCase() === c;\n\t\t}\n\t}\n\n\treturn input;\n};\n\nmodule.exports = (input, options) => {\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tif (/^[a-z\\d]+$/.test(input)) {\n\t\treturn postProcess(input);\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n\n\treturn postProcess(input);\n};\n"]},"metadata":{},"sourceType":"script"}