{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (number, unit, {\n  time,\n  length,\n  angle\n}) {\n  let value = dropLeadingZero(number) + (unit ? unit : '');\n  let converted;\n\n  if (length !== false && unit.toLowerCase() in lengthConv) {\n    converted = transform(number, unit, lengthConv);\n  }\n\n  if (time !== false && unit.toLowerCase() in timeConv) {\n    converted = transform(number, unit, timeConv);\n  }\n\n  if (angle !== false && unit.toLowerCase() in angleConv) {\n    converted = transform(number, unit, angleConv);\n  }\n\n  if (converted && converted.length < value.length) {\n    value = converted;\n  }\n\n  return value;\n};\n\nconst lengthConv = {\n  in: 96,\n  px: 1,\n  pt: 4 / 3,\n  pc: 16\n};\nconst timeConv = {\n  s: 1000,\n  ms: 1\n};\nconst angleConv = {\n  turn: 360,\n  deg: 1\n};\n\nfunction dropLeadingZero(number) {\n  const value = String(number);\n\n  if (number % 1) {\n    if (value[0] === '0') {\n      return value.slice(1);\n    }\n\n    if (value[0] === '-' && value[1] === '0') {\n      return '-' + value.slice(2);\n    }\n  }\n\n  return value;\n}\n\nfunction transform(number, unit, conversion) {\n  const lowerCasedUnit = unit.toLowerCase();\n  let one, base;\n  let convertionUnits = Object.keys(conversion).filter(u => {\n    if (conversion[u] === 1) {\n      one = u;\n    }\n\n    return lowerCasedUnit !== u;\n  });\n\n  if (lowerCasedUnit === one) {\n    base = number / conversion[lowerCasedUnit];\n  } else {\n    base = number * conversion[lowerCasedUnit];\n  }\n\n  return convertionUnits.map(u => dropLeadingZero(base / conversion[u]) + u).reduce((a, b) => a.length < b.length ? a : b);\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-convert-values/dist/lib/convert.js"],"names":["Object","defineProperty","exports","value","default","number","unit","time","length","angle","dropLeadingZero","converted","toLowerCase","lengthConv","transform","timeConv","angleConv","in","px","pt","pc","s","ms","turn","deg","String","slice","conversion","lowerCasedUnit","one","base","convertionUnits","keys","filter","u","map","reduce","a","b","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (number, unit, { time, length, angle }) {\n    let value = dropLeadingZero(number) + (unit ? unit : '');\n    let converted;\n\n    if (length !== false && unit.toLowerCase() in lengthConv) {\n        converted = transform(number, unit, lengthConv);\n    }\n\n    if (time !== false && unit.toLowerCase() in timeConv) {\n        converted = transform(number, unit, timeConv);\n    }\n\n    if (angle !== false && unit.toLowerCase() in angleConv) {\n        converted = transform(number, unit, angleConv);\n    }\n\n    if (converted && converted.length < value.length) {\n        value = converted;\n    }\n\n    return value;\n};\n\nconst lengthConv = {\n    in: 96,\n    px: 1,\n    pt: 4 / 3,\n    pc: 16\n};\n\nconst timeConv = {\n    s: 1000,\n    ms: 1\n};\n\nconst angleConv = {\n    turn: 360,\n    deg: 1\n};\n\nfunction dropLeadingZero(number) {\n    const value = String(number);\n\n    if (number % 1) {\n        if (value[0] === '0') {\n            return value.slice(1);\n        }\n\n        if (value[0] === '-' && value[1] === '0') {\n            return '-' + value.slice(2);\n        }\n    }\n\n    return value;\n}\n\nfunction transform(number, unit, conversion) {\n    const lowerCasedUnit = unit.toLowerCase();\n    let one, base;\n    let convertionUnits = Object.keys(conversion).filter(u => {\n        if (conversion[u] === 1) {\n            one = u;\n        }\n        return lowerCasedUnit !== u;\n    });\n\n    if (lowerCasedUnit === one) {\n        base = number / conversion[lowerCasedUnit];\n    } else {\n        base = number * conversion[lowerCasedUnit];\n    }\n\n    return convertionUnits.map(u => dropLeadingZero(base / conversion[u]) + u).reduce((a, b) => a.length < b.length ? a : b);\n}\n\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}