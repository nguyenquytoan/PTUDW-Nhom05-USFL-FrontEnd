{"ast":null,"code":"// This is a generated file. Do not edit.\nvar Space_Separator = /[\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\nvar ID_Start = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\nvar ID_Continue = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF9\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE83\\uDE86-\\uDE99\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/;\nvar unicode = {\n  Space_Separator: Space_Separator,\n  ID_Start: ID_Start,\n  ID_Continue: ID_Continue\n};\nvar util = {\n  isSpaceSeparator(c) {\n    return typeof c === 'string' && unicode.Space_Separator.test(c);\n  },\n\n  isIdStartChar(c) {\n    return typeof c === 'string' && (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c === '$' || c === '_' || unicode.ID_Start.test(c));\n  },\n\n  isIdContinueChar(c) {\n    return typeof c === 'string' && (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9' || c === '$' || c === '_' || c === '\\u200C' || c === '\\u200D' || unicode.ID_Continue.test(c));\n  },\n\n  isDigit(c) {\n    return typeof c === 'string' && /[0-9]/.test(c);\n  },\n\n  isHexDigit(c) {\n    return typeof c === 'string' && /[0-9A-Fa-f]/.test(c);\n  }\n\n};\nlet source;\nlet parseState;\nlet stack;\nlet pos;\nlet line;\nlet column;\nlet token;\nlet key;\nlet root;\n\nvar parse = function parse(text, reviver) {\n  source = String(text);\n  parseState = 'start';\n  stack = [];\n  pos = 0;\n  line = 1;\n  column = 0;\n  token = undefined;\n  key = undefined;\n  root = undefined;\n\n  do {\n    token = lex(); // This code is unreachable.\n    // if (!parseStates[parseState]) {\n    //     throw invalidParseState()\n    // }\n\n    parseStates[parseState]();\n  } while (token.type !== 'eof');\n\n  if (typeof reviver === 'function') {\n    return internalize({\n      '': root\n    }, '', reviver);\n  }\n\n  return root;\n};\n\nfunction internalize(holder, name, reviver) {\n  const value = holder[name];\n\n  if (value != null && typeof value === 'object') {\n    for (const key in value) {\n      const replacement = internalize(value, key, reviver);\n\n      if (replacement === undefined) {\n        delete value[key];\n      } else {\n        value[key] = replacement;\n      }\n    }\n  }\n\n  return reviver.call(holder, name, value);\n}\n\nlet lexState;\nlet buffer;\nlet doubleQuote;\nlet sign;\nlet c;\n\nfunction lex() {\n  lexState = 'default';\n  buffer = '';\n  doubleQuote = false;\n  sign = 1;\n\n  for (;;) {\n    c = peek(); // This code is unreachable.\n    // if (!lexStates[lexState]) {\n    //     throw invalidLexState(lexState)\n    // }\n\n    const token = lexStates[lexState]();\n\n    if (token) {\n      return token;\n    }\n  }\n}\n\nfunction peek() {\n  if (source[pos]) {\n    return String.fromCodePoint(source.codePointAt(pos));\n  }\n}\n\nfunction read() {\n  const c = peek();\n\n  if (c === '\\n') {\n    line++;\n    column = 0;\n  } else if (c) {\n    column += c.length;\n  } else {\n    column++;\n  }\n\n  if (c) {\n    pos += c.length;\n  }\n\n  return c;\n}\n\nconst lexStates = {\n  default() {\n    switch (c) {\n      case '\\t':\n      case '\\v':\n      case '\\f':\n      case ' ':\n      case '\\u00A0':\n      case '\\uFEFF':\n      case '\\n':\n      case '\\r':\n      case '\\u2028':\n      case '\\u2029':\n        read();\n        return;\n\n      case '/':\n        read();\n        lexState = 'comment';\n        return;\n\n      case undefined:\n        read();\n        return newToken('eof');\n    }\n\n    if (util.isSpaceSeparator(c)) {\n      read();\n      return;\n    } // This code is unreachable.\n    // if (!lexStates[parseState]) {\n    //     throw invalidLexState(parseState)\n    // }\n\n\n    return lexStates[parseState]();\n  },\n\n  comment() {\n    switch (c) {\n      case '*':\n        read();\n        lexState = 'multiLineComment';\n        return;\n\n      case '/':\n        read();\n        lexState = 'singleLineComment';\n        return;\n    }\n\n    throw invalidChar(read());\n  },\n\n  multiLineComment() {\n    switch (c) {\n      case '*':\n        read();\n        lexState = 'multiLineCommentAsterisk';\n        return;\n\n      case undefined:\n        throw invalidChar(read());\n    }\n\n    read();\n  },\n\n  multiLineCommentAsterisk() {\n    switch (c) {\n      case '*':\n        read();\n        return;\n\n      case '/':\n        read();\n        lexState = 'default';\n        return;\n\n      case undefined:\n        throw invalidChar(read());\n    }\n\n    read();\n    lexState = 'multiLineComment';\n  },\n\n  singleLineComment() {\n    switch (c) {\n      case '\\n':\n      case '\\r':\n      case '\\u2028':\n      case '\\u2029':\n        read();\n        lexState = 'default';\n        return;\n\n      case undefined:\n        read();\n        return newToken('eof');\n    }\n\n    read();\n  },\n\n  value() {\n    switch (c) {\n      case '{':\n      case '[':\n        return newToken('punctuator', read());\n\n      case 'n':\n        read();\n        literal('ull');\n        return newToken('null', null);\n\n      case 't':\n        read();\n        literal('rue');\n        return newToken('boolean', true);\n\n      case 'f':\n        read();\n        literal('alse');\n        return newToken('boolean', false);\n\n      case '-':\n      case '+':\n        if (read() === '-') {\n          sign = -1;\n        }\n\n        lexState = 'sign';\n        return;\n\n      case '.':\n        buffer = read();\n        lexState = 'decimalPointLeading';\n        return;\n\n      case '0':\n        buffer = read();\n        lexState = 'zero';\n        return;\n\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        buffer = read();\n        lexState = 'decimalInteger';\n        return;\n\n      case 'I':\n        read();\n        literal('nfinity');\n        return newToken('numeric', Infinity);\n\n      case 'N':\n        read();\n        literal('aN');\n        return newToken('numeric', NaN);\n\n      case '\"':\n      case \"'\":\n        doubleQuote = read() === '\"';\n        buffer = '';\n        lexState = 'string';\n        return;\n    }\n\n    throw invalidChar(read());\n  },\n\n  identifierNameStartEscape() {\n    if (c !== 'u') {\n      throw invalidChar(read());\n    }\n\n    read();\n    const u = unicodeEscape();\n\n    switch (u) {\n      case '$':\n      case '_':\n        break;\n\n      default:\n        if (!util.isIdStartChar(u)) {\n          throw invalidIdentifier();\n        }\n\n        break;\n    }\n\n    buffer += u;\n    lexState = 'identifierName';\n  },\n\n  identifierName() {\n    switch (c) {\n      case '$':\n      case '_':\n      case '\\u200C':\n      case '\\u200D':\n        buffer += read();\n        return;\n\n      case '\\\\':\n        read();\n        lexState = 'identifierNameEscape';\n        return;\n    }\n\n    if (util.isIdContinueChar(c)) {\n      buffer += read();\n      return;\n    }\n\n    return newToken('identifier', buffer);\n  },\n\n  identifierNameEscape() {\n    if (c !== 'u') {\n      throw invalidChar(read());\n    }\n\n    read();\n    const u = unicodeEscape();\n\n    switch (u) {\n      case '$':\n      case '_':\n      case '\\u200C':\n      case '\\u200D':\n        break;\n\n      default:\n        if (!util.isIdContinueChar(u)) {\n          throw invalidIdentifier();\n        }\n\n        break;\n    }\n\n    buffer += u;\n    lexState = 'identifierName';\n  },\n\n  sign() {\n    switch (c) {\n      case '.':\n        buffer = read();\n        lexState = 'decimalPointLeading';\n        return;\n\n      case '0':\n        buffer = read();\n        lexState = 'zero';\n        return;\n\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        buffer = read();\n        lexState = 'decimalInteger';\n        return;\n\n      case 'I':\n        read();\n        literal('nfinity');\n        return newToken('numeric', sign * Infinity);\n\n      case 'N':\n        read();\n        literal('aN');\n        return newToken('numeric', NaN);\n    }\n\n    throw invalidChar(read());\n  },\n\n  zero() {\n    switch (c) {\n      case '.':\n        buffer += read();\n        lexState = 'decimalPoint';\n        return;\n\n      case 'e':\n      case 'E':\n        buffer += read();\n        lexState = 'decimalExponent';\n        return;\n\n      case 'x':\n      case 'X':\n        buffer += read();\n        lexState = 'hexadecimal';\n        return;\n    }\n\n    return newToken('numeric', sign * 0);\n  },\n\n  decimalInteger() {\n    switch (c) {\n      case '.':\n        buffer += read();\n        lexState = 'decimalPoint';\n        return;\n\n      case 'e':\n      case 'E':\n        buffer += read();\n        lexState = 'decimalExponent';\n        return;\n    }\n\n    if (util.isDigit(c)) {\n      buffer += read();\n      return;\n    }\n\n    return newToken('numeric', sign * Number(buffer));\n  },\n\n  decimalPointLeading() {\n    if (util.isDigit(c)) {\n      buffer += read();\n      lexState = 'decimalFraction';\n      return;\n    }\n\n    throw invalidChar(read());\n  },\n\n  decimalPoint() {\n    switch (c) {\n      case 'e':\n      case 'E':\n        buffer += read();\n        lexState = 'decimalExponent';\n        return;\n    }\n\n    if (util.isDigit(c)) {\n      buffer += read();\n      lexState = 'decimalFraction';\n      return;\n    }\n\n    return newToken('numeric', sign * Number(buffer));\n  },\n\n  decimalFraction() {\n    switch (c) {\n      case 'e':\n      case 'E':\n        buffer += read();\n        lexState = 'decimalExponent';\n        return;\n    }\n\n    if (util.isDigit(c)) {\n      buffer += read();\n      return;\n    }\n\n    return newToken('numeric', sign * Number(buffer));\n  },\n\n  decimalExponent() {\n    switch (c) {\n      case '+':\n      case '-':\n        buffer += read();\n        lexState = 'decimalExponentSign';\n        return;\n    }\n\n    if (util.isDigit(c)) {\n      buffer += read();\n      lexState = 'decimalExponentInteger';\n      return;\n    }\n\n    throw invalidChar(read());\n  },\n\n  decimalExponentSign() {\n    if (util.isDigit(c)) {\n      buffer += read();\n      lexState = 'decimalExponentInteger';\n      return;\n    }\n\n    throw invalidChar(read());\n  },\n\n  decimalExponentInteger() {\n    if (util.isDigit(c)) {\n      buffer += read();\n      return;\n    }\n\n    return newToken('numeric', sign * Number(buffer));\n  },\n\n  hexadecimal() {\n    if (util.isHexDigit(c)) {\n      buffer += read();\n      lexState = 'hexadecimalInteger';\n      return;\n    }\n\n    throw invalidChar(read());\n  },\n\n  hexadecimalInteger() {\n    if (util.isHexDigit(c)) {\n      buffer += read();\n      return;\n    }\n\n    return newToken('numeric', sign * Number(buffer));\n  },\n\n  string() {\n    switch (c) {\n      case '\\\\':\n        read();\n        buffer += escape();\n        return;\n\n      case '\"':\n        if (doubleQuote) {\n          read();\n          return newToken('string', buffer);\n        }\n\n        buffer += read();\n        return;\n\n      case \"'\":\n        if (!doubleQuote) {\n          read();\n          return newToken('string', buffer);\n        }\n\n        buffer += read();\n        return;\n\n      case '\\n':\n      case '\\r':\n        throw invalidChar(read());\n\n      case '\\u2028':\n      case '\\u2029':\n        separatorChar(c);\n        break;\n\n      case undefined:\n        throw invalidChar(read());\n    }\n\n    buffer += read();\n  },\n\n  start() {\n    switch (c) {\n      case '{':\n      case '[':\n        return newToken('punctuator', read());\n      // This code is unreachable since the default lexState handles eof.\n      // case undefined:\n      //     return newToken('eof')\n    }\n\n    lexState = 'value';\n  },\n\n  beforePropertyName() {\n    switch (c) {\n      case '$':\n      case '_':\n        buffer = read();\n        lexState = 'identifierName';\n        return;\n\n      case '\\\\':\n        read();\n        lexState = 'identifierNameStartEscape';\n        return;\n\n      case '}':\n        return newToken('punctuator', read());\n\n      case '\"':\n      case \"'\":\n        doubleQuote = read() === '\"';\n        lexState = 'string';\n        return;\n    }\n\n    if (util.isIdStartChar(c)) {\n      buffer += read();\n      lexState = 'identifierName';\n      return;\n    }\n\n    throw invalidChar(read());\n  },\n\n  afterPropertyName() {\n    if (c === ':') {\n      return newToken('punctuator', read());\n    }\n\n    throw invalidChar(read());\n  },\n\n  beforePropertyValue() {\n    lexState = 'value';\n  },\n\n  afterPropertyValue() {\n    switch (c) {\n      case ',':\n      case '}':\n        return newToken('punctuator', read());\n    }\n\n    throw invalidChar(read());\n  },\n\n  beforeArrayValue() {\n    if (c === ']') {\n      return newToken('punctuator', read());\n    }\n\n    lexState = 'value';\n  },\n\n  afterArrayValue() {\n    switch (c) {\n      case ',':\n      case ']':\n        return newToken('punctuator', read());\n    }\n\n    throw invalidChar(read());\n  },\n\n  end() {\n    // This code is unreachable since it's handled by the default lexState.\n    // if (c === undefined) {\n    //     read()\n    //     return newToken('eof')\n    // }\n    throw invalidChar(read());\n  }\n\n};\n\nfunction newToken(type, value) {\n  return {\n    type,\n    value,\n    line,\n    column\n  };\n}\n\nfunction literal(s) {\n  for (const c of s) {\n    const p = peek();\n\n    if (p !== c) {\n      throw invalidChar(read());\n    }\n\n    read();\n  }\n}\n\nfunction escape() {\n  const c = peek();\n\n  switch (c) {\n    case 'b':\n      read();\n      return '\\b';\n\n    case 'f':\n      read();\n      return '\\f';\n\n    case 'n':\n      read();\n      return '\\n';\n\n    case 'r':\n      read();\n      return '\\r';\n\n    case 't':\n      read();\n      return '\\t';\n\n    case 'v':\n      read();\n      return '\\v';\n\n    case '0':\n      read();\n\n      if (util.isDigit(peek())) {\n        throw invalidChar(read());\n      }\n\n      return '\\0';\n\n    case 'x':\n      read();\n      return hexEscape();\n\n    case 'u':\n      read();\n      return unicodeEscape();\n\n    case '\\n':\n    case '\\u2028':\n    case '\\u2029':\n      read();\n      return '';\n\n    case '\\r':\n      read();\n\n      if (peek() === '\\n') {\n        read();\n      }\n\n      return '';\n\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n      throw invalidChar(read());\n\n    case undefined:\n      throw invalidChar(read());\n  }\n\n  return read();\n}\n\nfunction hexEscape() {\n  let buffer = '';\n  let c = peek();\n\n  if (!util.isHexDigit(c)) {\n    throw invalidChar(read());\n  }\n\n  buffer += read();\n  c = peek();\n\n  if (!util.isHexDigit(c)) {\n    throw invalidChar(read());\n  }\n\n  buffer += read();\n  return String.fromCodePoint(parseInt(buffer, 16));\n}\n\nfunction unicodeEscape() {\n  let buffer = '';\n  let count = 4;\n\n  while (count-- > 0) {\n    const c = peek();\n\n    if (!util.isHexDigit(c)) {\n      throw invalidChar(read());\n    }\n\n    buffer += read();\n  }\n\n  return String.fromCodePoint(parseInt(buffer, 16));\n}\n\nconst parseStates = {\n  start() {\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n\n    push();\n  },\n\n  beforePropertyName() {\n    switch (token.type) {\n      case 'identifier':\n      case 'string':\n        key = token.value;\n        parseState = 'afterPropertyName';\n        return;\n\n      case 'punctuator':\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.value !== '}') {\n        //     throw invalidToken()\n        // }\n        pop();\n        return;\n\n      case 'eof':\n        throw invalidEOF();\n    } // This code is unreachable since it's handled by the lexState.\n    // throw invalidToken()\n\n  },\n\n  afterPropertyName() {\n    // This code is unreachable since it's handled by the lexState.\n    // if (token.type !== 'punctuator' || token.value !== ':') {\n    //     throw invalidToken()\n    // }\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n\n    parseState = 'beforePropertyValue';\n  },\n\n  beforePropertyValue() {\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n\n    push();\n  },\n\n  beforeArrayValue() {\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n\n    if (token.type === 'punctuator' && token.value === ']') {\n      pop();\n      return;\n    }\n\n    push();\n  },\n\n  afterPropertyValue() {\n    // This code is unreachable since it's handled by the lexState.\n    // if (token.type !== 'punctuator') {\n    //     throw invalidToken()\n    // }\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n\n    switch (token.value) {\n      case ',':\n        parseState = 'beforePropertyName';\n        return;\n\n      case '}':\n        pop();\n    } // This code is unreachable since it's handled by the lexState.\n    // throw invalidToken()\n\n  },\n\n  afterArrayValue() {\n    // This code is unreachable since it's handled by the lexState.\n    // if (token.type !== 'punctuator') {\n    //     throw invalidToken()\n    // }\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n\n    switch (token.value) {\n      case ',':\n        parseState = 'beforeArrayValue';\n        return;\n\n      case ']':\n        pop();\n    } // This code is unreachable since it's handled by the lexState.\n    // throw invalidToken()\n\n  },\n\n  end() {// This code is unreachable since it's handled by the lexState.\n    // if (token.type !== 'eof') {\n    //     throw invalidToken()\n    // }\n  }\n\n};\n\nfunction push() {\n  let value;\n\n  switch (token.type) {\n    case 'punctuator':\n      switch (token.value) {\n        case '{':\n          value = {};\n          break;\n\n        case '[':\n          value = [];\n          break;\n      }\n\n      break;\n\n    case 'null':\n    case 'boolean':\n    case 'numeric':\n    case 'string':\n      value = token.value;\n      break;\n    // This code is unreachable.\n    // default:\n    //     throw invalidToken()\n  }\n\n  if (root === undefined) {\n    root = value;\n  } else {\n    const parent = stack[stack.length - 1];\n\n    if (Array.isArray(parent)) {\n      parent.push(value);\n    } else {\n      parent[key] = value;\n    }\n  }\n\n  if (value !== null && typeof value === 'object') {\n    stack.push(value);\n\n    if (Array.isArray(value)) {\n      parseState = 'beforeArrayValue';\n    } else {\n      parseState = 'beforePropertyName';\n    }\n  } else {\n    const current = stack[stack.length - 1];\n\n    if (current == null) {\n      parseState = 'end';\n    } else if (Array.isArray(current)) {\n      parseState = 'afterArrayValue';\n    } else {\n      parseState = 'afterPropertyValue';\n    }\n  }\n}\n\nfunction pop() {\n  stack.pop();\n  const current = stack[stack.length - 1];\n\n  if (current == null) {\n    parseState = 'end';\n  } else if (Array.isArray(current)) {\n    parseState = 'afterArrayValue';\n  } else {\n    parseState = 'afterPropertyValue';\n  }\n} // This code is unreachable.\n// function invalidParseState () {\n//     return new Error(`JSON5: invalid parse state '${parseState}'`)\n// }\n// This code is unreachable.\n// function invalidLexState (state) {\n//     return new Error(`JSON5: invalid lex state '${state}'`)\n// }\n\n\nfunction invalidChar(c) {\n  if (c === undefined) {\n    return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);\n  }\n\n  return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`);\n}\n\nfunction invalidEOF() {\n  return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);\n} // This code is unreachable.\n// function invalidToken () {\n//     if (token.type === 'eof') {\n//         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n//     }\n//     const c = String.fromCodePoint(token.value.codePointAt(0))\n//     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)\n// }\n\n\nfunction invalidIdentifier() {\n  column -= 5;\n  return syntaxError(`JSON5: invalid identifier character at ${line}:${column}`);\n}\n\nfunction separatorChar(c) {\n  console.warn(`JSON5: '${formatChar(c)}' in strings is not valid ECMAScript; consider escaping`);\n}\n\nfunction formatChar(c) {\n  const replacements = {\n    \"'\": \"\\\\'\",\n    '\"': '\\\\\"',\n    '\\\\': '\\\\\\\\',\n    '\\b': '\\\\b',\n    '\\f': '\\\\f',\n    '\\n': '\\\\n',\n    '\\r': '\\\\r',\n    '\\t': '\\\\t',\n    '\\v': '\\\\v',\n    '\\0': '\\\\0',\n    '\\u2028': '\\\\u2028',\n    '\\u2029': '\\\\u2029'\n  };\n\n  if (replacements[c]) {\n    return replacements[c];\n  }\n\n  if (c < ' ') {\n    const hexString = c.charCodeAt(0).toString(16);\n    return '\\\\x' + ('00' + hexString).substring(hexString.length);\n  }\n\n  return c;\n}\n\nfunction syntaxError(message) {\n  const err = new SyntaxError(message);\n  err.lineNumber = line;\n  err.columnNumber = column;\n  return err;\n}\n\nvar stringify = function stringify(value, replacer, space) {\n  const stack = [];\n  let indent = '';\n  let propertyList;\n  let replacerFunc;\n  let gap = '';\n  let quote;\n\n  if (replacer != null && typeof replacer === 'object' && !Array.isArray(replacer)) {\n    space = replacer.space;\n    quote = replacer.quote;\n    replacer = replacer.replacer;\n  }\n\n  if (typeof replacer === 'function') {\n    replacerFunc = replacer;\n  } else if (Array.isArray(replacer)) {\n    propertyList = [];\n\n    for (const v of replacer) {\n      let item;\n\n      if (typeof v === 'string') {\n        item = v;\n      } else if (typeof v === 'number' || v instanceof String || v instanceof Number) {\n        item = String(v);\n      }\n\n      if (item !== undefined && propertyList.indexOf(item) < 0) {\n        propertyList.push(item);\n      }\n    }\n  }\n\n  if (space instanceof Number) {\n    space = Number(space);\n  } else if (space instanceof String) {\n    space = String(space);\n  }\n\n  if (typeof space === 'number') {\n    if (space > 0) {\n      space = Math.min(10, Math.floor(space));\n      gap = '          '.substr(0, space);\n    }\n  } else if (typeof space === 'string') {\n    gap = space.substr(0, 10);\n  }\n\n  return serializeProperty('', {\n    '': value\n  });\n\n  function serializeProperty(key, holder) {\n    let value = holder[key];\n\n    if (value != null) {\n      if (typeof value.toJSON5 === 'function') {\n        value = value.toJSON5(key);\n      } else if (typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n      }\n    }\n\n    if (replacerFunc) {\n      value = replacerFunc.call(holder, key, value);\n    }\n\n    if (value instanceof Number) {\n      value = Number(value);\n    } else if (value instanceof String) {\n      value = String(value);\n    } else if (value instanceof Boolean) {\n      value = value.valueOf();\n    }\n\n    switch (value) {\n      case null:\n        return 'null';\n\n      case true:\n        return 'true';\n\n      case false:\n        return 'false';\n    }\n\n    if (typeof value === 'string') {\n      return quoteString(value, false);\n    }\n\n    if (typeof value === 'number') {\n      return String(value);\n    }\n\n    if (typeof value === 'object') {\n      return Array.isArray(value) ? serializeArray(value) : serializeObject(value);\n    }\n\n    return undefined;\n  }\n\n  function quoteString(value) {\n    const quotes = {\n      \"'\": 0.1,\n      '\"': 0.2\n    };\n    const replacements = {\n      \"'\": \"\\\\'\",\n      '\"': '\\\\\"',\n      '\\\\': '\\\\\\\\',\n      '\\b': '\\\\b',\n      '\\f': '\\\\f',\n      '\\n': '\\\\n',\n      '\\r': '\\\\r',\n      '\\t': '\\\\t',\n      '\\v': '\\\\v',\n      '\\0': '\\\\0',\n      '\\u2028': '\\\\u2028',\n      '\\u2029': '\\\\u2029'\n    };\n    let product = '';\n\n    for (let i = 0; i < value.length; i++) {\n      const c = value[i];\n\n      switch (c) {\n        case \"'\":\n        case '\"':\n          quotes[c]++;\n          product += c;\n          continue;\n\n        case '\\0':\n          if (util.isDigit(value[i + 1])) {\n            product += '\\\\x00';\n            continue;\n          }\n\n      }\n\n      if (replacements[c]) {\n        product += replacements[c];\n        continue;\n      }\n\n      if (c < ' ') {\n        let hexString = c.charCodeAt(0).toString(16);\n        product += '\\\\x' + ('00' + hexString).substring(hexString.length);\n        continue;\n      }\n\n      product += c;\n    }\n\n    const quoteChar = quote || Object.keys(quotes).reduce((a, b) => quotes[a] < quotes[b] ? a : b);\n    product = product.replace(new RegExp(quoteChar, 'g'), replacements[quoteChar]);\n    return quoteChar + product + quoteChar;\n  }\n\n  function serializeObject(value) {\n    if (stack.indexOf(value) >= 0) {\n      throw TypeError('Converting circular structure to JSON5');\n    }\n\n    stack.push(value);\n    let stepback = indent;\n    indent = indent + gap;\n    let keys = propertyList || Object.keys(value);\n    let partial = [];\n\n    for (const key of keys) {\n      const propertyString = serializeProperty(key, value);\n\n      if (propertyString !== undefined) {\n        let member = serializeKey(key) + ':';\n\n        if (gap !== '') {\n          member += ' ';\n        }\n\n        member += propertyString;\n        partial.push(member);\n      }\n    }\n\n    let final;\n\n    if (partial.length === 0) {\n      final = '{}';\n    } else {\n      let properties;\n\n      if (gap === '') {\n        properties = partial.join(',');\n        final = '{' + properties + '}';\n      } else {\n        let separator = ',\\n' + indent;\n        properties = partial.join(separator);\n        final = '{\\n' + indent + properties + ',\\n' + stepback + '}';\n      }\n    }\n\n    stack.pop();\n    indent = stepback;\n    return final;\n  }\n\n  function serializeKey(key) {\n    if (key.length === 0) {\n      return quoteString(key, true);\n    }\n\n    const firstChar = String.fromCodePoint(key.codePointAt(0));\n\n    if (!util.isIdStartChar(firstChar)) {\n      return quoteString(key, true);\n    }\n\n    for (let i = firstChar.length; i < key.length; i++) {\n      if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {\n        return quoteString(key, true);\n      }\n    }\n\n    return key;\n  }\n\n  function serializeArray(value) {\n    if (stack.indexOf(value) >= 0) {\n      throw TypeError('Converting circular structure to JSON5');\n    }\n\n    stack.push(value);\n    let stepback = indent;\n    indent = indent + gap;\n    let partial = [];\n\n    for (let i = 0; i < value.length; i++) {\n      const propertyString = serializeProperty(String(i), value);\n      partial.push(propertyString !== undefined ? propertyString : 'null');\n    }\n\n    let final;\n\n    if (partial.length === 0) {\n      final = '[]';\n    } else {\n      if (gap === '') {\n        let properties = partial.join(',');\n        final = '[' + properties + ']';\n      } else {\n        let separator = ',\\n' + indent;\n        let properties = partial.join(separator);\n        final = '[\\n' + indent + properties + ',\\n' + stepback + ']';\n      }\n    }\n\n    stack.pop();\n    indent = stepback;\n    return final;\n  }\n};\n\nconst JSON5 = {\n  parse,\n  stringify\n};\nvar lib = JSON5;\nexport default lib;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/json5/dist/index.mjs"],"names":["Space_Separator","ID_Start","ID_Continue","unicode","util","isSpaceSeparator","c","test","isIdStartChar","isIdContinueChar","isDigit","isHexDigit","source","parseState","stack","pos","line","column","token","key","root","parse","text","reviver","String","undefined","lex","parseStates","type","internalize","holder","name","value","replacement","call","lexState","buffer","doubleQuote","sign","peek","lexStates","fromCodePoint","codePointAt","read","length","default","newToken","comment","invalidChar","multiLineComment","multiLineCommentAsterisk","singleLineComment","literal","Infinity","NaN","identifierNameStartEscape","u","unicodeEscape","invalidIdentifier","identifierName","identifierNameEscape","zero","decimalInteger","Number","decimalPointLeading","decimalPoint","decimalFraction","decimalExponent","decimalExponentSign","decimalExponentInteger","hexadecimal","hexadecimalInteger","string","escape","separatorChar","start","beforePropertyName","afterPropertyName","beforePropertyValue","afterPropertyValue","beforeArrayValue","afterArrayValue","end","s","p","hexEscape","parseInt","count","invalidEOF","push","pop","parent","Array","isArray","current","syntaxError","formatChar","console","warn","replacements","hexString","charCodeAt","toString","substring","message","err","SyntaxError","lineNumber","columnNumber","stringify","replacer","space","indent","propertyList","replacerFunc","gap","quote","v","item","indexOf","Math","min","floor","substr","serializeProperty","toJSON5","toJSON","Boolean","valueOf","quoteString","serializeArray","serializeObject","quotes","product","i","quoteChar","Object","keys","reduce","a","b","replace","RegExp","TypeError","stepback","partial","propertyString","member","serializeKey","final","properties","join","separator","firstChar","JSON5","lib"],"mappings":"AAAA;AACA,IAAIA,eAAe,GAAG,yCAAtB;AACA,IAAIC,QAAQ,GAAG,q7NAAf;AACA,IAAIC,WAAW,GAAG,o2QAAlB;AAEA,IAAIC,OAAO,GAAG;AACbH,EAAAA,eAAe,EAAEA,eADJ;AAEbC,EAAAA,QAAQ,EAAEA,QAFG;AAGbC,EAAAA,WAAW,EAAEA;AAHA,CAAd;AAMA,IAAIE,IAAI,GAAG;AACPC,EAAAA,gBAAgB,CAAEC,CAAF,EAAK;AACjB,WAAO,OAAOA,CAAP,KAAa,QAAb,IAAyBH,OAAO,CAACH,eAAR,CAAwBO,IAAxB,CAA6BD,CAA7B,CAAhC;AACH,GAHM;;AAKPE,EAAAA,aAAa,CAAEF,CAAF,EAAK;AACd,WAAO,OAAOA,CAAP,KAAa,QAAb,KACFA,CAAC,IAAI,GAAL,IAAYA,CAAC,IAAI,GAAlB,IACHA,CAAC,IAAI,GAAL,IAAYA,CAAC,IAAI,GADd,IAEHA,CAAC,KAAK,GAFH,IAEYA,CAAC,KAAK,GAFlB,IAGJH,OAAO,CAACF,QAAR,CAAiBM,IAAjB,CAAsBD,CAAtB,CAJO,CAAP;AAMH,GAZM;;AAcPG,EAAAA,gBAAgB,CAAEH,CAAF,EAAK;AACjB,WAAO,OAAOA,CAAP,KAAa,QAAb,KACFA,CAAC,IAAI,GAAL,IAAYA,CAAC,IAAI,GAAlB,IACHA,CAAC,IAAI,GAAL,IAAYA,CAAC,IAAI,GADd,IAEHA,CAAC,IAAI,GAAL,IAAYA,CAAC,IAAI,GAFd,IAGHA,CAAC,KAAK,GAHH,IAGYA,CAAC,KAAK,GAHlB,IAIHA,CAAC,KAAK,QAJH,IAIiBA,CAAC,KAAK,QAJvB,IAKJH,OAAO,CAACD,WAAR,CAAoBK,IAApB,CAAyBD,CAAzB,CANO,CAAP;AAQH,GAvBM;;AAyBPI,EAAAA,OAAO,CAAEJ,CAAF,EAAK;AACR,WAAO,OAAOA,CAAP,KAAa,QAAb,IAAyB,QAAQC,IAAR,CAAaD,CAAb,CAAhC;AACH,GA3BM;;AA6BPK,EAAAA,UAAU,CAAEL,CAAF,EAAK;AACX,WAAO,OAAOA,CAAP,KAAa,QAAb,IAAyB,cAAcC,IAAd,CAAmBD,CAAnB,CAAhC;AACH;;AA/BM,CAAX;AAkCA,IAAIM,MAAJ;AACA,IAAIC,UAAJ;AACA,IAAIC,KAAJ;AACA,IAAIC,GAAJ;AACA,IAAIC,IAAJ;AACA,IAAIC,MAAJ;AACA,IAAIC,KAAJ;AACA,IAAIC,GAAJ;AACA,IAAIC,IAAJ;;AAEA,IAAIC,KAAK,GAAG,SAASA,KAAT,CAAgBC,IAAhB,EAAsBC,OAAtB,EAA+B;AACvCX,EAAAA,MAAM,GAAGY,MAAM,CAACF,IAAD,CAAf;AACAT,EAAAA,UAAU,GAAG,OAAb;AACAC,EAAAA,KAAK,GAAG,EAAR;AACAC,EAAAA,GAAG,GAAG,CAAN;AACAC,EAAAA,IAAI,GAAG,CAAP;AACAC,EAAAA,MAAM,GAAG,CAAT;AACAC,EAAAA,KAAK,GAAGO,SAAR;AACAN,EAAAA,GAAG,GAAGM,SAAN;AACAL,EAAAA,IAAI,GAAGK,SAAP;;AAEA,KAAG;AACCP,IAAAA,KAAK,GAAGQ,GAAG,EAAX,CADD,CAGC;AACA;AACA;AACA;;AAEAC,IAAAA,WAAW,CAACd,UAAD,CAAX;AACH,GATD,QASSK,KAAK,CAACU,IAAN,KAAe,KATxB;;AAWA,MAAI,OAAOL,OAAP,KAAmB,UAAvB,EAAmC;AAC/B,WAAOM,WAAW,CAAC;AAAC,UAAIT;AAAL,KAAD,EAAa,EAAb,EAAiBG,OAAjB,CAAlB;AACH;;AAED,SAAOH,IAAP;AACH,CA3BD;;AA6BA,SAASS,WAAT,CAAsBC,MAAtB,EAA8BC,IAA9B,EAAoCR,OAApC,EAA6C;AACzC,QAAMS,KAAK,GAAGF,MAAM,CAACC,IAAD,CAApB;;AACA,MAAIC,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,QAAtC,EAAgD;AAC5C,SAAK,MAAMb,GAAX,IAAkBa,KAAlB,EAAyB;AACrB,YAAMC,WAAW,GAAGJ,WAAW,CAACG,KAAD,EAAQb,GAAR,EAAaI,OAAb,CAA/B;;AACA,UAAIU,WAAW,KAAKR,SAApB,EAA+B;AAC3B,eAAOO,KAAK,CAACb,GAAD,CAAZ;AACH,OAFD,MAEO;AACHa,QAAAA,KAAK,CAACb,GAAD,CAAL,GAAac,WAAb;AACH;AACJ;AACJ;;AAED,SAAOV,OAAO,CAACW,IAAR,CAAaJ,MAAb,EAAqBC,IAArB,EAA2BC,KAA3B,CAAP;AACH;;AAED,IAAIG,QAAJ;AACA,IAAIC,MAAJ;AACA,IAAIC,WAAJ;AACA,IAAIC,IAAJ;AACA,IAAIhC,CAAJ;;AAEA,SAASoB,GAAT,GAAgB;AACZS,EAAAA,QAAQ,GAAG,SAAX;AACAC,EAAAA,MAAM,GAAG,EAAT;AACAC,EAAAA,WAAW,GAAG,KAAd;AACAC,EAAAA,IAAI,GAAG,CAAP;;AAEA,WAAS;AACLhC,IAAAA,CAAC,GAAGiC,IAAI,EAAR,CADK,CAGL;AACA;AACA;AACA;;AAEA,UAAMrB,KAAK,GAAGsB,SAAS,CAACL,QAAD,CAAT,EAAd;;AACA,QAAIjB,KAAJ,EAAW;AACP,aAAOA,KAAP;AACH;AACJ;AACJ;;AAED,SAASqB,IAAT,GAAiB;AACb,MAAI3B,MAAM,CAACG,GAAD,CAAV,EAAiB;AACb,WAAOS,MAAM,CAACiB,aAAP,CAAqB7B,MAAM,CAAC8B,WAAP,CAAmB3B,GAAnB,CAArB,CAAP;AACH;AACJ;;AAED,SAAS4B,IAAT,GAAiB;AACb,QAAMrC,CAAC,GAAGiC,IAAI,EAAd;;AAEA,MAAIjC,CAAC,KAAK,IAAV,EAAgB;AACZU,IAAAA,IAAI;AACJC,IAAAA,MAAM,GAAG,CAAT;AACH,GAHD,MAGO,IAAIX,CAAJ,EAAO;AACVW,IAAAA,MAAM,IAAIX,CAAC,CAACsC,MAAZ;AACH,GAFM,MAEA;AACH3B,IAAAA,MAAM;AACT;;AAED,MAAIX,CAAJ,EAAO;AACHS,IAAAA,GAAG,IAAIT,CAAC,CAACsC,MAAT;AACH;;AAED,SAAOtC,CAAP;AACH;;AAED,MAAMkC,SAAS,GAAG;AACdK,EAAAA,OAAO,GAAI;AACP,YAAQvC,CAAR;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACA,WAAK,GAAL;AACA,WAAK,QAAL;AACA,WAAK,QAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACA,WAAK,QAAL;AACA,WAAK,QAAL;AACIqC,QAAAA,IAAI;AACJ;;AAEJ,WAAK,GAAL;AACIA,QAAAA,IAAI;AACJR,QAAAA,QAAQ,GAAG,SAAX;AACA;;AAEJ,WAAKV,SAAL;AACIkB,QAAAA,IAAI;AACJ,eAAOG,QAAQ,CAAC,KAAD,CAAf;AArBJ;;AAwBA,QAAI1C,IAAI,CAACC,gBAAL,CAAsBC,CAAtB,CAAJ,EAA8B;AAC1BqC,MAAAA,IAAI;AACJ;AACH,KA5BM,CA8BP;AACA;AACA;AACA;;;AAEA,WAAOH,SAAS,CAAC3B,UAAD,CAAT,EAAP;AACH,GArCa;;AAuCdkC,EAAAA,OAAO,GAAI;AACP,YAAQzC,CAAR;AACA,WAAK,GAAL;AACIqC,QAAAA,IAAI;AACJR,QAAAA,QAAQ,GAAG,kBAAX;AACA;;AAEJ,WAAK,GAAL;AACIQ,QAAAA,IAAI;AACJR,QAAAA,QAAQ,GAAG,mBAAX;AACA;AATJ;;AAYA,UAAMa,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH,GArDa;;AAuDdM,EAAAA,gBAAgB,GAAI;AAChB,YAAQ3C,CAAR;AACA,WAAK,GAAL;AACIqC,QAAAA,IAAI;AACJR,QAAAA,QAAQ,GAAG,0BAAX;AACA;;AAEJ,WAAKV,SAAL;AACI,cAAMuB,WAAW,CAACL,IAAI,EAAL,CAAjB;AAPJ;;AAUAA,IAAAA,IAAI;AACP,GAnEa;;AAqEdO,EAAAA,wBAAwB,GAAI;AACxB,YAAQ5C,CAAR;AACA,WAAK,GAAL;AACIqC,QAAAA,IAAI;AACJ;;AAEJ,WAAK,GAAL;AACIA,QAAAA,IAAI;AACJR,QAAAA,QAAQ,GAAG,SAAX;AACA;;AAEJ,WAAKV,SAAL;AACI,cAAMuB,WAAW,CAACL,IAAI,EAAL,CAAjB;AAXJ;;AAcAA,IAAAA,IAAI;AACJR,IAAAA,QAAQ,GAAG,kBAAX;AACH,GAtFa;;AAwFdgB,EAAAA,iBAAiB,GAAI;AACjB,YAAQ7C,CAAR;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACA,WAAK,QAAL;AACA,WAAK,QAAL;AACIqC,QAAAA,IAAI;AACJR,QAAAA,QAAQ,GAAG,SAAX;AACA;;AAEJ,WAAKV,SAAL;AACIkB,QAAAA,IAAI;AACJ,eAAOG,QAAQ,CAAC,KAAD,CAAf;AAXJ;;AAcAH,IAAAA,IAAI;AACP,GAxGa;;AA0GdX,EAAAA,KAAK,GAAI;AACL,YAAQ1B,CAAR;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACI,eAAOwC,QAAQ,CAAC,YAAD,EAAeH,IAAI,EAAnB,CAAf;;AAEJ,WAAK,GAAL;AACIA,QAAAA,IAAI;AACJS,QAAAA,OAAO,CAAC,KAAD,CAAP;AACA,eAAON,QAAQ,CAAC,MAAD,EAAS,IAAT,CAAf;;AAEJ,WAAK,GAAL;AACIH,QAAAA,IAAI;AACJS,QAAAA,OAAO,CAAC,KAAD,CAAP;AACA,eAAON,QAAQ,CAAC,SAAD,EAAY,IAAZ,CAAf;;AAEJ,WAAK,GAAL;AACIH,QAAAA,IAAI;AACJS,QAAAA,OAAO,CAAC,MAAD,CAAP;AACA,eAAON,QAAQ,CAAC,SAAD,EAAY,KAAZ,CAAf;;AAEJ,WAAK,GAAL;AACA,WAAK,GAAL;AACI,YAAIH,IAAI,OAAO,GAAf,EAAoB;AAChBL,UAAAA,IAAI,GAAG,CAAC,CAAR;AACH;;AAEDH,QAAAA,QAAQ,GAAG,MAAX;AACA;;AAEJ,WAAK,GAAL;AACIC,QAAAA,MAAM,GAAGO,IAAI,EAAb;AACAR,QAAAA,QAAQ,GAAG,qBAAX;AACA;;AAEJ,WAAK,GAAL;AACIC,QAAAA,MAAM,GAAGO,IAAI,EAAb;AACAR,QAAAA,QAAQ,GAAG,MAAX;AACA;;AAEJ,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACIC,QAAAA,MAAM,GAAGO,IAAI,EAAb;AACAR,QAAAA,QAAQ,GAAG,gBAAX;AACA;;AAEJ,WAAK,GAAL;AACIQ,QAAAA,IAAI;AACJS,QAAAA,OAAO,CAAC,SAAD,CAAP;AACA,eAAON,QAAQ,CAAC,SAAD,EAAYO,QAAZ,CAAf;;AAEJ,WAAK,GAAL;AACIV,QAAAA,IAAI;AACJS,QAAAA,OAAO,CAAC,IAAD,CAAP;AACA,eAAON,QAAQ,CAAC,SAAD,EAAYQ,GAAZ,CAAf;;AAEJ,WAAK,GAAL;AACA,WAAK,GAAL;AACIjB,QAAAA,WAAW,GAAIM,IAAI,OAAO,GAA1B;AACAP,QAAAA,MAAM,GAAG,EAAT;AACAD,QAAAA,QAAQ,GAAG,QAAX;AACA;AAnEJ;;AAsEA,UAAMa,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH,GAlLa;;AAoLdY,EAAAA,yBAAyB,GAAI;AACzB,QAAIjD,CAAC,KAAK,GAAV,EAAe;AACX,YAAM0C,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH;;AAEDA,IAAAA,IAAI;AACJ,UAAMa,CAAC,GAAGC,aAAa,EAAvB;;AACA,YAAQD,CAAR;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACI;;AAEJ;AACI,YAAI,CAACpD,IAAI,CAACI,aAAL,CAAmBgD,CAAnB,CAAL,EAA4B;AACxB,gBAAME,iBAAiB,EAAvB;AACH;;AAED;AAVJ;;AAaAtB,IAAAA,MAAM,IAAIoB,CAAV;AACArB,IAAAA,QAAQ,GAAG,gBAAX;AACH,GA1Ma;;AA4MdwB,EAAAA,cAAc,GAAI;AACd,YAAQrD,CAAR;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,QAAL;AACA,WAAK,QAAL;AACI8B,QAAAA,MAAM,IAAIO,IAAI,EAAd;AACA;;AAEJ,WAAK,IAAL;AACIA,QAAAA,IAAI;AACJR,QAAAA,QAAQ,GAAG,sBAAX;AACA;AAXJ;;AAcA,QAAI/B,IAAI,CAACK,gBAAL,CAAsBH,CAAtB,CAAJ,EAA8B;AAC1B8B,MAAAA,MAAM,IAAIO,IAAI,EAAd;AACA;AACH;;AAED,WAAOG,QAAQ,CAAC,YAAD,EAAeV,MAAf,CAAf;AACH,GAjOa;;AAmOdwB,EAAAA,oBAAoB,GAAI;AACpB,QAAItD,CAAC,KAAK,GAAV,EAAe;AACX,YAAM0C,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH;;AAEDA,IAAAA,IAAI;AACJ,UAAMa,CAAC,GAAGC,aAAa,EAAvB;;AACA,YAAQD,CAAR;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,QAAL;AACA,WAAK,QAAL;AACI;;AAEJ;AACI,YAAI,CAACpD,IAAI,CAACK,gBAAL,CAAsB+C,CAAtB,CAAL,EAA+B;AAC3B,gBAAME,iBAAiB,EAAvB;AACH;;AAED;AAZJ;;AAeAtB,IAAAA,MAAM,IAAIoB,CAAV;AACArB,IAAAA,QAAQ,GAAG,gBAAX;AACH,GA3Pa;;AA6PdG,EAAAA,IAAI,GAAI;AACJ,YAAQhC,CAAR;AACA,WAAK,GAAL;AACI8B,QAAAA,MAAM,GAAGO,IAAI,EAAb;AACAR,QAAAA,QAAQ,GAAG,qBAAX;AACA;;AAEJ,WAAK,GAAL;AACIC,QAAAA,MAAM,GAAGO,IAAI,EAAb;AACAR,QAAAA,QAAQ,GAAG,MAAX;AACA;;AAEJ,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACIC,QAAAA,MAAM,GAAGO,IAAI,EAAb;AACAR,QAAAA,QAAQ,GAAG,gBAAX;AACA;;AAEJ,WAAK,GAAL;AACIQ,QAAAA,IAAI;AACJS,QAAAA,OAAO,CAAC,SAAD,CAAP;AACA,eAAON,QAAQ,CAAC,SAAD,EAAYR,IAAI,GAAGe,QAAnB,CAAf;;AAEJ,WAAK,GAAL;AACIV,QAAAA,IAAI;AACJS,QAAAA,OAAO,CAAC,IAAD,CAAP;AACA,eAAON,QAAQ,CAAC,SAAD,EAAYQ,GAAZ,CAAf;AAhCJ;;AAmCA,UAAMN,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH,GAlSa;;AAoSdkB,EAAAA,IAAI,GAAI;AACJ,YAAQvD,CAAR;AACA,WAAK,GAAL;AACI8B,QAAAA,MAAM,IAAIO,IAAI,EAAd;AACAR,QAAAA,QAAQ,GAAG,cAAX;AACA;;AAEJ,WAAK,GAAL;AACA,WAAK,GAAL;AACIC,QAAAA,MAAM,IAAIO,IAAI,EAAd;AACAR,QAAAA,QAAQ,GAAG,iBAAX;AACA;;AAEJ,WAAK,GAAL;AACA,WAAK,GAAL;AACIC,QAAAA,MAAM,IAAIO,IAAI,EAAd;AACAR,QAAAA,QAAQ,GAAG,aAAX;AACA;AAhBJ;;AAmBA,WAAOW,QAAQ,CAAC,SAAD,EAAYR,IAAI,GAAG,CAAnB,CAAf;AACH,GAzTa;;AA2TdwB,EAAAA,cAAc,GAAI;AACd,YAAQxD,CAAR;AACA,WAAK,GAAL;AACI8B,QAAAA,MAAM,IAAIO,IAAI,EAAd;AACAR,QAAAA,QAAQ,GAAG,cAAX;AACA;;AAEJ,WAAK,GAAL;AACA,WAAK,GAAL;AACIC,QAAAA,MAAM,IAAIO,IAAI,EAAd;AACAR,QAAAA,QAAQ,GAAG,iBAAX;AACA;AAVJ;;AAaA,QAAI/B,IAAI,CAACM,OAAL,CAAaJ,CAAb,CAAJ,EAAqB;AACjB8B,MAAAA,MAAM,IAAIO,IAAI,EAAd;AACA;AACH;;AAED,WAAOG,QAAQ,CAAC,SAAD,EAAYR,IAAI,GAAGyB,MAAM,CAAC3B,MAAD,CAAzB,CAAf;AACH,GA/Ua;;AAiVd4B,EAAAA,mBAAmB,GAAI;AACnB,QAAI5D,IAAI,CAACM,OAAL,CAAaJ,CAAb,CAAJ,EAAqB;AACjB8B,MAAAA,MAAM,IAAIO,IAAI,EAAd;AACAR,MAAAA,QAAQ,GAAG,iBAAX;AACA;AACH;;AAED,UAAMa,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH,GAzVa;;AA2VdsB,EAAAA,YAAY,GAAI;AACZ,YAAQ3D,CAAR;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACI8B,QAAAA,MAAM,IAAIO,IAAI,EAAd;AACAR,QAAAA,QAAQ,GAAG,iBAAX;AACA;AALJ;;AAQA,QAAI/B,IAAI,CAACM,OAAL,CAAaJ,CAAb,CAAJ,EAAqB;AACjB8B,MAAAA,MAAM,IAAIO,IAAI,EAAd;AACAR,MAAAA,QAAQ,GAAG,iBAAX;AACA;AACH;;AAED,WAAOW,QAAQ,CAAC,SAAD,EAAYR,IAAI,GAAGyB,MAAM,CAAC3B,MAAD,CAAzB,CAAf;AACH,GA3Wa;;AA6Wd8B,EAAAA,eAAe,GAAI;AACf,YAAQ5D,CAAR;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACI8B,QAAAA,MAAM,IAAIO,IAAI,EAAd;AACAR,QAAAA,QAAQ,GAAG,iBAAX;AACA;AALJ;;AAQA,QAAI/B,IAAI,CAACM,OAAL,CAAaJ,CAAb,CAAJ,EAAqB;AACjB8B,MAAAA,MAAM,IAAIO,IAAI,EAAd;AACA;AACH;;AAED,WAAOG,QAAQ,CAAC,SAAD,EAAYR,IAAI,GAAGyB,MAAM,CAAC3B,MAAD,CAAzB,CAAf;AACH,GA5Xa;;AA8Xd+B,EAAAA,eAAe,GAAI;AACf,YAAQ7D,CAAR;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACI8B,QAAAA,MAAM,IAAIO,IAAI,EAAd;AACAR,QAAAA,QAAQ,GAAG,qBAAX;AACA;AALJ;;AAQA,QAAI/B,IAAI,CAACM,OAAL,CAAaJ,CAAb,CAAJ,EAAqB;AACjB8B,MAAAA,MAAM,IAAIO,IAAI,EAAd;AACAR,MAAAA,QAAQ,GAAG,wBAAX;AACA;AACH;;AAED,UAAMa,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH,GA9Ya;;AAgZdyB,EAAAA,mBAAmB,GAAI;AACnB,QAAIhE,IAAI,CAACM,OAAL,CAAaJ,CAAb,CAAJ,EAAqB;AACjB8B,MAAAA,MAAM,IAAIO,IAAI,EAAd;AACAR,MAAAA,QAAQ,GAAG,wBAAX;AACA;AACH;;AAED,UAAMa,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH,GAxZa;;AA0Zd0B,EAAAA,sBAAsB,GAAI;AACtB,QAAIjE,IAAI,CAACM,OAAL,CAAaJ,CAAb,CAAJ,EAAqB;AACjB8B,MAAAA,MAAM,IAAIO,IAAI,EAAd;AACA;AACH;;AAED,WAAOG,QAAQ,CAAC,SAAD,EAAYR,IAAI,GAAGyB,MAAM,CAAC3B,MAAD,CAAzB,CAAf;AACH,GAjaa;;AAmadkC,EAAAA,WAAW,GAAI;AACX,QAAIlE,IAAI,CAACO,UAAL,CAAgBL,CAAhB,CAAJ,EAAwB;AACpB8B,MAAAA,MAAM,IAAIO,IAAI,EAAd;AACAR,MAAAA,QAAQ,GAAG,oBAAX;AACA;AACH;;AAED,UAAMa,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH,GA3aa;;AA6ad4B,EAAAA,kBAAkB,GAAI;AAClB,QAAInE,IAAI,CAACO,UAAL,CAAgBL,CAAhB,CAAJ,EAAwB;AACpB8B,MAAAA,MAAM,IAAIO,IAAI,EAAd;AACA;AACH;;AAED,WAAOG,QAAQ,CAAC,SAAD,EAAYR,IAAI,GAAGyB,MAAM,CAAC3B,MAAD,CAAzB,CAAf;AACH,GApba;;AAsbdoC,EAAAA,MAAM,GAAI;AACN,YAAQlE,CAAR;AACA,WAAK,IAAL;AACIqC,QAAAA,IAAI;AACJP,QAAAA,MAAM,IAAIqC,MAAM,EAAhB;AACA;;AAEJ,WAAK,GAAL;AACI,YAAIpC,WAAJ,EAAiB;AACbM,UAAAA,IAAI;AACJ,iBAAOG,QAAQ,CAAC,QAAD,EAAWV,MAAX,CAAf;AACH;;AAEDA,QAAAA,MAAM,IAAIO,IAAI,EAAd;AACA;;AAEJ,WAAK,GAAL;AACI,YAAI,CAACN,WAAL,EAAkB;AACdM,UAAAA,IAAI;AACJ,iBAAOG,QAAQ,CAAC,QAAD,EAAWV,MAAX,CAAf;AACH;;AAEDA,QAAAA,MAAM,IAAIO,IAAI,EAAd;AACA;;AAEJ,WAAK,IAAL;AACA,WAAK,IAAL;AACI,cAAMK,WAAW,CAACL,IAAI,EAAL,CAAjB;;AAEJ,WAAK,QAAL;AACA,WAAK,QAAL;AACI+B,QAAAA,aAAa,CAACpE,CAAD,CAAb;AACA;;AAEJ,WAAKmB,SAAL;AACI,cAAMuB,WAAW,CAACL,IAAI,EAAL,CAAjB;AAlCJ;;AAqCAP,IAAAA,MAAM,IAAIO,IAAI,EAAd;AACH,GA7da;;AA+ddgC,EAAAA,KAAK,GAAI;AACL,YAAQrE,CAAR;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACI,eAAOwC,QAAQ,CAAC,YAAD,EAAeH,IAAI,EAAnB,CAAf;AAEJ;AACA;AACA;AAPA;;AAUAR,IAAAA,QAAQ,GAAG,OAAX;AACH,GA3ea;;AA6edyC,EAAAA,kBAAkB,GAAI;AAClB,YAAQtE,CAAR;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACI8B,QAAAA,MAAM,GAAGO,IAAI,EAAb;AACAR,QAAAA,QAAQ,GAAG,gBAAX;AACA;;AAEJ,WAAK,IAAL;AACIQ,QAAAA,IAAI;AACJR,QAAAA,QAAQ,GAAG,2BAAX;AACA;;AAEJ,WAAK,GAAL;AACI,eAAOW,QAAQ,CAAC,YAAD,EAAeH,IAAI,EAAnB,CAAf;;AAEJ,WAAK,GAAL;AACA,WAAK,GAAL;AACIN,QAAAA,WAAW,GAAIM,IAAI,OAAO,GAA1B;AACAR,QAAAA,QAAQ,GAAG,QAAX;AACA;AAnBJ;;AAsBA,QAAI/B,IAAI,CAACI,aAAL,CAAmBF,CAAnB,CAAJ,EAA2B;AACvB8B,MAAAA,MAAM,IAAIO,IAAI,EAAd;AACAR,MAAAA,QAAQ,GAAG,gBAAX;AACA;AACH;;AAED,UAAMa,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH,GA3gBa;;AA6gBdkC,EAAAA,iBAAiB,GAAI;AACjB,QAAIvE,CAAC,KAAK,GAAV,EAAe;AACX,aAAOwC,QAAQ,CAAC,YAAD,EAAeH,IAAI,EAAnB,CAAf;AACH;;AAED,UAAMK,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH,GAnhBa;;AAqhBdmC,EAAAA,mBAAmB,GAAI;AACnB3C,IAAAA,QAAQ,GAAG,OAAX;AACH,GAvhBa;;AAyhBd4C,EAAAA,kBAAkB,GAAI;AAClB,YAAQzE,CAAR;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACI,eAAOwC,QAAQ,CAAC,YAAD,EAAeH,IAAI,EAAnB,CAAf;AAHJ;;AAMA,UAAMK,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH,GAjiBa;;AAmiBdqC,EAAAA,gBAAgB,GAAI;AAChB,QAAI1E,CAAC,KAAK,GAAV,EAAe;AACX,aAAOwC,QAAQ,CAAC,YAAD,EAAeH,IAAI,EAAnB,CAAf;AACH;;AAEDR,IAAAA,QAAQ,GAAG,OAAX;AACH,GAziBa;;AA2iBd8C,EAAAA,eAAe,GAAI;AACf,YAAQ3E,CAAR;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACI,eAAOwC,QAAQ,CAAC,YAAD,EAAeH,IAAI,EAAnB,CAAf;AAHJ;;AAMA,UAAMK,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH,GAnjBa;;AAqjBduC,EAAAA,GAAG,GAAI;AACH;AACA;AACA;AACA;AACA;AAEA,UAAMlC,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH;;AA7jBa,CAAlB;;AAgkBA,SAASG,QAAT,CAAmBlB,IAAnB,EAAyBI,KAAzB,EAAgC;AAC5B,SAAO;AACHJ,IAAAA,IADG;AAEHI,IAAAA,KAFG;AAGHhB,IAAAA,IAHG;AAIHC,IAAAA;AAJG,GAAP;AAMH;;AAED,SAASmC,OAAT,CAAkB+B,CAAlB,EAAqB;AACjB,OAAK,MAAM7E,CAAX,IAAgB6E,CAAhB,EAAmB;AACf,UAAMC,CAAC,GAAG7C,IAAI,EAAd;;AAEA,QAAI6C,CAAC,KAAK9E,CAAV,EAAa;AACT,YAAM0C,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH;;AAEDA,IAAAA,IAAI;AACP;AACJ;;AAED,SAAS8B,MAAT,GAAmB;AACf,QAAMnE,CAAC,GAAGiC,IAAI,EAAd;;AACA,UAAQjC,CAAR;AACA,SAAK,GAAL;AACIqC,MAAAA,IAAI;AACJ,aAAO,IAAP;;AAEJ,SAAK,GAAL;AACIA,MAAAA,IAAI;AACJ,aAAO,IAAP;;AAEJ,SAAK,GAAL;AACIA,MAAAA,IAAI;AACJ,aAAO,IAAP;;AAEJ,SAAK,GAAL;AACIA,MAAAA,IAAI;AACJ,aAAO,IAAP;;AAEJ,SAAK,GAAL;AACIA,MAAAA,IAAI;AACJ,aAAO,IAAP;;AAEJ,SAAK,GAAL;AACIA,MAAAA,IAAI;AACJ,aAAO,IAAP;;AAEJ,SAAK,GAAL;AACIA,MAAAA,IAAI;;AACJ,UAAIvC,IAAI,CAACM,OAAL,CAAa6B,IAAI,EAAjB,CAAJ,EAA0B;AACtB,cAAMS,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH;;AAED,aAAO,IAAP;;AAEJ,SAAK,GAAL;AACIA,MAAAA,IAAI;AACJ,aAAO0C,SAAS,EAAhB;;AAEJ,SAAK,GAAL;AACI1C,MAAAA,IAAI;AACJ,aAAOc,aAAa,EAApB;;AAEJ,SAAK,IAAL;AACA,SAAK,QAAL;AACA,SAAK,QAAL;AACId,MAAAA,IAAI;AACJ,aAAO,EAAP;;AAEJ,SAAK,IAAL;AACIA,MAAAA,IAAI;;AACJ,UAAIJ,IAAI,OAAO,IAAf,EAAqB;AACjBI,QAAAA,IAAI;AACP;;AAED,aAAO,EAAP;;AAEJ,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACI,YAAMK,WAAW,CAACL,IAAI,EAAL,CAAjB;;AAEJ,SAAKlB,SAAL;AACI,YAAMuB,WAAW,CAACL,IAAI,EAAL,CAAjB;AAnEJ;;AAsEA,SAAOA,IAAI,EAAX;AACH;;AAED,SAAS0C,SAAT,GAAsB;AAClB,MAAIjD,MAAM,GAAG,EAAb;AACA,MAAI9B,CAAC,GAAGiC,IAAI,EAAZ;;AAEA,MAAI,CAACnC,IAAI,CAACO,UAAL,CAAgBL,CAAhB,CAAL,EAAyB;AACrB,UAAM0C,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH;;AAEDP,EAAAA,MAAM,IAAIO,IAAI,EAAd;AAEArC,EAAAA,CAAC,GAAGiC,IAAI,EAAR;;AACA,MAAI,CAACnC,IAAI,CAACO,UAAL,CAAgBL,CAAhB,CAAL,EAAyB;AACrB,UAAM0C,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH;;AAEDP,EAAAA,MAAM,IAAIO,IAAI,EAAd;AAEA,SAAOnB,MAAM,CAACiB,aAAP,CAAqB6C,QAAQ,CAAClD,MAAD,EAAS,EAAT,CAA7B,CAAP;AACH;;AAED,SAASqB,aAAT,GAA0B;AACtB,MAAIrB,MAAM,GAAG,EAAb;AACA,MAAImD,KAAK,GAAG,CAAZ;;AAEA,SAAOA,KAAK,KAAK,CAAjB,EAAoB;AAChB,UAAMjF,CAAC,GAAGiC,IAAI,EAAd;;AACA,QAAI,CAACnC,IAAI,CAACO,UAAL,CAAgBL,CAAhB,CAAL,EAAyB;AACrB,YAAM0C,WAAW,CAACL,IAAI,EAAL,CAAjB;AACH;;AAEDP,IAAAA,MAAM,IAAIO,IAAI,EAAd;AACH;;AAED,SAAOnB,MAAM,CAACiB,aAAP,CAAqB6C,QAAQ,CAAClD,MAAD,EAAS,EAAT,CAA7B,CAAP;AACH;;AAED,MAAMT,WAAW,GAAG;AAChBgD,EAAAA,KAAK,GAAI;AACL,QAAIzD,KAAK,CAACU,IAAN,KAAe,KAAnB,EAA0B;AACtB,YAAM4D,UAAU,EAAhB;AACH;;AAEDC,IAAAA,IAAI;AACP,GAPe;;AAShBb,EAAAA,kBAAkB,GAAI;AAClB,YAAQ1D,KAAK,CAACU,IAAd;AACA,WAAK,YAAL;AACA,WAAK,QAAL;AACIT,QAAAA,GAAG,GAAGD,KAAK,CAACc,KAAZ;AACAnB,QAAAA,UAAU,GAAG,mBAAb;AACA;;AAEJ,WAAK,YAAL;AACI;AACA;AACA;AACA;AAEA6E,QAAAA,GAAG;AACH;;AAEJ,WAAK,KAAL;AACI,cAAMF,UAAU,EAAhB;AAjBJ,KADkB,CAqBlB;AACA;;AACH,GAhCe;;AAkChBX,EAAAA,iBAAiB,GAAI;AACjB;AACA;AACA;AACA;AAEA,QAAI3D,KAAK,CAACU,IAAN,KAAe,KAAnB,EAA0B;AACtB,YAAM4D,UAAU,EAAhB;AACH;;AAED3E,IAAAA,UAAU,GAAG,qBAAb;AACH,GA7Ce;;AA+ChBiE,EAAAA,mBAAmB,GAAI;AACnB,QAAI5D,KAAK,CAACU,IAAN,KAAe,KAAnB,EAA0B;AACtB,YAAM4D,UAAU,EAAhB;AACH;;AAEDC,IAAAA,IAAI;AACP,GArDe;;AAuDhBT,EAAAA,gBAAgB,GAAI;AAChB,QAAI9D,KAAK,CAACU,IAAN,KAAe,KAAnB,EAA0B;AACtB,YAAM4D,UAAU,EAAhB;AACH;;AAED,QAAItE,KAAK,CAACU,IAAN,KAAe,YAAf,IAA+BV,KAAK,CAACc,KAAN,KAAgB,GAAnD,EAAwD;AACpD0D,MAAAA,GAAG;AACH;AACH;;AAEDD,IAAAA,IAAI;AACP,GAlEe;;AAoEhBV,EAAAA,kBAAkB,GAAI;AAClB;AACA;AACA;AACA;AAEA,QAAI7D,KAAK,CAACU,IAAN,KAAe,KAAnB,EAA0B;AACtB,YAAM4D,UAAU,EAAhB;AACH;;AAED,YAAQtE,KAAK,CAACc,KAAd;AACA,WAAK,GAAL;AACInB,QAAAA,UAAU,GAAG,oBAAb;AACA;;AAEJ,WAAK,GAAL;AACI6E,QAAAA,GAAG;AANP,KAVkB,CAmBlB;AACA;;AACH,GAzFe;;AA2FhBT,EAAAA,eAAe,GAAI;AACf;AACA;AACA;AACA;AAEA,QAAI/D,KAAK,CAACU,IAAN,KAAe,KAAnB,EAA0B;AACtB,YAAM4D,UAAU,EAAhB;AACH;;AAED,YAAQtE,KAAK,CAACc,KAAd;AACA,WAAK,GAAL;AACInB,QAAAA,UAAU,GAAG,kBAAb;AACA;;AAEJ,WAAK,GAAL;AACI6E,QAAAA,GAAG;AANP,KAVe,CAmBf;AACA;;AACH,GAhHe;;AAkHhBR,EAAAA,GAAG,GAAI,CACH;AACA;AACA;AACA;AACH;;AAvHe,CAApB;;AA0HA,SAASO,IAAT,GAAiB;AACb,MAAIzD,KAAJ;;AAEA,UAAQd,KAAK,CAACU,IAAd;AACA,SAAK,YAAL;AACI,cAAQV,KAAK,CAACc,KAAd;AACA,aAAK,GAAL;AACIA,UAAAA,KAAK,GAAG,EAAR;AACA;;AAEJ,aAAK,GAAL;AACIA,UAAAA,KAAK,GAAG,EAAR;AACA;AAPJ;;AAUA;;AAEJ,SAAK,MAAL;AACA,SAAK,SAAL;AACA,SAAK,SAAL;AACA,SAAK,QAAL;AACIA,MAAAA,KAAK,GAAGd,KAAK,CAACc,KAAd;AACA;AAEJ;AACA;AACA;AAvBA;;AA0BA,MAAIZ,IAAI,KAAKK,SAAb,EAAwB;AACpBL,IAAAA,IAAI,GAAGY,KAAP;AACH,GAFD,MAEO;AACH,UAAM2D,MAAM,GAAG7E,KAAK,CAACA,KAAK,CAAC8B,MAAN,GAAe,CAAhB,CAApB;;AACA,QAAIgD,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACvBA,MAAAA,MAAM,CAACF,IAAP,CAAYzD,KAAZ;AACH,KAFD,MAEO;AACH2D,MAAAA,MAAM,CAACxE,GAAD,CAAN,GAAca,KAAd;AACH;AACJ;;AAED,MAAIA,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,QAAvC,EAAiD;AAC7ClB,IAAAA,KAAK,CAAC2E,IAAN,CAAWzD,KAAX;;AAEA,QAAI4D,KAAK,CAACC,OAAN,CAAc7D,KAAd,CAAJ,EAA0B;AACtBnB,MAAAA,UAAU,GAAG,kBAAb;AACH,KAFD,MAEO;AACHA,MAAAA,UAAU,GAAG,oBAAb;AACH;AACJ,GARD,MAQO;AACH,UAAMiF,OAAO,GAAGhF,KAAK,CAACA,KAAK,CAAC8B,MAAN,GAAe,CAAhB,CAArB;;AACA,QAAIkD,OAAO,IAAI,IAAf,EAAqB;AACjBjF,MAAAA,UAAU,GAAG,KAAb;AACH,KAFD,MAEO,IAAI+E,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAJ,EAA4B;AAC/BjF,MAAAA,UAAU,GAAG,iBAAb;AACH,KAFM,MAEA;AACHA,MAAAA,UAAU,GAAG,oBAAb;AACH;AACJ;AACJ;;AAED,SAAS6E,GAAT,GAAgB;AACZ5E,EAAAA,KAAK,CAAC4E,GAAN;AAEA,QAAMI,OAAO,GAAGhF,KAAK,CAACA,KAAK,CAAC8B,MAAN,GAAe,CAAhB,CAArB;;AACA,MAAIkD,OAAO,IAAI,IAAf,EAAqB;AACjBjF,IAAAA,UAAU,GAAG,KAAb;AACH,GAFD,MAEO,IAAI+E,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAJ,EAA4B;AAC/BjF,IAAAA,UAAU,GAAG,iBAAb;AACH,GAFM,MAEA;AACHA,IAAAA,UAAU,GAAG,oBAAb;AACH;AACJ,C,CAED;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,SAASmC,WAAT,CAAsB1C,CAAtB,EAAyB;AACrB,MAAIA,CAAC,KAAKmB,SAAV,EAAqB;AACjB,WAAOsE,WAAW,CAAE,kCAAiC/E,IAAK,IAAGC,MAAO,EAAlD,CAAlB;AACH;;AAED,SAAO8E,WAAW,CAAE,6BAA4BC,UAAU,CAAC1F,CAAD,CAAI,QAAOU,IAAK,IAAGC,MAAO,EAAlE,CAAlB;AACH;;AAED,SAASuE,UAAT,GAAuB;AACnB,SAAOO,WAAW,CAAE,kCAAiC/E,IAAK,IAAGC,MAAO,EAAlD,CAAlB;AACH,C,CAED;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,SAASyC,iBAAT,GAA8B;AAC1BzC,EAAAA,MAAM,IAAI,CAAV;AACA,SAAO8E,WAAW,CAAE,0CAAyC/E,IAAK,IAAGC,MAAO,EAA1D,CAAlB;AACH;;AAED,SAASyD,aAAT,CAAwBpE,CAAxB,EAA2B;AACvB2F,EAAAA,OAAO,CAACC,IAAR,CAAc,WAAUF,UAAU,CAAC1F,CAAD,CAAI,yDAAtC;AACH;;AAED,SAAS0F,UAAT,CAAqB1F,CAArB,EAAwB;AACpB,QAAM6F,YAAY,GAAG;AACjB,SAAK,KADY;AAEjB,SAAK,KAFY;AAGjB,UAAM,MAHW;AAIjB,UAAM,KAJW;AAKjB,UAAM,KALW;AAMjB,UAAM,KANW;AAOjB,UAAM,KAPW;AAQjB,UAAM,KARW;AASjB,UAAM,KATW;AAUjB,UAAM,KAVW;AAWjB,cAAU,SAXO;AAYjB,cAAU;AAZO,GAArB;;AAeA,MAAIA,YAAY,CAAC7F,CAAD,CAAhB,EAAqB;AACjB,WAAO6F,YAAY,CAAC7F,CAAD,CAAnB;AACH;;AAED,MAAIA,CAAC,GAAG,GAAR,EAAa;AACT,UAAM8F,SAAS,GAAG9F,CAAC,CAAC+F,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,CAAlB;AACA,WAAO,QAAQ,CAAC,OAAOF,SAAR,EAAmBG,SAAnB,CAA6BH,SAAS,CAACxD,MAAvC,CAAf;AACH;;AAED,SAAOtC,CAAP;AACH;;AAED,SAASyF,WAAT,CAAsBS,OAAtB,EAA+B;AAC3B,QAAMC,GAAG,GAAG,IAAIC,WAAJ,CAAgBF,OAAhB,CAAZ;AACAC,EAAAA,GAAG,CAACE,UAAJ,GAAiB3F,IAAjB;AACAyF,EAAAA,GAAG,CAACG,YAAJ,GAAmB3F,MAAnB;AACA,SAAOwF,GAAP;AACH;;AAED,IAAII,SAAS,GAAG,SAASA,SAAT,CAAoB7E,KAApB,EAA2B8E,QAA3B,EAAqCC,KAArC,EAA4C;AACxD,QAAMjG,KAAK,GAAG,EAAd;AACA,MAAIkG,MAAM,GAAG,EAAb;AACA,MAAIC,YAAJ;AACA,MAAIC,YAAJ;AACA,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,KAAJ;;AAEA,MACIN,QAAQ,IAAI,IAAZ,IACA,OAAOA,QAAP,KAAoB,QADpB,IAEA,CAAClB,KAAK,CAACC,OAAN,CAAciB,QAAd,CAHL,EAIE;AACEC,IAAAA,KAAK,GAAGD,QAAQ,CAACC,KAAjB;AACAK,IAAAA,KAAK,GAAGN,QAAQ,CAACM,KAAjB;AACAN,IAAAA,QAAQ,GAAGA,QAAQ,CAACA,QAApB;AACH;;AAED,MAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAChCI,IAAAA,YAAY,GAAGJ,QAAf;AACH,GAFD,MAEO,IAAIlB,KAAK,CAACC,OAAN,CAAciB,QAAd,CAAJ,EAA6B;AAChCG,IAAAA,YAAY,GAAG,EAAf;;AACA,SAAK,MAAMI,CAAX,IAAgBP,QAAhB,EAA0B;AACtB,UAAIQ,IAAJ;;AAEA,UAAI,OAAOD,CAAP,KAAa,QAAjB,EAA2B;AACvBC,QAAAA,IAAI,GAAGD,CAAP;AACH,OAFD,MAEO,IACH,OAAOA,CAAP,KAAa,QAAb,IACAA,CAAC,YAAY7F,MADb,IAEA6F,CAAC,YAAYtD,MAHV,EAIL;AACEuD,QAAAA,IAAI,GAAG9F,MAAM,CAAC6F,CAAD,CAAb;AACH;;AAED,UAAIC,IAAI,KAAK7F,SAAT,IAAsBwF,YAAY,CAACM,OAAb,CAAqBD,IAArB,IAA6B,CAAvD,EAA0D;AACtDL,QAAAA,YAAY,CAACxB,IAAb,CAAkB6B,IAAlB;AACH;AACJ;AACJ;;AAED,MAAIP,KAAK,YAAYhD,MAArB,EAA6B;AACzBgD,IAAAA,KAAK,GAAGhD,MAAM,CAACgD,KAAD,CAAd;AACH,GAFD,MAEO,IAAIA,KAAK,YAAYvF,MAArB,EAA6B;AAChCuF,IAAAA,KAAK,GAAGvF,MAAM,CAACuF,KAAD,CAAd;AACH;;AAED,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,QAAIA,KAAK,GAAG,CAAZ,EAAe;AACXA,MAAAA,KAAK,GAAGS,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaD,IAAI,CAACE,KAAL,CAAWX,KAAX,CAAb,CAAR;AACAI,MAAAA,GAAG,GAAG,aAAaQ,MAAb,CAAoB,CAApB,EAAuBZ,KAAvB,CAAN;AACH;AACJ,GALD,MAKO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAClCI,IAAAA,GAAG,GAAGJ,KAAK,CAACY,MAAN,CAAa,CAAb,EAAgB,EAAhB,CAAN;AACH;;AAED,SAAOC,iBAAiB,CAAC,EAAD,EAAK;AAAC,QAAI5F;AAAL,GAAL,CAAxB;;AAEA,WAAS4F,iBAAT,CAA4BzG,GAA5B,EAAiCW,MAAjC,EAAyC;AACrC,QAAIE,KAAK,GAAGF,MAAM,CAACX,GAAD,CAAlB;;AACA,QAAIa,KAAK,IAAI,IAAb,EAAmB;AACf,UAAI,OAAOA,KAAK,CAAC6F,OAAb,KAAyB,UAA7B,EAAyC;AACrC7F,QAAAA,KAAK,GAAGA,KAAK,CAAC6F,OAAN,CAAc1G,GAAd,CAAR;AACH,OAFD,MAEO,IAAI,OAAOa,KAAK,CAAC8F,MAAb,KAAwB,UAA5B,EAAwC;AAC3C9F,QAAAA,KAAK,GAAGA,KAAK,CAAC8F,MAAN,CAAa3G,GAAb,CAAR;AACH;AACJ;;AAED,QAAI+F,YAAJ,EAAkB;AACdlF,MAAAA,KAAK,GAAGkF,YAAY,CAAChF,IAAb,CAAkBJ,MAAlB,EAA0BX,GAA1B,EAA+Ba,KAA/B,CAAR;AACH;;AAED,QAAIA,KAAK,YAAY+B,MAArB,EAA6B;AACzB/B,MAAAA,KAAK,GAAG+B,MAAM,CAAC/B,KAAD,CAAd;AACH,KAFD,MAEO,IAAIA,KAAK,YAAYR,MAArB,EAA6B;AAChCQ,MAAAA,KAAK,GAAGR,MAAM,CAACQ,KAAD,CAAd;AACH,KAFM,MAEA,IAAIA,KAAK,YAAY+F,OAArB,EAA8B;AACjC/F,MAAAA,KAAK,GAAGA,KAAK,CAACgG,OAAN,EAAR;AACH;;AAED,YAAQhG,KAAR;AACA,WAAK,IAAL;AAAW,eAAO,MAAP;;AACX,WAAK,IAAL;AAAW,eAAO,MAAP;;AACX,WAAK,KAAL;AAAY,eAAO,OAAP;AAHZ;;AAMA,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,aAAOiG,WAAW,CAACjG,KAAD,EAAQ,KAAR,CAAlB;AACH;;AAED,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,aAAOR,MAAM,CAACQ,KAAD,CAAb;AACH;;AAED,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,aAAO4D,KAAK,CAACC,OAAN,CAAc7D,KAAd,IAAuBkG,cAAc,CAAClG,KAAD,CAArC,GAA+CmG,eAAe,CAACnG,KAAD,CAArE;AACH;;AAED,WAAOP,SAAP;AACH;;AAED,WAASwG,WAAT,CAAsBjG,KAAtB,EAA6B;AACzB,UAAMoG,MAAM,GAAG;AACX,WAAK,GADM;AAEX,WAAK;AAFM,KAAf;AAKA,UAAMjC,YAAY,GAAG;AACjB,WAAK,KADY;AAEjB,WAAK,KAFY;AAGjB,YAAM,MAHW;AAIjB,YAAM,KAJW;AAKjB,YAAM,KALW;AAMjB,YAAM,KANW;AAOjB,YAAM,KAPW;AAQjB,YAAM,KARW;AASjB,YAAM,KATW;AAUjB,YAAM,KAVW;AAWjB,gBAAU,SAXO;AAYjB,gBAAU;AAZO,KAArB;AAeA,QAAIkC,OAAO,GAAG,EAAd;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtG,KAAK,CAACY,MAA1B,EAAkC0F,CAAC,EAAnC,EAAuC;AACnC,YAAMhI,CAAC,GAAG0B,KAAK,CAACsG,CAAD,CAAf;;AACA,cAAQhI,CAAR;AACA,aAAK,GAAL;AACA,aAAK,GAAL;AACI8H,UAAAA,MAAM,CAAC9H,CAAD,CAAN;AACA+H,UAAAA,OAAO,IAAI/H,CAAX;AACA;;AAEJ,aAAK,IAAL;AACI,cAAIF,IAAI,CAACM,OAAL,CAAasB,KAAK,CAACsG,CAAC,GAAG,CAAL,CAAlB,CAAJ,EAAgC;AAC5BD,YAAAA,OAAO,IAAI,OAAX;AACA;AACH;;AAXL;;AAcA,UAAIlC,YAAY,CAAC7F,CAAD,CAAhB,EAAqB;AACjB+H,QAAAA,OAAO,IAAIlC,YAAY,CAAC7F,CAAD,CAAvB;AACA;AACH;;AAED,UAAIA,CAAC,GAAG,GAAR,EAAa;AACT,YAAI8F,SAAS,GAAG9F,CAAC,CAAC+F,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,CAAhB;AACA+B,QAAAA,OAAO,IAAI,QAAQ,CAAC,OAAOjC,SAAR,EAAmBG,SAAnB,CAA6BH,SAAS,CAACxD,MAAvC,CAAnB;AACA;AACH;;AAEDyF,MAAAA,OAAO,IAAI/H,CAAX;AACH;;AAED,UAAMiI,SAAS,GAAGnB,KAAK,IAAIoB,MAAM,CAACC,IAAP,CAAYL,MAAZ,EAAoBM,MAApB,CAA2B,CAACC,CAAD,EAAIC,CAAJ,KAAWR,MAAM,CAACO,CAAD,CAAN,GAAYP,MAAM,CAACQ,CAAD,CAAnB,GAA0BD,CAA1B,GAA8BC,CAAnE,CAA3B;AAEAP,IAAAA,OAAO,GAAGA,OAAO,CAACQ,OAAR,CAAgB,IAAIC,MAAJ,CAAWP,SAAX,EAAsB,GAAtB,CAAhB,EAA4CpC,YAAY,CAACoC,SAAD,CAAxD,CAAV;AAEA,WAAOA,SAAS,GAAGF,OAAZ,GAAsBE,SAA7B;AACH;;AAED,WAASJ,eAAT,CAA0BnG,KAA1B,EAAiC;AAC7B,QAAIlB,KAAK,CAACyG,OAAN,CAAcvF,KAAd,KAAwB,CAA5B,EAA+B;AAC3B,YAAM+G,SAAS,CAAC,wCAAD,CAAf;AACH;;AAEDjI,IAAAA,KAAK,CAAC2E,IAAN,CAAWzD,KAAX;AAEA,QAAIgH,QAAQ,GAAGhC,MAAf;AACAA,IAAAA,MAAM,GAAGA,MAAM,GAAGG,GAAlB;AAEA,QAAIsB,IAAI,GAAGxB,YAAY,IAAIuB,MAAM,CAACC,IAAP,CAAYzG,KAAZ,CAA3B;AACA,QAAIiH,OAAO,GAAG,EAAd;;AACA,SAAK,MAAM9H,GAAX,IAAkBsH,IAAlB,EAAwB;AACpB,YAAMS,cAAc,GAAGtB,iBAAiB,CAACzG,GAAD,EAAMa,KAAN,CAAxC;;AACA,UAAIkH,cAAc,KAAKzH,SAAvB,EAAkC;AAC9B,YAAI0H,MAAM,GAAGC,YAAY,CAACjI,GAAD,CAAZ,GAAoB,GAAjC;;AACA,YAAIgG,GAAG,KAAK,EAAZ,EAAgB;AACZgC,UAAAA,MAAM,IAAI,GAAV;AACH;;AACDA,QAAAA,MAAM,IAAID,cAAV;AACAD,QAAAA,OAAO,CAACxD,IAAR,CAAa0D,MAAb;AACH;AACJ;;AAED,QAAIE,KAAJ;;AACA,QAAIJ,OAAO,CAACrG,MAAR,KAAmB,CAAvB,EAA0B;AACtByG,MAAAA,KAAK,GAAG,IAAR;AACH,KAFD,MAEO;AACH,UAAIC,UAAJ;;AACA,UAAInC,GAAG,KAAK,EAAZ,EAAgB;AACZmC,QAAAA,UAAU,GAAGL,OAAO,CAACM,IAAR,CAAa,GAAb,CAAb;AACAF,QAAAA,KAAK,GAAG,MAAMC,UAAN,GAAmB,GAA3B;AACH,OAHD,MAGO;AACH,YAAIE,SAAS,GAAG,QAAQxC,MAAxB;AACAsC,QAAAA,UAAU,GAAGL,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAb;AACAH,QAAAA,KAAK,GAAG,QAAQrC,MAAR,GAAiBsC,UAAjB,GAA8B,KAA9B,GAAsCN,QAAtC,GAAiD,GAAzD;AACH;AACJ;;AAEDlI,IAAAA,KAAK,CAAC4E,GAAN;AACAsB,IAAAA,MAAM,GAAGgC,QAAT;AACA,WAAOK,KAAP;AACH;;AAED,WAASD,YAAT,CAAuBjI,GAAvB,EAA4B;AACxB,QAAIA,GAAG,CAACyB,MAAJ,KAAe,CAAnB,EAAsB;AAClB,aAAOqF,WAAW,CAAC9G,GAAD,EAAM,IAAN,CAAlB;AACH;;AAED,UAAMsI,SAAS,GAAGjI,MAAM,CAACiB,aAAP,CAAqBtB,GAAG,CAACuB,WAAJ,CAAgB,CAAhB,CAArB,CAAlB;;AACA,QAAI,CAACtC,IAAI,CAACI,aAAL,CAAmBiJ,SAAnB,CAAL,EAAoC;AAChC,aAAOxB,WAAW,CAAC9G,GAAD,EAAM,IAAN,CAAlB;AACH;;AAED,SAAK,IAAImH,CAAC,GAAGmB,SAAS,CAAC7G,MAAvB,EAA+B0F,CAAC,GAAGnH,GAAG,CAACyB,MAAvC,EAA+C0F,CAAC,EAAhD,EAAoD;AAChD,UAAI,CAAClI,IAAI,CAACK,gBAAL,CAAsBe,MAAM,CAACiB,aAAP,CAAqBtB,GAAG,CAACuB,WAAJ,CAAgB4F,CAAhB,CAArB,CAAtB,CAAL,EAAsE;AAClE,eAAOL,WAAW,CAAC9G,GAAD,EAAM,IAAN,CAAlB;AACH;AACJ;;AAED,WAAOA,GAAP;AACH;;AAED,WAAS+G,cAAT,CAAyBlG,KAAzB,EAAgC;AAC5B,QAAIlB,KAAK,CAACyG,OAAN,CAAcvF,KAAd,KAAwB,CAA5B,EAA+B;AAC3B,YAAM+G,SAAS,CAAC,wCAAD,CAAf;AACH;;AAEDjI,IAAAA,KAAK,CAAC2E,IAAN,CAAWzD,KAAX;AAEA,QAAIgH,QAAQ,GAAGhC,MAAf;AACAA,IAAAA,MAAM,GAAGA,MAAM,GAAGG,GAAlB;AAEA,QAAI8B,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtG,KAAK,CAACY,MAA1B,EAAkC0F,CAAC,EAAnC,EAAuC;AACnC,YAAMY,cAAc,GAAGtB,iBAAiB,CAACpG,MAAM,CAAC8G,CAAD,CAAP,EAAYtG,KAAZ,CAAxC;AACAiH,MAAAA,OAAO,CAACxD,IAAR,CAAcyD,cAAc,KAAKzH,SAApB,GAAiCyH,cAAjC,GAAkD,MAA/D;AACH;;AAED,QAAIG,KAAJ;;AACA,QAAIJ,OAAO,CAACrG,MAAR,KAAmB,CAAvB,EAA0B;AACtByG,MAAAA,KAAK,GAAG,IAAR;AACH,KAFD,MAEO;AACH,UAAIlC,GAAG,KAAK,EAAZ,EAAgB;AACZ,YAAImC,UAAU,GAAGL,OAAO,CAACM,IAAR,CAAa,GAAb,CAAjB;AACAF,QAAAA,KAAK,GAAG,MAAMC,UAAN,GAAmB,GAA3B;AACH,OAHD,MAGO;AACH,YAAIE,SAAS,GAAG,QAAQxC,MAAxB;AACA,YAAIsC,UAAU,GAAGL,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAjB;AACAH,QAAAA,KAAK,GAAG,QAAQrC,MAAR,GAAiBsC,UAAjB,GAA8B,KAA9B,GAAsCN,QAAtC,GAAiD,GAAzD;AACH;AACJ;;AAEDlI,IAAAA,KAAK,CAAC4E,GAAN;AACAsB,IAAAA,MAAM,GAAGgC,QAAT;AACA,WAAOK,KAAP;AACH;AACJ,CAlQD;;AAoQA,MAAMK,KAAK,GAAG;AACVrI,EAAAA,KADU;AAEVwF,EAAAA;AAFU,CAAd;AAKA,IAAI8C,GAAG,GAAGD,KAAV;AAEA,eAAeC,GAAf","sourcesContent":["// This is a generated file. Do not edit.\nvar Space_Separator = /[\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\nvar ID_Start = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\nvar ID_Continue = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF9\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE83\\uDE86-\\uDE99\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/;\n\nvar unicode = {\n\tSpace_Separator: Space_Separator,\n\tID_Start: ID_Start,\n\tID_Continue: ID_Continue\n};\n\nvar util = {\n    isSpaceSeparator (c) {\n        return typeof c === 'string' && unicode.Space_Separator.test(c)\n    },\n\n    isIdStartChar (c) {\n        return typeof c === 'string' && (\n            (c >= 'a' && c <= 'z') ||\n        (c >= 'A' && c <= 'Z') ||\n        (c === '$') || (c === '_') ||\n        unicode.ID_Start.test(c)\n        )\n    },\n\n    isIdContinueChar (c) {\n        return typeof c === 'string' && (\n            (c >= 'a' && c <= 'z') ||\n        (c >= 'A' && c <= 'Z') ||\n        (c >= '0' && c <= '9') ||\n        (c === '$') || (c === '_') ||\n        (c === '\\u200C') || (c === '\\u200D') ||\n        unicode.ID_Continue.test(c)\n        )\n    },\n\n    isDigit (c) {\n        return typeof c === 'string' && /[0-9]/.test(c)\n    },\n\n    isHexDigit (c) {\n        return typeof c === 'string' && /[0-9A-Fa-f]/.test(c)\n    },\n};\n\nlet source;\nlet parseState;\nlet stack;\nlet pos;\nlet line;\nlet column;\nlet token;\nlet key;\nlet root;\n\nvar parse = function parse (text, reviver) {\n    source = String(text);\n    parseState = 'start';\n    stack = [];\n    pos = 0;\n    line = 1;\n    column = 0;\n    token = undefined;\n    key = undefined;\n    root = undefined;\n\n    do {\n        token = lex();\n\n        // This code is unreachable.\n        // if (!parseStates[parseState]) {\n        //     throw invalidParseState()\n        // }\n\n        parseStates[parseState]();\n    } while (token.type !== 'eof')\n\n    if (typeof reviver === 'function') {\n        return internalize({'': root}, '', reviver)\n    }\n\n    return root\n};\n\nfunction internalize (holder, name, reviver) {\n    const value = holder[name];\n    if (value != null && typeof value === 'object') {\n        for (const key in value) {\n            const replacement = internalize(value, key, reviver);\n            if (replacement === undefined) {\n                delete value[key];\n            } else {\n                value[key] = replacement;\n            }\n        }\n    }\n\n    return reviver.call(holder, name, value)\n}\n\nlet lexState;\nlet buffer;\nlet doubleQuote;\nlet sign;\nlet c;\n\nfunction lex () {\n    lexState = 'default';\n    buffer = '';\n    doubleQuote = false;\n    sign = 1;\n\n    for (;;) {\n        c = peek();\n\n        // This code is unreachable.\n        // if (!lexStates[lexState]) {\n        //     throw invalidLexState(lexState)\n        // }\n\n        const token = lexStates[lexState]();\n        if (token) {\n            return token\n        }\n    }\n}\n\nfunction peek () {\n    if (source[pos]) {\n        return String.fromCodePoint(source.codePointAt(pos))\n    }\n}\n\nfunction read () {\n    const c = peek();\n\n    if (c === '\\n') {\n        line++;\n        column = 0;\n    } else if (c) {\n        column += c.length;\n    } else {\n        column++;\n    }\n\n    if (c) {\n        pos += c.length;\n    }\n\n    return c\n}\n\nconst lexStates = {\n    default () {\n        switch (c) {\n        case '\\t':\n        case '\\v':\n        case '\\f':\n        case ' ':\n        case '\\u00A0':\n        case '\\uFEFF':\n        case '\\n':\n        case '\\r':\n        case '\\u2028':\n        case '\\u2029':\n            read();\n            return\n\n        case '/':\n            read();\n            lexState = 'comment';\n            return\n\n        case undefined:\n            read();\n            return newToken('eof')\n        }\n\n        if (util.isSpaceSeparator(c)) {\n            read();\n            return\n        }\n\n        // This code is unreachable.\n        // if (!lexStates[parseState]) {\n        //     throw invalidLexState(parseState)\n        // }\n\n        return lexStates[parseState]()\n    },\n\n    comment () {\n        switch (c) {\n        case '*':\n            read();\n            lexState = 'multiLineComment';\n            return\n\n        case '/':\n            read();\n            lexState = 'singleLineComment';\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    multiLineComment () {\n        switch (c) {\n        case '*':\n            read();\n            lexState = 'multiLineCommentAsterisk';\n            return\n\n        case undefined:\n            throw invalidChar(read())\n        }\n\n        read();\n    },\n\n    multiLineCommentAsterisk () {\n        switch (c) {\n        case '*':\n            read();\n            return\n\n        case '/':\n            read();\n            lexState = 'default';\n            return\n\n        case undefined:\n            throw invalidChar(read())\n        }\n\n        read();\n        lexState = 'multiLineComment';\n    },\n\n    singleLineComment () {\n        switch (c) {\n        case '\\n':\n        case '\\r':\n        case '\\u2028':\n        case '\\u2029':\n            read();\n            lexState = 'default';\n            return\n\n        case undefined:\n            read();\n            return newToken('eof')\n        }\n\n        read();\n    },\n\n    value () {\n        switch (c) {\n        case '{':\n        case '[':\n            return newToken('punctuator', read())\n\n        case 'n':\n            read();\n            literal('ull');\n            return newToken('null', null)\n\n        case 't':\n            read();\n            literal('rue');\n            return newToken('boolean', true)\n\n        case 'f':\n            read();\n            literal('alse');\n            return newToken('boolean', false)\n\n        case '-':\n        case '+':\n            if (read() === '-') {\n                sign = -1;\n            }\n\n            lexState = 'sign';\n            return\n\n        case '.':\n            buffer = read();\n            lexState = 'decimalPointLeading';\n            return\n\n        case '0':\n            buffer = read();\n            lexState = 'zero';\n            return\n\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            buffer = read();\n            lexState = 'decimalInteger';\n            return\n\n        case 'I':\n            read();\n            literal('nfinity');\n            return newToken('numeric', Infinity)\n\n        case 'N':\n            read();\n            literal('aN');\n            return newToken('numeric', NaN)\n\n        case '\"':\n        case \"'\":\n            doubleQuote = (read() === '\"');\n            buffer = '';\n            lexState = 'string';\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    identifierNameStartEscape () {\n        if (c !== 'u') {\n            throw invalidChar(read())\n        }\n\n        read();\n        const u = unicodeEscape();\n        switch (u) {\n        case '$':\n        case '_':\n            break\n\n        default:\n            if (!util.isIdStartChar(u)) {\n                throw invalidIdentifier()\n            }\n\n            break\n        }\n\n        buffer += u;\n        lexState = 'identifierName';\n    },\n\n    identifierName () {\n        switch (c) {\n        case '$':\n        case '_':\n        case '\\u200C':\n        case '\\u200D':\n            buffer += read();\n            return\n\n        case '\\\\':\n            read();\n            lexState = 'identifierNameEscape';\n            return\n        }\n\n        if (util.isIdContinueChar(c)) {\n            buffer += read();\n            return\n        }\n\n        return newToken('identifier', buffer)\n    },\n\n    identifierNameEscape () {\n        if (c !== 'u') {\n            throw invalidChar(read())\n        }\n\n        read();\n        const u = unicodeEscape();\n        switch (u) {\n        case '$':\n        case '_':\n        case '\\u200C':\n        case '\\u200D':\n            break\n\n        default:\n            if (!util.isIdContinueChar(u)) {\n                throw invalidIdentifier()\n            }\n\n            break\n        }\n\n        buffer += u;\n        lexState = 'identifierName';\n    },\n\n    sign () {\n        switch (c) {\n        case '.':\n            buffer = read();\n            lexState = 'decimalPointLeading';\n            return\n\n        case '0':\n            buffer = read();\n            lexState = 'zero';\n            return\n\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            buffer = read();\n            lexState = 'decimalInteger';\n            return\n\n        case 'I':\n            read();\n            literal('nfinity');\n            return newToken('numeric', sign * Infinity)\n\n        case 'N':\n            read();\n            literal('aN');\n            return newToken('numeric', NaN)\n        }\n\n        throw invalidChar(read())\n    },\n\n    zero () {\n        switch (c) {\n        case '.':\n            buffer += read();\n            lexState = 'decimalPoint';\n            return\n\n        case 'e':\n        case 'E':\n            buffer += read();\n            lexState = 'decimalExponent';\n            return\n\n        case 'x':\n        case 'X':\n            buffer += read();\n            lexState = 'hexadecimal';\n            return\n        }\n\n        return newToken('numeric', sign * 0)\n    },\n\n    decimalInteger () {\n        switch (c) {\n        case '.':\n            buffer += read();\n            lexState = 'decimalPoint';\n            return\n\n        case 'e':\n        case 'E':\n            buffer += read();\n            lexState = 'decimalExponent';\n            return\n        }\n\n        if (util.isDigit(c)) {\n            buffer += read();\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    decimalPointLeading () {\n        if (util.isDigit(c)) {\n            buffer += read();\n            lexState = 'decimalFraction';\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    decimalPoint () {\n        switch (c) {\n        case 'e':\n        case 'E':\n            buffer += read();\n            lexState = 'decimalExponent';\n            return\n        }\n\n        if (util.isDigit(c)) {\n            buffer += read();\n            lexState = 'decimalFraction';\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    decimalFraction () {\n        switch (c) {\n        case 'e':\n        case 'E':\n            buffer += read();\n            lexState = 'decimalExponent';\n            return\n        }\n\n        if (util.isDigit(c)) {\n            buffer += read();\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    decimalExponent () {\n        switch (c) {\n        case '+':\n        case '-':\n            buffer += read();\n            lexState = 'decimalExponentSign';\n            return\n        }\n\n        if (util.isDigit(c)) {\n            buffer += read();\n            lexState = 'decimalExponentInteger';\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    decimalExponentSign () {\n        if (util.isDigit(c)) {\n            buffer += read();\n            lexState = 'decimalExponentInteger';\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    decimalExponentInteger () {\n        if (util.isDigit(c)) {\n            buffer += read();\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    hexadecimal () {\n        if (util.isHexDigit(c)) {\n            buffer += read();\n            lexState = 'hexadecimalInteger';\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    hexadecimalInteger () {\n        if (util.isHexDigit(c)) {\n            buffer += read();\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    string () {\n        switch (c) {\n        case '\\\\':\n            read();\n            buffer += escape();\n            return\n\n        case '\"':\n            if (doubleQuote) {\n                read();\n                return newToken('string', buffer)\n            }\n\n            buffer += read();\n            return\n\n        case \"'\":\n            if (!doubleQuote) {\n                read();\n                return newToken('string', buffer)\n            }\n\n            buffer += read();\n            return\n\n        case '\\n':\n        case '\\r':\n            throw invalidChar(read())\n\n        case '\\u2028':\n        case '\\u2029':\n            separatorChar(c);\n            break\n\n        case undefined:\n            throw invalidChar(read())\n        }\n\n        buffer += read();\n    },\n\n    start () {\n        switch (c) {\n        case '{':\n        case '[':\n            return newToken('punctuator', read())\n\n        // This code is unreachable since the default lexState handles eof.\n        // case undefined:\n        //     return newToken('eof')\n        }\n\n        lexState = 'value';\n    },\n\n    beforePropertyName () {\n        switch (c) {\n        case '$':\n        case '_':\n            buffer = read();\n            lexState = 'identifierName';\n            return\n\n        case '\\\\':\n            read();\n            lexState = 'identifierNameStartEscape';\n            return\n\n        case '}':\n            return newToken('punctuator', read())\n\n        case '\"':\n        case \"'\":\n            doubleQuote = (read() === '\"');\n            lexState = 'string';\n            return\n        }\n\n        if (util.isIdStartChar(c)) {\n            buffer += read();\n            lexState = 'identifierName';\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    afterPropertyName () {\n        if (c === ':') {\n            return newToken('punctuator', read())\n        }\n\n        throw invalidChar(read())\n    },\n\n    beforePropertyValue () {\n        lexState = 'value';\n    },\n\n    afterPropertyValue () {\n        switch (c) {\n        case ',':\n        case '}':\n            return newToken('punctuator', read())\n        }\n\n        throw invalidChar(read())\n    },\n\n    beforeArrayValue () {\n        if (c === ']') {\n            return newToken('punctuator', read())\n        }\n\n        lexState = 'value';\n    },\n\n    afterArrayValue () {\n        switch (c) {\n        case ',':\n        case ']':\n            return newToken('punctuator', read())\n        }\n\n        throw invalidChar(read())\n    },\n\n    end () {\n        // This code is unreachable since it's handled by the default lexState.\n        // if (c === undefined) {\n        //     read()\n        //     return newToken('eof')\n        // }\n\n        throw invalidChar(read())\n    },\n};\n\nfunction newToken (type, value) {\n    return {\n        type,\n        value,\n        line,\n        column,\n    }\n}\n\nfunction literal (s) {\n    for (const c of s) {\n        const p = peek();\n\n        if (p !== c) {\n            throw invalidChar(read())\n        }\n\n        read();\n    }\n}\n\nfunction escape () {\n    const c = peek();\n    switch (c) {\n    case 'b':\n        read();\n        return '\\b'\n\n    case 'f':\n        read();\n        return '\\f'\n\n    case 'n':\n        read();\n        return '\\n'\n\n    case 'r':\n        read();\n        return '\\r'\n\n    case 't':\n        read();\n        return '\\t'\n\n    case 'v':\n        read();\n        return '\\v'\n\n    case '0':\n        read();\n        if (util.isDigit(peek())) {\n            throw invalidChar(read())\n        }\n\n        return '\\0'\n\n    case 'x':\n        read();\n        return hexEscape()\n\n    case 'u':\n        read();\n        return unicodeEscape()\n\n    case '\\n':\n    case '\\u2028':\n    case '\\u2029':\n        read();\n        return ''\n\n    case '\\r':\n        read();\n        if (peek() === '\\n') {\n            read();\n        }\n\n        return ''\n\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n        throw invalidChar(read())\n\n    case undefined:\n        throw invalidChar(read())\n    }\n\n    return read()\n}\n\nfunction hexEscape () {\n    let buffer = '';\n    let c = peek();\n\n    if (!util.isHexDigit(c)) {\n        throw invalidChar(read())\n    }\n\n    buffer += read();\n\n    c = peek();\n    if (!util.isHexDigit(c)) {\n        throw invalidChar(read())\n    }\n\n    buffer += read();\n\n    return String.fromCodePoint(parseInt(buffer, 16))\n}\n\nfunction unicodeEscape () {\n    let buffer = '';\n    let count = 4;\n\n    while (count-- > 0) {\n        const c = peek();\n        if (!util.isHexDigit(c)) {\n            throw invalidChar(read())\n        }\n\n        buffer += read();\n    }\n\n    return String.fromCodePoint(parseInt(buffer, 16))\n}\n\nconst parseStates = {\n    start () {\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        push();\n    },\n\n    beforePropertyName () {\n        switch (token.type) {\n        case 'identifier':\n        case 'string':\n            key = token.value;\n            parseState = 'afterPropertyName';\n            return\n\n        case 'punctuator':\n            // This code is unreachable since it's handled by the lexState.\n            // if (token.value !== '}') {\n            //     throw invalidToken()\n            // }\n\n            pop();\n            return\n\n        case 'eof':\n            throw invalidEOF()\n        }\n\n        // This code is unreachable since it's handled by the lexState.\n        // throw invalidToken()\n    },\n\n    afterPropertyName () {\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.type !== 'punctuator' || token.value !== ':') {\n        //     throw invalidToken()\n        // }\n\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        parseState = 'beforePropertyValue';\n    },\n\n    beforePropertyValue () {\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        push();\n    },\n\n    beforeArrayValue () {\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        if (token.type === 'punctuator' && token.value === ']') {\n            pop();\n            return\n        }\n\n        push();\n    },\n\n    afterPropertyValue () {\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.type !== 'punctuator') {\n        //     throw invalidToken()\n        // }\n\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        switch (token.value) {\n        case ',':\n            parseState = 'beforePropertyName';\n            return\n\n        case '}':\n            pop();\n        }\n\n        // This code is unreachable since it's handled by the lexState.\n        // throw invalidToken()\n    },\n\n    afterArrayValue () {\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.type !== 'punctuator') {\n        //     throw invalidToken()\n        // }\n\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        switch (token.value) {\n        case ',':\n            parseState = 'beforeArrayValue';\n            return\n\n        case ']':\n            pop();\n        }\n\n        // This code is unreachable since it's handled by the lexState.\n        // throw invalidToken()\n    },\n\n    end () {\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.type !== 'eof') {\n        //     throw invalidToken()\n        // }\n    },\n};\n\nfunction push () {\n    let value;\n\n    switch (token.type) {\n    case 'punctuator':\n        switch (token.value) {\n        case '{':\n            value = {};\n            break\n\n        case '[':\n            value = [];\n            break\n        }\n\n        break\n\n    case 'null':\n    case 'boolean':\n    case 'numeric':\n    case 'string':\n        value = token.value;\n        break\n\n    // This code is unreachable.\n    // default:\n    //     throw invalidToken()\n    }\n\n    if (root === undefined) {\n        root = value;\n    } else {\n        const parent = stack[stack.length - 1];\n        if (Array.isArray(parent)) {\n            parent.push(value);\n        } else {\n            parent[key] = value;\n        }\n    }\n\n    if (value !== null && typeof value === 'object') {\n        stack.push(value);\n\n        if (Array.isArray(value)) {\n            parseState = 'beforeArrayValue';\n        } else {\n            parseState = 'beforePropertyName';\n        }\n    } else {\n        const current = stack[stack.length - 1];\n        if (current == null) {\n            parseState = 'end';\n        } else if (Array.isArray(current)) {\n            parseState = 'afterArrayValue';\n        } else {\n            parseState = 'afterPropertyValue';\n        }\n    }\n}\n\nfunction pop () {\n    stack.pop();\n\n    const current = stack[stack.length - 1];\n    if (current == null) {\n        parseState = 'end';\n    } else if (Array.isArray(current)) {\n        parseState = 'afterArrayValue';\n    } else {\n        parseState = 'afterPropertyValue';\n    }\n}\n\n// This code is unreachable.\n// function invalidParseState () {\n//     return new Error(`JSON5: invalid parse state '${parseState}'`)\n// }\n\n// This code is unreachable.\n// function invalidLexState (state) {\n//     return new Error(`JSON5: invalid lex state '${state}'`)\n// }\n\nfunction invalidChar (c) {\n    if (c === undefined) {\n        return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n    }\n\n    return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)\n}\n\nfunction invalidEOF () {\n    return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n}\n\n// This code is unreachable.\n// function invalidToken () {\n//     if (token.type === 'eof') {\n//         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n//     }\n\n//     const c = String.fromCodePoint(token.value.codePointAt(0))\n//     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)\n// }\n\nfunction invalidIdentifier () {\n    column -= 5;\n    return syntaxError(`JSON5: invalid identifier character at ${line}:${column}`)\n}\n\nfunction separatorChar (c) {\n    console.warn(`JSON5: '${formatChar(c)}' in strings is not valid ECMAScript; consider escaping`);\n}\n\nfunction formatChar (c) {\n    const replacements = {\n        \"'\": \"\\\\'\",\n        '\"': '\\\\\"',\n        '\\\\': '\\\\\\\\',\n        '\\b': '\\\\b',\n        '\\f': '\\\\f',\n        '\\n': '\\\\n',\n        '\\r': '\\\\r',\n        '\\t': '\\\\t',\n        '\\v': '\\\\v',\n        '\\0': '\\\\0',\n        '\\u2028': '\\\\u2028',\n        '\\u2029': '\\\\u2029',\n    };\n\n    if (replacements[c]) {\n        return replacements[c]\n    }\n\n    if (c < ' ') {\n        const hexString = c.charCodeAt(0).toString(16);\n        return '\\\\x' + ('00' + hexString).substring(hexString.length)\n    }\n\n    return c\n}\n\nfunction syntaxError (message) {\n    const err = new SyntaxError(message);\n    err.lineNumber = line;\n    err.columnNumber = column;\n    return err\n}\n\nvar stringify = function stringify (value, replacer, space) {\n    const stack = [];\n    let indent = '';\n    let propertyList;\n    let replacerFunc;\n    let gap = '';\n    let quote;\n\n    if (\n        replacer != null &&\n        typeof replacer === 'object' &&\n        !Array.isArray(replacer)\n    ) {\n        space = replacer.space;\n        quote = replacer.quote;\n        replacer = replacer.replacer;\n    }\n\n    if (typeof replacer === 'function') {\n        replacerFunc = replacer;\n    } else if (Array.isArray(replacer)) {\n        propertyList = [];\n        for (const v of replacer) {\n            let item;\n\n            if (typeof v === 'string') {\n                item = v;\n            } else if (\n                typeof v === 'number' ||\n                v instanceof String ||\n                v instanceof Number\n            ) {\n                item = String(v);\n            }\n\n            if (item !== undefined && propertyList.indexOf(item) < 0) {\n                propertyList.push(item);\n            }\n        }\n    }\n\n    if (space instanceof Number) {\n        space = Number(space);\n    } else if (space instanceof String) {\n        space = String(space);\n    }\n\n    if (typeof space === 'number') {\n        if (space > 0) {\n            space = Math.min(10, Math.floor(space));\n            gap = '          '.substr(0, space);\n        }\n    } else if (typeof space === 'string') {\n        gap = space.substr(0, 10);\n    }\n\n    return serializeProperty('', {'': value})\n\n    function serializeProperty (key, holder) {\n        let value = holder[key];\n        if (value != null) {\n            if (typeof value.toJSON5 === 'function') {\n                value = value.toJSON5(key);\n            } else if (typeof value.toJSON === 'function') {\n                value = value.toJSON(key);\n            }\n        }\n\n        if (replacerFunc) {\n            value = replacerFunc.call(holder, key, value);\n        }\n\n        if (value instanceof Number) {\n            value = Number(value);\n        } else if (value instanceof String) {\n            value = String(value);\n        } else if (value instanceof Boolean) {\n            value = value.valueOf();\n        }\n\n        switch (value) {\n        case null: return 'null'\n        case true: return 'true'\n        case false: return 'false'\n        }\n\n        if (typeof value === 'string') {\n            return quoteString(value, false)\n        }\n\n        if (typeof value === 'number') {\n            return String(value)\n        }\n\n        if (typeof value === 'object') {\n            return Array.isArray(value) ? serializeArray(value) : serializeObject(value)\n        }\n\n        return undefined\n    }\n\n    function quoteString (value) {\n        const quotes = {\n            \"'\": 0.1,\n            '\"': 0.2,\n        };\n\n        const replacements = {\n            \"'\": \"\\\\'\",\n            '\"': '\\\\\"',\n            '\\\\': '\\\\\\\\',\n            '\\b': '\\\\b',\n            '\\f': '\\\\f',\n            '\\n': '\\\\n',\n            '\\r': '\\\\r',\n            '\\t': '\\\\t',\n            '\\v': '\\\\v',\n            '\\0': '\\\\0',\n            '\\u2028': '\\\\u2028',\n            '\\u2029': '\\\\u2029',\n        };\n\n        let product = '';\n\n        for (let i = 0; i < value.length; i++) {\n            const c = value[i];\n            switch (c) {\n            case \"'\":\n            case '\"':\n                quotes[c]++;\n                product += c;\n                continue\n\n            case '\\0':\n                if (util.isDigit(value[i + 1])) {\n                    product += '\\\\x00';\n                    continue\n                }\n            }\n\n            if (replacements[c]) {\n                product += replacements[c];\n                continue\n            }\n\n            if (c < ' ') {\n                let hexString = c.charCodeAt(0).toString(16);\n                product += '\\\\x' + ('00' + hexString).substring(hexString.length);\n                continue\n            }\n\n            product += c;\n        }\n\n        const quoteChar = quote || Object.keys(quotes).reduce((a, b) => (quotes[a] < quotes[b]) ? a : b);\n\n        product = product.replace(new RegExp(quoteChar, 'g'), replacements[quoteChar]);\n\n        return quoteChar + product + quoteChar\n    }\n\n    function serializeObject (value) {\n        if (stack.indexOf(value) >= 0) {\n            throw TypeError('Converting circular structure to JSON5')\n        }\n\n        stack.push(value);\n\n        let stepback = indent;\n        indent = indent + gap;\n\n        let keys = propertyList || Object.keys(value);\n        let partial = [];\n        for (const key of keys) {\n            const propertyString = serializeProperty(key, value);\n            if (propertyString !== undefined) {\n                let member = serializeKey(key) + ':';\n                if (gap !== '') {\n                    member += ' ';\n                }\n                member += propertyString;\n                partial.push(member);\n            }\n        }\n\n        let final;\n        if (partial.length === 0) {\n            final = '{}';\n        } else {\n            let properties;\n            if (gap === '') {\n                properties = partial.join(',');\n                final = '{' + properties + '}';\n            } else {\n                let separator = ',\\n' + indent;\n                properties = partial.join(separator);\n                final = '{\\n' + indent + properties + ',\\n' + stepback + '}';\n            }\n        }\n\n        stack.pop();\n        indent = stepback;\n        return final\n    }\n\n    function serializeKey (key) {\n        if (key.length === 0) {\n            return quoteString(key, true)\n        }\n\n        const firstChar = String.fromCodePoint(key.codePointAt(0));\n        if (!util.isIdStartChar(firstChar)) {\n            return quoteString(key, true)\n        }\n\n        for (let i = firstChar.length; i < key.length; i++) {\n            if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {\n                return quoteString(key, true)\n            }\n        }\n\n        return key\n    }\n\n    function serializeArray (value) {\n        if (stack.indexOf(value) >= 0) {\n            throw TypeError('Converting circular structure to JSON5')\n        }\n\n        stack.push(value);\n\n        let stepback = indent;\n        indent = indent + gap;\n\n        let partial = [];\n        for (let i = 0; i < value.length; i++) {\n            const propertyString = serializeProperty(String(i), value);\n            partial.push((propertyString !== undefined) ? propertyString : 'null');\n        }\n\n        let final;\n        if (partial.length === 0) {\n            final = '[]';\n        } else {\n            if (gap === '') {\n                let properties = partial.join(',');\n                final = '[' + properties + ']';\n            } else {\n                let separator = ',\\n' + indent;\n                let properties = partial.join(separator);\n                final = '[\\n' + indent + properties + ',\\n' + stepback + ']';\n            }\n        }\n\n        stack.pop();\n        indent = stepback;\n        return final\n    }\n};\n\nconst JSON5 = {\n    parse,\n    stringify,\n};\n\nvar lib = JSON5;\n\nexport default lib;\n"]},"metadata":{},"sourceType":"module"}