{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.printDiffOrStringified = void 0;\n\nvar _jestDiff = _interopRequireWildcard(require('jest-diff'));\n\nvar _jestGetType = _interopRequireWildcard(require('jest-get-type'));\n\nvar _jestMatcherUtils = require('jest-matcher-utils');\n\nvar _prettyFormat = _interopRequireDefault(require('pretty-format'));\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst isLineDiffable = received => {\n  const receivedType = (0, _jestGetType.default)(received);\n\n  if ((0, _jestGetType.isPrimitive)(received)) {\n    return typeof received === 'string' && received.includes('\\n');\n  }\n\n  if (receivedType === 'date' || receivedType === 'function' || receivedType === 'regexp') {\n    return false;\n  }\n\n  if (received instanceof Error) {\n    return false;\n  }\n\n  if (receivedType === 'object' && typeof received.asymmetricMatch === 'function') {\n    return false;\n  }\n\n  return true;\n};\n\nconst printDiffOrStringified = (expectedSerializedTrimmed, receivedSerializedTrimmed, received, expectedLabel, receivedLabel, expand) => {\n  if (typeof received === 'string') {\n    if (expectedSerializedTrimmed.length >= 2 && expectedSerializedTrimmed.startsWith('\"') && expectedSerializedTrimmed.endsWith('\"') && receivedSerializedTrimmed === (0, _utils.unescape)((0, _prettyFormat.default)(received))) {\n      // The expected snapshot looks like a stringified string.\n      // The received serialization is default stringified string.\n      // Undo default serialization of expected snapshot:\n      // Remove enclosing double quote marks.\n      // Remove backslash escape preceding backslash here,\n      // because unescape replaced it only preceding double quote mark.\n      return (0, _jestMatcherUtils.printDiffOrStringify)(expectedSerializedTrimmed.slice(1, -1).replace(/\\\\\\\\/g, '\\\\'), received, expectedLabel, receivedLabel, expand);\n    } // Display substring highlight even when strings have custom serialization.\n\n\n    const result = (0, _jestDiff.getStringDiff)(expectedSerializedTrimmed, receivedSerializedTrimmed, {\n      aAnnotation: expectedLabel,\n      bAnnotation: receivedLabel,\n      expand\n    });\n\n    if (result !== null) {\n      if (result.isMultiline) {\n        return result.annotatedDiff;\n      } // Because not default stringify, call EXPECTED_COLOR and RECEIVED_COLOR\n      // This is reason to call getStringDiff instead of printDiffOrStringify\n      // Because there is no closing double quote mark at end of single lines,\n      // future improvement is to call replaceSpacesAtEnd if it becomes public.\n\n\n      const printLabel = (0, _jestMatcherUtils.getLabelPrinter)(expectedLabel, receivedLabel);\n      return printLabel(expectedLabel) + (0, _jestMatcherUtils.EXPECTED_COLOR)(result.a) + '\\n' + printLabel(receivedLabel) + (0, _jestMatcherUtils.RECEIVED_COLOR)(result.b);\n    }\n  }\n\n  if ((expectedSerializedTrimmed.includes('\\n') || receivedSerializedTrimmed.includes('\\n')) && isLineDiffable(received)) {\n    return (0, _jestDiff.default)(expectedSerializedTrimmed, receivedSerializedTrimmed, {\n      aAnnotation: expectedLabel,\n      bAnnotation: receivedLabel,\n      expand\n    });\n  }\n\n  const printLabel = (0, _jestMatcherUtils.getLabelPrinter)(expectedLabel, receivedLabel);\n  return printLabel(expectedLabel) + (0, _jestMatcherUtils.EXPECTED_COLOR)(expectedSerializedTrimmed) + '\\n' + printLabel(receivedLabel) + (0, _jestMatcherUtils.RECEIVED_COLOR)(receivedSerializedTrimmed);\n};\n\nexports.printDiffOrStringified = printDiffOrStringified;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-snapshot/build/print.js"],"names":["Object","defineProperty","exports","value","printDiffOrStringified","_jestDiff","_interopRequireWildcard","require","_jestGetType","_jestMatcherUtils","_prettyFormat","_interopRequireDefault","_utils","obj","__esModule","default","newObj","key","prototype","hasOwnProperty","call","desc","getOwnPropertyDescriptor","get","set","isLineDiffable","received","receivedType","isPrimitive","includes","Error","asymmetricMatch","expectedSerializedTrimmed","receivedSerializedTrimmed","expectedLabel","receivedLabel","expand","length","startsWith","endsWith","unescape","printDiffOrStringify","slice","replace","result","getStringDiff","aAnnotation","bAnnotation","isMultiline","annotatedDiff","printLabel","getLabelPrinter","EXPECTED_COLOR","a","RECEIVED_COLOR","b"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.printDiffOrStringified = void 0;\n\nvar _jestDiff = _interopRequireWildcard(require('jest-diff'));\n\nvar _jestGetType = _interopRequireWildcard(require('jest-get-type'));\n\nvar _jestMatcherUtils = require('jest-matcher-utils');\n\nvar _prettyFormat = _interopRequireDefault(require('pretty-format'));\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc =\n            Object.defineProperty && Object.getOwnPropertyDescriptor\n              ? Object.getOwnPropertyDescriptor(obj, key)\n              : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst isLineDiffable = received => {\n  const receivedType = (0, _jestGetType.default)(received);\n\n  if ((0, _jestGetType.isPrimitive)(received)) {\n    return typeof received === 'string' && received.includes('\\n');\n  }\n\n  if (\n    receivedType === 'date' ||\n    receivedType === 'function' ||\n    receivedType === 'regexp'\n  ) {\n    return false;\n  }\n\n  if (received instanceof Error) {\n    return false;\n  }\n\n  if (\n    receivedType === 'object' &&\n    typeof received.asymmetricMatch === 'function'\n  ) {\n    return false;\n  }\n\n  return true;\n};\n\nconst printDiffOrStringified = (\n  expectedSerializedTrimmed,\n  receivedSerializedTrimmed,\n  received,\n  expectedLabel,\n  receivedLabel,\n  expand\n) => {\n  if (typeof received === 'string') {\n    if (\n      expectedSerializedTrimmed.length >= 2 &&\n      expectedSerializedTrimmed.startsWith('\"') &&\n      expectedSerializedTrimmed.endsWith('\"') &&\n      receivedSerializedTrimmed ===\n        (0, _utils.unescape)((0, _prettyFormat.default)(received))\n    ) {\n      // The expected snapshot looks like a stringified string.\n      // The received serialization is default stringified string.\n      // Undo default serialization of expected snapshot:\n      // Remove enclosing double quote marks.\n      // Remove backslash escape preceding backslash here,\n      // because unescape replaced it only preceding double quote mark.\n      return (0, _jestMatcherUtils.printDiffOrStringify)(\n        expectedSerializedTrimmed.slice(1, -1).replace(/\\\\\\\\/g, '\\\\'),\n        received,\n        expectedLabel,\n        receivedLabel,\n        expand\n      );\n    } // Display substring highlight even when strings have custom serialization.\n\n    const result = (0, _jestDiff.getStringDiff)(\n      expectedSerializedTrimmed,\n      receivedSerializedTrimmed,\n      {\n        aAnnotation: expectedLabel,\n        bAnnotation: receivedLabel,\n        expand\n      }\n    );\n\n    if (result !== null) {\n      if (result.isMultiline) {\n        return result.annotatedDiff;\n      } // Because not default stringify, call EXPECTED_COLOR and RECEIVED_COLOR\n      // This is reason to call getStringDiff instead of printDiffOrStringify\n      // Because there is no closing double quote mark at end of single lines,\n      // future improvement is to call replaceSpacesAtEnd if it becomes public.\n\n      const printLabel = (0, _jestMatcherUtils.getLabelPrinter)(\n        expectedLabel,\n        receivedLabel\n      );\n      return (\n        printLabel(expectedLabel) +\n        (0, _jestMatcherUtils.EXPECTED_COLOR)(result.a) +\n        '\\n' +\n        printLabel(receivedLabel) +\n        (0, _jestMatcherUtils.RECEIVED_COLOR)(result.b)\n      );\n    }\n  }\n\n  if (\n    (expectedSerializedTrimmed.includes('\\n') ||\n      receivedSerializedTrimmed.includes('\\n')) &&\n    isLineDiffable(received)\n  ) {\n    return (0, _jestDiff.default)(\n      expectedSerializedTrimmed,\n      receivedSerializedTrimmed,\n      {\n        aAnnotation: expectedLabel,\n        bAnnotation: receivedLabel,\n        expand\n      }\n    );\n  }\n\n  const printLabel = (0, _jestMatcherUtils.getLabelPrinter)(\n    expectedLabel,\n    receivedLabel\n  );\n  return (\n    printLabel(expectedLabel) +\n    (0, _jestMatcherUtils.EXPECTED_COLOR)(expectedSerializedTrimmed) +\n    '\\n' +\n    printLabel(receivedLabel) +\n    (0, _jestMatcherUtils.RECEIVED_COLOR)(receivedSerializedTrimmed)\n  );\n};\n\nexports.printDiffOrStringified = printDiffOrStringified;\n"]},"metadata":{},"sourceType":"script"}