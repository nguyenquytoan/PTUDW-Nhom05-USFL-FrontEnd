{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = jasmineAsyncInstall;\n\nvar _co = _interopRequireDefault(require('co'));\n\nvar _isGeneratorFn = _interopRequireDefault(require('is-generator-fn'));\n\nvar _throat = _interopRequireDefault(require('throat'));\n\nvar _isError3 = _interopRequireDefault(require('./isError'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Promise = global[Symbol.for('jest-native-promise')] || global.Promise;\n\nfunction isPromise(obj) {\n  return obj && typeof obj.then === 'function';\n}\n\nfunction promisifyLifeCycleFunction(originalFn, env) {\n  return function (fn, timeout) {\n    if (!fn) {\n      return originalFn.call(env);\n    }\n\n    const hasDoneCallback = typeof fn === 'function' && fn.length > 0;\n\n    if (hasDoneCallback) {\n      // Jasmine will handle it\n      return originalFn.call(env, fn, timeout);\n    }\n\n    const extraError = new Error(); // Without this line v8 stores references to all closures\n    // in the stack in the Error object. This line stringifies the stack\n    // property to allow garbage-collecting objects on the stack\n    // https://crbug.com/v8/7142\n\n    extraError.stack = extraError.stack; // We make *all* functions async and run `done` right away if they\n    // didn't return a promise.\n\n    const asyncJestLifecycle = function asyncJestLifecycle(done) {\n      const wrappedFn = (0, _isGeneratorFn.default)(fn) ? _co.default.wrap(fn) : fn;\n      const returnValue = wrappedFn.call({});\n\n      if (isPromise(returnValue)) {\n        returnValue.then(done.bind(null, null), error => {\n          const _isError = (0, _isError3.default)(error),\n                checkIsError = _isError.isError,\n                message = _isError.message;\n\n          if (message) {\n            extraError.message = message;\n          }\n\n          done.fail(checkIsError ? error : extraError);\n        });\n      } else {\n        done();\n      }\n    };\n\n    return originalFn.call(env, asyncJestLifecycle, timeout);\n  };\n} // Similar to promisifyLifeCycleFunction but throws an error\n// when the return value is neither a Promise nor `undefined`\n\n\nfunction promisifyIt(originalFn, env, jasmine) {\n  return function (specName, fn, timeout) {\n    if (!fn) {\n      const spec = originalFn.call(env, specName);\n      spec.pend('not implemented');\n      return spec;\n    }\n\n    const hasDoneCallback = fn.length > 0;\n\n    if (hasDoneCallback) {\n      return originalFn.call(env, specName, fn, timeout);\n    }\n\n    const extraError = new Error(); // Without this line v8 stores references to all closures\n    // in the stack in the Error object. This line stringifies the stack\n    // property to allow garbage-collecting objects on the stack\n    // https://crbug.com/v8/7142\n\n    extraError.stack = extraError.stack;\n\n    const asyncJestTest = function asyncJestTest(done) {\n      const wrappedFn = (0, _isGeneratorFn.default)(fn) ? _co.default.wrap(fn) : fn;\n      const returnValue = wrappedFn.call({});\n\n      if (isPromise(returnValue)) {\n        returnValue.then(done.bind(null, null), error => {\n          const _isError2 = (0, _isError3.default)(error),\n                checkIsError = _isError2.isError,\n                message = _isError2.message;\n\n          if (message) {\n            extraError.message = message;\n          }\n\n          if (jasmine.Spec.isPendingSpecException(error)) {\n            env.pending(message);\n            done();\n          } else {\n            done.fail(checkIsError ? error : extraError);\n          }\n        });\n      } else if (returnValue === undefined) {\n        done();\n      } else {\n        done.fail(new Error('Jest: `it` and `test` must return either a Promise or undefined.'));\n      }\n    };\n\n    return originalFn.call(env, specName, asyncJestTest, timeout);\n  };\n}\n\nfunction makeConcurrent(originalFn, env, mutex) {\n  return function (specName, fn, timeout) {\n    if (env != null && !env.specFilter({\n      getFullName: () => specName || ''\n    })) {\n      return originalFn.call(env, specName, () => Promise.resolve(), timeout);\n    }\n\n    let promise;\n\n    try {\n      promise = mutex(() => {\n        const promise = fn();\n\n        if (isPromise(promise)) {\n          return promise;\n        }\n\n        throw new Error(`Jest: concurrent test \"${specName}\" must return a Promise.`);\n      });\n    } catch (error) {\n      return originalFn.call(env, specName, () => Promise.reject(error));\n    }\n\n    return originalFn.call(env, specName, () => promise, timeout);\n  };\n}\n\nfunction jasmineAsyncInstall(globalConfig, global) {\n  const jasmine = global.jasmine;\n  const mutex = (0, _throat.default)(globalConfig.maxConcurrency);\n  const env = jasmine.getEnv();\n  env.it = promisifyIt(env.it, env, jasmine);\n  env.fit = promisifyIt(env.fit, env, jasmine);\n\n  global.it.concurrent = (env => {\n    const concurrent = makeConcurrent(env.it, env, mutex);\n    concurrent.only = makeConcurrent(env.fit, env, mutex);\n    concurrent.skip = makeConcurrent(env.xit, env, mutex);\n    return concurrent;\n  })(env);\n\n  global.fit.concurrent = makeConcurrent(env.fit, env, mutex);\n  env.afterAll = promisifyLifeCycleFunction(env.afterAll, env);\n  env.afterEach = promisifyLifeCycleFunction(env.afterEach, env);\n  env.beforeAll = promisifyLifeCycleFunction(env.beforeAll, env);\n  env.beforeEach = promisifyLifeCycleFunction(env.beforeEach, env);\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js"],"names":["Object","defineProperty","exports","value","default","jasmineAsyncInstall","_co","_interopRequireDefault","require","_isGeneratorFn","_throat","_isError3","obj","__esModule","Symbol","global","Promise","for","isPromise","then","promisifyLifeCycleFunction","originalFn","env","fn","timeout","call","hasDoneCallback","length","extraError","Error","stack","asyncJestLifecycle","done","wrappedFn","wrap","returnValue","bind","error","_isError","checkIsError","isError","message","fail","promisifyIt","jasmine","specName","spec","pend","asyncJestTest","_isError2","Spec","isPendingSpecException","pending","undefined","makeConcurrent","mutex","specFilter","getFullName","resolve","promise","reject","globalConfig","maxConcurrency","getEnv","it","fit","concurrent","only","skip","xit","afterAll","afterEach","beforeAll","beforeEach"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,mBAAlB;;AAEA,IAAIC,GAAG,GAAGC,sBAAsB,CAACC,OAAO,CAAC,IAAD,CAAR,CAAhC;;AAEA,IAAIC,cAAc,GAAGF,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAA3C;;AAEA,IAAIE,OAAO,GAAGH,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAApC;;AAEA,IAAIG,SAAS,GAAGJ,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAAtC;;AAEA,SAASD,sBAAT,CAAgCK,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAACR,IAAAA,OAAO,EAAEQ;AAAV,GAArC;AACD;;AAED,IAAIE,MAAM,GAAGC,MAAM,CAAC,0BAAD,CAAN,IAAsCA,MAAM,CAACD,MAA1D;AACA,IAAIA,MAAM,GAAGC,MAAM,CAAC,0BAAD,CAAN,IAAsCA,MAAM,CAACD,MAA1D;AACA,IAAIE,OAAO,GAAGD,MAAM,CAACD,MAAM,CAACG,GAAP,CAAW,qBAAX,CAAD,CAAN,IAA6CF,MAAM,CAACC,OAAlE;;AAEA,SAASE,SAAT,CAAmBN,GAAnB,EAAwB;AACtB,SAAOA,GAAG,IAAI,OAAOA,GAAG,CAACO,IAAX,KAAoB,UAAlC;AACD;;AAED,SAASC,0BAAT,CAAoCC,UAApC,EAAgDC,GAAhD,EAAqD;AACnD,SAAO,UAASC,EAAT,EAAaC,OAAb,EAAsB;AAC3B,QAAI,CAACD,EAAL,EAAS;AACP,aAAOF,UAAU,CAACI,IAAX,CAAgBH,GAAhB,CAAP;AACD;;AAED,UAAMI,eAAe,GAAG,OAAOH,EAAP,KAAc,UAAd,IAA4BA,EAAE,CAACI,MAAH,GAAY,CAAhE;;AAEA,QAAID,eAAJ,EAAqB;AACnB;AACA,aAAOL,UAAU,CAACI,IAAX,CAAgBH,GAAhB,EAAqBC,EAArB,EAAyBC,OAAzB,CAAP;AACD;;AAED,UAAMI,UAAU,GAAG,IAAIC,KAAJ,EAAnB,CAZ2B,CAYK;AAChC;AACA;AACA;;AAEAD,IAAAA,UAAU,CAACE,KAAX,GAAmBF,UAAU,CAACE,KAA9B,CAjB2B,CAiBU;AACrC;;AAEA,UAAMC,kBAAkB,GAAG,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;AAC3D,YAAMC,SAAS,GAAG,CAAC,GAAGxB,cAAc,CAACL,OAAnB,EAA4BmB,EAA5B,IACdjB,GAAG,CAACF,OAAJ,CAAY8B,IAAZ,CAAiBX,EAAjB,CADc,GAEdA,EAFJ;AAGA,YAAMY,WAAW,GAAGF,SAAS,CAACR,IAAV,CAAe,EAAf,CAApB;;AAEA,UAAIP,SAAS,CAACiB,WAAD,CAAb,EAA4B;AAC1BA,QAAAA,WAAW,CAAChB,IAAZ,CAAiBa,IAAI,CAACI,IAAL,CAAU,IAAV,EAAgB,IAAhB,CAAjB,EAAwCC,KAAK,IAAI;AAC/C,gBAAMC,QAAQ,GAAG,CAAC,GAAG3B,SAAS,CAACP,OAAd,EAAuBiC,KAAvB,CAAjB;AAAA,gBACEE,YAAY,GAAGD,QAAQ,CAACE,OAD1B;AAAA,gBAEEC,OAAO,GAAGH,QAAQ,CAACG,OAFrB;;AAIA,cAAIA,OAAJ,EAAa;AACXb,YAAAA,UAAU,CAACa,OAAX,GAAqBA,OAArB;AACD;;AAEDT,UAAAA,IAAI,CAACU,IAAL,CAAUH,YAAY,GAAGF,KAAH,GAAWT,UAAjC;AACD,SAVD;AAWD,OAZD,MAYO;AACLI,QAAAA,IAAI;AACL;AACF,KArBD;;AAuBA,WAAOX,UAAU,CAACI,IAAX,CAAgBH,GAAhB,EAAqBS,kBAArB,EAAyCP,OAAzC,CAAP;AACD,GA5CD;AA6CD,C,CAAC;AACF;;;AAEA,SAASmB,WAAT,CAAqBtB,UAArB,EAAiCC,GAAjC,EAAsCsB,OAAtC,EAA+C;AAC7C,SAAO,UAASC,QAAT,EAAmBtB,EAAnB,EAAuBC,OAAvB,EAAgC;AACrC,QAAI,CAACD,EAAL,EAAS;AACP,YAAMuB,IAAI,GAAGzB,UAAU,CAACI,IAAX,CAAgBH,GAAhB,EAAqBuB,QAArB,CAAb;AACAC,MAAAA,IAAI,CAACC,IAAL,CAAU,iBAAV;AACA,aAAOD,IAAP;AACD;;AAED,UAAMpB,eAAe,GAAGH,EAAE,CAACI,MAAH,GAAY,CAApC;;AAEA,QAAID,eAAJ,EAAqB;AACnB,aAAOL,UAAU,CAACI,IAAX,CAAgBH,GAAhB,EAAqBuB,QAArB,EAA+BtB,EAA/B,EAAmCC,OAAnC,CAAP;AACD;;AAED,UAAMI,UAAU,GAAG,IAAIC,KAAJ,EAAnB,CAbqC,CAaL;AAChC;AACA;AACA;;AAEAD,IAAAA,UAAU,CAACE,KAAX,GAAmBF,UAAU,CAACE,KAA9B;;AAEA,UAAMkB,aAAa,GAAG,SAASA,aAAT,CAAuBhB,IAAvB,EAA6B;AACjD,YAAMC,SAAS,GAAG,CAAC,GAAGxB,cAAc,CAACL,OAAnB,EAA4BmB,EAA5B,IACdjB,GAAG,CAACF,OAAJ,CAAY8B,IAAZ,CAAiBX,EAAjB,CADc,GAEdA,EAFJ;AAGA,YAAMY,WAAW,GAAGF,SAAS,CAACR,IAAV,CAAe,EAAf,CAApB;;AAEA,UAAIP,SAAS,CAACiB,WAAD,CAAb,EAA4B;AAC1BA,QAAAA,WAAW,CAAChB,IAAZ,CAAiBa,IAAI,CAACI,IAAL,CAAU,IAAV,EAAgB,IAAhB,CAAjB,EAAwCC,KAAK,IAAI;AAC/C,gBAAMY,SAAS,GAAG,CAAC,GAAGtC,SAAS,CAACP,OAAd,EAAuBiC,KAAvB,CAAlB;AAAA,gBACEE,YAAY,GAAGU,SAAS,CAACT,OAD3B;AAAA,gBAEEC,OAAO,GAAGQ,SAAS,CAACR,OAFtB;;AAIA,cAAIA,OAAJ,EAAa;AACXb,YAAAA,UAAU,CAACa,OAAX,GAAqBA,OAArB;AACD;;AAED,cAAIG,OAAO,CAACM,IAAR,CAAaC,sBAAb,CAAoCd,KAApC,CAAJ,EAAgD;AAC9Cf,YAAAA,GAAG,CAAC8B,OAAJ,CAAYX,OAAZ;AACAT,YAAAA,IAAI;AACL,WAHD,MAGO;AACLA,YAAAA,IAAI,CAACU,IAAL,CAAUH,YAAY,GAAGF,KAAH,GAAWT,UAAjC;AACD;AACF,SAfD;AAgBD,OAjBD,MAiBO,IAAIO,WAAW,KAAKkB,SAApB,EAA+B;AACpCrB,QAAAA,IAAI;AACL,OAFM,MAEA;AACLA,QAAAA,IAAI,CAACU,IAAL,CACE,IAAIb,KAAJ,CACE,kEADF,CADF;AAKD;AACF,KAhCD;;AAkCA,WAAOR,UAAU,CAACI,IAAX,CAAgBH,GAAhB,EAAqBuB,QAArB,EAA+BG,aAA/B,EAA8CxB,OAA9C,CAAP;AACD,GAvDD;AAwDD;;AAED,SAAS8B,cAAT,CAAwBjC,UAAxB,EAAoCC,GAApC,EAAyCiC,KAAzC,EAAgD;AAC9C,SAAO,UAASV,QAAT,EAAmBtB,EAAnB,EAAuBC,OAAvB,EAAgC;AACrC,QACEF,GAAG,IAAI,IAAP,IACA,CAACA,GAAG,CAACkC,UAAJ,CAAe;AACdC,MAAAA,WAAW,EAAE,MAAMZ,QAAQ,IAAI;AADjB,KAAf,CAFH,EAKE;AACA,aAAOxB,UAAU,CAACI,IAAX,CAAgBH,GAAhB,EAAqBuB,QAArB,EAA+B,MAAM7B,OAAO,CAAC0C,OAAR,EAArC,EAAwDlC,OAAxD,CAAP;AACD;;AAED,QAAImC,OAAJ;;AAEA,QAAI;AACFA,MAAAA,OAAO,GAAGJ,KAAK,CAAC,MAAM;AACpB,cAAMI,OAAO,GAAGpC,EAAE,EAAlB;;AAEA,YAAIL,SAAS,CAACyC,OAAD,CAAb,EAAwB;AACtB,iBAAOA,OAAP;AACD;;AAED,cAAM,IAAI9B,KAAJ,CACH,0BAAyBgB,QAAS,0BAD/B,CAAN;AAGD,OAVc,CAAf;AAWD,KAZD,CAYE,OAAOR,KAAP,EAAc;AACd,aAAOhB,UAAU,CAACI,IAAX,CAAgBH,GAAhB,EAAqBuB,QAArB,EAA+B,MAAM7B,OAAO,CAAC4C,MAAR,CAAevB,KAAf,CAArC,CAAP;AACD;;AAED,WAAOhB,UAAU,CAACI,IAAX,CAAgBH,GAAhB,EAAqBuB,QAArB,EAA+B,MAAMc,OAArC,EAA8CnC,OAA9C,CAAP;AACD,GA7BD;AA8BD;;AAED,SAASnB,mBAAT,CAA6BwD,YAA7B,EAA2C9C,MAA3C,EAAmD;AACjD,QAAM6B,OAAO,GAAG7B,MAAM,CAAC6B,OAAvB;AACA,QAAMW,KAAK,GAAG,CAAC,GAAG7C,OAAO,CAACN,OAAZ,EAAqByD,YAAY,CAACC,cAAlC,CAAd;AACA,QAAMxC,GAAG,GAAGsB,OAAO,CAACmB,MAAR,EAAZ;AACAzC,EAAAA,GAAG,CAAC0C,EAAJ,GAASrB,WAAW,CAACrB,GAAG,CAAC0C,EAAL,EAAS1C,GAAT,EAAcsB,OAAd,CAApB;AACAtB,EAAAA,GAAG,CAAC2C,GAAJ,GAAUtB,WAAW,CAACrB,GAAG,CAAC2C,GAAL,EAAU3C,GAAV,EAAesB,OAAf,CAArB;;AAEA7B,EAAAA,MAAM,CAACiD,EAAP,CAAUE,UAAV,GAAuB,CAAC5C,GAAG,IAAI;AAC7B,UAAM4C,UAAU,GAAGZ,cAAc,CAAChC,GAAG,CAAC0C,EAAL,EAAS1C,GAAT,EAAciC,KAAd,CAAjC;AACAW,IAAAA,UAAU,CAACC,IAAX,GAAkBb,cAAc,CAAChC,GAAG,CAAC2C,GAAL,EAAU3C,GAAV,EAAeiC,KAAf,CAAhC;AACAW,IAAAA,UAAU,CAACE,IAAX,GAAkBd,cAAc,CAAChC,GAAG,CAAC+C,GAAL,EAAU/C,GAAV,EAAeiC,KAAf,CAAhC;AACA,WAAOW,UAAP;AACD,GALsB,EAKpB5C,GALoB,CAAvB;;AAOAP,EAAAA,MAAM,CAACkD,GAAP,CAAWC,UAAX,GAAwBZ,cAAc,CAAChC,GAAG,CAAC2C,GAAL,EAAU3C,GAAV,EAAeiC,KAAf,CAAtC;AACAjC,EAAAA,GAAG,CAACgD,QAAJ,GAAelD,0BAA0B,CAACE,GAAG,CAACgD,QAAL,EAAehD,GAAf,CAAzC;AACAA,EAAAA,GAAG,CAACiD,SAAJ,GAAgBnD,0BAA0B,CAACE,GAAG,CAACiD,SAAL,EAAgBjD,GAAhB,CAA1C;AACAA,EAAAA,GAAG,CAACkD,SAAJ,GAAgBpD,0BAA0B,CAACE,GAAG,CAACkD,SAAL,EAAgBlD,GAAhB,CAA1C;AACAA,EAAAA,GAAG,CAACmD,UAAJ,GAAiBrD,0BAA0B,CAACE,GAAG,CAACmD,UAAL,EAAiBnD,GAAjB,CAA3C;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = jasmineAsyncInstall;\n\nvar _co = _interopRequireDefault(require('co'));\n\nvar _isGeneratorFn = _interopRequireDefault(require('is-generator-fn'));\n\nvar _throat = _interopRequireDefault(require('throat'));\n\nvar _isError3 = _interopRequireDefault(require('./isError'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Promise = global[Symbol.for('jest-native-promise')] || global.Promise;\n\nfunction isPromise(obj) {\n  return obj && typeof obj.then === 'function';\n}\n\nfunction promisifyLifeCycleFunction(originalFn, env) {\n  return function(fn, timeout) {\n    if (!fn) {\n      return originalFn.call(env);\n    }\n\n    const hasDoneCallback = typeof fn === 'function' && fn.length > 0;\n\n    if (hasDoneCallback) {\n      // Jasmine will handle it\n      return originalFn.call(env, fn, timeout);\n    }\n\n    const extraError = new Error(); // Without this line v8 stores references to all closures\n    // in the stack in the Error object. This line stringifies the stack\n    // property to allow garbage-collecting objects on the stack\n    // https://crbug.com/v8/7142\n\n    extraError.stack = extraError.stack; // We make *all* functions async and run `done` right away if they\n    // didn't return a promise.\n\n    const asyncJestLifecycle = function asyncJestLifecycle(done) {\n      const wrappedFn = (0, _isGeneratorFn.default)(fn)\n        ? _co.default.wrap(fn)\n        : fn;\n      const returnValue = wrappedFn.call({});\n\n      if (isPromise(returnValue)) {\n        returnValue.then(done.bind(null, null), error => {\n          const _isError = (0, _isError3.default)(error),\n            checkIsError = _isError.isError,\n            message = _isError.message;\n\n          if (message) {\n            extraError.message = message;\n          }\n\n          done.fail(checkIsError ? error : extraError);\n        });\n      } else {\n        done();\n      }\n    };\n\n    return originalFn.call(env, asyncJestLifecycle, timeout);\n  };\n} // Similar to promisifyLifeCycleFunction but throws an error\n// when the return value is neither a Promise nor `undefined`\n\nfunction promisifyIt(originalFn, env, jasmine) {\n  return function(specName, fn, timeout) {\n    if (!fn) {\n      const spec = originalFn.call(env, specName);\n      spec.pend('not implemented');\n      return spec;\n    }\n\n    const hasDoneCallback = fn.length > 0;\n\n    if (hasDoneCallback) {\n      return originalFn.call(env, specName, fn, timeout);\n    }\n\n    const extraError = new Error(); // Without this line v8 stores references to all closures\n    // in the stack in the Error object. This line stringifies the stack\n    // property to allow garbage-collecting objects on the stack\n    // https://crbug.com/v8/7142\n\n    extraError.stack = extraError.stack;\n\n    const asyncJestTest = function asyncJestTest(done) {\n      const wrappedFn = (0, _isGeneratorFn.default)(fn)\n        ? _co.default.wrap(fn)\n        : fn;\n      const returnValue = wrappedFn.call({});\n\n      if (isPromise(returnValue)) {\n        returnValue.then(done.bind(null, null), error => {\n          const _isError2 = (0, _isError3.default)(error),\n            checkIsError = _isError2.isError,\n            message = _isError2.message;\n\n          if (message) {\n            extraError.message = message;\n          }\n\n          if (jasmine.Spec.isPendingSpecException(error)) {\n            env.pending(message);\n            done();\n          } else {\n            done.fail(checkIsError ? error : extraError);\n          }\n        });\n      } else if (returnValue === undefined) {\n        done();\n      } else {\n        done.fail(\n          new Error(\n            'Jest: `it` and `test` must return either a Promise or undefined.'\n          )\n        );\n      }\n    };\n\n    return originalFn.call(env, specName, asyncJestTest, timeout);\n  };\n}\n\nfunction makeConcurrent(originalFn, env, mutex) {\n  return function(specName, fn, timeout) {\n    if (\n      env != null &&\n      !env.specFilter({\n        getFullName: () => specName || ''\n      })\n    ) {\n      return originalFn.call(env, specName, () => Promise.resolve(), timeout);\n    }\n\n    let promise;\n\n    try {\n      promise = mutex(() => {\n        const promise = fn();\n\n        if (isPromise(promise)) {\n          return promise;\n        }\n\n        throw new Error(\n          `Jest: concurrent test \"${specName}\" must return a Promise.`\n        );\n      });\n    } catch (error) {\n      return originalFn.call(env, specName, () => Promise.reject(error));\n    }\n\n    return originalFn.call(env, specName, () => promise, timeout);\n  };\n}\n\nfunction jasmineAsyncInstall(globalConfig, global) {\n  const jasmine = global.jasmine;\n  const mutex = (0, _throat.default)(globalConfig.maxConcurrency);\n  const env = jasmine.getEnv();\n  env.it = promisifyIt(env.it, env, jasmine);\n  env.fit = promisifyIt(env.fit, env, jasmine);\n\n  global.it.concurrent = (env => {\n    const concurrent = makeConcurrent(env.it, env, mutex);\n    concurrent.only = makeConcurrent(env.fit, env, mutex);\n    concurrent.skip = makeConcurrent(env.xit, env, mutex);\n    return concurrent;\n  })(env);\n\n  global.fit.concurrent = makeConcurrent(env.fit, env, mutex);\n  env.afterAll = promisifyLifeCycleFunction(env.afterAll, env);\n  env.afterEach = promisifyLifeCycleFunction(env.afterEach, env);\n  env.beforeAll = promisifyLifeCycleFunction(env.beforeAll, env);\n  env.beforeEach = promisifyLifeCycleFunction(env.beforeEach, env);\n}\n"]},"metadata":{},"sourceType":"script"}