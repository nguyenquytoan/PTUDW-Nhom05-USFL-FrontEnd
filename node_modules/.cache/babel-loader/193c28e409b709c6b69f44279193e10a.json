{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.mjs';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.mjs';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.mjs';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.mjs';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.mjs';\nimport { logger } from 'workbox-core/_private/logger.mjs';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.mjs';\nimport { messages } from './utils/messages.mjs';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.mjs';\nimport './_version.mjs';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof workbox.strategies\n */\n\nclass StaleWhileRevalidate {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link workbox.core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   */\n  constructor(options = {}) {\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    this._plugins = options.plugins || [];\n\n    if (options.plugins) {\n      let isUsingCacheWillUpdate = options.plugins.some(plugin => !!plugin.cacheWillUpdate);\n      this._plugins = isUsingCacheWillUpdate ? options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n    } else {\n      // No plugins passed in, use the default plugin.\n      this._plugins = [cacheOkAndOpaquePlugin];\n    }\n\n    this._fetchOptions = options.fetchOptions || null;\n    this._matchOptions = options.matchOptions || null;\n  }\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request} options.request The request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  async handle({\n    event,\n    request\n  }) {\n    return this.makeRequest({\n      event,\n      request: request || event.request\n    });\n  }\n  /**\n   * This method can be used to perform a make a standalone request outside the\n   * context of the [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * See \"[Advanced Recipes](https://developers.google.com/web/tools/workbox/guides/advanced-recipes#make-requests)\"\n   * for more usage information.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request Either a\n   *     [`Request`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Request}\n   *     object, or a string URL, corresponding to the request to be made.\n   * @param {FetchEvent} [options.event] If provided, `event.waitUntil()` will\n   *     be called automatically to extend the service worker's lifetime.\n   * @return {Promise<Response>}\n   */\n\n\n  async makeRequest({\n    event,\n    request\n  }) {\n    const logs = [];\n\n    if (typeof request === 'string') {\n      request = new Request(request);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-strategies',\n        className: 'StaleWhileRevalidate',\n        funcName: 'handle',\n        paramName: 'request'\n      });\n    }\n\n    const fetchAndCachePromise = this._getFromNetwork({\n      request,\n      event\n    });\n\n    let response = await cacheWrapper.match({\n      cacheName: this._cacheName,\n      request,\n      event,\n      matchOptions: this._matchOptions,\n      plugins: this._plugins\n    });\n    let error;\n\n    if (response) {\n      if (process.env.NODE_ENV !== 'production') {\n        logs.push(`Found a cached response in the '${this._cacheName}'` + ` cache. Will update with the network response in the background.`);\n      }\n\n      if (event) {\n        try {\n          event.waitUntil(fetchAndCachePromise);\n        } catch (error) {\n          if (process.env.NODE_ENV !== 'production') {\n            logger.warn(`Unable to ensure service worker stays alive when ` + `updating cache for '${getFriendlyURL(request.url)}'.`);\n          }\n        }\n      }\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        logs.push(`No response found in the '${this._cacheName}' cache. ` + `Will wait for the network response.`);\n      }\n\n      try {\n        response = await fetchAndCachePromise;\n      } catch (err) {\n        error = err;\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(messages.strategyStart('StaleWhileRevalidate', request));\n\n      for (let log of logs) {\n        logger.log(log);\n      }\n\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n\n    if (!response) {\n      throw new WorkboxError('no-response', {\n        url: request.url,\n        error\n      });\n    }\n\n    return response;\n  }\n  /**\n   * @param {Object} options\n   * @param {Request} options.request\n   * @param {Event} [options.event]\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n\n\n  async _getFromNetwork({\n    request,\n    event\n  }) {\n    const response = await fetchWrapper.fetch({\n      request,\n      event,\n      fetchOptions: this._fetchOptions,\n      plugins: this._plugins\n    });\n    const cachePutPromise = cacheWrapper.put({\n      cacheName: this._cacheName,\n      request,\n      response: response.clone(),\n      event,\n      plugins: this._plugins\n    });\n\n    if (event) {\n      try {\n        event.waitUntil(cachePutPromise);\n      } catch (error) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.warn(`Unable to ensure service worker stays alive when ` + `updating cache for '${getFriendlyURL(request.url)}'.`);\n        }\n      }\n    }\n\n    return response;\n  }\n\n}\n\nexport { StaleWhileRevalidate };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-strategies/StaleWhileRevalidate.mjs"],"names":["assert","cacheNames","cacheWrapper","fetchWrapper","getFriendlyURL","logger","WorkboxError","messages","cacheOkAndOpaquePlugin","StaleWhileRevalidate","constructor","options","_cacheName","getRuntimeName","cacheName","_plugins","plugins","isUsingCacheWillUpdate","some","plugin","cacheWillUpdate","_fetchOptions","fetchOptions","_matchOptions","matchOptions","handle","event","request","makeRequest","logs","Request","process","env","NODE_ENV","isInstance","moduleName","className","funcName","paramName","fetchAndCachePromise","_getFromNetwork","response","match","error","push","waitUntil","warn","url","err","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","fetch","cachePutPromise","put","clone"],"mappings":"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","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\nimport {cacheWrapper} from 'workbox-core/_private/cacheWrapper.mjs';\nimport {fetchWrapper} from 'workbox-core/_private/fetchWrapper.mjs';\nimport {getFriendlyURL} from 'workbox-core/_private/getFriendlyURL.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\n\nimport {messages} from './utils/messages.mjs';\nimport {cacheOkAndOpaquePlugin} from './plugins/cacheOkAndOpaquePlugin.mjs';\nimport './_version.mjs';\n\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof workbox.strategies\n */\nclass StaleWhileRevalidate {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link workbox.core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   */\n  constructor(options = {}) {\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    this._plugins = options.plugins || [];\n\n    if (options.plugins) {\n      let isUsingCacheWillUpdate =\n        options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\n      this._plugins = isUsingCacheWillUpdate ?\n        options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n    } else {\n      // No plugins passed in, use the default plugin.\n      this._plugins = [cacheOkAndOpaquePlugin];\n    }\n\n    this._fetchOptions = options.fetchOptions || null;\n    this._matchOptions = options.matchOptions || null;\n  }\n\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request} options.request The request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n  async handle({event, request}) {\n    return this.makeRequest({\n      event,\n      request: request || event.request,\n    });\n  }\n  /**\n   * This method can be used to perform a make a standalone request outside the\n   * context of the [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * See \"[Advanced Recipes](https://developers.google.com/web/tools/workbox/guides/advanced-recipes#make-requests)\"\n   * for more usage information.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request Either a\n   *     [`Request`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Request}\n   *     object, or a string URL, corresponding to the request to be made.\n   * @param {FetchEvent} [options.event] If provided, `event.waitUntil()` will\n   *     be called automatically to extend the service worker's lifetime.\n   * @return {Promise<Response>}\n   */\n  async makeRequest({event, request}) {\n    const logs = [];\n\n    if (typeof request === 'string') {\n      request = new Request(request);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-strategies',\n        className: 'StaleWhileRevalidate',\n        funcName: 'handle',\n        paramName: 'request',\n      });\n    }\n\n    const fetchAndCachePromise = this._getFromNetwork({request, event});\n\n    let response = await cacheWrapper.match({\n      cacheName: this._cacheName,\n      request,\n      event,\n      matchOptions: this._matchOptions,\n      plugins: this._plugins,\n    });\n    let error;\n    if (response) {\n      if (process.env.NODE_ENV !== 'production') {\n        logs.push(`Found a cached response in the '${this._cacheName}'` +\n          ` cache. Will update with the network response in the background.`);\n      }\n\n      if (event) {\n        try {\n          event.waitUntil(fetchAndCachePromise);\n        } catch (error) {\n          if (process.env.NODE_ENV !== 'production') {\n            logger.warn(`Unable to ensure service worker stays alive when ` +\n              `updating cache for '${getFriendlyURL(request.url)}'.`);\n          }\n        }\n      }\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        logs.push(`No response found in the '${this._cacheName}' cache. ` +\n          `Will wait for the network response.`);\n      }\n      try {\n        response = await fetchAndCachePromise;\n      } catch (err) {\n        error = err;\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(\n          messages.strategyStart('StaleWhileRevalidate', request));\n      for (let log of logs) {\n        logger.log(log);\n      }\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n\n    if (!response) {\n      throw new WorkboxError('no-response', {url: request.url, error});\n    }\n    return response;\n  }\n\n  /**\n   * @param {Object} options\n   * @param {Request} options.request\n   * @param {Event} [options.event]\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n  async _getFromNetwork({request, event}) {\n    const response = await fetchWrapper.fetch({\n      request,\n      event,\n      fetchOptions: this._fetchOptions,\n      plugins: this._plugins,\n    });\n\n    const cachePutPromise = cacheWrapper.put({\n      cacheName: this._cacheName,\n      request,\n      response: response.clone(),\n      event,\n      plugins: this._plugins,\n    });\n\n    if (event) {\n      try {\n        event.waitUntil(cachePutPromise);\n      } catch (error) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.warn(`Unable to ensure service worker stays alive when ` +\n            `updating cache for '${getFriendlyURL(request.url)}'.`);\n        }\n      }\n    }\n\n    return response;\n  }\n}\n\nexport {StaleWhileRevalidate};\n"]},"metadata":{},"sourceType":"module"}