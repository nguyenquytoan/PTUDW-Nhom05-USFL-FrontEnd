{"ast":null,"code":"/**\n * @fileoverview Define the cursor which iterates tokens and comments in reverse.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst Cursor = require(\"./cursor\");\n\nconst utils = require(\"./utils\"); //------------------------------------------------------------------------------\n// Exports\n//------------------------------------------------------------------------------\n\n/**\n * The cursor which iterates tokens and comments in reverse.\n */\n\n\nmodule.exports = class BackwardTokenCommentCursor extends Cursor {\n  /**\n   * Initializes this cursor.\n   * @param {Token[]} tokens The array of tokens.\n   * @param {Comment[]} comments The array of comments.\n   * @param {Object} indexMap The map from locations to indices in `tokens`.\n   * @param {number} startLoc The start location of the iteration range.\n   * @param {number} endLoc The end location of the iteration range.\n   */\n  constructor(tokens, comments, indexMap, startLoc, endLoc) {\n    super();\n    this.tokens = tokens;\n    this.comments = comments;\n    this.tokenIndex = utils.getLastIndex(tokens, indexMap, endLoc);\n    this.commentIndex = utils.search(comments, endLoc) - 1;\n    this.border = startLoc;\n  }\n  /** @inheritdoc */\n\n\n  moveNext() {\n    const token = this.tokenIndex >= 0 ? this.tokens[this.tokenIndex] : null;\n    const comment = this.commentIndex >= 0 ? this.comments[this.commentIndex] : null;\n\n    if (token && (!comment || token.range[1] > comment.range[1])) {\n      this.current = token;\n      this.tokenIndex -= 1;\n    } else if (comment) {\n      this.current = comment;\n      this.commentIndex -= 1;\n    } else {\n      this.current = null;\n    }\n\n    return Boolean(this.current) && (this.border === -1 || this.current.range[0] >= this.border);\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/source-code/token-store/backward-token-comment-cursor.js"],"names":["Cursor","require","utils","module","exports","BackwardTokenCommentCursor","constructor","tokens","comments","indexMap","startLoc","endLoc","tokenIndex","getLastIndex","commentIndex","search","border","moveNext","token","comment","range","current","Boolean"],"mappings":"AAAA;;;;AAIA,a,CAEA;AACA;AACA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB,C,CAEA;AACA;AACA;;AAEA;;;;;AAGAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,0BAAN,SAAyCL,MAAzC,CAAgD;AAE7D;;;;;;;;AAQAM,EAAAA,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmBC,QAAnB,EAA6BC,QAA7B,EAAuCC,MAAvC,EAA+C;AACtD;AACA,SAAKJ,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKI,UAAL,GAAkBV,KAAK,CAACW,YAAN,CAAmBN,MAAnB,EAA2BE,QAA3B,EAAqCE,MAArC,CAAlB;AACA,SAAKG,YAAL,GAAoBZ,KAAK,CAACa,MAAN,CAAaP,QAAb,EAAuBG,MAAvB,IAAiC,CAArD;AACA,SAAKK,MAAL,GAAcN,QAAd;AACH;AAED;;;AACAO,EAAAA,QAAQ,GAAG;AACP,UAAMC,KAAK,GAAI,KAAKN,UAAL,IAAmB,CAApB,GAAyB,KAAKL,MAAL,CAAY,KAAKK,UAAjB,CAAzB,GAAwD,IAAtE;AACA,UAAMO,OAAO,GAAI,KAAKL,YAAL,IAAqB,CAAtB,GAA2B,KAAKN,QAAL,CAAc,KAAKM,YAAnB,CAA3B,GAA8D,IAA9E;;AAEA,QAAII,KAAK,KAAK,CAACC,OAAD,IAAYD,KAAK,CAACE,KAAN,CAAY,CAAZ,IAAiBD,OAAO,CAACC,KAAR,CAAc,CAAd,CAAlC,CAAT,EAA8D;AAC1D,WAAKC,OAAL,GAAeH,KAAf;AACA,WAAKN,UAAL,IAAmB,CAAnB;AACH,KAHD,MAGO,IAAIO,OAAJ,EAAa;AAChB,WAAKE,OAAL,GAAeF,OAAf;AACA,WAAKL,YAAL,IAAqB,CAArB;AACH,KAHM,MAGA;AACH,WAAKO,OAAL,GAAe,IAAf;AACH;;AAED,WAAOC,OAAO,CAAC,KAAKD,OAAN,CAAP,KAA0B,KAAKL,MAAL,KAAgB,CAAC,CAAjB,IAAsB,KAAKK,OAAL,CAAaD,KAAb,CAAmB,CAAnB,KAAyB,KAAKJ,MAA9E,CAAP;AACH;;AAnC4D,CAAjE","sourcesContent":["/**\n * @fileoverview Define the cursor which iterates tokens and comments in reverse.\n * @author Toru Nagashima\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst Cursor = require(\"./cursor\");\nconst utils = require(\"./utils\");\n\n//------------------------------------------------------------------------------\n// Exports\n//------------------------------------------------------------------------------\n\n/**\n * The cursor which iterates tokens and comments in reverse.\n */\nmodule.exports = class BackwardTokenCommentCursor extends Cursor {\n\n    /**\n     * Initializes this cursor.\n     * @param {Token[]} tokens The array of tokens.\n     * @param {Comment[]} comments The array of comments.\n     * @param {Object} indexMap The map from locations to indices in `tokens`.\n     * @param {number} startLoc The start location of the iteration range.\n     * @param {number} endLoc The end location of the iteration range.\n     */\n    constructor(tokens, comments, indexMap, startLoc, endLoc) {\n        super();\n        this.tokens = tokens;\n        this.comments = comments;\n        this.tokenIndex = utils.getLastIndex(tokens, indexMap, endLoc);\n        this.commentIndex = utils.search(comments, endLoc) - 1;\n        this.border = startLoc;\n    }\n\n    /** @inheritdoc */\n    moveNext() {\n        const token = (this.tokenIndex >= 0) ? this.tokens[this.tokenIndex] : null;\n        const comment = (this.commentIndex >= 0) ? this.comments[this.commentIndex] : null;\n\n        if (token && (!comment || token.range[1] > comment.range[1])) {\n            this.current = token;\n            this.tokenIndex -= 1;\n        } else if (comment) {\n            this.current = comment;\n            this.commentIndex -= 1;\n        } else {\n            this.current = null;\n        }\n\n        return Boolean(this.current) && (this.border === -1 || this.current.range[0] >= this.border);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}