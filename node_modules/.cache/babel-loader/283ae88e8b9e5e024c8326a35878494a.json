{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n/**\n * Looks for a placeholder string in originalFilename, and replaces it with a\n * value provided.\n *\n * @param {string} originalFilename\n * @param {string} manifestHash\n * @return {string}\n *\n * @private\n */\n\nmodule.exports = (originalFilename, manifestHash) => {\n  const manifestHashPlaceholder = '[manifestHash]';\n  const replacedFilename = originalFilename.replace(manifestHashPlaceholder, manifestHash);\n\n  if (replacedFilename === originalFilename) {\n    throw new Error(`Your configured precacheManifestFilename option, ` + `'${originalFilename}', must contain the placeholder string ` + `'${manifestHashPlaceholder}' somewhere. For example, ` + `'precache-manifest.${manifestHashPlaceholder}.js'`);\n  }\n\n  return replacedFilename;\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-webpack-plugin/build/lib/format-manifest-filename.js"],"names":["module","exports","originalFilename","manifestHash","manifestHashPlaceholder","replacedFilename","replace","Error"],"mappings":"AAAA;AAEA;;;;;;;;AAQA;;;;;;;;;;;AAUAA,MAAM,CAACC,OAAP,GAAiB,CAACC,gBAAD,EAAmBC,YAAnB,KAAoC;AACnD,QAAMC,uBAAuB,GAAG,gBAAhC;AACA,QAAMC,gBAAgB,GAAGH,gBAAgB,CAACI,OAAjB,CAAyBF,uBAAzB,EAAkDD,YAAlD,CAAzB;;AAEA,MAAIE,gBAAgB,KAAKH,gBAAzB,EAA2C;AACzC,UAAM,IAAIK,KAAJ,CAAW,mDAAD,GAAuD,IAAGL,gBAAiB,yCAA3E,GAAuH,IAAGE,uBAAwB,4BAAlJ,GAAiL,sBAAqBA,uBAAwB,MAAxO,CAAN;AACD;;AAED,SAAOC,gBAAP;AACD,CATD","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n/**\n * Looks for a placeholder string in originalFilename, and replaces it with a\n * value provided.\n *\n * @param {string} originalFilename\n * @param {string} manifestHash\n * @return {string}\n *\n * @private\n */\nmodule.exports = (originalFilename, manifestHash) => {\n  const manifestHashPlaceholder = '[manifestHash]';\n  const replacedFilename = originalFilename.replace(manifestHashPlaceholder, manifestHash);\n\n  if (replacedFilename === originalFilename) {\n    throw new Error(`Your configured precacheManifestFilename option, ` + `'${originalFilename}', must contain the placeholder string ` + `'${manifestHashPlaceholder}' somewhere. For example, ` + `'precache-manifest.${manifestHashPlaceholder}.js'`);\n  }\n\n  return replacedFilename;\n};"]},"metadata":{},"sourceType":"script"}