{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of arguments.callee and arguments.caller.\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow the use of `arguments.caller` or `arguments.callee`\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-caller\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Avoid arguments.{{prop}}.\"\n    }\n  },\n\n  create(context) {\n    return {\n      MemberExpression(node) {\n        const objectName = node.object.name,\n              propertyName = node.property.name;\n\n        if (objectName === \"arguments\" && !node.computed && propertyName && propertyName.match(/^calle[er]$/u)) {\n          context.report({\n            node,\n            messageId: \"unexpected\",\n            data: {\n              prop: propertyName\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-caller.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","MemberExpression","node","objectName","object","name","propertyName","property","computed","match","report","messageId","data","prop"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,8DADX;AAEFC,MAAAA,QAAQ,EAAE,gBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,EAVN;AAYFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN;AAZR,GADO;;AAkBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,WAAO;AAEHC,MAAAA,gBAAgB,CAACC,IAAD,EAAO;AACnB,cAAMC,UAAU,GAAGD,IAAI,CAACE,MAAL,CAAYC,IAA/B;AAAA,cACIC,YAAY,GAAGJ,IAAI,CAACK,QAAL,CAAcF,IADjC;;AAGA,YAAIF,UAAU,KAAK,WAAf,IAA8B,CAACD,IAAI,CAACM,QAApC,IAAgDF,YAAhD,IAAgEA,YAAY,CAACG,KAAb,CAAmB,cAAnB,CAApE,EAAwG;AACpGT,UAAAA,OAAO,CAACU,MAAR,CAAe;AAAER,YAAAA,IAAF;AAAQS,YAAAA,SAAS,EAAE,YAAnB;AAAiCC,YAAAA,IAAI,EAAE;AAAEC,cAAAA,IAAI,EAAEP;AAAR;AAAvC,WAAf;AACH;AAEJ;;AAVE,KAAP;AAaH;;AAjCY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to flag use of arguments.callee and arguments.caller.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow the use of `arguments.caller` or `arguments.callee`\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-caller\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Avoid arguments.{{prop}}.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n\n            MemberExpression(node) {\n                const objectName = node.object.name,\n                    propertyName = node.property.name;\n\n                if (objectName === \"arguments\" && !node.computed && propertyName && propertyName.match(/^calle[er]$/u)) {\n                    context.report({ node, messageId: \"unexpected\", data: { prop: propertyName } });\n                }\n\n            }\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}