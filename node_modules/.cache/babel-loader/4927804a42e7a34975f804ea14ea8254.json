{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Subject_1 = require(\"../Subject\");\n\nvar Observable_1 = require(\"../Observable\");\n\nvar Subscriber_1 = require(\"../Subscriber\");\n\nvar Subscription_1 = require(\"../Subscription\");\n\nvar refCount_1 = require(\"../operators/refCount\");\n\nvar ConnectableObservable = function (_super) {\n  __extends(ConnectableObservable, _super);\n\n  function ConnectableObservable(source, subjectFactory) {\n    var _this = _super.call(this) || this;\n\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._refCount = 0;\n    _this._isComplete = false;\n    return _this;\n  }\n\n  ConnectableObservable.prototype._subscribe = function (subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  };\n\n  ConnectableObservable.prototype.getSubject = function () {\n    var subject = this._subject;\n\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n\n    return this._subject;\n  };\n\n  ConnectableObservable.prototype.connect = function () {\n    var connection = this._connection;\n\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription_1.Subscription();\n      connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription_1.Subscription.EMPTY;\n      }\n    }\n\n    return connection;\n  };\n\n  ConnectableObservable.prototype.refCount = function () {\n    return refCount_1.refCount()(this);\n  };\n\n  return ConnectableObservable;\n}(Observable_1.Observable);\n\nexports.ConnectableObservable = ConnectableObservable;\n\nexports.connectableObservableDescriptor = function () {\n  var connectableProto = ConnectableObservable.prototype;\n  return {\n    operator: {\n      value: null\n    },\n    _refCount: {\n      value: 0,\n      writable: true\n    },\n    _subject: {\n      value: null,\n      writable: true\n    },\n    _connection: {\n      value: null,\n      writable: true\n    },\n    _subscribe: {\n      value: connectableProto._subscribe\n    },\n    _isComplete: {\n      value: connectableProto._isComplete,\n      writable: true\n    },\n    getSubject: {\n      value: connectableProto.getSubject\n    },\n    connect: {\n      value: connectableProto.connect\n    },\n    refCount: {\n      value: connectableProto.refCount\n    }\n  };\n}();\n\nvar ConnectableSubscriber = function (_super) {\n  __extends(ConnectableSubscriber, _super);\n\n  function ConnectableSubscriber(destination, connectable) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.connectable = connectable;\n    return _this;\n  }\n\n  ConnectableSubscriber.prototype._error = function (err) {\n    this._unsubscribe();\n\n    _super.prototype._error.call(this, err);\n  };\n\n  ConnectableSubscriber.prototype._complete = function () {\n    this.connectable._isComplete = true;\n\n    this._unsubscribe();\n\n    _super.prototype._complete.call(this);\n  };\n\n  ConnectableSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n\n    if (connectable) {\n      this.connectable = null;\n      var connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  };\n\n  return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber);\n\nvar RefCountOperator = function () {\n  function RefCountOperator(connectable) {\n    this.connectable = connectable;\n  }\n\n  RefCountOperator.prototype.call = function (subscriber, source) {\n    var connectable = this.connectable;\n    connectable._refCount++;\n    var refCounter = new RefCountSubscriber(subscriber, connectable);\n    var subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n\n    return subscription;\n  };\n\n  return RefCountOperator;\n}();\n\nvar RefCountSubscriber = function (_super) {\n  __extends(RefCountSubscriber, _super);\n\n  function RefCountSubscriber(destination, connectable) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.connectable = connectable;\n    return _this;\n  }\n\n  RefCountSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    var refCount = connectable._refCount;\n\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    connectable._refCount = refCount - 1;\n\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    var connection = this.connection;\n    var sharedConnection = connectable._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  };\n\n  return RefCountSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"sources":["../../src/internal/observable/ConnectableObservable.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Subject_1 = require(\"../Subject\");\nvar Observable_1 = require(\"../Observable\");\nvar Subscriber_1 = require(\"../Subscriber\");\nvar Subscription_1 = require(\"../Subscription\");\nvar refCount_1 = require(\"../operators/refCount\");\nvar ConnectableObservable = (function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subjectFactory = subjectFactory;\n        _this._refCount = 0;\n        _this._isComplete = false;\n        return _this;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription_1.Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription_1.Subscription.EMPTY;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return refCount_1.refCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable_1.Observable));\nexports.ConnectableObservable = ConnectableObservable;\nexports.connectableObservableDescriptor = (function () {\n    var connectableProto = ConnectableObservable.prototype;\n    return {\n        operator: { value: null },\n        _refCount: { value: 0, writable: true },\n        _subject: { value: null, writable: true },\n        _connection: { value: null, writable: true },\n        _subscribe: { value: connectableProto._subscribe },\n        _isComplete: { value: connectableProto._isComplete, writable: true },\n        getSubject: { value: connectableProto.getSubject },\n        connect: { value: connectableProto.connect },\n        refCount: { value: connectableProto.refCount }\n    };\n})();\nvar ConnectableSubscriber = (function (_super) {\n    __extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber));\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map"]},"metadata":{},"sourceType":"script"}