{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = deepCyclicCopy;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst EMPTY = new Set(); // Node 6 does not have gOPDs, so we define a simple polyfill for it.\n\nif (!Object.getOwnPropertyDescriptors) {\n  // @ts-ignore: polyfill\n  Object.getOwnPropertyDescriptors = obj => {\n    const list = {};\n    Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj)).forEach(key => {\n      // @ts-ignore: assignment with a Symbol is OK.\n      list[key] = Object.getOwnPropertyDescriptor(obj, key);\n    });\n    return list;\n  };\n}\n\nfunction deepCyclicCopy(value, options = {\n  blacklist: EMPTY,\n  keepPrototype: false\n}, cycles = new WeakMap()) {\n  if (typeof value !== 'object' || value === null) {\n    return value;\n  } else if (cycles.has(value)) {\n    return cycles.get(value);\n  } else if (Array.isArray(value)) {\n    return deepCyclicCopyArray(value, options, cycles);\n  } else {\n    return deepCyclicCopyObject(value, options, cycles);\n  }\n}\n\nfunction deepCyclicCopyObject(object, options, cycles) {\n  const newObject = options.keepPrototype ? Object.create(Object.getPrototypeOf(object)) : {};\n  const descriptors = Object.getOwnPropertyDescriptors(object);\n  cycles.set(object, newObject);\n  Object.keys(descriptors).forEach(key => {\n    if (options.blacklist && options.blacklist.has(key)) {\n      delete descriptors[key];\n      return;\n    }\n\n    const descriptor = descriptors[key];\n\n    if (typeof descriptor.value !== 'undefined') {\n      descriptor.value = deepCyclicCopy(descriptor.value, {\n        blacklist: EMPTY,\n        keepPrototype: options.keepPrototype\n      }, cycles);\n    }\n\n    descriptor.configurable = true;\n  });\n  return Object.defineProperties(newObject, descriptors);\n}\n\nfunction deepCyclicCopyArray(array, options, cycles) {\n  const newArray = options.keepPrototype ? new (Object.getPrototypeOf(array).constructor)(array.length) : [];\n  const length = array.length;\n  cycles.set(array, newArray);\n\n  for (let i = 0; i < length; i++) {\n    newArray[i] = deepCyclicCopy(array[i], {\n      blacklist: EMPTY,\n      keepPrototype: options.keepPrototype\n    }, cycles);\n  }\n\n  return newArray;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-util/build/deepCyclicCopy.js"],"names":["Object","defineProperty","exports","value","default","deepCyclicCopy","EMPTY","Set","getOwnPropertyDescriptors","obj","list","getOwnPropertyNames","concat","getOwnPropertySymbols","forEach","key","getOwnPropertyDescriptor","options","blacklist","keepPrototype","cycles","WeakMap","has","get","Array","isArray","deepCyclicCopyArray","deepCyclicCopyObject","object","newObject","create","getPrototypeOf","descriptors","set","keys","descriptor","configurable","defineProperties","array","newArray","constructor","length","i"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = deepCyclicCopy;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst EMPTY = new Set();\n\n// Node 6 does not have gOPDs, so we define a simple polyfill for it.\nif (!Object.getOwnPropertyDescriptors) {\n  // @ts-ignore: polyfill\n  Object.getOwnPropertyDescriptors = obj => {\n    const list = {};\n    Object.getOwnPropertyNames(obj)\n      .concat(Object.getOwnPropertySymbols(obj))\n      .forEach(key => {\n        // @ts-ignore: assignment with a Symbol is OK.\n        list[key] = Object.getOwnPropertyDescriptor(obj, key);\n      });\n    return list;\n  };\n}\n\nfunction deepCyclicCopy(\n  value,\n  options = {\n    blacklist: EMPTY,\n    keepPrototype: false\n  },\n  cycles = new WeakMap()\n) {\n  if (typeof value !== 'object' || value === null) {\n    return value;\n  } else if (cycles.has(value)) {\n    return cycles.get(value);\n  } else if (Array.isArray(value)) {\n    return deepCyclicCopyArray(value, options, cycles);\n  } else {\n    return deepCyclicCopyObject(value, options, cycles);\n  }\n}\n\nfunction deepCyclicCopyObject(object, options, cycles) {\n  const newObject = options.keepPrototype\n    ? Object.create(Object.getPrototypeOf(object))\n    : {};\n  const descriptors = Object.getOwnPropertyDescriptors(object);\n  cycles.set(object, newObject);\n  Object.keys(descriptors).forEach(key => {\n    if (options.blacklist && options.blacklist.has(key)) {\n      delete descriptors[key];\n      return;\n    }\n\n    const descriptor = descriptors[key];\n\n    if (typeof descriptor.value !== 'undefined') {\n      descriptor.value = deepCyclicCopy(\n        descriptor.value,\n        {\n          blacklist: EMPTY,\n          keepPrototype: options.keepPrototype\n        },\n        cycles\n      );\n    }\n\n    descriptor.configurable = true;\n  });\n  return Object.defineProperties(newObject, descriptors);\n}\n\nfunction deepCyclicCopyArray(array, options, cycles) {\n  const newArray = options.keepPrototype\n    ? new (Object.getPrototypeOf(array)).constructor(array.length)\n    : [];\n  const length = array.length;\n  cycles.set(array, newArray);\n\n  for (let i = 0; i < length; i++) {\n    newArray[i] = deepCyclicCopy(\n      array[i],\n      {\n        blacklist: EMPTY,\n        keepPrototype: options.keepPrototype\n      },\n      cycles\n    );\n  }\n\n  return newArray;\n}\n"]},"metadata":{},"sourceType":"script"}