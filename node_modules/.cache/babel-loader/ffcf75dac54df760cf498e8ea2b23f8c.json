{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"chai\").assert,\n    isArrayLike = require(\"../../array-like/is\");\n\ndescribe(\"array-like/is\", function () {\n  it(\"Should return true on array\", function () {\n    assert.equal(isArrayLike([]), true);\n  });\n  it(\"Should return true on array-like object\", function () {\n    assert.equal(isArrayLike({\n      length: 1\n    }), true);\n  });\n  it(\"Should by default return false on string\", function () {\n    assert.equal(isArrayLike(\"foo\"), false);\n  });\n  it(\"Should accept strings if specified\", function () {\n    assert.equal(isArrayLike(\"foo\", {\n      allowString: true\n    }), true);\n  });\n  it(\"Should return false on objects with negative length\", function () {\n    assert.equal(isArrayLike({\n      length: -1\n    }), false);\n  });\n  it(\"Should return false on plain object\", function () {\n    assert.equal(isArrayLike({}), false);\n  });\n  it(\"Should return false on function\", function () {\n    assert.equal(isArrayLike(function () {\n      return true;\n    }), false);\n  });\n\n  if (typeof Object.create === \"function\") {\n    it(\"Should return false on object with no prototype\", function () {\n      assert.equal(isArrayLike(Object.create(null)), false);\n    });\n  }\n\n  it(\"Should return false on number\", function () {\n    assert.equal(isArrayLike(123), false);\n  });\n  it(\"Should return false on NaN\", function () {\n    assert.equal(isArrayLike(NaN), false);\n  });\n  it(\"Should return false on boolean\", function () {\n    assert.equal(isArrayLike(true), false);\n  });\n\n  if (typeof Symbol === \"function\") {\n    it(\"Should return false on symbol\", function () {\n      assert.equal(isArrayLike(Symbol(\"foo\")), false);\n    });\n  }\n\n  it(\"Should return false on null\", function () {\n    assert.equal(isArrayLike(null), false);\n  });\n  it(\"Should return false on undefined\", function () {\n    assert.equal(isArrayLike(void 0), false);\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type/test/array-like/is.js"],"names":["assert","require","isArrayLike","describe","it","equal","length","allowString","Object","create","NaN","Symbol"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar assert      = require(\"chai\").assert\n  , isArrayLike = require(\"../../array-like/is\");\n\ndescribe(\"array-like/is\", function () {\n\tit(\"Should return true on array\", function () { assert.equal(isArrayLike([]), true); });\n\tit(\"Should return true on array-like object\", function () {\n\t\tassert.equal(isArrayLike({ length: 1 }), true);\n\t});\n\tit(\"Should by default return false on string\", function () {\n\t\tassert.equal(isArrayLike(\"foo\"), false);\n\t});\n\tit(\"Should accept strings if specified\", function () {\n\t\tassert.equal(isArrayLike(\"foo\", { allowString: true }), true);\n\t});\n\n\tit(\"Should return false on objects with negative length\", function () {\n\t\tassert.equal(isArrayLike({ length: -1 }), false);\n\t});\n\n\tit(\"Should return false on plain object\", function () {\n\t\tassert.equal(isArrayLike({}), false);\n\t});\n\tit(\"Should return false on function\", function () {\n\t\tassert.equal(isArrayLike(function () { return true; }), false);\n\t});\n\n\tif (typeof Object.create === \"function\") {\n\t\tit(\"Should return false on object with no prototype\", function () {\n\t\t\tassert.equal(isArrayLike(Object.create(null)), false);\n\t\t});\n\t}\n\tit(\"Should return false on number\", function () { assert.equal(isArrayLike(123), false); });\n\tit(\"Should return false on NaN\", function () { assert.equal(isArrayLike(NaN), false); });\n\tit(\"Should return false on boolean\", function () { assert.equal(isArrayLike(true), false); });\n\tif (typeof Symbol === \"function\") {\n\t\tit(\"Should return false on symbol\", function () {\n\t\t\tassert.equal(isArrayLike(Symbol(\"foo\")), false);\n\t\t});\n\t}\n\n\tit(\"Should return false on null\", function () { assert.equal(isArrayLike(null), false); });\n\tit(\"Should return false on undefined\", function () {\n\t\tassert.equal(isArrayLike(void 0), false);\n\t});\n});\n"]},"metadata":{},"sourceType":"script"}