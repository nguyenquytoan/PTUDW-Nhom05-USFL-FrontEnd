{"ast":null,"code":"/**\n * @fileoverview Rule to flag unnecessary bind calls\n * @author Bence Dányi <bence@danyi.me>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst SIDE_EFFECT_FREE_NODE_TYPES = new Set([\"Literal\", \"Identifier\", \"ThisExpression\", \"FunctionExpression\"]); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unnecessary calls to `.bind()`\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-extra-bind\"\n    },\n    schema: [],\n    fixable: \"code\",\n    messages: {\n      unexpected: \"The function binding is unnecessary.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    let scopeInfo = null;\n    /**\n     * Checks if a node is free of side effects.\n     *\n     * This check is stricter than it needs to be, in order to keep the implementation simple.\n     * @param {ASTNode} node A node to check.\n     * @returns {boolean} True if the node is known to be side-effect free, false otherwise.\n     */\n\n    function isSideEffectFree(node) {\n      return SIDE_EFFECT_FREE_NODE_TYPES.has(node.type);\n    }\n    /**\n     * Reports a given function node.\n     * @param {ASTNode} node A node to report. This is a FunctionExpression or\n     *      an ArrowFunctionExpression.\n     * @returns {void}\n     */\n\n\n    function report(node) {\n      context.report({\n        node: node.parent.parent,\n        messageId: \"unexpected\",\n        loc: node.parent.property.loc.start,\n\n        fix(fixer) {\n          if (node.parent.parent.arguments.length && !isSideEffectFree(node.parent.parent.arguments[0])) {\n            return null;\n          }\n\n          const firstTokenToRemove = sourceCode.getFirstTokenBetween(node.parent.object, node.parent.property, astUtils.isNotClosingParenToken);\n          const lastTokenToRemove = sourceCode.getLastToken(node.parent.parent);\n\n          if (sourceCode.commentsExistBetween(firstTokenToRemove, lastTokenToRemove)) {\n            return null;\n          }\n\n          return fixer.removeRange([firstTokenToRemove.range[0], node.parent.parent.range[1]]);\n        }\n\n      });\n    }\n    /**\n     * Checks whether or not a given function node is the callee of `.bind()`\n     * method.\n     *\n     * e.g. `(function() {}.bind(foo))`\n     * @param {ASTNode} node A node to report. This is a FunctionExpression or\n     *      an ArrowFunctionExpression.\n     * @returns {boolean} `true` if the node is the callee of `.bind()` method.\n     */\n\n\n    function isCalleeOfBindMethod(node) {\n      const parent = node.parent;\n      const grandparent = parent.parent;\n      return grandparent && grandparent.type === \"CallExpression\" && grandparent.callee === parent && grandparent.arguments.length === 1 && grandparent.arguments[0].type !== \"SpreadElement\" && parent.type === \"MemberExpression\" && parent.object === node && astUtils.getStaticPropertyName(parent) === \"bind\";\n    }\n    /**\n     * Adds a scope information object to the stack.\n     * @param {ASTNode} node A node to add. This node is a FunctionExpression\n     *      or a FunctionDeclaration node.\n     * @returns {void}\n     */\n\n\n    function enterFunction(node) {\n      scopeInfo = {\n        isBound: isCalleeOfBindMethod(node),\n        thisFound: false,\n        upper: scopeInfo\n      };\n    }\n    /**\n     * Removes the scope information object from the top of the stack.\n     * At the same time, this reports the function node if the function has\n     * `.bind()` and the `this` keywords found.\n     * @param {ASTNode} node A node to remove. This node is a\n     *      FunctionExpression or a FunctionDeclaration node.\n     * @returns {void}\n     */\n\n\n    function exitFunction(node) {\n      if (scopeInfo.isBound && !scopeInfo.thisFound) {\n        report(node);\n      }\n\n      scopeInfo = scopeInfo.upper;\n    }\n    /**\n     * Reports a given arrow function if the function is callee of `.bind()`\n     * method.\n     * @param {ASTNode} node A node to report. This node is an\n     *      ArrowFunctionExpression.\n     * @returns {void}\n     */\n\n\n    function exitArrowFunction(node) {\n      if (isCalleeOfBindMethod(node)) {\n        report(node);\n      }\n    }\n    /**\n     * Set the mark as the `this` keyword was found in this scope.\n     * @returns {void}\n     */\n\n\n    function markAsThisFound() {\n      if (scopeInfo) {\n        scopeInfo.thisFound = true;\n      }\n    }\n\n    return {\n      \"ArrowFunctionExpression:exit\": exitArrowFunction,\n      FunctionDeclaration: enterFunction,\n      \"FunctionDeclaration:exit\": exitFunction,\n      FunctionExpression: enterFunction,\n      \"FunctionExpression:exit\": exitFunction,\n      ThisExpression: markAsThisFound\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-extra-bind.js"],"names":["astUtils","require","SIDE_EFFECT_FREE_NODE_TYPES","Set","module","exports","meta","type","docs","description","category","recommended","url","schema","fixable","messages","unexpected","create","context","sourceCode","getSourceCode","scopeInfo","isSideEffectFree","node","has","report","parent","messageId","loc","property","start","fix","fixer","arguments","length","firstTokenToRemove","getFirstTokenBetween","object","isNotClosingParenToken","lastTokenToRemove","getLastToken","commentsExistBetween","removeRange","range","isCalleeOfBindMethod","grandparent","callee","getStaticPropertyName","enterFunction","isBound","thisFound","upper","exitFunction","exitArrowFunction","markAsThisFound","FunctionDeclaration","FunctionExpression","ThisExpression"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to flag unnecessary bind calls\n * @author Bence Dányi <bence@danyi.me>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst SIDE_EFFECT_FREE_NODE_TYPES = new Set([\"Literal\", \"Identifier\", \"ThisExpression\", \"FunctionExpression\"]);\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow unnecessary calls to `.bind()`\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-extra-bind\"\n        },\n\n        schema: [],\n        fixable: \"code\",\n\n        messages: {\n            unexpected: \"The function binding is unnecessary.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        let scopeInfo = null;\n\n        /**\n         * Checks if a node is free of side effects.\n         *\n         * This check is stricter than it needs to be, in order to keep the implementation simple.\n         * @param {ASTNode} node A node to check.\n         * @returns {boolean} True if the node is known to be side-effect free, false otherwise.\n         */\n        function isSideEffectFree(node) {\n            return SIDE_EFFECT_FREE_NODE_TYPES.has(node.type);\n        }\n\n        /**\n         * Reports a given function node.\n         * @param {ASTNode} node A node to report. This is a FunctionExpression or\n         *      an ArrowFunctionExpression.\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({\n                node: node.parent.parent,\n                messageId: \"unexpected\",\n                loc: node.parent.property.loc.start,\n                fix(fixer) {\n                    if (node.parent.parent.arguments.length && !isSideEffectFree(node.parent.parent.arguments[0])) {\n                        return null;\n                    }\n\n                    const firstTokenToRemove = sourceCode\n                        .getFirstTokenBetween(node.parent.object, node.parent.property, astUtils.isNotClosingParenToken);\n                    const lastTokenToRemove = sourceCode.getLastToken(node.parent.parent);\n\n                    if (sourceCode.commentsExistBetween(firstTokenToRemove, lastTokenToRemove)) {\n                        return null;\n                    }\n\n                    return fixer.removeRange([firstTokenToRemove.range[0], node.parent.parent.range[1]]);\n                }\n            });\n        }\n\n        /**\n         * Checks whether or not a given function node is the callee of `.bind()`\n         * method.\n         *\n         * e.g. `(function() {}.bind(foo))`\n         * @param {ASTNode} node A node to report. This is a FunctionExpression or\n         *      an ArrowFunctionExpression.\n         * @returns {boolean} `true` if the node is the callee of `.bind()` method.\n         */\n        function isCalleeOfBindMethod(node) {\n            const parent = node.parent;\n            const grandparent = parent.parent;\n\n            return (\n                grandparent &&\n                grandparent.type === \"CallExpression\" &&\n                grandparent.callee === parent &&\n                grandparent.arguments.length === 1 &&\n                grandparent.arguments[0].type !== \"SpreadElement\" &&\n                parent.type === \"MemberExpression\" &&\n                parent.object === node &&\n                astUtils.getStaticPropertyName(parent) === \"bind\"\n            );\n        }\n\n        /**\n         * Adds a scope information object to the stack.\n         * @param {ASTNode} node A node to add. This node is a FunctionExpression\n         *      or a FunctionDeclaration node.\n         * @returns {void}\n         */\n        function enterFunction(node) {\n            scopeInfo = {\n                isBound: isCalleeOfBindMethod(node),\n                thisFound: false,\n                upper: scopeInfo\n            };\n        }\n\n        /**\n         * Removes the scope information object from the top of the stack.\n         * At the same time, this reports the function node if the function has\n         * `.bind()` and the `this` keywords found.\n         * @param {ASTNode} node A node to remove. This node is a\n         *      FunctionExpression or a FunctionDeclaration node.\n         * @returns {void}\n         */\n        function exitFunction(node) {\n            if (scopeInfo.isBound && !scopeInfo.thisFound) {\n                report(node);\n            }\n\n            scopeInfo = scopeInfo.upper;\n        }\n\n        /**\n         * Reports a given arrow function if the function is callee of `.bind()`\n         * method.\n         * @param {ASTNode} node A node to report. This node is an\n         *      ArrowFunctionExpression.\n         * @returns {void}\n         */\n        function exitArrowFunction(node) {\n            if (isCalleeOfBindMethod(node)) {\n                report(node);\n            }\n        }\n\n        /**\n         * Set the mark as the `this` keyword was found in this scope.\n         * @returns {void}\n         */\n        function markAsThisFound() {\n            if (scopeInfo) {\n                scopeInfo.thisFound = true;\n            }\n        }\n\n        return {\n            \"ArrowFunctionExpression:exit\": exitArrowFunction,\n            FunctionDeclaration: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            FunctionExpression: enterFunction,\n            \"FunctionExpression:exit\": exitFunction,\n            ThisExpression: markAsThisFound\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}