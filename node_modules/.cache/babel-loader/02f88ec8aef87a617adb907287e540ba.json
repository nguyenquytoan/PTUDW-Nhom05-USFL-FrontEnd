{"ast":null,"code":"var retry = require('../lib/retry');\n\nfunction attemptAsyncOperation(someInput, cb) {\n  var opts = {\n    retries: 2,\n    factor: 2,\n    minTimeout: 1 * 1000,\n    maxTimeout: 2 * 1000,\n    randomize: true\n  };\n  var operation = retry.operation(opts);\n  operation.attempt(function (currentAttempt) {\n    failingAsyncOperation(someInput, function (err, result) {\n      if (err && err.message === 'A fatal error') {\n        operation.stop();\n        return cb(err);\n      }\n\n      if (operation.retry(err)) {\n        return;\n      }\n\n      cb(operation.mainError(), operation.errors(), result);\n    });\n  });\n}\n\nattemptAsyncOperation('test input', function (err, errors, result) {\n  console.warn('err:');\n  console.log(err);\n  console.warn('result:');\n  console.log(result);\n});\n\nfunction failingAsyncOperation(input, cb) {\n  return setImmediate(cb.bind(null, new Error('A fatal error')));\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/retry/example/stop.js"],"names":["retry","require","attemptAsyncOperation","someInput","cb","opts","retries","factor","minTimeout","maxTimeout","randomize","operation","attempt","currentAttempt","failingAsyncOperation","err","result","message","stop","mainError","errors","console","warn","log","input","setImmediate","bind","Error"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AAEA,SAASC,qBAAT,CAA+BC,SAA/B,EAA0CC,EAA1C,EAA8C;AAC5C,MAAIC,IAAI,GAAG;AACTC,IAAAA,OAAO,EAAE,CADA;AAETC,IAAAA,MAAM,EAAE,CAFC;AAGTC,IAAAA,UAAU,EAAE,IAAI,IAHP;AAITC,IAAAA,UAAU,EAAE,IAAI,IAJP;AAKTC,IAAAA,SAAS,EAAE;AALF,GAAX;AAOA,MAAIC,SAAS,GAAGX,KAAK,CAACW,SAAN,CAAgBN,IAAhB,CAAhB;AAEAM,EAAAA,SAAS,CAACC,OAAV,CAAkB,UAASC,cAAT,EAAyB;AACzCC,IAAAA,qBAAqB,CAACX,SAAD,EAAY,UAASY,GAAT,EAAcC,MAAd,EAAsB;AAErD,UAAID,GAAG,IAAIA,GAAG,CAACE,OAAJ,KAAgB,eAA3B,EAA4C;AAC1CN,QAAAA,SAAS,CAACO,IAAV;AACA,eAAOd,EAAE,CAACW,GAAD,CAAT;AACD;;AAED,UAAIJ,SAAS,CAACX,KAAV,CAAgBe,GAAhB,CAAJ,EAA0B;AACxB;AACD;;AAEDX,MAAAA,EAAE,CAACO,SAAS,CAACQ,SAAV,EAAD,EAAwBR,SAAS,CAACS,MAAV,EAAxB,EAA4CJ,MAA5C,CAAF;AACD,KAZoB,CAArB;AAaD,GAdD;AAeD;;AAEDd,qBAAqB,CAAC,YAAD,EAAe,UAASa,GAAT,EAAcK,MAAd,EAAsBJ,MAAtB,EAA8B;AAChEK,EAAAA,OAAO,CAACC,IAAR,CAAa,MAAb;AACAD,EAAAA,OAAO,CAACE,GAAR,CAAYR,GAAZ;AAEAM,EAAAA,OAAO,CAACC,IAAR,CAAa,SAAb;AACAD,EAAAA,OAAO,CAACE,GAAR,CAAYP,MAAZ;AACD,CANoB,CAArB;;AAQA,SAASF,qBAAT,CAA+BU,KAA/B,EAAsCpB,EAAtC,EAA0C;AACxC,SAAOqB,YAAY,CAACrB,EAAE,CAACsB,IAAH,CAAQ,IAAR,EAAc,IAAIC,KAAJ,CAAU,eAAV,CAAd,CAAD,CAAnB;AACD","sourcesContent":["var retry = require('../lib/retry');\n\nfunction attemptAsyncOperation(someInput, cb) {\n  var opts = {\n    retries: 2,\n    factor: 2,\n    minTimeout: 1 * 1000,\n    maxTimeout: 2 * 1000,\n    randomize: true\n  };\n  var operation = retry.operation(opts);\n\n  operation.attempt(function(currentAttempt) {\n    failingAsyncOperation(someInput, function(err, result) {\n\n      if (err && err.message === 'A fatal error') {\n        operation.stop();\n        return cb(err);\n      }\n\n      if (operation.retry(err)) {\n        return;\n      }\n\n      cb(operation.mainError(), operation.errors(), result);\n    });\n  });\n}\n\nattemptAsyncOperation('test input', function(err, errors, result) {\n  console.warn('err:');\n  console.log(err);\n\n  console.warn('result:');\n  console.log(result);\n});\n\nfunction failingAsyncOperation(input, cb) {\n  return setImmediate(cb.bind(null, new Error('A fatal error')));\n}\n"]},"metadata":{},"sourceType":"script"}