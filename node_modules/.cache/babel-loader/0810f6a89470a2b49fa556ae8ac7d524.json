{"ast":null,"code":"'use strict';\n\nfunction _fs() {\n  const data = _interopRequireDefault(require('fs'));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _events() {\n  const data = require('events');\n\n  _events = function _events() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _anymatch() {\n  const data = _interopRequireDefault(require('anymatch'));\n\n  _anymatch = function _anymatch() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _micromatch() {\n  const data = _interopRequireDefault(require('micromatch'));\n\n  _micromatch = function _micromatch() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _walker() {\n  const data = _interopRequireDefault(require('walker'));\n\n  _walker = function _walker() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nlet fsevents;\n\ntry {\n  fsevents = require('fsevents');\n} catch (e) {// Optional dependency, only supported on Darwin.\n}\n\nconst CHANGE_EVENT = 'change';\nconst DELETE_EVENT = 'delete';\nconst ADD_EVENT = 'add';\nconst ALL_EVENT = 'all';\n/**\n * Export `FSEventsWatcher` class.\n * Watches `dir`.\n */\n\nclass FSEventsWatcher extends _events().EventEmitter {\n  static isSupported() {\n    return fsevents !== undefined;\n  }\n\n  static normalizeProxy(callback) {\n    return (filepath, stats) => callback(_path().default.normalize(filepath), stats);\n  }\n\n  static recReaddir(dir, dirCallback, fileCallback, endCallback, errorCallback, ignored) {\n    (0, _walker().default)(dir).filterDir(currentDir => !ignored || !(0, _anymatch().default)(ignored, currentDir)).on('dir', FSEventsWatcher.normalizeProxy(dirCallback)).on('file', FSEventsWatcher.normalizeProxy(fileCallback)).on('error', errorCallback).on('end', () => {\n      endCallback();\n    });\n  }\n\n  constructor(dir, opts) {\n    if (!fsevents) {\n      throw new Error('`fsevents` unavailable (this watcher can only be used on Darwin)');\n    }\n\n    super();\n\n    _defineProperty(this, 'root', void 0);\n\n    _defineProperty(this, 'ignored', void 0);\n\n    _defineProperty(this, 'glob', void 0);\n\n    _defineProperty(this, 'dot', void 0);\n\n    _defineProperty(this, 'hasIgnore', void 0);\n\n    _defineProperty(this, 'doIgnore', void 0);\n\n    _defineProperty(this, 'watcher', void 0);\n\n    _defineProperty(this, '_tracked', void 0);\n\n    this.dot = opts.dot || false;\n    this.ignored = opts.ignored;\n    this.glob = Array.isArray(opts.glob) ? opts.glob : [opts.glob];\n    this.hasIgnore = Boolean(opts.ignored) && !(Array.isArray(opts) && opts.length > 0);\n    this.doIgnore = opts.ignored ? (0, _anymatch().default)(opts.ignored) : () => false;\n    this.root = _path().default.resolve(dir);\n    this.watcher = fsevents(this.root);\n    this.watcher.start().on('change', this.handleEvent.bind(this));\n    this._tracked = new Set();\n    FSEventsWatcher.recReaddir(this.root, filepath => {\n      this._tracked.add(filepath);\n    }, filepath => {\n      this._tracked.add(filepath);\n    }, this.emit.bind(this, 'ready'), this.emit.bind(this, 'error'), this.ignored);\n  }\n  /**\n   * End watching.\n   */\n\n\n  close(callback) {\n    this.watcher.stop();\n    this.removeAllListeners();\n\n    if (typeof callback === 'function') {\n      process.nextTick(callback.bind(null, null, true));\n    }\n  }\n\n  isFileIncluded(relativePath) {\n    if (this.doIgnore(relativePath)) {\n      return false;\n    }\n\n    return this.glob.length ? _micromatch().default.some(relativePath, this.glob, {\n      dot: this.dot\n    }) : this.dot || _micromatch().default.some(relativePath, '**/*');\n  }\n\n  handleEvent(filepath) {\n    const relativePath = _path().default.relative(this.root, filepath);\n\n    if (!this.isFileIncluded(relativePath)) {\n      return;\n    }\n\n    _fs().default.lstat(filepath, (error, stat) => {\n      if (error && error.code !== 'ENOENT') {\n        this.emit('error', error);\n        return;\n      }\n\n      if (error) {\n        // Ignore files that aren't tracked and don't exist.\n        if (!this._tracked.has(filepath)) {\n          return;\n        }\n\n        this._emit(DELETE_EVENT, relativePath);\n\n        this._tracked.delete(filepath);\n\n        return;\n      }\n\n      if (this._tracked.has(filepath)) {\n        this._emit(CHANGE_EVENT, relativePath, stat);\n      } else {\n        this._tracked.add(filepath);\n\n        this._emit(ADD_EVENT, relativePath, stat);\n      }\n    });\n  }\n  /**\n   * Emit events.\n   */\n\n\n  _emit(type, file, stat) {\n    this.emit(type, file, this.root, stat);\n    this.emit(ALL_EVENT, type, file, this.root, stat);\n  }\n\n}\n\nmodule.exports = FSEventsWatcher;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-haste-map/build/lib/FSEventsWatcher.js"],"names":["_fs","data","_interopRequireDefault","require","_path","_events","_anymatch","_micromatch","_walker","obj","__esModule","default","_defineProperty","key","value","Object","defineProperty","enumerable","configurable","writable","fsevents","e","CHANGE_EVENT","DELETE_EVENT","ADD_EVENT","ALL_EVENT","FSEventsWatcher","EventEmitter","isSupported","undefined","normalizeProxy","callback","filepath","stats","normalize","recReaddir","dir","dirCallback","fileCallback","endCallback","errorCallback","ignored","filterDir","currentDir","on","constructor","opts","Error","dot","glob","Array","isArray","hasIgnore","Boolean","length","doIgnore","root","resolve","watcher","start","handleEvent","bind","_tracked","Set","add","emit","close","stop","removeAllListeners","process","nextTick","isFileIncluded","relativePath","some","relative","lstat","error","stat","code","has","_emit","delete","type","file","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction _fs() {\n  const data = _interopRequireDefault(require('fs'));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _events() {\n  const data = require('events');\n\n  _events = function _events() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _anymatch() {\n  const data = _interopRequireDefault(require('anymatch'));\n\n  _anymatch = function _anymatch() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _micromatch() {\n  const data = _interopRequireDefault(require('micromatch'));\n\n  _micromatch = function _micromatch() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _walker() {\n  const data = _interopRequireDefault(require('walker'));\n\n  _walker = function _walker() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nlet fsevents;\n\ntry {\n  fsevents = require('fsevents');\n} catch (e) {\n  // Optional dependency, only supported on Darwin.\n}\n\nconst CHANGE_EVENT = 'change';\nconst DELETE_EVENT = 'delete';\nconst ADD_EVENT = 'add';\nconst ALL_EVENT = 'all';\n\n/**\n * Export `FSEventsWatcher` class.\n * Watches `dir`.\n */\nclass FSEventsWatcher extends _events().EventEmitter {\n  static isSupported() {\n    return fsevents !== undefined;\n  }\n\n  static normalizeProxy(callback) {\n    return (filepath, stats) =>\n      callback(_path().default.normalize(filepath), stats);\n  }\n\n  static recReaddir(\n    dir,\n    dirCallback,\n    fileCallback,\n    endCallback,\n    errorCallback,\n    ignored\n  ) {\n    (0, _walker().default)(dir)\n      .filterDir(\n        currentDir => !ignored || !(0, _anymatch().default)(ignored, currentDir)\n      )\n      .on('dir', FSEventsWatcher.normalizeProxy(dirCallback))\n      .on('file', FSEventsWatcher.normalizeProxy(fileCallback))\n      .on('error', errorCallback)\n      .on('end', () => {\n        endCallback();\n      });\n  }\n\n  constructor(dir, opts) {\n    if (!fsevents) {\n      throw new Error(\n        '`fsevents` unavailable (this watcher can only be used on Darwin)'\n      );\n    }\n\n    super();\n\n    _defineProperty(this, 'root', void 0);\n\n    _defineProperty(this, 'ignored', void 0);\n\n    _defineProperty(this, 'glob', void 0);\n\n    _defineProperty(this, 'dot', void 0);\n\n    _defineProperty(this, 'hasIgnore', void 0);\n\n    _defineProperty(this, 'doIgnore', void 0);\n\n    _defineProperty(this, 'watcher', void 0);\n\n    _defineProperty(this, '_tracked', void 0);\n\n    this.dot = opts.dot || false;\n    this.ignored = opts.ignored;\n    this.glob = Array.isArray(opts.glob) ? opts.glob : [opts.glob];\n    this.hasIgnore =\n      Boolean(opts.ignored) && !(Array.isArray(opts) && opts.length > 0);\n    this.doIgnore = opts.ignored\n      ? (0, _anymatch().default)(opts.ignored)\n      : () => false;\n    this.root = _path().default.resolve(dir);\n    this.watcher = fsevents(this.root);\n    this.watcher.start().on('change', this.handleEvent.bind(this));\n    this._tracked = new Set();\n    FSEventsWatcher.recReaddir(\n      this.root,\n      filepath => {\n        this._tracked.add(filepath);\n      },\n      filepath => {\n        this._tracked.add(filepath);\n      },\n      this.emit.bind(this, 'ready'),\n      this.emit.bind(this, 'error'),\n      this.ignored\n    );\n  }\n  /**\n   * End watching.\n   */\n\n  close(callback) {\n    this.watcher.stop();\n    this.removeAllListeners();\n\n    if (typeof callback === 'function') {\n      process.nextTick(callback.bind(null, null, true));\n    }\n  }\n\n  isFileIncluded(relativePath) {\n    if (this.doIgnore(relativePath)) {\n      return false;\n    }\n\n    return this.glob.length\n      ? _micromatch().default.some(relativePath, this.glob, {\n          dot: this.dot\n        })\n      : this.dot || _micromatch().default.some(relativePath, '**/*');\n  }\n\n  handleEvent(filepath) {\n    const relativePath = _path().default.relative(this.root, filepath);\n\n    if (!this.isFileIncluded(relativePath)) {\n      return;\n    }\n\n    _fs().default.lstat(filepath, (error, stat) => {\n      if (error && error.code !== 'ENOENT') {\n        this.emit('error', error);\n        return;\n      }\n\n      if (error) {\n        // Ignore files that aren't tracked and don't exist.\n        if (!this._tracked.has(filepath)) {\n          return;\n        }\n\n        this._emit(DELETE_EVENT, relativePath);\n\n        this._tracked.delete(filepath);\n\n        return;\n      }\n\n      if (this._tracked.has(filepath)) {\n        this._emit(CHANGE_EVENT, relativePath, stat);\n      } else {\n        this._tracked.add(filepath);\n\n        this._emit(ADD_EVENT, relativePath, stat);\n      }\n    });\n  }\n  /**\n   * Emit events.\n   */\n\n  _emit(type, file, stat) {\n    this.emit(type, file, this.root, stat);\n    this.emit(ALL_EVENT, type, file, this.root, stat);\n  }\n}\n\nmodule.exports = FSEventsWatcher;\n"]},"metadata":{},"sourceType":"script"}