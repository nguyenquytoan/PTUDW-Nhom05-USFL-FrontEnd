{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"chai\").assert,\n    safeToString = require(\"../../lib/safe-to-string\");\n\ndescribe(\"lib/safe-to-string\", function () {\n  it(\"Should return input string\", function () {\n    assert.equal(safeToString(\"foo\"), \"foo\");\n  });\n  it(\"Should coerce numbers\", function () {\n    assert.equal(safeToString(12), \"12\");\n  });\n  it(\"Should coerce booleans\", function () {\n    assert.equal(safeToString(true), \"true\");\n  });\n  it(\"Should coerce string objects\", function () {\n    assert.equal(safeToString(new String(\"bar\")), \"bar\");\n  });\n  it(\"Should coerce objects\", function () {\n    assert.equal(safeToString({\n      toString: function () {\n        return \"Some object\";\n      }\n    }), \"Some object\");\n  });\n  it(\"Should coerce null\", function () {\n    assert.equal(safeToString(null), \"null\");\n  });\n  it(\"Should coerce undefined\", function () {\n    assert.equal(safeToString(undefined), \"undefined\");\n  });\n\n  if (typeof Symbol === \"function\") {\n    it(\"Should coerce symbols\", function () {\n      // eslint-disable-next-line no-undef\n      assert.equal(safeToString(Symbol()), \"Symbol()\");\n    });\n  }\n\n  it(\"Should return null for non coercible values\", function () {\n    assert.equal(safeToString({\n      toString: null\n    }), null);\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type/test/lib/safe-to-string.js"],"names":["assert","require","safeToString","describe","it","equal","String","toString","undefined","Symbol"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAASC,OAAO,CAAC,MAAD,CAAP,CAAgBD,MAAnC;AAAA,IACIE,YAAY,GAAGD,OAAO,CAAC,0BAAD,CAD1B;;AAGAE,QAAQ,CAAC,oBAAD,EAAuB,YAAY;AAC1CC,EAAAA,EAAE,CAAC,4BAAD,EAA+B,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,YAAY,CAAC,KAAD,CAAzB,EAAkC,KAAlC;AAA2C,GAAxF,CAAF;AACAE,EAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,YAAY,CAAC,EAAD,CAAzB,EAA+B,IAA/B;AAAuC,GAA/E,CAAF;AACAE,EAAAA,EAAE,CAAC,wBAAD,EAA2B,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,YAAY,CAAC,IAAD,CAAzB,EAAiC,MAAjC;AAA2C,GAApF,CAAF;AACAE,EAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAY;AAC9CJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,YAAY,CAAC,IAAII,MAAJ,CAAW,KAAX,CAAD,CAAzB,EAA8C,KAA9C;AACA,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAY;AACvCJ,IAAAA,MAAM,CAACK,KAAP,CACCH,YAAY,CAAC;AAAEK,MAAAA,QAAQ,EAAE,YAAY;AAAE,eAAO,aAAP;AAAuB;AAAjD,KAAD,CADb,EACoE,aADpE;AAGA,GAJC,CAAF;AAKAH,EAAAA,EAAE,CAAC,oBAAD,EAAuB,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,YAAY,CAAC,IAAD,CAAzB,EAAiC,MAAjC;AAA2C,GAAhF,CAAF;AACAE,EAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAY;AACzCJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,YAAY,CAACM,SAAD,CAAzB,EAAsC,WAAtC;AACA,GAFC,CAAF;;AAIA,MAAI,OAAOC,MAAP,KAAkB,UAAtB,EAAkC;AACjCL,IAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAY;AACvC;AACAJ,MAAAA,MAAM,CAACK,KAAP,CAAaH,YAAY,CAACO,MAAM,EAAP,CAAzB,EAAqC,UAArC;AACA,KAHC,CAAF;AAIA;;AACDL,EAAAA,EAAE,CAAC,6CAAD,EAAgD,YAAY;AAC7DJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,YAAY,CAAC;AAAEK,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAAzB,EAA+C,IAA/C;AACA,GAFC,CAAF;AAGA,CA1BO,CAAR","sourcesContent":["\"use strict\";\n\nvar assert       = require(\"chai\").assert\n  , safeToString = require(\"../../lib/safe-to-string\");\n\ndescribe(\"lib/safe-to-string\", function () {\n\tit(\"Should return input string\", function () { assert.equal(safeToString(\"foo\"), \"foo\"); });\n\tit(\"Should coerce numbers\", function () { assert.equal(safeToString(12), \"12\"); });\n\tit(\"Should coerce booleans\", function () { assert.equal(safeToString(true), \"true\"); });\n\tit(\"Should coerce string objects\", function () {\n\t\tassert.equal(safeToString(new String(\"bar\")), \"bar\");\n\t});\n\tit(\"Should coerce objects\", function () {\n\t\tassert.equal(\n\t\t\tsafeToString({ toString: function () { return \"Some object\"; } }), \"Some object\"\n\t\t);\n\t});\n\tit(\"Should coerce null\", function () { assert.equal(safeToString(null), \"null\"); });\n\tit(\"Should coerce undefined\", function () {\n\t\tassert.equal(safeToString(undefined), \"undefined\");\n\t});\n\n\tif (typeof Symbol === \"function\") {\n\t\tit(\"Should coerce symbols\", function () {\n\t\t\t// eslint-disable-next-line no-undef\n\t\t\tassert.equal(safeToString(Symbol()), \"Symbol()\");\n\t\t});\n\t}\n\tit(\"Should return null for non coercible values\", function () {\n\t\tassert.equal(safeToString({ toString: null }), null);\n\t});\n});\n"]},"metadata":{},"sourceType":"script"}