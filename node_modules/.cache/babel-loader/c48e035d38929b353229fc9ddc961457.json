{"ast":null,"code":"import { root } from '../../util/root';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { map } from '../../operators/map';\n\nfunction getCORSRequest() {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest() {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId;\n\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {}\n      }\n\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport function ajaxGet(url, headers = null) {\n  return new AjaxObservable({\n    method: 'GET',\n    url,\n    headers\n  });\n}\nexport function ajaxPost(url, body, headers) {\n  return new AjaxObservable({\n    method: 'POST',\n    url,\n    body,\n    headers\n  });\n}\nexport function ajaxDelete(url, headers) {\n  return new AjaxObservable({\n    method: 'DELETE',\n    url,\n    headers\n  });\n}\nexport function ajaxPut(url, body, headers) {\n  return new AjaxObservable({\n    method: 'PUT',\n    url,\n    body,\n    headers\n  });\n}\nexport function ajaxPatch(url, body, headers) {\n  return new AjaxObservable({\n    method: 'PATCH',\n    url,\n    body,\n    headers\n  });\n}\nconst mapResponse = map((x, index) => x.response);\nexport function ajaxGetJSON(url, headers) {\n  return mapResponse(new AjaxObservable({\n    method: 'GET',\n    url,\n    responseType: 'json',\n    headers\n  }));\n}\nexport class AjaxObservable extends Observable {\n  constructor(urlOrRequest) {\n    super();\n    const request = {\n      async: true,\n      createXHR: function () {\n        return this.crossDomain ? getCORSRequest() : getXMLHttpRequest();\n      },\n      crossDomain: true,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  _subscribe(subscriber) {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n\n}\n\nAjaxObservable.create = (() => {\n  const create = urlOrRequest => {\n    return new AjaxObservable(urlOrRequest);\n  };\n\n  create.get = ajaxGet;\n  create.post = ajaxPost;\n  create.delete = ajaxDelete;\n  create.put = ajaxPut;\n  create.patch = ajaxPatch;\n  create.getJSON = ajaxGetJSON;\n  return create;\n})();\n\nexport class AjaxSubscriber extends Subscriber {\n  constructor(destination, request) {\n    super(destination);\n    this.request = request;\n    this.done = false;\n    const headers = request.headers = request.headers || {};\n\n    if (!request.crossDomain && !this.getHeader(headers, 'X-Requested-With')) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    let contentTypeHeader = this.getHeader(headers, 'Content-Type');\n\n    if (!contentTypeHeader && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    request.body = this.serializeBody(request.body, this.getHeader(request.headers, 'Content-Type'));\n    this.send();\n  }\n\n  next(e) {\n    this.done = true;\n    const {\n      xhr,\n      request,\n      destination\n    } = this;\n    let result;\n\n    try {\n      result = new AjaxResponse(e, xhr, request);\n    } catch (err) {\n      return destination.error(err);\n    }\n\n    destination.next(result);\n  }\n\n  send() {\n    const {\n      request,\n      request: {\n        user,\n        method,\n        url,\n        async,\n        password,\n        headers,\n        body\n      }\n    } = this;\n\n    try {\n      const xhr = this.xhr = request.createXHR();\n      this.setupEvents(xhr, request);\n\n      if (user) {\n        xhr.open(method, url, async, user, password);\n      } else {\n        xhr.open(method, url, async);\n      }\n\n      if (async) {\n        xhr.timeout = request.timeout;\n        xhr.responseType = request.responseType;\n      }\n\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = !!request.withCredentials;\n      }\n\n      this.setHeaders(xhr, headers);\n\n      if (body) {\n        xhr.send(body);\n      } else {\n        xhr.send();\n      }\n    } catch (err) {\n      this.error(err);\n    }\n  }\n\n  serializeBody(body, contentType) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(body[key])}`).join('&');\n\n      case 'application/json':\n        return JSON.stringify(body);\n\n      default:\n        return body;\n    }\n  }\n\n  setHeaders(xhr, headers) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  getHeader(headers, headerName) {\n    for (let key in headers) {\n      if (key.toLowerCase() === headerName.toLowerCase()) {\n        return headers[key];\n      }\n    }\n\n    return undefined;\n  }\n\n  setupEvents(xhr, request) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(e) {\n      const {\n        subscriber,\n        progressSubscriber,\n        request\n      } = xhrTimeout;\n\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n\n      let error;\n\n      try {\n        error = new AjaxTimeoutError(this, request);\n      } catch (err) {\n        error = err;\n      }\n\n      subscriber.error(error);\n    }\n\n    xhr.ontimeout = xhrTimeout;\n    xhrTimeout.request = request;\n    xhrTimeout.subscriber = this;\n    xhrTimeout.progressSubscriber = progressSubscriber;\n\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress;\n\n        xhrProgress = function (e) {\n          const {\n            progressSubscriber\n          } = xhrProgress;\n          progressSubscriber.next(e);\n        };\n\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n\n        xhrProgress.progressSubscriber = progressSubscriber;\n      }\n\n      let xhrError;\n\n      xhrError = function (e) {\n        const {\n          progressSubscriber,\n          subscriber,\n          request\n        } = xhrError;\n\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n\n        let error;\n\n        try {\n          error = new AjaxError('ajax error', this, request);\n        } catch (err) {\n          error = err;\n        }\n\n        subscriber.error(error);\n      };\n\n      xhr.onerror = xhrError;\n      xhrError.request = request;\n      xhrError.subscriber = this;\n      xhrError.progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(e) {\n      return;\n    }\n\n    xhr.onreadystatechange = xhrReadyStateChange;\n    xhrReadyStateChange.subscriber = this;\n    xhrReadyStateChange.progressSubscriber = progressSubscriber;\n    xhrReadyStateChange.request = request;\n\n    function xhrLoad(e) {\n      const {\n        subscriber,\n        progressSubscriber,\n        request\n      } = xhrLoad;\n\n      if (this.readyState === 4) {\n        let status = this.status === 1223 ? 204 : this.status;\n        let response = this.responseType === 'text' ? this.response || this.responseText : this.response;\n\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (status < 400) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n\n          let error;\n\n          try {\n            error = new AjaxError('ajax error ' + status, this, request);\n          } catch (err) {\n            error = err;\n          }\n\n          subscriber.error(error);\n        }\n      }\n    }\n\n    xhr.onload = xhrLoad;\n    xhrLoad.subscriber = this;\n    xhrLoad.progressSubscriber = progressSubscriber;\n    xhrLoad.request = request;\n  }\n\n  unsubscribe() {\n    const {\n      done,\n      xhr\n    } = this;\n\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n\n    super.unsubscribe();\n  }\n\n}\nexport class AjaxResponse {\n  constructor(originalEvent, xhr, request) {\n    this.originalEvent = originalEvent;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n\n}\n\nconst AjaxErrorImpl = (() => {\n  function AjaxErrorImpl(message, xhr, request) {\n    Error.call(this);\n    this.message = message;\n    this.name = 'AjaxError';\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n    return this;\n  }\n\n  AjaxErrorImpl.prototype = Object.create(Error.prototype);\n  return AjaxErrorImpl;\n})();\n\nexport const AjaxError = AjaxErrorImpl;\n\nfunction parseJson(xhr) {\n  if ('response' in xhr) {\n    return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n  } else {\n    return JSON.parse(xhr.responseText || 'null');\n  }\n}\n\nfunction parseXhrResponse(responseType, xhr) {\n  switch (responseType) {\n    case 'json':\n      return parseJson(xhr);\n\n    case 'xml':\n      return xhr.responseXML;\n\n    case 'text':\n    default:\n      return 'response' in xhr ? xhr.response : xhr.responseText;\n  }\n}\n\nfunction AjaxTimeoutErrorImpl(xhr, request) {\n  AjaxError.call(this, 'ajax timeout', xhr, request);\n  this.name = 'AjaxTimeoutError';\n  return this;\n}\n\nexport const AjaxTimeoutError = AjaxTimeoutErrorImpl;","map":{"version":3,"sources":["../../../../src/internal/observable/dom/AjaxObservable.ts"],"names":[],"mappings":"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","sourcesContent":["import { root } from '../../util/root';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { map } from '../../operators/map';\nfunction getCORSRequest() {\n    if (root.XMLHttpRequest) {\n        return new root.XMLHttpRequest();\n    }\n    else if (!!root.XDomainRequest) {\n        return new root.XDomainRequest();\n    }\n    else {\n        throw new Error('CORS is not supported by your browser');\n    }\n}\nfunction getXMLHttpRequest() {\n    if (root.XMLHttpRequest) {\n        return new root.XMLHttpRequest();\n    }\n    else {\n        let progId;\n        try {\n            const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n            for (let i = 0; i < 3; i++) {\n                try {\n                    progId = progIds[i];\n                    if (new root.ActiveXObject(progId)) {\n                        break;\n                    }\n                }\n                catch (e) {\n                }\n            }\n            return new root.ActiveXObject(progId);\n        }\n        catch (e) {\n            throw new Error('XMLHttpRequest is not supported by your browser');\n        }\n    }\n}\nexport function ajaxGet(url, headers = null) {\n    return new AjaxObservable({ method: 'GET', url, headers });\n}\nexport function ajaxPost(url, body, headers) {\n    return new AjaxObservable({ method: 'POST', url, body, headers });\n}\nexport function ajaxDelete(url, headers) {\n    return new AjaxObservable({ method: 'DELETE', url, headers });\n}\nexport function ajaxPut(url, body, headers) {\n    return new AjaxObservable({ method: 'PUT', url, body, headers });\n}\nexport function ajaxPatch(url, body, headers) {\n    return new AjaxObservable({ method: 'PATCH', url, body, headers });\n}\nconst mapResponse = map((x, index) => x.response);\nexport function ajaxGetJSON(url, headers) {\n    return mapResponse(new AjaxObservable({\n        method: 'GET',\n        url,\n        responseType: 'json',\n        headers\n    }));\n}\nexport class AjaxObservable extends Observable {\n    constructor(urlOrRequest) {\n        super();\n        const request = {\n            async: true,\n            createXHR: function () {\n                return this.crossDomain ? getCORSRequest() : getXMLHttpRequest();\n            },\n            crossDomain: true,\n            withCredentials: false,\n            headers: {},\n            method: 'GET',\n            responseType: 'json',\n            timeout: 0\n        };\n        if (typeof urlOrRequest === 'string') {\n            request.url = urlOrRequest;\n        }\n        else {\n            for (const prop in urlOrRequest) {\n                if (urlOrRequest.hasOwnProperty(prop)) {\n                    request[prop] = urlOrRequest[prop];\n                }\n            }\n        }\n        this.request = request;\n    }\n    _subscribe(subscriber) {\n        return new AjaxSubscriber(subscriber, this.request);\n    }\n}\nAjaxObservable.create = (() => {\n    const create = (urlOrRequest) => {\n        return new AjaxObservable(urlOrRequest);\n    };\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n    return create;\n})();\nexport class AjaxSubscriber extends Subscriber {\n    constructor(destination, request) {\n        super(destination);\n        this.request = request;\n        this.done = false;\n        const headers = request.headers = request.headers || {};\n        if (!request.crossDomain && !this.getHeader(headers, 'X-Requested-With')) {\n            headers['X-Requested-With'] = 'XMLHttpRequest';\n        }\n        let contentTypeHeader = this.getHeader(headers, 'Content-Type');\n        if (!contentTypeHeader && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n        request.body = this.serializeBody(request.body, this.getHeader(request.headers, 'Content-Type'));\n        this.send();\n    }\n    next(e) {\n        this.done = true;\n        const { xhr, request, destination } = this;\n        let result;\n        try {\n            result = new AjaxResponse(e, xhr, request);\n        }\n        catch (err) {\n            return destination.error(err);\n        }\n        destination.next(result);\n    }\n    send() {\n        const { request, request: { user, method, url, async, password, headers, body } } = this;\n        try {\n            const xhr = this.xhr = request.createXHR();\n            this.setupEvents(xhr, request);\n            if (user) {\n                xhr.open(method, url, async, user, password);\n            }\n            else {\n                xhr.open(method, url, async);\n            }\n            if (async) {\n                xhr.timeout = request.timeout;\n                xhr.responseType = request.responseType;\n            }\n            if ('withCredentials' in xhr) {\n                xhr.withCredentials = !!request.withCredentials;\n            }\n            this.setHeaders(xhr, headers);\n            if (body) {\n                xhr.send(body);\n            }\n            else {\n                xhr.send();\n            }\n        }\n        catch (err) {\n            this.error(err);\n        }\n    }\n    serializeBody(body, contentType) {\n        if (!body || typeof body === 'string') {\n            return body;\n        }\n        else if (root.FormData && body instanceof root.FormData) {\n            return body;\n        }\n        if (contentType) {\n            const splitIndex = contentType.indexOf(';');\n            if (splitIndex !== -1) {\n                contentType = contentType.substring(0, splitIndex);\n            }\n        }\n        switch (contentType) {\n            case 'application/x-www-form-urlencoded':\n                return Object.keys(body).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(body[key])}`).join('&');\n            case 'application/json':\n                return JSON.stringify(body);\n            default:\n                return body;\n        }\n    }\n    setHeaders(xhr, headers) {\n        for (let key in headers) {\n            if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n            }\n        }\n    }\n    getHeader(headers, headerName) {\n        for (let key in headers) {\n            if (key.toLowerCase() === headerName.toLowerCase()) {\n                return headers[key];\n            }\n        }\n        return undefined;\n    }\n    setupEvents(xhr, request) {\n        const progressSubscriber = request.progressSubscriber;\n        function xhrTimeout(e) {\n            const { subscriber, progressSubscriber, request } = xhrTimeout;\n            if (progressSubscriber) {\n                progressSubscriber.error(e);\n            }\n            let error;\n            try {\n                error = new AjaxTimeoutError(this, request);\n            }\n            catch (err) {\n                error = err;\n            }\n            subscriber.error(error);\n        }\n        xhr.ontimeout = xhrTimeout;\n        xhrTimeout.request = request;\n        xhrTimeout.subscriber = this;\n        xhrTimeout.progressSubscriber = progressSubscriber;\n        if (xhr.upload && 'withCredentials' in xhr) {\n            if (progressSubscriber) {\n                let xhrProgress;\n                xhrProgress = function (e) {\n                    const { progressSubscriber } = xhrProgress;\n                    progressSubscriber.next(e);\n                };\n                if (root.XDomainRequest) {\n                    xhr.onprogress = xhrProgress;\n                }\n                else {\n                    xhr.upload.onprogress = xhrProgress;\n                }\n                xhrProgress.progressSubscriber = progressSubscriber;\n            }\n            let xhrError;\n            xhrError = function (e) {\n                const { progressSubscriber, subscriber, request } = xhrError;\n                if (progressSubscriber) {\n                    progressSubscriber.error(e);\n                }\n                let error;\n                try {\n                    error = new AjaxError('ajax error', this, request);\n                }\n                catch (err) {\n                    error = err;\n                }\n                subscriber.error(error);\n            };\n            xhr.onerror = xhrError;\n            xhrError.request = request;\n            xhrError.subscriber = this;\n            xhrError.progressSubscriber = progressSubscriber;\n        }\n        function xhrReadyStateChange(e) {\n            return;\n        }\n        xhr.onreadystatechange = xhrReadyStateChange;\n        xhrReadyStateChange.subscriber = this;\n        xhrReadyStateChange.progressSubscriber = progressSubscriber;\n        xhrReadyStateChange.request = request;\n        function xhrLoad(e) {\n            const { subscriber, progressSubscriber, request } = xhrLoad;\n            if (this.readyState === 4) {\n                let status = this.status === 1223 ? 204 : this.status;\n                let response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);\n                if (status === 0) {\n                    status = response ? 200 : 0;\n                }\n                if (status < 400) {\n                    if (progressSubscriber) {\n                        progressSubscriber.complete();\n                    }\n                    subscriber.next(e);\n                    subscriber.complete();\n                }\n                else {\n                    if (progressSubscriber) {\n                        progressSubscriber.error(e);\n                    }\n                    let error;\n                    try {\n                        error = new AjaxError('ajax error ' + status, this, request);\n                    }\n                    catch (err) {\n                        error = err;\n                    }\n                    subscriber.error(error);\n                }\n            }\n        }\n        xhr.onload = xhrLoad;\n        xhrLoad.subscriber = this;\n        xhrLoad.progressSubscriber = progressSubscriber;\n        xhrLoad.request = request;\n    }\n    unsubscribe() {\n        const { done, xhr } = this;\n        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n            xhr.abort();\n        }\n        super.unsubscribe();\n    }\n}\nexport class AjaxResponse {\n    constructor(originalEvent, xhr, request) {\n        this.originalEvent = originalEvent;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n}\nconst AjaxErrorImpl = (() => {\n    function AjaxErrorImpl(message, xhr, request) {\n        Error.call(this);\n        this.message = message;\n        this.name = 'AjaxError';\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n        return this;\n    }\n    AjaxErrorImpl.prototype = Object.create(Error.prototype);\n    return AjaxErrorImpl;\n})();\nexport const AjaxError = AjaxErrorImpl;\nfunction parseJson(xhr) {\n    if ('response' in xhr) {\n        return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n    }\n    else {\n        return JSON.parse(xhr.responseText || 'null');\n    }\n}\nfunction parseXhrResponse(responseType, xhr) {\n    switch (responseType) {\n        case 'json':\n            return parseJson(xhr);\n        case 'xml':\n            return xhr.responseXML;\n        case 'text':\n        default:\n            return ('response' in xhr) ? xhr.response : xhr.responseText;\n    }\n}\nfunction AjaxTimeoutErrorImpl(xhr, request) {\n    AjaxError.call(this, 'ajax timeout', xhr, request);\n    this.name = 'AjaxTimeoutError';\n    return this;\n}\nexport const AjaxTimeoutError = AjaxTimeoutErrorImpl;\n//# sourceMappingURL=AjaxObservable.js.map"]},"metadata":{},"sourceType":"module"}