{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst started = Date.now();\n\nmodule.exports = function (timeout, callback) {\n  callback = callback.bind(null, null, process.pid, Math.random(), timeout);\n  if (timeout) return setTimeout(callback, timeout);\n  callback();\n};\n\nmodule.exports.args = function (callback) {\n  callback(null, {\n    argv: process.argv,\n    cwd: process.cwd(),\n    execArgv: process.execArgv\n  });\n};\n\nmodule.exports.run0 = function (callback) {\n  module.exports(0, callback);\n};\n\nmodule.exports.killable = function (id, callback) {\n  if (Math.random() < 0.5) return process.exit(-1);\n  callback(null, id, process.pid);\n};\n\nmodule.exports.err = function (type, message, data, callback) {\n  if (typeof data == 'function') {\n    callback = data;\n    data = null;\n  } else {\n    let err = new Error(message);\n    Object.keys(data).forEach(function (key) {\n      err[key] = data[key];\n    });\n    callback(err);\n    return;\n  }\n\n  if (type == 'TypeError') return callback(new TypeError(message));\n  callback(new Error(message));\n};\n\nmodule.exports.block = function () {\n  while (true);\n}; // use provided file path to save retries count among terminated workers\n\n\nmodule.exports.stubborn = function (path, callback) {\n  function isOutdated(path) {\n    return new Date().getTime() - fs.statSync(path).mtime.getTime() > 2000;\n  } // file may not be properly deleted, check if modified no earler than two seconds ago\n\n\n  if (!fs.existsSync(path) || isOutdated(path)) {\n    fs.writeFileSync(path, '1');\n    process.exit(-1);\n  }\n\n  let retry = parseInt(fs.readFileSync(path, 'utf8'));\n  if (Number.isNaN(retry)) return callback(new Error('file contents is not a number'));\n\n  if (retry > 4) {\n    callback(null, 12);\n  } else {\n    fs.writeFileSync(path, String(retry + 1));\n    process.exit(-1);\n  }\n};\n\nmodule.exports.uptime = function (callback) {\n  callback(null, Date.now() - started);\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/worker-farm/tests/child.js"],"names":["fs","require","started","Date","now","module","exports","timeout","callback","bind","process","pid","Math","random","setTimeout","args","argv","cwd","execArgv","run0","killable","id","exit","err","type","message","data","Error","Object","keys","forEach","key","TypeError","block","stubborn","path","isOutdated","getTime","statSync","mtime","existsSync","writeFileSync","retry","parseInt","readFileSync","Number","isNaN","String","uptime"],"mappings":"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","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst started = Date.now()\n\n\nmodule.exports = function (timeout, callback) {\n  callback = callback.bind(null, null, process.pid, Math.random(), timeout)\n  if (timeout)\n    return setTimeout(callback, timeout)\n  callback()\n}\n\n\nmodule.exports.args = function (callback) {\n  callback(null, {\n      argv     : process.argv\n    , cwd      : process.cwd()\n    , execArgv : process.execArgv\n  })\n}\n\n\nmodule.exports.run0 = function (callback) {\n  module.exports(0, callback)\n}\n\n\nmodule.exports.killable = function (id, callback) {\n  if (Math.random() < 0.5)\n    return process.exit(-1)\n  callback(null, id, process.pid)\n}\n\n\nmodule.exports.err = function (type, message, data, callback) {\n  if (typeof data == 'function') {\n    callback = data\n    data = null\n  } else {\n    let err = new Error(message)\n    Object.keys(data).forEach(function(key) {\n      err[key] = data[key]\n    })\n    callback(err)\n    return\n  }\n\n  if (type == 'TypeError')\n    return callback(new TypeError(message))\n  callback(new Error(message))\n}\n\n\nmodule.exports.block = function () {\n  while (true);\n}\n\n\n// use provided file path to save retries count among terminated workers\nmodule.exports.stubborn = function (path, callback) {\n  function isOutdated(path) {\n    return ((new Date).getTime() - fs.statSync(path).mtime.getTime()) > 2000\n  }\n\n  // file may not be properly deleted, check if modified no earler than two seconds ago\n  if (!fs.existsSync(path) || isOutdated(path)) {\n    fs.writeFileSync(path, '1')\n    process.exit(-1)\n  }\n\n  let retry = parseInt(fs.readFileSync(path, 'utf8'))\n  if (Number.isNaN(retry))\n    return callback(new Error('file contents is not a number'))\n\n  if (retry > 4) {\n    callback(null, 12)\n  } else {\n    fs.writeFileSync(path, String(retry + 1))\n    process.exit(-1)\n  }\n}\n\n\nmodule.exports.uptime = function (callback) {\n  callback(null, Date.now() - started)\n}\n"]},"metadata":{},"sourceType":"script"}