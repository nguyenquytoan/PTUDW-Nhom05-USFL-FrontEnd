{"ast":null,"code":"/*!\n * merge-deep <https://github.com/jonschlinkert/merge-deep>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n'use strict';\n\nvar union = require('arr-union');\n\nvar clone = require('clone-deep');\n\nvar typeOf = require('kind-of');\n\nmodule.exports = function mergeDeep(orig, objects) {\n  if (!isObject(orig) && !Array.isArray(orig)) {\n    orig = {};\n  }\n\n  var target = clone(orig);\n  var len = arguments.length;\n  var idx = 0;\n\n  while (++idx < len) {\n    var val = arguments[idx];\n\n    if (isObject(val) || Array.isArray(val)) {\n      merge(target, val);\n    }\n  }\n\n  return target;\n};\n\nfunction merge(target, obj) {\n  for (var key in obj) {\n    if (key === '__proto__' || !hasOwn(obj, key)) {\n      continue;\n    }\n\n    var oldVal = obj[key];\n    var newVal = target[key];\n\n    if (isObject(newVal) && isObject(oldVal)) {\n      target[key] = merge(newVal, oldVal);\n    } else if (Array.isArray(newVal)) {\n      target[key] = union([], newVal, oldVal);\n    } else {\n      target[key] = clone(oldVal);\n    }\n  }\n\n  return target;\n}\n\nfunction hasOwn(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction isObject(val) {\n  return typeOf(val) === 'object' || typeOf(val) === 'function';\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/merge-deep/index.js"],"names":["union","require","clone","typeOf","module","exports","mergeDeep","orig","objects","isObject","Array","isArray","target","len","arguments","length","idx","val","merge","obj","key","hasOwn","oldVal","newVal","Object","prototype","hasOwnProperty","call"],"mappings":"AAAA;;;;;;AAOA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAAnB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,SAAD,CAApB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,OAAzB,EAAkC;AACjD,MAAI,CAACC,QAAQ,CAACF,IAAD,CAAT,IAAmB,CAACG,KAAK,CAACC,OAAN,CAAcJ,IAAd,CAAxB,EAA6C;AAC3CA,IAAAA,IAAI,GAAG,EAAP;AACD;;AAED,MAAIK,MAAM,GAAGV,KAAK,CAACK,IAAD,CAAlB;AACA,MAAIM,GAAG,GAAGC,SAAS,CAACC,MAApB;AACA,MAAIC,GAAG,GAAG,CAAV;;AAEA,SAAO,EAAEA,GAAF,GAAQH,GAAf,EAAoB;AAClB,QAAII,GAAG,GAAGH,SAAS,CAACE,GAAD,CAAnB;;AAEA,QAAIP,QAAQ,CAACQ,GAAD,CAAR,IAAiBP,KAAK,CAACC,OAAN,CAAcM,GAAd,CAArB,EAAyC;AACvCC,MAAAA,KAAK,CAACN,MAAD,EAASK,GAAT,CAAL;AACD;AACF;;AACD,SAAOL,MAAP;AACD,CAjBD;;AAmBA,SAASM,KAAT,CAAeN,MAAf,EAAuBO,GAAvB,EAA4B;AAC1B,OAAK,IAAIC,GAAT,IAAgBD,GAAhB,EAAqB;AACnB,QAAIC,GAAG,KAAK,WAAR,IAAuB,CAACC,MAAM,CAACF,GAAD,EAAMC,GAAN,CAAlC,EAA8C;AAC5C;AACD;;AAED,QAAIE,MAAM,GAAGH,GAAG,CAACC,GAAD,CAAhB;AACA,QAAIG,MAAM,GAAGX,MAAM,CAACQ,GAAD,CAAnB;;AAEA,QAAIX,QAAQ,CAACc,MAAD,CAAR,IAAoBd,QAAQ,CAACa,MAAD,CAAhC,EAA0C;AACxCV,MAAAA,MAAM,CAACQ,GAAD,CAAN,GAAcF,KAAK,CAACK,MAAD,EAASD,MAAT,CAAnB;AACD,KAFD,MAEO,IAAIZ,KAAK,CAACC,OAAN,CAAcY,MAAd,CAAJ,EAA2B;AAChCX,MAAAA,MAAM,CAACQ,GAAD,CAAN,GAAcpB,KAAK,CAAC,EAAD,EAAKuB,MAAL,EAAaD,MAAb,CAAnB;AACD,KAFM,MAEA;AACLV,MAAAA,MAAM,CAACQ,GAAD,CAAN,GAAclB,KAAK,CAACoB,MAAD,CAAnB;AACD;AACF;;AACD,SAAOV,MAAP;AACD;;AAED,SAASS,MAAT,CAAgBF,GAAhB,EAAqBC,GAArB,EAA0B;AACxB,SAAOI,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,GAArC,EAA0CC,GAA1C,CAAP;AACD;;AAED,SAASX,QAAT,CAAkBQ,GAAlB,EAAuB;AACrB,SAAOd,MAAM,CAACc,GAAD,CAAN,KAAgB,QAAhB,IAA4Bd,MAAM,CAACc,GAAD,CAAN,KAAgB,UAAnD;AACD","sourcesContent":["/*!\n * merge-deep <https://github.com/jonschlinkert/merge-deep>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar union = require('arr-union');\nvar clone = require('clone-deep');\nvar typeOf = require('kind-of');\n\nmodule.exports = function mergeDeep(orig, objects) {\n  if (!isObject(orig) && !Array.isArray(orig)) {\n    orig = {};\n  }\n\n  var target = clone(orig);\n  var len = arguments.length;\n  var idx = 0;\n\n  while (++idx < len) {\n    var val = arguments[idx];\n\n    if (isObject(val) || Array.isArray(val)) {\n      merge(target, val);\n    }\n  }\n  return target;\n};\n\nfunction merge(target, obj) {\n  for (var key in obj) {\n    if (key === '__proto__' || !hasOwn(obj, key)) {\n      continue;\n    }\n\n    var oldVal = obj[key];\n    var newVal = target[key];\n\n    if (isObject(newVal) && isObject(oldVal)) {\n      target[key] = merge(newVal, oldVal);\n    } else if (Array.isArray(newVal)) {\n      target[key] = union([], newVal, oldVal);\n    } else {\n      target[key] = clone(oldVal);\n    }\n  }\n  return target;\n}\n\nfunction hasOwn(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction isObject(val) {\n  return typeOf(val) === 'object' || typeOf(val) === 'function';\n}\n"]},"metadata":{},"sourceType":"script"}