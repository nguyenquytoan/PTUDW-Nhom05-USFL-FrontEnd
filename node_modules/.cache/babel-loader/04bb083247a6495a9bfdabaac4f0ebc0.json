{"ast":null,"code":"/**\n * @fileoverview Rule to check for tabs inside a file\n * @author Gyandeep Singh\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst tabRegex = /\\t+/gu;\nconst anyNonWhitespaceRegex = /\\S/u; //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow all tabs\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-tabs\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowIndentationTabs: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const allowIndentationTabs = context.options && context.options[0] && context.options[0].allowIndentationTabs;\n    return {\n      Program(node) {\n        sourceCode.getLines().forEach((line, index) => {\n          let match;\n\n          while ((match = tabRegex.exec(line)) !== null) {\n            if (allowIndentationTabs && !anyNonWhitespaceRegex.test(line.slice(0, match.index))) {\n              continue;\n            }\n\n            context.report({\n              node,\n              loc: {\n                start: {\n                  line: index + 1,\n                  column: match.index\n                },\n                end: {\n                  line: index + 1,\n                  column: match.index + match[0].length\n                }\n              },\n              message: \"Unexpected tab character.\"\n            });\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-tabs.js"],"names":["tabRegex","anyNonWhitespaceRegex","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","allowIndentationTabs","default","additionalProperties","create","context","sourceCode","getSourceCode","options","Program","node","getLines","forEach","line","index","match","exec","test","slice","report","loc","start","column","end","length","message"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAG,OAAjB;AACA,MAAMC,qBAAqB,GAAG,KAA9B,C,CAEA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,QADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,mBADX;AAEFC,MAAAA,QAAQ,EAAE,kBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AASFC,IAAAA,MAAM,EAAE,CAAC;AACLN,MAAAA,IAAI,EAAE,QADD;AAELO,MAAAA,UAAU,EAAE;AACRC,QAAAA,oBAAoB,EAAE;AAClBR,UAAAA,IAAI,EAAE,SADY;AAElBS,UAAAA,OAAO,EAAE;AAFS;AADd,OAFP;AAQLC,MAAAA,oBAAoB,EAAE;AARjB,KAAD;AATN,GADO;;AAsBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;AACA,UAAMN,oBAAoB,GAAGI,OAAO,CAACG,OAAR,IAAmBH,OAAO,CAACG,OAAR,CAAgB,CAAhB,CAAnB,IAAyCH,OAAO,CAACG,OAAR,CAAgB,CAAhB,EAAmBP,oBAAzF;AAEA,WAAO;AACHQ,MAAAA,OAAO,CAACC,IAAD,EAAO;AACVJ,QAAAA,UAAU,CAACK,QAAX,GAAsBC,OAAtB,CAA8B,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3C,cAAIC,KAAJ;;AAEA,iBAAO,CAACA,KAAK,GAAG3B,QAAQ,CAAC4B,IAAT,CAAcH,IAAd,CAAT,MAAkC,IAAzC,EAA+C;AAC3C,gBAAIZ,oBAAoB,IAAI,CAACZ,qBAAqB,CAAC4B,IAAtB,CAA2BJ,IAAI,CAACK,KAAL,CAAW,CAAX,EAAcH,KAAK,CAACD,KAApB,CAA3B,CAA7B,EAAqF;AACjF;AACH;;AAEDT,YAAAA,OAAO,CAACc,MAAR,CAAe;AACXT,cAAAA,IADW;AAEXU,cAAAA,GAAG,EAAE;AACDC,gBAAAA,KAAK,EAAE;AACHR,kBAAAA,IAAI,EAAEC,KAAK,GAAG,CADX;AAEHQ,kBAAAA,MAAM,EAAEP,KAAK,CAACD;AAFX,iBADN;AAKDS,gBAAAA,GAAG,EAAE;AACDV,kBAAAA,IAAI,EAAEC,KAAK,GAAG,CADb;AAEDQ,kBAAAA,MAAM,EAAEP,KAAK,CAACD,KAAN,GAAcC,KAAK,CAAC,CAAD,CAAL,CAASS;AAF9B;AALJ,eAFM;AAYXC,cAAAA,OAAO,EAAE;AAZE,aAAf;AAcH;AACJ,SAvBD;AAwBH;;AA1BE,KAAP;AA4BH;;AAtDY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to check for tabs inside a file\n * @author Gyandeep Singh\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst tabRegex = /\\t+/gu;\nconst anyNonWhitespaceRegex = /\\S/u;\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"disallow all tabs\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-tabs\"\n        },\n        schema: [{\n            type: \"object\",\n            properties: {\n                allowIndentationTabs: {\n                    type: \"boolean\",\n                    default: false\n                }\n            },\n            additionalProperties: false\n        }]\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        const allowIndentationTabs = context.options && context.options[0] && context.options[0].allowIndentationTabs;\n\n        return {\n            Program(node) {\n                sourceCode.getLines().forEach((line, index) => {\n                    let match;\n\n                    while ((match = tabRegex.exec(line)) !== null) {\n                        if (allowIndentationTabs && !anyNonWhitespaceRegex.test(line.slice(0, match.index))) {\n                            continue;\n                        }\n\n                        context.report({\n                            node,\n                            loc: {\n                                start: {\n                                    line: index + 1,\n                                    column: match.index\n                                },\n                                end: {\n                                    line: index + 1,\n                                    column: match.index + match[0].length\n                                }\n                            },\n                            message: \"Unexpected tab character.\"\n                        });\n                    }\n                });\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}