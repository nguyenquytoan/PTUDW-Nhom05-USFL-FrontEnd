{"ast":null,"code":"// @remove-on-eject-begin\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst paths = require('./paths'); // Make sure that including paths.js after env.js will read .env variables.\n\n\ndelete require.cache[require.resolve('./paths')];\nconst NODE_ENV = process.env.NODE_ENV;\n\nif (!NODE_ENV) {\n  throw new Error('The NODE_ENV environment variable is required but was not specified.');\n} // https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use\n\n\nconst dotenvFiles = [`${paths.dotenv}.${NODE_ENV}.local`, `${paths.dotenv}.${NODE_ENV}`, // Don't include `.env.local` for `test` environment\n// since normally you expect tests to produce the same\n// results for everyone\nNODE_ENV !== 'test' && `${paths.dotenv}.local`, paths.dotenv].filter(Boolean); // Load environment variables from .env* files. Suppress warnings using silent\n// if this file is missing. dotenv will never modify any environment variables\n// that have already been set.  Variable expansion is supported in .env files.\n// https://github.com/motdotla/dotenv\n// https://github.com/motdotla/dotenv-expand\n\ndotenvFiles.forEach(dotenvFile => {\n  if (fs.existsSync(dotenvFile)) {\n    require('dotenv-expand')(require('dotenv').config({\n      path: dotenvFile\n    }));\n  }\n}); // We support resolving modules according to `NODE_PATH`.\n// This lets you use absolute paths in imports inside large monorepos:\n// https://github.com/facebook/create-react-app/issues/253.\n// It works similar to `NODE_PATH` in Node itself:\n// https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders\n// Note that unlike in Node, only *relative* paths from `NODE_PATH` are honored.\n// Otherwise, we risk importing Node.js core modules into an app instead of webpack shims.\n// https://github.com/facebook/create-react-app/issues/1023#issuecomment-265344421\n// We also resolve them to make sure all tools using them work consistently.\n\nconst appDirectory = fs.realpathSync(process.cwd());\nprocess.env.NODE_PATH = (process.env.NODE_PATH || '').split(path.delimiter).filter(folder => folder && !path.isAbsolute(folder)).map(folder => path.resolve(appDirectory, folder)).join(path.delimiter); // Grab NODE_ENV and REACT_APP_* environment variables and prepare them to be\n// injected into the application via DefinePlugin in webpack configuration.\n\nconst REACT_APP = /^REACT_APP_/i;\n\nfunction getClientEnvironment(publicUrl) {\n  const raw = Object.keys(process.env).filter(key => REACT_APP.test(key)).reduce((env, key) => {\n    env[key] = process.env[key];\n    return env;\n  }, {\n    // Useful for determining whether weâ€™re running in production mode.\n    // Most importantly, it switches React into the correct mode.\n    NODE_ENV: process.env.NODE_ENV || 'development',\n    // Useful for resolving the correct path to static assets in `public`.\n    // For example, <img src={process.env.PUBLIC_URL + '/img/logo.png'} />.\n    // This should only be used as an escape hatch. Normally you would put\n    // images into the `src` and `import` them in code to get their paths.\n    PUBLIC_URL: publicUrl,\n    // We support configuring the sockjs pathname during development.\n    // These settings let a developer run multiple simultaneous projects.\n    // They are used as the connection `hostname`, `pathname` and `port`\n    // in webpackHotDevClient. They are used as the `sockHost`, `sockPath`\n    // and `sockPort` options in webpack-dev-server.\n    WDS_SOCKET_HOST: process.env.WDS_SOCKET_HOST,\n    WDS_SOCKET_PATH: process.env.WDS_SOCKET_PATH,\n    WDS_SOCKET_PORT: process.env.WDS_SOCKET_PORT\n  }); // Stringify all values so we can feed into webpack DefinePlugin\n\n  const stringified = {\n    'process.env': Object.keys(raw).reduce((env, key) => {\n      env[key] = JSON.stringify(raw[key]);\n      return env;\n    }, {})\n  };\n  return {\n    raw,\n    stringified\n  };\n}\n\nmodule.exports = getClientEnvironment;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-scripts/config/env.js"],"names":["fs","require","path","paths","cache","resolve","NODE_ENV","process","env","Error","dotenvFiles","dotenv","filter","Boolean","forEach","dotenvFile","existsSync","config","appDirectory","realpathSync","cwd","NODE_PATH","split","delimiter","folder","isAbsolute","map","join","REACT_APP","getClientEnvironment","publicUrl","raw","Object","keys","key","test","reduce","PUBLIC_URL","WDS_SOCKET_HOST","WDS_SOCKET_PATH","WDS_SOCKET_PORT","stringified","JSON","stringify","module","exports"],"mappings":"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","sourcesContent":["// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst paths = require('./paths');\n\n// Make sure that including paths.js after env.js will read .env variables.\ndelete require.cache[require.resolve('./paths')];\n\nconst NODE_ENV = process.env.NODE_ENV;\nif (!NODE_ENV) {\n  throw new Error(\n    'The NODE_ENV environment variable is required but was not specified.'\n  );\n}\n\n// https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use\nconst dotenvFiles = [\n  `${paths.dotenv}.${NODE_ENV}.local`,\n  `${paths.dotenv}.${NODE_ENV}`,\n  // Don't include `.env.local` for `test` environment\n  // since normally you expect tests to produce the same\n  // results for everyone\n  NODE_ENV !== 'test' && `${paths.dotenv}.local`,\n  paths.dotenv,\n].filter(Boolean);\n\n// Load environment variables from .env* files. Suppress warnings using silent\n// if this file is missing. dotenv will never modify any environment variables\n// that have already been set.  Variable expansion is supported in .env files.\n// https://github.com/motdotla/dotenv\n// https://github.com/motdotla/dotenv-expand\ndotenvFiles.forEach(dotenvFile => {\n  if (fs.existsSync(dotenvFile)) {\n    require('dotenv-expand')(\n      require('dotenv').config({\n        path: dotenvFile,\n      })\n    );\n  }\n});\n\n// We support resolving modules according to `NODE_PATH`.\n// This lets you use absolute paths in imports inside large monorepos:\n// https://github.com/facebook/create-react-app/issues/253.\n// It works similar to `NODE_PATH` in Node itself:\n// https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders\n// Note that unlike in Node, only *relative* paths from `NODE_PATH` are honored.\n// Otherwise, we risk importing Node.js core modules into an app instead of webpack shims.\n// https://github.com/facebook/create-react-app/issues/1023#issuecomment-265344421\n// We also resolve them to make sure all tools using them work consistently.\nconst appDirectory = fs.realpathSync(process.cwd());\nprocess.env.NODE_PATH = (process.env.NODE_PATH || '')\n  .split(path.delimiter)\n  .filter(folder => folder && !path.isAbsolute(folder))\n  .map(folder => path.resolve(appDirectory, folder))\n  .join(path.delimiter);\n\n// Grab NODE_ENV and REACT_APP_* environment variables and prepare them to be\n// injected into the application via DefinePlugin in webpack configuration.\nconst REACT_APP = /^REACT_APP_/i;\n\nfunction getClientEnvironment(publicUrl) {\n  const raw = Object.keys(process.env)\n    .filter(key => REACT_APP.test(key))\n    .reduce(\n      (env, key) => {\n        env[key] = process.env[key];\n        return env;\n      },\n      {\n        // Useful for determining whether weâ€™re running in production mode.\n        // Most importantly, it switches React into the correct mode.\n        NODE_ENV: process.env.NODE_ENV || 'development',\n        // Useful for resolving the correct path to static assets in `public`.\n        // For example, <img src={process.env.PUBLIC_URL + '/img/logo.png'} />.\n        // This should only be used as an escape hatch. Normally you would put\n        // images into the `src` and `import` them in code to get their paths.\n        PUBLIC_URL: publicUrl,\n        // We support configuring the sockjs pathname during development.\n        // These settings let a developer run multiple simultaneous projects.\n        // They are used as the connection `hostname`, `pathname` and `port`\n        // in webpackHotDevClient. They are used as the `sockHost`, `sockPath`\n        // and `sockPort` options in webpack-dev-server.\n        WDS_SOCKET_HOST: process.env.WDS_SOCKET_HOST,\n        WDS_SOCKET_PATH: process.env.WDS_SOCKET_PATH,\n        WDS_SOCKET_PORT: process.env.WDS_SOCKET_PORT,\n      }\n    );\n  // Stringify all values so we can feed into webpack DefinePlugin\n  const stringified = {\n    'process.env': Object.keys(raw).reduce((env, key) => {\n      env[key] = JSON.stringify(raw[key]);\n      return env;\n    }, {}),\n  };\n\n  return { raw, stringified };\n}\n\nmodule.exports = getClientEnvironment;\n"]},"metadata":{},"sourceType":"script"}