{"ast":null,"code":"import postcss from 'postcss';\nimport postcssBrowserComments from 'postcss-browser-comments';\nimport Module from 'module';\nimport path from 'path';\nimport { URL } from 'url';\nimport fs from 'fs';\n\nconst assign = (...objects) => Object.assign(...objects);\n\nconst create = (...objects) => assign(Object.create(null), ...objects);\n\nconst currentURL = import.meta.url;\nconst currentFilename = new URL(currentURL).pathname;\nconst currentDirname = path.dirname(currentFilename); // get resolved filenames for css libraries\n\nconst normalizeCSS = resolve('@csstools/normalize.css');\nconst normalizeOpinionatedCSS = resolve('@csstools/normalize.css/opinionated.css');\nconst sanitizeCSS = resolve('sanitize.css');\nconst sanitizeFormsCSS = resolve('sanitize.css/forms.css');\nconst sanitizePageCSS = resolve('sanitize.css/page.css');\nconst sanitizeTypographyCSS = resolve('sanitize.css/typography.css'); // export a hashmap of css library filenames\n\nconst parsableFilenames = create({\n  [normalizeCSS]: true,\n  [normalizeOpinionatedCSS]: true,\n  [sanitizeCSS]: true,\n  [sanitizeFormsCSS]: true,\n  [sanitizePageCSS]: true,\n  [sanitizeTypographyCSS]: true\n}); // export a hashmap of css library filenames by id\n\nconst resolvedFilenamesById = create({\n  'normalize': [normalizeCSS],\n  'normalize/opinionated': [normalizeOpinionatedCSS],\n  'normalize/*': [normalizeOpinionatedCSS],\n  'sanitize': [sanitizeCSS],\n  'sanitize/forms': [sanitizeCSS, sanitizeFormsCSS],\n  'sanitize/page': [sanitizeCSS, sanitizePageCSS],\n  'sanitize/typography': [sanitizeCSS, sanitizeTypographyCSS],\n  'sanitize/*': [sanitizeCSS, sanitizeFormsCSS, sanitizePageCSS, sanitizeTypographyCSS]\n}); // get the resolved filename of a package/module\n\nfunction resolve(id) {\n  return resolve[id] = resolve[id] || Module._resolveFilename(id, {\n    id: currentFilename,\n    filename: currentFilename,\n    paths: Module._nodeModulePaths(currentDirname)\n  });\n}\n\nconst cache = create();\n\nasync function readFile(filename) {\n  filename = path.resolve(filename);\n  cache[filename] = cache[filename] || create();\n  return new Promise((resolve, reject) => fs.stat(filename, (statsError, {\n    mtime\n  }) => statsError ? reject(statsError) : mtime === cache[filename].mtime ? resolve(cache[filename].data) : fs.readFile(filename, 'utf8', (readFileError, data) => readFileError ? reject(readFileError) : resolve((cache[filename] = {\n    data,\n    mtime\n  }).data))));\n}\n\nconst cache$1 = create(null);\n\nvar parse = (filename, transformer) => readFile(filename).then( // cache the parsed css root\ncss => cache$1[css] = cache$1[css] || postcss.parse(css, {\n  from: filename\n})).then( // clone the cached root\nroot => root.clone()).then( // transform the cloned root\nclone => Promise.resolve(transformer(clone)).then( // resolve the cloned root\n() => clone));\n\nvar postcssImportNormalize = commentsTransformer => opts => {\n  opts = create(opts); // return an postcss-import configuration\n\n  return create({\n    load(filename, importOptions) {\n      return filename in parsableFilenames // parse the file (the file and css are conservatively cached)\n      ? parse(filename, commentsTransformer).then(root => root.toResult({\n        to: filename,\n        map: true\n      }).css) : typeof opts.load === 'function' // otherwise, use the override loader\n      ? opts.load.call(null, filename, importOptions) // otherwise, return the (conservatively cached) contents of the file\n      : readFile(filename);\n    },\n\n    resolve(id, basedir, importOptions) {\n      // get the css id by removing css extensions\n      const cssId = id.replace(cssExtRegExp, '');\n      return cssId in resolvedFilenamesById // return the known resolved path for the css id\n      ? resolvedFilenamesById[cssId] : typeof opts.resolve === 'function' // otherwise, use the override resolver\n      ? opts.resolve.call(null, id, basedir, importOptions) // otherwise, return the id to be resolved by postcss-import\n      : id;\n    }\n\n  });\n};\n\nconst cssExtRegExp = /\\.css\\b/g;\n\nconst postcssPlugin = (commentsTransformer, opts) => root => {\n  const promises = [];\n  const insertedFilenames = {}; // use @import insertion point\n\n  root.walkAtRules(importRegExp, atrule => {\n    // get name as a fallback value for the library (e.g. @import-normalize is like @import \"normalize.css\")\n    const name = atrule.name.match(importRegExp)[1]; // get url from \"library\", 'library', url(\"library\"), url('library'), or the fallback value\n\n    const url = (atrule.params.match(paramsRegExp) || []).slice(1).find(part => part) || name;\n\n    if (url) {\n      // get the css id by removing css extensions\n      const cssId = url.replace(cssExtRegExp$1, '');\n\n      if (cssId in resolvedFilenamesById) {\n        // promise the library import is replaced with its contents\n        promises.push(Promise.all(resolvedFilenamesById[cssId].filter( // ignore filenames that have already been inserted\n        filename => insertedFilenames[filename] = opts.allowDuplicates || !(filename in insertedFilenames)).map( // parse the file (the file and css are conservatively cached)\n        filename => parse(filename, commentsTransformer))).then(roots => {\n          if (roots.length) {\n            // combine all the library nodes returned by the parsed files\n            const nodes = roots.reduce((all, root) => all.concat(root.nodes), []); // replace the import with all the library nodes\n\n            atrule.replaceWith(...nodes);\n          }\n        }));\n      }\n    }\n  });\n  return Promise.all([].concat( // promise the library imports are replaced with their contents\n  promises, // promise certain libraries are prepended\n  Promise.all([].concat(opts.forceImport || []).reduce( // filter the id to be a known id or boolean true\n  (all, id) => {\n    if (id === true) {\n      all.push(...resolvedFilenamesById.normalize);\n    } else if (typeof id === 'string') {\n      const cssId = id.replace(cssExtRegExp$1, '');\n\n      if (cssId in resolvedFilenamesById) {\n        all.push(...resolvedFilenamesById[cssId]);\n      }\n    }\n\n    return all;\n  }, []).filter( // ignore filenames that have already been inserted\n  filename => insertedFilenames[filename] = opts.allowDuplicates || !(filename in insertedFilenames)).map( // parse the file (the file and css are conservatively cached)\n  filename => parse(filename, commentsTransformer))).then(roots => {\n    if (roots.length) {\n      // combine all the library nodes returned by the parsed files\n      const nodes = roots.reduce((all, root) => all.concat(root.nodes), []); // prepend the stylesheet with all the library nodes\n\n      root.prepend(...nodes);\n    }\n  })));\n};\n\nconst cssExtRegExp$1 = /\\.css\\b/g;\nconst importRegExp = /^import(?:-(normalize|sanitize))?$/;\nconst paramsRegExp = /^\\s*(?:url\\((?:\"(.+)\"|'(.+)')\\)|\"(.+)\"|'(.+)')[\\W\\w]*$/;\nvar index = postcss.plugin('postcss-normalize', opts => {\n  opts = create(opts);\n  const commentsTransformer = postcssBrowserComments(opts);\n  const normalizeTransformer = postcssPlugin(commentsTransformer, opts);\n  const postcssImportConfig = postcssImportNormalize(commentsTransformer);\n  return assign(normalizeTransformer, {\n    postcssImport: postcssImportConfig\n  });\n});\nexport default index;","map":{"version":3,"sources":["src/lib/util.js","src/lib/cssMap.js","src/lib/readFile.js","src/lib/parse.js","src/lib/postcssImportNormalize.js","src/lib/postcssNormalize.js","src/index.js"],"names":["assign","Object","create","currentURL","import","currentFilename","currentDirname","path","normalizeCSS","resolve","normalizeOpinionatedCSS","sanitizeCSS","sanitizeFormsCSS","sanitizePageCSS","sanitizeTypographyCSS","parsableFilenames","resolvedFilenamesById","id","filename","paths","Module","cache","mtime","statsError","reject","readFileError","css","from","root","clone","Promise","transformer","commentsTransformer","opts","load","parse","to","map","readFile","cssId","cssExtRegExp","postcssPlugin","promises","insertedFilenames","atrule","name","url","part","roots","nodes","all","importRegExp","paramsRegExp","postcssBrowserComments","normalizeTransformer","postcssNormalize","postcssImportConfig","postcssImportNormalize","postcssImport"],"mappings":"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","sourcesContent":["export const assign = (...objects) => Object.assign(...objects);\nexport const create = (...objects) => assign(Object.create(null), ...objects);\n","import { create } from './util';\nimport Module from 'module';\nimport path from 'path';\nimport { URL } from 'url';\n\n// get esm-compatible script metadata\nconst currentURL = import.meta.url;\nconst currentFilename = new URL(currentURL).pathname;\nconst currentDirname = path.dirname(currentFilename);\n\n// get resolved filenames for css libraries\nconst normalizeCSS = resolve('@csstools/normalize.css');\nconst normalizeOpinionatedCSS = resolve('@csstools/normalize.css/opinionated.css');\nconst sanitizeCSS = resolve('sanitize.css');\nconst sanitizeFormsCSS = resolve('sanitize.css/forms.css');\nconst sanitizePageCSS = resolve('sanitize.css/page.css');\nconst sanitizeTypographyCSS = resolve('sanitize.css/typography.css');\n\n// export a hashmap of css library filenames\nexport const parsableFilenames = create({\n\t[normalizeCSS]: true,\n\t[normalizeOpinionatedCSS]: true,\n\t[sanitizeCSS]: true,\n\t[sanitizeFormsCSS]: true,\n\t[sanitizePageCSS]: true,\n\t[sanitizeTypographyCSS]: true\n});\n\n// export a hashmap of css library filenames by id\nexport const resolvedFilenamesById = create({\n\t'normalize': [normalizeCSS],\n\t'normalize/opinionated': [normalizeOpinionatedCSS],\n\t'normalize/*': [normalizeOpinionatedCSS],\n\t'sanitize': [sanitizeCSS],\n\t'sanitize/forms': [sanitizeCSS, sanitizeFormsCSS],\n\t'sanitize/page': [sanitizeCSS, sanitizePageCSS],\n\t'sanitize/typography': [sanitizeCSS, sanitizeTypographyCSS],\n\t'sanitize/*': [sanitizeCSS, sanitizeFormsCSS, sanitizePageCSS, sanitizeTypographyCSS]\n});\n\n// get the resolved filename of a package/module\nfunction resolve (id) {\n\treturn resolve[id] = resolve[id] || Module._resolveFilename(id, {\n\t\tid: currentFilename,\n\t\tfilename: currentFilename,\n\t\tpaths: Module._nodeModulePaths(currentDirname)\n\t});\n}\n","import { create } from './util';\nimport path from 'path';\nimport fs from 'fs';\n\nconst cache = create();\n\nexport default async function readFile (filename) {\n\tfilename = path.resolve(filename);\n\n\tcache[filename] = cache[filename] || create();\n\n\treturn new Promise(\n\t\t(resolve, reject) => fs.stat(\n\t\t\tfilename,\n\t\t\t(statsError, { mtime }) => statsError\n\t\t\t\t? reject(statsError)\n\t\t\t: mtime === cache[filename].mtime\n\t\t\t\t? resolve(cache[filename].data)\n\t\t\t: fs.readFile(\n\t\t\t\tfilename,\n\t\t\t\t'utf8',\n\t\t\t\t(readFileError, data) => readFileError\n\t\t\t\t\t? reject(readFileError)\n\t\t\t\t: resolve(\n\t\t\t\t\t(cache[filename] = { data, mtime }).data\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t);\n}\n","import { create } from './util';\nimport readFile from './readFile';\nimport postcss from 'postcss';\n\nconst cache = create(null);\n\nexport default (filename, transformer) => readFile(filename).then(\n\t// cache the parsed css root\n\tcss => (cache[css] = cache[css] || postcss.parse(css, { from: filename }))\n).then(\n\t// clone the cached root\n\troot => root.clone()\n).then(\n\t// transform the cloned root\n\tclone => Promise.resolve(\n\t\ttransformer(clone)\n\t).then(\n\t\t// resolve the cloned root\n\t\t() => clone\n\t)\n);\n","import { create } from './util';\nimport { parsableFilenames, resolvedFilenamesById } from './cssMap';\nimport parse from './parse';\nimport readFile from './readFile';\n\nexport default commentsTransformer => opts => {\n\topts = create(opts);\n\n\t// return an postcss-import configuration\n\treturn create({\n\t\tload (filename, importOptions) {\n\t\t\treturn filename in parsableFilenames\n\t\t\t\t// parse the file (the file and css are conservatively cached)\n\t\t\t\t? parse(filename, commentsTransformer).then(\n\t\t\t\t\troot => root.toResult({ to: filename, map: true }).css\n\t\t\t\t)\n\t\t\t: typeof opts.load === 'function'\n\t\t\t\t// otherwise, use the override loader\n\t\t\t\t? opts.load.call(null, filename, importOptions)\n\t\t\t// otherwise, return the (conservatively cached) contents of the file\n\t\t\t: readFile(filename);\n\t\t},\n\t\tresolve (id, basedir, importOptions) {\n\t\t\t// get the css id by removing css extensions\n\t\t\tconst cssId = id.replace(cssExtRegExp, '');\n\n\t\t\treturn cssId in resolvedFilenamesById\n\t\t\t\t// return the known resolved path for the css id\n\t\t\t\t? resolvedFilenamesById[cssId]\n\t\t\t: typeof opts.resolve === 'function'\n\t\t\t\t// otherwise, use the override resolver\n\t\t\t\t? opts.resolve.call(null, id, basedir, importOptions)\n\t\t\t// otherwise, return the id to be resolved by postcss-import\n\t\t\t: id;\n\t\t}\n\t});\n};\n\nconst cssExtRegExp = /\\.css\\b/g;\n","import { resolvedFilenamesById } from './cssMap';\nimport parse from './parse';\n\nconst postcssPlugin = (commentsTransformer, opts) => root => {\n\tconst promises = [];\n\tconst insertedFilenames = {};\n\n\t// use @import insertion point\n\troot.walkAtRules(\n\t\timportRegExp,\n\t\tatrule => {\n\t\t\t// get name as a fallback value for the library (e.g. @import-normalize is like @import \"normalize.css\")\n\t\t\tconst name = atrule.name.match(importRegExp)[1];\n\n\t\t\t// get url from \"library\", 'library', url(\"library\"), url('library'), or the fallback value\n\t\t\tconst url = (atrule.params.match(paramsRegExp) || []).slice(1).find(part => part) || name;\n\n\t\t\tif (url) {\n\t\t\t\t// get the css id by removing css extensions\n\t\t\t\tconst cssId = url.replace(cssExtRegExp, '');\n\n\t\t\t\tif (cssId in resolvedFilenamesById) {\n\t\t\t\t\t// promise the library import is replaced with its contents\n\t\t\t\t\tpromises.push(\n\t\t\t\t\t\tPromise.all(\n\t\t\t\t\t\t\tresolvedFilenamesById[cssId].filter(\n\t\t\t\t\t\t\t\t// ignore filenames that have already been inserted\n\t\t\t\t\t\t\t\tfilename => insertedFilenames[filename] = opts.allowDuplicates || !(filename in insertedFilenames)\n\t\t\t\t\t\t\t).map(\n\t\t\t\t\t\t\t\t// parse the file (the file and css are conservatively cached)\n\t\t\t\t\t\t\t\tfilename => parse(filename, commentsTransformer)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t).then(roots => {\n\t\t\t\t\t\t\tif (roots.length) {\n\t\t\t\t\t\t\t\t// combine all the library nodes returned by the parsed files\n\t\t\t\t\t\t\t\tconst nodes = roots.reduce(\n\t\t\t\t\t\t\t\t\t(all, root) => all.concat(root.nodes),\n\t\t\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// replace the import with all the library nodes\n\t\t\t\t\t\t\t\tatrule.replaceWith(...nodes);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t);\n\n\treturn Promise.all([].concat(\n\t\t// promise the library imports are replaced with their contents\n\t\tpromises,\n\t\t// promise certain libraries are prepended\n\t\tPromise.all(\n\t\t\t[].concat(\n\t\t\t\topts.forceImport || []\n\t\t\t).reduce(\n\t\t\t\t// filter the id to be a known id or boolean true\n\t\t\t\t(all, id) => {\n\t\t\t\t\tif (id === true) {\n\t\t\t\t\t\tall.push(...resolvedFilenamesById.normalize)\n\t\t\t\t\t} else if (typeof id === 'string') {\n\t\t\t\t\t\tconst cssId = id.replace(cssExtRegExp, '');\n\n\t\t\t\t\t\tif (cssId in resolvedFilenamesById) {\n\t\t\t\t\t\t\tall.push(...resolvedFilenamesById[cssId]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn all;\n\t\t\t\t},\n\t\t\t\t[]\n\t\t\t).filter(\n\t\t\t\t// ignore filenames that have already been inserted\n\t\t\t\tfilename => insertedFilenames[filename] = opts.allowDuplicates || !(filename in insertedFilenames)\n\t\t\t).map(\n\t\t\t\t// parse the file (the file and css are conservatively cached)\n\t\t\t\tfilename => parse(filename, commentsTransformer)\n\t\t\t)\n\t\t).then(roots => {\n\t\t\tif (roots.length) {\n\t\t\t\t// combine all the library nodes returned by the parsed files\n\t\t\t\tconst nodes = roots.reduce(\n\t\t\t\t\t(all, root) => all.concat(root.nodes),\n\t\t\t\t\t[]\n\t\t\t\t);\n\n\t\t\t\t// prepend the stylesheet with all the library nodes\n\t\t\t\troot.prepend(...nodes);\n\t\t\t}\n\t\t})\n\t));\n};\n\nconst cssExtRegExp = /\\.css\\b/g;\nconst importRegExp = /^import(?:-(normalize|sanitize))?$/;\nconst paramsRegExp = /^\\s*(?:url\\((?:\"(.+)\"|'(.+)')\\)|\"(.+)\"|'(.+)')[\\W\\w]*$/;\n\nexport default postcssPlugin;\n","import { assign, create } from './lib/util';\nimport postcss from 'postcss';\nimport postcssBrowserComments from 'postcss-browser-comments';\nimport postcssImportNormalize from './lib/postcssImportNormalize';\nimport postcssNormalize from './lib/postcssNormalize';\n\nexport default postcss.plugin('postcss-normalize', opts => {\n\topts = create(opts);\n\n\tconst commentsTransformer = postcssBrowserComments(opts);\n\tconst normalizeTransformer = postcssNormalize(commentsTransformer, opts);\n\tconst postcssImportConfig = postcssImportNormalize(commentsTransformer, opts);\n\n\treturn assign(normalizeTransformer, { postcssImport: postcssImportConfig });\n});\n"]},"metadata":{},"sourceType":"module"}