{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  const data = _interopRequireDefault(require('fs'));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst isFile = filePath => _fs().default.existsSync(filePath) && !_fs().default.lstatSync(filePath).isDirectory();\n\nvar _default = (pathToResolve, cwd) => {\n  if (!_path().default.isAbsolute(cwd)) {\n    throw new Error(`\"cwd\" must be an absolute path. cwd: ${cwd}`);\n  }\n\n  const absolutePath = _path().default.isAbsolute(pathToResolve) ? pathToResolve : _path().default.resolve(cwd, pathToResolve);\n\n  if (isFile(absolutePath)) {\n    return absolutePath;\n  } // This is a guard against passing non existing path as a project/config,\n  // that will otherwise result in a very confusing situation.\n  // e.g.\n  // With a directory structure like this:\n  //   my_project/\n  //     packcage.json\n  //\n  // Passing a `my_project/some_directory_that_doesnt_exist` as a project\n  // name will resolve into a (possibly empty) `my_project/package.json` and\n  // try to run all tests it finds under `my_project` directory.\n\n\n  if (!_fs().default.existsSync(absolutePath)) {\n    throw new Error(`Can't find a root directory while resolving a config file path.\\n` + `Provided path to resolve: ${pathToResolve}\\n` + `cwd: ${cwd}`);\n  }\n\n  return resolveConfigPathByTraversing(absolutePath, pathToResolve, cwd);\n};\n\nexports.default = _default;\n\nconst resolveConfigPathByTraversing = (pathToResolve, initialPath, cwd) => {\n  const jestConfig = _path().default.resolve(pathToResolve, _constants.JEST_CONFIG);\n\n  if (isFile(jestConfig)) {\n    return jestConfig;\n  }\n\n  const packageJson = _path().default.resolve(pathToResolve, _constants.PACKAGE_JSON);\n\n  if (isFile(packageJson)) {\n    return packageJson;\n  } // This is the system root.\n  // We tried everything, config is nowhere to be found ¯\\_(ツ)_/¯\n\n\n  if (pathToResolve === _path().default.dirname(pathToResolve)) {\n    throw new Error(makeResolutionErrorMessage(initialPath, cwd));\n  } // go up a level and try it again\n\n\n  return resolveConfigPathByTraversing(_path().default.dirname(pathToResolve), initialPath, cwd);\n};\n\nconst makeResolutionErrorMessage = (initialPath, cwd) => 'Could not find a config file based on provided values:\\n' + `path: \"${initialPath}\"\\n` + `cwd: \"${cwd}\"\\n` + 'Config paths must be specified by either a direct path to a config\\n' + 'file, or a path to a directory. If directory is given, Jest will try to\\n' + `traverse directory tree up, until it finds either \"${_constants.JEST_CONFIG}\" or\\n` + `\"${_constants.PACKAGE_JSON}\".`;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-config/build/resolveConfigPath.js"],"names":["Object","defineProperty","exports","value","default","_path","data","_interopRequireDefault","require","_fs","_constants","obj","__esModule","isFile","filePath","existsSync","lstatSync","isDirectory","_default","pathToResolve","cwd","isAbsolute","Error","absolutePath","resolve","resolveConfigPathByTraversing","initialPath","jestConfig","JEST_CONFIG","packageJson","PACKAGE_JSON","dirname","makeResolutionErrorMessage"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  const data = _interopRequireDefault(require('fs'));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst isFile = filePath =>\n  _fs().default.existsSync(filePath) &&\n  !_fs()\n    .default.lstatSync(filePath)\n    .isDirectory();\n\nvar _default = (pathToResolve, cwd) => {\n  if (!_path().default.isAbsolute(cwd)) {\n    throw new Error(`\"cwd\" must be an absolute path. cwd: ${cwd}`);\n  }\n\n  const absolutePath = _path().default.isAbsolute(pathToResolve)\n    ? pathToResolve\n    : _path().default.resolve(cwd, pathToResolve);\n\n  if (isFile(absolutePath)) {\n    return absolutePath;\n  } // This is a guard against passing non existing path as a project/config,\n  // that will otherwise result in a very confusing situation.\n  // e.g.\n  // With a directory structure like this:\n  //   my_project/\n  //     packcage.json\n  //\n  // Passing a `my_project/some_directory_that_doesnt_exist` as a project\n  // name will resolve into a (possibly empty) `my_project/package.json` and\n  // try to run all tests it finds under `my_project` directory.\n\n  if (!_fs().default.existsSync(absolutePath)) {\n    throw new Error(\n      `Can't find a root directory while resolving a config file path.\\n` +\n        `Provided path to resolve: ${pathToResolve}\\n` +\n        `cwd: ${cwd}`\n    );\n  }\n\n  return resolveConfigPathByTraversing(absolutePath, pathToResolve, cwd);\n};\n\nexports.default = _default;\n\nconst resolveConfigPathByTraversing = (pathToResolve, initialPath, cwd) => {\n  const jestConfig = _path().default.resolve(\n    pathToResolve,\n    _constants.JEST_CONFIG\n  );\n\n  if (isFile(jestConfig)) {\n    return jestConfig;\n  }\n\n  const packageJson = _path().default.resolve(\n    pathToResolve,\n    _constants.PACKAGE_JSON\n  );\n\n  if (isFile(packageJson)) {\n    return packageJson;\n  } // This is the system root.\n  // We tried everything, config is nowhere to be found ¯\\_(ツ)_/¯\n\n  if (pathToResolve === _path().default.dirname(pathToResolve)) {\n    throw new Error(makeResolutionErrorMessage(initialPath, cwd));\n  } // go up a level and try it again\n\n  return resolveConfigPathByTraversing(\n    _path().default.dirname(pathToResolve),\n    initialPath,\n    cwd\n  );\n};\n\nconst makeResolutionErrorMessage = (initialPath, cwd) =>\n  'Could not find a config file based on provided values:\\n' +\n  `path: \"${initialPath}\"\\n` +\n  `cwd: \"${cwd}\"\\n` +\n  'Config paths must be specified by either a direct path to a config\\n' +\n  'file, or a path to a directory. If directory is given, Jest will try to\\n' +\n  `traverse directory tree up, until it finds either \"${_constants.JEST_CONFIG}\" or\\n` +\n  `\"${_constants.PACKAGE_JSON}\".`;\n"]},"metadata":{},"sourceType":"script"}