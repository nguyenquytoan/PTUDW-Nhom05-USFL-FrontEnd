{"ast":null,"code":"#!/usr/bin/env node\n'use strict';\n/*eslint-disable no-console*/\n// stdlib\n\nvar fs = require('fs'); // 3rd-party\n\n\nvar argparse = require('argparse'); // internal\n\n\nvar yaml = require('..'); ////////////////////////////////////////////////////////////////////////////////\n\n\nvar cli = new argparse.ArgumentParser({\n  prog: 'js-yaml',\n  version: require('../package.json').version,\n  addHelp: true\n});\ncli.addArgument(['-c', '--compact'], {\n  help: 'Display errors in compact mode',\n  action: 'storeTrue'\n}); // deprecated (not needed after we removed output colors)\n// option suppressed, but not completely removed for compatibility\n\ncli.addArgument(['-j', '--to-json'], {\n  help: argparse.Const.SUPPRESS,\n  dest: 'json',\n  action: 'storeTrue'\n});\ncli.addArgument(['-t', '--trace'], {\n  help: 'Show stack trace on error',\n  action: 'storeTrue'\n});\ncli.addArgument(['file'], {\n  help: 'File to read, utf-8 encoded without BOM',\n  nargs: '?',\n  defaultValue: '-'\n}); ////////////////////////////////////////////////////////////////////////////////\n\nvar options = cli.parseArgs(); ////////////////////////////////////////////////////////////////////////////////\n\nfunction readFile(filename, encoding, callback) {\n  if (options.file === '-') {\n    // read from stdin\n    var chunks = [];\n    process.stdin.on('data', function (chunk) {\n      chunks.push(chunk);\n    });\n    process.stdin.on('end', function () {\n      return callback(null, Buffer.concat(chunks).toString(encoding));\n    });\n  } else {\n    fs.readFile(filename, encoding, callback);\n  }\n}\n\nreadFile(options.file, 'utf8', function (error, input) {\n  var output, isYaml;\n\n  if (error) {\n    if (error.code === 'ENOENT') {\n      console.error('File not found: ' + options.file);\n      process.exit(2);\n    }\n\n    console.error(options.trace && error.stack || error.message || String(error));\n    process.exit(1);\n  }\n\n  try {\n    output = JSON.parse(input);\n    isYaml = false;\n  } catch (err) {\n    if (err instanceof SyntaxError) {\n      try {\n        output = [];\n        yaml.loadAll(input, function (doc) {\n          output.push(doc);\n        }, {});\n        isYaml = true;\n        if (output.length === 0) output = null;else if (output.length === 1) output = output[0];\n      } catch (e) {\n        if (options.trace && err.stack) console.error(e.stack);else console.error(e.toString(options.compact));\n        process.exit(1);\n      }\n    } else {\n      console.error(options.trace && err.stack || err.message || String(err));\n      process.exit(1);\n    }\n  }\n\n  if (isYaml) console.log(JSON.stringify(output, null, '  '));else console.log(yaml.dump(output));\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/js-yaml/bin/js-yaml.js"],"names":["fs","require","argparse","yaml","cli","ArgumentParser","prog","version","addHelp","addArgument","help","action","Const","SUPPRESS","dest","nargs","defaultValue","options","parseArgs","readFile","filename","encoding","callback","file","chunks","process","stdin","on","chunk","push","Buffer","concat","toString","error","input","output","isYaml","code","console","exit","trace","stack","message","String","JSON","parse","err","SyntaxError","loadAll","doc","length","e","compact","log","stringify","dump"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\n\n'use strict';\n\n/*eslint-disable no-console*/\n\n\n// stdlib\nvar fs    = require('fs');\n\n\n// 3rd-party\nvar argparse = require('argparse');\n\n\n// internal\nvar yaml = require('..');\n\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar cli = new argparse.ArgumentParser({\n  prog:     'js-yaml',\n  version:  require('../package.json').version,\n  addHelp:  true\n});\n\n\ncli.addArgument([ '-c', '--compact' ], {\n  help:   'Display errors in compact mode',\n  action: 'storeTrue'\n});\n\n\n// deprecated (not needed after we removed output colors)\n// option suppressed, but not completely removed for compatibility\ncli.addArgument([ '-j', '--to-json' ], {\n  help:   argparse.Const.SUPPRESS,\n  dest:   'json',\n  action: 'storeTrue'\n});\n\n\ncli.addArgument([ '-t', '--trace' ], {\n  help:   'Show stack trace on error',\n  action: 'storeTrue'\n});\n\ncli.addArgument([ 'file' ], {\n  help:   'File to read, utf-8 encoded without BOM',\n  nargs:  '?',\n  defaultValue: '-'\n});\n\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar options = cli.parseArgs();\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction readFile(filename, encoding, callback) {\n  if (options.file === '-') {\n    // read from stdin\n\n    var chunks = [];\n\n    process.stdin.on('data', function (chunk) {\n      chunks.push(chunk);\n    });\n\n    process.stdin.on('end', function () {\n      return callback(null, Buffer.concat(chunks).toString(encoding));\n    });\n  } else {\n    fs.readFile(filename, encoding, callback);\n  }\n}\n\nreadFile(options.file, 'utf8', function (error, input) {\n  var output, isYaml;\n\n  if (error) {\n    if (error.code === 'ENOENT') {\n      console.error('File not found: ' + options.file);\n      process.exit(2);\n    }\n\n    console.error(\n      options.trace && error.stack ||\n      error.message ||\n      String(error));\n\n    process.exit(1);\n  }\n\n  try {\n    output = JSON.parse(input);\n    isYaml = false;\n  } catch (err) {\n    if (err instanceof SyntaxError) {\n      try {\n        output = [];\n        yaml.loadAll(input, function (doc) { output.push(doc); }, {});\n        isYaml = true;\n\n        if (output.length === 0) output = null;\n        else if (output.length === 1) output = output[0];\n\n      } catch (e) {\n        if (options.trace && err.stack) console.error(e.stack);\n        else console.error(e.toString(options.compact));\n\n        process.exit(1);\n      }\n    } else {\n      console.error(\n        options.trace && err.stack ||\n        err.message ||\n        String(err));\n\n      process.exit(1);\n    }\n  }\n\n  if (isYaml) console.log(JSON.stringify(output, null, '  '));\n  else console.log(yaml.dump(output));\n});\n"]},"metadata":{},"sourceType":"script"}