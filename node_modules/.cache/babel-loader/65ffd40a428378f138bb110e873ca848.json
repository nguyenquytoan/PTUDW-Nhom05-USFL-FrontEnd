{"ast":null,"code":"'use strict';\n\nvar test = require('tape');\n\nvar qs = require('../');\n\nvar utils = require('../lib/utils');\n\nvar iconv = require('iconv-lite');\n\nvar SaferBuffer = require('safer-buffer').Buffer;\n\ntest('parse()', function (t) {\n  t.test('parses a simple string', function (st) {\n    st.deepEqual(qs.parse('0=foo'), {\n      0: 'foo'\n    });\n    st.deepEqual(qs.parse('foo=c++'), {\n      foo: 'c  '\n    });\n    st.deepEqual(qs.parse('a[>=]=23'), {\n      a: {\n        '>=': '23'\n      }\n    });\n    st.deepEqual(qs.parse('a[<=>]==23'), {\n      a: {\n        '<=>': '=23'\n      }\n    });\n    st.deepEqual(qs.parse('a[==]=23'), {\n      a: {\n        '==': '23'\n      }\n    });\n    st.deepEqual(qs.parse('foo', {\n      strictNullHandling: true\n    }), {\n      foo: null\n    });\n    st.deepEqual(qs.parse('foo'), {\n      foo: ''\n    });\n    st.deepEqual(qs.parse('foo='), {\n      foo: ''\n    });\n    st.deepEqual(qs.parse('foo=bar'), {\n      foo: 'bar'\n    });\n    st.deepEqual(qs.parse(' foo = bar = baz '), {\n      ' foo ': ' bar = baz '\n    });\n    st.deepEqual(qs.parse('foo=bar=baz'), {\n      foo: 'bar=baz'\n    });\n    st.deepEqual(qs.parse('foo=bar&bar=baz'), {\n      foo: 'bar',\n      bar: 'baz'\n    });\n    st.deepEqual(qs.parse('foo2=bar2&baz2='), {\n      foo2: 'bar2',\n      baz2: ''\n    });\n    st.deepEqual(qs.parse('foo=bar&baz', {\n      strictNullHandling: true\n    }), {\n      foo: 'bar',\n      baz: null\n    });\n    st.deepEqual(qs.parse('foo=bar&baz'), {\n      foo: 'bar',\n      baz: ''\n    });\n    st.deepEqual(qs.parse('cht=p3&chd=t:60,40&chs=250x100&chl=Hello|World'), {\n      cht: 'p3',\n      chd: 't:60,40',\n      chs: '250x100',\n      chl: 'Hello|World'\n    });\n    st.end();\n  });\n  t.test('allows enabling dot notation', function (st) {\n    st.deepEqual(qs.parse('a.b=c'), {\n      'a.b': 'c'\n    });\n    st.deepEqual(qs.parse('a.b=c', {\n      allowDots: true\n    }), {\n      a: {\n        b: 'c'\n      }\n    });\n    st.end();\n  });\n  t.deepEqual(qs.parse('a[b]=c'), {\n    a: {\n      b: 'c'\n    }\n  }, 'parses a single nested string');\n  t.deepEqual(qs.parse('a[b][c]=d'), {\n    a: {\n      b: {\n        c: 'd'\n      }\n    }\n  }, 'parses a double nested string');\n  t.deepEqual(qs.parse('a[b][c][d][e][f][g][h]=i'), {\n    a: {\n      b: {\n        c: {\n          d: {\n            e: {\n              f: {\n                '[g][h]': 'i'\n              }\n            }\n          }\n        }\n      }\n    }\n  }, 'defaults to a depth of 5');\n  t.test('only parses one level when depth = 1', function (st) {\n    st.deepEqual(qs.parse('a[b][c]=d', {\n      depth: 1\n    }), {\n      a: {\n        b: {\n          '[c]': 'd'\n        }\n      }\n    });\n    st.deepEqual(qs.parse('a[b][c][d]=e', {\n      depth: 1\n    }), {\n      a: {\n        b: {\n          '[c][d]': 'e'\n        }\n      }\n    });\n    st.end();\n  });\n  t.deepEqual(qs.parse('a=b&a=c'), {\n    a: ['b', 'c']\n  }, 'parses a simple array');\n  t.test('parses an explicit array', function (st) {\n    st.deepEqual(qs.parse('a[]=b'), {\n      a: ['b']\n    });\n    st.deepEqual(qs.parse('a[]=b&a[]=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[]=b&a[]=c&a[]=d'), {\n      a: ['b', 'c', 'd']\n    });\n    st.end();\n  });\n  t.test('parses a mix of simple and explicit arrays', function (st) {\n    st.deepEqual(qs.parse('a=b&a[]=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[]=b&a=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[0]=b&a=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b&a[0]=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[1]=b&a=c', {\n      arrayLimit: 20\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[]=b&a=c', {\n      arrayLimit: 0\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[]=b&a=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b&a[1]=c', {\n      arrayLimit: 20\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b&a[]=c', {\n      arrayLimit: 0\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b&a[]=c'), {\n      a: ['b', 'c']\n    });\n    st.end();\n  });\n  t.test('parses a nested array', function (st) {\n    st.deepEqual(qs.parse('a[b][]=c&a[b][]=d'), {\n      a: {\n        b: ['c', 'd']\n      }\n    });\n    st.deepEqual(qs.parse('a[>=]=25'), {\n      a: {\n        '>=': '25'\n      }\n    });\n    st.end();\n  });\n  t.test('allows to specify array indices', function (st) {\n    st.deepEqual(qs.parse('a[1]=c&a[0]=b&a[2]=d'), {\n      a: ['b', 'c', 'd']\n    });\n    st.deepEqual(qs.parse('a[1]=c&a[0]=b'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[1]=c', {\n      arrayLimit: 20\n    }), {\n      a: ['c']\n    });\n    st.deepEqual(qs.parse('a[1]=c', {\n      arrayLimit: 0\n    }), {\n      a: {\n        1: 'c'\n      }\n    });\n    st.deepEqual(qs.parse('a[1]=c'), {\n      a: ['c']\n    });\n    st.end();\n  });\n  t.test('limits specific array indices to arrayLimit', function (st) {\n    st.deepEqual(qs.parse('a[20]=a', {\n      arrayLimit: 20\n    }), {\n      a: ['a']\n    });\n    st.deepEqual(qs.parse('a[21]=a', {\n      arrayLimit: 20\n    }), {\n      a: {\n        21: 'a'\n      }\n    });\n    st.end();\n  });\n  t.deepEqual(qs.parse('a[12b]=c'), {\n    a: {\n      '12b': 'c'\n    }\n  }, 'supports keys that begin with a number');\n  t.test('supports encoded = signs', function (st) {\n    st.deepEqual(qs.parse('he%3Dllo=th%3Dere'), {\n      'he=llo': 'th=ere'\n    });\n    st.end();\n  });\n  t.test('is ok with url encoded strings', function (st) {\n    st.deepEqual(qs.parse('a[b%20c]=d'), {\n      a: {\n        'b c': 'd'\n      }\n    });\n    st.deepEqual(qs.parse('a[b]=c%20d'), {\n      a: {\n        b: 'c d'\n      }\n    });\n    st.end();\n  });\n  t.test('allows brackets in the value', function (st) {\n    st.deepEqual(qs.parse('pets=[\"tobi\"]'), {\n      pets: '[\"tobi\"]'\n    });\n    st.deepEqual(qs.parse('operators=[\">=\", \"<=\"]'), {\n      operators: '[\">=\", \"<=\"]'\n    });\n    st.end();\n  });\n  t.test('allows empty values', function (st) {\n    st.deepEqual(qs.parse(''), {});\n    st.deepEqual(qs.parse(null), {});\n    st.deepEqual(qs.parse(undefined), {});\n    st.end();\n  });\n  t.test('transforms arrays to objects', function (st) {\n    st.deepEqual(qs.parse('foo[0]=bar&foo[bad]=baz'), {\n      foo: {\n        0: 'bar',\n        bad: 'baz'\n      }\n    });\n    st.deepEqual(qs.parse('foo[bad]=baz&foo[0]=bar'), {\n      foo: {\n        bad: 'baz',\n        0: 'bar'\n      }\n    });\n    st.deepEqual(qs.parse('foo[bad]=baz&foo[]=bar'), {\n      foo: {\n        bad: 'baz',\n        0: 'bar'\n      }\n    });\n    st.deepEqual(qs.parse('foo[]=bar&foo[bad]=baz'), {\n      foo: {\n        0: 'bar',\n        bad: 'baz'\n      }\n    });\n    st.deepEqual(qs.parse('foo[bad]=baz&foo[]=bar&foo[]=foo'), {\n      foo: {\n        bad: 'baz',\n        0: 'bar',\n        1: 'foo'\n      }\n    });\n    st.deepEqual(qs.parse('foo[0][a]=a&foo[0][b]=b&foo[1][a]=aa&foo[1][b]=bb'), {\n      foo: [{\n        a: 'a',\n        b: 'b'\n      }, {\n        a: 'aa',\n        b: 'bb'\n      }]\n    });\n    st.deepEqual(qs.parse('a[]=b&a[t]=u&a[hasOwnProperty]=c', {\n      allowPrototypes: false\n    }), {\n      a: {\n        0: 'b',\n        t: 'u'\n      }\n    });\n    st.deepEqual(qs.parse('a[]=b&a[t]=u&a[hasOwnProperty]=c', {\n      allowPrototypes: true\n    }), {\n      a: {\n        0: 'b',\n        t: 'u',\n        hasOwnProperty: 'c'\n      }\n    });\n    st.deepEqual(qs.parse('a[]=b&a[hasOwnProperty]=c&a[x]=y', {\n      allowPrototypes: false\n    }), {\n      a: {\n        0: 'b',\n        x: 'y'\n      }\n    });\n    st.deepEqual(qs.parse('a[]=b&a[hasOwnProperty]=c&a[x]=y', {\n      allowPrototypes: true\n    }), {\n      a: {\n        0: 'b',\n        hasOwnProperty: 'c',\n        x: 'y'\n      }\n    });\n    st.end();\n  });\n  t.test('transforms arrays to objects (dot notation)', function (st) {\n    st.deepEqual(qs.parse('foo[0].baz=bar&fool.bad=baz', {\n      allowDots: true\n    }), {\n      foo: [{\n        baz: 'bar'\n      }],\n      fool: {\n        bad: 'baz'\n      }\n    });\n    st.deepEqual(qs.parse('foo[0].baz=bar&fool.bad.boo=baz', {\n      allowDots: true\n    }), {\n      foo: [{\n        baz: 'bar'\n      }],\n      fool: {\n        bad: {\n          boo: 'baz'\n        }\n      }\n    });\n    st.deepEqual(qs.parse('foo[0][0].baz=bar&fool.bad=baz', {\n      allowDots: true\n    }), {\n      foo: [[{\n        baz: 'bar'\n      }]],\n      fool: {\n        bad: 'baz'\n      }\n    });\n    st.deepEqual(qs.parse('foo[0].baz[0]=15&foo[0].bar=2', {\n      allowDots: true\n    }), {\n      foo: [{\n        baz: ['15'],\n        bar: '2'\n      }]\n    });\n    st.deepEqual(qs.parse('foo[0].baz[0]=15&foo[0].baz[1]=16&foo[0].bar=2', {\n      allowDots: true\n    }), {\n      foo: [{\n        baz: ['15', '16'],\n        bar: '2'\n      }]\n    });\n    st.deepEqual(qs.parse('foo.bad=baz&foo[0]=bar', {\n      allowDots: true\n    }), {\n      foo: {\n        bad: 'baz',\n        0: 'bar'\n      }\n    });\n    st.deepEqual(qs.parse('foo.bad=baz&foo[]=bar', {\n      allowDots: true\n    }), {\n      foo: {\n        bad: 'baz',\n        0: 'bar'\n      }\n    });\n    st.deepEqual(qs.parse('foo[]=bar&foo.bad=baz', {\n      allowDots: true\n    }), {\n      foo: {\n        0: 'bar',\n        bad: 'baz'\n      }\n    });\n    st.deepEqual(qs.parse('foo.bad=baz&foo[]=bar&foo[]=foo', {\n      allowDots: true\n    }), {\n      foo: {\n        bad: 'baz',\n        0: 'bar',\n        1: 'foo'\n      }\n    });\n    st.deepEqual(qs.parse('foo[0].a=a&foo[0].b=b&foo[1].a=aa&foo[1].b=bb', {\n      allowDots: true\n    }), {\n      foo: [{\n        a: 'a',\n        b: 'b'\n      }, {\n        a: 'aa',\n        b: 'bb'\n      }]\n    });\n    st.end();\n  });\n  t.test('correctly prunes undefined values when converting an array to an object', function (st) {\n    st.deepEqual(qs.parse('a[2]=b&a[99999999]=c'), {\n      a: {\n        2: 'b',\n        99999999: 'c'\n      }\n    });\n    st.end();\n  });\n  t.test('supports malformed uri characters', function (st) {\n    st.deepEqual(qs.parse('{%:%}', {\n      strictNullHandling: true\n    }), {\n      '{%:%}': null\n    });\n    st.deepEqual(qs.parse('{%:%}='), {\n      '{%:%}': ''\n    });\n    st.deepEqual(qs.parse('foo=%:%}'), {\n      foo: '%:%}'\n    });\n    st.end();\n  });\n  t.test('doesn\\'t produce empty keys', function (st) {\n    st.deepEqual(qs.parse('_r=1&'), {\n      _r: '1'\n    });\n    st.end();\n  });\n  t.test('cannot access Object prototype', function (st) {\n    qs.parse('constructor[prototype][bad]=bad');\n    qs.parse('bad[constructor][prototype][bad]=bad');\n    st.equal(typeof Object.prototype.bad, 'undefined');\n    st.end();\n  });\n  t.test('parses arrays of objects', function (st) {\n    st.deepEqual(qs.parse('a[][b]=c'), {\n      a: [{\n        b: 'c'\n      }]\n    });\n    st.deepEqual(qs.parse('a[0][b]=c'), {\n      a: [{\n        b: 'c'\n      }]\n    });\n    st.end();\n  });\n  t.test('allows for empty strings in arrays', function (st) {\n    st.deepEqual(qs.parse('a[]=b&a[]=&a[]=c'), {\n      a: ['b', '', 'c']\n    });\n    st.deepEqual(qs.parse('a[0]=b&a[1]&a[2]=c&a[19]=', {\n      strictNullHandling: true,\n      arrayLimit: 20\n    }), {\n      a: ['b', null, 'c', '']\n    }, 'with arrayLimit 20 + array indices: null then empty string works');\n    st.deepEqual(qs.parse('a[]=b&a[]&a[]=c&a[]=', {\n      strictNullHandling: true,\n      arrayLimit: 0\n    }), {\n      a: ['b', null, 'c', '']\n    }, 'with arrayLimit 0 + array brackets: null then empty string works');\n    st.deepEqual(qs.parse('a[0]=b&a[1]=&a[2]=c&a[19]', {\n      strictNullHandling: true,\n      arrayLimit: 20\n    }), {\n      a: ['b', '', 'c', null]\n    }, 'with arrayLimit 20 + array indices: empty string then null works');\n    st.deepEqual(qs.parse('a[]=b&a[]=&a[]=c&a[]', {\n      strictNullHandling: true,\n      arrayLimit: 0\n    }), {\n      a: ['b', '', 'c', null]\n    }, 'with arrayLimit 0 + array brackets: empty string then null works');\n    st.deepEqual(qs.parse('a[]=&a[]=b&a[]=c'), {\n      a: ['', 'b', 'c']\n    }, 'array brackets: empty strings work');\n    st.end();\n  });\n  t.test('compacts sparse arrays', function (st) {\n    st.deepEqual(qs.parse('a[10]=1&a[2]=2', {\n      arrayLimit: 20\n    }), {\n      a: ['2', '1']\n    });\n    st.deepEqual(qs.parse('a[1][b][2][c]=1', {\n      arrayLimit: 20\n    }), {\n      a: [{\n        b: [{\n          c: '1'\n        }]\n      }]\n    });\n    st.deepEqual(qs.parse('a[1][2][3][c]=1', {\n      arrayLimit: 20\n    }), {\n      a: [[[{\n        c: '1'\n      }]]]\n    });\n    st.deepEqual(qs.parse('a[1][2][3][c][1]=1', {\n      arrayLimit: 20\n    }), {\n      a: [[[{\n        c: ['1']\n      }]]]\n    });\n    st.end();\n  });\n  t.test('parses semi-parsed strings', function (st) {\n    st.deepEqual(qs.parse({\n      'a[b]': 'c'\n    }), {\n      a: {\n        b: 'c'\n      }\n    });\n    st.deepEqual(qs.parse({\n      'a[b]': 'c',\n      'a[d]': 'e'\n    }), {\n      a: {\n        b: 'c',\n        d: 'e'\n      }\n    });\n    st.end();\n  });\n  t.test('parses buffers correctly', function (st) {\n    var b = SaferBuffer.from('test');\n    st.deepEqual(qs.parse({\n      a: b\n    }), {\n      a: b\n    });\n    st.end();\n  });\n  t.test('continues parsing when no parent is found', function (st) {\n    st.deepEqual(qs.parse('[]=&a=b'), {\n      0: '',\n      a: 'b'\n    });\n    st.deepEqual(qs.parse('[]&a=b', {\n      strictNullHandling: true\n    }), {\n      0: null,\n      a: 'b'\n    });\n    st.deepEqual(qs.parse('[foo]=bar'), {\n      foo: 'bar'\n    });\n    st.end();\n  });\n  t.test('does not error when parsing a very long array', function (st) {\n    var str = 'a[]=a';\n\n    while (Buffer.byteLength(str) < 128 * 1024) {\n      str = str + '&' + str;\n    }\n\n    st.doesNotThrow(function () {\n      qs.parse(str);\n    });\n    st.end();\n  });\n  t.test('should not throw when a native prototype has an enumerable property', {\n    parallel: false\n  }, function (st) {\n    Object.prototype.crash = '';\n    Array.prototype.crash = '';\n    st.doesNotThrow(qs.parse.bind(null, 'a=b'));\n    st.deepEqual(qs.parse('a=b'), {\n      a: 'b'\n    });\n    st.doesNotThrow(qs.parse.bind(null, 'a[][b]=c'));\n    st.deepEqual(qs.parse('a[][b]=c'), {\n      a: [{\n        b: 'c'\n      }]\n    });\n    delete Object.prototype.crash;\n    delete Array.prototype.crash;\n    st.end();\n  });\n  t.test('parses a string with an alternative string delimiter', function (st) {\n    st.deepEqual(qs.parse('a=b;c=d', {\n      delimiter: ';'\n    }), {\n      a: 'b',\n      c: 'd'\n    });\n    st.end();\n  });\n  t.test('parses a string with an alternative RegExp delimiter', function (st) {\n    st.deepEqual(qs.parse('a=b; c=d', {\n      delimiter: /[;,] */\n    }), {\n      a: 'b',\n      c: 'd'\n    });\n    st.end();\n  });\n  t.test('does not use non-splittable objects as delimiters', function (st) {\n    st.deepEqual(qs.parse('a=b&c=d', {\n      delimiter: true\n    }), {\n      a: 'b',\n      c: 'd'\n    });\n    st.end();\n  });\n  t.test('allows overriding parameter limit', function (st) {\n    st.deepEqual(qs.parse('a=b&c=d', {\n      parameterLimit: 1\n    }), {\n      a: 'b'\n    });\n    st.end();\n  });\n  t.test('allows setting the parameter limit to Infinity', function (st) {\n    st.deepEqual(qs.parse('a=b&c=d', {\n      parameterLimit: Infinity\n    }), {\n      a: 'b',\n      c: 'd'\n    });\n    st.end();\n  });\n  t.test('allows overriding array limit', function (st) {\n    st.deepEqual(qs.parse('a[0]=b', {\n      arrayLimit: -1\n    }), {\n      a: {\n        0: 'b'\n      }\n    });\n    st.deepEqual(qs.parse('a[-1]=b', {\n      arrayLimit: -1\n    }), {\n      a: {\n        '-1': 'b'\n      }\n    });\n    st.deepEqual(qs.parse('a[0]=b&a[1]=c', {\n      arrayLimit: 0\n    }), {\n      a: {\n        0: 'b',\n        1: 'c'\n      }\n    });\n    st.end();\n  });\n  t.test('allows disabling array parsing', function (st) {\n    st.deepEqual(qs.parse('a[0]=b&a[1]=c', {\n      parseArrays: false\n    }), {\n      a: {\n        0: 'b',\n        1: 'c'\n      }\n    });\n    st.end();\n  });\n  t.test('allows for query string prefix', function (st) {\n    st.deepEqual(qs.parse('?foo=bar', {\n      ignoreQueryPrefix: true\n    }), {\n      foo: 'bar'\n    });\n    st.deepEqual(qs.parse('foo=bar', {\n      ignoreQueryPrefix: true\n    }), {\n      foo: 'bar'\n    });\n    st.deepEqual(qs.parse('?foo=bar', {\n      ignoreQueryPrefix: false\n    }), {\n      '?foo': 'bar'\n    });\n    st.end();\n  });\n  t.test('parses an object', function (st) {\n    var input = {\n      'user[name]': {\n        'pop[bob]': 3\n      },\n      'user[email]': null\n    };\n    var expected = {\n      user: {\n        name: {\n          'pop[bob]': 3\n        },\n        email: null\n      }\n    };\n    var result = qs.parse(input);\n    st.deepEqual(result, expected);\n    st.end();\n  });\n  t.test('parses an object in dot notation', function (st) {\n    var input = {\n      'user.name': {\n        'pop[bob]': 3\n      },\n      'user.email.': null\n    };\n    var expected = {\n      user: {\n        name: {\n          'pop[bob]': 3\n        },\n        email: null\n      }\n    };\n    var result = qs.parse(input, {\n      allowDots: true\n    });\n    st.deepEqual(result, expected);\n    st.end();\n  });\n  t.test('parses an object and not child values', function (st) {\n    var input = {\n      'user[name]': {\n        'pop[bob]': {\n          test: 3\n        }\n      },\n      'user[email]': null\n    };\n    var expected = {\n      user: {\n        name: {\n          'pop[bob]': {\n            test: 3\n          }\n        },\n        email: null\n      }\n    };\n    var result = qs.parse(input);\n    st.deepEqual(result, expected);\n    st.end();\n  });\n  t.test('does not blow up when Buffer global is missing', function (st) {\n    var tempBuffer = global.Buffer;\n    delete global.Buffer;\n    var result = qs.parse('a=b&c=d');\n    global.Buffer = tempBuffer;\n    st.deepEqual(result, {\n      a: 'b',\n      c: 'd'\n    });\n    st.end();\n  });\n  t.test('does not crash when parsing circular references', function (st) {\n    var a = {};\n    a.b = a;\n    var parsed;\n    st.doesNotThrow(function () {\n      parsed = qs.parse({\n        'foo[bar]': 'baz',\n        'foo[baz]': a\n      });\n    });\n    st.equal('foo' in parsed, true, 'parsed has \"foo\" property');\n    st.equal('bar' in parsed.foo, true);\n    st.equal('baz' in parsed.foo, true);\n    st.equal(parsed.foo.bar, 'baz');\n    st.deepEqual(parsed.foo.baz, a);\n    st.end();\n  });\n  t.test('does not crash when parsing deep objects', function (st) {\n    var parsed;\n    var str = 'foo';\n\n    for (var i = 0; i < 5000; i++) {\n      str += '[p]';\n    }\n\n    str += '=bar';\n    st.doesNotThrow(function () {\n      parsed = qs.parse(str, {\n        depth: 5000\n      });\n    });\n    st.equal('foo' in parsed, true, 'parsed has \"foo\" property');\n    var depth = 0;\n    var ref = parsed.foo;\n\n    while (ref = ref.p) {\n      depth += 1;\n    }\n\n    st.equal(depth, 5000, 'parsed is 5000 properties deep');\n    st.end();\n  });\n  t.test('parses null objects correctly', {\n    skip: !Object.create\n  }, function (st) {\n    var a = Object.create(null);\n    a.b = 'c';\n    st.deepEqual(qs.parse(a), {\n      b: 'c'\n    });\n    var result = qs.parse({\n      a: a\n    });\n    st.equal('a' in result, true, 'result has \"a\" property');\n    st.deepEqual(result.a, a);\n    st.end();\n  });\n  t.test('parses dates correctly', function (st) {\n    var now = new Date();\n    st.deepEqual(qs.parse({\n      a: now\n    }), {\n      a: now\n    });\n    st.end();\n  });\n  t.test('parses regular expressions correctly', function (st) {\n    var re = /^test$/;\n    st.deepEqual(qs.parse({\n      a: re\n    }), {\n      a: re\n    });\n    st.end();\n  });\n  t.test('does not allow overwriting prototype properties', function (st) {\n    st.deepEqual(qs.parse('a[hasOwnProperty]=b', {\n      allowPrototypes: false\n    }), {});\n    st.deepEqual(qs.parse('hasOwnProperty=b', {\n      allowPrototypes: false\n    }), {});\n    st.deepEqual(qs.parse('toString', {\n      allowPrototypes: false\n    }), {}, 'bare \"toString\" results in {}');\n    st.end();\n  });\n  t.test('can allow overwriting prototype properties', function (st) {\n    st.deepEqual(qs.parse('a[hasOwnProperty]=b', {\n      allowPrototypes: true\n    }), {\n      a: {\n        hasOwnProperty: 'b'\n      }\n    });\n    st.deepEqual(qs.parse('hasOwnProperty=b', {\n      allowPrototypes: true\n    }), {\n      hasOwnProperty: 'b'\n    });\n    st.deepEqual(qs.parse('toString', {\n      allowPrototypes: true\n    }), {\n      toString: ''\n    }, 'bare \"toString\" results in { toString: \"\" }');\n    st.end();\n  });\n  t.test('params starting with a closing bracket', function (st) {\n    st.deepEqual(qs.parse(']=toString'), {\n      ']': 'toString'\n    });\n    st.deepEqual(qs.parse(']]=toString'), {\n      ']]': 'toString'\n    });\n    st.deepEqual(qs.parse(']hello]=toString'), {\n      ']hello]': 'toString'\n    });\n    st.end();\n  });\n  t.test('params starting with a starting bracket', function (st) {\n    st.deepEqual(qs.parse('[=toString'), {\n      '[': 'toString'\n    });\n    st.deepEqual(qs.parse('[[=toString'), {\n      '[[': 'toString'\n    });\n    st.deepEqual(qs.parse('[hello[=toString'), {\n      '[hello[': 'toString'\n    });\n    st.end();\n  });\n  t.test('add keys to objects', function (st) {\n    st.deepEqual(qs.parse('a[b]=c&a=d'), {\n      a: {\n        b: 'c',\n        d: true\n      }\n    }, 'can add keys to objects');\n    st.deepEqual(qs.parse('a[b]=c&a=toString'), {\n      a: {\n        b: 'c'\n      }\n    }, 'can not overwrite prototype');\n    st.deepEqual(qs.parse('a[b]=c&a=toString', {\n      allowPrototypes: true\n    }), {\n      a: {\n        b: 'c',\n        toString: true\n      }\n    }, 'can overwrite prototype with allowPrototypes true');\n    st.deepEqual(qs.parse('a[b]=c&a=toString', {\n      plainObjects: true\n    }), {\n      a: {\n        b: 'c',\n        toString: true\n      }\n    }, 'can overwrite prototype with plainObjects true');\n    st.end();\n  });\n  t.test('can return null objects', {\n    skip: !Object.create\n  }, function (st) {\n    var expected = Object.create(null);\n    expected.a = Object.create(null);\n    expected.a.b = 'c';\n    expected.a.hasOwnProperty = 'd';\n    st.deepEqual(qs.parse('a[b]=c&a[hasOwnProperty]=d', {\n      plainObjects: true\n    }), expected);\n    st.deepEqual(qs.parse(null, {\n      plainObjects: true\n    }), Object.create(null));\n    var expectedArray = Object.create(null);\n    expectedArray.a = Object.create(null);\n    expectedArray.a[0] = 'b';\n    expectedArray.a.c = 'd';\n    st.deepEqual(qs.parse('a[]=b&a[c]=d', {\n      plainObjects: true\n    }), expectedArray);\n    st.end();\n  });\n  t.test('can parse with custom encoding', function (st) {\n    st.deepEqual(qs.parse('%8c%a7=%91%e5%8d%e3%95%7b', {\n      decoder: function (str) {\n        var reg = /%([0-9A-F]{2})/ig;\n        var result = [];\n        var parts = reg.exec(str);\n\n        while (parts) {\n          result.push(parseInt(parts[1], 16));\n          parts = reg.exec(str);\n        }\n\n        return iconv.decode(SaferBuffer.from(result), 'shift_jis').toString();\n      }\n    }), {\n      県: '大阪府'\n    });\n    st.end();\n  });\n  t.test('receives the default decoder as a second argument', function (st) {\n    st.plan(1);\n    qs.parse('a', {\n      decoder: function (str, defaultDecoder) {\n        st.equal(defaultDecoder, utils.decode);\n      }\n    });\n    st.end();\n  });\n  t.test('throws error with wrong decoder', function (st) {\n    st['throws'](function () {\n      qs.parse({}, {\n        decoder: 'string'\n      });\n    }, new TypeError('Decoder has to be a function.'));\n    st.end();\n  });\n  t.test('does not mutate the options argument', function (st) {\n    var options = {};\n    qs.parse('a[b]=true', options);\n    st.deepEqual(options, {});\n    st.end();\n  });\n  t.end();\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/qs/test/parse.js"],"names":["test","require","qs","utils","iconv","SaferBuffer","Buffer","t","st","deepEqual","parse","foo","a","strictNullHandling","bar","foo2","baz2","baz","cht","chd","chs","chl","end","allowDots","b","c","d","e","f","depth","arrayLimit","pets","operators","undefined","bad","allowPrototypes","hasOwnProperty","x","fool","boo","_r","equal","Object","prototype","from","str","byteLength","doesNotThrow","parallel","crash","Array","bind","delimiter","parameterLimit","Infinity","parseArrays","ignoreQueryPrefix","input","expected","user","name","email","result","tempBuffer","global","parsed","i","ref","p","skip","create","now","Date","re","toString","plainObjects","expectedArray","decoder","reg","parts","exec","push","parseInt","decode","県","plan","defaultDecoder","TypeError","options"],"mappings":"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","sourcesContent":["'use strict';\n\nvar test = require('tape');\nvar qs = require('../');\nvar utils = require('../lib/utils');\nvar iconv = require('iconv-lite');\nvar SaferBuffer = require('safer-buffer').Buffer;\n\ntest('parse()', function (t) {\n    t.test('parses a simple string', function (st) {\n        st.deepEqual(qs.parse('0=foo'), { 0: 'foo' });\n        st.deepEqual(qs.parse('foo=c++'), { foo: 'c  ' });\n        st.deepEqual(qs.parse('a[>=]=23'), { a: { '>=': '23' } });\n        st.deepEqual(qs.parse('a[<=>]==23'), { a: { '<=>': '=23' } });\n        st.deepEqual(qs.parse('a[==]=23'), { a: { '==': '23' } });\n        st.deepEqual(qs.parse('foo', { strictNullHandling: true }), { foo: null });\n        st.deepEqual(qs.parse('foo'), { foo: '' });\n        st.deepEqual(qs.parse('foo='), { foo: '' });\n        st.deepEqual(qs.parse('foo=bar'), { foo: 'bar' });\n        st.deepEqual(qs.parse(' foo = bar = baz '), { ' foo ': ' bar = baz ' });\n        st.deepEqual(qs.parse('foo=bar=baz'), { foo: 'bar=baz' });\n        st.deepEqual(qs.parse('foo=bar&bar=baz'), { foo: 'bar', bar: 'baz' });\n        st.deepEqual(qs.parse('foo2=bar2&baz2='), { foo2: 'bar2', baz2: '' });\n        st.deepEqual(qs.parse('foo=bar&baz', { strictNullHandling: true }), { foo: 'bar', baz: null });\n        st.deepEqual(qs.parse('foo=bar&baz'), { foo: 'bar', baz: '' });\n        st.deepEqual(qs.parse('cht=p3&chd=t:60,40&chs=250x100&chl=Hello|World'), {\n            cht: 'p3',\n            chd: 't:60,40',\n            chs: '250x100',\n            chl: 'Hello|World'\n        });\n        st.end();\n    });\n\n    t.test('allows enabling dot notation', function (st) {\n        st.deepEqual(qs.parse('a.b=c'), { 'a.b': 'c' });\n        st.deepEqual(qs.parse('a.b=c', { allowDots: true }), { a: { b: 'c' } });\n        st.end();\n    });\n\n    t.deepEqual(qs.parse('a[b]=c'), { a: { b: 'c' } }, 'parses a single nested string');\n    t.deepEqual(qs.parse('a[b][c]=d'), { a: { b: { c: 'd' } } }, 'parses a double nested string');\n    t.deepEqual(\n        qs.parse('a[b][c][d][e][f][g][h]=i'),\n        { a: { b: { c: { d: { e: { f: { '[g][h]': 'i' } } } } } } },\n        'defaults to a depth of 5'\n    );\n\n    t.test('only parses one level when depth = 1', function (st) {\n        st.deepEqual(qs.parse('a[b][c]=d', { depth: 1 }), { a: { b: { '[c]': 'd' } } });\n        st.deepEqual(qs.parse('a[b][c][d]=e', { depth: 1 }), { a: { b: { '[c][d]': 'e' } } });\n        st.end();\n    });\n\n    t.deepEqual(qs.parse('a=b&a=c'), { a: ['b', 'c'] }, 'parses a simple array');\n\n    t.test('parses an explicit array', function (st) {\n        st.deepEqual(qs.parse('a[]=b'), { a: ['b'] });\n        st.deepEqual(qs.parse('a[]=b&a[]=c'), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a[]=b&a[]=c&a[]=d'), { a: ['b', 'c', 'd'] });\n        st.end();\n    });\n\n    t.test('parses a mix of simple and explicit arrays', function (st) {\n        st.deepEqual(qs.parse('a=b&a[]=c'), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a[]=b&a=c'), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a[0]=b&a=c'), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a=b&a[0]=c'), { a: ['b', 'c'] });\n\n        st.deepEqual(qs.parse('a[1]=b&a=c', { arrayLimit: 20 }), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a[]=b&a=c', { arrayLimit: 0 }), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a[]=b&a=c'), { a: ['b', 'c'] });\n\n        st.deepEqual(qs.parse('a=b&a[1]=c', { arrayLimit: 20 }), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a=b&a[]=c', { arrayLimit: 0 }), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a=b&a[]=c'), { a: ['b', 'c'] });\n\n        st.end();\n    });\n\n    t.test('parses a nested array', function (st) {\n        st.deepEqual(qs.parse('a[b][]=c&a[b][]=d'), { a: { b: ['c', 'd'] } });\n        st.deepEqual(qs.parse('a[>=]=25'), { a: { '>=': '25' } });\n        st.end();\n    });\n\n    t.test('allows to specify array indices', function (st) {\n        st.deepEqual(qs.parse('a[1]=c&a[0]=b&a[2]=d'), { a: ['b', 'c', 'd'] });\n        st.deepEqual(qs.parse('a[1]=c&a[0]=b'), { a: ['b', 'c'] });\n        st.deepEqual(qs.parse('a[1]=c', { arrayLimit: 20 }), { a: ['c'] });\n        st.deepEqual(qs.parse('a[1]=c', { arrayLimit: 0 }), { a: { 1: 'c' } });\n        st.deepEqual(qs.parse('a[1]=c'), { a: ['c'] });\n        st.end();\n    });\n\n    t.test('limits specific array indices to arrayLimit', function (st) {\n        st.deepEqual(qs.parse('a[20]=a', { arrayLimit: 20 }), { a: ['a'] });\n        st.deepEqual(qs.parse('a[21]=a', { arrayLimit: 20 }), { a: { 21: 'a' } });\n        st.end();\n    });\n\n    t.deepEqual(qs.parse('a[12b]=c'), { a: { '12b': 'c' } }, 'supports keys that begin with a number');\n\n    t.test('supports encoded = signs', function (st) {\n        st.deepEqual(qs.parse('he%3Dllo=th%3Dere'), { 'he=llo': 'th=ere' });\n        st.end();\n    });\n\n    t.test('is ok with url encoded strings', function (st) {\n        st.deepEqual(qs.parse('a[b%20c]=d'), { a: { 'b c': 'd' } });\n        st.deepEqual(qs.parse('a[b]=c%20d'), { a: { b: 'c d' } });\n        st.end();\n    });\n\n    t.test('allows brackets in the value', function (st) {\n        st.deepEqual(qs.parse('pets=[\"tobi\"]'), { pets: '[\"tobi\"]' });\n        st.deepEqual(qs.parse('operators=[\">=\", \"<=\"]'), { operators: '[\">=\", \"<=\"]' });\n        st.end();\n    });\n\n    t.test('allows empty values', function (st) {\n        st.deepEqual(qs.parse(''), {});\n        st.deepEqual(qs.parse(null), {});\n        st.deepEqual(qs.parse(undefined), {});\n        st.end();\n    });\n\n    t.test('transforms arrays to objects', function (st) {\n        st.deepEqual(qs.parse('foo[0]=bar&foo[bad]=baz'), { foo: { 0: 'bar', bad: 'baz' } });\n        st.deepEqual(qs.parse('foo[bad]=baz&foo[0]=bar'), { foo: { bad: 'baz', 0: 'bar' } });\n        st.deepEqual(qs.parse('foo[bad]=baz&foo[]=bar'), { foo: { bad: 'baz', 0: 'bar' } });\n        st.deepEqual(qs.parse('foo[]=bar&foo[bad]=baz'), { foo: { 0: 'bar', bad: 'baz' } });\n        st.deepEqual(qs.parse('foo[bad]=baz&foo[]=bar&foo[]=foo'), { foo: { bad: 'baz', 0: 'bar', 1: 'foo' } });\n        st.deepEqual(qs.parse('foo[0][a]=a&foo[0][b]=b&foo[1][a]=aa&foo[1][b]=bb'), { foo: [{ a: 'a', b: 'b' }, { a: 'aa', b: 'bb' }] });\n\n        st.deepEqual(qs.parse('a[]=b&a[t]=u&a[hasOwnProperty]=c', { allowPrototypes: false }), { a: { 0: 'b', t: 'u' } });\n        st.deepEqual(qs.parse('a[]=b&a[t]=u&a[hasOwnProperty]=c', { allowPrototypes: true }), { a: { 0: 'b', t: 'u', hasOwnProperty: 'c' } });\n        st.deepEqual(qs.parse('a[]=b&a[hasOwnProperty]=c&a[x]=y', { allowPrototypes: false }), { a: { 0: 'b', x: 'y' } });\n        st.deepEqual(qs.parse('a[]=b&a[hasOwnProperty]=c&a[x]=y', { allowPrototypes: true }), { a: { 0: 'b', hasOwnProperty: 'c', x: 'y' } });\n        st.end();\n    });\n\n    t.test('transforms arrays to objects (dot notation)', function (st) {\n        st.deepEqual(qs.parse('foo[0].baz=bar&fool.bad=baz', { allowDots: true }), { foo: [{ baz: 'bar' }], fool: { bad: 'baz' } });\n        st.deepEqual(qs.parse('foo[0].baz=bar&fool.bad.boo=baz', { allowDots: true }), { foo: [{ baz: 'bar' }], fool: { bad: { boo: 'baz' } } });\n        st.deepEqual(qs.parse('foo[0][0].baz=bar&fool.bad=baz', { allowDots: true }), { foo: [[{ baz: 'bar' }]], fool: { bad: 'baz' } });\n        st.deepEqual(qs.parse('foo[0].baz[0]=15&foo[0].bar=2', { allowDots: true }), { foo: [{ baz: ['15'], bar: '2' }] });\n        st.deepEqual(qs.parse('foo[0].baz[0]=15&foo[0].baz[1]=16&foo[0].bar=2', { allowDots: true }), { foo: [{ baz: ['15', '16'], bar: '2' }] });\n        st.deepEqual(qs.parse('foo.bad=baz&foo[0]=bar', { allowDots: true }), { foo: { bad: 'baz', 0: 'bar' } });\n        st.deepEqual(qs.parse('foo.bad=baz&foo[]=bar', { allowDots: true }), { foo: { bad: 'baz', 0: 'bar' } });\n        st.deepEqual(qs.parse('foo[]=bar&foo.bad=baz', { allowDots: true }), { foo: { 0: 'bar', bad: 'baz' } });\n        st.deepEqual(qs.parse('foo.bad=baz&foo[]=bar&foo[]=foo', { allowDots: true }), { foo: { bad: 'baz', 0: 'bar', 1: 'foo' } });\n        st.deepEqual(qs.parse('foo[0].a=a&foo[0].b=b&foo[1].a=aa&foo[1].b=bb', { allowDots: true }), { foo: [{ a: 'a', b: 'b' }, { a: 'aa', b: 'bb' }] });\n        st.end();\n    });\n\n    t.test('correctly prunes undefined values when converting an array to an object', function (st) {\n        st.deepEqual(qs.parse('a[2]=b&a[99999999]=c'), { a: { 2: 'b', 99999999: 'c' } });\n        st.end();\n    });\n\n    t.test('supports malformed uri characters', function (st) {\n        st.deepEqual(qs.parse('{%:%}', { strictNullHandling: true }), { '{%:%}': null });\n        st.deepEqual(qs.parse('{%:%}='), { '{%:%}': '' });\n        st.deepEqual(qs.parse('foo=%:%}'), { foo: '%:%}' });\n        st.end();\n    });\n\n    t.test('doesn\\'t produce empty keys', function (st) {\n        st.deepEqual(qs.parse('_r=1&'), { _r: '1' });\n        st.end();\n    });\n\n    t.test('cannot access Object prototype', function (st) {\n        qs.parse('constructor[prototype][bad]=bad');\n        qs.parse('bad[constructor][prototype][bad]=bad');\n        st.equal(typeof Object.prototype.bad, 'undefined');\n        st.end();\n    });\n\n    t.test('parses arrays of objects', function (st) {\n        st.deepEqual(qs.parse('a[][b]=c'), { a: [{ b: 'c' }] });\n        st.deepEqual(qs.parse('a[0][b]=c'), { a: [{ b: 'c' }] });\n        st.end();\n    });\n\n    t.test('allows for empty strings in arrays', function (st) {\n        st.deepEqual(qs.parse('a[]=b&a[]=&a[]=c'), { a: ['b', '', 'c'] });\n\n        st.deepEqual(\n            qs.parse('a[0]=b&a[1]&a[2]=c&a[19]=', { strictNullHandling: true, arrayLimit: 20 }),\n            { a: ['b', null, 'c', ''] },\n            'with arrayLimit 20 + array indices: null then empty string works'\n        );\n        st.deepEqual(\n            qs.parse('a[]=b&a[]&a[]=c&a[]=', { strictNullHandling: true, arrayLimit: 0 }),\n            { a: ['b', null, 'c', ''] },\n            'with arrayLimit 0 + array brackets: null then empty string works'\n        );\n\n        st.deepEqual(\n            qs.parse('a[0]=b&a[1]=&a[2]=c&a[19]', { strictNullHandling: true, arrayLimit: 20 }),\n            { a: ['b', '', 'c', null] },\n            'with arrayLimit 20 + array indices: empty string then null works'\n        );\n        st.deepEqual(\n            qs.parse('a[]=b&a[]=&a[]=c&a[]', { strictNullHandling: true, arrayLimit: 0 }),\n            { a: ['b', '', 'c', null] },\n            'with arrayLimit 0 + array brackets: empty string then null works'\n        );\n\n        st.deepEqual(\n            qs.parse('a[]=&a[]=b&a[]=c'),\n            { a: ['', 'b', 'c'] },\n            'array brackets: empty strings work'\n        );\n        st.end();\n    });\n\n    t.test('compacts sparse arrays', function (st) {\n        st.deepEqual(qs.parse('a[10]=1&a[2]=2', { arrayLimit: 20 }), { a: ['2', '1'] });\n        st.deepEqual(qs.parse('a[1][b][2][c]=1', { arrayLimit: 20 }), { a: [{ b: [{ c: '1' }] }] });\n        st.deepEqual(qs.parse('a[1][2][3][c]=1', { arrayLimit: 20 }), { a: [[[{ c: '1' }]]] });\n        st.deepEqual(qs.parse('a[1][2][3][c][1]=1', { arrayLimit: 20 }), { a: [[[{ c: ['1'] }]]] });\n        st.end();\n    });\n\n    t.test('parses semi-parsed strings', function (st) {\n        st.deepEqual(qs.parse({ 'a[b]': 'c' }), { a: { b: 'c' } });\n        st.deepEqual(qs.parse({ 'a[b]': 'c', 'a[d]': 'e' }), { a: { b: 'c', d: 'e' } });\n        st.end();\n    });\n\n    t.test('parses buffers correctly', function (st) {\n        var b = SaferBuffer.from('test');\n        st.deepEqual(qs.parse({ a: b }), { a: b });\n        st.end();\n    });\n\n    t.test('continues parsing when no parent is found', function (st) {\n        st.deepEqual(qs.parse('[]=&a=b'), { 0: '', a: 'b' });\n        st.deepEqual(qs.parse('[]&a=b', { strictNullHandling: true }), { 0: null, a: 'b' });\n        st.deepEqual(qs.parse('[foo]=bar'), { foo: 'bar' });\n        st.end();\n    });\n\n    t.test('does not error when parsing a very long array', function (st) {\n        var str = 'a[]=a';\n        while (Buffer.byteLength(str) < 128 * 1024) {\n            str = str + '&' + str;\n        }\n\n        st.doesNotThrow(function () {\n            qs.parse(str);\n        });\n\n        st.end();\n    });\n\n    t.test('should not throw when a native prototype has an enumerable property', { parallel: false }, function (st) {\n        Object.prototype.crash = '';\n        Array.prototype.crash = '';\n        st.doesNotThrow(qs.parse.bind(null, 'a=b'));\n        st.deepEqual(qs.parse('a=b'), { a: 'b' });\n        st.doesNotThrow(qs.parse.bind(null, 'a[][b]=c'));\n        st.deepEqual(qs.parse('a[][b]=c'), { a: [{ b: 'c' }] });\n        delete Object.prototype.crash;\n        delete Array.prototype.crash;\n        st.end();\n    });\n\n    t.test('parses a string with an alternative string delimiter', function (st) {\n        st.deepEqual(qs.parse('a=b;c=d', { delimiter: ';' }), { a: 'b', c: 'd' });\n        st.end();\n    });\n\n    t.test('parses a string with an alternative RegExp delimiter', function (st) {\n        st.deepEqual(qs.parse('a=b; c=d', { delimiter: /[;,] */ }), { a: 'b', c: 'd' });\n        st.end();\n    });\n\n    t.test('does not use non-splittable objects as delimiters', function (st) {\n        st.deepEqual(qs.parse('a=b&c=d', { delimiter: true }), { a: 'b', c: 'd' });\n        st.end();\n    });\n\n    t.test('allows overriding parameter limit', function (st) {\n        st.deepEqual(qs.parse('a=b&c=d', { parameterLimit: 1 }), { a: 'b' });\n        st.end();\n    });\n\n    t.test('allows setting the parameter limit to Infinity', function (st) {\n        st.deepEqual(qs.parse('a=b&c=d', { parameterLimit: Infinity }), { a: 'b', c: 'd' });\n        st.end();\n    });\n\n    t.test('allows overriding array limit', function (st) {\n        st.deepEqual(qs.parse('a[0]=b', { arrayLimit: -1 }), { a: { 0: 'b' } });\n        st.deepEqual(qs.parse('a[-1]=b', { arrayLimit: -1 }), { a: { '-1': 'b' } });\n        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayLimit: 0 }), { a: { 0: 'b', 1: 'c' } });\n        st.end();\n    });\n\n    t.test('allows disabling array parsing', function (st) {\n        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { parseArrays: false }), { a: { 0: 'b', 1: 'c' } });\n        st.end();\n    });\n\n    t.test('allows for query string prefix', function (st) {\n        st.deepEqual(qs.parse('?foo=bar', { ignoreQueryPrefix: true }), { foo: 'bar' });\n        st.deepEqual(qs.parse('foo=bar', { ignoreQueryPrefix: true }), { foo: 'bar' });\n        st.deepEqual(qs.parse('?foo=bar', { ignoreQueryPrefix: false }), { '?foo': 'bar' });\n        st.end();\n    });\n\n    t.test('parses an object', function (st) {\n        var input = {\n            'user[name]': { 'pop[bob]': 3 },\n            'user[email]': null\n        };\n\n        var expected = {\n            user: {\n                name: { 'pop[bob]': 3 },\n                email: null\n            }\n        };\n\n        var result = qs.parse(input);\n\n        st.deepEqual(result, expected);\n        st.end();\n    });\n\n    t.test('parses an object in dot notation', function (st) {\n        var input = {\n            'user.name': { 'pop[bob]': 3 },\n            'user.email.': null\n        };\n\n        var expected = {\n            user: {\n                name: { 'pop[bob]': 3 },\n                email: null\n            }\n        };\n\n        var result = qs.parse(input, { allowDots: true });\n\n        st.deepEqual(result, expected);\n        st.end();\n    });\n\n    t.test('parses an object and not child values', function (st) {\n        var input = {\n            'user[name]': { 'pop[bob]': { test: 3 } },\n            'user[email]': null\n        };\n\n        var expected = {\n            user: {\n                name: { 'pop[bob]': { test: 3 } },\n                email: null\n            }\n        };\n\n        var result = qs.parse(input);\n\n        st.deepEqual(result, expected);\n        st.end();\n    });\n\n    t.test('does not blow up when Buffer global is missing', function (st) {\n        var tempBuffer = global.Buffer;\n        delete global.Buffer;\n        var result = qs.parse('a=b&c=d');\n        global.Buffer = tempBuffer;\n        st.deepEqual(result, { a: 'b', c: 'd' });\n        st.end();\n    });\n\n    t.test('does not crash when parsing circular references', function (st) {\n        var a = {};\n        a.b = a;\n\n        var parsed;\n\n        st.doesNotThrow(function () {\n            parsed = qs.parse({ 'foo[bar]': 'baz', 'foo[baz]': a });\n        });\n\n        st.equal('foo' in parsed, true, 'parsed has \"foo\" property');\n        st.equal('bar' in parsed.foo, true);\n        st.equal('baz' in parsed.foo, true);\n        st.equal(parsed.foo.bar, 'baz');\n        st.deepEqual(parsed.foo.baz, a);\n        st.end();\n    });\n\n    t.test('does not crash when parsing deep objects', function (st) {\n        var parsed;\n        var str = 'foo';\n\n        for (var i = 0; i < 5000; i++) {\n            str += '[p]';\n        }\n\n        str += '=bar';\n\n        st.doesNotThrow(function () {\n            parsed = qs.parse(str, { depth: 5000 });\n        });\n\n        st.equal('foo' in parsed, true, 'parsed has \"foo\" property');\n\n        var depth = 0;\n        var ref = parsed.foo;\n        while ((ref = ref.p)) {\n            depth += 1;\n        }\n\n        st.equal(depth, 5000, 'parsed is 5000 properties deep');\n\n        st.end();\n    });\n\n    t.test('parses null objects correctly', { skip: !Object.create }, function (st) {\n        var a = Object.create(null);\n        a.b = 'c';\n\n        st.deepEqual(qs.parse(a), { b: 'c' });\n        var result = qs.parse({ a: a });\n        st.equal('a' in result, true, 'result has \"a\" property');\n        st.deepEqual(result.a, a);\n        st.end();\n    });\n\n    t.test('parses dates correctly', function (st) {\n        var now = new Date();\n        st.deepEqual(qs.parse({ a: now }), { a: now });\n        st.end();\n    });\n\n    t.test('parses regular expressions correctly', function (st) {\n        var re = /^test$/;\n        st.deepEqual(qs.parse({ a: re }), { a: re });\n        st.end();\n    });\n\n    t.test('does not allow overwriting prototype properties', function (st) {\n        st.deepEqual(qs.parse('a[hasOwnProperty]=b', { allowPrototypes: false }), {});\n        st.deepEqual(qs.parse('hasOwnProperty=b', { allowPrototypes: false }), {});\n\n        st.deepEqual(\n            qs.parse('toString', { allowPrototypes: false }),\n            {},\n            'bare \"toString\" results in {}'\n        );\n\n        st.end();\n    });\n\n    t.test('can allow overwriting prototype properties', function (st) {\n        st.deepEqual(qs.parse('a[hasOwnProperty]=b', { allowPrototypes: true }), { a: { hasOwnProperty: 'b' } });\n        st.deepEqual(qs.parse('hasOwnProperty=b', { allowPrototypes: true }), { hasOwnProperty: 'b' });\n\n        st.deepEqual(\n            qs.parse('toString', { allowPrototypes: true }),\n            { toString: '' },\n            'bare \"toString\" results in { toString: \"\" }'\n        );\n\n        st.end();\n    });\n\n    t.test('params starting with a closing bracket', function (st) {\n        st.deepEqual(qs.parse(']=toString'), { ']': 'toString' });\n        st.deepEqual(qs.parse(']]=toString'), { ']]': 'toString' });\n        st.deepEqual(qs.parse(']hello]=toString'), { ']hello]': 'toString' });\n        st.end();\n    });\n\n    t.test('params starting with a starting bracket', function (st) {\n        st.deepEqual(qs.parse('[=toString'), { '[': 'toString' });\n        st.deepEqual(qs.parse('[[=toString'), { '[[': 'toString' });\n        st.deepEqual(qs.parse('[hello[=toString'), { '[hello[': 'toString' });\n        st.end();\n    });\n\n    t.test('add keys to objects', function (st) {\n        st.deepEqual(\n            qs.parse('a[b]=c&a=d'),\n            { a: { b: 'c', d: true } },\n            'can add keys to objects'\n        );\n\n        st.deepEqual(\n            qs.parse('a[b]=c&a=toString'),\n            { a: { b: 'c' } },\n            'can not overwrite prototype'\n        );\n\n        st.deepEqual(\n            qs.parse('a[b]=c&a=toString', { allowPrototypes: true }),\n            { a: { b: 'c', toString: true } },\n            'can overwrite prototype with allowPrototypes true'\n        );\n\n        st.deepEqual(\n            qs.parse('a[b]=c&a=toString', { plainObjects: true }),\n            { a: { b: 'c', toString: true } },\n            'can overwrite prototype with plainObjects true'\n        );\n\n        st.end();\n    });\n\n    t.test('can return null objects', { skip: !Object.create }, function (st) {\n        var expected = Object.create(null);\n        expected.a = Object.create(null);\n        expected.a.b = 'c';\n        expected.a.hasOwnProperty = 'd';\n        st.deepEqual(qs.parse('a[b]=c&a[hasOwnProperty]=d', { plainObjects: true }), expected);\n        st.deepEqual(qs.parse(null, { plainObjects: true }), Object.create(null));\n        var expectedArray = Object.create(null);\n        expectedArray.a = Object.create(null);\n        expectedArray.a[0] = 'b';\n        expectedArray.a.c = 'd';\n        st.deepEqual(qs.parse('a[]=b&a[c]=d', { plainObjects: true }), expectedArray);\n        st.end();\n    });\n\n    t.test('can parse with custom encoding', function (st) {\n        st.deepEqual(qs.parse('%8c%a7=%91%e5%8d%e3%95%7b', {\n            decoder: function (str) {\n                var reg = /%([0-9A-F]{2})/ig;\n                var result = [];\n                var parts = reg.exec(str);\n                while (parts) {\n                    result.push(parseInt(parts[1], 16));\n                    parts = reg.exec(str);\n                }\n                return iconv.decode(SaferBuffer.from(result), 'shift_jis').toString();\n            }\n        }), { 県: '大阪府' });\n        st.end();\n    });\n\n    t.test('receives the default decoder as a second argument', function (st) {\n        st.plan(1);\n        qs.parse('a', {\n            decoder: function (str, defaultDecoder) {\n                st.equal(defaultDecoder, utils.decode);\n            }\n        });\n        st.end();\n    });\n\n    t.test('throws error with wrong decoder', function (st) {\n        st['throws'](function () {\n            qs.parse({}, { decoder: 'string' });\n        }, new TypeError('Decoder has to be a function.'));\n        st.end();\n    });\n\n    t.test('does not mutate the options argument', function (st) {\n        var options = {};\n        qs.parse('a[b]=true', options);\n        st.deepEqual(options, {});\n        st.end();\n    });\n\n    t.end();\n});\n"]},"metadata":{},"sourceType":"script"}