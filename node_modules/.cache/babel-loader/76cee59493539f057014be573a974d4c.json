{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\n\nconst utils = require('../');\n\ndescribe('utils', () => {\n  it('should convert to array', () => {\n    assert.deepEqual(utils.toArray('1234', 'hex'), [0x12, 0x34]);\n    assert.deepEqual(utils.toArray('1234'), [49, 50, 51, 52]);\n    assert.deepEqual(utils.toArray('1234', 'utf8'), [49, 50, 51, 52]);\n    assert.deepEqual(utils.toArray('\\u1234234'), [18, 52, 50, 51, 52]);\n    assert.deepEqual(utils.toArray([1, 2, 3, 4]), [1, 2, 3, 4]);\n  });\n  it('should zero pad byte to hex', () => {\n    assert.equal(utils.zero2('0'), '00');\n    assert.equal(utils.zero2('01'), '01');\n  });\n  it('should convert to hex', () => {\n    assert.equal(utils.toHex([0, 1, 2, 3]), '00010203');\n  });\n  it('should encode', () => {\n    assert.deepEqual(utils.encode([0, 1, 2, 3]), [0, 1, 2, 3]);\n    assert.deepEqual(utils.encode([0, 1, 2, 3], 'hex'), '00010203');\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/minimalistic-crypto-utils/test/utils-test.js"],"names":["assert","require","utils","describe","it","deepEqual","toArray","equal","zero2","toHex","encode"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,KAAD,CAArB;;AAEAE,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,EAAAA,EAAE,CAAC,yBAAD,EAA4B,MAAM;AAClCJ,IAAAA,MAAM,CAACK,SAAP,CAAiBH,KAAK,CAACI,OAAN,CAAc,MAAd,EAAsB,KAAtB,CAAjB,EAA+C,CAAE,IAAF,EAAQ,IAAR,CAA/C;AACAN,IAAAA,MAAM,CAACK,SAAP,CAAiBH,KAAK,CAACI,OAAN,CAAc,MAAd,CAAjB,EAAwC,CAAE,EAAF,EAAM,EAAN,EAAU,EAAV,EAAc,EAAd,CAAxC;AACAN,IAAAA,MAAM,CAACK,SAAP,CAAiBH,KAAK,CAACI,OAAN,CAAc,MAAd,EAAsB,MAAtB,CAAjB,EAAgD,CAAE,EAAF,EAAM,EAAN,EAAU,EAAV,EAAc,EAAd,CAAhD;AACAN,IAAAA,MAAM,CAACK,SAAP,CAAiBH,KAAK,CAACI,OAAN,CAAc,WAAd,CAAjB,EAA6C,CAAE,EAAF,EAAM,EAAN,EAAU,EAAV,EAAc,EAAd,EAAkB,EAAlB,CAA7C;AACAN,IAAAA,MAAM,CAACK,SAAP,CAAiBH,KAAK,CAACI,OAAN,CAAc,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAd,CAAjB,EAAgD,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAhD;AACD,GANC,CAAF;AAQAF,EAAAA,EAAE,CAAC,6BAAD,EAAgC,MAAM;AACtCJ,IAAAA,MAAM,CAACO,KAAP,CAAaL,KAAK,CAACM,KAAN,CAAY,GAAZ,CAAb,EAA+B,IAA/B;AACAR,IAAAA,MAAM,CAACO,KAAP,CAAaL,KAAK,CAACM,KAAN,CAAY,IAAZ,CAAb,EAAgC,IAAhC;AACD,GAHC,CAAF;AAKAJ,EAAAA,EAAE,CAAC,uBAAD,EAA0B,MAAM;AAChCJ,IAAAA,MAAM,CAACO,KAAP,CAAaL,KAAK,CAACO,KAAN,CAAY,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAZ,CAAb,EAA0C,UAA1C;AACD,GAFC,CAAF;AAIAL,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACxBJ,IAAAA,MAAM,CAACK,SAAP,CAAiBH,KAAK,CAACQ,MAAN,CAAa,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAb,CAAjB,EAA+C,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAA/C;AACAV,IAAAA,MAAM,CAACK,SAAP,CAAiBH,KAAK,CAACQ,MAAN,CAAa,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAb,EAA6B,KAA7B,CAAjB,EAAsD,UAAtD;AACD,GAHC,CAAF;AAID,CAtBO,CAAR","sourcesContent":["'use strict';\n\nconst assert = require('assert');\nconst utils = require('../');\n\ndescribe('utils', () => {\n  it('should convert to array', () => {\n    assert.deepEqual(utils.toArray('1234', 'hex'), [ 0x12, 0x34 ]);\n    assert.deepEqual(utils.toArray('1234'), [ 49, 50, 51, 52 ]);\n    assert.deepEqual(utils.toArray('1234', 'utf8'), [ 49, 50, 51, 52 ]);\n    assert.deepEqual(utils.toArray('\\u1234234'), [ 18, 52, 50, 51, 52 ]);\n    assert.deepEqual(utils.toArray([ 1, 2, 3, 4 ]), [ 1, 2, 3, 4 ]);\n  });\n\n  it('should zero pad byte to hex', () => {\n    assert.equal(utils.zero2('0'), '00');\n    assert.equal(utils.zero2('01'), '01');\n  });\n\n  it('should convert to hex', () => {\n    assert.equal(utils.toHex([ 0, 1, 2, 3 ]), '00010203');\n  });\n\n  it('should encode', () => {\n    assert.deepEqual(utils.encode([ 0, 1, 2, 3 ]), [ 0, 1, 2, 3 ]);\n    assert.deepEqual(utils.encode([ 0, 1, 2, 3 ], 'hex'), '00010203');\n  });\n});\n"]},"metadata":{},"sourceType":"script"}