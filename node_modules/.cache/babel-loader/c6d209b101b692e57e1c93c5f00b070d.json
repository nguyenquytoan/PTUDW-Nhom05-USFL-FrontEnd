{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stylehacks = require('stylehacks');\n\nvar _canMerge = require('../canMerge');\n\nvar _canMerge2 = _interopRequireDefault(_canMerge);\n\nvar _getDecls = require('../getDecls');\n\nvar _getDecls2 = _interopRequireDefault(_getDecls);\n\nvar _minifyTrbl = require('../minifyTrbl');\n\nvar _minifyTrbl2 = _interopRequireDefault(_minifyTrbl);\n\nvar _parseTrbl = require('../parseTrbl');\n\nvar _parseTrbl2 = _interopRequireDefault(_parseTrbl);\n\nvar _insertCloned = require('../insertCloned');\n\nvar _insertCloned2 = _interopRequireDefault(_insertCloned);\n\nvar _mergeRules = require('../mergeRules');\n\nvar _mergeRules2 = _interopRequireDefault(_mergeRules);\n\nvar _mergeValues = require('../mergeValues');\n\nvar _mergeValues2 = _interopRequireDefault(_mergeValues);\n\nvar _remove = require('../remove');\n\nvar _remove2 = _interopRequireDefault(_remove);\n\nvar _trbl = require('../trbl');\n\nvar _trbl2 = _interopRequireDefault(_trbl);\n\nvar _isCustomProp = require('../isCustomProp');\n\nvar _isCustomProp2 = _interopRequireDefault(_isCustomProp);\n\nvar _canExplode = require('../canExplode');\n\nvar _canExplode2 = _interopRequireDefault(_canExplode);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexports.default = prop => {\n  const properties = _trbl2.default.map(direction => `${prop}-${direction}`);\n\n  const cleanup = rule => {\n    let decls = (0, _getDecls2.default)(rule, [prop].concat(properties));\n\n    while (decls.length) {\n      const lastNode = decls[decls.length - 1]; // remove properties of lower precedence\n\n      const lesser = decls.filter(node => !(0, _stylehacks.detect)(lastNode) && !(0, _stylehacks.detect)(node) && node !== lastNode && node.important === lastNode.important && lastNode.prop === prop && node.prop !== lastNode.prop);\n      lesser.forEach(_remove2.default);\n      decls = decls.filter(node => !~lesser.indexOf(node)); // get duplicate properties\n\n      let duplicates = decls.filter(node => !(0, _stylehacks.detect)(lastNode) && !(0, _stylehacks.detect)(node) && node !== lastNode && node.important === lastNode.important && node.prop === lastNode.prop && !(!(0, _isCustomProp2.default)(node) && (0, _isCustomProp2.default)(lastNode)));\n      duplicates.forEach(_remove2.default);\n      decls = decls.filter(node => node !== lastNode && !~duplicates.indexOf(node));\n    }\n  };\n\n  const processor = {\n    explode: rule => {\n      rule.walkDecls(new RegExp(\"^\" + prop + \"$\", \"i\"), decl => {\n        if (!(0, _canExplode2.default)(decl)) {\n          return;\n        }\n\n        if ((0, _stylehacks.detect)(decl)) {\n          return;\n        }\n\n        const values = (0, _parseTrbl2.default)(decl.value);\n\n        _trbl2.default.forEach((direction, index) => {\n          (0, _insertCloned2.default)(decl.parent, decl, {\n            prop: properties[index],\n            value: values[index]\n          });\n        });\n\n        decl.remove();\n      });\n    },\n    merge: rule => {\n      (0, _mergeRules2.default)(rule, properties, (rules, lastNode) => {\n        if ((0, _canMerge2.default)(rules) && !rules.some(_stylehacks.detect)) {\n          (0, _insertCloned2.default)(lastNode.parent, lastNode, {\n            prop,\n            value: (0, _minifyTrbl2.default)((0, _mergeValues2.default)(...rules))\n          });\n          rules.forEach(_remove2.default);\n          return true;\n        }\n      });\n      cleanup(rule);\n    }\n  };\n  return processor;\n};\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-merge-longhand/dist/lib/decl/boxBase.js"],"names":["Object","defineProperty","exports","value","_stylehacks","require","_canMerge","_canMerge2","_interopRequireDefault","_getDecls","_getDecls2","_minifyTrbl","_minifyTrbl2","_parseTrbl","_parseTrbl2","_insertCloned","_insertCloned2","_mergeRules","_mergeRules2","_mergeValues","_mergeValues2","_remove","_remove2","_trbl","_trbl2","_isCustomProp","_isCustomProp2","_canExplode","_canExplode2","obj","__esModule","default","prop","properties","map","direction","cleanup","rule","decls","concat","length","lastNode","lesser","filter","node","detect","important","forEach","indexOf","duplicates","processor","explode","walkDecls","RegExp","decl","values","index","parent","remove","merge","rules","some","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _stylehacks = require('stylehacks');\n\nvar _canMerge = require('../canMerge');\n\nvar _canMerge2 = _interopRequireDefault(_canMerge);\n\nvar _getDecls = require('../getDecls');\n\nvar _getDecls2 = _interopRequireDefault(_getDecls);\n\nvar _minifyTrbl = require('../minifyTrbl');\n\nvar _minifyTrbl2 = _interopRequireDefault(_minifyTrbl);\n\nvar _parseTrbl = require('../parseTrbl');\n\nvar _parseTrbl2 = _interopRequireDefault(_parseTrbl);\n\nvar _insertCloned = require('../insertCloned');\n\nvar _insertCloned2 = _interopRequireDefault(_insertCloned);\n\nvar _mergeRules = require('../mergeRules');\n\nvar _mergeRules2 = _interopRequireDefault(_mergeRules);\n\nvar _mergeValues = require('../mergeValues');\n\nvar _mergeValues2 = _interopRequireDefault(_mergeValues);\n\nvar _remove = require('../remove');\n\nvar _remove2 = _interopRequireDefault(_remove);\n\nvar _trbl = require('../trbl');\n\nvar _trbl2 = _interopRequireDefault(_trbl);\n\nvar _isCustomProp = require('../isCustomProp');\n\nvar _isCustomProp2 = _interopRequireDefault(_isCustomProp);\n\nvar _canExplode = require('../canExplode');\n\nvar _canExplode2 = _interopRequireDefault(_canExplode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = prop => {\n    const properties = _trbl2.default.map(direction => `${prop}-${direction}`);\n\n    const cleanup = rule => {\n        let decls = (0, _getDecls2.default)(rule, [prop].concat(properties));\n\n        while (decls.length) {\n            const lastNode = decls[decls.length - 1];\n\n            // remove properties of lower precedence\n            const lesser = decls.filter(node => !(0, _stylehacks.detect)(lastNode) && !(0, _stylehacks.detect)(node) && node !== lastNode && node.important === lastNode.important && lastNode.prop === prop && node.prop !== lastNode.prop);\n\n            lesser.forEach(_remove2.default);\n            decls = decls.filter(node => !~lesser.indexOf(node));\n\n            // get duplicate properties\n            let duplicates = decls.filter(node => !(0, _stylehacks.detect)(lastNode) && !(0, _stylehacks.detect)(node) && node !== lastNode && node.important === lastNode.important && node.prop === lastNode.prop && !(!(0, _isCustomProp2.default)(node) && (0, _isCustomProp2.default)(lastNode)));\n\n            duplicates.forEach(_remove2.default);\n            decls = decls.filter(node => node !== lastNode && !~duplicates.indexOf(node));\n        }\n    };\n\n    const processor = {\n        explode: rule => {\n            rule.walkDecls(new RegExp(\"^\" + prop + \"$\", \"i\"), decl => {\n                if (!(0, _canExplode2.default)(decl)) {\n                    return;\n                }\n\n                if ((0, _stylehacks.detect)(decl)) {\n                    return;\n                }\n\n                const values = (0, _parseTrbl2.default)(decl.value);\n\n                _trbl2.default.forEach((direction, index) => {\n                    (0, _insertCloned2.default)(decl.parent, decl, {\n                        prop: properties[index],\n                        value: values[index]\n                    });\n                });\n\n                decl.remove();\n            });\n        },\n        merge: rule => {\n            (0, _mergeRules2.default)(rule, properties, (rules, lastNode) => {\n                if ((0, _canMerge2.default)(rules) && !rules.some(_stylehacks.detect)) {\n                    (0, _insertCloned2.default)(lastNode.parent, lastNode, {\n                        prop,\n                        value: (0, _minifyTrbl2.default)((0, _mergeValues2.default)(...rules))\n                    });\n                    rules.forEach(_remove2.default);\n\n                    return true;\n                }\n            });\n\n            cleanup(rule);\n        }\n    };\n\n    return processor;\n};\n\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}