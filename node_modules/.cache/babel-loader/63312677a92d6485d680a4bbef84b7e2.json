{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = defaultResolver;\nexports.clearDefaultResolverCache = void 0;\n\nfunction _fs() {\n  const data = _interopRequireDefault(require('fs'));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _browserResolve() {\n  const data = _interopRequireDefault(require('browser-resolve'));\n\n  _browserResolve = function _browserResolve() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestPnpResolver() {\n  const data = _interopRequireDefault(require('jest-pnp-resolver'));\n\n  _jestPnpResolver = function _jestPnpResolver() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _isBuiltinModule = _interopRequireDefault(require('./isBuiltinModule'));\n\nvar _nodeModulesPaths = _interopRequireDefault(require('./nodeModulesPaths'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nfunction defaultResolver(path, options) {\n  // @ts-ignore: the \"pnp\" version named isn't in DefinitelyTyped\n  if (process.versions.pnp) {\n    return (0, _jestPnpResolver().default)(path, options);\n  }\n\n  const resolve = options.browser ? _browserResolve().default.sync : resolveSync;\n  return resolve(path, {\n    basedir: options.basedir,\n    defaultResolver,\n    extensions: options.extensions,\n    moduleDirectory: options.moduleDirectory,\n    paths: options.paths,\n    rootDir: options.rootDir\n  });\n}\n\nconst clearDefaultResolverCache = () => {\n  checkedPaths.clear();\n};\n\nexports.clearDefaultResolverCache = clearDefaultResolverCache;\nconst REGEX_RELATIVE_IMPORT = /^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[\\\\\\/])/;\n\nfunction resolveSync(target, options) {\n  const basedir = options.basedir;\n  const extensions = options.extensions || ['.js'];\n  const paths = options.paths || [];\n\n  if (REGEX_RELATIVE_IMPORT.test(target)) {\n    // resolve relative import\n    const resolveTarget = _path().default.resolve(basedir, target);\n\n    const result = tryResolve(resolveTarget);\n\n    if (result) {\n      return result;\n    }\n  } else {\n    // otherwise search for node_modules\n    const dirs = (0, _nodeModulesPaths.default)(basedir, {\n      moduleDirectory: options.moduleDirectory,\n      paths\n    });\n\n    for (let i = 0; i < dirs.length; i++) {\n      const resolveTarget = _path().default.join(dirs[i], target);\n\n      const result = tryResolve(resolveTarget);\n\n      if (result) {\n        return result;\n      }\n    }\n  }\n\n  if ((0, _isBuiltinModule.default)(target)) {\n    return target;\n  }\n\n  const err = new Error(\"Cannot find module '\" + target + \"' from '\" + basedir + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n  /*\n   * contextual helper functions\n   */\n\n  function tryResolve(name) {\n    const dir = _path().default.dirname(name);\n\n    let result;\n\n    if (isDirectory(dir)) {\n      result = resolveAsFile(name) || resolveAsDirectory(name);\n    }\n\n    if (result) {\n      // Dereference symlinks to ensure we don't create a separate\n      // module instance depending on how it was referenced.\n      result = _fs().default.realpathSync(result);\n    }\n\n    return result;\n  }\n\n  function resolveAsFile(name) {\n    if (isFile(name)) {\n      return name;\n    }\n\n    for (let i = 0; i < extensions.length; i++) {\n      const file = name + extensions[i];\n\n      if (isFile(file)) {\n        return file;\n      }\n    }\n\n    return undefined;\n  }\n\n  function resolveAsDirectory(name) {\n    if (!isDirectory(name)) {\n      return undefined;\n    }\n\n    const pkgfile = _path().default.join(name, 'package.json');\n\n    let pkgmain;\n\n    try {\n      const body = _fs().default.readFileSync(pkgfile, 'utf8');\n\n      pkgmain = JSON.parse(body).main;\n    } catch (e) {}\n\n    if (pkgmain && !isCurrentDirectory(pkgmain)) {\n      const resolveTarget = _path().default.resolve(name, pkgmain);\n\n      const result = tryResolve(resolveTarget);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    return resolveAsFile(_path().default.join(name, 'index'));\n  }\n}\n\nvar IPathType;\n\n(function (IPathType) {\n  IPathType[IPathType['FILE'] = 1] = 'FILE';\n  IPathType[IPathType['DIRECTORY'] = 2] = 'DIRECTORY';\n  IPathType[IPathType['OTHER'] = 3] = 'OTHER';\n})(IPathType || (IPathType = {}));\n\nconst checkedPaths = new Map();\n\nfunction statSyncCached(path) {\n  const result = checkedPaths.get(path);\n\n  if (result !== undefined) {\n    return result;\n  }\n\n  let stat;\n\n  try {\n    stat = _fs().default.statSync(path);\n  } catch (e) {\n    if (!(e && (e.code === 'ENOENT' || e.code === 'ENOTDIR'))) {\n      throw e;\n    }\n  }\n\n  if (stat) {\n    if (stat.isFile() || stat.isFIFO()) {\n      checkedPaths.set(path, IPathType.FILE);\n      return IPathType.FILE;\n    } else if (stat.isDirectory()) {\n      checkedPaths.set(path, IPathType.DIRECTORY);\n      return IPathType.DIRECTORY;\n    }\n  }\n\n  checkedPaths.set(path, IPathType.OTHER);\n  return IPathType.OTHER;\n}\n/*\n * helper functions\n */\n\n\nfunction isFile(file) {\n  return statSyncCached(file) === IPathType.FILE;\n}\n\nfunction isDirectory(dir) {\n  return statSyncCached(dir) === IPathType.DIRECTORY;\n}\n\nconst CURRENT_DIRECTORY = _path().default.resolve('.');\n\nfunction isCurrentDirectory(testPath) {\n  return CURRENT_DIRECTORY === _path().default.resolve(testPath);\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-resolve/build/defaultResolver.js"],"names":["Object","defineProperty","exports","value","default","defaultResolver","clearDefaultResolverCache","_fs","data","_interopRequireDefault","require","_path","_browserResolve","_jestPnpResolver","_isBuiltinModule","_nodeModulesPaths","obj","__esModule","path","options","process","versions","pnp","resolve","browser","sync","resolveSync","basedir","extensions","moduleDirectory","paths","rootDir","checkedPaths","clear","REGEX_RELATIVE_IMPORT","target","test","resolveTarget","result","tryResolve","dirs","i","length","join","err","Error","code","name","dir","dirname","isDirectory","resolveAsFile","resolveAsDirectory","realpathSync","isFile","file","undefined","pkgfile","pkgmain","body","readFileSync","JSON","parse","main","e","isCurrentDirectory","IPathType","Map","statSyncCached","get","stat","statSync","isFIFO","set","FILE","DIRECTORY","OTHER","CURRENT_DIRECTORY","testPath"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = defaultResolver;\nexports.clearDefaultResolverCache = void 0;\n\nfunction _fs() {\n  const data = _interopRequireDefault(require('fs'));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _browserResolve() {\n  const data = _interopRequireDefault(require('browser-resolve'));\n\n  _browserResolve = function _browserResolve() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestPnpResolver() {\n  const data = _interopRequireDefault(require('jest-pnp-resolver'));\n\n  _jestPnpResolver = function _jestPnpResolver() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _isBuiltinModule = _interopRequireDefault(require('./isBuiltinModule'));\n\nvar _nodeModulesPaths = _interopRequireDefault(require('./nodeModulesPaths'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nfunction defaultResolver(path, options) {\n  // @ts-ignore: the \"pnp\" version named isn't in DefinitelyTyped\n  if (process.versions.pnp) {\n    return (0, _jestPnpResolver().default)(path, options);\n  }\n\n  const resolve = options.browser\n    ? _browserResolve().default.sync\n    : resolveSync;\n  return resolve(path, {\n    basedir: options.basedir,\n    defaultResolver,\n    extensions: options.extensions,\n    moduleDirectory: options.moduleDirectory,\n    paths: options.paths,\n    rootDir: options.rootDir\n  });\n}\n\nconst clearDefaultResolverCache = () => {\n  checkedPaths.clear();\n};\n\nexports.clearDefaultResolverCache = clearDefaultResolverCache;\nconst REGEX_RELATIVE_IMPORT = /^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[\\\\\\/])/;\n\nfunction resolveSync(target, options) {\n  const basedir = options.basedir;\n  const extensions = options.extensions || ['.js'];\n  const paths = options.paths || [];\n\n  if (REGEX_RELATIVE_IMPORT.test(target)) {\n    // resolve relative import\n    const resolveTarget = _path().default.resolve(basedir, target);\n\n    const result = tryResolve(resolveTarget);\n\n    if (result) {\n      return result;\n    }\n  } else {\n    // otherwise search for node_modules\n    const dirs = (0, _nodeModulesPaths.default)(basedir, {\n      moduleDirectory: options.moduleDirectory,\n      paths\n    });\n\n    for (let i = 0; i < dirs.length; i++) {\n      const resolveTarget = _path().default.join(dirs[i], target);\n\n      const result = tryResolve(resolveTarget);\n\n      if (result) {\n        return result;\n      }\n    }\n  }\n\n  if ((0, _isBuiltinModule.default)(target)) {\n    return target;\n  }\n\n  const err = new Error(\n    \"Cannot find module '\" + target + \"' from '\" + basedir + \"'\"\n  );\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n  /*\n   * contextual helper functions\n   */\n\n  function tryResolve(name) {\n    const dir = _path().default.dirname(name);\n\n    let result;\n\n    if (isDirectory(dir)) {\n      result = resolveAsFile(name) || resolveAsDirectory(name);\n    }\n\n    if (result) {\n      // Dereference symlinks to ensure we don't create a separate\n      // module instance depending on how it was referenced.\n      result = _fs().default.realpathSync(result);\n    }\n\n    return result;\n  }\n\n  function resolveAsFile(name) {\n    if (isFile(name)) {\n      return name;\n    }\n\n    for (let i = 0; i < extensions.length; i++) {\n      const file = name + extensions[i];\n\n      if (isFile(file)) {\n        return file;\n      }\n    }\n\n    return undefined;\n  }\n\n  function resolveAsDirectory(name) {\n    if (!isDirectory(name)) {\n      return undefined;\n    }\n\n    const pkgfile = _path().default.join(name, 'package.json');\n\n    let pkgmain;\n\n    try {\n      const body = _fs().default.readFileSync(pkgfile, 'utf8');\n\n      pkgmain = JSON.parse(body).main;\n    } catch (e) {}\n\n    if (pkgmain && !isCurrentDirectory(pkgmain)) {\n      const resolveTarget = _path().default.resolve(name, pkgmain);\n\n      const result = tryResolve(resolveTarget);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    return resolveAsFile(_path().default.join(name, 'index'));\n  }\n}\n\nvar IPathType;\n\n(function(IPathType) {\n  IPathType[(IPathType['FILE'] = 1)] = 'FILE';\n  IPathType[(IPathType['DIRECTORY'] = 2)] = 'DIRECTORY';\n  IPathType[(IPathType['OTHER'] = 3)] = 'OTHER';\n})(IPathType || (IPathType = {}));\n\nconst checkedPaths = new Map();\n\nfunction statSyncCached(path) {\n  const result = checkedPaths.get(path);\n\n  if (result !== undefined) {\n    return result;\n  }\n\n  let stat;\n\n  try {\n    stat = _fs().default.statSync(path);\n  } catch (e) {\n    if (!(e && (e.code === 'ENOENT' || e.code === 'ENOTDIR'))) {\n      throw e;\n    }\n  }\n\n  if (stat) {\n    if (stat.isFile() || stat.isFIFO()) {\n      checkedPaths.set(path, IPathType.FILE);\n      return IPathType.FILE;\n    } else if (stat.isDirectory()) {\n      checkedPaths.set(path, IPathType.DIRECTORY);\n      return IPathType.DIRECTORY;\n    }\n  }\n\n  checkedPaths.set(path, IPathType.OTHER);\n  return IPathType.OTHER;\n}\n/*\n * helper functions\n */\n\nfunction isFile(file) {\n  return statSyncCached(file) === IPathType.FILE;\n}\n\nfunction isDirectory(dir) {\n  return statSyncCached(dir) === IPathType.DIRECTORY;\n}\n\nconst CURRENT_DIRECTORY = _path().default.resolve('.');\n\nfunction isCurrentDirectory(testPath) {\n  return CURRENT_DIRECTORY === _path().default.resolve(testPath);\n}\n"]},"metadata":{},"sourceType":"script"}