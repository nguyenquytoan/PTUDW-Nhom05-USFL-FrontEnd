{"ast":null,"code":"#!/usr/bin/env node\n'use strict';\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _minimist = require('minimist');\n\nvar _minimist2 = _interopRequireDefault(_minimist);\n\nvar _package = require('../package.json');\n\nvar _package2 = _interopRequireDefault(_package);\n\nvar _ = require('./');\n\nvar _2 = _interopRequireDefault(_);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar argv = (0, _minimist2.default)(process.argv.slice(2), {\n  alias: {\n    'convert': 'c',\n    'space': 's',\n    'validate': 'v',\n    'out-file': 'o',\n    'version': 'V',\n    'help': 'h'\n  },\n  boolean: ['convert', 'validate', 'version', 'help'],\n  string: ['space', 'out-file']\n});\n\nif (argv.version) {\n  version();\n} else if (argv.help) {\n  usage();\n} else {\n  var inFilename = argv._[0];\n  var readStream = void 0;\n\n  if (inFilename) {\n    readStream = _fs2.default.createReadStream(inFilename);\n  } else {\n    readStream = process.stdin;\n  }\n\n  var json5 = '';\n  readStream.on('data', function (data) {\n    json5 += data;\n  });\n  readStream.on('end', function () {\n    var space = void 0;\n\n    if (argv.space === 't' || argv.space === 'tab') {\n      space = '\\t';\n    } else {\n      space = Number(argv.space);\n    }\n\n    var value = void 0;\n\n    try {\n      value = _2.default.parse(json5);\n\n      if (!argv.validate) {\n        var json = JSON.stringify(value, null, space);\n        var writeStream = void 0;\n\n        if (argv.convert && inFilename && !argv.o) {\n          var parsedFilename = _path2.default.parse(inFilename);\n\n          var outFilename = _path2.default.format(Object.assign(parsedFilename, {\n            base: _path2.default.basename(parsedFilename.base, parsedFilename.ext) + '.json'\n          }));\n\n          writeStream = _fs2.default.createWriteStream(outFilename);\n        } else if (argv.o) {\n          writeStream = _fs2.default.createWriteStream(argv.o);\n        } else {\n          writeStream = process.stdout;\n        }\n\n        writeStream.write(json);\n      }\n    } catch (err) {\n      console.error(err.message);\n      process.exit(1);\n    }\n  });\n}\n\nfunction version() {\n  console.log(_package2.default.version);\n}\n\nfunction usage() {\n  console.log('\\n  Usage: json5 [options] <file>\\n\\n  If <file> is not provided, then STDIN is used.\\n\\n  Options:\\n\\n    -s, --space              The number of spaces to indent or \\'t\\' for tabs\\n    -o, --out-file [file]    Output to the specified file, otherwise STDOUT\\n    -v, --validate           Validate JSON5 but do not output JSON\\n    -V, --version            Output the version number\\n    -h, --help               Output usage information');\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-dev-utils/node_modules/json5/lib/cli.js"],"names":["_fs","require","_fs2","_interopRequireDefault","_path","_path2","_minimist","_minimist2","_package","_package2","_","_2","obj","__esModule","default","argv","process","slice","alias","boolean","string","version","help","usage","inFilename","readStream","createReadStream","stdin","json5","on","data","space","Number","value","parse","validate","json","JSON","stringify","writeStream","convert","o","parsedFilename","outFilename","format","Object","assign","base","basename","ext","createWriteStream","stdout","write","err","console","error","message","exit","log"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n'use strict';var _fs=require('fs');var _fs2=_interopRequireDefault(_fs);var _path=require('path');var _path2=_interopRequireDefault(_path);var _minimist=require('minimist');var _minimist2=_interopRequireDefault(_minimist);var _package=require('../package.json');var _package2=_interopRequireDefault(_package);var _=require('./');var _2=_interopRequireDefault(_);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var argv=(0,_minimist2.default)(process.argv.slice(2),{alias:{'convert':'c','space':'s','validate':'v','out-file':'o','version':'V','help':'h'},boolean:['convert','validate','version','help'],string:['space','out-file']});if(argv.version){version()}else if(argv.help){usage()}else{var inFilename=argv._[0];var readStream=void 0;if(inFilename){readStream=_fs2.default.createReadStream(inFilename)}else{readStream=process.stdin}var json5='';readStream.on('data',function(data){json5+=data});readStream.on('end',function(){var space=void 0;if(argv.space==='t'||argv.space==='tab'){space='\\t'}else{space=Number(argv.space)}var value=void 0;try{value=_2.default.parse(json5);if(!argv.validate){var json=JSON.stringify(value,null,space);var writeStream=void 0;if(argv.convert&&inFilename&&!argv.o){var parsedFilename=_path2.default.parse(inFilename);var outFilename=_path2.default.format(Object.assign(parsedFilename,{base:_path2.default.basename(parsedFilename.base,parsedFilename.ext)+'.json'}));writeStream=_fs2.default.createWriteStream(outFilename)}else if(argv.o){writeStream=_fs2.default.createWriteStream(argv.o)}else{writeStream=process.stdout}writeStream.write(json)}}catch(err){console.error(err.message);process.exit(1)}})}function version(){console.log(_package2.default.version)}function usage(){console.log('\\n  Usage: json5 [options] <file>\\n\\n  If <file> is not provided, then STDIN is used.\\n\\n  Options:\\n\\n    -s, --space              The number of spaces to indent or \\'t\\' for tabs\\n    -o, --out-file [file]    Output to the specified file, otherwise STDOUT\\n    -v, --validate           Validate JSON5 but do not output JSON\\n    -V, --version            Output the version number\\n    -h, --help               Output usage information')}"]},"metadata":{},"sourceType":"script"}