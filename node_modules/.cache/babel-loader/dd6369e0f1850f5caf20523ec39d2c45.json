{"ast":null,"code":"\"use strict\";\n\nfunction findRelation_upToPath(urlObj, siteUrlObj, options) {\n  // Path- or root-relative URL\n  var pathOnly = urlObj.extra.hrefInfo.minimumPathOnly; // Matching scheme, scheme-relative or path-only\n\n  var minimumScheme = urlObj.scheme === siteUrlObj.scheme || !urlObj.scheme; // Matching auth, ignoring auth or path-only\n\n  var minimumAuth = minimumScheme && (urlObj.auth === siteUrlObj.auth || options.removeAuth || pathOnly); // Matching host or path-only\n\n  var www = options.ignore_www ? \"stripped\" : \"full\";\n  var minimumHost = minimumAuth && (urlObj.host[www] === siteUrlObj.host[www] || pathOnly); // Matching port or path-only\n\n  var minimumPort = minimumHost && (urlObj.port === siteUrlObj.port || pathOnly);\n  urlObj.extra.relation.minimumScheme = minimumScheme;\n  urlObj.extra.relation.minimumAuth = minimumAuth;\n  urlObj.extra.relation.minimumHost = minimumHost;\n  urlObj.extra.relation.minimumPort = minimumPort;\n  urlObj.extra.relation.maximumScheme = !minimumScheme || minimumScheme && !minimumAuth;\n  urlObj.extra.relation.maximumAuth = !minimumScheme || minimumScheme && !minimumHost;\n  urlObj.extra.relation.maximumHost = !minimumScheme || minimumScheme && !minimumPort;\n}\n\nfunction findRelation_pathOn(urlObj, siteUrlObj, options) {\n  var queryOnly = urlObj.extra.hrefInfo.minimumQueryOnly;\n  var hashOnly = urlObj.extra.hrefInfo.minimumHashOnly;\n  var empty = urlObj.extra.hrefInfo.empty; // not required, but self-documenting\n  // From upToPath()\n\n  var minimumPort = urlObj.extra.relation.minimumPort;\n  var minimumScheme = urlObj.extra.relation.minimumScheme; // Matching port and path\n\n  var minimumPath = minimumPort && urlObj.path.absolute.string === siteUrlObj.path.absolute.string; // Matching resource or query/hash-only or empty\n\n  var matchingResource = urlObj.resource === siteUrlObj.resource || !urlObj.resource && siteUrlObj.extra.resourceIsIndex || options.removeDirectoryIndexes && urlObj.extra.resourceIsIndex && !siteUrlObj.resource;\n  var minimumResource = minimumPath && (matchingResource || queryOnly || hashOnly || empty); // Matching query or hash-only/empty\n\n  var query = options.removeEmptyQueries ? \"stripped\" : \"full\";\n  var urlQuery = urlObj.query.string[query];\n  var siteUrlQuery = siteUrlObj.query.string[query];\n  var minimumQuery = minimumResource && !!urlQuery && urlQuery === siteUrlQuery || (hashOnly || empty) && !urlObj.extra.hrefInfo.separatorOnlyQuery;\n  var minimumHash = minimumQuery && urlObj.hash === siteUrlObj.hash;\n  urlObj.extra.relation.minimumPath = minimumPath;\n  urlObj.extra.relation.minimumResource = minimumResource;\n  urlObj.extra.relation.minimumQuery = minimumQuery;\n  urlObj.extra.relation.minimumHash = minimumHash;\n  urlObj.extra.relation.maximumPort = !minimumScheme || minimumScheme && !minimumPath;\n  urlObj.extra.relation.maximumPath = !minimumScheme || minimumScheme && !minimumResource;\n  urlObj.extra.relation.maximumResource = !minimumScheme || minimumScheme && !minimumQuery;\n  urlObj.extra.relation.maximumQuery = !minimumScheme || minimumScheme && !minimumHash;\n  urlObj.extra.relation.maximumHash = !minimumScheme || minimumScheme && !minimumHash; // there's nothing after hash, so it's the same as maximumQuery\n  // Matching path and/or resource with existing but non-matching site query\n\n  urlObj.extra.relation.overridesQuery = minimumPath && urlObj.extra.relation.maximumResource && !minimumQuery && !!siteUrlQuery;\n}\n\nmodule.exports = {\n  pathOn: findRelation_pathOn,\n  upToPath: findRelation_upToPath\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/relateurl/lib/relate/findRelation.js"],"names":["findRelation_upToPath","urlObj","siteUrlObj","options","pathOnly","extra","hrefInfo","minimumPathOnly","minimumScheme","scheme","minimumAuth","auth","removeAuth","www","ignore_www","minimumHost","host","minimumPort","port","relation","maximumScheme","maximumAuth","maximumHost","findRelation_pathOn","queryOnly","minimumQueryOnly","hashOnly","minimumHashOnly","empty","minimumPath","path","absolute","string","matchingResource","resource","resourceIsIndex","removeDirectoryIndexes","minimumResource","query","removeEmptyQueries","urlQuery","siteUrlQuery","minimumQuery","separatorOnlyQuery","minimumHash","hash","maximumPort","maximumPath","maximumResource","maximumQuery","maximumHash","overridesQuery","module","exports","pathOn","upToPath"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction findRelation_upToPath(urlObj, siteUrlObj, options)\n{\n\t// Path- or root-relative URL\n\tvar pathOnly = urlObj.extra.hrefInfo.minimumPathOnly;\n\t\n\t// Matching scheme, scheme-relative or path-only\n\tvar minimumScheme = (urlObj.scheme===siteUrlObj.scheme || !urlObj.scheme);\n\t\n\t// Matching auth, ignoring auth or path-only\n\tvar minimumAuth = minimumScheme && (urlObj.auth===siteUrlObj.auth || options.removeAuth || pathOnly);\n\t\n\t// Matching host or path-only\n\tvar www = options.ignore_www ? \"stripped\" : \"full\";\n\tvar minimumHost = minimumAuth && (urlObj.host[www]===siteUrlObj.host[www] || pathOnly);\n\t\n\t// Matching port or path-only\n\tvar minimumPort = minimumHost && (urlObj.port===siteUrlObj.port || pathOnly);\n\t\n\turlObj.extra.relation.minimumScheme = minimumScheme;\n\turlObj.extra.relation.minimumAuth   = minimumAuth;\n\turlObj.extra.relation.minimumHost   = minimumHost;\n\turlObj.extra.relation.minimumPort   = minimumPort;\n\t\n\turlObj.extra.relation.maximumScheme = !minimumScheme || minimumScheme && !minimumAuth;\n\turlObj.extra.relation.maximumAuth   = !minimumScheme || minimumScheme && !minimumHost;\n\turlObj.extra.relation.maximumHost   = !minimumScheme || minimumScheme && !minimumPort;\n}\n\n\n\nfunction findRelation_pathOn(urlObj, siteUrlObj, options)\n{\n\tvar queryOnly = urlObj.extra.hrefInfo.minimumQueryOnly;\n\tvar hashOnly  = urlObj.extra.hrefInfo.minimumHashOnly;\n\tvar empty     = urlObj.extra.hrefInfo.empty;\t// not required, but self-documenting\n\t\n\t// From upToPath()\n\tvar minimumPort   = urlObj.extra.relation.minimumPort;\n\tvar minimumScheme = urlObj.extra.relation.minimumScheme;\n\t\n\t// Matching port and path\n\tvar minimumPath = minimumPort && urlObj.path.absolute.string===siteUrlObj.path.absolute.string;\n\t\n\t// Matching resource or query/hash-only or empty\n\tvar matchingResource = (urlObj.resource===siteUrlObj.resource || !urlObj.resource && siteUrlObj.extra.resourceIsIndex) || (options.removeDirectoryIndexes && urlObj.extra.resourceIsIndex && !siteUrlObj.resource);\n\tvar minimumResource = minimumPath && (matchingResource || queryOnly || hashOnly || empty);\n\t\n\t// Matching query or hash-only/empty\n\tvar query = options.removeEmptyQueries ? \"stripped\" : \"full\";\n\tvar urlQuery = urlObj.query.string[query];\n\tvar siteUrlQuery = siteUrlObj.query.string[query];\n\tvar minimumQuery = (minimumResource && !!urlQuery && urlQuery===siteUrlQuery) || ((hashOnly || empty) && !urlObj.extra.hrefInfo.separatorOnlyQuery);\n\t\n\tvar minimumHash = minimumQuery && urlObj.hash===siteUrlObj.hash;\n\t\n\turlObj.extra.relation.minimumPath     = minimumPath;\n\turlObj.extra.relation.minimumResource = minimumResource;\n\turlObj.extra.relation.minimumQuery    = minimumQuery;\n\turlObj.extra.relation.minimumHash     = minimumHash;\n\t\n\turlObj.extra.relation.maximumPort     = !minimumScheme || minimumScheme && !minimumPath;\n\turlObj.extra.relation.maximumPath     = !minimumScheme || minimumScheme && !minimumResource;\n\turlObj.extra.relation.maximumResource = !minimumScheme || minimumScheme && !minimumQuery;\n\turlObj.extra.relation.maximumQuery    = !minimumScheme || minimumScheme && !minimumHash;\n\turlObj.extra.relation.maximumHash     = !minimumScheme || minimumScheme && !minimumHash;\t// there's nothing after hash, so it's the same as maximumQuery\n\t\n\t// Matching path and/or resource with existing but non-matching site query\n\turlObj.extra.relation.overridesQuery  = minimumPath && urlObj.extra.relation.maximumResource && !minimumQuery && !!siteUrlQuery;\n}\n\n\n\nmodule.exports =\n{\n\tpathOn:   findRelation_pathOn,\n\tupToPath: findRelation_upToPath\n};\n"]},"metadata":{},"sourceType":"script"}