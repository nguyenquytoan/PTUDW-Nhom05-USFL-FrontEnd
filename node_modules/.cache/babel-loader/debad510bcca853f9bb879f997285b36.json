{"ast":null,"code":"/**\n * @fileoverview A rule to set the maximum number of statements in a function.\n * @author Ian Christian Myers\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst lodash = require(\"lodash\");\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce a maximum number of statements allowed in function blocks\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-statements\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 0\n      }, {\n        type: \"object\",\n        properties: {\n          maximum: {\n            type: \"integer\",\n            minimum: 0\n          },\n          max: {\n            type: \"integer\",\n            minimum: 0\n          }\n        },\n        additionalProperties: false\n      }]\n    }, {\n      type: \"object\",\n      properties: {\n        ignoreTopLevelFunctions: {\n          type: \"boolean\"\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      exceed: \"{{name}} has too many statements ({{count}}). Maximum allowed is {{max}}.\"\n    }\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n    const functionStack = [],\n          option = context.options[0],\n          ignoreTopLevelFunctions = context.options[1] && context.options[1].ignoreTopLevelFunctions || false,\n          topLevelFunctions = [];\n    let maxStatements = 10;\n\n    if (typeof option === \"object\" && (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))) {\n      maxStatements = option.maximum || option.max;\n    } else if (typeof option === \"number\") {\n      maxStatements = option;\n    }\n    /**\n     * Reports a node if it has too many statements\n     * @param {ASTNode} node node to evaluate\n     * @param {int} count Number of statements in node\n     * @param {int} max Maximum number of statements allowed\n     * @returns {void}\n     * @private\n     */\n\n\n    function reportIfTooManyStatements(node, count, max) {\n      if (count > max) {\n        const name = lodash.upperFirst(astUtils.getFunctionNameWithKind(node));\n        context.report({\n          node,\n          messageId: \"exceed\",\n          data: {\n            name,\n            count,\n            max\n          }\n        });\n      }\n    }\n    /**\n     * When parsing a new function, store it in our function stack\n     * @returns {void}\n     * @private\n     */\n\n\n    function startFunction() {\n      functionStack.push(0);\n    }\n    /**\n     * Evaluate the node at the end of function\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function endFunction(node) {\n      const count = functionStack.pop();\n\n      if (ignoreTopLevelFunctions && functionStack.length === 0) {\n        topLevelFunctions.push({\n          node,\n          count\n        });\n      } else {\n        reportIfTooManyStatements(node, count, maxStatements);\n      }\n    }\n    /**\n     * Increment the count of the functions\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function countStatements(node) {\n      functionStack[functionStack.length - 1] += node.body.length;\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      FunctionDeclaration: startFunction,\n      FunctionExpression: startFunction,\n      ArrowFunctionExpression: startFunction,\n      BlockStatement: countStatements,\n      \"FunctionDeclaration:exit\": endFunction,\n      \"FunctionExpression:exit\": endFunction,\n      \"ArrowFunctionExpression:exit\": endFunction,\n\n      \"Program:exit\"() {\n        if (topLevelFunctions.length === 1) {\n          return;\n        }\n\n        topLevelFunctions.forEach(element => {\n          const count = element.count;\n          const node = element.node;\n          reportIfTooManyStatements(node, count, maxStatements);\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/max-statements.js"],"names":["lodash","require","astUtils","module","exports","meta","type","docs","description","category","recommended","url","schema","oneOf","minimum","properties","maximum","max","additionalProperties","ignoreTopLevelFunctions","messages","exceed","create","context","functionStack","option","options","topLevelFunctions","maxStatements","Object","prototype","hasOwnProperty","call","reportIfTooManyStatements","node","count","name","upperFirst","getFunctionNameWithKind","report","messageId","data","startFunction","push","endFunction","pop","length","countStatements","body","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","BlockStatement","forEach","element"],"mappings":"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","sourcesContent":["/**\n * @fileoverview A rule to set the maximum number of statements in a function.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst lodash = require(\"lodash\");\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce a maximum number of statements allowed in function blocks\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/max-statements\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    ignoreTopLevelFunctions: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            exceed: \"{{name}} has too many statements ({{count}}). Maximum allowed is {{max}}.\"\n        }\n    },\n\n    create(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        const functionStack = [],\n            option = context.options[0],\n            ignoreTopLevelFunctions = context.options[1] && context.options[1].ignoreTopLevelFunctions || false,\n            topLevelFunctions = [];\n        let maxStatements = 10;\n\n        if (\n            typeof option === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))\n        ) {\n            maxStatements = option.maximum || option.max;\n        } else if (typeof option === \"number\") {\n            maxStatements = option;\n        }\n\n        /**\n         * Reports a node if it has too many statements\n         * @param {ASTNode} node node to evaluate\n         * @param {int} count Number of statements in node\n         * @param {int} max Maximum number of statements allowed\n         * @returns {void}\n         * @private\n         */\n        function reportIfTooManyStatements(node, count, max) {\n            if (count > max) {\n                const name = lodash.upperFirst(astUtils.getFunctionNameWithKind(node));\n\n                context.report({\n                    node,\n                    messageId: \"exceed\",\n                    data: { name, count, max }\n                });\n            }\n        }\n\n        /**\n         * When parsing a new function, store it in our function stack\n         * @returns {void}\n         * @private\n         */\n        function startFunction() {\n            functionStack.push(0);\n        }\n\n        /**\n         * Evaluate the node at the end of function\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function endFunction(node) {\n            const count = functionStack.pop();\n\n            if (ignoreTopLevelFunctions && functionStack.length === 0) {\n                topLevelFunctions.push({ node, count });\n            } else {\n                reportIfTooManyStatements(node, count, maxStatements);\n            }\n        }\n\n        /**\n         * Increment the count of the functions\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function countStatements(node) {\n            functionStack[functionStack.length - 1] += node.body.length;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: startFunction,\n            FunctionExpression: startFunction,\n            ArrowFunctionExpression: startFunction,\n\n            BlockStatement: countStatements,\n\n            \"FunctionDeclaration:exit\": endFunction,\n            \"FunctionExpression:exit\": endFunction,\n            \"ArrowFunctionExpression:exit\": endFunction,\n\n            \"Program:exit\"() {\n                if (topLevelFunctions.length === 1) {\n                    return;\n                }\n\n                topLevelFunctions.forEach(element => {\n                    const count = element.count;\n                    const node = element.node;\n\n                    reportIfTooManyStatements(node, count, maxStatements);\n                });\n            }\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}