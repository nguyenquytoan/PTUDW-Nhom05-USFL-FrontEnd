{"ast":null,"code":"/**\n * @fileoverview Restrict usage of specified node modules.\n * @author Christian Schulz\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst DEFAULT_MESSAGE_TEMPLATE = \"'{{moduleName}}' module is restricted from being used.\";\nconst CUSTOM_MESSAGE_TEMPLATE = \"'{{moduleName}}' module is restricted from being used. {{customMessage}}\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst ignore = require(\"ignore\");\n\nconst arrayOfStrings = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  },\n  uniqueItems: true\n};\nconst arrayOfStringsOrObjects = {\n  type: \"array\",\n  items: {\n    anyOf: [{\n      type: \"string\"\n    }, {\n      type: \"object\",\n      properties: {\n        name: {\n          type: \"string\"\n        },\n        message: {\n          type: \"string\",\n          minLength: 1\n        }\n      },\n      additionalProperties: false,\n      required: [\"name\"]\n    }]\n  },\n  uniqueItems: true\n};\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow specified modules when loaded by `require`\",\n      category: \"Node.js and CommonJS\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-restricted-modules\"\n    },\n    schema: {\n      anyOf: [arrayOfStringsOrObjects, {\n        type: \"array\",\n        items: {\n          type: \"object\",\n          properties: {\n            paths: arrayOfStringsOrObjects,\n            patterns: arrayOfStrings\n          },\n          additionalProperties: false\n        },\n        additionalItems: false\n      }]\n    }\n  },\n\n  create(context) {\n    const options = Array.isArray(context.options) ? context.options : [];\n    const isPathAndPatternsObject = typeof options[0] === \"object\" && (Object.prototype.hasOwnProperty.call(options[0], \"paths\") || Object.prototype.hasOwnProperty.call(options[0], \"patterns\"));\n    const restrictedPaths = (isPathAndPatternsObject ? options[0].paths : context.options) || [];\n    const restrictedPatterns = (isPathAndPatternsObject ? options[0].patterns : []) || [];\n    const restrictedPathMessages = restrictedPaths.reduce((memo, importName) => {\n      if (typeof importName === \"string\") {\n        memo[importName] = null;\n      } else {\n        memo[importName.name] = importName.message;\n      }\n\n      return memo;\n    }, {}); // if no imports are restricted we don\"t need to check\n\n    if (Object.keys(restrictedPaths).length === 0 && restrictedPatterns.length === 0) {\n      return {};\n    }\n\n    const ig = ignore().add(restrictedPatterns);\n    /**\n     * Function to check if a node is a string literal.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} If the node is a string literal.\n     */\n\n    function isString(node) {\n      return node && node.type === \"Literal\" && typeof node.value === \"string\";\n    }\n    /**\n     * Function to check if a node is a require call.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} If the node is a require call.\n     */\n\n\n    function isRequireCall(node) {\n      return node.callee.type === \"Identifier\" && node.callee.name === \"require\";\n    }\n    /**\n     * Report a restricted path.\n     * @param {node} node representing the restricted path reference\n     * @returns {void}\n     * @private\n     */\n\n\n    function reportPath(node) {\n      const moduleName = node.arguments[0].value.trim();\n      const customMessage = restrictedPathMessages[moduleName];\n      const message = customMessage ? CUSTOM_MESSAGE_TEMPLATE : DEFAULT_MESSAGE_TEMPLATE;\n      context.report({\n        node,\n        message,\n        data: {\n          moduleName,\n          customMessage\n        }\n      });\n    }\n    /**\n     * Check if the given name is a restricted path name\n     * @param {string} name name of a variable\n     * @returns {boolean} whether the variable is a restricted path or not\n     * @private\n     */\n\n\n    function isRestrictedPath(name) {\n      return Object.prototype.hasOwnProperty.call(restrictedPathMessages, name);\n    }\n\n    return {\n      CallExpression(node) {\n        if (isRequireCall(node)) {\n          // node has arguments and first argument is string\n          if (node.arguments.length && isString(node.arguments[0])) {\n            const moduleName = node.arguments[0].value.trim(); // check if argument value is in restricted modules array\n\n            if (isRestrictedPath(moduleName)) {\n              reportPath(node);\n            }\n\n            if (restrictedPatterns.length > 0 && ig.ignores(moduleName)) {\n              context.report({\n                node,\n                message: \"'{{moduleName}}' module is restricted from being used by a pattern.\",\n                data: {\n                  moduleName\n                }\n              });\n            }\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-restricted-modules.js"],"names":["DEFAULT_MESSAGE_TEMPLATE","CUSTOM_MESSAGE_TEMPLATE","ignore","require","arrayOfStrings","type","items","uniqueItems","arrayOfStringsOrObjects","anyOf","properties","name","message","minLength","additionalProperties","required","module","exports","meta","docs","description","category","recommended","url","schema","paths","patterns","additionalItems","create","context","options","Array","isArray","isPathAndPatternsObject","Object","prototype","hasOwnProperty","call","restrictedPaths","restrictedPatterns","restrictedPathMessages","reduce","memo","importName","keys","length","ig","add","isString","node","value","isRequireCall","callee","reportPath","moduleName","arguments","trim","customMessage","report","data","isRestrictedPath","CallExpression","ignores"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Restrict usage of specified node modules.\n * @author Christian Schulz\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst DEFAULT_MESSAGE_TEMPLATE = \"'{{moduleName}}' module is restricted from being used.\";\nconst CUSTOM_MESSAGE_TEMPLATE = \"'{{moduleName}}' module is restricted from being used. {{customMessage}}\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst ignore = require(\"ignore\");\n\nconst arrayOfStrings = {\n    type: \"array\",\n    items: { type: \"string\" },\n    uniqueItems: true\n};\n\nconst arrayOfStringsOrObjects = {\n    type: \"array\",\n    items: {\n        anyOf: [\n            { type: \"string\" },\n            {\n                type: \"object\",\n                properties: {\n                    name: { type: \"string\" },\n                    message: {\n                        type: \"string\",\n                        minLength: 1\n                    }\n                },\n                additionalProperties: false,\n                required: [\"name\"]\n            }\n        ]\n    },\n    uniqueItems: true\n};\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow specified modules when loaded by `require`\",\n            category: \"Node.js and CommonJS\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-restricted-modules\"\n        },\n\n        schema: {\n            anyOf: [\n                arrayOfStringsOrObjects,\n                {\n                    type: \"array\",\n                    items: {\n                        type: \"object\",\n                        properties: {\n                            paths: arrayOfStringsOrObjects,\n                            patterns: arrayOfStrings\n                        },\n                        additionalProperties: false\n                    },\n                    additionalItems: false\n                }\n            ]\n        }\n    },\n\n    create(context) {\n        const options = Array.isArray(context.options) ? context.options : [];\n        const isPathAndPatternsObject =\n            typeof options[0] === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(options[0], \"paths\") || Object.prototype.hasOwnProperty.call(options[0], \"patterns\"));\n\n        const restrictedPaths = (isPathAndPatternsObject ? options[0].paths : context.options) || [];\n        const restrictedPatterns = (isPathAndPatternsObject ? options[0].patterns : []) || [];\n\n        const restrictedPathMessages = restrictedPaths.reduce((memo, importName) => {\n            if (typeof importName === \"string\") {\n                memo[importName] = null;\n            } else {\n                memo[importName.name] = importName.message;\n            }\n            return memo;\n        }, {});\n\n        // if no imports are restricted we don\"t need to check\n        if (Object.keys(restrictedPaths).length === 0 && restrictedPatterns.length === 0) {\n            return {};\n        }\n\n        const ig = ignore().add(restrictedPatterns);\n\n\n        /**\n         * Function to check if a node is a string literal.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} If the node is a string literal.\n         */\n        function isString(node) {\n            return node && node.type === \"Literal\" && typeof node.value === \"string\";\n        }\n\n        /**\n         * Function to check if a node is a require call.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} If the node is a require call.\n         */\n        function isRequireCall(node) {\n            return node.callee.type === \"Identifier\" && node.callee.name === \"require\";\n        }\n\n        /**\n         * Report a restricted path.\n         * @param {node} node representing the restricted path reference\n         * @returns {void}\n         * @private\n         */\n        function reportPath(node) {\n            const moduleName = node.arguments[0].value.trim();\n            const customMessage = restrictedPathMessages[moduleName];\n            const message = customMessage\n                ? CUSTOM_MESSAGE_TEMPLATE\n                : DEFAULT_MESSAGE_TEMPLATE;\n\n            context.report({\n                node,\n                message,\n                data: {\n                    moduleName,\n                    customMessage\n                }\n            });\n        }\n\n        /**\n         * Check if the given name is a restricted path name\n         * @param {string} name name of a variable\n         * @returns {boolean} whether the variable is a restricted path or not\n         * @private\n         */\n        function isRestrictedPath(name) {\n            return Object.prototype.hasOwnProperty.call(restrictedPathMessages, name);\n        }\n\n        return {\n            CallExpression(node) {\n                if (isRequireCall(node)) {\n\n                    // node has arguments and first argument is string\n                    if (node.arguments.length && isString(node.arguments[0])) {\n                        const moduleName = node.arguments[0].value.trim();\n\n                        // check if argument value is in restricted modules array\n                        if (isRestrictedPath(moduleName)) {\n                            reportPath(node);\n                        }\n\n                        if (restrictedPatterns.length > 0 && ig.ignores(moduleName)) {\n                            context.report({\n                                node,\n                                message: \"'{{moduleName}}' module is restricted from being used by a pattern.\",\n                                data: { moduleName }\n                            });\n                        }\n                    }\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}