{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.mjs';\nimport { logger } from 'workbox-core/_private/logger.mjs';\nimport './_version.mjs';\n/**\n * Given two `Response's`, compares several header values to see if they are\n * the same or not.\n *\n * @param {Response} firstResponse\n * @param {Response} secondResponse\n * @param {Array<string>} headersToCheck\n * @return {boolean}\n *\n * @memberof workbox.broadcastUpdate\n * @private\n */\n\nconst responsesAreSame = (firstResponse, secondResponse, headersToCheck) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!(firstResponse instanceof Response && secondResponse instanceof Response)) {\n      throw new WorkboxError('invalid-responses-are-same-args');\n    }\n  }\n\n  const atLeastOneHeaderAvailable = headersToCheck.some(header => {\n    return firstResponse.headers.has(header) && secondResponse.headers.has(header);\n  });\n\n  if (!atLeastOneHeaderAvailable) {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.warn(`Unable to determine where the response has been updated ` + `because none of the headers that would be checked are present.`);\n      logger.debug(`Attempting to compare the following: `, firstResponse, secondResponse, headersToCheck);\n    } // Just return true, indicating the that responses are the same, since we\n    // can't determine otherwise.\n\n\n    return true;\n  }\n\n  return headersToCheck.every(header => {\n    const headerStateComparison = firstResponse.headers.has(header) === secondResponse.headers.has(header);\n    const headerValueComparison = firstResponse.headers.get(header) === secondResponse.headers.get(header);\n    return headerStateComparison && headerValueComparison;\n  });\n};\n\nexport { responsesAreSame };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-broadcast-update/responsesAreSame.mjs"],"names":["WorkboxError","logger","responsesAreSame","firstResponse","secondResponse","headersToCheck","process","env","NODE_ENV","Response","atLeastOneHeaderAvailable","some","header","headers","has","warn","debug","every","headerStateComparison","headerValueComparison","get"],"mappings":"AAAA;;;;;;;AAQA,SAAQA,YAAR,QAA2B,wCAA3B;AACA,SAAQC,MAAR,QAAqB,kCAArB;AACA,OAAO,gBAAP;AAEA;;;;;;;;;;;;;AAYA,MAAMC,gBAAgB,GAAG,CAACC,aAAD,EAAgBC,cAAhB,EAAgCC,cAAhC,KAAmD;AAC1E,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAI,EAAEL,aAAa,YAAYM,QAAzB,IACJL,cAAc,YAAYK,QADxB,CAAJ,EACuC;AACrC,YAAM,IAAIT,YAAJ,CAAiB,iCAAjB,CAAN;AACD;AACF;;AAED,QAAMU,yBAAyB,GAAGL,cAAc,CAACM,IAAf,CAAqBC,MAAD,IAAY;AAChE,WAAOT,aAAa,CAACU,OAAd,CAAsBC,GAAtB,CAA0BF,MAA1B,KACLR,cAAc,CAACS,OAAf,CAAuBC,GAAvB,CAA2BF,MAA3B,CADF;AAED,GAHiC,CAAlC;;AAKA,MAAI,CAACF,yBAAL,EAAgC;AAC9B,QAAIJ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCP,MAAAA,MAAM,CAACc,IAAP,CAAa,0DAAD,GACT,gEADH;AAEAd,MAAAA,MAAM,CAACe,KAAP,CAAc,uCAAd,EACIb,aADJ,EACmBC,cADnB,EACmCC,cADnC;AAED,KAN6B,CAQ9B;AACA;;;AACA,WAAO,IAAP;AACD;;AAED,SAAOA,cAAc,CAACY,KAAf,CAAsBL,MAAD,IAAY;AACtC,UAAMM,qBAAqB,GAAGf,aAAa,CAACU,OAAd,CAAsBC,GAAtB,CAA0BF,MAA1B,MAC5BR,cAAc,CAACS,OAAf,CAAuBC,GAAvB,CAA2BF,MAA3B,CADF;AAEA,UAAMO,qBAAqB,GAAGhB,aAAa,CAACU,OAAd,CAAsBO,GAAtB,CAA0BR,MAA1B,MAC5BR,cAAc,CAACS,OAAf,CAAuBO,GAAvB,CAA2BR,MAA3B,CADF;AAGA,WAAOM,qBAAqB,IAAIC,qBAAhC;AACD,GAPM,CAAP;AAQD,CAlCD;;AAoCA,SAAQjB,gBAAR","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport './_version.mjs';\n\n/**\n * Given two `Response's`, compares several header values to see if they are\n * the same or not.\n *\n * @param {Response} firstResponse\n * @param {Response} secondResponse\n * @param {Array<string>} headersToCheck\n * @return {boolean}\n *\n * @memberof workbox.broadcastUpdate\n * @private\n */\nconst responsesAreSame = (firstResponse, secondResponse, headersToCheck) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!(firstResponse instanceof Response &&\n      secondResponse instanceof Response)) {\n      throw new WorkboxError('invalid-responses-are-same-args');\n    }\n  }\n\n  const atLeastOneHeaderAvailable = headersToCheck.some((header) => {\n    return firstResponse.headers.has(header) &&\n      secondResponse.headers.has(header);\n  });\n\n  if (!atLeastOneHeaderAvailable) {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.warn(`Unable to determine where the response has been updated ` +\n        `because none of the headers that would be checked are present.`);\n      logger.debug(`Attempting to compare the following: `,\n          firstResponse, secondResponse, headersToCheck);\n    }\n\n    // Just return true, indicating the that responses are the same, since we\n    // can't determine otherwise.\n    return true;\n  }\n\n  return headersToCheck.every((header) => {\n    const headerStateComparison = firstResponse.headers.has(header) ===\n      secondResponse.headers.has(header);\n    const headerValueComparison = firstResponse.headers.get(header) ===\n      secondResponse.headers.get(header);\n\n    return headerStateComparison && headerValueComparison;\n  });\n};\n\nexport {responsesAreSame};\n"]},"metadata":{},"sourceType":"module"}