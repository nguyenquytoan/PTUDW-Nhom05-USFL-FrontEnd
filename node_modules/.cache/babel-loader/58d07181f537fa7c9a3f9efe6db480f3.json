{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _postcss = require(\"postcss\");\n\nvar _postcssValueParser = require(\"postcss-value-parser\");\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst atrule = \"atrule\";\nconst decl = \"decl\";\nconst rule = \"rule\";\n\nfunction reduceCalcWhitespaces(node) {\n  if (node.type === \"space\") {\n    node.value = \" \";\n  } else if (node.type === \"function\") {\n    node.before = node.after = \"\";\n  }\n}\n\nfunction reduceWhitespaces(node) {\n  if (node.type === \"space\") {\n    node.value = \" \";\n  } else if (node.type === \"div\") {\n    node.before = node.after = \"\";\n  } else if (node.type === \"function\") {\n    node.before = node.after = \"\";\n\n    if (node.value.toLowerCase() === \"calc\") {\n      _postcssValueParser2.default.walk(node.nodes, reduceCalcWhitespaces);\n\n      return false;\n    }\n  }\n}\n\nexports.default = (0, _postcss.plugin)(\"postcss-normalize-whitespace\", () => {\n  return css => {\n    const cache = {};\n    css.walk(node => {\n      const {\n        type\n      } = node;\n\n      if (~[decl, rule, atrule].indexOf(type) && node.raws.before) {\n        node.raws.before = node.raws.before.replace(/\\s/g, \"\");\n      }\n\n      if (type === decl) {\n        // Ensure that !important values do not have any excess whitespace\n        if (node.important) {\n          node.raws.important = \"!important\";\n        } // Remove whitespaces around ie 9 hack\n\n\n        node.value = node.value.replace(/\\s*(\\\\9)\\s*/, \"$1\");\n        const value = node.value;\n\n        if (cache[value]) {\n          node.value = cache[value];\n        } else {\n          const parsed = (0, _postcssValueParser2.default)(node.value);\n          const result = parsed.walk(reduceWhitespaces).toString(); // Trim whitespace inside functions & dividers\n\n          node.value = result;\n          cache[value] = result;\n        } // Remove extra semicolons and whitespace before the declaration\n\n\n        if (node.raws.before) {\n          const prev = node.prev();\n\n          if (prev && prev.type !== rule) {\n            node.raws.before = node.raws.before.replace(/;/g, \"\");\n          }\n        }\n\n        node.raws.between = \":\";\n        node.raws.semicolon = false;\n      } else if (type === rule || type === atrule) {\n        node.raws.between = node.raws.after = \"\";\n        node.raws.semicolon = false;\n      }\n    }); // Remove final newline\n\n    css.raws.after = \"\";\n  };\n});\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-normalize-whitespace/dist/index.js"],"names":["Object","defineProperty","exports","value","_postcss","require","_postcssValueParser","_postcssValueParser2","_interopRequireDefault","obj","__esModule","default","atrule","decl","rule","reduceCalcWhitespaces","node","type","before","after","reduceWhitespaces","toLowerCase","walk","nodes","plugin","css","cache","indexOf","raws","replace","important","parsed","result","toString","prev","between","semicolon","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require(\"postcss\");\n\nvar _postcssValueParser = require(\"postcss-value-parser\");\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst atrule = \"atrule\";\nconst decl = \"decl\";\nconst rule = \"rule\";\n\nfunction reduceCalcWhitespaces(node) {\n    if (node.type === \"space\") {\n        node.value = \" \";\n    } else if (node.type === \"function\") {\n        node.before = node.after = \"\";\n    }\n}\n\nfunction reduceWhitespaces(node) {\n    if (node.type === \"space\") {\n        node.value = \" \";\n    } else if (node.type === \"div\") {\n        node.before = node.after = \"\";\n    } else if (node.type === \"function\") {\n        node.before = node.after = \"\";\n\n        if (node.value.toLowerCase() === \"calc\") {\n            _postcssValueParser2.default.walk(node.nodes, reduceCalcWhitespaces);\n            return false;\n        }\n    }\n}\n\nexports.default = (0, _postcss.plugin)(\"postcss-normalize-whitespace\", () => {\n    return css => {\n        const cache = {};\n\n        css.walk(node => {\n            const { type } = node;\n\n            if (~[decl, rule, atrule].indexOf(type) && node.raws.before) {\n                node.raws.before = node.raws.before.replace(/\\s/g, \"\");\n            }\n\n            if (type === decl) {\n                // Ensure that !important values do not have any excess whitespace\n                if (node.important) {\n                    node.raws.important = \"!important\";\n                }\n\n                // Remove whitespaces around ie 9 hack\n                node.value = node.value.replace(/\\s*(\\\\9)\\s*/, \"$1\");\n\n                const value = node.value;\n\n                if (cache[value]) {\n                    node.value = cache[value];\n                } else {\n                    const parsed = (0, _postcssValueParser2.default)(node.value);\n                    const result = parsed.walk(reduceWhitespaces).toString();\n\n                    // Trim whitespace inside functions & dividers\n                    node.value = result;\n                    cache[value] = result;\n                }\n\n                // Remove extra semicolons and whitespace before the declaration\n                if (node.raws.before) {\n                    const prev = node.prev();\n\n                    if (prev && prev.type !== rule) {\n                        node.raws.before = node.raws.before.replace(/;/g, \"\");\n                    }\n                }\n\n                node.raws.between = \":\";\n                node.raws.semicolon = false;\n            } else if (type === rule || type === atrule) {\n                node.raws.between = node.raws.after = \"\";\n                node.raws.semicolon = false;\n            }\n        });\n\n        // Remove final newline\n        css.raws.after = \"\";\n    };\n});\nmodule.exports = exports[\"default\"];"]},"metadata":{},"sourceType":"script"}