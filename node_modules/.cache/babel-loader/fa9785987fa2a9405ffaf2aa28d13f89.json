{"ast":null,"code":"/**\n * Wrapper for the toaster (https://github.com/nels-o/toaster)\n */\nvar path = require('path');\n\nvar notifier = path.resolve(__dirname, '../vendor/snoreToast/SnoreToast.exe');\n\nvar utils = require('../lib/utils');\n\nvar Balloon = require('./balloon');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar fallback = void 0;\nmodule.exports = WindowsToaster;\n\nfunction WindowsToaster(options) {\n  options = utils.clone(options || {});\n\n  if (!(this instanceof WindowsToaster)) {\n    return new WindowsToaster(options);\n  }\n\n  this.options = options;\n  EventEmitter.call(this);\n}\n\nutil.inherits(WindowsToaster, EventEmitter);\n\nfunction noop() {}\n\nvar timeoutMessage = 'the toast has timed out';\nvar successMessage = 'user clicked on the toast';\n\nfunction hasText(str, txt) {\n  return str && str.indexOf(txt) !== -1;\n}\n\nWindowsToaster.prototype.notify = function (options, callback) {\n  options = utils.clone(options || {});\n  callback = callback || noop;\n\n  if (typeof options === 'string') {\n    options = {\n      title: 'node-notifier',\n      message: options\n    };\n  }\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('The second argument must be a function callback. You have passed ' + typeof fn);\n  }\n\n  var actionJackedCallback = utils.actionJackerDecorator(this, options, function cb(err, data) {\n    // Needs to filter out timeout. Not an actual error.\n    if (err && hasText(data, timeoutMessage)) {\n      return callback(null, data);\n    }\n\n    callback(err, data);\n  }, function mapper(data) {\n    if (hasText(data, successMessage)) {\n      return 'click';\n    }\n\n    if (hasText(data, timeoutMessage)) {\n      return 'timeout';\n    }\n\n    return false;\n  });\n  options.title = options.title || 'Node Notification:';\n\n  if (typeof options.message === 'undefined' && typeof options.close === 'undefined') {\n    callback(new Error('Message or ID to close is required.'));\n    return this;\n  }\n\n  if (!utils.isWin8() && !utils.isWSL() && !!this.options.withFallback) {\n    fallback = fallback || new Balloon(this.options);\n    return fallback.notify(options, callback);\n  }\n\n  options = utils.mapToWin8(options);\n  var argsList = utils.constructArgumentList(options, {\n    explicitTrue: true,\n    wrapper: '',\n    keepNewlines: true,\n    noEscape: true\n  });\n  utils.fileCommand(this.options.customPath || notifier, argsList, actionJackedCallback);\n  return this;\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/node-notifier/notifiers/toaster.js"],"names":["path","require","notifier","resolve","__dirname","utils","Balloon","EventEmitter","util","fallback","module","exports","WindowsToaster","options","clone","call","inherits","noop","timeoutMessage","successMessage","hasText","str","txt","indexOf","prototype","notify","callback","title","message","TypeError","fn","actionJackedCallback","actionJackerDecorator","cb","err","data","mapper","close","Error","isWin8","isWSL","withFallback","mapToWin8","argsList","constructArgumentList","explicitTrue","wrapper","keepNewlines","noEscape","fileCommand","customPath"],"mappings":"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","sourcesContent":["/**\n * Wrapper for the toaster (https://github.com/nels-o/toaster)\n */\nvar path = require('path');\nvar notifier = path.resolve(__dirname, '../vendor/snoreToast/SnoreToast.exe');\nvar utils = require('../lib/utils');\nvar Balloon = require('./balloon');\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nvar fallback = void 0;\n\nmodule.exports = WindowsToaster;\n\nfunction WindowsToaster(options) {\n  options = utils.clone(options || {});\n  if (!(this instanceof WindowsToaster)) {\n    return new WindowsToaster(options);\n  }\n\n  this.options = options;\n\n  EventEmitter.call(this);\n}\nutil.inherits(WindowsToaster, EventEmitter);\n\nfunction noop() {}\n\nvar timeoutMessage = 'the toast has timed out';\nvar successMessage = 'user clicked on the toast';\n\nfunction hasText(str, txt) {\n  return str && str.indexOf(txt) !== -1;\n}\n\nWindowsToaster.prototype.notify = function(options, callback) {\n  options = utils.clone(options || {});\n  callback = callback || noop;\n\n  if (typeof options === 'string') {\n    options = { title: 'node-notifier', message: options };\n  }\n\n  if (typeof callback !== 'function') {\n    throw new TypeError(\n      'The second argument must be a function callback. You have passed ' +\n        typeof fn\n    );\n  }\n\n  var actionJackedCallback = utils.actionJackerDecorator(\n    this,\n    options,\n    function cb(err, data) {\n      // Needs to filter out timeout. Not an actual error.\n      if (err && hasText(data, timeoutMessage)) {\n        return callback(null, data);\n      }\n      callback(err, data);\n    },\n    function mapper(data) {\n      if (hasText(data, successMessage)) {\n        return 'click';\n      }\n      if (hasText(data, timeoutMessage)) {\n        return 'timeout';\n      }\n      return false;\n    }\n  );\n\n  options.title = options.title || 'Node Notification:';\n  if (\n    typeof options.message === 'undefined' &&\n    typeof options.close === 'undefined'\n  ) {\n    callback(new Error('Message or ID to close is required.'));\n    return this;\n  }\n\n  if (!utils.isWin8() && !utils.isWSL() && !!this.options.withFallback) {\n    fallback = fallback || new Balloon(this.options);\n    return fallback.notify(options, callback);\n  }\n\n  options = utils.mapToWin8(options);\n  var argsList = utils.constructArgumentList(options, {\n    explicitTrue: true,\n    wrapper: '',\n    keepNewlines: true,\n    noEscape: true\n  });\n  utils.fileCommand(\n    this.options.customPath || notifier,\n    argsList,\n    actionJackedCallback\n  );\n  return this;\n};\n"]},"metadata":{},"sourceType":"script"}