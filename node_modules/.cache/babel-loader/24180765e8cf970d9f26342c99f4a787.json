{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.mjs';\nimport { assert } from 'workbox-core/_private/assert.mjs';\nimport '../_version.mjs';\n/**\n * @param {Blob} blob A source blob.\n * @param {number|null} start The offset to use as the start of the\n * slice.\n * @param {number|null} end The offset to use as the end of the slice.\n * @return {Object} An object with `start` and `end` properties, reflecting\n * the effective boundaries to use given the size of the blob.\n *\n * @private\n */\n\nfunction calculateEffectiveBoundaries(blob, start, end) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert.isInstance(blob, Blob, {\n      moduleName: 'workbox-range-requests',\n      funcName: 'calculateEffectiveBoundaries',\n      paramName: 'blob'\n    });\n  }\n\n  const blobSize = blob.size;\n\n  if (end > blobSize || start < 0) {\n    throw new WorkboxError('range-not-satisfiable', {\n      size: blobSize,\n      end,\n      start\n    });\n  }\n\n  let effectiveStart;\n  let effectiveEnd;\n\n  if (start === null) {\n    effectiveStart = blobSize - end;\n    effectiveEnd = blobSize;\n  } else if (end === null) {\n    effectiveStart = start;\n    effectiveEnd = blobSize;\n  } else {\n    effectiveStart = start; // Range values are inclusive, so add 1 to the value.\n\n    effectiveEnd = end + 1;\n  }\n\n  return {\n    start: effectiveStart,\n    end: effectiveEnd\n  };\n}\n\nexport { calculateEffectiveBoundaries };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-range-requests/utils/calculateEffectiveBoundaries.mjs"],"names":["WorkboxError","assert","calculateEffectiveBoundaries","blob","start","end","process","env","NODE_ENV","isInstance","Blob","moduleName","funcName","paramName","blobSize","size","effectiveStart","effectiveEnd"],"mappings":"AAAA;;;;;;;AAQA,SAAQA,YAAR,QAA2B,wCAA3B;AACA,SAAQC,MAAR,QAAqB,kCAArB;AAEA,OAAO,iBAAP;AAEA;;;;;;;;;;;AAUA,SAASC,4BAAT,CAAsCC,IAAtC,EAA4CC,KAA5C,EAAmDC,GAAnD,EAAwD;AACtD,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCP,IAAAA,MAAM,CAACQ,UAAP,CAAkBN,IAAlB,EAAwBO,IAAxB,EAA8B;AAC5BC,MAAAA,UAAU,EAAE,wBADgB;AAE5BC,MAAAA,QAAQ,EAAE,8BAFkB;AAG5BC,MAAAA,SAAS,EAAE;AAHiB,KAA9B;AAKD;;AAED,QAAMC,QAAQ,GAAGX,IAAI,CAACY,IAAtB;;AAEA,MAAIV,GAAG,GAAGS,QAAN,IAAkBV,KAAK,GAAG,CAA9B,EAAiC;AAC/B,UAAM,IAAIJ,YAAJ,CAAiB,uBAAjB,EAA0C;AAC9Ce,MAAAA,IAAI,EAAED,QADwC;AAE9CT,MAAAA,GAF8C;AAG9CD,MAAAA;AAH8C,KAA1C,CAAN;AAKD;;AAED,MAAIY,cAAJ;AACA,MAAIC,YAAJ;;AAEA,MAAIb,KAAK,KAAK,IAAd,EAAoB;AAClBY,IAAAA,cAAc,GAAGF,QAAQ,GAAGT,GAA5B;AACAY,IAAAA,YAAY,GAAGH,QAAf;AACD,GAHD,MAGO,IAAIT,GAAG,KAAK,IAAZ,EAAkB;AACvBW,IAAAA,cAAc,GAAGZ,KAAjB;AACAa,IAAAA,YAAY,GAAGH,QAAf;AACD,GAHM,MAGA;AACLE,IAAAA,cAAc,GAAGZ,KAAjB,CADK,CAEL;;AACAa,IAAAA,YAAY,GAAGZ,GAAG,GAAG,CAArB;AACD;;AAED,SAAO;AACLD,IAAAA,KAAK,EAAEY,cADF;AAELX,IAAAA,GAAG,EAAEY;AAFA,GAAP;AAID;;AAED,SAAQf,4BAAR","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\n\nimport '../_version.mjs';\n\n/**\n * @param {Blob} blob A source blob.\n * @param {number|null} start The offset to use as the start of the\n * slice.\n * @param {number|null} end The offset to use as the end of the slice.\n * @return {Object} An object with `start` and `end` properties, reflecting\n * the effective boundaries to use given the size of the blob.\n *\n * @private\n */\nfunction calculateEffectiveBoundaries(blob, start, end) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert.isInstance(blob, Blob, {\n      moduleName: 'workbox-range-requests',\n      funcName: 'calculateEffectiveBoundaries',\n      paramName: 'blob',\n    });\n  }\n\n  const blobSize = blob.size;\n\n  if (end > blobSize || start < 0) {\n    throw new WorkboxError('range-not-satisfiable', {\n      size: blobSize,\n      end,\n      start,\n    });\n  }\n\n  let effectiveStart;\n  let effectiveEnd;\n\n  if (start === null) {\n    effectiveStart = blobSize - end;\n    effectiveEnd = blobSize;\n  } else if (end === null) {\n    effectiveStart = start;\n    effectiveEnd = blobSize;\n  } else {\n    effectiveStart = start;\n    // Range values are inclusive, so add 1 to the value.\n    effectiveEnd = end + 1;\n  }\n\n  return {\n    start: effectiveStart,\n    end: effectiveEnd,\n  };\n}\n\nexport {calculateEffectiveBoundaries};\n"]},"metadata":{},"sourceType":"module"}