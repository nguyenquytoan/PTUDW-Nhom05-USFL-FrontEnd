{"ast":null,"code":"var fs = require('fs');\n\nvar test = require('tape');\n\nvar UAParser = require('ua-parser-js');\n\nvar url = require('url');\n\nvar work = require('webworkify');\n\nvar browser = new UAParser().setUA(navigator.userAgent).getBrowser();\nvar browserName = browser.name;\nvar browserVersion = browser.major; // Skip browsers with poor or nonexistant WebWorker support\n\nvar skip = browserName === 'IE' && browserVersion <= 10 || browserName === 'Safari' && browserVersion <= 5 || browserName === 'WebKit' && browserVersion <= 534 || // Old mobile safari\nbrowserName === 'Android Browser' && browserVersion <= 4;\nvar reference = fs.readFileSync(__dirname + '/../server/static/browserify.png');\ntest('binary download in WebWorker', {\n  skip: skip\n}, function (t) {\n  // We have to use a global url, since webworkify puts the worker in a Blob,\n  // which doesn't have a proper location\n  var testUrl = url.resolve(global.location.href, '/browserify.png');\n  var worker = work(require('./lib/webworker-worker.js'));\n  worker.addEventListener('message', function (ev) {\n    var data = new Buffer(new Uint8Array(ev.data));\n    t.ok(reference.equals(data), 'contents match');\n    t.end();\n  });\n  worker.postMessage(testUrl);\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/stream-http/test/browser/webworker.js"],"names":["fs","require","test","UAParser","url","work","browser","setUA","navigator","userAgent","getBrowser","browserName","name","browserVersion","major","skip","reference","readFileSync","__dirname","t","testUrl","resolve","global","location","href","worker","addEventListener","ev","data","Buffer","Uint8Array","ok","equals","end","postMessage"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,cAAD,CAAtB;;AACA,IAAIG,GAAG,GAAGH,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,YAAD,CAAlB;;AAEA,IAAIK,OAAO,GAAI,IAAIH,QAAJ,EAAD,CAAiBI,KAAjB,CAAuBC,SAAS,CAACC,SAAjC,EAA4CC,UAA5C,EAAd;AACA,IAAIC,WAAW,GAAGL,OAAO,CAACM,IAA1B;AACA,IAAIC,cAAc,GAAGP,OAAO,CAACQ,KAA7B,C,CACA;;AACA,IAAIC,IAAI,GAAKJ,WAAW,KAAK,IAAhB,IAAwBE,cAAc,IAAI,EAA3C,IACVF,WAAW,KAAK,QAAhB,IAA4BE,cAAc,IAAI,CADpC,IAEVF,WAAW,KAAK,QAAhB,IAA4BE,cAAc,IAAI,GAFpC,IAE4C;AACtDF,WAAW,KAAK,iBAAhB,IAAqCE,cAAc,IAAI,CAHzD;AAKA,IAAIG,SAAS,GAAGhB,EAAE,CAACiB,YAAH,CAAgBC,SAAS,GAAG,kCAA5B,CAAhB;AAEAhB,IAAI,CAAC,8BAAD,EAAiC;AACpCa,EAAAA,IAAI,EAAEA;AAD8B,CAAjC,EAED,UAAUI,CAAV,EAAa;AACf;AACA;AACA,MAAIC,OAAO,GAAGhB,GAAG,CAACiB,OAAJ,CAAYC,MAAM,CAACC,QAAP,CAAgBC,IAA5B,EAAkC,iBAAlC,CAAd;AACA,MAAIC,MAAM,GAAGpB,IAAI,CAACJ,OAAO,CAAC,2BAAD,CAAR,CAAjB;AACAwB,EAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,UAAUC,EAAV,EAAc;AAChD,QAAIC,IAAI,GAAG,IAAIC,MAAJ,CAAW,IAAIC,UAAJ,CAAeH,EAAE,CAACC,IAAlB,CAAX,CAAX;AACAT,IAAAA,CAAC,CAACY,EAAF,CAAKf,SAAS,CAACgB,MAAV,CAAiBJ,IAAjB,CAAL,EAA6B,gBAA7B;AACAT,IAAAA,CAAC,CAACc,GAAF;AACA,GAJD;AAKAR,EAAAA,MAAM,CAACS,WAAP,CAAmBd,OAAnB;AACA,CAbG,CAAJ","sourcesContent":["var fs = require('fs')\nvar test = require('tape')\nvar UAParser = require('ua-parser-js')\nvar url = require('url')\nvar work = require('webworkify')\n\nvar browser = (new UAParser()).setUA(navigator.userAgent).getBrowser()\nvar browserName = browser.name\nvar browserVersion = browser.major\n// Skip browsers with poor or nonexistant WebWorker support\nvar skip = ((browserName === 'IE' && browserVersion <= 10) ||\n\t(browserName === 'Safari' && browserVersion <= 5) ||\n\t(browserName === 'WebKit' && browserVersion <= 534) || // Old mobile safari\n\t(browserName === 'Android Browser' && browserVersion <= 4))\n\nvar reference = fs.readFileSync(__dirname + '/../server/static/browserify.png')\n\ntest('binary download in WebWorker', {\n\tskip: skip\n}, function (t) {\n\t// We have to use a global url, since webworkify puts the worker in a Blob,\n\t// which doesn't have a proper location\n\tvar testUrl = url.resolve(global.location.href, '/browserify.png')\n\tvar worker = work(require('./lib/webworker-worker.js'))\n\tworker.addEventListener('message', function (ev) {\n\t\tvar data = new Buffer(new Uint8Array(ev.data))\n\t\tt.ok(reference.equals(data), 'contents match')\n\t\tt.end()\n\t})\n\tworker.postMessage(testUrl)\n})"]},"metadata":{},"sourceType":"script"}