{"ast":null,"code":"var assert = require(\"assert\"),\n    sprintfjs = require(\"../src/sprintf.js\"),\n    sprintf = sprintfjs.sprintf,\n    vsprintf = sprintfjs.vsprintf;\n\ndescribe(\"sprintfjs\", function () {\n  var pi = 3.141592653589793;\n  it(\"should return formated strings for simple placeholders\", function () {\n    assert.equal(\"%\", sprintf(\"%%\"));\n    assert.equal(\"10\", sprintf(\"%b\", 2));\n    assert.equal(\"A\", sprintf(\"%c\", 65));\n    assert.equal(\"2\", sprintf(\"%d\", 2));\n    assert.equal(\"2\", sprintf(\"%i\", 2));\n    assert.equal(\"2\", sprintf(\"%d\", \"2\"));\n    assert.equal(\"2\", sprintf(\"%i\", \"2\"));\n    assert.equal('{\"foo\":\"bar\"}', sprintf(\"%j\", {\n      foo: \"bar\"\n    }));\n    assert.equal('[\"foo\",\"bar\"]', sprintf(\"%j\", [\"foo\", \"bar\"]));\n    assert.equal(\"2e+0\", sprintf(\"%e\", 2));\n    assert.equal(\"2\", sprintf(\"%u\", 2));\n    assert.equal(\"4294967294\", sprintf(\"%u\", -2));\n    assert.equal(\"2.2\", sprintf(\"%f\", 2.2));\n    assert.equal(\"3.141592653589793\", sprintf(\"%g\", pi));\n    assert.equal(\"10\", sprintf(\"%o\", 8));\n    assert.equal(\"%s\", sprintf(\"%s\", \"%s\"));\n    assert.equal(\"ff\", sprintf(\"%x\", 255));\n    assert.equal(\"FF\", sprintf(\"%X\", 255));\n    assert.equal(\"Polly wants a cracker\", sprintf(\"%2$s %3$s a %1$s\", \"cracker\", \"Polly\", \"wants\"));\n    assert.equal(\"Hello world!\", sprintf(\"Hello %(who)s!\", {\n      \"who\": \"world\"\n    }));\n  });\n  it(\"should return formated strings for complex placeholders\", function () {\n    // sign\n    assert.equal(\"2\", sprintf(\"%d\", 2));\n    assert.equal(\"-2\", sprintf(\"%d\", -2));\n    assert.equal(\"+2\", sprintf(\"%+d\", 2));\n    assert.equal(\"-2\", sprintf(\"%+d\", -2));\n    assert.equal(\"2\", sprintf(\"%i\", 2));\n    assert.equal(\"-2\", sprintf(\"%i\", -2));\n    assert.equal(\"+2\", sprintf(\"%+i\", 2));\n    assert.equal(\"-2\", sprintf(\"%+i\", -2));\n    assert.equal(\"2.2\", sprintf(\"%f\", 2.2));\n    assert.equal(\"-2.2\", sprintf(\"%f\", -2.2));\n    assert.equal(\"+2.2\", sprintf(\"%+f\", 2.2));\n    assert.equal(\"-2.2\", sprintf(\"%+f\", -2.2));\n    assert.equal(\"-2.3\", sprintf(\"%+.1f\", -2.34));\n    assert.equal(\"-0.0\", sprintf(\"%+.1f\", -0.01));\n    assert.equal(\"3.14159\", sprintf(\"%.6g\", pi));\n    assert.equal(\"3.14\", sprintf(\"%.3g\", pi));\n    assert.equal(\"3\", sprintf(\"%.1g\", pi));\n    assert.equal(\"-000000123\", sprintf(\"%+010d\", -123));\n    assert.equal(\"______-123\", sprintf(\"%+'_10d\", -123));\n    assert.equal(\"-234.34 123.2\", sprintf(\"%f %f\", -234.34, 123.2)); // padding\n\n    assert.equal(\"-0002\", sprintf(\"%05d\", -2));\n    assert.equal(\"-0002\", sprintf(\"%05i\", -2));\n    assert.equal(\"    <\", sprintf(\"%5s\", \"<\"));\n    assert.equal(\"0000<\", sprintf(\"%05s\", \"<\"));\n    assert.equal(\"____<\", sprintf(\"%'_5s\", \"<\"));\n    assert.equal(\">    \", sprintf(\"%-5s\", \">\"));\n    assert.equal(\">0000\", sprintf(\"%0-5s\", \">\"));\n    assert.equal(\">____\", sprintf(\"%'_-5s\", \">\"));\n    assert.equal(\"xxxxxx\", sprintf(\"%5s\", \"xxxxxx\"));\n    assert.equal(\"1234\", sprintf(\"%02u\", 1234));\n    assert.equal(\" -10.235\", sprintf(\"%8.3f\", -10.23456));\n    assert.equal(\"-12.34 xxx\", sprintf(\"%f %s\", -12.34, \"xxx\"));\n    assert.equal('{\\n  \"foo\": \"bar\"\\n}', sprintf(\"%2j\", {\n      foo: \"bar\"\n    }));\n    assert.equal('[\\n  \"foo\",\\n  \"bar\"\\n]', sprintf(\"%2j\", [\"foo\", \"bar\"])); // precision\n\n    assert.equal(\"2.3\", sprintf(\"%.1f\", 2.345));\n    assert.equal(\"xxxxx\", sprintf(\"%5.5s\", \"xxxxxx\"));\n    assert.equal(\"    x\", sprintf(\"%5.1s\", \"xxxxxx\"));\n  });\n  it(\"should return formated strings for callbacks\", function () {\n    assert.equal(\"foobar\", sprintf(\"%s\", function () {\n      return \"foobar\";\n    }));\n    assert.equal(Date.now(), sprintf(\"%s\", Date.now)); // should pass...\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/sprintf-js/test/test.js"],"names":["assert","require","sprintfjs","sprintf","vsprintf","describe","pi","it","equal","foo","Date","now"],"mappings":"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","sourcesContent":["var assert = require(\"assert\"),\n    sprintfjs = require(\"../src/sprintf.js\"),\n    sprintf = sprintfjs.sprintf,\n    vsprintf = sprintfjs.vsprintf\n\ndescribe(\"sprintfjs\", function() {\n    var pi = 3.141592653589793\n\n    it(\"should return formated strings for simple placeholders\", function() {\n        assert.equal(\"%\", sprintf(\"%%\"))\n        assert.equal(\"10\", sprintf(\"%b\", 2))\n        assert.equal(\"A\", sprintf(\"%c\", 65))\n        assert.equal(\"2\", sprintf(\"%d\", 2))\n        assert.equal(\"2\", sprintf(\"%i\", 2))\n        assert.equal(\"2\", sprintf(\"%d\", \"2\"))\n        assert.equal(\"2\", sprintf(\"%i\", \"2\"))\n        assert.equal('{\"foo\":\"bar\"}', sprintf(\"%j\", {foo: \"bar\"}))\n        assert.equal('[\"foo\",\"bar\"]', sprintf(\"%j\", [\"foo\", \"bar\"]))\n        assert.equal(\"2e+0\", sprintf(\"%e\", 2))\n        assert.equal(\"2\", sprintf(\"%u\", 2))\n        assert.equal(\"4294967294\", sprintf(\"%u\", -2))\n        assert.equal(\"2.2\", sprintf(\"%f\", 2.2))\n        assert.equal(\"3.141592653589793\", sprintf(\"%g\", pi))\n        assert.equal(\"10\", sprintf(\"%o\", 8))\n        assert.equal(\"%s\", sprintf(\"%s\", \"%s\"))\n        assert.equal(\"ff\", sprintf(\"%x\", 255))\n        assert.equal(\"FF\", sprintf(\"%X\", 255))\n        assert.equal(\"Polly wants a cracker\", sprintf(\"%2$s %3$s a %1$s\", \"cracker\", \"Polly\", \"wants\"))\n        assert.equal(\"Hello world!\", sprintf(\"Hello %(who)s!\", {\"who\": \"world\"}))\n    })\n\n    it(\"should return formated strings for complex placeholders\", function() {\n        // sign\n        assert.equal(\"2\", sprintf(\"%d\", 2))\n        assert.equal(\"-2\", sprintf(\"%d\", -2))\n        assert.equal(\"+2\", sprintf(\"%+d\", 2))\n        assert.equal(\"-2\", sprintf(\"%+d\", -2))\n        assert.equal(\"2\", sprintf(\"%i\", 2))\n        assert.equal(\"-2\", sprintf(\"%i\", -2))\n        assert.equal(\"+2\", sprintf(\"%+i\", 2))\n        assert.equal(\"-2\", sprintf(\"%+i\", -2))\n        assert.equal(\"2.2\", sprintf(\"%f\", 2.2))\n        assert.equal(\"-2.2\", sprintf(\"%f\", -2.2))\n        assert.equal(\"+2.2\", sprintf(\"%+f\", 2.2))\n        assert.equal(\"-2.2\", sprintf(\"%+f\", -2.2))\n        assert.equal(\"-2.3\", sprintf(\"%+.1f\", -2.34))\n        assert.equal(\"-0.0\", sprintf(\"%+.1f\", -0.01))\n        assert.equal(\"3.14159\", sprintf(\"%.6g\", pi))\n        assert.equal(\"3.14\", sprintf(\"%.3g\", pi))\n        assert.equal(\"3\", sprintf(\"%.1g\", pi))\n        assert.equal(\"-000000123\", sprintf(\"%+010d\", -123))\n        assert.equal(\"______-123\", sprintf(\"%+'_10d\", -123))\n        assert.equal(\"-234.34 123.2\", sprintf(\"%f %f\", -234.34, 123.2))\n\n        // padding\n        assert.equal(\"-0002\", sprintf(\"%05d\", -2))\n        assert.equal(\"-0002\", sprintf(\"%05i\", -2))\n        assert.equal(\"    <\", sprintf(\"%5s\", \"<\"))\n        assert.equal(\"0000<\", sprintf(\"%05s\", \"<\"))\n        assert.equal(\"____<\", sprintf(\"%'_5s\", \"<\"))\n        assert.equal(\">    \", sprintf(\"%-5s\", \">\"))\n        assert.equal(\">0000\", sprintf(\"%0-5s\", \">\"))\n        assert.equal(\">____\", sprintf(\"%'_-5s\", \">\"))\n        assert.equal(\"xxxxxx\", sprintf(\"%5s\", \"xxxxxx\"))\n        assert.equal(\"1234\", sprintf(\"%02u\", 1234))\n        assert.equal(\" -10.235\", sprintf(\"%8.3f\", -10.23456))\n        assert.equal(\"-12.34 xxx\", sprintf(\"%f %s\", -12.34, \"xxx\"))\n        assert.equal('{\\n  \"foo\": \"bar\"\\n}', sprintf(\"%2j\", {foo: \"bar\"}))\n        assert.equal('[\\n  \"foo\",\\n  \"bar\"\\n]', sprintf(\"%2j\", [\"foo\", \"bar\"]))\n\n        // precision\n        assert.equal(\"2.3\", sprintf(\"%.1f\", 2.345))\n        assert.equal(\"xxxxx\", sprintf(\"%5.5s\", \"xxxxxx\"))\n        assert.equal(\"    x\", sprintf(\"%5.1s\", \"xxxxxx\"))\n\n    })\n\n    it(\"should return formated strings for callbacks\", function() {\n        assert.equal(\"foobar\", sprintf(\"%s\", function() { return \"foobar\" }))\n        assert.equal(Date.now(), sprintf(\"%s\", Date.now)) // should pass...\n    })\n})\n"]},"metadata":{},"sourceType":"script"}