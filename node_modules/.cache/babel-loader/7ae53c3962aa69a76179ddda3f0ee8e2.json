{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\n\nconst crypto = require('crypto');\n\nconst http = require('http');\n\nconst PerMessageDeflate = require('./permessage-deflate');\n\nconst extension = require('./extension');\n\nconst WebSocket = require('./websocket');\n\nconst {\n  GUID\n} = require('./constants');\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\n\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} options.backlog The maximum length of the queue of pending\n   *     connections\n   * @param {Boolean} options.clientTracking Specifies whether or not to track\n   *     clients\n   * @param {Function} options.handleProtocols An hook to handle protocols\n   * @param {String} options.host The hostname where to bind the server\n   * @param {Number} options.maxPayload The maximum allowed message size\n   * @param {Boolean} options.noServer Enable no server mode\n   * @param {String} options.path Accept only connections matching this path\n   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable\n   *     permessage-deflate\n   * @param {Number} options.port The port where to bind the server\n   * @param {http.Server} options.server A pre-created HTTP/S server to use\n   * @param {Function} options.verifyClient An hook to reject connections\n   * @param {Function} callback A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n    options = Object.assign({\n      maxPayload: 100 * 1024 * 1024,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null,\n      // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null\n    }, options);\n\n    if (options.port == null && !options.server && !options.noServer) {\n      throw new TypeError('One of the \"port\", \"server\", or \"noServer\" options must be specified');\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n\n      this._server.listen(options.port, options.host, options.backlog, callback);\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, ws => {\n            this.emit('connection', ws, req);\n          });\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) this.clients = new Set();\n    this.options = options;\n  }\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n\n\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n  /**\n   * Close the server.\n   *\n   * @param {Function} cb Callback\n   * @public\n   */\n\n\n  close(cb) {\n    if (cb) this.once('close', cb); //\n    // Terminate all associated clients.\n    //\n\n    if (this.clients) {\n      for (const client of this.clients) client.terminate();\n    }\n\n    const server = this._server;\n\n    if (server) {\n      this._removeListeners();\n\n      this._removeListeners = this._server = null; //\n      // Close the http server if it was internally created.\n      //\n\n      if (this.options.port != null) {\n        server.close(() => this.emit('close'));\n        return;\n      }\n    }\n\n    process.nextTick(emitClose, this);\n  }\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n\n\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n\n\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n    const key = req.headers['sec-websocket-key'] !== undefined ? req.headers['sec-websocket-key'].trim() : false;\n    const version = +req.headers['sec-websocket-version'];\n    const extensions = {};\n\n    if (req.method !== 'GET' || req.headers.upgrade.toLowerCase() !== 'websocket' || !key || !keyRegex.test(key) || version !== 8 && version !== 13 || !this.shouldHandle(req)) {\n      return abortHandshake(socket, 400);\n    }\n\n    if (this.options.perMessageDeflate) {\n      const perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);\n\n      try {\n        const offers = extension.parse(req.headers['sec-websocket-extensions']);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    } //\n    // Optionally call external client verification handler.\n    //\n\n\n    if (this.options.verifyClient) {\n      const info = {\n        origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.connection.authorized || req.connection.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(key, extensions, req, socket, head, cb);\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(key, extensions, req, socket, head, cb);\n  }\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Object} extensions The accepted extensions\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @private\n   */\n\n\n  completeUpgrade(key, extensions, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n    const digest = crypto.createHash('sha1').update(key + GUID).digest('base64');\n    const headers = ['HTTP/1.1 101 Switching Protocols', 'Upgrade: websocket', 'Connection: Upgrade', `Sec-WebSocket-Accept: ${digest}`];\n    const ws = new WebSocket(null);\n    var protocol = req.headers['sec-websocket-protocol'];\n\n    if (protocol) {\n      protocol = protocol.trim().split(/ *, */); //\n      // Optionally call external protocol selection handler.\n      //\n\n      if (this.options.handleProtocols) {\n        protocol = this.options.handleProtocols(protocol, req);\n      } else {\n        protocol = protocol[0];\n      }\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws.protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    } //\n    // Allow external modification/inspection of handshake headers.\n    //\n\n\n    this.emit('headers', headers, req);\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n    ws.setSocket(socket, head, this.options.maxPayload);\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => this.clients.delete(ws));\n    }\n\n    cb(ws);\n  }\n\n}\n\nmodule.exports = WebSocketServer;\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when called\n * @private\n */\n\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\n\n\nfunction emitClose(server) {\n  server.emit('close');\n}\n/**\n * Handle premature socket errors.\n *\n * @private\n */\n\n\nfunction socketOnError() {\n  this.destroy();\n}\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {net.Socket} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\n\n\nfunction abortHandshake(socket, code, message, headers) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    headers = Object.assign({\n      Connection: 'close',\n      'Content-type': 'text/html',\n      'Content-Length': Buffer.byteLength(message)\n    }, headers);\n    socket.write(`HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` + Object.keys(headers).map(h => `${h}: ${headers[h]}`).join('\\r\\n') + '\\r\\n\\r\\n' + message);\n  }\n\n  socket.removeListener('error', socketOnError);\n  socket.destroy();\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/webpack-dev-server/node_modules/ws/lib/websocket-server.js"],"names":["EventEmitter","require","crypto","http","PerMessageDeflate","extension","WebSocket","GUID","keyRegex","WebSocketServer","constructor","options","callback","Object","assign","maxPayload","perMessageDeflate","handleProtocols","clientTracking","verifyClient","noServer","backlog","server","host","path","port","TypeError","_server","createServer","req","res","body","STATUS_CODES","writeHead","length","end","listen","_removeListeners","addListeners","listening","emit","bind","error","upgrade","socket","head","handleUpgrade","ws","clients","Set","address","Error","close","cb","once","client","terminate","process","nextTick","emitClose","shouldHandle","index","url","indexOf","pathname","slice","on","socketOnError","key","headers","undefined","trim","version","extensions","method","toLowerCase","test","abortHandshake","offers","parse","extensionName","accept","err","info","origin","secure","connection","authorized","encrypted","verified","code","message","completeUpgrade","readable","writable","destroy","digest","createHash","update","protocol","split","push","params","value","format","_extensions","write","concat","join","removeListener","setSocket","add","delete","module","exports","map","event","keys","removeListeners","Connection","Buffer","byteLength","h"],"mappings":"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","sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst crypto = require('crypto');\nconst http = require('http');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst extension = require('./extension');\nconst WebSocket = require('./websocket');\nconst { GUID } = require('./constants');\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} options.backlog The maximum length of the queue of pending\n   *     connections\n   * @param {Boolean} options.clientTracking Specifies whether or not to track\n   *     clients\n   * @param {Function} options.handleProtocols An hook to handle protocols\n   * @param {String} options.host The hostname where to bind the server\n   * @param {Number} options.maxPayload The maximum allowed message size\n   * @param {Boolean} options.noServer Enable no server mode\n   * @param {String} options.path Accept only connections matching this path\n   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable\n   *     permessage-deflate\n   * @param {Number} options.port The port where to bind the server\n   * @param {http.Server} options.server A pre-created HTTP/S server to use\n   * @param {Function} options.verifyClient An hook to reject connections\n   * @param {Function} callback A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = Object.assign(\n      {\n        maxPayload: 100 * 1024 * 1024,\n        perMessageDeflate: false,\n        handleProtocols: null,\n        clientTracking: true,\n        verifyClient: null,\n        noServer: false,\n        backlog: null, // use default (511 as implemented in net.js)\n        server: null,\n        host: null,\n        path: null,\n        port: null\n      },\n      options\n    );\n\n    if (options.port == null && !options.server && !options.noServer) {\n      throw new TypeError(\n        'One of the \"port\", \"server\", or \"noServer\" options must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, (ws) => {\n            this.emit('connection', ws, req);\n          });\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) this.clients = new Set();\n    this.options = options;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Close the server.\n   *\n   * @param {Function} cb Callback\n   * @public\n   */\n  close(cb) {\n    if (cb) this.once('close', cb);\n\n    //\n    // Terminate all associated clients.\n    //\n    if (this.clients) {\n      for (const client of this.clients) client.terminate();\n    }\n\n    const server = this._server;\n\n    if (server) {\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // Close the http server if it was internally created.\n      //\n      if (this.options.port != null) {\n        server.close(() => this.emit('close'));\n        return;\n      }\n    }\n\n    process.nextTick(emitClose, this);\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key =\n      req.headers['sec-websocket-key'] !== undefined\n        ? req.headers['sec-websocket-key'].trim()\n        : false;\n    const version = +req.headers['sec-websocket-version'];\n    const extensions = {};\n\n    if (\n      req.method !== 'GET' ||\n      req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !key ||\n      !keyRegex.test(key) ||\n      (version !== 8 && version !== 13) ||\n      !this.shouldHandle(req)\n    ) {\n      return abortHandshake(socket, 400);\n    }\n\n    if (this.options.perMessageDeflate) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(req.headers['sec-websocket-extensions']);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.connection.authorized || req.connection.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(key, extensions, req, socket, head, cb);\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(key, extensions, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Object} extensions The accepted extensions\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @private\n   */\n  completeUpgrade(key, extensions, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    const digest = crypto\n      .createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new WebSocket(null);\n    var protocol = req.headers['sec-websocket-protocol'];\n\n    if (protocol) {\n      protocol = protocol.trim().split(/ *, */);\n\n      //\n      // Optionally call external protocol selection handler.\n      //\n      if (this.options.handleProtocols) {\n        protocol = this.options.handleProtocols(protocol, req);\n      } else {\n        protocol = protocol[0];\n      }\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws.protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, this.options.maxPayload);\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => this.clients.delete(ws));\n    }\n\n    cb(ws);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server.emit('close');\n}\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {net.Socket} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    headers = Object.assign(\n      {\n        Connection: 'close',\n        'Content-type': 'text/html',\n        'Content-Length': Buffer.byteLength(message)\n      },\n      headers\n    );\n\n    socket.write(\n      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n        Object.keys(headers)\n          .map((h) => `${h}: ${headers[h]}`)\n          .join('\\r\\n') +\n        '\\r\\n\\r\\n' +\n        message\n    );\n  }\n\n  socket.removeListener('error', socketOnError);\n  socket.destroy();\n}\n"]},"metadata":{},"sourceType":"script"}