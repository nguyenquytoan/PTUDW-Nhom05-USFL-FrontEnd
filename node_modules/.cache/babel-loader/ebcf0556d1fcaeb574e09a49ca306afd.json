{"ast":null,"code":"#!/usr/bin/env node\n\nvar fs = require('fs');\n\nvar browserslist = require('./');\n\nvar updateDb = require('./update-db');\n\nvar pkg = require('./package.json');\n\nvar args = process.argv.slice(2);\nvar USAGE = 'Usage:\\n' + '  npx browserslist\\n' + '  npx browserslist \"QUERIES\"\\n' + '  npx browserslist --json \"QUERIES\"\\n' + '  npx browserslist --config=\"path/to/browserlist/file\"\\n' + '  npx browserslist --coverage \"QUERIES\"\\n' + '  npx browserslist --coverage=US \"QUERIES\"\\n' + '  npx browserslist --coverage=US,RU,global \"QUERIES\"\\n' + '  npx browserslist --env=\"environment name defined in config\"\\n' + '  npx browserslist --stats=\"path/to/browserlist/stats/file\"\\n' + '  npx browserslist --update-db';\n\nfunction isArg(arg) {\n  return args.some(function (str) {\n    return str === arg || str.indexOf(arg + '=') === 0;\n  });\n}\n\nfunction error(msg) {\n  process.stderr.write('browserslist: ' + msg + '\\n');\n  process.exit(1);\n}\n\nif (isArg('--help') || isArg('-h')) {\n  process.stdout.write(pkg.description + '.\\n\\n' + USAGE + '\\n');\n} else if (isArg('--version') || isArg('-v')) {\n  process.stdout.write('browserslist ' + pkg.version + '\\n');\n} else if (isArg('--update-db')) {\n  updateDb(function (str) {\n    process.stdout.write(str);\n  });\n} else {\n  var mode = 'browsers';\n  var opts = {};\n  var queries;\n  var areas;\n\n  for (var i = 0; i < args.length; i++) {\n    if (args[i][0] !== '-') {\n      queries = args[i].replace(/^[\"']|[\"']$/g, '');\n      continue;\n    }\n\n    var arg = args[i].split('=');\n    var name = arg[0];\n    var value = arg[1];\n    if (value) value = value.replace(/^[\"']|[\"']$/g, '');\n\n    if (name === '--config' || name === '-b') {\n      opts.config = value;\n    } else if (name === '--env' || name === '-e') {\n      opts.env = value;\n    } else if (name === '--stats' || name === '-s') {\n      opts.stats = value;\n    } else if (name === '--coverage' || name === '-c') {\n      if (mode !== 'json') mode = 'coverage';\n\n      if (value) {\n        areas = value.split(',');\n      } else {\n        areas = ['global'];\n      }\n    } else if (name === '--json') {\n      mode = 'json';\n    } else {\n      error('Unknown arguments ' + args[i] + '.\\n\\n' + USAGE);\n    }\n  }\n\n  var browsers;\n\n  try {\n    browsers = browserslist(queries, opts);\n  } catch (e) {\n    if (e.name === 'BrowserslistError') {\n      error(e.message);\n    } else {\n      throw e;\n    }\n  }\n\n  var coverage;\n\n  if (mode === 'browsers') {\n    browsers.forEach(function (browser) {\n      process.stdout.write(browser + '\\n');\n    });\n  } else if (areas) {\n    coverage = areas.map(function (area) {\n      var stats;\n\n      if (area !== 'global') {\n        stats = area;\n      } else if (opts.stats) {\n        stats = JSON.parse(fs.readFileSync(opts.stats));\n      }\n\n      var result = browserslist.coverage(browsers, stats);\n      var round = Math.round(result * 100) / 100.0;\n      return [area, round];\n    });\n\n    if (mode === 'coverage') {\n      var prefix = 'These browsers account for ';\n      process.stdout.write(prefix);\n      coverage.forEach(function (data, index) {\n        var area = data[0];\n        var round = data[1];\n        var end = 'globally';\n\n        if (area && area !== 'global') {\n          end = 'in the ' + area.toUpperCase();\n        } else if (opts.stats) {\n          end = 'in custom statistics';\n        }\n\n        if (index !== 0) {\n          process.stdout.write(prefix.replace(/./g, ' '));\n        }\n\n        process.stdout.write(round + '% of all users ' + end + '\\n');\n      });\n    }\n  }\n\n  if (mode === 'json') {\n    var data = {\n      browsers: browsers\n    };\n\n    if (coverage) {\n      data.coverage = coverage.reduce(function (object, j) {\n        object[j[0]] = j[1];\n        return object;\n      }, {});\n    }\n\n    process.stdout.write(JSON.stringify(data, null, '  ') + '\\n');\n  }\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-dev-utils/node_modules/browserslist/cli.js"],"names":["fs","require","browserslist","updateDb","pkg","args","process","argv","slice","USAGE","isArg","arg","some","str","indexOf","error","msg","stderr","write","exit","stdout","description","version","mode","opts","queries","areas","i","length","replace","split","name","value","config","env","stats","browsers","e","message","coverage","forEach","browser","map","area","JSON","parse","readFileSync","result","round","Math","prefix","data","index","end","toUpperCase","reduce","object","j","stringify"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nvar fs = require('fs')\n\nvar browserslist = require('./')\nvar updateDb = require('./update-db')\nvar pkg = require('./package.json')\n\nvar args = process.argv.slice(2)\n\nvar USAGE = 'Usage:\\n' +\n            '  npx browserslist\\n' +\n            '  npx browserslist \"QUERIES\"\\n' +\n            '  npx browserslist --json \"QUERIES\"\\n' +\n            '  npx browserslist --config=\"path/to/browserlist/file\"\\n' +\n            '  npx browserslist --coverage \"QUERIES\"\\n' +\n            '  npx browserslist --coverage=US \"QUERIES\"\\n' +\n            '  npx browserslist --coverage=US,RU,global \"QUERIES\"\\n' +\n            '  npx browserslist --env=\"environment name defined in config\"\\n' +\n            '  npx browserslist --stats=\"path/to/browserlist/stats/file\"\\n' +\n            '  npx browserslist --update-db'\n\nfunction isArg (arg) {\n  return args.some(function (str) {\n    return str === arg || str.indexOf(arg + '=') === 0\n  })\n}\n\nfunction error (msg) {\n  process.stderr.write('browserslist: ' + msg + '\\n')\n  process.exit(1)\n}\n\nif (isArg('--help') || isArg('-h')) {\n  process.stdout.write(pkg.description + '.\\n\\n' + USAGE + '\\n')\n} else if (isArg('--version') || isArg('-v')) {\n  process.stdout.write('browserslist ' + pkg.version + '\\n')\n} else if (isArg('--update-db')) {\n  updateDb(function (str) {\n    process.stdout.write(str)\n  })\n} else {\n  var mode = 'browsers'\n  var opts = { }\n  var queries\n  var areas\n\n  for (var i = 0; i < args.length; i++) {\n    if (args[i][0] !== '-') {\n      queries = args[i].replace(/^[\"']|[\"']$/g, '')\n      continue\n    }\n\n    var arg = args[i].split('=')\n    var name = arg[0]\n    var value = arg[1]\n\n    if (value) value = value.replace(/^[\"']|[\"']$/g, '')\n\n    if (name === '--config' || name === '-b') {\n      opts.config = value\n    } else if (name === '--env' || name === '-e') {\n      opts.env = value\n    } else if (name === '--stats' || name === '-s') {\n      opts.stats = value\n    } else if (name === '--coverage' || name === '-c') {\n      if (mode !== 'json') mode = 'coverage'\n      if (value) {\n        areas = value.split(',')\n      } else {\n        areas = ['global']\n      }\n    } else if (name === '--json') {\n      mode = 'json'\n    } else {\n      error('Unknown arguments ' + args[i] + '.\\n\\n' + USAGE)\n    }\n  }\n\n  var browsers\n  try {\n    browsers = browserslist(queries, opts)\n  } catch (e) {\n    if (e.name === 'BrowserslistError') {\n      error(e.message)\n    } else {\n      throw e\n    }\n  }\n\n  var coverage\n  if (mode === 'browsers') {\n    browsers.forEach(function (browser) {\n      process.stdout.write(browser + '\\n')\n    })\n  } else if (areas) {\n    coverage = areas.map(function (area) {\n      var stats\n      if (area !== 'global') {\n        stats = area\n      } else if (opts.stats) {\n        stats = JSON.parse(fs.readFileSync(opts.stats))\n      }\n      var result = browserslist.coverage(browsers, stats)\n      var round = Math.round(result * 100) / 100.0\n\n      return [area, round]\n    })\n\n    if (mode === 'coverage') {\n      var prefix = 'These browsers account for '\n      process.stdout.write(prefix)\n      coverage.forEach(function (data, index) {\n        var area = data[0]\n        var round = data[1]\n        var end = 'globally'\n        if (area && area !== 'global') {\n          end = 'in the ' + area.toUpperCase()\n        } else if (opts.stats) {\n          end = 'in custom statistics'\n        }\n\n        if (index !== 0) {\n          process.stdout.write(prefix.replace(/./g, ' '))\n        }\n\n        process.stdout.write(round + '% of all users ' + end + '\\n')\n      })\n    }\n  }\n\n  if (mode === 'json') {\n    var data = { browsers: browsers }\n    if (coverage) {\n      data.coverage = coverage.reduce(function (object, j) {\n        object[j[0]] = j[1]\n        return object\n      }, { })\n    }\n    process.stdout.write(JSON.stringify(data, null, '  ') + '\\n')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}