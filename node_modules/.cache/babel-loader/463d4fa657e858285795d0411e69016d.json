{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromConditionalExpression;\n/**\n * Extractor function for a ConditionalExpression type value node.\n *\n * @param - value - AST Value object with type `ConditionalExpression`\n * @returns - The extracted value converted to correct type.\n */\n\nfunction extractValueFromConditionalExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('./index.js').default;\n\n  var test = value.test,\n      alternate = value.alternate,\n      consequent = value.consequent;\n  return getValue(test) ? getValue(consequent) : getValue(alternate);\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/lib/values/expressions/ConditionalExpression.js"],"names":["Object","defineProperty","exports","value","default","extractValueFromConditionalExpression","getValue","require","test","alternate","consequent"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,qCAAlB;AACA;;;;;;;AAMA,SAASA,qCAAT,CAA+CF,KAA/C,EAAsD;AACpD;AACA,MAAIG,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBH,OAArC;;AACA,MAAII,IAAI,GAAGL,KAAK,CAACK,IAAjB;AAAA,MACIC,SAAS,GAAGN,KAAK,CAACM,SADtB;AAAA,MAEIC,UAAU,GAAGP,KAAK,CAACO,UAFvB;AAKA,SAAOJ,QAAQ,CAACE,IAAD,CAAR,GAAiBF,QAAQ,CAACI,UAAD,CAAzB,GAAwCJ,QAAQ,CAACG,SAAD,CAAvD;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromConditionalExpression;\n/**\n * Extractor function for a ConditionalExpression type value node.\n *\n * @param - value - AST Value object with type `ConditionalExpression`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromConditionalExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('./index.js').default;\n  var test = value.test,\n      alternate = value.alternate,\n      consequent = value.consequent;\n\n\n  return getValue(test) ? getValue(consequent) : getValue(alternate);\n}"]},"metadata":{},"sourceType":"script"}