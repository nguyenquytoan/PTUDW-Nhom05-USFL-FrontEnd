{"ast":null,"code":"var postcss = require(\"postcss\");\n/**\n * font variant convertion map\n *\n * @type {Object}\n */\n\n\nvar fontVariantProperties = {\n  \"font-variant-ligatures\": {\n    \"common-ligatures\": \"\\\"liga\\\", \\\"clig\\\"\",\n    \"no-common-ligatures\": \"\\\"liga\\\", \\\"clig off\\\"\",\n    \"discretionary-ligatures\": \"\\\"dlig\\\"\",\n    \"no-discretionary-ligatures\": \"\\\"dlig\\\" off\",\n    \"historical-ligatures\": \"\\\"hlig\\\"\",\n    \"no-historical-ligatures\": \"\\\"hlig\\\" off\",\n    contextual: \"\\\"calt\\\"\",\n    \"no-contextual\": \"\\\"calt\\\" off\"\n  },\n  \"font-variant-position\": {\n    sub: \"\\\"subs\\\"\",\n    \"super\": \"\\\"sups\\\"\",\n    normal: \"\\\"subs\\\" off, \\\"sups\\\" off\"\n  },\n  \"font-variant-caps\": {\n    \"small-caps\": \"\\\"c2sc\\\"\",\n    \"all-small-caps\": \"\\\"smcp\\\", \\\"c2sc\\\"\",\n    \"petite-caps\": \"\\\"pcap\\\"\",\n    \"all-petite-caps\": \"\\\"pcap\\\", \\\"c2pc\\\"\",\n    unicase: \"\\\"unic\\\"\",\n    \"titling-caps\": \"\\\"titl\\\"\"\n  },\n  \"font-variant-numeric\": {\n    \"lining-nums\": \"\\\"lnum\\\"\",\n    \"oldstyle-nums\": \"\\\"onum\\\"\",\n    \"proportional-nums\": \"\\\"pnum\\\"\",\n    \"tabular-nums\": \"\\\"tnum\\\"\",\n    \"diagonal-fractions\": \"\\\"frac\\\"\",\n    \"stacked-fractions\": \"\\\"afrc\\\"\",\n    ordinal: \"\\\"ordn\\\"\",\n    \"slashed-zero\": \"\\\"zero\\\"\"\n  },\n  \"font-kerning\": {\n    normal: \"\\\"kern\\\"\",\n    none: \"\\\"kern\\\" off\"\n  },\n  \"font-variant\": {\n    normal: \"normal\",\n    inherit: \"inherit\"\n  }\n}; // The `font-variant` property is a shorthand for all the others.\n\nfor (var prop in fontVariantProperties) {\n  var keys = fontVariantProperties[prop];\n\n  for (var key in keys) {\n    if (!(key in fontVariantProperties[\"font-variant\"])) {\n      fontVariantProperties[\"font-variant\"][key] = keys[key];\n    }\n  }\n} // Find font-feature-settings declaration before given declaration,\n// create if does not exist\n\n\nfunction getFontFeatureSettingsPrevTo(decl) {\n  var fontFeatureSettings = null;\n  decl.parent.walkDecls(function (decl) {\n    if (decl.prop === \"font-feature-settings\") {\n      fontFeatureSettings = decl;\n    }\n  });\n\n  if (fontFeatureSettings === null) {\n    fontFeatureSettings = decl.clone();\n    fontFeatureSettings.prop = \"font-feature-settings\";\n    fontFeatureSettings.value = \"\";\n    decl.parent.insertBefore(decl, fontFeatureSettings);\n  }\n\n  return fontFeatureSettings;\n}\n/**\n * Expose the font-variant plugin.\n */\n\n\nmodule.exports = postcss.plugin(\"postcss-font-variant\", function () {\n  return function (styles) {\n    styles.walkRules(function (rule) {\n      var fontFeatureSettings = null; // read custom media queries\n\n      rule.walkDecls(function (decl) {\n        if (!fontVariantProperties[decl.prop]) {\n          return null;\n        }\n\n        var newValue = decl.value;\n\n        if (decl.prop === \"font-variant\") {\n          newValue = decl.value.split(/\\s+/g).map(function (val) {\n            return fontVariantProperties[\"font-variant\"][val];\n          }).join(\", \");\n        } else if (fontVariantProperties[decl.prop][decl.value]) {\n          newValue = fontVariantProperties[decl.prop][decl.value];\n        }\n\n        if (fontFeatureSettings === null) {\n          fontFeatureSettings = getFontFeatureSettingsPrevTo(decl);\n        }\n\n        if (fontFeatureSettings.value && fontFeatureSettings.value !== newValue) {\n          fontFeatureSettings.value += \", \" + newValue;\n        } else {\n          fontFeatureSettings.value = newValue;\n        }\n      });\n    });\n  };\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-font-variant/index.js"],"names":["postcss","require","fontVariantProperties","contextual","sub","normal","unicase","ordinal","none","inherit","prop","keys","key","getFontFeatureSettingsPrevTo","decl","fontFeatureSettings","parent","walkDecls","clone","value","insertBefore","module","exports","plugin","styles","walkRules","rule","newValue","split","map","val","join"],"mappings":"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","sourcesContent":["var postcss = require(\"postcss\");\n\n/**\n * font variant convertion map\n *\n * @type {Object}\n */\nvar fontVariantProperties = {\n  \"font-variant-ligatures\": {\n    \"common-ligatures\": \"\\\"liga\\\", \\\"clig\\\"\",\n    \"no-common-ligatures\": \"\\\"liga\\\", \\\"clig off\\\"\",\n    \"discretionary-ligatures\": \"\\\"dlig\\\"\",\n    \"no-discretionary-ligatures\": \"\\\"dlig\\\" off\",\n    \"historical-ligatures\": \"\\\"hlig\\\"\",\n    \"no-historical-ligatures\": \"\\\"hlig\\\" off\",\n    contextual: \"\\\"calt\\\"\",\n    \"no-contextual\": \"\\\"calt\\\" off\"\n  },\n\n  \"font-variant-position\": {\n    sub: \"\\\"subs\\\"\",\n    \"super\": \"\\\"sups\\\"\",\n    normal: \"\\\"subs\\\" off, \\\"sups\\\" off\"\n  },\n\n  \"font-variant-caps\": {\n    \"small-caps\": \"\\\"c2sc\\\"\",\n    \"all-small-caps\": \"\\\"smcp\\\", \\\"c2sc\\\"\",\n    \"petite-caps\": \"\\\"pcap\\\"\",\n    \"all-petite-caps\": \"\\\"pcap\\\", \\\"c2pc\\\"\",\n    unicase: \"\\\"unic\\\"\",\n    \"titling-caps\": \"\\\"titl\\\"\"\n  },\n\n  \"font-variant-numeric\": {\n    \"lining-nums\": \"\\\"lnum\\\"\",\n    \"oldstyle-nums\": \"\\\"onum\\\"\",\n    \"proportional-nums\": \"\\\"pnum\\\"\",\n    \"tabular-nums\": \"\\\"tnum\\\"\",\n    \"diagonal-fractions\": \"\\\"frac\\\"\",\n    \"stacked-fractions\": \"\\\"afrc\\\"\",\n    ordinal: \"\\\"ordn\\\"\",\n    \"slashed-zero\": \"\\\"zero\\\"\"\n  },\n\n  \"font-kerning\": {\n    normal: \"\\\"kern\\\"\",\n    none: \"\\\"kern\\\" off\"\n  },\n\n  \"font-variant\": {\n    normal: \"normal\",\n    inherit: \"inherit\"\n  }\n}\n\n// The `font-variant` property is a shorthand for all the others.\nfor (var prop in fontVariantProperties) {\n  var keys = fontVariantProperties[prop]\n  for (var key in keys) {\n    if (!(key in fontVariantProperties[\"font-variant\"])) {\n      fontVariantProperties[\"font-variant\"][key] = keys[key]\n    }\n  }\n}\n\n// Find font-feature-settings declaration before given declaration,\n// create if does not exist\nfunction getFontFeatureSettingsPrevTo(decl) {\n  var fontFeatureSettings = null;\n  decl.parent.walkDecls(function(decl) {\n    if (decl.prop === \"font-feature-settings\") {\n      fontFeatureSettings = decl;\n    }\n  })\n\n  if (fontFeatureSettings === null) {\n    fontFeatureSettings = decl.clone()\n    fontFeatureSettings.prop = \"font-feature-settings\"\n    fontFeatureSettings.value = \"\"\n    decl.parent.insertBefore(decl, fontFeatureSettings)\n  }\n  return fontFeatureSettings\n}\n\n/**\n * Expose the font-variant plugin.\n */\nmodule.exports = postcss.plugin(\"postcss-font-variant\", function() {\n  return function(styles) {\n    styles.walkRules(function(rule) {\n      var fontFeatureSettings = null\n      // read custom media queries\n      rule.walkDecls(function(decl) {\n        if (!fontVariantProperties[decl.prop]) {\n          return null\n        }\n\n        var newValue = decl.value\n        if (decl.prop === \"font-variant\") {\n          newValue = decl.value.split(/\\s+/g).map(function(val) {\n            return fontVariantProperties[\"font-variant\"][val]\n          }).join(\", \")\n        }\n        else if (fontVariantProperties[decl.prop][decl.value]) {\n          newValue = fontVariantProperties[decl.prop][decl.value]\n        }\n\n        if (fontFeatureSettings === null) {\n          fontFeatureSettings = getFontFeatureSettingsPrevTo(decl);\n        }\n        if (fontFeatureSettings.value && fontFeatureSettings.value !== newValue) {\n          fontFeatureSettings.value += \", \" + newValue;\n        }\n        else {\n          fontFeatureSettings.value = newValue;\n        }\n      })\n    })\n  }\n})\n"]},"metadata":{},"sourceType":"script"}