{"ast":null,"code":"var http = require('http');\n\nvar https = require('https');\n\nvar url = require('url');\n\nvar isHttpResource = require('../utils/is-http-resource');\n\nvar isHttpsResource = require('../utils/is-https-resource');\n\nvar override = require('../utils/override');\n\nvar HTTP_PROTOCOL = 'http:';\n\nfunction loadRemoteResource(uri, inlineRequest, inlineTimeout, callback) {\n  var proxyProtocol = inlineRequest.protocol || inlineRequest.hostname;\n  var errorHandled = false;\n  var requestOptions;\n  var fetch;\n  requestOptions = override(url.parse(uri), inlineRequest || {});\n\n  if (inlineRequest.hostname !== undefined) {\n    // overwrite as we always expect a http proxy currently\n    requestOptions.protocol = inlineRequest.protocol || HTTP_PROTOCOL;\n    requestOptions.path = requestOptions.href;\n  }\n\n  fetch = proxyProtocol && !isHttpsResource(proxyProtocol) || isHttpResource(uri) ? http.get : https.get;\n  fetch(requestOptions, function (res) {\n    var chunks = [];\n    var movedUri;\n\n    if (errorHandled) {\n      return;\n    }\n\n    if (res.statusCode < 200 || res.statusCode > 399) {\n      return callback(res.statusCode, null);\n    } else if (res.statusCode > 299) {\n      movedUri = url.resolve(uri, res.headers.location);\n      return loadRemoteResource(movedUri, inlineRequest, inlineTimeout, callback);\n    }\n\n    res.on('data', function (chunk) {\n      chunks.push(chunk.toString());\n    });\n    res.on('end', function () {\n      var body = chunks.join('');\n      callback(null, body);\n    });\n  }).on('error', function (res) {\n    if (errorHandled) {\n      return;\n    }\n\n    errorHandled = true;\n    callback(res.message, null);\n  }).on('timeout', function () {\n    if (errorHandled) {\n      return;\n    }\n\n    errorHandled = true;\n    callback('timeout', null);\n  }).setTimeout(inlineTimeout);\n}\n\nmodule.exports = loadRemoteResource;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/clean-css/lib/reader/load-remote-resource.js"],"names":["http","require","https","url","isHttpResource","isHttpsResource","override","HTTP_PROTOCOL","loadRemoteResource","uri","inlineRequest","inlineTimeout","callback","proxyProtocol","protocol","hostname","errorHandled","requestOptions","fetch","parse","undefined","path","href","get","res","chunks","movedUri","statusCode","resolve","headers","location","on","chunk","push","toString","body","join","message","setTimeout","module","exports"],"mappings":"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","sourcesContent":["var http = require('http');\nvar https = require('https');\nvar url = require('url');\n\nvar isHttpResource = require('../utils/is-http-resource');\nvar isHttpsResource = require('../utils/is-https-resource');\nvar override = require('../utils/override');\n\nvar HTTP_PROTOCOL = 'http:';\n\nfunction loadRemoteResource(uri, inlineRequest, inlineTimeout, callback) {\n  var proxyProtocol = inlineRequest.protocol || inlineRequest.hostname;\n  var errorHandled = false;\n  var requestOptions;\n  var fetch;\n\n  requestOptions = override(\n    url.parse(uri),\n    inlineRequest || {}\n  );\n\n  if (inlineRequest.hostname !== undefined) {\n    // overwrite as we always expect a http proxy currently\n    requestOptions.protocol = inlineRequest.protocol || HTTP_PROTOCOL;\n    requestOptions.path = requestOptions.href;\n  }\n\n  fetch = (proxyProtocol && !isHttpsResource(proxyProtocol)) || isHttpResource(uri) ?\n    http.get :\n    https.get;\n\n  fetch(requestOptions, function (res) {\n    var chunks = [];\n    var movedUri;\n\n    if (errorHandled) {\n      return;\n    }\n\n    if (res.statusCode < 200 || res.statusCode > 399) {\n      return callback(res.statusCode, null);\n    } else if (res.statusCode > 299) {\n      movedUri = url.resolve(uri, res.headers.location);\n      return loadRemoteResource(movedUri, inlineRequest, inlineTimeout, callback);\n    }\n\n    res.on('data', function (chunk) {\n      chunks.push(chunk.toString());\n    });\n    res.on('end', function () {\n      var body = chunks.join('');\n      callback(null, body);\n    });\n  })\n  .on('error', function (res) {\n    if (errorHandled) {\n      return;\n    }\n\n    errorHandled = true;\n    callback(res.message, null);\n  })\n  .on('timeout', function () {\n    if (errorHandled) {\n      return;\n    }\n\n    errorHandled = true;\n    callback('timeout', null);\n  })\n  .setTimeout(inlineTimeout);\n}\n\nmodule.exports = loadRemoteResource;\n"]},"metadata":{},"sourceType":"script"}