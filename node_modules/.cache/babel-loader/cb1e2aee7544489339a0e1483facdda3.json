{"ast":null,"code":"/**\n * @fileoverview Rule to flag labels that are the same as an identifier\n * @author Ian Christian Myers\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow labels that share a name with a variable\",\n      category: \"Variables\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-label-var\"\n    },\n    schema: []\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Check if the identifier is present inside current scope\n     * @param {Object} scope current scope\n     * @param {string} name To evaluate\n     * @returns {boolean} True if its present\n     * @private\n     */\n    function findIdentifier(scope, name) {\n      return astUtils.getVariableByName(scope, name) !== null;\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      LabeledStatement(node) {\n        // Fetch the innermost scope.\n        const scope = context.getScope();\n        /*\n         * Recursively find the identifier walking up the scope, starting\n         * with the innermost scope.\n         */\n\n        if (findIdentifier(scope, node.label.name)) {\n          context.report({\n            node,\n            message: \"Found identifier with same name as label.\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-label-var.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","create","context","findIdentifier","scope","name","getVariableByName","LabeledStatement","node","getScope","label","report","message"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,mDADX;AAEFC,MAAAA,QAAQ,EAAE,WAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE;AAVN,GADO;;AAcbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACA;AACA;;AAEA;;;;;;;AAOA,aAASC,cAAT,CAAwBC,KAAxB,EAA+BC,IAA/B,EAAqC;AACjC,aAAOhB,QAAQ,CAACiB,iBAAT,CAA2BF,KAA3B,EAAkCC,IAAlC,MAA4C,IAAnD;AACH,KAfW,CAiBZ;AACA;AACA;;;AAEA,WAAO;AAEHE,MAAAA,gBAAgB,CAACC,IAAD,EAAO;AAEnB;AACA,cAAMJ,KAAK,GAAGF,OAAO,CAACO,QAAR,EAAd;AAEA;;;;;AAIA,YAAIN,cAAc,CAACC,KAAD,EAAQI,IAAI,CAACE,KAAL,CAAWL,IAAnB,CAAlB,EAA4C;AACxCH,UAAAA,OAAO,CAACS,MAAR,CAAe;AAAEH,YAAAA,IAAF;AAAQI,YAAAA,OAAO,EAAE;AAAjB,WAAf;AACH;AACJ;;AAdE,KAAP;AAkBH;;AArDY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to flag labels that are the same as an identifier\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow labels that share a name with a variable\",\n            category: \"Variables\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-label-var\"\n        },\n\n        schema: []\n    },\n\n    create(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Check if the identifier is present inside current scope\n         * @param {Object} scope current scope\n         * @param {string} name To evaluate\n         * @returns {boolean} True if its present\n         * @private\n         */\n        function findIdentifier(scope, name) {\n            return astUtils.getVariableByName(scope, name) !== null;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n\n            LabeledStatement(node) {\n\n                // Fetch the innermost scope.\n                const scope = context.getScope();\n\n                /*\n                 * Recursively find the identifier walking up the scope, starting\n                 * with the innermost scope.\n                 */\n                if (findIdentifier(scope, node.label.name)) {\n                    context.report({ node, message: \"Found identifier with same name as label.\" });\n                }\n            }\n\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}