{"ast":null,"code":"/**\n * RSA Key Generation Worker.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2013 Digital Bazaar, Inc.\n */\n// worker is built using CommonJS syntax to include all code in one worker file\n//importScripts('jsbn.js');\nvar forge = require('./forge');\n\nrequire('./jsbn'); // prime constants\n\n\nvar LOW_PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\nvar LP_LIMIT = (1 << 26) / LOW_PRIMES[LOW_PRIMES.length - 1];\nvar BigInteger = forge.jsbn.BigInteger;\nvar BIG_TWO = new BigInteger(null);\nBIG_TWO.fromInt(2);\nself.addEventListener('message', function (e) {\n  var result = findPrime(e.data);\n  self.postMessage(result);\n}); // start receiving ranges to check\n\nself.postMessage({\n  found: false\n}); // primes are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29\n\nvar GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];\n\nfunction findPrime(data) {\n  // TODO: abstract based on data.algorithm (PRIMEINC vs. others)\n  // create BigInteger from given random bytes\n  var num = new BigInteger(data.hex, 16);\n  /* Note: All primes are of the form 30k+i for i < 30 and gcd(30, i)=1. The\n    number we are given is always aligned at 30k + 1. Each time the number is\n    determined not to be prime we add to get to the next 'i', eg: if the number\n    was at 30k + 1 we add 6. */\n\n  var deltaIdx = 0; // find nearest prime\n\n  var workLoad = data.workLoad;\n\n  for (var i = 0; i < workLoad; ++i) {\n    // do primality test\n    if (isProbablePrime(num)) {\n      return {\n        found: true,\n        prime: num.toString(16)\n      };\n    } // get next potential prime\n\n\n    num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);\n  }\n\n  return {\n    found: false\n  };\n}\n\nfunction isProbablePrime(n) {\n  // divide by low primes, ignore even checks, etc (n alread aligned properly)\n  var i = 1;\n\n  while (i < LOW_PRIMES.length) {\n    var m = LOW_PRIMES[i];\n    var j = i + 1;\n\n    while (j < LOW_PRIMES.length && m < LP_LIMIT) {\n      m *= LOW_PRIMES[j++];\n    }\n\n    m = n.modInt(m);\n\n    while (i < j) {\n      if (m % LOW_PRIMES[i++] === 0) {\n        return false;\n      }\n    }\n  }\n\n  return runMillerRabin(n);\n} // HAC 4.24, Miller-Rabin\n\n\nfunction runMillerRabin(n) {\n  // n1 = n - 1\n  var n1 = n.subtract(BigInteger.ONE); // get s and d such that n1 = 2^s * d\n\n  var s = n1.getLowestSetBit();\n\n  if (s <= 0) {\n    return false;\n  }\n\n  var d = n1.shiftRight(s);\n\n  var k = _getMillerRabinTests(n.bitLength());\n\n  var prng = getPrng();\n  var a;\n\n  for (var i = 0; i < k; ++i) {\n    // select witness 'a' at random from between 1 and n - 1\n    do {\n      a = new BigInteger(n.bitLength(), prng);\n    } while (a.compareTo(BigInteger.ONE) <= 0 || a.compareTo(n1) >= 0);\n    /* See if 'a' is a composite witness. */\n    // x = a^d mod n\n\n\n    var x = a.modPow(d, n); // probably prime\n\n    if (x.compareTo(BigInteger.ONE) === 0 || x.compareTo(n1) === 0) {\n      continue;\n    }\n\n    var j = s;\n\n    while (--j) {\n      // x = x^2 mod a\n      x = x.modPowInt(2, n); // 'n' is composite because no previous x == -1 mod n\n\n      if (x.compareTo(BigInteger.ONE) === 0) {\n        return false;\n      } // x == -1 mod n, so probably prime\n\n\n      if (x.compareTo(n1) === 0) {\n        break;\n      }\n    } // 'x' is first_x^(n1/2) and is not +/- 1, so 'n' is not prime\n\n\n    if (j === 0) {\n      return false;\n    }\n  }\n\n  return true;\n} // get pseudo random number generator\n\n\nfunction getPrng() {\n  // create prng with api that matches BigInteger secure random\n  return {\n    // x is an array to fill with bytes\n    nextBytes: function (x) {\n      for (var i = 0; i < x.length; ++i) {\n        x[i] = Math.floor(Math.random() * 0xFF);\n      }\n    }\n  };\n}\n/**\n * Returns the required number of Miller-Rabin tests to generate a\n * prime with an error probability of (1/2)^80.\n *\n * See Handbook of Applied Cryptography Chapter 4, Table 4.4.\n *\n * @param bits the bit size.\n *\n * @return the required number of iterations.\n */\n\n\nfunction _getMillerRabinTests(bits) {\n  if (bits <= 100) return 27;\n  if (bits <= 150) return 18;\n  if (bits <= 200) return 15;\n  if (bits <= 250) return 12;\n  if (bits <= 300) return 9;\n  if (bits <= 350) return 8;\n  if (bits <= 400) return 7;\n  if (bits <= 500) return 6;\n  if (bits <= 600) return 5;\n  if (bits <= 800) return 4;\n  if (bits <= 1250) return 3;\n  return 2;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/node-forge/lib/prime.worker.js"],"names":["forge","require","LOW_PRIMES","LP_LIMIT","length","BigInteger","jsbn","BIG_TWO","fromInt","self","addEventListener","e","result","findPrime","data","postMessage","found","GCD_30_DELTA","num","hex","deltaIdx","workLoad","i","isProbablePrime","prime","toString","dAddOffset","n","m","j","modInt","runMillerRabin","n1","subtract","ONE","s","getLowestSetBit","d","shiftRight","k","_getMillerRabinTests","bitLength","prng","getPrng","a","compareTo","x","modPow","modPowInt","nextBytes","Math","floor","random","bits"],"mappings":"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","sourcesContent":["/**\n * RSA Key Generation Worker.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2013 Digital Bazaar, Inc.\n */\n// worker is built using CommonJS syntax to include all code in one worker file\n//importScripts('jsbn.js');\nvar forge = require('./forge');\nrequire('./jsbn');\n\n// prime constants\nvar LOW_PRIMES = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\nvar LP_LIMIT = (1 << 26) / LOW_PRIMES[LOW_PRIMES.length - 1];\n\nvar BigInteger = forge.jsbn.BigInteger;\nvar BIG_TWO = new BigInteger(null);\nBIG_TWO.fromInt(2);\n\nself.addEventListener('message', function(e) {\n  var result = findPrime(e.data);\n  self.postMessage(result);\n});\n\n// start receiving ranges to check\nself.postMessage({found: false});\n\n// primes are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29\nvar GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];\n\nfunction findPrime(data) {\n  // TODO: abstract based on data.algorithm (PRIMEINC vs. others)\n\n  // create BigInteger from given random bytes\n  var num = new BigInteger(data.hex, 16);\n\n  /* Note: All primes are of the form 30k+i for i < 30 and gcd(30, i)=1. The\n    number we are given is always aligned at 30k + 1. Each time the number is\n    determined not to be prime we add to get to the next 'i', eg: if the number\n    was at 30k + 1 we add 6. */\n  var deltaIdx = 0;\n\n  // find nearest prime\n  var workLoad = data.workLoad;\n  for(var i = 0; i < workLoad; ++i) {\n    // do primality test\n    if(isProbablePrime(num)) {\n      return {found: true, prime: num.toString(16)};\n    }\n    // get next potential prime\n    num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);\n  }\n\n  return {found: false};\n}\n\nfunction isProbablePrime(n) {\n  // divide by low primes, ignore even checks, etc (n alread aligned properly)\n  var i = 1;\n  while(i < LOW_PRIMES.length) {\n    var m = LOW_PRIMES[i];\n    var j = i + 1;\n    while(j < LOW_PRIMES.length && m < LP_LIMIT) {\n      m *= LOW_PRIMES[j++];\n    }\n    m = n.modInt(m);\n    while(i < j) {\n      if(m % LOW_PRIMES[i++] === 0) {\n        return false;\n      }\n    }\n  }\n  return runMillerRabin(n);\n}\n\n// HAC 4.24, Miller-Rabin\nfunction runMillerRabin(n) {\n  // n1 = n - 1\n  var n1 = n.subtract(BigInteger.ONE);\n\n  // get s and d such that n1 = 2^s * d\n  var s = n1.getLowestSetBit();\n  if(s <= 0) {\n    return false;\n  }\n  var d = n1.shiftRight(s);\n\n  var k = _getMillerRabinTests(n.bitLength());\n  var prng = getPrng();\n  var a;\n  for(var i = 0; i < k; ++i) {\n    // select witness 'a' at random from between 1 and n - 1\n    do {\n      a = new BigInteger(n.bitLength(), prng);\n    } while(a.compareTo(BigInteger.ONE) <= 0 || a.compareTo(n1) >= 0);\n\n    /* See if 'a' is a composite witness. */\n\n    // x = a^d mod n\n    var x = a.modPow(d, n);\n\n    // probably prime\n    if(x.compareTo(BigInteger.ONE) === 0 || x.compareTo(n1) === 0) {\n      continue;\n    }\n\n    var j = s;\n    while(--j) {\n      // x = x^2 mod a\n      x = x.modPowInt(2, n);\n\n      // 'n' is composite because no previous x == -1 mod n\n      if(x.compareTo(BigInteger.ONE) === 0) {\n        return false;\n      }\n      // x == -1 mod n, so probably prime\n      if(x.compareTo(n1) === 0) {\n        break;\n      }\n    }\n\n    // 'x' is first_x^(n1/2) and is not +/- 1, so 'n' is not prime\n    if(j === 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// get pseudo random number generator\nfunction getPrng() {\n  // create prng with api that matches BigInteger secure random\n  return {\n    // x is an array to fill with bytes\n    nextBytes: function(x) {\n      for(var i = 0; i < x.length; ++i) {\n        x[i] = Math.floor(Math.random() * 0xFF);\n      }\n    }\n  };\n}\n\n/**\n * Returns the required number of Miller-Rabin tests to generate a\n * prime with an error probability of (1/2)^80.\n *\n * See Handbook of Applied Cryptography Chapter 4, Table 4.4.\n *\n * @param bits the bit size.\n *\n * @return the required number of iterations.\n */\nfunction _getMillerRabinTests(bits) {\n  if(bits <= 100) return 27;\n  if(bits <= 150) return 18;\n  if(bits <= 200) return 15;\n  if(bits <= 250) return 12;\n  if(bits <= 300) return 9;\n  if(bits <= 350) return 8;\n  if(bits <= 400) return 7;\n  if(bits <= 500) return 6;\n  if(bits <= 600) return 5;\n  if(bits <= 800) return 4;\n  if(bits <= 1250) return 3;\n  return 2;\n}\n"]},"metadata":{},"sourceType":"script"}