{"ast":null,"code":"/**\n * @fileoverview Rule to flag references to undeclared variables.\n * @author Mark Macdonald\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks if the given node is the argument of a typeof operator.\n * @param {ASTNode} node The AST node being checked.\n * @returns {boolean} Whether or not the node is the argument of a typeof operator.\n */\n\nfunction hasTypeOfOperator(node) {\n  const parent = node.parent;\n  return parent.type === \"UnaryExpression\" && parent.operator === \"typeof\";\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow the use of undeclared variables unless mentioned in `/*global */` comments\",\n      category: \"Variables\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-undef\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        typeof: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      undef: \"'{{name}}' is not defined.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0];\n    const considerTypeOf = options && options.typeof === true || false;\n    return {\n      \"Program:exit\"()\n      /* node */\n      {\n        const globalScope = context.getScope();\n        globalScope.through.forEach(ref => {\n          const identifier = ref.identifier;\n\n          if (!considerTypeOf && hasTypeOfOperator(identifier)) {\n            return;\n          }\n\n          context.report({\n            node: identifier,\n            messageId: \"undef\",\n            data: identifier\n          });\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-undef.js"],"names":["hasTypeOfOperator","node","parent","type","operator","module","exports","meta","docs","description","category","recommended","url","schema","properties","typeof","default","additionalProperties","messages","undef","create","context","options","considerTypeOf","globalScope","getScope","through","forEach","ref","identifier","report","messageId","data"],"mappings":"AAAA;;;;AAIA,a,CAEA;AACA;AACA;;AAEA;;;;;;AAKA,SAASA,iBAAT,CAA2BC,IAA3B,EAAiC;AAC7B,QAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;AAEA,SAAOA,MAAM,CAACC,IAAP,KAAgB,iBAAhB,IAAqCD,MAAM,CAACE,QAAP,KAAoB,QAAhE;AACH,C,CAED;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFJ,IAAAA,IAAI,EAAE,SADJ;AAGFK,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,qFADX;AAEFC,MAAAA,QAAQ,EAAE,WAFR;AAGFC,MAAAA,WAAW,EAAE,IAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,CACJ;AACIV,MAAAA,IAAI,EAAE,QADV;AAEIW,MAAAA,UAAU,EAAE;AACRC,QAAAA,MAAM,EAAE;AACJZ,UAAAA,IAAI,EAAE,SADF;AAEJa,UAAAA,OAAO,EAAE;AAFL;AADA,OAFhB;AAQIC,MAAAA,oBAAoB,EAAE;AAR1B,KADI,CAVN;AAsBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,KAAK,EAAE;AADD;AAtBR,GADO;;AA4BbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,OAAO,GAAGD,OAAO,CAACC,OAAR,CAAgB,CAAhB,CAAhB;AACA,UAAMC,cAAc,GAAGD,OAAO,IAAIA,OAAO,CAACP,MAAR,KAAmB,IAA9B,IAAsC,KAA7D;AAEA,WAAO;AACH;AAAe;AAAY;AACvB,cAAMS,WAAW,GAAGH,OAAO,CAACI,QAAR,EAApB;AAEAD,QAAAA,WAAW,CAACE,OAAZ,CAAoBC,OAApB,CAA4BC,GAAG,IAAI;AAC/B,gBAAMC,UAAU,GAAGD,GAAG,CAACC,UAAvB;;AAEA,cAAI,CAACN,cAAD,IAAmBvB,iBAAiB,CAAC6B,UAAD,CAAxC,EAAsD;AAClD;AACH;;AAEDR,UAAAA,OAAO,CAACS,MAAR,CAAe;AACX7B,YAAAA,IAAI,EAAE4B,UADK;AAEXE,YAAAA,SAAS,EAAE,OAFA;AAGXC,YAAAA,IAAI,EAAEH;AAHK,WAAf;AAKH,SAZD;AAaH;;AAjBE,KAAP;AAmBH;;AAnDY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to flag references to undeclared variables.\n * @author Mark Macdonald\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks if the given node is the argument of a typeof operator.\n * @param {ASTNode} node The AST node being checked.\n * @returns {boolean} Whether or not the node is the argument of a typeof operator.\n */\nfunction hasTypeOfOperator(node) {\n    const parent = node.parent;\n\n    return parent.type === \"UnaryExpression\" && parent.operator === \"typeof\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow the use of undeclared variables unless mentioned in `/*global */` comments\",\n            category: \"Variables\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-undef\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    typeof: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            undef: \"'{{name}}' is not defined.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0];\n        const considerTypeOf = options && options.typeof === true || false;\n\n        return {\n            \"Program:exit\"(/* node */) {\n                const globalScope = context.getScope();\n\n                globalScope.through.forEach(ref => {\n                    const identifier = ref.identifier;\n\n                    if (!considerTypeOf && hasTypeOfOperator(identifier)) {\n                        return;\n                    }\n\n                    context.report({\n                        node: identifier,\n                        messageId: \"undef\",\n                        data: identifier\n                    });\n                });\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}