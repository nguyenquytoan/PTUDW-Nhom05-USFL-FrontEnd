{"ast":null,"code":"'use strict';\n\nconst htmlCommentRegex = require('html-comment-regex');\n\nfunction isBinary(buf) {\n  const isBuf = Buffer.isBuffer(buf);\n\n  for (let i = 0; i < 24; i++) {\n    const charCode = isBuf ? buf[i] : buf.charCodeAt(i);\n\n    if (charCode === 65533 || charCode <= 8) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nconst regex = /^\\s*(?:<\\?xml[^>]*>\\s*)?(?:<!doctype svg[^>]*\\s*(?:\\[?(?:\\s*<![^>]*>\\s*)*\\]?)*[^>]*>\\s*)?<svg[^>]*>[^]*<\\/svg>\\s*$/i;\n\nmodule.exports = input => Boolean(input) && !isBinary(input) && regex.test(input.toString().replace(htmlCommentRegex, ''));","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/is-svg/index.js"],"names":["htmlCommentRegex","require","isBinary","buf","isBuf","Buffer","isBuffer","i","charCode","charCodeAt","regex","module","exports","input","Boolean","test","toString","replace"],"mappings":"AAAA;;AACA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAAhC;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACtB,QAAMC,KAAK,GAAGC,MAAM,CAACC,QAAP,CAAgBH,GAAhB,CAAd;;AAEA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC5B,UAAMC,QAAQ,GAAGJ,KAAK,GAAGD,GAAG,CAACI,CAAD,CAAN,GAAYJ,GAAG,CAACM,UAAJ,CAAeF,CAAf,CAAlC;;AAEA,QAAIC,QAAQ,KAAK,KAAb,IAAsBA,QAAQ,IAAI,CAAtC,EAAyC;AACxC,aAAO,IAAP;AACA;AACD;;AAED,SAAO,KAAP;AACA;;AAED,MAAME,KAAK,GAAG,qHAAd;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,KAAK,IAAIC,OAAO,CAACD,KAAD,CAAP,IAAkB,CAACX,QAAQ,CAACW,KAAD,CAA3B,IAAsCH,KAAK,CAACK,IAAN,CAAWF,KAAK,CAACG,QAAN,GAAiBC,OAAjB,CAAyBjB,gBAAzB,EAA2C,EAA3C,CAAX,CAAhE","sourcesContent":["'use strict';\nconst htmlCommentRegex = require('html-comment-regex');\n\nfunction isBinary(buf) {\n\tconst isBuf = Buffer.isBuffer(buf);\n\n\tfor (let i = 0; i < 24; i++) {\n\t\tconst charCode = isBuf ? buf[i] : buf.charCodeAt(i);\n\n\t\tif (charCode === 65533 || charCode <= 8) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nconst regex = /^\\s*(?:<\\?xml[^>]*>\\s*)?(?:<!doctype svg[^>]*\\s*(?:\\[?(?:\\s*<![^>]*>\\s*)*\\]?)*[^>]*>\\s*)?<svg[^>]*>[^]*<\\/svg>\\s*$/i;\n\nmodule.exports = input => Boolean(input) && !isBinary(input) && regex.test(input.toString().replace(htmlCommentRegex, ''));\n"]},"metadata":{},"sourceType":"script"}