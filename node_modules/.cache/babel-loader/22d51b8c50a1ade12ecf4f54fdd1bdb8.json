{"ast":null,"code":"'use strict';\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar postcss = require('postcss');\n\nvar postcss__default = _interopDefault(postcss);\n\nfunction shiftNodesBeforeParent(node) {\n  const parent = node.parent;\n  const index = parent.index(node); // conditionally move previous siblings into a clone of the parent\n\n  if (index) {\n    parent.cloneBefore().removeAll().append(parent.nodes.slice(0, index));\n  } // move the current node before the parent (and after the conditional clone)\n\n\n  parent.before(node);\n  return parent;\n}\n\nfunction cleanupParent(parent) {\n  if (!parent.nodes.length) {\n    parent.remove();\n  }\n} // a valid selector is an ampersand followed by a non-word character or nothing\n\n\nvar validSelector = /&(?:[^\\w-|]|$)/;\nconst replaceable = /&/g;\n\nfunction mergeSelectors(fromSelectors, toSelectors) {\n  return fromSelectors.reduce((selectors, fromSelector) => selectors.concat(toSelectors.map(toSelector => toSelector.replace(replaceable, fromSelector))), []);\n}\n\nfunction transformRuleWithinRule(node) {\n  // move previous siblings and the node to before the parent\n  const parent = shiftNodesBeforeParent(node); // update the selectors of the node to be merged with the parent\n\n  node.selectors = mergeSelectors(parent.selectors, node.selectors); // merge similar rules back together\n  // eslint-disable-next-line no-extra-parens\n\n  const areSameRule = node.type === 'rule' && parent.type === 'rule' && node.selector === parent.selector || node.type === 'atrule' && parent.type === 'atrule' && node.params === parent.params;\n\n  if (areSameRule) {\n    node.append(...parent.nodes);\n  } // conditionally cleanup an empty parent rule\n\n\n  cleanupParent(parent);\n}\n\nconst isRuleWithinRule = node => node.type === 'rule' && Object(node.parent).type === 'rule' && node.selectors.every(selector => selector.trim().lastIndexOf('&') === 0 && validSelector.test(selector));\n\nconst comma = postcss.list.comma;\n\nfunction transformNestRuleWithinRule(node) {\n  // move previous siblings and the node to before the parent\n  const parent = shiftNodesBeforeParent(node); // clone the parent as a new rule with children appended to it\n\n  const rule = parent.clone().removeAll().append(node.nodes); // replace the node with the new rule\n\n  node.replaceWith(rule); // update the selectors of the node to be merged with the parent\n\n  rule.selectors = mergeSelectors(parent.selectors, comma(node.params)); // conditionally cleanup an empty parent rule\n\n  cleanupParent(parent); // walk the children of the new rule\n\n  walk(rule);\n}\n\nconst isNestRuleWithinRule = node => node.type === 'atrule' && node.name === 'nest' && Object(node.parent).type === 'rule' && comma(node.params).every(selector => selector.split('&').length === 2 && validSelector.test(selector));\n\nvar validAtrules = ['document', 'media', 'supports'];\n/*\n * DEPRECATED: In v7.0.0 these features will be removed as they are not part of\n * the nesting proposal.\n */\n\nfunction atruleWithinRule(node) {\n  // move previous siblings and the node to before the parent\n  const parent = shiftNodesBeforeParent(node); // clone the parent as a new rule with children appended to it\n\n  const rule = parent.clone().removeAll().append(node.nodes); // append the new rule to the node\n\n  node.append(rule); // conditionally cleanup an empty parent rule\n\n  cleanupParent(parent); // walk the children of the new rule\n\n  walk(rule);\n}\n\nconst isAtruleWithinRule = node => node.type === 'atrule' && validAtrules.indexOf(node.name) !== -1 && Object(node.parent).type === 'rule';\n\nconst comma$1 = postcss.list.comma;\n\nfunction mergeParams(fromParams, toParams) {\n  return comma$1(fromParams).map(params1 => comma$1(toParams).map(params2 => `${params1} and ${params2}`).join(', ')).join(', ');\n}\n/*\n * DEPRECATED: In v7.0.0 these features will be removed as they are not part of\n * the nesting proposal.\n */\n\n\nfunction transformAtruleWithinAtrule(node) {\n  // move previous siblings and the node to before the parent\n  const parent = shiftNodesBeforeParent(node); // update the params of the node to be merged with the parent\n\n  node.params = mergeParams(parent.params, node.params); // conditionally cleanup an empty parent rule\n\n  cleanupParent(parent);\n}\n\nconst isAtruleWithinAtrule = node => node.type === 'atrule' && validAtrules.indexOf(node.name) !== -1 && Object(node.parent).type === 'atrule' && node.name === node.parent.name;\n\nfunction walk(node) {\n  node.nodes.slice(0).forEach(child => {\n    if (child.parent === node) {\n      if (isRuleWithinRule(child)) {\n        transformRuleWithinRule(child);\n      } else if (isNestRuleWithinRule(child)) {\n        transformNestRuleWithinRule(child);\n      } else if (isAtruleWithinRule(child)) {\n        atruleWithinRule(child);\n      } else if (isAtruleWithinAtrule(child)) {\n        transformAtruleWithinAtrule(child);\n      }\n\n      if (Object(child.nodes).length) {\n        walk(child);\n      }\n    }\n  });\n}\n\nvar index = postcss__default.plugin('postcss-nesting', () => walk);\nmodule.exports = index;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-nesting/index.cjs.js"],"names":["_interopDefault","ex","postcss","require","postcss__default","shiftNodesBeforeParent","node","parent","index","cloneBefore","removeAll","append","nodes","slice","before","cleanupParent","length","remove","validSelector","replaceable","mergeSelectors","fromSelectors","toSelectors","reduce","selectors","fromSelector","concat","map","toSelector","replace","transformRuleWithinRule","areSameRule","type","selector","params","isRuleWithinRule","Object","every","trim","lastIndexOf","test","comma","list","transformNestRuleWithinRule","rule","clone","replaceWith","walk","isNestRuleWithinRule","name","split","validAtrules","atruleWithinRule","isAtruleWithinRule","indexOf","comma$1","mergeParams","fromParams","toParams","params1","params2","join","transformAtruleWithinAtrule","isAtruleWithinAtrule","forEach","child","plugin","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar postcss = require('postcss');\nvar postcss__default = _interopDefault(postcss);\n\nfunction shiftNodesBeforeParent(node) {\n  const parent = node.parent;\n  const index = parent.index(node); // conditionally move previous siblings into a clone of the parent\n\n  if (index) {\n    parent.cloneBefore().removeAll().append(parent.nodes.slice(0, index));\n  } // move the current node before the parent (and after the conditional clone)\n\n\n  parent.before(node);\n  return parent;\n}\n\nfunction cleanupParent(parent) {\n  if (!parent.nodes.length) {\n    parent.remove();\n  }\n}\n\n// a valid selector is an ampersand followed by a non-word character or nothing\nvar validSelector = /&(?:[^\\w-|]|$)/;\nconst replaceable = /&/g;\n\nfunction mergeSelectors(fromSelectors, toSelectors) {\n  return fromSelectors.reduce((selectors, fromSelector) => selectors.concat(toSelectors.map(toSelector => toSelector.replace(replaceable, fromSelector))), []);\n}\n\nfunction transformRuleWithinRule(node) {\n  // move previous siblings and the node to before the parent\n  const parent = shiftNodesBeforeParent(node); // update the selectors of the node to be merged with the parent\n\n  node.selectors = mergeSelectors(parent.selectors, node.selectors); // merge similar rules back together\n  // eslint-disable-next-line no-extra-parens\n\n  const areSameRule = node.type === 'rule' && parent.type === 'rule' && node.selector === parent.selector || node.type === 'atrule' && parent.type === 'atrule' && node.params === parent.params;\n\n  if (areSameRule) {\n    node.append(...parent.nodes);\n  } // conditionally cleanup an empty parent rule\n\n\n  cleanupParent(parent);\n}\nconst isRuleWithinRule = node => node.type === 'rule' && Object(node.parent).type === 'rule' && node.selectors.every(selector => selector.trim().lastIndexOf('&') === 0 && validSelector.test(selector));\n\nconst comma = postcss.list.comma;\nfunction transformNestRuleWithinRule(node) {\n  // move previous siblings and the node to before the parent\n  const parent = shiftNodesBeforeParent(node); // clone the parent as a new rule with children appended to it\n\n  const rule = parent.clone().removeAll().append(node.nodes); // replace the node with the new rule\n\n  node.replaceWith(rule); // update the selectors of the node to be merged with the parent\n\n  rule.selectors = mergeSelectors(parent.selectors, comma(node.params)); // conditionally cleanup an empty parent rule\n\n  cleanupParent(parent); // walk the children of the new rule\n\n  walk(rule);\n}\nconst isNestRuleWithinRule = node => node.type === 'atrule' && node.name === 'nest' && Object(node.parent).type === 'rule' && comma(node.params).every(selector => selector.split('&').length === 2 && validSelector.test(selector));\n\nvar validAtrules = ['document', 'media', 'supports'];\n\n/*\n * DEPRECATED: In v7.0.0 these features will be removed as they are not part of\n * the nesting proposal.\n */\n\nfunction atruleWithinRule(node) {\n  // move previous siblings and the node to before the parent\n  const parent = shiftNodesBeforeParent(node); // clone the parent as a new rule with children appended to it\n\n  const rule = parent.clone().removeAll().append(node.nodes); // append the new rule to the node\n\n  node.append(rule); // conditionally cleanup an empty parent rule\n\n  cleanupParent(parent); // walk the children of the new rule\n\n  walk(rule);\n}\nconst isAtruleWithinRule = node => node.type === 'atrule' && validAtrules.indexOf(node.name) !== -1 && Object(node.parent).type === 'rule';\n\nconst comma$1 = postcss.list.comma;\nfunction mergeParams(fromParams, toParams) {\n  return comma$1(fromParams).map(params1 => comma$1(toParams).map(params2 => `${params1} and ${params2}`).join(', ')).join(', ');\n}\n\n/*\n * DEPRECATED: In v7.0.0 these features will be removed as they are not part of\n * the nesting proposal.\n */\n\nfunction transformAtruleWithinAtrule(node) {\n  // move previous siblings and the node to before the parent\n  const parent = shiftNodesBeforeParent(node); // update the params of the node to be merged with the parent\n\n  node.params = mergeParams(parent.params, node.params); // conditionally cleanup an empty parent rule\n\n  cleanupParent(parent);\n}\nconst isAtruleWithinAtrule = node => node.type === 'atrule' && validAtrules.indexOf(node.name) !== -1 && Object(node.parent).type === 'atrule' && node.name === node.parent.name;\n\nfunction walk(node) {\n  node.nodes.slice(0).forEach(child => {\n    if (child.parent === node) {\n      if (isRuleWithinRule(child)) {\n        transformRuleWithinRule(child);\n      } else if (isNestRuleWithinRule(child)) {\n        transformNestRuleWithinRule(child);\n      } else if (isAtruleWithinRule(child)) {\n        atruleWithinRule(child);\n      } else if (isAtruleWithinAtrule(child)) {\n        transformAtruleWithinAtrule(child);\n      }\n\n      if (Object(child.nodes).length) {\n        walk(child);\n      }\n    }\n  });\n}\n\nvar index = postcss__default.plugin('postcss-nesting', () => walk);\n\nmodule.exports = index;\n//# sourceMappingURL=index.cjs.js.map\n"]},"metadata":{},"sourceType":"script"}