{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = nodeModulesPaths;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _realpathNative() {\n  const data = require('realpath-native');\n\n  _realpathNative = function _realpathNative() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Adapted from: https://github.com/substack/node-resolve\n */\n\n\nfunction nodeModulesPaths(basedir, options) {\n  const modules = options && options.moduleDirectory ? Array.from(options.moduleDirectory) : ['node_modules']; // ensure that `basedir` is an absolute path at this point,\n  // resolving against the process' current working directory\n\n  const basedirAbs = _path().default.resolve(basedir);\n\n  let prefix = '/';\n\n  if (/^([A-Za-z]:)/.test(basedirAbs)) {\n    prefix = '';\n  } else if (/^\\\\\\\\/.test(basedirAbs)) {\n    prefix = '\\\\\\\\';\n  } // The node resolution algorithm (as implemented by NodeJS and TypeScript)\n  // traverses parents of the physical path, not the symlinked path\n\n\n  let physicalBasedir;\n\n  try {\n    physicalBasedir = (0, _realpathNative().sync)(basedirAbs);\n  } catch (err) {\n    // realpath can throw, e.g. on mapped drives\n    physicalBasedir = basedirAbs;\n  }\n\n  const paths = [physicalBasedir];\n\n  let parsed = _path().default.parse(physicalBasedir);\n\n  while (parsed.dir !== paths[paths.length - 1]) {\n    paths.push(parsed.dir);\n    parsed = _path().default.parse(parsed.dir);\n  }\n\n  const dirs = paths.reduce((dirs, aPath) => dirs.concat(modules.map(moduleDir => _path().default.isAbsolute(moduleDir) ? aPath === basedirAbs ? moduleDir : '' : _path().default.join(prefix, aPath, moduleDir))), []).filter(dir => dir !== '');\n  return options.paths ? dirs.concat(options.paths) : dirs;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-resolve/build/nodeModulesPaths.js"],"names":["Object","defineProperty","exports","value","default","nodeModulesPaths","_path","data","_interopRequireDefault","require","_realpathNative","obj","__esModule","basedir","options","modules","moduleDirectory","Array","from","basedirAbs","resolve","prefix","test","physicalBasedir","sync","err","paths","parsed","parse","dir","length","push","dirs","reduce","aPath","concat","map","moduleDir","isAbsolute","join","filter"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = nodeModulesPaths;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _realpathNative() {\n  const data = require('realpath-native');\n\n  _realpathNative = function _realpathNative() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Adapted from: https://github.com/substack/node-resolve\n */\nfunction nodeModulesPaths(basedir, options) {\n  const modules =\n    options && options.moduleDirectory\n      ? Array.from(options.moduleDirectory)\n      : ['node_modules']; // ensure that `basedir` is an absolute path at this point,\n  // resolving against the process' current working directory\n\n  const basedirAbs = _path().default.resolve(basedir);\n\n  let prefix = '/';\n\n  if (/^([A-Za-z]:)/.test(basedirAbs)) {\n    prefix = '';\n  } else if (/^\\\\\\\\/.test(basedirAbs)) {\n    prefix = '\\\\\\\\';\n  } // The node resolution algorithm (as implemented by NodeJS and TypeScript)\n  // traverses parents of the physical path, not the symlinked path\n\n  let physicalBasedir;\n\n  try {\n    physicalBasedir = (0, _realpathNative().sync)(basedirAbs);\n  } catch (err) {\n    // realpath can throw, e.g. on mapped drives\n    physicalBasedir = basedirAbs;\n  }\n\n  const paths = [physicalBasedir];\n\n  let parsed = _path().default.parse(physicalBasedir);\n\n  while (parsed.dir !== paths[paths.length - 1]) {\n    paths.push(parsed.dir);\n    parsed = _path().default.parse(parsed.dir);\n  }\n\n  const dirs = paths\n    .reduce(\n      (dirs, aPath) =>\n        dirs.concat(\n          modules.map(moduleDir =>\n            _path().default.isAbsolute(moduleDir)\n              ? aPath === basedirAbs\n                ? moduleDir\n                : ''\n              : _path().default.join(prefix, aPath, moduleDir)\n          )\n        ),\n      []\n    )\n    .filter(dir => dir !== '');\n  return options.paths ? dirs.concat(options.paths) : dirs;\n}\n"]},"metadata":{},"sourceType":"script"}