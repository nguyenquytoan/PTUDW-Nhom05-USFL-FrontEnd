{"ast":null,"code":"var systemLineBreak = require('os').EOL;\n\nvar override = require('../utils/override');\n\nvar Breaks = {\n  AfterAtRule: 'afterAtRule',\n  AfterBlockBegins: 'afterBlockBegins',\n  AfterBlockEnds: 'afterBlockEnds',\n  AfterComment: 'afterComment',\n  AfterProperty: 'afterProperty',\n  AfterRuleBegins: 'afterRuleBegins',\n  AfterRuleEnds: 'afterRuleEnds',\n  BeforeBlockEnds: 'beforeBlockEnds',\n  BetweenSelectors: 'betweenSelectors'\n};\nvar BreakWith = {\n  CarriageReturnLineFeed: '\\r\\n',\n  LineFeed: '\\n',\n  System: systemLineBreak\n};\nvar IndentWith = {\n  Space: ' ',\n  Tab: '\\t'\n};\nvar Spaces = {\n  AroundSelectorRelation: 'aroundSelectorRelation',\n  BeforeBlockBegins: 'beforeBlockBegins',\n  BeforeValue: 'beforeValue'\n};\nvar DEFAULTS = {\n  breaks: breaks(false),\n  breakWith: BreakWith.System,\n  indentBy: 0,\n  indentWith: IndentWith.Space,\n  spaces: spaces(false),\n  wrapAt: false,\n  semicolonAfterLastProperty: false\n};\nvar BEAUTIFY_ALIAS = 'beautify';\nvar KEEP_BREAKS_ALIAS = 'keep-breaks';\nvar OPTION_SEPARATOR = ';';\nvar OPTION_NAME_VALUE_SEPARATOR = ':';\nvar HASH_VALUES_OPTION_SEPARATOR = ',';\nvar HASH_VALUES_NAME_VALUE_SEPARATOR = '=';\nvar FALSE_KEYWORD_1 = 'false';\nvar FALSE_KEYWORD_2 = 'off';\nvar TRUE_KEYWORD_1 = 'true';\nvar TRUE_KEYWORD_2 = 'on';\n\nfunction breaks(value) {\n  var breakOptions = {};\n  breakOptions[Breaks.AfterAtRule] = value;\n  breakOptions[Breaks.AfterBlockBegins] = value;\n  breakOptions[Breaks.AfterBlockEnds] = value;\n  breakOptions[Breaks.AfterComment] = value;\n  breakOptions[Breaks.AfterProperty] = value;\n  breakOptions[Breaks.AfterRuleBegins] = value;\n  breakOptions[Breaks.AfterRuleEnds] = value;\n  breakOptions[Breaks.BeforeBlockEnds] = value;\n  breakOptions[Breaks.BetweenSelectors] = value;\n  return breakOptions;\n}\n\nfunction spaces(value) {\n  var spaceOptions = {};\n  spaceOptions[Spaces.AroundSelectorRelation] = value;\n  spaceOptions[Spaces.BeforeBlockBegins] = value;\n  spaceOptions[Spaces.BeforeValue] = value;\n  return spaceOptions;\n}\n\nfunction formatFrom(source) {\n  if (source === undefined || source === false) {\n    return false;\n  }\n\n  if (typeof source == 'object' && 'breakWith' in source) {\n    source = override(source, {\n      breakWith: mapBreakWith(source.breakWith)\n    });\n  }\n\n  if (typeof source == 'object' && 'indentBy' in source) {\n    source = override(source, {\n      indentBy: parseInt(source.indentBy)\n    });\n  }\n\n  if (typeof source == 'object' && 'indentWith' in source) {\n    source = override(source, {\n      indentWith: mapIndentWith(source.indentWith)\n    });\n  }\n\n  if (typeof source == 'object') {\n    return override(DEFAULTS, source);\n  }\n\n  if (typeof source == 'object') {\n    return override(DEFAULTS, source);\n  }\n\n  if (typeof source == 'string' && source == BEAUTIFY_ALIAS) {\n    return override(DEFAULTS, {\n      breaks: breaks(true),\n      indentBy: 2,\n      spaces: spaces(true)\n    });\n  }\n\n  if (typeof source == 'string' && source == KEEP_BREAKS_ALIAS) {\n    return override(DEFAULTS, {\n      breaks: {\n        afterAtRule: true,\n        afterBlockBegins: true,\n        afterBlockEnds: true,\n        afterComment: true,\n        afterRuleEnds: true,\n        beforeBlockEnds: true\n      }\n    });\n  }\n\n  if (typeof source == 'string') {\n    return override(DEFAULTS, toHash(source));\n  }\n\n  return DEFAULTS;\n}\n\nfunction toHash(string) {\n  return string.split(OPTION_SEPARATOR).reduce(function (accumulator, directive) {\n    var parts = directive.split(OPTION_NAME_VALUE_SEPARATOR);\n    var name = parts[0];\n    var value = parts[1];\n\n    if (name == 'breaks' || name == 'spaces') {\n      accumulator[name] = hashValuesToHash(value);\n    } else if (name == 'indentBy' || name == 'wrapAt') {\n      accumulator[name] = parseInt(value);\n    } else if (name == 'indentWith') {\n      accumulator[name] = mapIndentWith(value);\n    } else if (name == 'breakWith') {\n      accumulator[name] = mapBreakWith(value);\n    }\n\n    return accumulator;\n  }, {});\n}\n\nfunction hashValuesToHash(string) {\n  return string.split(HASH_VALUES_OPTION_SEPARATOR).reduce(function (accumulator, directive) {\n    var parts = directive.split(HASH_VALUES_NAME_VALUE_SEPARATOR);\n    var name = parts[0];\n    var value = parts[1];\n    accumulator[name] = normalizeValue(value);\n    return accumulator;\n  }, {});\n}\n\nfunction normalizeValue(value) {\n  switch (value) {\n    case FALSE_KEYWORD_1:\n    case FALSE_KEYWORD_2:\n      return false;\n\n    case TRUE_KEYWORD_1:\n    case TRUE_KEYWORD_2:\n      return true;\n\n    default:\n      return value;\n  }\n}\n\nfunction mapBreakWith(value) {\n  switch (value) {\n    case 'windows':\n    case 'crlf':\n    case BreakWith.CarriageReturnLineFeed:\n      return BreakWith.CarriageReturnLineFeed;\n\n    case 'unix':\n    case 'lf':\n    case BreakWith.LineFeed:\n      return BreakWith.LineFeed;\n\n    default:\n      return systemLineBreak;\n  }\n}\n\nfunction mapIndentWith(value) {\n  switch (value) {\n    case 'space':\n      return IndentWith.Space;\n\n    case 'tab':\n      return IndentWith.Tab;\n\n    default:\n      return value;\n  }\n}\n\nmodule.exports = {\n  Breaks: Breaks,\n  Spaces: Spaces,\n  formatFrom: formatFrom\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/clean-css/lib/options/format.js"],"names":["systemLineBreak","require","EOL","override","Breaks","AfterAtRule","AfterBlockBegins","AfterBlockEnds","AfterComment","AfterProperty","AfterRuleBegins","AfterRuleEnds","BeforeBlockEnds","BetweenSelectors","BreakWith","CarriageReturnLineFeed","LineFeed","System","IndentWith","Space","Tab","Spaces","AroundSelectorRelation","BeforeBlockBegins","BeforeValue","DEFAULTS","breaks","breakWith","indentBy","indentWith","spaces","wrapAt","semicolonAfterLastProperty","BEAUTIFY_ALIAS","KEEP_BREAKS_ALIAS","OPTION_SEPARATOR","OPTION_NAME_VALUE_SEPARATOR","HASH_VALUES_OPTION_SEPARATOR","HASH_VALUES_NAME_VALUE_SEPARATOR","FALSE_KEYWORD_1","FALSE_KEYWORD_2","TRUE_KEYWORD_1","TRUE_KEYWORD_2","value","breakOptions","spaceOptions","formatFrom","source","undefined","mapBreakWith","parseInt","mapIndentWith","afterAtRule","afterBlockBegins","afterBlockEnds","afterComment","afterRuleEnds","beforeBlockEnds","toHash","string","split","reduce","accumulator","directive","parts","name","hashValuesToHash","normalizeValue","module","exports"],"mappings":"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","sourcesContent":["var systemLineBreak = require('os').EOL;\n\nvar override = require('../utils/override');\n\nvar Breaks = {\n  AfterAtRule: 'afterAtRule',\n  AfterBlockBegins: 'afterBlockBegins',\n  AfterBlockEnds: 'afterBlockEnds',\n  AfterComment: 'afterComment',\n  AfterProperty: 'afterProperty',\n  AfterRuleBegins: 'afterRuleBegins',\n  AfterRuleEnds: 'afterRuleEnds',\n  BeforeBlockEnds: 'beforeBlockEnds',\n  BetweenSelectors: 'betweenSelectors'\n};\n\nvar BreakWith = {\n  CarriageReturnLineFeed: '\\r\\n',\n  LineFeed: '\\n',\n  System: systemLineBreak\n};\n\nvar IndentWith = {\n  Space: ' ',\n  Tab: '\\t'\n};\n\nvar Spaces = {\n  AroundSelectorRelation: 'aroundSelectorRelation',\n  BeforeBlockBegins: 'beforeBlockBegins',\n  BeforeValue: 'beforeValue'\n};\n\nvar DEFAULTS = {\n  breaks: breaks(false),\n  breakWith: BreakWith.System,\n  indentBy: 0,\n  indentWith: IndentWith.Space,\n  spaces: spaces(false),\n  wrapAt: false,\n  semicolonAfterLastProperty: false\n};\n\nvar BEAUTIFY_ALIAS = 'beautify';\nvar KEEP_BREAKS_ALIAS = 'keep-breaks';\n\nvar OPTION_SEPARATOR = ';';\nvar OPTION_NAME_VALUE_SEPARATOR = ':';\nvar HASH_VALUES_OPTION_SEPARATOR = ',';\nvar HASH_VALUES_NAME_VALUE_SEPARATOR = '=';\n\nvar FALSE_KEYWORD_1 = 'false';\nvar FALSE_KEYWORD_2 = 'off';\nvar TRUE_KEYWORD_1 = 'true';\nvar TRUE_KEYWORD_2 = 'on';\n\nfunction breaks(value) {\n  var breakOptions = {};\n\n  breakOptions[Breaks.AfterAtRule] = value;\n  breakOptions[Breaks.AfterBlockBegins] = value;\n  breakOptions[Breaks.AfterBlockEnds] = value;\n  breakOptions[Breaks.AfterComment] = value;\n  breakOptions[Breaks.AfterProperty] = value;\n  breakOptions[Breaks.AfterRuleBegins] = value;\n  breakOptions[Breaks.AfterRuleEnds] = value;\n  breakOptions[Breaks.BeforeBlockEnds] = value;\n  breakOptions[Breaks.BetweenSelectors] = value;\n\n  return breakOptions;\n}\n\nfunction spaces(value) {\n  var spaceOptions = {};\n\n  spaceOptions[Spaces.AroundSelectorRelation] = value;\n  spaceOptions[Spaces.BeforeBlockBegins] = value;\n  spaceOptions[Spaces.BeforeValue] = value;\n\n  return spaceOptions;\n}\n\nfunction formatFrom(source) {\n  if (source === undefined || source === false) {\n    return false;\n  }\n\n  if (typeof source == 'object' && 'breakWith' in source) {\n    source = override(source, { breakWith: mapBreakWith(source.breakWith) });\n  }\n\n  if (typeof source == 'object' && 'indentBy' in source) {\n    source = override(source, { indentBy: parseInt(source.indentBy) });\n  }\n\n  if (typeof source == 'object' && 'indentWith' in source) {\n    source = override(source, { indentWith: mapIndentWith(source.indentWith) });\n  }\n\n  if (typeof source == 'object') {\n    return override(DEFAULTS, source);\n  }\n\n  if (typeof source == 'object') {\n    return override(DEFAULTS, source);\n  }\n\n  if (typeof source == 'string' && source == BEAUTIFY_ALIAS) {\n    return override(DEFAULTS, {\n      breaks: breaks(true),\n      indentBy: 2,\n      spaces: spaces(true)\n    });\n  }\n\n  if (typeof source == 'string' && source == KEEP_BREAKS_ALIAS) {\n    return override(DEFAULTS, {\n      breaks: {\n        afterAtRule: true,\n        afterBlockBegins: true,\n        afterBlockEnds: true,\n        afterComment: true,\n        afterRuleEnds: true,\n        beforeBlockEnds: true\n      }\n    });\n  }\n\n  if (typeof source == 'string') {\n    return override(DEFAULTS, toHash(source));\n  }\n\n  return DEFAULTS;\n}\n\nfunction toHash(string) {\n  return string\n    .split(OPTION_SEPARATOR)\n    .reduce(function (accumulator, directive) {\n      var parts = directive.split(OPTION_NAME_VALUE_SEPARATOR);\n      var name = parts[0];\n      var value = parts[1];\n\n      if (name == 'breaks' || name == 'spaces') {\n        accumulator[name] = hashValuesToHash(value);\n      } else if (name == 'indentBy' || name == 'wrapAt') {\n        accumulator[name] = parseInt(value);\n      } else if (name == 'indentWith') {\n        accumulator[name] = mapIndentWith(value);\n      } else if (name == 'breakWith') {\n        accumulator[name] = mapBreakWith(value);\n      }\n\n      return accumulator;\n    }, {});\n}\n\nfunction hashValuesToHash(string) {\n  return string\n    .split(HASH_VALUES_OPTION_SEPARATOR)\n    .reduce(function (accumulator, directive) {\n      var parts = directive.split(HASH_VALUES_NAME_VALUE_SEPARATOR);\n      var name = parts[0];\n      var value = parts[1];\n\n      accumulator[name] = normalizeValue(value);\n\n      return accumulator;\n    }, {});\n}\n\n\nfunction normalizeValue(value) {\n  switch (value) {\n    case FALSE_KEYWORD_1:\n    case FALSE_KEYWORD_2:\n      return false;\n    case TRUE_KEYWORD_1:\n    case TRUE_KEYWORD_2:\n      return true;\n    default:\n      return value;\n  }\n}\n\nfunction mapBreakWith(value) {\n  switch (value) {\n    case 'windows':\n    case 'crlf':\n    case BreakWith.CarriageReturnLineFeed:\n      return BreakWith.CarriageReturnLineFeed;\n    case 'unix':\n    case 'lf':\n    case BreakWith.LineFeed:\n      return BreakWith.LineFeed;\n    default:\n      return systemLineBreak;\n  }\n}\n\nfunction mapIndentWith(value) {\n  switch (value) {\n    case 'space':\n      return IndentWith.Space;\n    case 'tab':\n      return IndentWith.Tab;\n    default:\n      return value;\n  }\n}\n\nmodule.exports = {\n  Breaks: Breaks,\n  Spaces: Spaces,\n  formatFrom: formatFrom\n};\n"]},"metadata":{},"sourceType":"script"}