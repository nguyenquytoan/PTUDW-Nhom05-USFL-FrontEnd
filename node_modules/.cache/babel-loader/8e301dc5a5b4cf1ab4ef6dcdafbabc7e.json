{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _convertUnit = _interopRequireDefault(require(\"./convertUnit\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction isEqual(left, right) {\n  return left.type === right.type && left.value === right.value;\n}\n\nfunction isValueType(type) {\n  switch (type) {\n    case 'LengthValue':\n    case 'AngleValue':\n    case 'TimeValue':\n    case 'FrequencyValue':\n    case 'ResolutionValue':\n    case 'EmValue':\n    case 'ExValue':\n    case 'ChValue':\n    case 'RemValue':\n    case 'VhValue':\n    case 'VwValue':\n    case 'VminValue':\n    case 'VmaxValue':\n    case 'PercentageValue':\n    case 'Number':\n      return true;\n  }\n\n  return false;\n}\n\nfunction flip(operator) {\n  return operator === '+' ? '-' : '+';\n}\n\nfunction flipValue(node) {\n  if (isValueType(node.type)) {\n    node.value = -node.value;\n  } else if (node.type === 'MathExpression') {\n    if (node.operator === '*' || node.operator === '/') {\n      node.left = flipValue(node.left);\n    } else {\n      node.left = flipValue(node.left);\n      node.right = flipValue(node.right);\n    }\n  }\n\n  return node;\n}\n\nfunction reduceAddSubExpression(node, precision) {\n  // something + 0 => something\n  // something - 0 => something\n  if (isValueType(node.right.type) && node.right.value === 0) {\n    return node.left;\n  } // 0 + something => something\n\n\n  if (isValueType(node.left.type) && node.left.value === 0 && node.operator === \"+\") {\n    return node.right;\n  } // 0 - something => -something\n\n\n  if (isValueType(node.left.type) && node.left.value === 0 && node.operator === \"-\" && node.right.type !== \"Function\") {\n    return flipValue(node.right);\n  } // value + value\n  // value - value\n\n\n  if (isValueType(node.left.type) && node.left.type === node.right.type) {\n    var operator = node.operator;\n\n    var _covertNodesUnits = covertNodesUnits(node.left, node.right, precision),\n        left = _covertNodesUnits.left,\n        right = _covertNodesUnits.right;\n\n    if (operator === \"+\") {\n      left.value += right.value;\n    } else {\n      left.value -= right.value;\n    }\n\n    return left;\n  } // value <op> (expr)\n\n\n  if (node.right.type === 'MathExpression' && (node.right.operator === '+' || node.right.operator === '-')) {\n    // something - (something + something) => something - something - something\n    // something - (something - something) => something - something + something\n    if ((node.right.operator === '+' || node.right.operator === '-') && node.operator === '-') {\n      node.right.operator = flip(node.right.operator);\n    }\n\n    if (isValueType(node.left.type)) {\n      // value + (value + something) => value + something\n      // value + (value - something) => value - something\n      // value - (value + something) => value - something\n      // value - (value - something) => value + something\n      if (node.left.type === node.right.left.type) {\n        var _left = node.left,\n            _operator = node.operator,\n            _right = node.right;\n        node.left = reduce({\n          type: 'MathExpression',\n          operator: _operator,\n          left: _left,\n          right: _right.left\n        });\n        node.operator = _right.operator;\n        node.right = _right.right;\n        return reduce(node, precision);\n      } // something + (something + value) => dimension + something\n      // something + (something - value) => dimension + something\n      // something - (something + value) => dimension - something\n      // something - (something - value) => dimension - something\n\n\n      if (node.left.type === node.right.right.type) {\n        var _left2 = node.left,\n            _right2 = node.right;\n        node.left = reduce({\n          type: 'MathExpression',\n          operator: _right2.operator,\n          left: _left2,\n          right: _right2.right\n        });\n        node.right = _right2.left;\n        return reduce(node, precision);\n      }\n    }\n  } // (expr) <op> value\n\n\n  if (node.left.type === 'MathExpression' && (node.left.operator === '+' || node.left.operator === '-') && isValueType(node.right.type)) {\n    // (value + something) + value => value + something\n    // (value - something) + value => value - something\n    // (value + something) - value => value + something\n    // (value - something) - value => value - something\n    if (node.right.type === node.left.left.type) {\n      var _left3 = node.left,\n          _operator2 = node.operator,\n          _right3 = node.right;\n      _left3.left = reduce({\n        type: 'MathExpression',\n        operator: _operator2,\n        left: _left3.left,\n        right: _right3\n      }, precision);\n      return reduce(_left3, precision);\n    } // (something + dimension) + dimension => something + dimension\n    // (something - dimension) + dimension => something - dimension\n    // (something + dimension) - dimension => something + dimension\n    // (something - dimension) - dimension => something - dimension\n\n\n    if (node.right.type === node.left.right.type) {\n      var _left4 = node.left,\n          _operator3 = node.operator,\n          _right4 = node.right;\n\n      if (_left4.operator === '-') {\n        _left4.operator = _operator3 === '-' ? '-' : '+';\n        _left4.right = reduce({\n          type: 'MathExpression',\n          operator: _operator3 === '-' ? '+' : '-',\n          left: _right4,\n          right: _left4.right\n        }, precision);\n      } else {\n        _left4.right = reduce({\n          type: 'MathExpression',\n          operator: _operator3,\n          left: _left4.right,\n          right: _right4\n        }, precision);\n      }\n\n      if (_left4.right.value < 0) {\n        _left4.right.value *= -1;\n        _left4.operator = _left4.operator === '-' ? '+' : '-';\n      }\n\n      _left4.parenthesized = node.parenthesized;\n      return reduce(_left4, precision);\n    }\n  } // (expr) + (expr) => number\n  // (expr) - (expr) => number\n\n\n  if (node.right.type === 'MathExpression' && node.left.type === 'MathExpression') {\n    if (isEqual(node.left.right, node.right.right)) {\n      var newNodes = covertNodesUnits(node.left.left, node.right.left, precision);\n      node.left = newNodes.left;\n      node.right = newNodes.right;\n      return reduce(node);\n    }\n\n    if (isEqual(node.left.right, node.right.left)) {\n      var _newNodes = covertNodesUnits(node.left.left, node.right.right, precision);\n\n      node.left = _newNodes.left;\n      node.right = _newNodes.right;\n      return reduce(node);\n    }\n  }\n\n  return node;\n}\n\nfunction reduceDivisionExpression(node) {\n  if (!isValueType(node.right.type)) {\n    return node;\n  }\n\n  if (node.right.type !== 'Number') {\n    throw new Error(`Cannot divide by \"${node.right.unit}\", number expected`);\n  }\n\n  if (node.right.value === 0) {\n    throw new Error('Cannot divide by zero');\n  } // something / value\n\n\n  if (isValueType(node.left.type)) {\n    node.left.value /= node.right.value;\n    return node.left;\n  }\n\n  return node;\n}\n\nfunction reduceMultiplicationExpression(node) {\n  // (expr) * number\n  if (node.left.type === 'MathExpression' && node.right.type === 'Number') {\n    if (isValueType(node.left.left.type) && isValueType(node.left.right.type)) {\n      node.left.left.value *= node.right.value;\n      node.left.right.value *= node.right.value;\n      return node.left;\n    }\n  } // something * number\n\n\n  if (isValueType(node.left.type) && node.right.type === 'Number') {\n    node.left.value *= node.right.value;\n    return node.left;\n  } // number * (expr)\n\n\n  if (node.left.type === 'Number' && node.right.type === 'MathExpression') {\n    if (isValueType(node.right.left.type) && isValueType(node.right.right.type)) {\n      node.right.left.value *= node.left.value;\n      node.right.right.value *= node.left.value;\n      return node.right;\n    }\n  } // number * something\n\n\n  if (node.left.type === 'Number' && isValueType(node.right.type)) {\n    node.right.value *= node.left.value;\n    return node.right;\n  }\n\n  return node;\n}\n\nfunction covertNodesUnits(left, right, precision) {\n  switch (left.type) {\n    case 'LengthValue':\n    case 'AngleValue':\n    case 'TimeValue':\n    case 'FrequencyValue':\n    case 'ResolutionValue':\n      if (right.type === left.type && right.unit && left.unit) {\n        var converted = (0, _convertUnit.default)(right.value, right.unit, left.unit, precision);\n        right = {\n          type: left.type,\n          value: converted,\n          unit: left.unit\n        };\n      }\n\n      return {\n        left,\n        right\n      };\n\n    default:\n      return {\n        left,\n        right\n      };\n  }\n}\n\nfunction reduce(node, precision) {\n  if (node.type === \"MathExpression\") {\n    node.left = reduce(node.left, precision);\n    node.right = reduce(node.right, precision);\n\n    switch (node.operator) {\n      case \"+\":\n      case \"-\":\n        return reduceAddSubExpression(node, precision);\n\n      case \"/\":\n        return reduceDivisionExpression(node, precision);\n\n      case \"*\":\n        return reduceMultiplicationExpression(node, precision);\n    }\n\n    return node;\n  }\n\n  return node;\n}\n\nvar _default = reduce;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-calc/dist/lib/reducer.js"],"names":["Object","defineProperty","exports","value","default","_convertUnit","_interopRequireDefault","require","obj","__esModule","isEqual","left","right","type","isValueType","flip","operator","flipValue","node","reduceAddSubExpression","precision","_covertNodesUnits","covertNodesUnits","_left","_operator","_right","reduce","_left2","_right2","_left3","_operator2","_right3","_left4","_operator3","_right4","parenthesized","newNodes","_newNodes","reduceDivisionExpression","Error","unit","reduceMultiplicationExpression","converted","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _convertUnit = _interopRequireDefault(require(\"./convertUnit\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isEqual(left, right) {\n  return left.type === right.type && left.value === right.value;\n}\n\nfunction isValueType(type) {\n  switch (type) {\n    case 'LengthValue':\n    case 'AngleValue':\n    case 'TimeValue':\n    case 'FrequencyValue':\n    case 'ResolutionValue':\n    case 'EmValue':\n    case 'ExValue':\n    case 'ChValue':\n    case 'RemValue':\n    case 'VhValue':\n    case 'VwValue':\n    case 'VminValue':\n    case 'VmaxValue':\n    case 'PercentageValue':\n    case 'Number':\n      return true;\n  }\n\n  return false;\n}\n\nfunction flip(operator) {\n  return operator === '+' ? '-' : '+';\n}\n\nfunction flipValue(node) {\n  if (isValueType(node.type)) {\n    node.value = -node.value;\n  } else if (node.type === 'MathExpression') {\n    if (node.operator === '*' || node.operator === '/') {\n      node.left = flipValue(node.left);\n    } else {\n      node.left = flipValue(node.left);\n      node.right = flipValue(node.right);\n    }\n  }\n\n  return node;\n}\n\nfunction reduceAddSubExpression(node, precision) {\n  // something + 0 => something\n  // something - 0 => something\n  if (isValueType(node.right.type) && node.right.value === 0) {\n    return node.left;\n  } // 0 + something => something\n\n\n  if (isValueType(node.left.type) && node.left.value === 0 && node.operator === \"+\") {\n    return node.right;\n  } // 0 - something => -something\n\n\n  if (isValueType(node.left.type) && node.left.value === 0 && node.operator === \"-\" && node.right.type !== \"Function\") {\n    return flipValue(node.right);\n  } // value + value\n  // value - value\n\n\n  if (isValueType(node.left.type) && node.left.type === node.right.type) {\n    var operator = node.operator;\n\n    var _covertNodesUnits = covertNodesUnits(node.left, node.right, precision),\n        left = _covertNodesUnits.left,\n        right = _covertNodesUnits.right;\n\n    if (operator === \"+\") {\n      left.value += right.value;\n    } else {\n      left.value -= right.value;\n    }\n\n    return left;\n  } // value <op> (expr)\n\n\n  if (node.right.type === 'MathExpression' && (node.right.operator === '+' || node.right.operator === '-')) {\n    // something - (something + something) => something - something - something\n    // something - (something - something) => something - something + something\n    if ((node.right.operator === '+' || node.right.operator === '-') && node.operator === '-') {\n      node.right.operator = flip(node.right.operator);\n    }\n\n    if (isValueType(node.left.type)) {\n      // value + (value + something) => value + something\n      // value + (value - something) => value - something\n      // value - (value + something) => value - something\n      // value - (value - something) => value + something\n      if (node.left.type === node.right.left.type) {\n        var _left = node.left,\n            _operator = node.operator,\n            _right = node.right;\n        node.left = reduce({\n          type: 'MathExpression',\n          operator: _operator,\n          left: _left,\n          right: _right.left\n        });\n        node.operator = _right.operator;\n        node.right = _right.right;\n        return reduce(node, precision);\n      } // something + (something + value) => dimension + something\n      // something + (something - value) => dimension + something\n      // something - (something + value) => dimension - something\n      // something - (something - value) => dimension - something\n\n\n      if (node.left.type === node.right.right.type) {\n        var _left2 = node.left,\n            _right2 = node.right;\n        node.left = reduce({\n          type: 'MathExpression',\n          operator: _right2.operator,\n          left: _left2,\n          right: _right2.right\n        });\n        node.right = _right2.left;\n        return reduce(node, precision);\n      }\n    }\n  } // (expr) <op> value\n\n\n  if (node.left.type === 'MathExpression' && (node.left.operator === '+' || node.left.operator === '-') && isValueType(node.right.type)) {\n    // (value + something) + value => value + something\n    // (value - something) + value => value - something\n    // (value + something) - value => value + something\n    // (value - something) - value => value - something\n    if (node.right.type === node.left.left.type) {\n      var _left3 = node.left,\n          _operator2 = node.operator,\n          _right3 = node.right;\n      _left3.left = reduce({\n        type: 'MathExpression',\n        operator: _operator2,\n        left: _left3.left,\n        right: _right3\n      }, precision);\n      return reduce(_left3, precision);\n    } // (something + dimension) + dimension => something + dimension\n    // (something - dimension) + dimension => something - dimension\n    // (something + dimension) - dimension => something + dimension\n    // (something - dimension) - dimension => something - dimension\n\n\n    if (node.right.type === node.left.right.type) {\n      var _left4 = node.left,\n          _operator3 = node.operator,\n          _right4 = node.right;\n\n      if (_left4.operator === '-') {\n        _left4.operator = _operator3 === '-' ? '-' : '+';\n        _left4.right = reduce({\n          type: 'MathExpression',\n          operator: _operator3 === '-' ? '+' : '-',\n          left: _right4,\n          right: _left4.right\n        }, precision);\n      } else {\n        _left4.right = reduce({\n          type: 'MathExpression',\n          operator: _operator3,\n          left: _left4.right,\n          right: _right4\n        }, precision);\n      }\n\n      if (_left4.right.value < 0) {\n        _left4.right.value *= -1;\n        _left4.operator = _left4.operator === '-' ? '+' : '-';\n      }\n\n      _left4.parenthesized = node.parenthesized;\n      return reduce(_left4, precision);\n    }\n  } // (expr) + (expr) => number\n  // (expr) - (expr) => number\n\n\n  if (node.right.type === 'MathExpression' && node.left.type === 'MathExpression') {\n    if (isEqual(node.left.right, node.right.right)) {\n      var newNodes = covertNodesUnits(node.left.left, node.right.left, precision);\n      node.left = newNodes.left;\n      node.right = newNodes.right;\n      return reduce(node);\n    }\n\n    if (isEqual(node.left.right, node.right.left)) {\n      var _newNodes = covertNodesUnits(node.left.left, node.right.right, precision);\n\n      node.left = _newNodes.left;\n      node.right = _newNodes.right;\n      return reduce(node);\n    }\n  }\n\n  return node;\n}\n\nfunction reduceDivisionExpression(node) {\n  if (!isValueType(node.right.type)) {\n    return node;\n  }\n\n  if (node.right.type !== 'Number') {\n    throw new Error(`Cannot divide by \"${node.right.unit}\", number expected`);\n  }\n\n  if (node.right.value === 0) {\n    throw new Error('Cannot divide by zero');\n  } // something / value\n\n\n  if (isValueType(node.left.type)) {\n    node.left.value /= node.right.value;\n    return node.left;\n  }\n\n  return node;\n}\n\nfunction reduceMultiplicationExpression(node) {\n  // (expr) * number\n  if (node.left.type === 'MathExpression' && node.right.type === 'Number') {\n    if (isValueType(node.left.left.type) && isValueType(node.left.right.type)) {\n      node.left.left.value *= node.right.value;\n      node.left.right.value *= node.right.value;\n      return node.left;\n    }\n  } // something * number\n\n\n  if (isValueType(node.left.type) && node.right.type === 'Number') {\n    node.left.value *= node.right.value;\n    return node.left;\n  } // number * (expr)\n\n\n  if (node.left.type === 'Number' && node.right.type === 'MathExpression') {\n    if (isValueType(node.right.left.type) && isValueType(node.right.right.type)) {\n      node.right.left.value *= node.left.value;\n      node.right.right.value *= node.left.value;\n      return node.right;\n    }\n  } // number * something\n\n\n  if (node.left.type === 'Number' && isValueType(node.right.type)) {\n    node.right.value *= node.left.value;\n    return node.right;\n  }\n\n  return node;\n}\n\nfunction covertNodesUnits(left, right, precision) {\n  switch (left.type) {\n    case 'LengthValue':\n    case 'AngleValue':\n    case 'TimeValue':\n    case 'FrequencyValue':\n    case 'ResolutionValue':\n      if (right.type === left.type && right.unit && left.unit) {\n        var converted = (0, _convertUnit.default)(right.value, right.unit, left.unit, precision);\n        right = {\n          type: left.type,\n          value: converted,\n          unit: left.unit\n        };\n      }\n\n      return {\n        left,\n        right\n      };\n\n    default:\n      return {\n        left,\n        right\n      };\n  }\n}\n\nfunction reduce(node, precision) {\n  if (node.type === \"MathExpression\") {\n    node.left = reduce(node.left, precision);\n    node.right = reduce(node.right, precision);\n\n    switch (node.operator) {\n      case \"+\":\n      case \"-\":\n        return reduceAddSubExpression(node, precision);\n\n      case \"/\":\n        return reduceDivisionExpression(node, precision);\n\n      case \"*\":\n        return reduceMultiplicationExpression(node, precision);\n    }\n\n    return node;\n  }\n\n  return node;\n}\n\nvar _default = reduce;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}