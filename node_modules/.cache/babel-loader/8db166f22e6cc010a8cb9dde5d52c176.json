{"ast":null,"code":"/**\n * @fileoverview Disallow mixed spaces and tabs for indentation\n * @author Jary Niebur\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow mixed spaces and tabs for indentation\",\n      category: \"Stylistic Issues\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-mixed-spaces-and-tabs\"\n    },\n    schema: [{\n      enum: [\"smart-tabs\", true, false]\n    }]\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    let smartTabs;\n    const ignoredLocs = [];\n\n    switch (context.options[0]) {\n      case true: // Support old syntax, maybe add deprecation warning here\n\n      case \"smart-tabs\":\n        smartTabs = true;\n        break;\n\n      default:\n        smartTabs = false;\n    }\n    /**\n     * Determines if a given line and column are before a location.\n     * @param {Location} loc The location object from an AST node.\n     * @param {int} line The line to check.\n     * @param {int} column The column to check.\n     * @returns {boolean} True if the line and column are before the location, false if not.\n     * @private\n     */\n\n\n    function beforeLoc(loc, line, column) {\n      if (line < loc.start.line) {\n        return true;\n      }\n\n      return line === loc.start.line && column < loc.start.column;\n    }\n    /**\n     * Determines if a given line and column are after a location.\n     * @param {Location} loc The location object from an AST node.\n     * @param {int} line The line to check.\n     * @param {int} column The column to check.\n     * @returns {boolean} True if the line and column are after the location, false if not.\n     * @private\n     */\n\n\n    function afterLoc(loc, line, column) {\n      if (line > loc.end.line) {\n        return true;\n      }\n\n      return line === loc.end.line && column > loc.end.column;\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      TemplateElement(node) {\n        ignoredLocs.push(node.loc);\n      },\n\n      \"Program:exit\"(node) {\n        /*\n         * At least one space followed by a tab\n         * or the reverse before non-tab/-space\n         * characters begin.\n         */\n        let regex = /^(?=[\\t ]*(\\t | \\t))/u;\n        const lines = sourceCode.lines,\n              comments = sourceCode.getAllComments();\n        comments.forEach(comment => {\n          ignoredLocs.push(comment.loc);\n        });\n        ignoredLocs.sort((first, second) => {\n          if (beforeLoc(first, second.start.line, second.start.column)) {\n            return 1;\n          }\n\n          if (beforeLoc(second, first.start.line, second.start.column)) {\n            return -1;\n          }\n\n          return 0;\n        });\n\n        if (smartTabs) {\n          /*\n           * At least one space followed by a tab\n           * before non-tab/-space characters begin.\n           */\n          regex = /^(?=[\\t ]* \\t)/u;\n        }\n\n        lines.forEach((line, i) => {\n          const match = regex.exec(line);\n\n          if (match) {\n            const lineNumber = i + 1,\n                  column = match.index + 1;\n\n            for (let j = 0; j < ignoredLocs.length; j++) {\n              if (beforeLoc(ignoredLocs[j], lineNumber, column)) {\n                continue;\n              }\n\n              if (afterLoc(ignoredLocs[j], lineNumber, column)) {\n                continue;\n              }\n\n              return;\n            }\n\n            context.report({\n              node,\n              loc: {\n                line: lineNumber,\n                column\n              },\n              message: \"Mixed spaces and tabs.\"\n            });\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-mixed-spaces-and-tabs.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","enum","create","context","sourceCode","getSourceCode","smartTabs","ignoredLocs","options","beforeLoc","loc","line","column","start","afterLoc","end","TemplateElement","node","push","regex","lines","comments","getAllComments","forEach","comment","sort","first","second","i","match","exec","lineNumber","index","j","length","report","message"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Disallow mixed spaces and tabs for indentation\n * @author Jary Niebur\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"disallow mixed spaces and tabs for indentation\",\n            category: \"Stylistic Issues\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-mixed-spaces-and-tabs\"\n        },\n\n        schema: [\n            {\n                enum: [\"smart-tabs\", true, false]\n            }\n        ]\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        let smartTabs;\n        const ignoredLocs = [];\n\n        switch (context.options[0]) {\n            case true: // Support old syntax, maybe add deprecation warning here\n            case \"smart-tabs\":\n                smartTabs = true;\n                break;\n            default:\n                smartTabs = false;\n        }\n\n        /**\n         * Determines if a given line and column are before a location.\n         * @param {Location} loc The location object from an AST node.\n         * @param {int} line The line to check.\n         * @param {int} column The column to check.\n         * @returns {boolean} True if the line and column are before the location, false if not.\n         * @private\n         */\n        function beforeLoc(loc, line, column) {\n            if (line < loc.start.line) {\n                return true;\n            }\n            return line === loc.start.line && column < loc.start.column;\n        }\n\n        /**\n         * Determines if a given line and column are after a location.\n         * @param {Location} loc The location object from an AST node.\n         * @param {int} line The line to check.\n         * @param {int} column The column to check.\n         * @returns {boolean} True if the line and column are after the location, false if not.\n         * @private\n         */\n        function afterLoc(loc, line, column) {\n            if (line > loc.end.line) {\n                return true;\n            }\n            return line === loc.end.line && column > loc.end.column;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n\n            TemplateElement(node) {\n                ignoredLocs.push(node.loc);\n            },\n\n            \"Program:exit\"(node) {\n\n                /*\n                 * At least one space followed by a tab\n                 * or the reverse before non-tab/-space\n                 * characters begin.\n                 */\n                let regex = /^(?=[\\t ]*(\\t | \\t))/u;\n                const lines = sourceCode.lines,\n                    comments = sourceCode.getAllComments();\n\n                comments.forEach(comment => {\n                    ignoredLocs.push(comment.loc);\n                });\n\n                ignoredLocs.sort((first, second) => {\n                    if (beforeLoc(first, second.start.line, second.start.column)) {\n                        return 1;\n                    }\n\n                    if (beforeLoc(second, first.start.line, second.start.column)) {\n                        return -1;\n                    }\n\n                    return 0;\n                });\n\n                if (smartTabs) {\n\n                    /*\n                     * At least one space followed by a tab\n                     * before non-tab/-space characters begin.\n                     */\n                    regex = /^(?=[\\t ]* \\t)/u;\n                }\n\n                lines.forEach((line, i) => {\n                    const match = regex.exec(line);\n\n                    if (match) {\n                        const lineNumber = i + 1,\n                            column = match.index + 1;\n\n                        for (let j = 0; j < ignoredLocs.length; j++) {\n                            if (beforeLoc(ignoredLocs[j], lineNumber, column)) {\n                                continue;\n                            }\n                            if (afterLoc(ignoredLocs[j], lineNumber, column)) {\n                                continue;\n                            }\n\n                            return;\n                        }\n\n                        context.report({ node, loc: { line: lineNumber, column }, message: \"Mixed spaces and tabs.\" });\n                    }\n                });\n            }\n\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}