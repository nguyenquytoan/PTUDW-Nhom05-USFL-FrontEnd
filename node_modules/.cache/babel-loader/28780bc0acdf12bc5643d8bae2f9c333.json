{"ast":null,"code":"\"use strict\";\n\nvar isPrototype = require(\"../prototype/is\"); // In theory we could rely on Symbol.toStringTag directly,\n// still early native implementation (e.g. in FF) predated symbols\n\n\nvar objectToString = Object.prototype.toString,\n    objectTaggedString = objectToString.call(Promise.resolve());\n\nmodule.exports = function (value) {\n  if (!value) return false; // Sanity check (reject objects which do not expose common Promise interface)\n\n  try {\n    if (typeof value.then !== \"function\") return false;\n    if (typeof value[\"catch\"] !== \"function\") return false;\n  } catch (error) {\n    return false;\n  } // Ensure its native Promise object (has [[PromiseState]] slot)\n  // Note: it's not 100% precise as string tag may be overriden\n  // and other objects could be hacked to expose it\n\n\n  if (objectToString.call(value) !== objectTaggedString) return false;\n  return !isPrototype(value);\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type/promise/is.js"],"names":["isPrototype","require","objectToString","Object","prototype","toString","objectTaggedString","call","Promise","resolve","module","exports","value","then","error"],"mappings":"AAAA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,iBAAD,CAAzB,C,CAEA;AACA;;;AACA,IAAIC,cAAc,GAAGC,MAAM,CAACC,SAAP,CAAiBC,QAAtC;AAAA,IACIC,kBAAkB,GAAGJ,cAAc,CAACK,IAAf,CAAoBC,OAAO,CAACC,OAAR,EAApB,CADzB;;AAGAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AACjC,MAAI,CAACA,KAAL,EAAY,OAAO,KAAP,CADqB,CAGjC;;AACA,MAAI;AACH,QAAI,OAAOA,KAAK,CAACC,IAAb,KAAsB,UAA1B,EAAsC,OAAO,KAAP;AACtC,QAAI,OAAOD,KAAK,CAAC,OAAD,CAAZ,KAA0B,UAA9B,EAA0C,OAAO,KAAP;AAC1C,GAHD,CAGE,OAAOE,KAAP,EAAc;AACf,WAAO,KAAP;AACA,GATgC,CAWjC;AACA;AACA;;;AACA,MAAIZ,cAAc,CAACK,IAAf,CAAoBK,KAApB,MAA+BN,kBAAnC,EAAuD,OAAO,KAAP;AAEvD,SAAO,CAACN,WAAW,CAACY,KAAD,CAAnB;AACA,CAjBD","sourcesContent":["\"use strict\";\n\nvar isPrototype = require(\"../prototype/is\");\n\n// In theory we could rely on Symbol.toStringTag directly,\n// still early native implementation (e.g. in FF) predated symbols\nvar objectToString = Object.prototype.toString\n  , objectTaggedString = objectToString.call(Promise.resolve());\n\nmodule.exports = function (value) {\n\tif (!value) return false;\n\n\t// Sanity check (reject objects which do not expose common Promise interface)\n\ttry {\n\t\tif (typeof value.then !== \"function\") return false;\n\t\tif (typeof value[\"catch\"] !== \"function\") return false;\n\t} catch (error) {\n\t\treturn false;\n\t}\n\n\t// Ensure its native Promise object (has [[PromiseState]] slot)\n\t// Note: it's not 100% precise as string tag may be overriden\n\t// and other objects could be hacked to expose it\n\tif (objectToString.call(value) !== objectTaggedString) return false;\n\n\treturn !isPrototype(value);\n};\n"]},"metadata":{},"sourceType":"script"}