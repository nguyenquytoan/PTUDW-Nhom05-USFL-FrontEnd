{"ast":null,"code":"/**\n * @fileoverview Rule to check for implicit global variables, functions and classes.\n * @author Joshua Peek\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow declarations in the global scope\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-implicit-globals\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        lexicalBindings: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      globalNonLexicalBinding: \"Unexpected {{kind}} declaration in the global scope, wrap in an IIFE for a local variable, assign as global property for a global variable.\",\n      globalLexicalBinding: \"Unexpected {{kind}} declaration in the global scope, wrap in a block or in an IIFE.\",\n      globalVariableLeak: \"Global variable leak, declare the variable if it is intended to be local.\",\n      assignmentToReadonlyGlobal: \"Unexpected assignment to read-only global variable.\",\n      redeclarationOfReadonlyGlobal: \"Unexpected redeclaration of read-only global variable.\"\n    }\n  },\n\n  create(context) {\n    const checkLexicalBindings = context.options[0] && context.options[0].lexicalBindings === true;\n    /**\n     * Reports the node.\n     * @param {ASTNode} node Node to report.\n     * @param {string} messageId Id of the message to report.\n     * @param {string|undefined} kind Declaration kind, can be 'var', 'const', 'let', function or class.\n     * @returns {void}\n     */\n\n    function report(node, messageId, kind) {\n      context.report({\n        node,\n        messageId,\n        data: {\n          kind\n        }\n      });\n    }\n\n    return {\n      Program() {\n        const scope = context.getScope();\n        scope.variables.forEach(variable => {\n          // Only ESLint global variables have the `writable` key.\n          const isReadonlyEslintGlobalVariable = variable.writeable === false;\n          const isWritableEslintGlobalVariable = variable.writeable === true;\n\n          if (isWritableEslintGlobalVariable) {\n            // Everything is allowed with writable ESLint global variables.\n            return;\n          }\n\n          variable.defs.forEach(def => {\n            const defNode = def.node;\n\n            if (def.type === \"FunctionName\" || def.type === \"Variable\" && def.parent.kind === \"var\") {\n              if (isReadonlyEslintGlobalVariable) {\n                report(defNode, \"redeclarationOfReadonlyGlobal\");\n              } else {\n                report(defNode, \"globalNonLexicalBinding\", def.type === \"FunctionName\" ? \"function\" : `'${def.parent.kind}'`);\n              }\n            }\n\n            if (checkLexicalBindings) {\n              if (def.type === \"ClassName\" || def.type === \"Variable\" && (def.parent.kind === \"let\" || def.parent.kind === \"const\")) {\n                if (isReadonlyEslintGlobalVariable) {\n                  report(defNode, \"redeclarationOfReadonlyGlobal\");\n                } else {\n                  report(defNode, \"globalLexicalBinding\", def.type === \"ClassName\" ? \"class\" : `'${def.parent.kind}'`);\n                }\n              }\n            }\n          });\n        }); // Undeclared assigned variables.\n\n        scope.implicit.variables.forEach(variable => {\n          const scopeVariable = scope.set.get(variable.name);\n          let messageId;\n\n          if (scopeVariable) {\n            // ESLint global variable\n            if (scopeVariable.writeable) {\n              return;\n            }\n\n            messageId = \"assignmentToReadonlyGlobal\";\n          } else {\n            // Reference to an unknown variable, possible global leak.\n            messageId = \"globalVariableLeak\";\n          } // def.node is an AssignmentExpression, ForInStatement or ForOfStatement.\n\n\n          variable.defs.forEach(def => {\n            report(def.node, messageId);\n          });\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-implicit-globals.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","properties","lexicalBindings","default","additionalProperties","messages","globalNonLexicalBinding","globalLexicalBinding","globalVariableLeak","assignmentToReadonlyGlobal","redeclarationOfReadonlyGlobal","create","context","checkLexicalBindings","options","report","node","messageId","kind","data","Program","scope","getScope","variables","forEach","variable","isReadonlyEslintGlobalVariable","writeable","isWritableEslintGlobalVariable","defs","def","defNode","parent","implicit","scopeVariable","set","get","name"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to check for implicit global variables, functions and classes.\n * @author Joshua Peek\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow declarations in the global scope\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-implicit-globals\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                lexicalBindings: {\n                    type: \"boolean\",\n                    default: false\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            globalNonLexicalBinding: \"Unexpected {{kind}} declaration in the global scope, wrap in an IIFE for a local variable, assign as global property for a global variable.\",\n            globalLexicalBinding: \"Unexpected {{kind}} declaration in the global scope, wrap in a block or in an IIFE.\",\n            globalVariableLeak: \"Global variable leak, declare the variable if it is intended to be local.\",\n            assignmentToReadonlyGlobal: \"Unexpected assignment to read-only global variable.\",\n            redeclarationOfReadonlyGlobal: \"Unexpected redeclaration of read-only global variable.\"\n        }\n    },\n\n    create(context) {\n\n        const checkLexicalBindings = context.options[0] && context.options[0].lexicalBindings === true;\n\n        /**\n         * Reports the node.\n         * @param {ASTNode} node Node to report.\n         * @param {string} messageId Id of the message to report.\n         * @param {string|undefined} kind Declaration kind, can be 'var', 'const', 'let', function or class.\n         * @returns {void}\n         */\n        function report(node, messageId, kind) {\n            context.report({\n                node,\n                messageId,\n                data: {\n                    kind\n                }\n            });\n        }\n\n        return {\n            Program() {\n                const scope = context.getScope();\n\n                scope.variables.forEach(variable => {\n\n                    // Only ESLint global variables have the `writable` key.\n                    const isReadonlyEslintGlobalVariable = variable.writeable === false;\n                    const isWritableEslintGlobalVariable = variable.writeable === true;\n\n                    if (isWritableEslintGlobalVariable) {\n\n                        // Everything is allowed with writable ESLint global variables.\n                        return;\n                    }\n\n                    variable.defs.forEach(def => {\n                        const defNode = def.node;\n\n                        if (def.type === \"FunctionName\" || (def.type === \"Variable\" && def.parent.kind === \"var\")) {\n                            if (isReadonlyEslintGlobalVariable) {\n                                report(defNode, \"redeclarationOfReadonlyGlobal\");\n                            } else {\n                                report(\n                                    defNode,\n                                    \"globalNonLexicalBinding\",\n                                    def.type === \"FunctionName\" ? \"function\" : `'${def.parent.kind}'`\n                                );\n                            }\n                        }\n\n                        if (checkLexicalBindings) {\n                            if (def.type === \"ClassName\" ||\n                                    (def.type === \"Variable\" && (def.parent.kind === \"let\" || def.parent.kind === \"const\"))) {\n                                if (isReadonlyEslintGlobalVariable) {\n                                    report(defNode, \"redeclarationOfReadonlyGlobal\");\n                                } else {\n                                    report(\n                                        defNode,\n                                        \"globalLexicalBinding\",\n                                        def.type === \"ClassName\" ? \"class\" : `'${def.parent.kind}'`\n                                    );\n                                }\n                            }\n                        }\n                    });\n                });\n\n                // Undeclared assigned variables.\n                scope.implicit.variables.forEach(variable => {\n                    const scopeVariable = scope.set.get(variable.name);\n                    let messageId;\n\n                    if (scopeVariable) {\n\n                        // ESLint global variable\n                        if (scopeVariable.writeable) {\n                            return;\n                        }\n                        messageId = \"assignmentToReadonlyGlobal\";\n\n                    } else {\n\n                        // Reference to an unknown variable, possible global leak.\n                        messageId = \"globalVariableLeak\";\n                    }\n\n                    // def.node is an AssignmentExpression, ForInStatement or ForOfStatement.\n                    variable.defs.forEach(def => {\n                        report(def.node, messageId);\n                    });\n                });\n            }\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}