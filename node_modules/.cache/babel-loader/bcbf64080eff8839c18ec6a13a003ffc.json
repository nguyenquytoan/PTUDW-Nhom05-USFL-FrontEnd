{"ast":null,"code":"var assert = require('assert');\n\nvar rgbaRegex = require('..');\n\nvar rgbaStrings = ['rgba(12,34,56, 1)', 'rgba(255, 255,      255, .9)', 'rgba(1,   1,1, 0.2)'];\nvar inexactRgbaStrings = ['rgba(,,,)', 'rGba(12,34,56,1)', 'rgba(12, 34, 200,1) ', '   rgba(12,34,56,1)', 'rgba(1,2,,)'];\ndescribe('rgba-regex', function () {\n  describe('exact: true', function () {\n    it('should return a regex that matches exact rgba strings', function () {\n      rgbaStrings.forEach(function (rgba) {\n        assert.ok(rgbaRegex({\n          exact: true\n        }).test(rgba));\n      });\n    });\n    it('should return a regex that does not match invalid rgba strings', function () {\n      inexactRgbaStrings.forEach(function (invalidRgba) {\n        assert.ok(!rgbaRegex({\n          exact: true\n        }).test(invalidRgba));\n      });\n    });\n  });\n  describe('g', function () {\n    it('should match rgba strings', function () {\n      assert.deepEqual(rgbaStrings.join('foobar').match(rgbaRegex()), rgbaStrings);\n    });\n    it('should not match non rgba strings', function () {\n      assert.deepEqual(inexactRgbaStrings.join('foobar').match(rgbaRegex()), ['rGba(12,34,56,1)', 'rgba(12, 34, 200,1)', 'rgba(12,34,56,1)']);\n    });\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/rgba-regex/test/test.js"],"names":["assert","require","rgbaRegex","rgbaStrings","inexactRgbaStrings","describe","it","forEach","rgba","ok","exact","test","invalidRgba","deepEqual","join","match"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,IAAD,CAAvB;;AAEA,IAAIE,WAAW,GAAG,CAChB,mBADgB,EAEhB,8BAFgB,EAGhB,qBAHgB,CAAlB;AAMA,IAAIC,kBAAkB,GAAG,CACvB,WADuB,EAEvB,kBAFuB,EAGvB,sBAHuB,EAIvB,qBAJuB,EAKvB,aALuB,CAAzB;AAQAC,QAAQ,CAAC,YAAD,EAAe,YAAW;AAEhCA,EAAAA,QAAQ,CAAC,aAAD,EAAgB,YAAW;AAEjCC,IAAAA,EAAE,CAAC,uDAAD,EAA0D,YAAW;AACrEH,MAAAA,WAAW,CAACI,OAAZ,CAAoB,UAASC,IAAT,EAAe;AACjCR,QAAAA,MAAM,CAACS,EAAP,CAAUP,SAAS,CAAC;AAAEQ,UAAAA,KAAK,EAAE;AAAT,SAAD,CAAT,CAA2BC,IAA3B,CAAgCH,IAAhC,CAAV;AACD,OAFD;AAGD,KAJC,CAAF;AAMAF,IAAAA,EAAE,CAAC,gEAAD,EAAmE,YAAW;AAC9EF,MAAAA,kBAAkB,CAACG,OAAnB,CAA2B,UAASK,WAAT,EAAsB;AAC/CZ,QAAAA,MAAM,CAACS,EAAP,CAAU,CAACP,SAAS,CAAC;AAAEQ,UAAAA,KAAK,EAAE;AAAT,SAAD,CAAT,CAA2BC,IAA3B,CAAgCC,WAAhC,CAAX;AACD,OAFD;AAGD,KAJC,CAAF;AAKD,GAbO,CAAR;AAeAP,EAAAA,QAAQ,CAAC,GAAD,EAAM,YAAW;AAEvBC,IAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAW;AACzCN,MAAAA,MAAM,CAACa,SAAP,CACEV,WAAW,CAACW,IAAZ,CAAiB,QAAjB,EAA2BC,KAA3B,CAAiCb,SAAS,EAA1C,CADF,EAEEC,WAFF;AAID,KALC,CAAF;AAOAG,IAAAA,EAAE,CAAC,mCAAD,EAAsC,YAAW;AACjDN,MAAAA,MAAM,CAACa,SAAP,CACET,kBAAkB,CAACU,IAAnB,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCb,SAAS,EAAjD,CADF,EAEE,CAAC,kBAAD,EAAqB,qBAArB,EAA4C,kBAA5C,CAFF;AAID,KALC,CAAF;AAMD,GAfO,CAAR;AAgBD,CAjCO,CAAR","sourcesContent":["var assert = require('assert');\nvar rgbaRegex = require('..');\n\nvar rgbaStrings = [\n  'rgba(12,34,56, 1)',\n  'rgba(255, 255,      255, .9)',\n  'rgba(1,   1,1, 0.2)'\n];\n\nvar inexactRgbaStrings = [\n  'rgba(,,,)',\n  'rGba(12,34,56,1)',\n  'rgba(12, 34, 200,1) ',\n  '   rgba(12,34,56,1)',\n  'rgba(1,2,,)'\n];\n\ndescribe('rgba-regex', function() {\n\n  describe('exact: true', function() {\n\n    it('should return a regex that matches exact rgba strings', function() {\n      rgbaStrings.forEach(function(rgba) {\n        assert.ok(rgbaRegex({ exact: true }).test(rgba));\n      });\n    });\n\n    it('should return a regex that does not match invalid rgba strings', function() {\n      inexactRgbaStrings.forEach(function(invalidRgba) {\n        assert.ok(!rgbaRegex({ exact: true }).test(invalidRgba));\n      });\n    });\n  });\n\n  describe('g', function() {\n\n    it('should match rgba strings', function() {\n      assert.deepEqual(\n        rgbaStrings.join('foobar').match(rgbaRegex()),\n        rgbaStrings\n      )\n    });\n\n    it('should not match non rgba strings', function() {\n      assert.deepEqual(\n        inexactRgbaStrings.join('foobar').match(rgbaRegex()),\n        ['rGba(12,34,56,1)', 'rgba(12, 34, 200,1)', 'rgba(12,34,56,1)']\n      );\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"script"}