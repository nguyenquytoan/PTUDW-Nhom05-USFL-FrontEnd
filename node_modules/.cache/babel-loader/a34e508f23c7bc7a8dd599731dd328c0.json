{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _loaderUtils = _interopRequireDefault(require(\"loader-utils\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Examples:\n// - ~package\n// - ~package/\n// - ~@org\n// - ~@org/\n// - ~@org/package\n// - ~@org/package/\n\n\nconst matchModuleImport = /^~([^/]+|[^/]+\\/|@[^/]+[/][^/]+|@[^/]+\\/?|@[^/]+[/][^/]+\\/)$/;\n/**\n * When libsass tries to resolve an import, it uses a special algorithm.\n * Since the sass-loader uses webpack to resolve the modules, we need to simulate that algorithm. This function\n * returns an array of import paths to try. The last entry in the array is always the original url\n * to enable straight-forward webpack.config aliases.\n *\n * @param {string} url\n * @returns {Array<string>}\n */\n\nfunction importsToResolve(url) {\n  const request = _loaderUtils.default.urlToRequest(url); // Keep in mind: ext can also be something like '.datepicker' when the true extension is omitted and the filename contains a dot.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/167\n\n\n  const ext = _path.default.extname(request).toLowerCase(); // In case there is module request, send this to webpack resolver\n\n\n  if (matchModuleImport.test(url)) {\n    return [request, url];\n  } // Because @import is also defined in CSS, Sass needs a way of compiling plain CSS @imports without trying to import the files at compile time.\n  // To accomplish this, and to ensure SCSS is as much of a superset of CSS as possible, Sass will compile any @imports with the following characteristics to plain CSS imports:\n  //  - imports where the URL ends with .css.\n  //  - imports where the URL begins http:// or https://.\n  //  - imports where the URL is written as a url().\n  //  - imports that have media queries.\n  //\n  // The `node-sass` package sends `@import` ending on `.css` to importer, it is bug, so we skip resolve\n\n\n  if (ext === '.css') {\n    return [];\n  }\n\n  const dirname = _path.default.dirname(request);\n\n  const basename = _path.default.basename(request); // In case there is file extension:\n  //\n  // 1. Try to resolve `_` file.\n  // 2. Try to resolve file without `_`.\n  // 3. Send a original url to webpack resolver, maybe it is alias.\n\n\n  if (['.scss', '.sass'].includes(ext)) {\n    return [`${dirname}/_${basename}`, `${dirname}/${basename}`, url];\n  } // In case there is no file extension and filename starts with `_`:\n  //\n  // 1. Try to resolve files with `scss`, `sass` and `css` extensions.\n  // 2. Try to resolve directory with `_index` or `index` filename.\n  // 3. Send the original url to webpack resolver, maybe it's alias.\n\n\n  if (basename.startsWith('_')) {\n    return [`${request}.scss`, `${request}.sass`, `${request}.css`, request, url];\n  } // In case there is no file extension and filename doesn't start with `_`:\n  //\n  // 1. Try to resolve file starts with `_` and with extensions\n  // 2. Try to resolve file with extensions\n  // 3. Try to resolve directory with `_index` or `index` filename.\n  // 4. Send a original url to webpack resolver, maybe it is alias.\n\n\n  return [`${dirname}/_${basename}.scss`, `${dirname}/_${basename}.sass`, `${dirname}/_${basename}.css`, `${request}.scss`, `${request}.sass`, `${request}.css`, request, url];\n}\n\nvar _default = importsToResolve;\nexports.default = _default;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/sass-loader/dist/importsToResolve.js"],"names":["Object","defineProperty","exports","value","default","_path","_interopRequireDefault","require","_loaderUtils","obj","__esModule","matchModuleImport","importsToResolve","url","request","urlToRequest","ext","extname","toLowerCase","test","dirname","basename","includes","startsWith","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGC,sBAAsB,CAACC,OAAO,CAAC,MAAD,CAAR,CAAlC;;AAEA,IAAIC,YAAY,GAAGF,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAzC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEL,IAAAA,OAAO,EAAEK;AAAX,GAArC;AAAwD,C,CAE/F;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,iBAAiB,GAAG,8DAA1B;AACA;;;;;;;;;;AAUA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC7B,QAAMC,OAAO,GAAGN,YAAY,CAACJ,OAAb,CAAqBW,YAArB,CAAkCF,GAAlC,CAAhB,CAD6B,CAC2B;AACxD;;;AAGA,QAAMG,GAAG,GAAGX,KAAK,CAACD,OAAN,CAAca,OAAd,CAAsBH,OAAtB,EAA+BI,WAA/B,EAAZ,CAL6B,CAK6B;;;AAG1D,MAAIP,iBAAiB,CAACQ,IAAlB,CAAuBN,GAAvB,CAAJ,EAAiC;AAC/B,WAAO,CAACC,OAAD,EAAUD,GAAV,CAAP;AACD,GAV4B,CAU3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAIG,GAAG,KAAK,MAAZ,EAAoB;AAClB,WAAO,EAAP;AACD;;AAED,QAAMI,OAAO,GAAGf,KAAK,CAACD,OAAN,CAAcgB,OAAd,CAAsBN,OAAtB,CAAhB;;AAEA,QAAMO,QAAQ,GAAGhB,KAAK,CAACD,OAAN,CAAciB,QAAd,CAAuBP,OAAvB,CAAjB,CA1B6B,CA0BqB;AAClD;AACA;AACA;AACA;;;AAGA,MAAI,CAAC,OAAD,EAAU,OAAV,EAAmBQ,QAAnB,CAA4BN,GAA5B,CAAJ,EAAsC;AACpC,WAAO,CAAE,GAAEI,OAAQ,KAAIC,QAAS,EAAzB,EAA6B,GAAED,OAAQ,IAAGC,QAAS,EAAnD,EAAsDR,GAAtD,CAAP;AACD,GAnC4B,CAmC3B;AACF;AACA;AACA;AACA;;;AAGA,MAAIQ,QAAQ,CAACE,UAAT,CAAoB,GAApB,CAAJ,EAA8B;AAC5B,WAAO,CAAE,GAAET,OAAQ,OAAZ,EAAqB,GAAEA,OAAQ,OAA/B,EAAwC,GAAEA,OAAQ,MAAlD,EAAyDA,OAAzD,EAAkED,GAAlE,CAAP;AACD,GA5C4B,CA4C3B;AACF;AACA;AACA;AACA;AACA;;;AAGA,SAAO,CAAE,GAAEO,OAAQ,KAAIC,QAAS,OAAzB,EAAkC,GAAED,OAAQ,KAAIC,QAAS,OAAzD,EAAkE,GAAED,OAAQ,KAAIC,QAAS,MAAzF,EAAiG,GAAEP,OAAQ,OAA3G,EAAoH,GAAEA,OAAQ,OAA9H,EAAuI,GAAEA,OAAQ,MAAjJ,EAAwJA,OAAxJ,EAAiKD,GAAjK,CAAP;AACD;;AAED,IAAIW,QAAQ,GAAGZ,gBAAf;AACAV,OAAO,CAACE,OAAR,GAAkBoB,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _loaderUtils = _interopRequireDefault(require(\"loader-utils\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Examples:\n// - ~package\n// - ~package/\n// - ~@org\n// - ~@org/\n// - ~@org/package\n// - ~@org/package/\nconst matchModuleImport = /^~([^/]+|[^/]+\\/|@[^/]+[/][^/]+|@[^/]+\\/?|@[^/]+[/][^/]+\\/)$/;\n/**\n * When libsass tries to resolve an import, it uses a special algorithm.\n * Since the sass-loader uses webpack to resolve the modules, we need to simulate that algorithm. This function\n * returns an array of import paths to try. The last entry in the array is always the original url\n * to enable straight-forward webpack.config aliases.\n *\n * @param {string} url\n * @returns {Array<string>}\n */\n\nfunction importsToResolve(url) {\n  const request = _loaderUtils.default.urlToRequest(url); // Keep in mind: ext can also be something like '.datepicker' when the true extension is omitted and the filename contains a dot.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/167\n\n\n  const ext = _path.default.extname(request).toLowerCase(); // In case there is module request, send this to webpack resolver\n\n\n  if (matchModuleImport.test(url)) {\n    return [request, url];\n  } // Because @import is also defined in CSS, Sass needs a way of compiling plain CSS @imports without trying to import the files at compile time.\n  // To accomplish this, and to ensure SCSS is as much of a superset of CSS as possible, Sass will compile any @imports with the following characteristics to plain CSS imports:\n  //  - imports where the URL ends with .css.\n  //  - imports where the URL begins http:// or https://.\n  //  - imports where the URL is written as a url().\n  //  - imports that have media queries.\n  //\n  // The `node-sass` package sends `@import` ending on `.css` to importer, it is bug, so we skip resolve\n\n\n  if (ext === '.css') {\n    return [];\n  }\n\n  const dirname = _path.default.dirname(request);\n\n  const basename = _path.default.basename(request); // In case there is file extension:\n  //\n  // 1. Try to resolve `_` file.\n  // 2. Try to resolve file without `_`.\n  // 3. Send a original url to webpack resolver, maybe it is alias.\n\n\n  if (['.scss', '.sass'].includes(ext)) {\n    return [`${dirname}/_${basename}`, `${dirname}/${basename}`, url];\n  } // In case there is no file extension and filename starts with `_`:\n  //\n  // 1. Try to resolve files with `scss`, `sass` and `css` extensions.\n  // 2. Try to resolve directory with `_index` or `index` filename.\n  // 3. Send the original url to webpack resolver, maybe it's alias.\n\n\n  if (basename.startsWith('_')) {\n    return [`${request}.scss`, `${request}.sass`, `${request}.css`, request, url];\n  } // In case there is no file extension and filename doesn't start with `_`:\n  //\n  // 1. Try to resolve file starts with `_` and with extensions\n  // 2. Try to resolve file with extensions\n  // 3. Try to resolve directory with `_index` or `index` filename.\n  // 4. Send a original url to webpack resolver, maybe it is alias.\n\n\n  return [`${dirname}/_${basename}.scss`, `${dirname}/_${basename}.sass`, `${dirname}/_${basename}.css`, `${request}.scss`, `${request}.sass`, `${request}.css`, request, url];\n}\n\nvar _default = importsToResolve;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}