{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst matchRelativePath = /^\\.\\.?[/\\\\]/;\n\nfunction isAbsolutePath(str) {\n  return path.posix.isAbsolute(str) || path.win32.isAbsolute(str);\n}\n\nfunction isRelativePath(str) {\n  return matchRelativePath.test(str);\n}\n\nfunction stringifyRequest(loaderContext, request) {\n  const splitted = request.split('!');\n  const context = loaderContext.context || loaderContext.options && loaderContext.options.context;\n  return JSON.stringify(splitted.map(part => {\n    // First, separate singlePath from query, because the query might contain paths again\n    const splittedPart = part.match(/^(.*?)(\\?.*)/);\n    const query = splittedPart ? splittedPart[2] : '';\n    let singlePath = splittedPart ? splittedPart[1] : part;\n\n    if (isAbsolutePath(singlePath) && context) {\n      singlePath = path.relative(context, singlePath);\n\n      if (isAbsolutePath(singlePath)) {\n        // If singlePath still matches an absolute path, singlePath was on a different drive than context.\n        // In this case, we leave the path platform-specific without replacing any separators.\n        // @see https://github.com/webpack/loader-utils/pull/14\n        return singlePath + query;\n      }\n\n      if (isRelativePath(singlePath) === false) {\n        // Ensure that the relative path starts at least with ./ otherwise it would be a request into the modules directory (like node_modules).\n        singlePath = './' + singlePath;\n      }\n    }\n\n    return singlePath.replace(/\\\\/g, '/') + query;\n  }).join('!'));\n}\n\nmodule.exports = stringifyRequest;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/resolve-url-loader/node_modules/loader-utils/lib/stringifyRequest.js"],"names":["path","require","matchRelativePath","isAbsolutePath","str","posix","isAbsolute","win32","isRelativePath","test","stringifyRequest","loaderContext","request","splitted","split","context","options","JSON","stringify","map","part","splittedPart","match","query","singlePath","relative","replace","join","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMC,iBAAiB,GAAG,aAA1B;;AAEA,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,SAAOJ,IAAI,CAACK,KAAL,CAAWC,UAAX,CAAsBF,GAAtB,KAA8BJ,IAAI,CAACO,KAAL,CAAWD,UAAX,CAAsBF,GAAtB,CAArC;AACD;;AAED,SAASI,cAAT,CAAwBJ,GAAxB,EAA6B;AAC3B,SAAOF,iBAAiB,CAACO,IAAlB,CAAuBL,GAAvB,CAAP;AACD;;AAED,SAASM,gBAAT,CAA0BC,aAA1B,EAAyCC,OAAzC,EAAkD;AAChD,QAAMC,QAAQ,GAAGD,OAAO,CAACE,KAAR,CAAc,GAAd,CAAjB;AACA,QAAMC,OAAO,GACXJ,aAAa,CAACI,OAAd,IACCJ,aAAa,CAACK,OAAd,IAAyBL,aAAa,CAACK,OAAd,CAAsBD,OAFlD;AAIA,SAAOE,IAAI,CAACC,SAAL,CACLL,QAAQ,CACLM,GADH,CACQC,IAAD,IAAU;AACb;AACA,UAAMC,YAAY,GAAGD,IAAI,CAACE,KAAL,CAAW,cAAX,CAArB;AACA,UAAMC,KAAK,GAAGF,YAAY,GAAGA,YAAY,CAAC,CAAD,CAAf,GAAqB,EAA/C;AACA,QAAIG,UAAU,GAAGH,YAAY,GAAGA,YAAY,CAAC,CAAD,CAAf,GAAqBD,IAAlD;;AAEA,QAAIjB,cAAc,CAACqB,UAAD,CAAd,IAA8BT,OAAlC,EAA2C;AACzCS,MAAAA,UAAU,GAAGxB,IAAI,CAACyB,QAAL,CAAcV,OAAd,EAAuBS,UAAvB,CAAb;;AAEA,UAAIrB,cAAc,CAACqB,UAAD,CAAlB,EAAgC;AAC9B;AACA;AACA;AACA,eAAOA,UAAU,GAAGD,KAApB;AACD;;AAED,UAAIf,cAAc,CAACgB,UAAD,CAAd,KAA+B,KAAnC,EAA0C;AACxC;AACAA,QAAAA,UAAU,GAAG,OAAOA,UAApB;AACD;AACF;;AAED,WAAOA,UAAU,CAACE,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,IAAiCH,KAAxC;AACD,GAxBH,EAyBGI,IAzBH,CAyBQ,GAzBR,CADK,CAAP;AA4BD;;AAEDC,MAAM,CAACC,OAAP,GAAiBnB,gBAAjB","sourcesContent":["'use strict';\n\nconst path = require('path');\n\nconst matchRelativePath = /^\\.\\.?[/\\\\]/;\n\nfunction isAbsolutePath(str) {\n  return path.posix.isAbsolute(str) || path.win32.isAbsolute(str);\n}\n\nfunction isRelativePath(str) {\n  return matchRelativePath.test(str);\n}\n\nfunction stringifyRequest(loaderContext, request) {\n  const splitted = request.split('!');\n  const context =\n    loaderContext.context ||\n    (loaderContext.options && loaderContext.options.context);\n\n  return JSON.stringify(\n    splitted\n      .map((part) => {\n        // First, separate singlePath from query, because the query might contain paths again\n        const splittedPart = part.match(/^(.*?)(\\?.*)/);\n        const query = splittedPart ? splittedPart[2] : '';\n        let singlePath = splittedPart ? splittedPart[1] : part;\n\n        if (isAbsolutePath(singlePath) && context) {\n          singlePath = path.relative(context, singlePath);\n\n          if (isAbsolutePath(singlePath)) {\n            // If singlePath still matches an absolute path, singlePath was on a different drive than context.\n            // In this case, we leave the path platform-specific without replacing any separators.\n            // @see https://github.com/webpack/loader-utils/pull/14\n            return singlePath + query;\n          }\n\n          if (isRelativePath(singlePath) === false) {\n            // Ensure that the relative path starts at least with ./ otherwise it would be a request into the modules directory (like node_modules).\n            singlePath = './' + singlePath;\n          }\n        }\n\n        return singlePath.replace(/\\\\/g, '/') + query;\n      })\n      .join('!')\n  );\n}\n\nmodule.exports = stringifyRequest;\n"]},"metadata":{},"sourceType":"script"}