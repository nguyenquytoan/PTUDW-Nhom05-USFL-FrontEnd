{"ast":null,"code":"\"use strict\";\n\nconst path = require(\"path\");\n\nconst process = require(\"process\");\n\nconst childProcess = require(\"child_process\");\n\nconst worker_rpc_1 = require(\"worker-rpc\");\n\nconst semver = require(\"semver\");\n\nconst chalk_1 = require(\"chalk\");\n\nconst micromatch = require(\"micromatch\");\n\nconst os = require(\"os\");\n\nconst CancellationToken_1 = require(\"./CancellationToken\");\n\nconst NormalizedMessage_1 = require(\"./NormalizedMessage\");\n\nconst defaultFormatter_1 = require(\"./formatter/defaultFormatter\");\n\nconst codeframeFormatter_1 = require(\"./formatter/codeframeFormatter\");\n\nconst FsHelper_1 = require(\"./FsHelper\");\n\nconst hooks_1 = require(\"./hooks\");\n\nconst RpcTypes_1 = require(\"./RpcTypes\");\n\nconst checkerPluginName = 'fork-ts-checker-webpack-plugin';\n/**\n * ForkTsCheckerWebpackPlugin\n * Runs typescript type checker and linter (tslint) on separate process.\n * This speed-ups build a lot.\n *\n * Options description in README.md\n */\n\nclass ForkTsCheckerWebpackPlugin {\n  constructor(options) {\n    this.tslint = false;\n    this.eslint = false;\n    this.eslintOptions = {};\n    this.tslintAutoFix = false;\n    this.tsconfigPath = undefined;\n    this.tslintPath = undefined;\n    this.watchPaths = [];\n    this.compiler = undefined;\n    this.started = undefined;\n    this.elapsed = undefined;\n    this.cancellationToken = undefined;\n    this.isWatching = false;\n    this.checkDone = false;\n    this.compilationDone = false;\n    this.diagnostics = [];\n    this.lints = [];\n    this.eslintVersion = undefined;\n    this.startAt = 0;\n    this.nodeArgs = [];\n    options = options || {};\n    this.options = Object.assign({}, options);\n    this.watch = typeof options.watch === 'string' ? [options.watch] : options.watch || [];\n    this.ignoreDiagnostics = options.ignoreDiagnostics || [];\n    this.ignoreLints = options.ignoreLints || [];\n    this.ignoreLintWarnings = options.ignoreLintWarnings === true;\n    this.reportFiles = options.reportFiles || [];\n    this.logger = options.logger || console;\n    this.silent = options.silent === true; // default false\n\n    this.async = options.async !== false; // default true\n\n    this.checkSyntacticErrors = options.checkSyntacticErrors === true; // default false\n\n    this.resolveModuleNameModule = options.resolveModuleNameModule;\n    this.resolveTypeReferenceDirectiveModule = options.resolveTypeReferenceDirectiveModule;\n    this.workersNumber = options.workers || ForkTsCheckerWebpackPlugin.ONE_CPU;\n    this.memoryLimit = options.memoryLimit || ForkTsCheckerWebpackPlugin.DEFAULT_MEMORY_LIMIT;\n    this.useColors = options.colors !== false; // default true\n\n    this.colors = new chalk_1.default.constructor({\n      enabled: this.useColors\n    });\n    this.formatter = options.formatter && typeof options.formatter === 'function' ? options.formatter : ForkTsCheckerWebpackPlugin.createFormatter(options.formatter || 'default', options.formatterOptions || {});\n    this.emitCallback = this.createNoopEmitCallback();\n    this.doneCallback = this.createDoneCallback();\n    const {\n      typescript,\n      typescriptPath,\n      typescriptVersion,\n      tsconfig,\n      compilerOptions\n    } = this.validateTypeScript(options);\n    this.typescript = typescript;\n    this.typescriptPath = typescriptPath;\n    this.typescriptVersion = typescriptVersion;\n    this.tsconfig = tsconfig;\n    this.compilerOptions = compilerOptions;\n\n    if (options.eslint === true) {\n      const {\n        eslintVersion,\n        eslintOptions\n      } = this.validateEslint(options);\n      this.eslint = true;\n      this.eslintVersion = eslintVersion;\n      this.eslintOptions = eslintOptions;\n    } else {\n      const {\n        tslint,\n        tslintVersion,\n        tslintAutoFix\n      } = this.validateTslint(options);\n      this.tslint = tslint;\n      this.tslintVersion = tslintVersion;\n      this.tslintAutoFix = tslintAutoFix;\n    }\n\n    this.vue = ForkTsCheckerWebpackPlugin.prepareVueOptions(options.vue);\n    this.useTypescriptIncrementalApi = options.useTypescriptIncrementalApi === undefined ? semver.gte(this.typescriptVersion, '3.0.0') && !this.vue.enabled : options.useTypescriptIncrementalApi;\n    this.measureTime = options.measureCompilationTime === true;\n\n    if (this.measureTime) {\n      // Node 8+ only\n      this.performance = require('perf_hooks').performance;\n    }\n  }\n\n  static getCompilerHooks(compiler) {\n    return hooks_1.getForkTsCheckerWebpackPluginHooks(compiler);\n  }\n\n  validateTypeScript(options) {\n    const typescriptPath = options.typescript || require.resolve('typescript');\n\n    const tsconfig = options.tsconfig || './tsconfig.json';\n    const compilerOptions = typeof options.compilerOptions === 'object' ? options.compilerOptions : {};\n    let typescript, typescriptVersion;\n\n    try {\n      typescript = require(typescriptPath);\n      typescriptVersion = typescript.version;\n    } catch (_ignored) {\n      throw new Error('When you use this plugin you must install `typescript`.');\n    }\n\n    if (semver.lt(typescriptVersion, '2.1.0')) {\n      throw new Error(`Cannot use current typescript version of ${typescriptVersion}, the minimum required version is 2.1.0`);\n    }\n\n    return {\n      typescriptPath,\n      typescript,\n      typescriptVersion,\n      tsconfig,\n      compilerOptions\n    };\n  }\n\n  validateTslint(options) {\n    const tslint = options.tslint ? options.tslint === true ? true : options.tslint : undefined;\n    let tslintAutoFix, tslintVersion;\n\n    try {\n      tslintAutoFix = options.tslintAutoFix || false;\n      tslintVersion = tslint ? // tslint:disable-next-line:no-implicit-dependencies\n      require('tslint').Linter.VERSION : undefined;\n    } catch (_ignored) {\n      throw new Error('When you use `tslint` option, make sure to install `tslint`.');\n    }\n\n    if (tslintVersion && semver.lt(tslintVersion, '4.0.0')) {\n      throw new Error(`Cannot use current tslint version of ${tslintVersion}, the minimum required version is 4.0.0`);\n    }\n\n    return {\n      tslint,\n      tslintAutoFix,\n      tslintVersion\n    };\n  }\n\n  validateEslint(options) {\n    let eslintVersion;\n    const eslintOptions = typeof options.eslintOptions === 'object' ? options.eslintOptions : {};\n\n    try {\n      eslintVersion = require('eslint').Linter.version;\n    } catch (_ignored) {\n      throw new Error('When you use `eslint` option, make sure to install `eslint`.');\n    }\n\n    return {\n      eslintVersion,\n      eslintOptions\n    };\n  }\n\n  static prepareVueOptions(vueOptions) {\n    const defaultVueOptions = {\n      compiler: 'vue-template-compiler',\n      enabled: false\n    };\n\n    if (typeof vueOptions === 'boolean') {\n      return Object.assign(defaultVueOptions, {\n        enabled: vueOptions\n      });\n    } else if (typeof vueOptions === 'object' && vueOptions !== null) {\n      return Object.assign(defaultVueOptions, vueOptions);\n    } else {\n      return defaultVueOptions;\n    }\n  }\n\n  static createFormatter(type, options) {\n    switch (type) {\n      case 'default':\n        return defaultFormatter_1.createDefaultFormatter();\n\n      case 'codeframe':\n        return codeframeFormatter_1.createCodeframeFormatter(options);\n\n      default:\n        throw new Error('Unknown \"' + type + '\" formatter. Available are: default, codeframe.');\n    }\n  }\n\n  apply(compiler) {\n    this.compiler = compiler;\n    this.tsconfigPath = this.computeContextPath(this.tsconfig);\n    this.tslintPath = typeof this.tslint === 'string' ? this.computeContextPath(this.tslint) : undefined;\n    this.watchPaths = this.watch.map(this.computeContextPath.bind(this)); // validate config\n\n    const tsconfigOk = FsHelper_1.fileExistsSync(this.tsconfigPath);\n    const tslintOk = !this.tslintPath || FsHelper_1.fileExistsSync(this.tslintPath);\n\n    if (this.useTypescriptIncrementalApi && this.workersNumber !== 1) {\n      throw new Error('Using typescript incremental compilation API ' + 'is currently only allowed with a single worker.');\n    } // validate logger\n\n\n    if (this.logger) {\n      if (!this.logger.error || !this.logger.warn || !this.logger.info) {\n        throw new Error(\"Invalid logger object - doesn't provide `error`, `warn` or `info` method.\");\n      }\n    }\n\n    if (tsconfigOk && tslintOk) {\n      this.pluginStart();\n      this.pluginStop();\n      this.pluginCompile();\n      this.pluginEmit();\n      this.pluginDone();\n    } else {\n      if (!tsconfigOk) {\n        throw new Error('Cannot find \"' + this.tsconfigPath + '\" file. Please check webpack and ForkTsCheckerWebpackPlugin configuration. \\n' + 'Possible errors: \\n' + '  - wrong `context` directory in webpack configuration' + ' (if `tsconfig` is not set or is a relative path in fork plugin configuration)\\n' + '  - wrong `tsconfig` path in fork plugin configuration' + ' (should be a relative or absolute path)');\n      }\n\n      if (!tslintOk) {\n        throw new Error('Cannot find \"' + this.tslintPath + '\" file. Please check webpack and ForkTsCheckerWebpackPlugin configuration. \\n' + 'Possible errors: \\n' + '  - wrong `context` directory in webpack configuration' + ' (if `tslint` is not set or is a relative path in fork plugin configuration)\\n' + '  - wrong `tslint` path in fork plugin configuration' + ' (should be a relative or absolute path)\\n' + '  - `tslint` path is not set to false in fork plugin configuration' + ' (if you want to disable tslint support)');\n      }\n    }\n  }\n\n  computeContextPath(filePath) {\n    return path.isAbsolute(filePath) ? filePath : path.resolve(this.compiler.options.context, filePath);\n  }\n\n  pluginStart() {\n    const run = (_compiler, callback) => {\n      this.isWatching = false;\n      callback();\n    };\n\n    const watchRun = (_compiler, callback) => {\n      this.isWatching = true;\n      callback();\n    };\n\n    if ('hooks' in this.compiler) {\n      // webpack 4+\n      this.compiler.hooks.run.tapAsync(checkerPluginName, run);\n      this.compiler.hooks.watchRun.tapAsync(checkerPluginName, watchRun);\n    } else {\n      // webpack 2 / 3\n      this.compiler.plugin('run', run);\n      this.compiler.plugin('watch-run', watchRun);\n    }\n  }\n\n  pluginStop() {\n    const watchClose = () => {\n      this.killService();\n    };\n\n    const done = _stats => {\n      if (!this.isWatching) {\n        this.killService();\n      }\n    };\n\n    if ('hooks' in this.compiler) {\n      // webpack 4+\n      this.compiler.hooks.watchClose.tap(checkerPluginName, watchClose);\n      this.compiler.hooks.done.tap(checkerPluginName, done);\n    } else {\n      // webpack 2 / 3\n      this.compiler.plugin('watch-close', watchClose);\n      this.compiler.plugin('done', done);\n    }\n\n    process.on('exit', () => {\n      this.killService();\n    });\n  }\n\n  pluginCompile() {\n    if ('hooks' in this.compiler) {\n      // webpack 4+\n      const forkTsCheckerHooks = ForkTsCheckerWebpackPlugin.getCompilerHooks(this.compiler);\n      this.compiler.hooks.compile.tap(checkerPluginName, () => {\n        this.compilationDone = false;\n        forkTsCheckerHooks.serviceBeforeStart.callAsync(() => {\n          if (this.cancellationToken) {\n            // request cancellation if there is not finished job\n            this.cancellationToken.requestCancellation();\n            forkTsCheckerHooks.cancel.call(this.cancellationToken);\n          }\n\n          this.checkDone = false;\n          this.started = process.hrtime(); // create new token for current job\n\n          this.cancellationToken = new CancellationToken_1.CancellationToken(this.typescript);\n\n          if (!this.service || !this.service.connected) {\n            this.spawnService();\n          }\n\n          try {\n            if (this.measureTime) {\n              this.startAt = this.performance.now();\n            }\n\n            this.serviceRpc.rpc(RpcTypes_1.RUN, this.cancellationToken.toJSON()).then(result => {\n              if (result) {\n                this.handleServiceMessage(result);\n              }\n            });\n          } catch (error) {\n            if (!this.silent && this.logger) {\n              this.logger.error(this.colors.red('Cannot start checker service: ' + (error ? error.toString() : 'Unknown error')));\n            }\n\n            forkTsCheckerHooks.serviceStartError.call(error);\n          }\n        });\n      });\n    } else {\n      // webpack 2 / 3\n      this.compiler.plugin('compile', () => {\n        this.compilationDone = false;\n        this.compiler.applyPluginsAsync(hooks_1.legacyHookMap.serviceBeforeStart, () => {\n          if (this.cancellationToken) {\n            // request cancellation if there is not finished job\n            this.cancellationToken.requestCancellation();\n            this.compiler.applyPlugins(hooks_1.legacyHookMap.cancel, this.cancellationToken);\n          }\n\n          this.checkDone = false;\n          this.started = process.hrtime(); // create new token for current job\n\n          this.cancellationToken = new CancellationToken_1.CancellationToken(this.typescript, undefined, undefined);\n\n          if (!this.service || !this.service.connected) {\n            this.spawnService();\n          }\n\n          try {\n            this.serviceRpc.rpc(RpcTypes_1.RUN, this.cancellationToken.toJSON()).then(result => {\n              if (result) {\n                this.handleServiceMessage(result);\n              }\n            });\n          } catch (error) {\n            if (!this.silent && this.logger) {\n              this.logger.error(this.colors.red('Cannot start checker service: ' + (error ? error.toString() : 'Unknown error')));\n            }\n\n            this.compiler.applyPlugins(hooks_1.legacyHookMap.serviceStartError, error);\n          }\n        });\n      });\n    }\n  }\n\n  pluginEmit() {\n    const emit = (compilation, callback) => {\n      if (this.isWatching && this.async) {\n        callback();\n        return;\n      }\n\n      this.emitCallback = this.createEmitCallback(compilation, callback);\n\n      if (this.checkDone) {\n        this.emitCallback();\n      }\n\n      this.compilationDone = true;\n    };\n\n    if ('hooks' in this.compiler) {\n      // webpack 4+\n      this.compiler.hooks.emit.tapAsync(checkerPluginName, emit);\n    } else {\n      // webpack 2 / 3\n      this.compiler.plugin('emit', emit);\n    }\n  }\n\n  pluginDone() {\n    if ('hooks' in this.compiler) {\n      // webpack 4+\n      const forkTsCheckerHooks = ForkTsCheckerWebpackPlugin.getCompilerHooks(this.compiler);\n      this.compiler.hooks.done.tap(checkerPluginName, _stats => {\n        if (!this.isWatching || !this.async) {\n          return;\n        }\n\n        if (this.checkDone) {\n          this.doneCallback();\n        } else {\n          if (this.compiler) {\n            forkTsCheckerHooks.waiting.call(this.tslint !== undefined);\n          }\n\n          if (!this.silent && this.logger) {\n            this.logger.info(this.tslint ? 'Type checking and linting in progress...' : 'Type checking in progress...');\n          }\n        }\n\n        this.compilationDone = true;\n      });\n    } else {\n      // webpack 2 / 3\n      this.compiler.plugin('done', () => {\n        if (!this.isWatching || !this.async) {\n          return;\n        }\n\n        if (this.checkDone) {\n          this.doneCallback();\n        } else {\n          if (this.compiler) {\n            this.compiler.applyPlugins(hooks_1.legacyHookMap.waiting, this.tslint !== undefined);\n          }\n\n          if (!this.silent && this.logger) {\n            this.logger.info(this.tslint ? 'Type checking and linting in progress...' : 'Type checking in progress...');\n          }\n        }\n\n        this.compilationDone = true;\n      });\n    }\n  }\n\n  spawnService() {\n    const env = Object.assign({}, process.env, {\n      TYPESCRIPT_PATH: this.typescriptPath,\n      TSCONFIG: this.tsconfigPath,\n      COMPILER_OPTIONS: JSON.stringify(this.compilerOptions),\n      TSLINT: this.tslintPath || (this.tslint ? 'true' : ''),\n      CONTEXT: this.compiler.options.context,\n      TSLINTAUTOFIX: String(this.tslintAutoFix),\n      ESLINT: String(this.eslint),\n      ESLINT_OPTIONS: JSON.stringify(this.eslintOptions),\n      WATCH: this.isWatching ? this.watchPaths.join('|') : '',\n      WORK_DIVISION: String(Math.max(1, this.workersNumber)),\n      MEMORY_LIMIT: String(this.memoryLimit),\n      CHECK_SYNTACTIC_ERRORS: String(this.checkSyntacticErrors),\n      USE_INCREMENTAL_API: String(this.useTypescriptIncrementalApi === true),\n      VUE: JSON.stringify(this.vue)\n    });\n\n    if (typeof this.resolveModuleNameModule !== 'undefined') {\n      env.RESOLVE_MODULE_NAME = this.resolveModuleNameModule;\n    } else {\n      delete env.RESOLVE_MODULE_NAME;\n    }\n\n    if (typeof this.resolveTypeReferenceDirectiveModule !== 'undefined') {\n      env.RESOLVE_TYPE_REFERENCE_DIRECTIVE = this.resolveTypeReferenceDirectiveModule;\n    } else {\n      delete env.RESOLVE_TYPE_REFERENCE_DIRECTIVE;\n    }\n\n    this.service = childProcess.fork(path.resolve(__dirname, this.workersNumber > 1 ? './cluster.js' : './service.js'), [], {\n      env,\n      execArgv: (this.workersNumber > 1 ? [] : ['--max-old-space-size=' + this.memoryLimit]).concat(this.nodeArgs),\n      stdio: ['inherit', 'inherit', 'inherit', 'ipc']\n    });\n    this.serviceRpc = new worker_rpc_1.RpcProvider(message => this.service.send(message));\n    this.service.on('message', message => this.serviceRpc.dispatch(message));\n\n    if ('hooks' in this.compiler) {\n      // webpack 4+\n      const forkTsCheckerHooks = ForkTsCheckerWebpackPlugin.getCompilerHooks(this.compiler);\n      forkTsCheckerHooks.serviceStart.call(this.tsconfigPath, this.tslintPath, this.watchPaths, this.workersNumber, this.memoryLimit);\n    } else {\n      // webpack 2 / 3\n      this.compiler.applyPlugins(hooks_1.legacyHookMap.serviceStart, this.tsconfigPath, this.tslintPath, this.watchPaths, this.workersNumber, this.memoryLimit);\n    }\n\n    if (!this.silent && this.logger) {\n      this.logger.info('Starting type checking' + (this.tslint ? ' and linting' : '') + ' service...');\n      this.logger.info('Using ' + this.colors.bold(this.workersNumber === 1 ? '1 worker' : this.workersNumber + ' workers') + ' with ' + this.colors.bold(this.memoryLimit + 'MB') + ' memory limit');\n\n      if (this.watchPaths.length && this.isWatching) {\n        this.logger.info('Watching:' + (this.watchPaths.length > 1 ? '\\n' : ' ') + this.watchPaths.map(wpath => this.colors.grey(wpath)).join('\\n'));\n      }\n    }\n\n    this.service.on('exit', (code, signal) => this.handleServiceExit(code, signal));\n  }\n\n  killService() {\n    if (!this.service) {\n      return;\n    }\n\n    try {\n      if (this.cancellationToken) {\n        this.cancellationToken.cleanupCancellation();\n      }\n\n      this.service.kill();\n      this.service = undefined;\n      this.serviceRpc = undefined;\n    } catch (e) {\n      if (this.logger && !this.silent) {\n        this.logger.error(e);\n      }\n    }\n  }\n\n  handleServiceMessage(message) {\n    if (this.measureTime) {\n      const delta = this.performance.now() - this.startAt;\n      const deltaRounded = Math.round(delta * 100) / 100;\n      this.logger.info(`Compilation took: ${deltaRounded} ms.`);\n    }\n\n    if (this.cancellationToken) {\n      this.cancellationToken.cleanupCancellation(); // job is done - nothing to cancel\n\n      this.cancellationToken = undefined;\n    }\n\n    this.checkDone = true;\n    this.elapsed = process.hrtime(this.started);\n    this.diagnostics = message.diagnostics.map(NormalizedMessage_1.NormalizedMessage.createFromJSON);\n    this.lints = message.lints.map(NormalizedMessage_1.NormalizedMessage.createFromJSON);\n\n    if (this.ignoreDiagnostics.length) {\n      this.diagnostics = this.diagnostics.filter(diagnostic => !this.ignoreDiagnostics.includes(parseInt(diagnostic.code, 10)));\n    }\n\n    if (this.ignoreLints.length) {\n      this.lints = this.lints.filter(lint => !this.ignoreLints.includes(lint.code));\n    }\n\n    if (this.reportFiles.length) {\n      const reportFilesPredicate = diagnostic => {\n        if (diagnostic.file) {\n          const relativeFileName = path.relative(this.compiler.options.context, diagnostic.file);\n          const matchResult = micromatch([relativeFileName], this.reportFiles);\n\n          if (matchResult.length === 0) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      this.diagnostics = this.diagnostics.filter(reportFilesPredicate);\n      this.lints = this.lints.filter(reportFilesPredicate);\n    }\n\n    if ('hooks' in this.compiler) {\n      // webpack 4+\n      const forkTsCheckerHooks = ForkTsCheckerWebpackPlugin.getCompilerHooks(this.compiler);\n      forkTsCheckerHooks.receive.call(this.diagnostics, this.lints);\n    } else {\n      // webpack 2 / 3\n      this.compiler.applyPlugins(hooks_1.legacyHookMap.receive, this.diagnostics, this.lints);\n    }\n\n    if (this.compilationDone) {\n      this.isWatching && this.async ? this.doneCallback() : this.emitCallback();\n    }\n  }\n\n  handleServiceExit(_code, signal) {\n    if (signal !== 'SIGABRT') {\n      return;\n    } // probably out of memory :/\n\n\n    if (this.compiler) {\n      if ('hooks' in this.compiler) {\n        // webpack 4+\n        const forkTsCheckerHooks = ForkTsCheckerWebpackPlugin.getCompilerHooks(this.compiler);\n        forkTsCheckerHooks.serviceOutOfMemory.call();\n      } else {\n        // webpack 2 / 3\n        this.compiler.applyPlugins(hooks_1.legacyHookMap.serviceOutOfMemory);\n      }\n    }\n\n    if (!this.silent && this.logger) {\n      this.logger.error(this.colors.red('Type checking and linting aborted - probably out of memory. ' + 'Check `memoryLimit` option in ForkTsCheckerWebpackPlugin configuration.'));\n    }\n  }\n\n  createEmitCallback(compilation, callback) {\n    return function emitCallback() {\n      if (!this.elapsed) {\n        throw new Error('Execution order error');\n      }\n\n      const elapsed = Math.round(this.elapsed[0] * 1e9 + this.elapsed[1]);\n\n      if ('hooks' in this.compiler) {\n        // webpack 4+\n        const forkTsCheckerHooks = ForkTsCheckerWebpackPlugin.getCompilerHooks(this.compiler);\n        forkTsCheckerHooks.emit.call(this.diagnostics, this.lints, elapsed);\n      } else {\n        // webpack 2 / 3\n        this.compiler.applyPlugins(hooks_1.legacyHookMap.emit, this.diagnostics, this.lints, elapsed);\n      }\n\n      this.diagnostics.concat(this.lints).forEach(message => {\n        // webpack message format\n        const formatted = {\n          rawMessage: message.severity.toUpperCase() + ' ' + message.getFormattedCode() + ': ' + message.content,\n          message: this.formatter(message, this.useColors),\n          location: {\n            line: message.line,\n            character: message.character\n          },\n          file: message.file\n        };\n\n        if (message.isWarningSeverity()) {\n          if (!this.ignoreLintWarnings) {\n            compilation.warnings.push(formatted);\n          }\n        } else {\n          compilation.errors.push(formatted);\n        }\n      });\n      callback();\n    };\n  }\n\n  createNoopEmitCallback() {\n    // tslint:disable-next-line:no-empty\n    return function noopEmitCallback() {};\n  }\n\n  printLoggerMessage(message, formattedMessage) {\n    if (message.isWarningSeverity()) {\n      if (this.ignoreLintWarnings) {\n        return;\n      }\n\n      this.logger.warn(formattedMessage);\n    } else {\n      this.logger.error(formattedMessage);\n    }\n  }\n\n  createDoneCallback() {\n    return function doneCallback() {\n      if (!this.elapsed) {\n        throw new Error('Execution order error');\n      }\n\n      const elapsed = Math.round(this.elapsed[0] * 1e9 + this.elapsed[1]);\n\n      if (this.compiler) {\n        if ('hooks' in this.compiler) {\n          // webpack 4+\n          const forkTsCheckerHooks = ForkTsCheckerWebpackPlugin.getCompilerHooks(this.compiler);\n          forkTsCheckerHooks.done.call(this.diagnostics, this.lints, elapsed);\n        } else {\n          // webpack 2 / 3\n          this.compiler.applyPlugins(hooks_1.legacyHookMap.done, this.diagnostics, this.lints, elapsed);\n        }\n      }\n\n      if (!this.silent && this.logger) {\n        if (this.diagnostics.length || this.lints.length) {\n          (this.lints || []).concat(this.diagnostics).forEach(message => {\n            const formattedMessage = this.formatter(message, this.useColors);\n            this.printLoggerMessage(message, formattedMessage);\n          });\n        }\n\n        if (!this.diagnostics.length) {\n          this.logger.info(this.colors.green('No type errors found'));\n        }\n\n        if (this.tslint && !this.lints.length) {\n          this.logger.info(this.colors.green('No lint errors found'));\n        }\n\n        this.logger.info('Version: typescript ' + this.colors.bold(this.typescriptVersion) + (this.eslint ? ', eslint ' + this.colors.bold(this.eslintVersion) : this.tslint ? ', tslint ' + this.colors.bold(this.tslintVersion) : ''));\n        this.logger.info('Time: ' + this.colors.bold(Math.round(elapsed / 1e6).toString()) + 'ms');\n      }\n    };\n  }\n\n}\n\nForkTsCheckerWebpackPlugin.DEFAULT_MEMORY_LIMIT = 2048;\nForkTsCheckerWebpackPlugin.ONE_CPU = 1;\nForkTsCheckerWebpackPlugin.ALL_CPUS = os.cpus && os.cpus() ? os.cpus().length : 1;\nForkTsCheckerWebpackPlugin.ONE_CPU_FREE = Math.max(1, ForkTsCheckerWebpackPlugin.ALL_CPUS - 1);\nForkTsCheckerWebpackPlugin.TWO_CPUS_FREE = Math.max(1, ForkTsCheckerWebpackPlugin.ALL_CPUS - 2);\nmodule.exports = ForkTsCheckerWebpackPlugin;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nconst path = require(\"path\");\nconst process = require(\"process\");\nconst childProcess = require(\"child_process\");\nconst worker_rpc_1 = require(\"worker-rpc\");\nconst semver = require(\"semver\");\nconst chalk_1 = require(\"chalk\");\nconst micromatch = require(\"micromatch\");\nconst os = require(\"os\");\nconst CancellationToken_1 = require(\"./CancellationToken\");\nconst NormalizedMessage_1 = require(\"./NormalizedMessage\");\nconst defaultFormatter_1 = require(\"./formatter/defaultFormatter\");\nconst codeframeFormatter_1 = require(\"./formatter/codeframeFormatter\");\nconst FsHelper_1 = require(\"./FsHelper\");\nconst hooks_1 = require(\"./hooks\");\nconst RpcTypes_1 = require(\"./RpcTypes\");\nconst checkerPluginName = 'fork-ts-checker-webpack-plugin';\n/**\n * ForkTsCheckerWebpackPlugin\n * Runs typescript type checker and linter (tslint) on separate process.\n * This speed-ups build a lot.\n *\n * Options description in README.md\n */\nclass ForkTsCheckerWebpackPlugin {\n    constructor(options) {\n        this.tslint = false;\n        this.eslint = false;\n        this.eslintOptions = {};\n        this.tslintAutoFix = false;\n        this.tsconfigPath = undefined;\n        this.tslintPath = undefined;\n        this.watchPaths = [];\n        this.compiler = undefined;\n        this.started = undefined;\n        this.elapsed = undefined;\n        this.cancellationToken = undefined;\n        this.isWatching = false;\n        this.checkDone = false;\n        this.compilationDone = false;\n        this.diagnostics = [];\n        this.lints = [];\n        this.eslintVersion = undefined;\n        this.startAt = 0;\n        this.nodeArgs = [];\n        options = options || {};\n        this.options = Object.assign({}, options);\n        this.watch =\n            typeof options.watch === 'string' ? [options.watch] : options.watch || [];\n        this.ignoreDiagnostics = options.ignoreDiagnostics || [];\n        this.ignoreLints = options.ignoreLints || [];\n        this.ignoreLintWarnings = options.ignoreLintWarnings === true;\n        this.reportFiles = options.reportFiles || [];\n        this.logger = options.logger || console;\n        this.silent = options.silent === true; // default false\n        this.async = options.async !== false; // default true\n        this.checkSyntacticErrors = options.checkSyntacticErrors === true; // default false\n        this.resolveModuleNameModule = options.resolveModuleNameModule;\n        this.resolveTypeReferenceDirectiveModule =\n            options.resolveTypeReferenceDirectiveModule;\n        this.workersNumber = options.workers || ForkTsCheckerWebpackPlugin.ONE_CPU;\n        this.memoryLimit =\n            options.memoryLimit || ForkTsCheckerWebpackPlugin.DEFAULT_MEMORY_LIMIT;\n        this.useColors = options.colors !== false; // default true\n        this.colors = new chalk_1.default.constructor({ enabled: this.useColors });\n        this.formatter =\n            options.formatter && typeof options.formatter === 'function'\n                ? options.formatter\n                : ForkTsCheckerWebpackPlugin.createFormatter(options.formatter || 'default', options.formatterOptions || {});\n        this.emitCallback = this.createNoopEmitCallback();\n        this.doneCallback = this.createDoneCallback();\n        const { typescript, typescriptPath, typescriptVersion, tsconfig, compilerOptions } = this.validateTypeScript(options);\n        this.typescript = typescript;\n        this.typescriptPath = typescriptPath;\n        this.typescriptVersion = typescriptVersion;\n        this.tsconfig = tsconfig;\n        this.compilerOptions = compilerOptions;\n        if (options.eslint === true) {\n            const { eslintVersion, eslintOptions } = this.validateEslint(options);\n            this.eslint = true;\n            this.eslintVersion = eslintVersion;\n            this.eslintOptions = eslintOptions;\n        }\n        else {\n            const { tslint, tslintVersion, tslintAutoFix } = this.validateTslint(options);\n            this.tslint = tslint;\n            this.tslintVersion = tslintVersion;\n            this.tslintAutoFix = tslintAutoFix;\n        }\n        this.vue = ForkTsCheckerWebpackPlugin.prepareVueOptions(options.vue);\n        this.useTypescriptIncrementalApi =\n            options.useTypescriptIncrementalApi === undefined\n                ? semver.gte(this.typescriptVersion, '3.0.0') && !this.vue.enabled\n                : options.useTypescriptIncrementalApi;\n        this.measureTime = options.measureCompilationTime === true;\n        if (this.measureTime) {\n            // Node 8+ only\n            this.performance = require('perf_hooks').performance;\n        }\n    }\n    static getCompilerHooks(compiler) {\n        return hooks_1.getForkTsCheckerWebpackPluginHooks(compiler);\n    }\n    validateTypeScript(options) {\n        const typescriptPath = options.typescript || require.resolve('typescript');\n        const tsconfig = options.tsconfig || './tsconfig.json';\n        const compilerOptions = typeof options.compilerOptions === 'object'\n            ? options.compilerOptions\n            : {};\n        let typescript, typescriptVersion;\n        try {\n            typescript = require(typescriptPath);\n            typescriptVersion = typescript.version;\n        }\n        catch (_ignored) {\n            throw new Error('When you use this plugin you must install `typescript`.');\n        }\n        if (semver.lt(typescriptVersion, '2.1.0')) {\n            throw new Error(`Cannot use current typescript version of ${typescriptVersion}, the minimum required version is 2.1.0`);\n        }\n        return {\n            typescriptPath,\n            typescript,\n            typescriptVersion,\n            tsconfig,\n            compilerOptions\n        };\n    }\n    validateTslint(options) {\n        const tslint = options.tslint\n            ? options.tslint === true\n                ? true\n                : options.tslint\n            : undefined;\n        let tslintAutoFix, tslintVersion;\n        try {\n            tslintAutoFix = options.tslintAutoFix || false;\n            tslintVersion = tslint\n                ? // tslint:disable-next-line:no-implicit-dependencies\n                    require('tslint').Linter.VERSION\n                : undefined;\n        }\n        catch (_ignored) {\n            throw new Error('When you use `tslint` option, make sure to install `tslint`.');\n        }\n        if (tslintVersion && semver.lt(tslintVersion, '4.0.0')) {\n            throw new Error(`Cannot use current tslint version of ${tslintVersion}, the minimum required version is 4.0.0`);\n        }\n        return { tslint, tslintAutoFix, tslintVersion };\n    }\n    validateEslint(options) {\n        let eslintVersion;\n        const eslintOptions = typeof options.eslintOptions === 'object' ? options.eslintOptions : {};\n        try {\n            eslintVersion = require('eslint').Linter.version;\n        }\n        catch (_ignored) {\n            throw new Error('When you use `eslint` option, make sure to install `eslint`.');\n        }\n        return { eslintVersion, eslintOptions };\n    }\n    static prepareVueOptions(vueOptions) {\n        const defaultVueOptions = {\n            compiler: 'vue-template-compiler',\n            enabled: false\n        };\n        if (typeof vueOptions === 'boolean') {\n            return Object.assign(defaultVueOptions, { enabled: vueOptions });\n        }\n        else if (typeof vueOptions === 'object' && vueOptions !== null) {\n            return Object.assign(defaultVueOptions, vueOptions);\n        }\n        else {\n            return defaultVueOptions;\n        }\n    }\n    static createFormatter(type, options) {\n        switch (type) {\n            case 'default':\n                return defaultFormatter_1.createDefaultFormatter();\n            case 'codeframe':\n                return codeframeFormatter_1.createCodeframeFormatter(options);\n            default:\n                throw new Error('Unknown \"' + type + '\" formatter. Available are: default, codeframe.');\n        }\n    }\n    apply(compiler) {\n        this.compiler = compiler;\n        this.tsconfigPath = this.computeContextPath(this.tsconfig);\n        this.tslintPath =\n            typeof this.tslint === 'string'\n                ? this.computeContextPath(this.tslint)\n                : undefined;\n        this.watchPaths = this.watch.map(this.computeContextPath.bind(this));\n        // validate config\n        const tsconfigOk = FsHelper_1.fileExistsSync(this.tsconfigPath);\n        const tslintOk = !this.tslintPath || FsHelper_1.fileExistsSync(this.tslintPath);\n        if (this.useTypescriptIncrementalApi && this.workersNumber !== 1) {\n            throw new Error('Using typescript incremental compilation API ' +\n                'is currently only allowed with a single worker.');\n        }\n        // validate logger\n        if (this.logger) {\n            if (!this.logger.error || !this.logger.warn || !this.logger.info) {\n                throw new Error(\"Invalid logger object - doesn't provide `error`, `warn` or `info` method.\");\n            }\n        }\n        if (tsconfigOk && tslintOk) {\n            this.pluginStart();\n            this.pluginStop();\n            this.pluginCompile();\n            this.pluginEmit();\n            this.pluginDone();\n        }\n        else {\n            if (!tsconfigOk) {\n                throw new Error('Cannot find \"' +\n                    this.tsconfigPath +\n                    '\" file. Please check webpack and ForkTsCheckerWebpackPlugin configuration. \\n' +\n                    'Possible errors: \\n' +\n                    '  - wrong `context` directory in webpack configuration' +\n                    ' (if `tsconfig` is not set or is a relative path in fork plugin configuration)\\n' +\n                    '  - wrong `tsconfig` path in fork plugin configuration' +\n                    ' (should be a relative or absolute path)');\n            }\n            if (!tslintOk) {\n                throw new Error('Cannot find \"' +\n                    this.tslintPath +\n                    '\" file. Please check webpack and ForkTsCheckerWebpackPlugin configuration. \\n' +\n                    'Possible errors: \\n' +\n                    '  - wrong `context` directory in webpack configuration' +\n                    ' (if `tslint` is not set or is a relative path in fork plugin configuration)\\n' +\n                    '  - wrong `tslint` path in fork plugin configuration' +\n                    ' (should be a relative or absolute path)\\n' +\n                    '  - `tslint` path is not set to false in fork plugin configuration' +\n                    ' (if you want to disable tslint support)');\n            }\n        }\n    }\n    computeContextPath(filePath) {\n        return path.isAbsolute(filePath)\n            ? filePath\n            : path.resolve(this.compiler.options.context, filePath);\n    }\n    pluginStart() {\n        const run = (_compiler, callback) => {\n            this.isWatching = false;\n            callback();\n        };\n        const watchRun = (_compiler, callback) => {\n            this.isWatching = true;\n            callback();\n        };\n        if ('hooks' in this.compiler) {\n            // webpack 4+\n            this.compiler.hooks.run.tapAsync(checkerPluginName, run);\n            this.compiler.hooks.watchRun.tapAsync(checkerPluginName, watchRun);\n        }\n        else {\n            // webpack 2 / 3\n            this.compiler.plugin('run', run);\n            this.compiler.plugin('watch-run', watchRun);\n        }\n    }\n    pluginStop() {\n        const watchClose = () => {\n            this.killService();\n        };\n        const done = (_stats) => {\n            if (!this.isWatching) {\n                this.killService();\n            }\n        };\n        if ('hooks' in this.compiler) {\n            // webpack 4+\n            this.compiler.hooks.watchClose.tap(checkerPluginName, watchClose);\n            this.compiler.hooks.done.tap(checkerPluginName, done);\n        }\n        else {\n            // webpack 2 / 3\n            this.compiler.plugin('watch-close', watchClose);\n            this.compiler.plugin('done', done);\n        }\n        process.on('exit', () => {\n            this.killService();\n        });\n    }\n    pluginCompile() {\n        if ('hooks' in this.compiler) {\n            // webpack 4+\n            const forkTsCheckerHooks = ForkTsCheckerWebpackPlugin.getCompilerHooks(this.compiler);\n            this.compiler.hooks.compile.tap(checkerPluginName, () => {\n                this.compilationDone = false;\n                forkTsCheckerHooks.serviceBeforeStart.callAsync(() => {\n                    if (this.cancellationToken) {\n                        // request cancellation if there is not finished job\n                        this.cancellationToken.requestCancellation();\n                        forkTsCheckerHooks.cancel.call(this.cancellationToken);\n                    }\n                    this.checkDone = false;\n                    this.started = process.hrtime();\n                    // create new token for current job\n                    this.cancellationToken = new CancellationToken_1.CancellationToken(this.typescript);\n                    if (!this.service || !this.service.connected) {\n                        this.spawnService();\n                    }\n                    try {\n                        if (this.measureTime) {\n                            this.startAt = this.performance.now();\n                        }\n                        this.serviceRpc.rpc(RpcTypes_1.RUN, this.cancellationToken.toJSON()).then(result => {\n                            if (result) {\n                                this.handleServiceMessage(result);\n                            }\n                        });\n                    }\n                    catch (error) {\n                        if (!this.silent && this.logger) {\n                            this.logger.error(this.colors.red('Cannot start checker service: ' +\n                                (error ? error.toString() : 'Unknown error')));\n                        }\n                        forkTsCheckerHooks.serviceStartError.call(error);\n                    }\n                });\n            });\n        }\n        else {\n            // webpack 2 / 3\n            this.compiler.plugin('compile', () => {\n                this.compilationDone = false;\n                this.compiler.applyPluginsAsync(hooks_1.legacyHookMap.serviceBeforeStart, () => {\n                    if (this.cancellationToken) {\n                        // request cancellation if there is not finished job\n                        this.cancellationToken.requestCancellation();\n                        this.compiler.applyPlugins(hooks_1.legacyHookMap.cancel, this.cancellationToken);\n                    }\n                    this.checkDone = false;\n                    this.started = process.hrtime();\n                    // create new token for current job\n                    this.cancellationToken = new CancellationToken_1.CancellationToken(this.typescript, undefined, undefined);\n                    if (!this.service || !this.service.connected) {\n                        this.spawnService();\n                    }\n                    try {\n                        this.serviceRpc.rpc(RpcTypes_1.RUN, this.cancellationToken.toJSON()).then(result => {\n                            if (result) {\n                                this.handleServiceMessage(result);\n                            }\n                        });\n                    }\n                    catch (error) {\n                        if (!this.silent && this.logger) {\n                            this.logger.error(this.colors.red('Cannot start checker service: ' +\n                                (error ? error.toString() : 'Unknown error')));\n                        }\n                        this.compiler.applyPlugins(hooks_1.legacyHookMap.serviceStartError, error);\n                    }\n                });\n            });\n        }\n    }\n    pluginEmit() {\n        const emit = (compilation, callback) => {\n            if (this.isWatching && this.async) {\n                callback();\n                return;\n            }\n            this.emitCallback = this.createEmitCallback(compilation, callback);\n            if (this.checkDone) {\n                this.emitCallback();\n            }\n            this.compilationDone = true;\n        };\n        if ('hooks' in this.compiler) {\n            // webpack 4+\n            this.compiler.hooks.emit.tapAsync(checkerPluginName, emit);\n        }\n        else {\n            // webpack 2 / 3\n            this.compiler.plugin('emit', emit);\n        }\n    }\n    pluginDone() {\n        if ('hooks' in this.compiler) {\n            // webpack 4+\n            const forkTsCheckerHooks = ForkTsCheckerWebpackPlugin.getCompilerHooks(this.compiler);\n            this.compiler.hooks.done.tap(checkerPluginName, (_stats) => {\n                if (!this.isWatching || !this.async) {\n                    return;\n                }\n                if (this.checkDone) {\n                    this.doneCallback();\n                }\n                else {\n                    if (this.compiler) {\n                        forkTsCheckerHooks.waiting.call(this.tslint !== undefined);\n                    }\n                    if (!this.silent && this.logger) {\n                        this.logger.info(this.tslint\n                            ? 'Type checking and linting in progress...'\n                            : 'Type checking in progress...');\n                    }\n                }\n                this.compilationDone = true;\n            });\n        }\n        else {\n            // webpack 2 / 3\n            this.compiler.plugin('done', () => {\n                if (!this.isWatching || !this.async) {\n                    return;\n                }\n                if (this.checkDone) {\n                    this.doneCallback();\n                }\n                else {\n                    if (this.compiler) {\n                        this.compiler.applyPlugins(hooks_1.legacyHookMap.waiting, this.tslint !== undefined);\n                    }\n                    if (!this.silent && this.logger) {\n                        this.logger.info(this.tslint\n                            ? 'Type checking and linting in progress...'\n                            : 'Type checking in progress...');\n                    }\n                }\n                this.compilationDone = true;\n            });\n        }\n    }\n    spawnService() {\n        const env = Object.assign({}, process.env, { TYPESCRIPT_PATH: this.typescriptPath, TSCONFIG: this.tsconfigPath, COMPILER_OPTIONS: JSON.stringify(this.compilerOptions), TSLINT: this.tslintPath || (this.tslint ? 'true' : ''), CONTEXT: this.compiler.options.context, TSLINTAUTOFIX: String(this.tslintAutoFix), ESLINT: String(this.eslint), ESLINT_OPTIONS: JSON.stringify(this.eslintOptions), WATCH: this.isWatching ? this.watchPaths.join('|') : '', WORK_DIVISION: String(Math.max(1, this.workersNumber)), MEMORY_LIMIT: String(this.memoryLimit), CHECK_SYNTACTIC_ERRORS: String(this.checkSyntacticErrors), USE_INCREMENTAL_API: String(this.useTypescriptIncrementalApi === true), VUE: JSON.stringify(this.vue) });\n        if (typeof this.resolveModuleNameModule !== 'undefined') {\n            env.RESOLVE_MODULE_NAME = this.resolveModuleNameModule;\n        }\n        else {\n            delete env.RESOLVE_MODULE_NAME;\n        }\n        if (typeof this.resolveTypeReferenceDirectiveModule !== 'undefined') {\n            env.RESOLVE_TYPE_REFERENCE_DIRECTIVE = this.resolveTypeReferenceDirectiveModule;\n        }\n        else {\n            delete env.RESOLVE_TYPE_REFERENCE_DIRECTIVE;\n        }\n        this.service = childProcess.fork(path.resolve(__dirname, this.workersNumber > 1 ? './cluster.js' : './service.js'), [], {\n            env,\n            execArgv: (this.workersNumber > 1\n                ? []\n                : ['--max-old-space-size=' + this.memoryLimit]).concat(this.nodeArgs),\n            stdio: ['inherit', 'inherit', 'inherit', 'ipc']\n        });\n        this.serviceRpc = new worker_rpc_1.RpcProvider(message => this.service.send(message));\n        this.service.on('message', message => this.serviceRpc.dispatch(message));\n        if ('hooks' in this.compiler) {\n            // webpack 4+\n            const forkTsCheckerHooks = ForkTsCheckerWebpackPlugin.getCompilerHooks(this.compiler);\n            forkTsCheckerHooks.serviceStart.call(this.tsconfigPath, this.tslintPath, this.watchPaths, this.workersNumber, this.memoryLimit);\n        }\n        else {\n            // webpack 2 / 3\n            this.compiler.applyPlugins(hooks_1.legacyHookMap.serviceStart, this.tsconfigPath, this.tslintPath, this.watchPaths, this.workersNumber, this.memoryLimit);\n        }\n        if (!this.silent && this.logger) {\n            this.logger.info('Starting type checking' +\n                (this.tslint ? ' and linting' : '') +\n                ' service...');\n            this.logger.info('Using ' +\n                this.colors.bold(this.workersNumber === 1\n                    ? '1 worker'\n                    : this.workersNumber + ' workers') +\n                ' with ' +\n                this.colors.bold(this.memoryLimit + 'MB') +\n                ' memory limit');\n            if (this.watchPaths.length && this.isWatching) {\n                this.logger.info('Watching:' +\n                    (this.watchPaths.length > 1 ? '\\n' : ' ') +\n                    this.watchPaths.map(wpath => this.colors.grey(wpath)).join('\\n'));\n            }\n        }\n        this.service.on('exit', (code, signal) => this.handleServiceExit(code, signal));\n    }\n    killService() {\n        if (!this.service) {\n            return;\n        }\n        try {\n            if (this.cancellationToken) {\n                this.cancellationToken.cleanupCancellation();\n            }\n            this.service.kill();\n            this.service = undefined;\n            this.serviceRpc = undefined;\n        }\n        catch (e) {\n            if (this.logger && !this.silent) {\n                this.logger.error(e);\n            }\n        }\n    }\n    handleServiceMessage(message) {\n        if (this.measureTime) {\n            const delta = this.performance.now() - this.startAt;\n            const deltaRounded = Math.round(delta * 100) / 100;\n            this.logger.info(`Compilation took: ${deltaRounded} ms.`);\n        }\n        if (this.cancellationToken) {\n            this.cancellationToken.cleanupCancellation();\n            // job is done - nothing to cancel\n            this.cancellationToken = undefined;\n        }\n        this.checkDone = true;\n        this.elapsed = process.hrtime(this.started);\n        this.diagnostics = message.diagnostics.map(NormalizedMessage_1.NormalizedMessage.createFromJSON);\n        this.lints = message.lints.map(NormalizedMessage_1.NormalizedMessage.createFromJSON);\n        if (this.ignoreDiagnostics.length) {\n            this.diagnostics = this.diagnostics.filter(diagnostic => !this.ignoreDiagnostics.includes(parseInt(diagnostic.code, 10)));\n        }\n        if (this.ignoreLints.length) {\n            this.lints = this.lints.filter(lint => !this.ignoreLints.includes(lint.code));\n        }\n        if (this.reportFiles.length) {\n            const reportFilesPredicate = (diagnostic) => {\n                if (diagnostic.file) {\n                    const relativeFileName = path.relative(this.compiler.options.context, diagnostic.file);\n                    const matchResult = micromatch([relativeFileName], this.reportFiles);\n                    if (matchResult.length === 0) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            this.diagnostics = this.diagnostics.filter(reportFilesPredicate);\n            this.lints = this.lints.filter(reportFilesPredicate);\n        }\n        if ('hooks' in this.compiler) {\n            // webpack 4+\n            const forkTsCheckerHooks = ForkTsCheckerWebpackPlugin.getCompilerHooks(this.compiler);\n            forkTsCheckerHooks.receive.call(this.diagnostics, this.lints);\n        }\n        else {\n            // webpack 2 / 3\n            this.compiler.applyPlugins(hooks_1.legacyHookMap.receive, this.diagnostics, this.lints);\n        }\n        if (this.compilationDone) {\n            this.isWatching && this.async ? this.doneCallback() : this.emitCallback();\n        }\n    }\n    handleServiceExit(_code, signal) {\n        if (signal !== 'SIGABRT') {\n            return;\n        }\n        // probably out of memory :/\n        if (this.compiler) {\n            if ('hooks' in this.compiler) {\n                // webpack 4+\n                const forkTsCheckerHooks = ForkTsCheckerWebpackPlugin.getCompilerHooks(this.compiler);\n                forkTsCheckerHooks.serviceOutOfMemory.call();\n            }\n            else {\n                // webpack 2 / 3\n                this.compiler.applyPlugins(hooks_1.legacyHookMap.serviceOutOfMemory);\n            }\n        }\n        if (!this.silent && this.logger) {\n            this.logger.error(this.colors.red('Type checking and linting aborted - probably out of memory. ' +\n                'Check `memoryLimit` option in ForkTsCheckerWebpackPlugin configuration.'));\n        }\n    }\n    createEmitCallback(compilation, callback) {\n        return function emitCallback() {\n            if (!this.elapsed) {\n                throw new Error('Execution order error');\n            }\n            const elapsed = Math.round(this.elapsed[0] * 1e9 + this.elapsed[1]);\n            if ('hooks' in this.compiler) {\n                // webpack 4+\n                const forkTsCheckerHooks = ForkTsCheckerWebpackPlugin.getCompilerHooks(this.compiler);\n                forkTsCheckerHooks.emit.call(this.diagnostics, this.lints, elapsed);\n            }\n            else {\n                // webpack 2 / 3\n                this.compiler.applyPlugins(hooks_1.legacyHookMap.emit, this.diagnostics, this.lints, elapsed);\n            }\n            this.diagnostics.concat(this.lints).forEach(message => {\n                // webpack message format\n                const formatted = {\n                    rawMessage: message.severity.toUpperCase() +\n                        ' ' +\n                        message.getFormattedCode() +\n                        ': ' +\n                        message.content,\n                    message: this.formatter(message, this.useColors),\n                    location: {\n                        line: message.line,\n                        character: message.character\n                    },\n                    file: message.file\n                };\n                if (message.isWarningSeverity()) {\n                    if (!this.ignoreLintWarnings) {\n                        compilation.warnings.push(formatted);\n                    }\n                }\n                else {\n                    compilation.errors.push(formatted);\n                }\n            });\n            callback();\n        };\n    }\n    createNoopEmitCallback() {\n        // tslint:disable-next-line:no-empty\n        return function noopEmitCallback() { };\n    }\n    printLoggerMessage(message, formattedMessage) {\n        if (message.isWarningSeverity()) {\n            if (this.ignoreLintWarnings) {\n                return;\n            }\n            this.logger.warn(formattedMessage);\n        }\n        else {\n            this.logger.error(formattedMessage);\n        }\n    }\n    createDoneCallback() {\n        return function doneCallback() {\n            if (!this.elapsed) {\n                throw new Error('Execution order error');\n            }\n            const elapsed = Math.round(this.elapsed[0] * 1e9 + this.elapsed[1]);\n            if (this.compiler) {\n                if ('hooks' in this.compiler) {\n                    // webpack 4+\n                    const forkTsCheckerHooks = ForkTsCheckerWebpackPlugin.getCompilerHooks(this.compiler);\n                    forkTsCheckerHooks.done.call(this.diagnostics, this.lints, elapsed);\n                }\n                else {\n                    // webpack 2 / 3\n                    this.compiler.applyPlugins(hooks_1.legacyHookMap.done, this.diagnostics, this.lints, elapsed);\n                }\n            }\n            if (!this.silent && this.logger) {\n                if (this.diagnostics.length || this.lints.length) {\n                    (this.lints || []).concat(this.diagnostics).forEach(message => {\n                        const formattedMessage = this.formatter(message, this.useColors);\n                        this.printLoggerMessage(message, formattedMessage);\n                    });\n                }\n                if (!this.diagnostics.length) {\n                    this.logger.info(this.colors.green('No type errors found'));\n                }\n                if (this.tslint && !this.lints.length) {\n                    this.logger.info(this.colors.green('No lint errors found'));\n                }\n                this.logger.info('Version: typescript ' +\n                    this.colors.bold(this.typescriptVersion) +\n                    (this.eslint\n                        ? ', eslint ' + this.colors.bold(this.eslintVersion)\n                        : this.tslint\n                            ? ', tslint ' + this.colors.bold(this.tslintVersion)\n                            : ''));\n                this.logger.info('Time: ' +\n                    this.colors.bold(Math.round(elapsed / 1e6).toString()) +\n                    'ms');\n            }\n        };\n    }\n}\nForkTsCheckerWebpackPlugin.DEFAULT_MEMORY_LIMIT = 2048;\nForkTsCheckerWebpackPlugin.ONE_CPU = 1;\nForkTsCheckerWebpackPlugin.ALL_CPUS = os.cpus && os.cpus() ? os.cpus().length : 1;\nForkTsCheckerWebpackPlugin.ONE_CPU_FREE = Math.max(1, ForkTsCheckerWebpackPlugin.ALL_CPUS - 1);\nForkTsCheckerWebpackPlugin.TWO_CPUS_FREE = Math.max(1, ForkTsCheckerWebpackPlugin.ALL_CPUS - 2);\nmodule.exports = ForkTsCheckerWebpackPlugin;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}