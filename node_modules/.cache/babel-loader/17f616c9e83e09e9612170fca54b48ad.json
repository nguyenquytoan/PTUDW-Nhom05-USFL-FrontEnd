{"ast":null,"code":"/**\n * @fileoverview Rule to enforce spacing before and after keywords.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"),\n      keywords = require(\"./utils/keywords\"); //------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\n\nconst PREV_TOKEN = /^[)\\]}>]$/u;\nconst NEXT_TOKEN = /^(?:[([{<~!]|\\+\\+?|--?)$/u;\nconst PREV_TOKEN_M = /^[)\\]}>*]$/u;\nconst NEXT_TOKEN_M = /^[{*]$/u;\nconst TEMPLATE_OPEN_PAREN = /\\$\\{$/u;\nconst TEMPLATE_CLOSE_PAREN = /^\\}/u;\nconst CHECK_TYPE = /^(?:JSXElement|RegularExpression|String|Template)$/u;\nconst KEYS = keywords.concat([\"as\", \"async\", \"await\", \"from\", \"get\", \"let\", \"of\", \"set\", \"yield\"]); // check duplications.\n\n(function () {\n  KEYS.sort();\n\n  for (let i = 1; i < KEYS.length; ++i) {\n    if (KEYS[i] === KEYS[i - 1]) {\n      throw new Error(`Duplication was found in the keyword list: ${KEYS[i]}`);\n    }\n  }\n})(); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given token is a \"Template\" token ends with \"${\".\n * @param {Token} token A token to check.\n * @returns {boolean} `true` if the token is a \"Template\" token ends with \"${\".\n */\n\n\nfunction isOpenParenOfTemplate(token) {\n  return token.type === \"Template\" && TEMPLATE_OPEN_PAREN.test(token.value);\n}\n/**\n * Checks whether or not a given token is a \"Template\" token starts with \"}\".\n * @param {Token} token A token to check.\n * @returns {boolean} `true` if the token is a \"Template\" token starts with \"}\".\n */\n\n\nfunction isCloseParenOfTemplate(token) {\n  return token.type === \"Template\" && TEMPLATE_CLOSE_PAREN.test(token.value);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent spacing before and after keywords\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/keyword-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        before: {\n          type: \"boolean\",\n          default: true\n        },\n        after: {\n          type: \"boolean\",\n          default: true\n        },\n        overrides: {\n          type: \"object\",\n          properties: KEYS.reduce((retv, key) => {\n            retv[key] = {\n              type: \"object\",\n              properties: {\n                before: {\n                  type: \"boolean\"\n                },\n                after: {\n                  type: \"boolean\"\n                }\n              },\n              additionalProperties: false\n            };\n            return retv;\n          }, {}),\n          additionalProperties: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      expectedBefore: \"Expected space(s) before \\\"{{value}}\\\".\",\n      expectedAfter: \"Expected space(s) after \\\"{{value}}\\\".\",\n      unexpectedBefore: \"Unexpected space(s) before \\\"{{value}}\\\".\",\n      unexpectedAfter: \"Unexpected space(s) after \\\"{{value}}\\\".\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    /**\n     * Reports a given token if there are not space(s) before the token.\n     * @param {Token} token A token to report.\n     * @param {RegExp} pattern A pattern of the previous token to check.\n     * @returns {void}\n     */\n\n    function expectSpaceBefore(token, pattern) {\n      const prevToken = sourceCode.getTokenBefore(token);\n\n      if (prevToken && (CHECK_TYPE.test(prevToken.type) || pattern.test(prevToken.value)) && !isOpenParenOfTemplate(prevToken) && astUtils.isTokenOnSameLine(prevToken, token) && !sourceCode.isSpaceBetweenTokens(prevToken, token)) {\n        context.report({\n          loc: token.loc.start,\n          messageId: \"expectedBefore\",\n          data: token,\n\n          fix(fixer) {\n            return fixer.insertTextBefore(token, \" \");\n          }\n\n        });\n      }\n    }\n    /**\n     * Reports a given token if there are space(s) before the token.\n     * @param {Token} token A token to report.\n     * @param {RegExp} pattern A pattern of the previous token to check.\n     * @returns {void}\n     */\n\n\n    function unexpectSpaceBefore(token, pattern) {\n      const prevToken = sourceCode.getTokenBefore(token);\n\n      if (prevToken && (CHECK_TYPE.test(prevToken.type) || pattern.test(prevToken.value)) && !isOpenParenOfTemplate(prevToken) && astUtils.isTokenOnSameLine(prevToken, token) && sourceCode.isSpaceBetweenTokens(prevToken, token)) {\n        context.report({\n          loc: token.loc.start,\n          messageId: \"unexpectedBefore\",\n          data: token,\n\n          fix(fixer) {\n            return fixer.removeRange([prevToken.range[1], token.range[0]]);\n          }\n\n        });\n      }\n    }\n    /**\n     * Reports a given token if there are not space(s) after the token.\n     * @param {Token} token A token to report.\n     * @param {RegExp} pattern A pattern of the next token to check.\n     * @returns {void}\n     */\n\n\n    function expectSpaceAfter(token, pattern) {\n      const nextToken = sourceCode.getTokenAfter(token);\n\n      if (nextToken && (CHECK_TYPE.test(nextToken.type) || pattern.test(nextToken.value)) && !isCloseParenOfTemplate(nextToken) && astUtils.isTokenOnSameLine(token, nextToken) && !sourceCode.isSpaceBetweenTokens(token, nextToken)) {\n        context.report({\n          loc: token.loc.start,\n          messageId: \"expectedAfter\",\n          data: token,\n\n          fix(fixer) {\n            return fixer.insertTextAfter(token, \" \");\n          }\n\n        });\n      }\n    }\n    /**\n     * Reports a given token if there are space(s) after the token.\n     * @param {Token} token A token to report.\n     * @param {RegExp} pattern A pattern of the next token to check.\n     * @returns {void}\n     */\n\n\n    function unexpectSpaceAfter(token, pattern) {\n      const nextToken = sourceCode.getTokenAfter(token);\n\n      if (nextToken && (CHECK_TYPE.test(nextToken.type) || pattern.test(nextToken.value)) && !isCloseParenOfTemplate(nextToken) && astUtils.isTokenOnSameLine(token, nextToken) && sourceCode.isSpaceBetweenTokens(token, nextToken)) {\n        context.report({\n          loc: token.loc.start,\n          messageId: \"unexpectedAfter\",\n          data: token,\n\n          fix(fixer) {\n            return fixer.removeRange([token.range[1], nextToken.range[0]]);\n          }\n\n        });\n      }\n    }\n    /**\n     * Parses the option object and determines check methods for each keyword.\n     * @param {Object|undefined} options The option object to parse.\n     * @returns {Object} - Normalized option object.\n     *      Keys are keywords (there are for every keyword).\n     *      Values are instances of `{\"before\": function, \"after\": function}`.\n     */\n\n\n    function parseOptions(options = {}) {\n      const before = options.before !== false;\n      const after = options.after !== false;\n      const defaultValue = {\n        before: before ? expectSpaceBefore : unexpectSpaceBefore,\n        after: after ? expectSpaceAfter : unexpectSpaceAfter\n      };\n      const overrides = options && options.overrides || {};\n      const retv = Object.create(null);\n\n      for (let i = 0; i < KEYS.length; ++i) {\n        const key = KEYS[i];\n        const override = overrides[key];\n\n        if (override) {\n          const thisBefore = \"before\" in override ? override.before : before;\n          const thisAfter = \"after\" in override ? override.after : after;\n          retv[key] = {\n            before: thisBefore ? expectSpaceBefore : unexpectSpaceBefore,\n            after: thisAfter ? expectSpaceAfter : unexpectSpaceAfter\n          };\n        } else {\n          retv[key] = defaultValue;\n        }\n      }\n\n      return retv;\n    }\n\n    const checkMethodMap = parseOptions(context.options[0]);\n    /**\n     * Reports a given token if usage of spacing followed by the token is\n     * invalid.\n     * @param {Token} token A token to report.\n     * @param {RegExp} [pattern] Optional. A pattern of the previous\n     *      token to check.\n     * @returns {void}\n     */\n\n    function checkSpacingBefore(token, pattern) {\n      checkMethodMap[token.value].before(token, pattern || PREV_TOKEN);\n    }\n    /**\n     * Reports a given token if usage of spacing preceded by the token is\n     * invalid.\n     * @param {Token} token A token to report.\n     * @param {RegExp} [pattern] Optional. A pattern of the next\n     *      token to check.\n     * @returns {void}\n     */\n\n\n    function checkSpacingAfter(token, pattern) {\n      checkMethodMap[token.value].after(token, pattern || NEXT_TOKEN);\n    }\n    /**\n     * Reports a given token if usage of spacing around the token is invalid.\n     * @param {Token} token A token to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingAround(token) {\n      checkSpacingBefore(token);\n      checkSpacingAfter(token);\n    }\n    /**\n     * Reports the first token of a given node if the first token is a keyword\n     * and usage of spacing around the token is invalid.\n     * @param {ASTNode|null} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingAroundFirstToken(node) {\n      const firstToken = node && sourceCode.getFirstToken(node);\n\n      if (firstToken && firstToken.type === \"Keyword\") {\n        checkSpacingAround(firstToken);\n      }\n    }\n    /**\n     * Reports the first token of a given node if the first token is a keyword\n     * and usage of spacing followed by the token is invalid.\n     *\n     * This is used for unary operators (e.g. `typeof`), `function`, and `super`.\n     * Other rules are handling usage of spacing preceded by those keywords.\n     * @param {ASTNode|null} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingBeforeFirstToken(node) {\n      const firstToken = node && sourceCode.getFirstToken(node);\n\n      if (firstToken && firstToken.type === \"Keyword\") {\n        checkSpacingBefore(firstToken);\n      }\n    }\n    /**\n     * Reports the previous token of a given node if the token is a keyword and\n     * usage of spacing around the token is invalid.\n     * @param {ASTNode|null} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingAroundTokenBefore(node) {\n      if (node) {\n        const token = sourceCode.getTokenBefore(node, astUtils.isKeywordToken);\n        checkSpacingAround(token);\n      }\n    }\n    /**\n     * Reports `async` or `function` keywords of a given node if usage of\n     * spacing around those keywords is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForFunction(node) {\n      const firstToken = node && sourceCode.getFirstToken(node);\n\n      if (firstToken && (firstToken.type === \"Keyword\" && firstToken.value === \"function\" || firstToken.value === \"async\")) {\n        checkSpacingBefore(firstToken);\n      }\n    }\n    /**\n     * Reports `class` and `extends` keywords of a given node if usage of\n     * spacing around those keywords is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForClass(node) {\n      checkSpacingAroundFirstToken(node);\n      checkSpacingAroundTokenBefore(node.superClass);\n    }\n    /**\n     * Reports `if` and `else` keywords of a given node if usage of spacing\n     * around those keywords is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForIfStatement(node) {\n      checkSpacingAroundFirstToken(node);\n      checkSpacingAroundTokenBefore(node.alternate);\n    }\n    /**\n     * Reports `try`, `catch`, and `finally` keywords of a given node if usage\n     * of spacing around those keywords is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForTryStatement(node) {\n      checkSpacingAroundFirstToken(node);\n      checkSpacingAroundFirstToken(node.handler);\n      checkSpacingAroundTokenBefore(node.finalizer);\n    }\n    /**\n     * Reports `do` and `while` keywords of a given node if usage of spacing\n     * around those keywords is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForDoWhileStatement(node) {\n      checkSpacingAroundFirstToken(node);\n      checkSpacingAroundTokenBefore(node.test);\n    }\n    /**\n     * Reports `for` and `in` keywords of a given node if usage of spacing\n     * around those keywords is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForForInStatement(node) {\n      checkSpacingAroundFirstToken(node);\n      checkSpacingAroundTokenBefore(node.right);\n    }\n    /**\n     * Reports `for` and `of` keywords of a given node if usage of spacing\n     * around those keywords is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForForOfStatement(node) {\n      if (node.await) {\n        checkSpacingBefore(sourceCode.getFirstToken(node, 0));\n        checkSpacingAfter(sourceCode.getFirstToken(node, 1));\n      } else {\n        checkSpacingAroundFirstToken(node);\n      }\n\n      checkSpacingAround(sourceCode.getTokenBefore(node.right, astUtils.isNotOpeningParenToken));\n    }\n    /**\n     * Reports `import`, `export`, `as`, and `from` keywords of a given node if\n     * usage of spacing around those keywords is invalid.\n     *\n     * This rule handles the `*` token in module declarations.\n     *\n     *     import*as A from \"./a\"; /*error Expected space(s) after \"import\".\n     *                               error Expected space(s) before \"as\".\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForModuleDeclaration(node) {\n      const firstToken = sourceCode.getFirstToken(node);\n      checkSpacingBefore(firstToken, PREV_TOKEN_M);\n      checkSpacingAfter(firstToken, NEXT_TOKEN_M);\n\n      if (node.type === \"ExportDefaultDeclaration\") {\n        checkSpacingAround(sourceCode.getTokenAfter(firstToken));\n      }\n\n      if (node.source) {\n        const fromToken = sourceCode.getTokenBefore(node.source);\n        checkSpacingBefore(fromToken, PREV_TOKEN_M);\n        checkSpacingAfter(fromToken, NEXT_TOKEN_M);\n      }\n    }\n    /**\n     * Reports `as` keyword of a given node if usage of spacing around this\n     * keyword is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForImportNamespaceSpecifier(node) {\n      const asToken = sourceCode.getFirstToken(node, 1);\n      checkSpacingBefore(asToken, PREV_TOKEN_M);\n    }\n    /**\n     * Reports `static`, `get`, and `set` keywords of a given node if usage of\n     * spacing around those keywords is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForProperty(node) {\n      if (node.static) {\n        checkSpacingAroundFirstToken(node);\n      }\n\n      if (node.kind === \"get\" || node.kind === \"set\" || (node.method || node.type === \"MethodDefinition\") && node.value.async) {\n        const token = sourceCode.getTokenBefore(node.key, tok => {\n          switch (tok.value) {\n            case \"get\":\n            case \"set\":\n            case \"async\":\n              return true;\n\n            default:\n              return false;\n          }\n        });\n\n        if (!token) {\n          throw new Error(\"Failed to find token get, set, or async beside method name\");\n        }\n\n        checkSpacingAround(token);\n      }\n    }\n    /**\n     * Reports `await` keyword of a given node if usage of spacing before\n     * this keyword is invalid.\n     * @param {ASTNode} node A node to report.\n     * @returns {void}\n     */\n\n\n    function checkSpacingForAwaitExpression(node) {\n      checkSpacingBefore(sourceCode.getFirstToken(node));\n    }\n\n    return {\n      // Statements\n      DebuggerStatement: checkSpacingAroundFirstToken,\n      WithStatement: checkSpacingAroundFirstToken,\n      // Statements - Control flow\n      BreakStatement: checkSpacingAroundFirstToken,\n      ContinueStatement: checkSpacingAroundFirstToken,\n      ReturnStatement: checkSpacingAroundFirstToken,\n      ThrowStatement: checkSpacingAroundFirstToken,\n      TryStatement: checkSpacingForTryStatement,\n      // Statements - Choice\n      IfStatement: checkSpacingForIfStatement,\n      SwitchStatement: checkSpacingAroundFirstToken,\n      SwitchCase: checkSpacingAroundFirstToken,\n      // Statements - Loops\n      DoWhileStatement: checkSpacingForDoWhileStatement,\n      ForInStatement: checkSpacingForForInStatement,\n      ForOfStatement: checkSpacingForForOfStatement,\n      ForStatement: checkSpacingAroundFirstToken,\n      WhileStatement: checkSpacingAroundFirstToken,\n      // Statements - Declarations\n      ClassDeclaration: checkSpacingForClass,\n      ExportNamedDeclaration: checkSpacingForModuleDeclaration,\n      ExportDefaultDeclaration: checkSpacingForModuleDeclaration,\n      ExportAllDeclaration: checkSpacingForModuleDeclaration,\n      FunctionDeclaration: checkSpacingForFunction,\n      ImportDeclaration: checkSpacingForModuleDeclaration,\n      VariableDeclaration: checkSpacingAroundFirstToken,\n      // Expressions\n      ArrowFunctionExpression: checkSpacingForFunction,\n      AwaitExpression: checkSpacingForAwaitExpression,\n      ClassExpression: checkSpacingForClass,\n      FunctionExpression: checkSpacingForFunction,\n      NewExpression: checkSpacingBeforeFirstToken,\n      Super: checkSpacingBeforeFirstToken,\n      ThisExpression: checkSpacingBeforeFirstToken,\n      UnaryExpression: checkSpacingBeforeFirstToken,\n      YieldExpression: checkSpacingBeforeFirstToken,\n      // Others\n      ImportNamespaceSpecifier: checkSpacingForImportNamespaceSpecifier,\n      MethodDefinition: checkSpacingForProperty,\n      Property: checkSpacingForProperty\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/keyword-spacing.js"],"names":["astUtils","require","keywords","PREV_TOKEN","NEXT_TOKEN","PREV_TOKEN_M","NEXT_TOKEN_M","TEMPLATE_OPEN_PAREN","TEMPLATE_CLOSE_PAREN","CHECK_TYPE","KEYS","concat","sort","i","length","Error","isOpenParenOfTemplate","token","type","test","value","isCloseParenOfTemplate","module","exports","meta","docs","description","category","recommended","url","fixable","schema","properties","before","default","after","overrides","reduce","retv","key","additionalProperties","messages","expectedBefore","expectedAfter","unexpectedBefore","unexpectedAfter","create","context","sourceCode","getSourceCode","expectSpaceBefore","pattern","prevToken","getTokenBefore","isTokenOnSameLine","isSpaceBetweenTokens","report","loc","start","messageId","data","fix","fixer","insertTextBefore","unexpectSpaceBefore","removeRange","range","expectSpaceAfter","nextToken","getTokenAfter","insertTextAfter","unexpectSpaceAfter","parseOptions","options","defaultValue","Object","override","thisBefore","thisAfter","checkMethodMap","checkSpacingBefore","checkSpacingAfter","checkSpacingAround","checkSpacingAroundFirstToken","node","firstToken","getFirstToken","checkSpacingBeforeFirstToken","checkSpacingAroundTokenBefore","isKeywordToken","checkSpacingForFunction","checkSpacingForClass","superClass","checkSpacingForIfStatement","alternate","checkSpacingForTryStatement","handler","finalizer","checkSpacingForDoWhileStatement","checkSpacingForForInStatement","right","checkSpacingForForOfStatement","await","isNotOpeningParenToken","checkSpacingForModuleDeclaration","source","fromToken","checkSpacingForImportNamespaceSpecifier","asToken","checkSpacingForProperty","static","kind","method","async","tok","checkSpacingForAwaitExpression","DebuggerStatement","WithStatement","BreakStatement","ContinueStatement","ReturnStatement","ThrowStatement","TryStatement","IfStatement","SwitchStatement","SwitchCase","DoWhileStatement","ForInStatement","ForOfStatement","ForStatement","WhileStatement","ClassDeclaration","ExportNamedDeclaration","ExportDefaultDeclaration","ExportAllDeclaration","FunctionDeclaration","ImportDeclaration","VariableDeclaration","ArrowFunctionExpression","AwaitExpression","ClassExpression","FunctionExpression","NewExpression","Super","ThisExpression","UnaryExpression","YieldExpression","ImportNamespaceSpecifier","MethodDefinition","Property"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to enforce spacing before and after keywords.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"),\n    keywords = require(\"./utils/keywords\");\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nconst PREV_TOKEN = /^[)\\]}>]$/u;\nconst NEXT_TOKEN = /^(?:[([{<~!]|\\+\\+?|--?)$/u;\nconst PREV_TOKEN_M = /^[)\\]}>*]$/u;\nconst NEXT_TOKEN_M = /^[{*]$/u;\nconst TEMPLATE_OPEN_PAREN = /\\$\\{$/u;\nconst TEMPLATE_CLOSE_PAREN = /^\\}/u;\nconst CHECK_TYPE = /^(?:JSXElement|RegularExpression|String|Template)$/u;\nconst KEYS = keywords.concat([\"as\", \"async\", \"await\", \"from\", \"get\", \"let\", \"of\", \"set\", \"yield\"]);\n\n// check duplications.\n(function() {\n    KEYS.sort();\n    for (let i = 1; i < KEYS.length; ++i) {\n        if (KEYS[i] === KEYS[i - 1]) {\n            throw new Error(`Duplication was found in the keyword list: ${KEYS[i]}`);\n        }\n    }\n}());\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given token is a \"Template\" token ends with \"${\".\n * @param {Token} token A token to check.\n * @returns {boolean} `true` if the token is a \"Template\" token ends with \"${\".\n */\nfunction isOpenParenOfTemplate(token) {\n    return token.type === \"Template\" && TEMPLATE_OPEN_PAREN.test(token.value);\n}\n\n/**\n * Checks whether or not a given token is a \"Template\" token starts with \"}\".\n * @param {Token} token A token to check.\n * @returns {boolean} `true` if the token is a \"Template\" token starts with \"}\".\n */\nfunction isCloseParenOfTemplate(token) {\n    return token.type === \"Template\" && TEMPLATE_CLOSE_PAREN.test(token.value);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent spacing before and after keywords\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/keyword-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    before: { type: \"boolean\", default: true },\n                    after: { type: \"boolean\", default: true },\n                    overrides: {\n                        type: \"object\",\n                        properties: KEYS.reduce((retv, key) => {\n                            retv[key] = {\n                                type: \"object\",\n                                properties: {\n                                    before: { type: \"boolean\" },\n                                    after: { type: \"boolean\" }\n                                },\n                                additionalProperties: false\n                            };\n                            return retv;\n                        }, {}),\n                        additionalProperties: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            expectedBefore: \"Expected space(s) before \\\"{{value}}\\\".\",\n            expectedAfter: \"Expected space(s) after \\\"{{value}}\\\".\",\n            unexpectedBefore: \"Unexpected space(s) before \\\"{{value}}\\\".\",\n            unexpectedAfter: \"Unexpected space(s) after \\\"{{value}}\\\".\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Reports a given token if there are not space(s) before the token.\n         * @param {Token} token A token to report.\n         * @param {RegExp} pattern A pattern of the previous token to check.\n         * @returns {void}\n         */\n        function expectSpaceBefore(token, pattern) {\n            const prevToken = sourceCode.getTokenBefore(token);\n\n            if (prevToken &&\n                (CHECK_TYPE.test(prevToken.type) || pattern.test(prevToken.value)) &&\n                !isOpenParenOfTemplate(prevToken) &&\n                astUtils.isTokenOnSameLine(prevToken, token) &&\n                !sourceCode.isSpaceBetweenTokens(prevToken, token)\n            ) {\n                context.report({\n                    loc: token.loc.start,\n                    messageId: \"expectedBefore\",\n                    data: token,\n                    fix(fixer) {\n                        return fixer.insertTextBefore(token, \" \");\n                    }\n                });\n            }\n        }\n\n        /**\n         * Reports a given token if there are space(s) before the token.\n         * @param {Token} token A token to report.\n         * @param {RegExp} pattern A pattern of the previous token to check.\n         * @returns {void}\n         */\n        function unexpectSpaceBefore(token, pattern) {\n            const prevToken = sourceCode.getTokenBefore(token);\n\n            if (prevToken &&\n                (CHECK_TYPE.test(prevToken.type) || pattern.test(prevToken.value)) &&\n                !isOpenParenOfTemplate(prevToken) &&\n                astUtils.isTokenOnSameLine(prevToken, token) &&\n                sourceCode.isSpaceBetweenTokens(prevToken, token)\n            ) {\n                context.report({\n                    loc: token.loc.start,\n                    messageId: \"unexpectedBefore\",\n                    data: token,\n                    fix(fixer) {\n                        return fixer.removeRange([prevToken.range[1], token.range[0]]);\n                    }\n                });\n            }\n        }\n\n        /**\n         * Reports a given token if there are not space(s) after the token.\n         * @param {Token} token A token to report.\n         * @param {RegExp} pattern A pattern of the next token to check.\n         * @returns {void}\n         */\n        function expectSpaceAfter(token, pattern) {\n            const nextToken = sourceCode.getTokenAfter(token);\n\n            if (nextToken &&\n                (CHECK_TYPE.test(nextToken.type) || pattern.test(nextToken.value)) &&\n                !isCloseParenOfTemplate(nextToken) &&\n                astUtils.isTokenOnSameLine(token, nextToken) &&\n                !sourceCode.isSpaceBetweenTokens(token, nextToken)\n            ) {\n                context.report({\n                    loc: token.loc.start,\n                    messageId: \"expectedAfter\",\n                    data: token,\n                    fix(fixer) {\n                        return fixer.insertTextAfter(token, \" \");\n                    }\n                });\n            }\n        }\n\n        /**\n         * Reports a given token if there are space(s) after the token.\n         * @param {Token} token A token to report.\n         * @param {RegExp} pattern A pattern of the next token to check.\n         * @returns {void}\n         */\n        function unexpectSpaceAfter(token, pattern) {\n            const nextToken = sourceCode.getTokenAfter(token);\n\n            if (nextToken &&\n                (CHECK_TYPE.test(nextToken.type) || pattern.test(nextToken.value)) &&\n                !isCloseParenOfTemplate(nextToken) &&\n                astUtils.isTokenOnSameLine(token, nextToken) &&\n                sourceCode.isSpaceBetweenTokens(token, nextToken)\n            ) {\n                context.report({\n                    loc: token.loc.start,\n                    messageId: \"unexpectedAfter\",\n                    data: token,\n                    fix(fixer) {\n                        return fixer.removeRange([token.range[1], nextToken.range[0]]);\n                    }\n                });\n            }\n        }\n\n        /**\n         * Parses the option object and determines check methods for each keyword.\n         * @param {Object|undefined} options The option object to parse.\n         * @returns {Object} - Normalized option object.\n         *      Keys are keywords (there are for every keyword).\n         *      Values are instances of `{\"before\": function, \"after\": function}`.\n         */\n        function parseOptions(options = {}) {\n            const before = options.before !== false;\n            const after = options.after !== false;\n            const defaultValue = {\n                before: before ? expectSpaceBefore : unexpectSpaceBefore,\n                after: after ? expectSpaceAfter : unexpectSpaceAfter\n            };\n            const overrides = (options && options.overrides) || {};\n            const retv = Object.create(null);\n\n            for (let i = 0; i < KEYS.length; ++i) {\n                const key = KEYS[i];\n                const override = overrides[key];\n\n                if (override) {\n                    const thisBefore = (\"before\" in override) ? override.before : before;\n                    const thisAfter = (\"after\" in override) ? override.after : after;\n\n                    retv[key] = {\n                        before: thisBefore ? expectSpaceBefore : unexpectSpaceBefore,\n                        after: thisAfter ? expectSpaceAfter : unexpectSpaceAfter\n                    };\n                } else {\n                    retv[key] = defaultValue;\n                }\n            }\n\n            return retv;\n        }\n\n        const checkMethodMap = parseOptions(context.options[0]);\n\n        /**\n         * Reports a given token if usage of spacing followed by the token is\n         * invalid.\n         * @param {Token} token A token to report.\n         * @param {RegExp} [pattern] Optional. A pattern of the previous\n         *      token to check.\n         * @returns {void}\n         */\n        function checkSpacingBefore(token, pattern) {\n            checkMethodMap[token.value].before(token, pattern || PREV_TOKEN);\n        }\n\n        /**\n         * Reports a given token if usage of spacing preceded by the token is\n         * invalid.\n         * @param {Token} token A token to report.\n         * @param {RegExp} [pattern] Optional. A pattern of the next\n         *      token to check.\n         * @returns {void}\n         */\n        function checkSpacingAfter(token, pattern) {\n            checkMethodMap[token.value].after(token, pattern || NEXT_TOKEN);\n        }\n\n        /**\n         * Reports a given token if usage of spacing around the token is invalid.\n         * @param {Token} token A token to report.\n         * @returns {void}\n         */\n        function checkSpacingAround(token) {\n            checkSpacingBefore(token);\n            checkSpacingAfter(token);\n        }\n\n        /**\n         * Reports the first token of a given node if the first token is a keyword\n         * and usage of spacing around the token is invalid.\n         * @param {ASTNode|null} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingAroundFirstToken(node) {\n            const firstToken = node && sourceCode.getFirstToken(node);\n\n            if (firstToken && firstToken.type === \"Keyword\") {\n                checkSpacingAround(firstToken);\n            }\n        }\n\n        /**\n         * Reports the first token of a given node if the first token is a keyword\n         * and usage of spacing followed by the token is invalid.\n         *\n         * This is used for unary operators (e.g. `typeof`), `function`, and `super`.\n         * Other rules are handling usage of spacing preceded by those keywords.\n         * @param {ASTNode|null} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingBeforeFirstToken(node) {\n            const firstToken = node && sourceCode.getFirstToken(node);\n\n            if (firstToken && firstToken.type === \"Keyword\") {\n                checkSpacingBefore(firstToken);\n            }\n        }\n\n        /**\n         * Reports the previous token of a given node if the token is a keyword and\n         * usage of spacing around the token is invalid.\n         * @param {ASTNode|null} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingAroundTokenBefore(node) {\n            if (node) {\n                const token = sourceCode.getTokenBefore(node, astUtils.isKeywordToken);\n\n                checkSpacingAround(token);\n            }\n        }\n\n        /**\n         * Reports `async` or `function` keywords of a given node if usage of\n         * spacing around those keywords is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForFunction(node) {\n            const firstToken = node && sourceCode.getFirstToken(node);\n\n            if (firstToken &&\n                ((firstToken.type === \"Keyword\" && firstToken.value === \"function\") ||\n                firstToken.value === \"async\")\n            ) {\n                checkSpacingBefore(firstToken);\n            }\n        }\n\n        /**\n         * Reports `class` and `extends` keywords of a given node if usage of\n         * spacing around those keywords is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForClass(node) {\n            checkSpacingAroundFirstToken(node);\n            checkSpacingAroundTokenBefore(node.superClass);\n        }\n\n        /**\n         * Reports `if` and `else` keywords of a given node if usage of spacing\n         * around those keywords is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForIfStatement(node) {\n            checkSpacingAroundFirstToken(node);\n            checkSpacingAroundTokenBefore(node.alternate);\n        }\n\n        /**\n         * Reports `try`, `catch`, and `finally` keywords of a given node if usage\n         * of spacing around those keywords is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForTryStatement(node) {\n            checkSpacingAroundFirstToken(node);\n            checkSpacingAroundFirstToken(node.handler);\n            checkSpacingAroundTokenBefore(node.finalizer);\n        }\n\n        /**\n         * Reports `do` and `while` keywords of a given node if usage of spacing\n         * around those keywords is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForDoWhileStatement(node) {\n            checkSpacingAroundFirstToken(node);\n            checkSpacingAroundTokenBefore(node.test);\n        }\n\n        /**\n         * Reports `for` and `in` keywords of a given node if usage of spacing\n         * around those keywords is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForForInStatement(node) {\n            checkSpacingAroundFirstToken(node);\n            checkSpacingAroundTokenBefore(node.right);\n        }\n\n        /**\n         * Reports `for` and `of` keywords of a given node if usage of spacing\n         * around those keywords is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForForOfStatement(node) {\n            if (node.await) {\n                checkSpacingBefore(sourceCode.getFirstToken(node, 0));\n                checkSpacingAfter(sourceCode.getFirstToken(node, 1));\n            } else {\n                checkSpacingAroundFirstToken(node);\n            }\n            checkSpacingAround(sourceCode.getTokenBefore(node.right, astUtils.isNotOpeningParenToken));\n        }\n\n        /**\n         * Reports `import`, `export`, `as`, and `from` keywords of a given node if\n         * usage of spacing around those keywords is invalid.\n         *\n         * This rule handles the `*` token in module declarations.\n         *\n         *     import*as A from \"./a\"; /*error Expected space(s) after \"import\".\n         *                               error Expected space(s) before \"as\".\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForModuleDeclaration(node) {\n            const firstToken = sourceCode.getFirstToken(node);\n\n            checkSpacingBefore(firstToken, PREV_TOKEN_M);\n            checkSpacingAfter(firstToken, NEXT_TOKEN_M);\n\n            if (node.type === \"ExportDefaultDeclaration\") {\n                checkSpacingAround(sourceCode.getTokenAfter(firstToken));\n            }\n\n            if (node.source) {\n                const fromToken = sourceCode.getTokenBefore(node.source);\n\n                checkSpacingBefore(fromToken, PREV_TOKEN_M);\n                checkSpacingAfter(fromToken, NEXT_TOKEN_M);\n            }\n        }\n\n        /**\n         * Reports `as` keyword of a given node if usage of spacing around this\n         * keyword is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForImportNamespaceSpecifier(node) {\n            const asToken = sourceCode.getFirstToken(node, 1);\n\n            checkSpacingBefore(asToken, PREV_TOKEN_M);\n        }\n\n        /**\n         * Reports `static`, `get`, and `set` keywords of a given node if usage of\n         * spacing around those keywords is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForProperty(node) {\n            if (node.static) {\n                checkSpacingAroundFirstToken(node);\n            }\n            if (node.kind === \"get\" ||\n                node.kind === \"set\" ||\n                (\n                    (node.method || node.type === \"MethodDefinition\") &&\n                    node.value.async\n                )\n            ) {\n                const token = sourceCode.getTokenBefore(\n                    node.key,\n                    tok => {\n                        switch (tok.value) {\n                            case \"get\":\n                            case \"set\":\n                            case \"async\":\n                                return true;\n                            default:\n                                return false;\n                        }\n                    }\n                );\n\n                if (!token) {\n                    throw new Error(\"Failed to find token get, set, or async beside method name\");\n                }\n\n\n                checkSpacingAround(token);\n            }\n        }\n\n        /**\n         * Reports `await` keyword of a given node if usage of spacing before\n         * this keyword is invalid.\n         * @param {ASTNode} node A node to report.\n         * @returns {void}\n         */\n        function checkSpacingForAwaitExpression(node) {\n            checkSpacingBefore(sourceCode.getFirstToken(node));\n        }\n\n        return {\n\n            // Statements\n            DebuggerStatement: checkSpacingAroundFirstToken,\n            WithStatement: checkSpacingAroundFirstToken,\n\n            // Statements - Control flow\n            BreakStatement: checkSpacingAroundFirstToken,\n            ContinueStatement: checkSpacingAroundFirstToken,\n            ReturnStatement: checkSpacingAroundFirstToken,\n            ThrowStatement: checkSpacingAroundFirstToken,\n            TryStatement: checkSpacingForTryStatement,\n\n            // Statements - Choice\n            IfStatement: checkSpacingForIfStatement,\n            SwitchStatement: checkSpacingAroundFirstToken,\n            SwitchCase: checkSpacingAroundFirstToken,\n\n            // Statements - Loops\n            DoWhileStatement: checkSpacingForDoWhileStatement,\n            ForInStatement: checkSpacingForForInStatement,\n            ForOfStatement: checkSpacingForForOfStatement,\n            ForStatement: checkSpacingAroundFirstToken,\n            WhileStatement: checkSpacingAroundFirstToken,\n\n            // Statements - Declarations\n            ClassDeclaration: checkSpacingForClass,\n            ExportNamedDeclaration: checkSpacingForModuleDeclaration,\n            ExportDefaultDeclaration: checkSpacingForModuleDeclaration,\n            ExportAllDeclaration: checkSpacingForModuleDeclaration,\n            FunctionDeclaration: checkSpacingForFunction,\n            ImportDeclaration: checkSpacingForModuleDeclaration,\n            VariableDeclaration: checkSpacingAroundFirstToken,\n\n            // Expressions\n            ArrowFunctionExpression: checkSpacingForFunction,\n            AwaitExpression: checkSpacingForAwaitExpression,\n            ClassExpression: checkSpacingForClass,\n            FunctionExpression: checkSpacingForFunction,\n            NewExpression: checkSpacingBeforeFirstToken,\n            Super: checkSpacingBeforeFirstToken,\n            ThisExpression: checkSpacingBeforeFirstToken,\n            UnaryExpression: checkSpacingBeforeFirstToken,\n            YieldExpression: checkSpacingBeforeFirstToken,\n\n            // Others\n            ImportNamespaceSpecifier: checkSpacingForImportNamespaceSpecifier,\n            MethodDefinition: checkSpacingForProperty,\n            Property: checkSpacingForProperty\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}