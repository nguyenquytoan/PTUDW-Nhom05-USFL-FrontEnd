{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _base_reporter = _interopRequireDefault(require('./base_reporter'));\n\nvar _utils = require('./utils');\n\nvar _get_result_header = _interopRequireDefault(require('./get_result_header'));\n\nvar _get_snapshot_summary = _interopRequireDefault(require('./get_snapshot_summary'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst TEST_SUMMARY_THRESHOLD = 20;\nconst NPM_EVENTS = new Set(['prepublish', 'publish', 'postpublish', 'preinstall', 'install', 'postinstall', 'preuninstall', 'uninstall', 'postuninstall', 'preversion', 'version', 'postversion', 'pretest', 'test', 'posttest', 'prestop', 'stop', 'poststop', 'prestart', 'start', 'poststart', 'prerestart', 'restart', 'postrestart']);\nconst _process$env = process.env,\n      npm_config_user_agent = _process$env.npm_config_user_agent,\n      npm_lifecycle_event = _process$env.npm_lifecycle_event,\n      npm_lifecycle_script = _process$env.npm_lifecycle_script;\n\nclass SummaryReporter extends _base_reporter.default {\n  constructor(globalConfig) {\n    super();\n\n    _defineProperty(this, '_estimatedTime', void 0);\n\n    _defineProperty(this, '_globalConfig', void 0);\n\n    this._globalConfig = globalConfig;\n    this._estimatedTime = 0;\n  } // If we write more than one character at a time it is possible that\n  // Node.js exits in the middle of printing the result. This was first observed\n  // in Node.js 0.10 and still persists in Node.js 6.7+.\n  // Let's print the test failure summary character by character which is safer\n  // when hundreds of tests are failing.\n\n\n  _write(string) {\n    for (let i = 0; i < string.length; i++) {\n      process.stderr.write(string.charAt(i));\n    }\n  }\n\n  onRunStart(aggregatedResults, options) {\n    super.onRunStart(aggregatedResults, options);\n    this._estimatedTime = options.estimatedTime;\n  }\n\n  onRunComplete(contexts, aggregatedResults) {\n    const numTotalTestSuites = aggregatedResults.numTotalTestSuites,\n          testResults = aggregatedResults.testResults,\n          wasInterrupted = aggregatedResults.wasInterrupted;\n\n    if (numTotalTestSuites) {\n      const lastResult = testResults[testResults.length - 1]; // Print a newline if the last test did not fail to line up newlines\n      // similar to when an error would have been thrown in the test.\n\n      if (!this._globalConfig.verbose && lastResult && !lastResult.numFailingTests && !lastResult.testExecError) {\n        this.log('');\n      }\n\n      this._printSummary(aggregatedResults, this._globalConfig);\n\n      this._printSnapshotSummary(aggregatedResults.snapshot, this._globalConfig);\n\n      if (numTotalTestSuites) {\n        let message = (0, _utils.getSummary)(aggregatedResults, {\n          estimatedTime: this._estimatedTime\n        });\n\n        if (!this._globalConfig.silent) {\n          message += '\\n' + (wasInterrupted ? _chalk().default.bold.red('Test run was interrupted.') : this._getTestSummary(contexts, this._globalConfig));\n        }\n\n        this.log(message);\n      }\n    }\n  }\n\n  _printSnapshotSummary(snapshots, globalConfig) {\n    if (snapshots.added || snapshots.filesRemoved || snapshots.unchecked || snapshots.unmatched || snapshots.updated) {\n      let updateCommand;\n      const event = npm_lifecycle_event || '';\n      const prefix = NPM_EVENTS.has(event) ? '' : 'run ';\n      const isYarn = typeof npm_config_user_agent === 'string' && npm_config_user_agent.includes('yarn');\n      const client = isYarn ? 'yarn' : 'npm';\n      const scriptUsesJest = typeof npm_lifecycle_script === 'string' && npm_lifecycle_script.includes('jest');\n\n      if (globalConfig.watch || globalConfig.watchAll) {\n        updateCommand = 'press `u`';\n      } else if (event && scriptUsesJest) {\n        updateCommand = `run \\`${client + ' ' + prefix + event + (isYarn ? '' : ' --')} -u\\``;\n      } else {\n        updateCommand = 're-run jest with `-u`';\n      }\n\n      const snapshotSummary = (0, _get_snapshot_summary.default)(snapshots, globalConfig, updateCommand);\n      snapshotSummary.forEach(this.log);\n      this.log(''); // print empty line\n    }\n  }\n\n  _printSummary(aggregatedResults, globalConfig) {\n    // If there were any failing tests and there was a large number of tests\n    // executed, re-print the failing results at the end of execution output.\n    const failedTests = aggregatedResults.numFailedTests;\n    const runtimeErrors = aggregatedResults.numRuntimeErrorTestSuites;\n\n    if (failedTests + runtimeErrors > 0 && aggregatedResults.numTotalTestSuites > TEST_SUMMARY_THRESHOLD) {\n      this.log(_chalk().default.bold('Summary of all failing tests'));\n      aggregatedResults.testResults.forEach(testResult => {\n        const failureMessage = testResult.failureMessage;\n\n        if (failureMessage) {\n          this._write((0, _get_result_header.default)(testResult, globalConfig) + '\\n' + failureMessage + '\\n');\n        }\n      });\n      this.log(''); // print empty line\n    }\n  }\n\n  _getTestSummary(contexts, globalConfig) {\n    const getMatchingTestsInfo = () => {\n      const prefix = globalConfig.findRelatedTests ? ' related to files matching ' : ' matching ';\n      return _chalk().default.dim(prefix) + (0, _jestUtil().testPathPatternToRegExp)(globalConfig.testPathPattern).toString();\n    };\n\n    let testInfo = '';\n\n    if (globalConfig.runTestsByPath) {\n      testInfo = _chalk().default.dim(' within paths');\n    } else if (globalConfig.onlyChanged) {\n      testInfo = _chalk().default.dim(' related to changed files');\n    } else if (globalConfig.testPathPattern) {\n      testInfo = getMatchingTestsInfo();\n    }\n\n    let nameInfo = '';\n\n    if (globalConfig.runTestsByPath) {\n      nameInfo = ' ' + globalConfig.nonFlagArgs.map(p => `\"${p}\"`).join(', ');\n    } else if (globalConfig.testNamePattern) {\n      nameInfo = _chalk().default.dim(' with tests matching ') + `\"${globalConfig.testNamePattern}\"`;\n    }\n\n    const contextInfo = contexts.size > 1 ? _chalk().default.dim(' in ') + contexts.size + _chalk().default.dim(' projects') : '';\n    return _chalk().default.dim('Ran all test suites') + testInfo + nameInfo + contextInfo + _chalk().default.dim('.');\n  }\n\n}\n\nexports.default = SummaryReporter;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/@jest/reporters/build/summary_reporter.js"],"names":["Object","defineProperty","exports","value","default","_chalk","data","_interopRequireDefault","require","_jestUtil","_base_reporter","_utils","_get_result_header","_get_snapshot_summary","obj","__esModule","_defineProperty","key","enumerable","configurable","writable","TEST_SUMMARY_THRESHOLD","NPM_EVENTS","Set","_process$env","process","env","npm_config_user_agent","npm_lifecycle_event","npm_lifecycle_script","SummaryReporter","constructor","globalConfig","_globalConfig","_estimatedTime","_write","string","i","length","stderr","write","charAt","onRunStart","aggregatedResults","options","estimatedTime","onRunComplete","contexts","numTotalTestSuites","testResults","wasInterrupted","lastResult","verbose","numFailingTests","testExecError","log","_printSummary","_printSnapshotSummary","snapshot","message","getSummary","silent","bold","red","_getTestSummary","snapshots","added","filesRemoved","unchecked","unmatched","updated","updateCommand","event","prefix","has","isYarn","includes","client","scriptUsesJest","watch","watchAll","snapshotSummary","forEach","failedTests","numFailedTests","runtimeErrors","numRuntimeErrorTestSuites","testResult","failureMessage","getMatchingTestsInfo","findRelatedTests","dim","testPathPatternToRegExp","testPathPattern","toString","testInfo","runTestsByPath","onlyChanged","nameInfo","nonFlagArgs","map","p","join","testNamePattern","contextInfo","size"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,SAASC,MAAT,GAAkB;AAChB,QAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEAH,EAAAA,MAAM,GAAG,SAASA,MAAT,GAAkB;AACzB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASG,SAAT,GAAqB;AACnB,QAAMH,IAAI,GAAGE,OAAO,CAAC,WAAD,CAApB;;AAEAC,EAAAA,SAAS,GAAG,SAASA,SAAT,GAAqB;AAC/B,WAAOH,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,IAAII,cAAc,GAAGH,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAA3C;;AAEA,IAAIG,MAAM,GAAGH,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAII,kBAAkB,GAAGL,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAA/C;;AAEA,IAAIK,qBAAqB,GAAGN,sBAAsB,CAChDC,OAAO,CAAC,wBAAD,CADyC,CAAlD;;AAIA,SAASD,sBAAT,CAAgCO,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAACV,IAAAA,OAAO,EAAEU;AAAV,GAArC;AACD;;AAED,SAASE,eAAT,CAAyBF,GAAzB,EAA8BG,GAA9B,EAAmCd,KAAnC,EAA0C;AACxC,MAAIc,GAAG,IAAIH,GAAX,EAAgB;AACdd,IAAAA,MAAM,CAACC,cAAP,CAAsBa,GAAtB,EAA2BG,GAA3B,EAAgC;AAC9Bd,MAAAA,KAAK,EAAEA,KADuB;AAE9Be,MAAAA,UAAU,EAAE,IAFkB;AAG9BC,MAAAA,YAAY,EAAE,IAHgB;AAI9BC,MAAAA,QAAQ,EAAE;AAJoB,KAAhC;AAMD,GAPD,MAOO;AACLN,IAAAA,GAAG,CAACG,GAAD,CAAH,GAAWd,KAAX;AACD;;AACD,SAAOW,GAAP;AACD;;AAED,MAAMO,sBAAsB,GAAG,EAA/B;AACA,MAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAQ,CACzB,YADyB,EAEzB,SAFyB,EAGzB,aAHyB,EAIzB,YAJyB,EAKzB,SALyB,EAMzB,aANyB,EAOzB,cAPyB,EAQzB,WARyB,EASzB,eATyB,EAUzB,YAVyB,EAWzB,SAXyB,EAYzB,aAZyB,EAazB,SAbyB,EAczB,MAdyB,EAezB,UAfyB,EAgBzB,SAhByB,EAiBzB,MAjByB,EAkBzB,UAlByB,EAmBzB,UAnByB,EAoBzB,OApByB,EAqBzB,WArByB,EAsBzB,YAtByB,EAuBzB,SAvByB,EAwBzB,aAxByB,CAAR,CAAnB;AA0BA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAA7B;AAAA,MACEC,qBAAqB,GAAGH,YAAY,CAACG,qBADvC;AAAA,MAEEC,mBAAmB,GAAGJ,YAAY,CAACI,mBAFrC;AAAA,MAGEC,oBAAoB,GAAGL,YAAY,CAACK,oBAHtC;;AAKA,MAAMC,eAAN,SAA8BpB,cAAc,CAACN,OAA7C,CAAqD;AACnD2B,EAAAA,WAAW,CAACC,YAAD,EAAe;AACxB;;AAEAhB,IAAAA,eAAe,CAAC,IAAD,EAAO,gBAAP,EAAyB,KAAK,CAA9B,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,eAAP,EAAwB,KAAK,CAA7B,CAAf;;AAEA,SAAKiB,aAAL,GAAqBD,YAArB;AACA,SAAKE,cAAL,GAAsB,CAAtB;AACD,GAVkD,CAUjD;AACF;AACA;AACA;AACA;;;AAEAC,EAAAA,MAAM,CAACC,MAAD,EAAS;AACb,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAAM,CAACE,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtCZ,MAAAA,OAAO,CAACc,MAAR,CAAeC,KAAf,CAAqBJ,MAAM,CAACK,MAAP,CAAcJ,CAAd,CAArB;AACD;AACF;;AAEDK,EAAAA,UAAU,CAACC,iBAAD,EAAoBC,OAApB,EAA6B;AACrC,UAAMF,UAAN,CAAiBC,iBAAjB,EAAoCC,OAApC;AACA,SAAKV,cAAL,GAAsBU,OAAO,CAACC,aAA9B;AACD;;AAEDC,EAAAA,aAAa,CAACC,QAAD,EAAWJ,iBAAX,EAA8B;AACzC,UAAMK,kBAAkB,GAAGL,iBAAiB,CAACK,kBAA7C;AAAA,UACEC,WAAW,GAAGN,iBAAiB,CAACM,WADlC;AAAA,UAEEC,cAAc,GAAGP,iBAAiB,CAACO,cAFrC;;AAIA,QAAIF,kBAAJ,EAAwB;AACtB,YAAMG,UAAU,GAAGF,WAAW,CAACA,WAAW,CAACX,MAAZ,GAAqB,CAAtB,CAA9B,CADsB,CACkC;AACxD;;AAEA,UACE,CAAC,KAAKL,aAAL,CAAmBmB,OAApB,IACAD,UADA,IAEA,CAACA,UAAU,CAACE,eAFZ,IAGA,CAACF,UAAU,CAACG,aAJd,EAKE;AACA,aAAKC,GAAL,CAAS,EAAT;AACD;;AAED,WAAKC,aAAL,CAAmBb,iBAAnB,EAAsC,KAAKV,aAA3C;;AAEA,WAAKwB,qBAAL,CACEd,iBAAiB,CAACe,QADpB,EAEE,KAAKzB,aAFP;;AAKA,UAAIe,kBAAJ,EAAwB;AACtB,YAAIW,OAAO,GAAG,CAAC,GAAGhD,MAAM,CAACiD,UAAX,EAAuBjB,iBAAvB,EAA0C;AACtDE,UAAAA,aAAa,EAAE,KAAKX;AADkC,SAA1C,CAAd;;AAIA,YAAI,CAAC,KAAKD,aAAL,CAAmB4B,MAAxB,EAAgC;AAC9BF,UAAAA,OAAO,IACL,QACCT,cAAc,GACX7C,MAAM,GAAGD,OAAT,CAAiB0D,IAAjB,CAAsBC,GAAtB,CAA0B,2BAA1B,CADW,GAEX,KAAKC,eAAL,CAAqBjB,QAArB,EAA+B,KAAKd,aAApC,CAHJ,CADF;AAKD;;AAED,aAAKsB,GAAL,CAASI,OAAT;AACD;AACF;AACF;;AAEDF,EAAAA,qBAAqB,CAACQ,SAAD,EAAYjC,YAAZ,EAA0B;AAC7C,QACEiC,SAAS,CAACC,KAAV,IACAD,SAAS,CAACE,YADV,IAEAF,SAAS,CAACG,SAFV,IAGAH,SAAS,CAACI,SAHV,IAIAJ,SAAS,CAACK,OALZ,EAME;AACA,UAAIC,aAAJ;AACA,YAAMC,KAAK,GAAG5C,mBAAmB,IAAI,EAArC;AACA,YAAM6C,MAAM,GAAGnD,UAAU,CAACoD,GAAX,CAAeF,KAAf,IAAwB,EAAxB,GAA6B,MAA5C;AACA,YAAMG,MAAM,GACV,OAAOhD,qBAAP,KAAiC,QAAjC,IACAA,qBAAqB,CAACiD,QAAtB,CAA+B,MAA/B,CAFF;AAGA,YAAMC,MAAM,GAAGF,MAAM,GAAG,MAAH,GAAY,KAAjC;AACA,YAAMG,cAAc,GAClB,OAAOjD,oBAAP,KAAgC,QAAhC,IACAA,oBAAoB,CAAC+C,QAArB,CAA8B,MAA9B,CAFF;;AAIA,UAAI5C,YAAY,CAAC+C,KAAb,IAAsB/C,YAAY,CAACgD,QAAvC,EAAiD;AAC/CT,QAAAA,aAAa,GAAG,WAAhB;AACD,OAFD,MAEO,IAAIC,KAAK,IAAIM,cAAb,EAA6B;AAClCP,QAAAA,aAAa,GAAI,SAAQM,MAAM,GAC7B,GADuB,GAEvBJ,MAFuB,GAGvBD,KAHuB,IAItBG,MAAM,GAAG,EAAH,GAAQ,KAJQ,CAID,OAJxB;AAKD,OANM,MAMA;AACLJ,QAAAA,aAAa,GAAG,uBAAhB;AACD;;AAED,YAAMU,eAAe,GAAG,CAAC,GAAGpE,qBAAqB,CAACT,OAA1B,EACtB6D,SADsB,EAEtBjC,YAFsB,EAGtBuC,aAHsB,CAAxB;AAKAU,MAAAA,eAAe,CAACC,OAAhB,CAAwB,KAAK3B,GAA7B;AACA,WAAKA,GAAL,CAAS,EAAT,EA9BA,CA8Bc;AACf;AACF;;AAEDC,EAAAA,aAAa,CAACb,iBAAD,EAAoBX,YAApB,EAAkC;AAC7C;AACA;AACA,UAAMmD,WAAW,GAAGxC,iBAAiB,CAACyC,cAAtC;AACA,UAAMC,aAAa,GAAG1C,iBAAiB,CAAC2C,yBAAxC;;AAEA,QACEH,WAAW,GAAGE,aAAd,GAA8B,CAA9B,IACA1C,iBAAiB,CAACK,kBAAlB,GAAuC3B,sBAFzC,EAGE;AACA,WAAKkC,GAAL,CAASlD,MAAM,GAAGD,OAAT,CAAiB0D,IAAjB,CAAsB,8BAAtB,CAAT;AACAnB,MAAAA,iBAAiB,CAACM,WAAlB,CAA8BiC,OAA9B,CAAsCK,UAAU,IAAI;AAClD,cAAMC,cAAc,GAAGD,UAAU,CAACC,cAAlC;;AAEA,YAAIA,cAAJ,EAAoB;AAClB,eAAKrD,MAAL,CACE,CAAC,GAAGvB,kBAAkB,CAACR,OAAvB,EAAgCmF,UAAhC,EAA4CvD,YAA5C,IACE,IADF,GAEEwD,cAFF,GAGE,IAJJ;AAMD;AACF,OAXD;AAYA,WAAKjC,GAAL,CAAS,EAAT,EAdA,CAcc;AACf;AACF;;AAEDS,EAAAA,eAAe,CAACjB,QAAD,EAAWf,YAAX,EAAyB;AACtC,UAAMyD,oBAAoB,GAAG,MAAM;AACjC,YAAMhB,MAAM,GAAGzC,YAAY,CAAC0D,gBAAb,GACX,6BADW,GAEX,YAFJ;AAGA,aACErF,MAAM,GAAGD,OAAT,CAAiBuF,GAAjB,CAAqBlB,MAArB,IACA,CAAC,GAAGhE,SAAS,GAAGmF,uBAAhB,EACE5D,YAAY,CAAC6D,eADf,EAEEC,QAFF,EAFF;AAMD,KAVD;;AAYA,QAAIC,QAAQ,GAAG,EAAf;;AAEA,QAAI/D,YAAY,CAACgE,cAAjB,EAAiC;AAC/BD,MAAAA,QAAQ,GAAG1F,MAAM,GAAGD,OAAT,CAAiBuF,GAAjB,CAAqB,eAArB,CAAX;AACD,KAFD,MAEO,IAAI3D,YAAY,CAACiE,WAAjB,EAA8B;AACnCF,MAAAA,QAAQ,GAAG1F,MAAM,GAAGD,OAAT,CAAiBuF,GAAjB,CAAqB,2BAArB,CAAX;AACD,KAFM,MAEA,IAAI3D,YAAY,CAAC6D,eAAjB,EAAkC;AACvCE,MAAAA,QAAQ,GAAGN,oBAAoB,EAA/B;AACD;;AAED,QAAIS,QAAQ,GAAG,EAAf;;AAEA,QAAIlE,YAAY,CAACgE,cAAjB,EAAiC;AAC/BE,MAAAA,QAAQ,GAAG,MAAMlE,YAAY,CAACmE,WAAb,CAAyBC,GAAzB,CAA6BC,CAAC,IAAK,IAAGA,CAAE,GAAxC,EAA4CC,IAA5C,CAAiD,IAAjD,CAAjB;AACD,KAFD,MAEO,IAAItE,YAAY,CAACuE,eAAjB,EAAkC;AACvCL,MAAAA,QAAQ,GACN7F,MAAM,GAAGD,OAAT,CAAiBuF,GAAjB,CAAqB,uBAArB,IACC,IAAG3D,YAAY,CAACuE,eAAgB,GAFnC;AAGD;;AAED,UAAMC,WAAW,GACfzD,QAAQ,CAAC0D,IAAT,GAAgB,CAAhB,GACIpG,MAAM,GAAGD,OAAT,CAAiBuF,GAAjB,CAAqB,MAArB,IACA5C,QAAQ,CAAC0D,IADT,GAEApG,MAAM,GAAGD,OAAT,CAAiBuF,GAAjB,CAAqB,WAArB,CAHJ,GAII,EALN;AAMA,WACEtF,MAAM,GAAGD,OAAT,CAAiBuF,GAAjB,CAAqB,qBAArB,IACAI,QADA,GAEAG,QAFA,GAGAM,WAHA,GAIAnG,MAAM,GAAGD,OAAT,CAAiBuF,GAAjB,CAAqB,GAArB,CALF;AAOD;;AAxLkD;;AA2LrDzF,OAAO,CAACE,OAAR,GAAkB0B,eAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _base_reporter = _interopRequireDefault(require('./base_reporter'));\n\nvar _utils = require('./utils');\n\nvar _get_result_header = _interopRequireDefault(require('./get_result_header'));\n\nvar _get_snapshot_summary = _interopRequireDefault(\n  require('./get_snapshot_summary')\n);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nconst TEST_SUMMARY_THRESHOLD = 20;\nconst NPM_EVENTS = new Set([\n  'prepublish',\n  'publish',\n  'postpublish',\n  'preinstall',\n  'install',\n  'postinstall',\n  'preuninstall',\n  'uninstall',\n  'postuninstall',\n  'preversion',\n  'version',\n  'postversion',\n  'pretest',\n  'test',\n  'posttest',\n  'prestop',\n  'stop',\n  'poststop',\n  'prestart',\n  'start',\n  'poststart',\n  'prerestart',\n  'restart',\n  'postrestart'\n]);\nconst _process$env = process.env,\n  npm_config_user_agent = _process$env.npm_config_user_agent,\n  npm_lifecycle_event = _process$env.npm_lifecycle_event,\n  npm_lifecycle_script = _process$env.npm_lifecycle_script;\n\nclass SummaryReporter extends _base_reporter.default {\n  constructor(globalConfig) {\n    super();\n\n    _defineProperty(this, '_estimatedTime', void 0);\n\n    _defineProperty(this, '_globalConfig', void 0);\n\n    this._globalConfig = globalConfig;\n    this._estimatedTime = 0;\n  } // If we write more than one character at a time it is possible that\n  // Node.js exits in the middle of printing the result. This was first observed\n  // in Node.js 0.10 and still persists in Node.js 6.7+.\n  // Let's print the test failure summary character by character which is safer\n  // when hundreds of tests are failing.\n\n  _write(string) {\n    for (let i = 0; i < string.length; i++) {\n      process.stderr.write(string.charAt(i));\n    }\n  }\n\n  onRunStart(aggregatedResults, options) {\n    super.onRunStart(aggregatedResults, options);\n    this._estimatedTime = options.estimatedTime;\n  }\n\n  onRunComplete(contexts, aggregatedResults) {\n    const numTotalTestSuites = aggregatedResults.numTotalTestSuites,\n      testResults = aggregatedResults.testResults,\n      wasInterrupted = aggregatedResults.wasInterrupted;\n\n    if (numTotalTestSuites) {\n      const lastResult = testResults[testResults.length - 1]; // Print a newline if the last test did not fail to line up newlines\n      // similar to when an error would have been thrown in the test.\n\n      if (\n        !this._globalConfig.verbose &&\n        lastResult &&\n        !lastResult.numFailingTests &&\n        !lastResult.testExecError\n      ) {\n        this.log('');\n      }\n\n      this._printSummary(aggregatedResults, this._globalConfig);\n\n      this._printSnapshotSummary(\n        aggregatedResults.snapshot,\n        this._globalConfig\n      );\n\n      if (numTotalTestSuites) {\n        let message = (0, _utils.getSummary)(aggregatedResults, {\n          estimatedTime: this._estimatedTime\n        });\n\n        if (!this._globalConfig.silent) {\n          message +=\n            '\\n' +\n            (wasInterrupted\n              ? _chalk().default.bold.red('Test run was interrupted.')\n              : this._getTestSummary(contexts, this._globalConfig));\n        }\n\n        this.log(message);\n      }\n    }\n  }\n\n  _printSnapshotSummary(snapshots, globalConfig) {\n    if (\n      snapshots.added ||\n      snapshots.filesRemoved ||\n      snapshots.unchecked ||\n      snapshots.unmatched ||\n      snapshots.updated\n    ) {\n      let updateCommand;\n      const event = npm_lifecycle_event || '';\n      const prefix = NPM_EVENTS.has(event) ? '' : 'run ';\n      const isYarn =\n        typeof npm_config_user_agent === 'string' &&\n        npm_config_user_agent.includes('yarn');\n      const client = isYarn ? 'yarn' : 'npm';\n      const scriptUsesJest =\n        typeof npm_lifecycle_script === 'string' &&\n        npm_lifecycle_script.includes('jest');\n\n      if (globalConfig.watch || globalConfig.watchAll) {\n        updateCommand = 'press `u`';\n      } else if (event && scriptUsesJest) {\n        updateCommand = `run \\`${client +\n          ' ' +\n          prefix +\n          event +\n          (isYarn ? '' : ' --')} -u\\``;\n      } else {\n        updateCommand = 're-run jest with `-u`';\n      }\n\n      const snapshotSummary = (0, _get_snapshot_summary.default)(\n        snapshots,\n        globalConfig,\n        updateCommand\n      );\n      snapshotSummary.forEach(this.log);\n      this.log(''); // print empty line\n    }\n  }\n\n  _printSummary(aggregatedResults, globalConfig) {\n    // If there were any failing tests and there was a large number of tests\n    // executed, re-print the failing results at the end of execution output.\n    const failedTests = aggregatedResults.numFailedTests;\n    const runtimeErrors = aggregatedResults.numRuntimeErrorTestSuites;\n\n    if (\n      failedTests + runtimeErrors > 0 &&\n      aggregatedResults.numTotalTestSuites > TEST_SUMMARY_THRESHOLD\n    ) {\n      this.log(_chalk().default.bold('Summary of all failing tests'));\n      aggregatedResults.testResults.forEach(testResult => {\n        const failureMessage = testResult.failureMessage;\n\n        if (failureMessage) {\n          this._write(\n            (0, _get_result_header.default)(testResult, globalConfig) +\n              '\\n' +\n              failureMessage +\n              '\\n'\n          );\n        }\n      });\n      this.log(''); // print empty line\n    }\n  }\n\n  _getTestSummary(contexts, globalConfig) {\n    const getMatchingTestsInfo = () => {\n      const prefix = globalConfig.findRelatedTests\n        ? ' related to files matching '\n        : ' matching ';\n      return (\n        _chalk().default.dim(prefix) +\n        (0, _jestUtil().testPathPatternToRegExp)(\n          globalConfig.testPathPattern\n        ).toString()\n      );\n    };\n\n    let testInfo = '';\n\n    if (globalConfig.runTestsByPath) {\n      testInfo = _chalk().default.dim(' within paths');\n    } else if (globalConfig.onlyChanged) {\n      testInfo = _chalk().default.dim(' related to changed files');\n    } else if (globalConfig.testPathPattern) {\n      testInfo = getMatchingTestsInfo();\n    }\n\n    let nameInfo = '';\n\n    if (globalConfig.runTestsByPath) {\n      nameInfo = ' ' + globalConfig.nonFlagArgs.map(p => `\"${p}\"`).join(', ');\n    } else if (globalConfig.testNamePattern) {\n      nameInfo =\n        _chalk().default.dim(' with tests matching ') +\n        `\"${globalConfig.testNamePattern}\"`;\n    }\n\n    const contextInfo =\n      contexts.size > 1\n        ? _chalk().default.dim(' in ') +\n          contexts.size +\n          _chalk().default.dim(' projects')\n        : '';\n    return (\n      _chalk().default.dim('Ran all test suites') +\n      testInfo +\n      nameInfo +\n      contextInfo +\n      _chalk().default.dim('.')\n    );\n  }\n}\n\nexports.default = SummaryReporter;\n"]},"metadata":{},"sourceType":"script"}