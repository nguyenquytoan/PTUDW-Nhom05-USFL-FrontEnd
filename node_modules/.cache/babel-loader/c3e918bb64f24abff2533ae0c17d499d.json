{"ast":null,"code":"/**\n * @fileoverview Rule to enforce spacing around embedded expressions of template strings\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst OPEN_PAREN = /\\$\\{$/u;\nconst CLOSE_PAREN = /^\\}/u; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require or disallow spacing around embedded expressions of template strings\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/template-curly-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }],\n    messages: {\n      expectedBefore: \"Expected space(s) before '}'.\",\n      expectedAfter: \"Expected space(s) after '${'.\",\n      unexpectedBefore: \"Unexpected space(s) before '}'.\",\n      unexpectedAfter: \"Unexpected space(s) after '${'.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const always = context.options[0] === \"always\";\n    const prefix = always ? \"expected\" : \"unexpected\";\n    /**\n     * Checks spacing before `}` of a given token.\n     * @param {Token} token A token to check. This is a Template token.\n     * @returns {void}\n     */\n\n    function checkSpacingBefore(token) {\n      const prevToken = sourceCode.getTokenBefore(token);\n\n      if (prevToken && CLOSE_PAREN.test(token.value) && astUtils.isTokenOnSameLine(prevToken, token) && sourceCode.isSpaceBetweenTokens(prevToken, token) !== always) {\n        context.report({\n          loc: token.loc.start,\n          messageId: `${prefix}Before`,\n\n          fix(fixer) {\n            if (always) {\n              return fixer.insertTextBefore(token, \" \");\n            }\n\n            return fixer.removeRange([prevToken.range[1], token.range[0]]);\n          }\n\n        });\n      }\n    }\n    /**\n     * Checks spacing after `${` of a given token.\n     * @param {Token} token A token to check. This is a Template token.\n     * @returns {void}\n     */\n\n\n    function checkSpacingAfter(token) {\n      const nextToken = sourceCode.getTokenAfter(token);\n\n      if (nextToken && OPEN_PAREN.test(token.value) && astUtils.isTokenOnSameLine(token, nextToken) && sourceCode.isSpaceBetweenTokens(token, nextToken) !== always) {\n        context.report({\n          loc: {\n            line: token.loc.end.line,\n            column: token.loc.end.column - 2\n          },\n          messageId: `${prefix}After`,\n\n          fix(fixer) {\n            if (always) {\n              return fixer.insertTextAfter(token, \" \");\n            }\n\n            return fixer.removeRange([token.range[1], nextToken.range[0]]);\n          }\n\n        });\n      }\n    }\n\n    return {\n      TemplateElement(node) {\n        const token = sourceCode.getFirstToken(node);\n        checkSpacingBefore(token);\n        checkSpacingAfter(token);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/template-curly-spacing.js"],"names":["astUtils","require","OPEN_PAREN","CLOSE_PAREN","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","messages","expectedBefore","expectedAfter","unexpectedBefore","unexpectedAfter","create","context","sourceCode","getSourceCode","always","options","prefix","checkSpacingBefore","token","prevToken","getTokenBefore","test","value","isTokenOnSameLine","isSpaceBetweenTokens","report","loc","start","messageId","fix","fixer","insertTextBefore","removeRange","range","checkSpacingAfter","nextToken","getTokenAfter","line","end","column","insertTextAfter","TemplateElement","node","getFirstToken"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to enforce spacing around embedded expressions of template strings\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst OPEN_PAREN = /\\$\\{$/u;\nconst CLOSE_PAREN = /^\\}/u;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require or disallow spacing around embedded expressions of template strings\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/template-curly-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            { enum: [\"always\", \"never\"] }\n        ],\n        messages: {\n            expectedBefore: \"Expected space(s) before '}'.\",\n            expectedAfter: \"Expected space(s) after '${'.\",\n            unexpectedBefore: \"Unexpected space(s) before '}'.\",\n            unexpectedAfter: \"Unexpected space(s) after '${'.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        const always = context.options[0] === \"always\";\n        const prefix = always ? \"expected\" : \"unexpected\";\n\n        /**\n         * Checks spacing before `}` of a given token.\n         * @param {Token} token A token to check. This is a Template token.\n         * @returns {void}\n         */\n        function checkSpacingBefore(token) {\n            const prevToken = sourceCode.getTokenBefore(token);\n\n            if (prevToken &&\n                CLOSE_PAREN.test(token.value) &&\n                astUtils.isTokenOnSameLine(prevToken, token) &&\n                sourceCode.isSpaceBetweenTokens(prevToken, token) !== always\n            ) {\n                context.report({\n                    loc: token.loc.start,\n                    messageId: `${prefix}Before`,\n                    fix(fixer) {\n                        if (always) {\n                            return fixer.insertTextBefore(token, \" \");\n                        }\n                        return fixer.removeRange([\n                            prevToken.range[1],\n                            token.range[0]\n                        ]);\n                    }\n                });\n            }\n        }\n\n        /**\n         * Checks spacing after `${` of a given token.\n         * @param {Token} token A token to check. This is a Template token.\n         * @returns {void}\n         */\n        function checkSpacingAfter(token) {\n            const nextToken = sourceCode.getTokenAfter(token);\n\n            if (nextToken &&\n                OPEN_PAREN.test(token.value) &&\n                astUtils.isTokenOnSameLine(token, nextToken) &&\n                sourceCode.isSpaceBetweenTokens(token, nextToken) !== always\n            ) {\n                context.report({\n                    loc: {\n                        line: token.loc.end.line,\n                        column: token.loc.end.column - 2\n                    },\n                    messageId: `${prefix}After`,\n                    fix(fixer) {\n                        if (always) {\n                            return fixer.insertTextAfter(token, \" \");\n                        }\n                        return fixer.removeRange([\n                            token.range[1],\n                            nextToken.range[0]\n                        ]);\n                    }\n                });\n            }\n        }\n\n        return {\n            TemplateElement(node) {\n                const token = sourceCode.getFirstToken(node);\n\n                checkSpacingBefore(token);\n                checkSpacingAfter(token);\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}