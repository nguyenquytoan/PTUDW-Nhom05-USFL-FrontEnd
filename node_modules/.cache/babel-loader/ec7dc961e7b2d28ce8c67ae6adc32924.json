{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of console object\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow the use of `console`\",\n      category: \"Possible Errors\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-console\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allow: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          },\n          minItems: 1,\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpected: \"Unexpected console statement.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0] || {};\n    const allowed = options.allow || [];\n    /**\n     * Checks whether the given reference is 'console' or not.\n     * @param {eslint-scope.Reference} reference The reference to check.\n     * @returns {boolean} `true` if the reference is 'console'.\n     */\n\n    function isConsole(reference) {\n      const id = reference.identifier;\n      return id && id.name === \"console\";\n    }\n    /**\n     * Checks whether the property name of the given MemberExpression node\n     * is allowed by options or not.\n     * @param {ASTNode} node The MemberExpression node to check.\n     * @returns {boolean} `true` if the property name of the node is allowed.\n     */\n\n\n    function isAllowed(node) {\n      const propertyName = astUtils.getStaticPropertyName(node);\n      return propertyName && allowed.indexOf(propertyName) !== -1;\n    }\n    /**\n     * Checks whether the given reference is a member access which is not\n     * allowed by options or not.\n     * @param {eslint-scope.Reference} reference The reference to check.\n     * @returns {boolean} `true` if the reference is a member access which\n     *      is not allowed by options.\n     */\n\n\n    function isMemberAccessExceptAllowed(reference) {\n      const node = reference.identifier;\n      const parent = node.parent;\n      return parent.type === \"MemberExpression\" && parent.object === node && !isAllowed(parent);\n    }\n    /**\n     * Reports the given reference as a violation.\n     * @param {eslint-scope.Reference} reference The reference to report.\n     * @returns {void}\n     */\n\n\n    function report(reference) {\n      const node = reference.identifier.parent;\n      context.report({\n        node,\n        loc: node.loc,\n        messageId: \"unexpected\"\n      });\n    }\n\n    return {\n      \"Program:exit\"() {\n        const scope = context.getScope();\n        const consoleVar = astUtils.getVariableByName(scope, \"console\");\n        const shadowed = consoleVar && consoleVar.defs.length > 0;\n        /*\n         * 'scope.through' includes all references to undefined\n         * variables. If the variable 'console' is not defined, it uses\n         * 'scope.through'.\n         */\n\n        const references = consoleVar ? consoleVar.references : scope.through.filter(isConsole);\n\n        if (!shadowed) {\n          references.filter(isMemberAccessExceptAllowed).forEach(report);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-console.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","allow","items","minItems","uniqueItems","additionalProperties","messages","unexpected","create","context","options","allowed","isConsole","reference","id","identifier","name","isAllowed","node","propertyName","getStaticPropertyName","indexOf","isMemberAccessExceptAllowed","parent","object","report","loc","messageId","scope","getScope","consoleVar","getVariableByName","shadowed","defs","length","references","through","filter","forEach"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to flag use of console object\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow the use of `console`\",\n            category: \"Possible Errors\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-console\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allow: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        },\n                        minItems: 1,\n                        uniqueItems: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpected: \"Unexpected console statement.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {};\n        const allowed = options.allow || [];\n\n        /**\n         * Checks whether the given reference is 'console' or not.\n         * @param {eslint-scope.Reference} reference The reference to check.\n         * @returns {boolean} `true` if the reference is 'console'.\n         */\n        function isConsole(reference) {\n            const id = reference.identifier;\n\n            return id && id.name === \"console\";\n        }\n\n        /**\n         * Checks whether the property name of the given MemberExpression node\n         * is allowed by options or not.\n         * @param {ASTNode} node The MemberExpression node to check.\n         * @returns {boolean} `true` if the property name of the node is allowed.\n         */\n        function isAllowed(node) {\n            const propertyName = astUtils.getStaticPropertyName(node);\n\n            return propertyName && allowed.indexOf(propertyName) !== -1;\n        }\n\n        /**\n         * Checks whether the given reference is a member access which is not\n         * allowed by options or not.\n         * @param {eslint-scope.Reference} reference The reference to check.\n         * @returns {boolean} `true` if the reference is a member access which\n         *      is not allowed by options.\n         */\n        function isMemberAccessExceptAllowed(reference) {\n            const node = reference.identifier;\n            const parent = node.parent;\n\n            return (\n                parent.type === \"MemberExpression\" &&\n                parent.object === node &&\n                !isAllowed(parent)\n            );\n        }\n\n        /**\n         * Reports the given reference as a violation.\n         * @param {eslint-scope.Reference} reference The reference to report.\n         * @returns {void}\n         */\n        function report(reference) {\n            const node = reference.identifier.parent;\n\n            context.report({\n                node,\n                loc: node.loc,\n                messageId: \"unexpected\"\n            });\n        }\n\n        return {\n            \"Program:exit\"() {\n                const scope = context.getScope();\n                const consoleVar = astUtils.getVariableByName(scope, \"console\");\n                const shadowed = consoleVar && consoleVar.defs.length > 0;\n\n                /*\n                 * 'scope.through' includes all references to undefined\n                 * variables. If the variable 'console' is not defined, it uses\n                 * 'scope.through'.\n                 */\n                const references = consoleVar\n                    ? consoleVar.references\n                    : scope.through.filter(isConsole);\n\n                if (!shadowed) {\n                    references\n                        .filter(isMemberAccessExceptAllowed)\n                        .forEach(report);\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}