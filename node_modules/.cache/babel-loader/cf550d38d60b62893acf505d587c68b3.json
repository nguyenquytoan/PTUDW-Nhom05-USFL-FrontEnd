{"ast":null,"code":"/**\n * @fileoverview Rule to disallow a negated condition\n * @author Alberto Rodríguez\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow negated conditions\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-negated-condition\"\n    },\n    schema: []\n  },\n\n  create(context) {\n    /**\n     * Determines if a given node is an if-else without a condition on the else\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} True if the node has an else without an if.\n     * @private\n     */\n    function hasElseWithoutCondition(node) {\n      return node.alternate && node.alternate.type !== \"IfStatement\";\n    }\n    /**\n     * Determines if a given node is a negated unary expression\n     * @param {Object} test The test object to check.\n     * @returns {boolean} True if the node is a negated unary expression.\n     * @private\n     */\n\n\n    function isNegatedUnaryExpression(test) {\n      return test.type === \"UnaryExpression\" && test.operator === \"!\";\n    }\n    /**\n     * Determines if a given node is a negated binary expression\n     * @param {Test} test The test to check.\n     * @returns {boolean} True if the node is a negated binary expression.\n     * @private\n     */\n\n\n    function isNegatedBinaryExpression(test) {\n      return test.type === \"BinaryExpression\" && (test.operator === \"!=\" || test.operator === \"!==\");\n    }\n    /**\n     * Determines if a given node has a negated if expression\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} True if the node has a negated if expression.\n     * @private\n     */\n\n\n    function isNegatedIf(node) {\n      return isNegatedUnaryExpression(node.test) || isNegatedBinaryExpression(node.test);\n    }\n\n    return {\n      IfStatement(node) {\n        if (!hasElseWithoutCondition(node)) {\n          return;\n        }\n\n        if (isNegatedIf(node)) {\n          context.report({\n            node,\n            message: \"Unexpected negated condition.\"\n          });\n        }\n      },\n\n      ConditionalExpression(node) {\n        if (isNegatedIf(node)) {\n          context.report({\n            node,\n            message: \"Unexpected negated condition.\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-negated-condition.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","create","context","hasElseWithoutCondition","node","alternate","isNegatedUnaryExpression","test","operator","isNegatedBinaryExpression","isNegatedIf","IfStatement","report","message","ConditionalExpression"],"mappings":"AAAA;;;;AAIA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,6BADX;AAEFC,MAAAA,QAAQ,EAAE,kBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE;AAVN,GADO;;AAcbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;;;;;;AAMA,aAASC,uBAAT,CAAiCC,IAAjC,EAAuC;AACnC,aAAOA,IAAI,CAACC,SAAL,IAAkBD,IAAI,CAACC,SAAL,CAAeX,IAAf,KAAwB,aAAjD;AACH;AAED;;;;;;;;AAMA,aAASY,wBAAT,CAAkCC,IAAlC,EAAwC;AACpC,aAAOA,IAAI,CAACb,IAAL,KAAc,iBAAd,IAAmCa,IAAI,CAACC,QAAL,KAAkB,GAA5D;AACH;AAED;;;;;;;;AAMA,aAASC,yBAAT,CAAmCF,IAAnC,EAAyC;AACrC,aAAOA,IAAI,CAACb,IAAL,KAAc,kBAAd,KACFa,IAAI,CAACC,QAAL,KAAkB,IAAlB,IAA0BD,IAAI,CAACC,QAAL,KAAkB,KAD1C,CAAP;AAEH;AAED;;;;;;;;AAMA,aAASE,WAAT,CAAqBN,IAArB,EAA2B;AACvB,aAAOE,wBAAwB,CAACF,IAAI,CAACG,IAAN,CAAxB,IAAuCE,yBAAyB,CAACL,IAAI,CAACG,IAAN,CAAvE;AACH;;AAED,WAAO;AACHI,MAAAA,WAAW,CAACP,IAAD,EAAO;AACd,YAAI,CAACD,uBAAuB,CAACC,IAAD,CAA5B,EAAoC;AAChC;AACH;;AAED,YAAIM,WAAW,CAACN,IAAD,CAAf,EAAuB;AACnBF,UAAAA,OAAO,CAACU,MAAR,CAAe;AAAER,YAAAA,IAAF;AAAQS,YAAAA,OAAO,EAAE;AAAjB,WAAf;AACH;AACJ,OATE;;AAUHC,MAAAA,qBAAqB,CAACV,IAAD,EAAO;AACxB,YAAIM,WAAW,CAACN,IAAD,CAAf,EAAuB;AACnBF,UAAAA,OAAO,CAACU,MAAR,CAAe;AAAER,YAAAA,IAAF;AAAQS,YAAAA,OAAO,EAAE;AAAjB,WAAf;AACH;AACJ;;AAdE,KAAP;AAgBH;;AAzEY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to disallow a negated condition\n * @author Alberto Rodríguez\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow negated conditions\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-negated-condition\"\n        },\n\n        schema: []\n    },\n\n    create(context) {\n\n        /**\n         * Determines if a given node is an if-else without a condition on the else\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} True if the node has an else without an if.\n         * @private\n         */\n        function hasElseWithoutCondition(node) {\n            return node.alternate && node.alternate.type !== \"IfStatement\";\n        }\n\n        /**\n         * Determines if a given node is a negated unary expression\n         * @param {Object} test The test object to check.\n         * @returns {boolean} True if the node is a negated unary expression.\n         * @private\n         */\n        function isNegatedUnaryExpression(test) {\n            return test.type === \"UnaryExpression\" && test.operator === \"!\";\n        }\n\n        /**\n         * Determines if a given node is a negated binary expression\n         * @param {Test} test The test to check.\n         * @returns {boolean} True if the node is a negated binary expression.\n         * @private\n         */\n        function isNegatedBinaryExpression(test) {\n            return test.type === \"BinaryExpression\" &&\n                (test.operator === \"!=\" || test.operator === \"!==\");\n        }\n\n        /**\n         * Determines if a given node has a negated if expression\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} True if the node has a negated if expression.\n         * @private\n         */\n        function isNegatedIf(node) {\n            return isNegatedUnaryExpression(node.test) || isNegatedBinaryExpression(node.test);\n        }\n\n        return {\n            IfStatement(node) {\n                if (!hasElseWithoutCondition(node)) {\n                    return;\n                }\n\n                if (isNegatedIf(node)) {\n                    context.report({ node, message: \"Unexpected negated condition.\" });\n                }\n            },\n            ConditionalExpression(node) {\n                if (isNegatedIf(node)) {\n                    context.report({ node, message: \"Unexpected negated condition.\" });\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}