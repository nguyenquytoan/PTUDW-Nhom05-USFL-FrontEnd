{"ast":null,"code":"/**\n * @fileoverview A rule to suggest using of the spread operator instead of `.apply()`.\n * @author Toru Nagashima\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a node is a `.apply()` for variadic.\n * @param {ASTNode} node A CallExpression node to check.\n * @returns {boolean} Whether or not the node is a `.apply()` for variadic.\n */\n\n\nfunction isVariadicApplyCalling(node) {\n  return node.callee.type === \"MemberExpression\" && node.callee.property.type === \"Identifier\" && node.callee.property.name === \"apply\" && node.callee.computed === false && node.arguments.length === 2 && node.arguments[1].type !== \"ArrayExpression\" && node.arguments[1].type !== \"SpreadElement\";\n}\n/**\n * Checks whether or not `thisArg` is not changed by `.apply()`.\n * @param {ASTNode|null} expectedThis The node that is the owner of the applied function.\n * @param {ASTNode} thisArg The node that is given to the first argument of the `.apply()`.\n * @param {RuleContext} context The ESLint rule context object.\n * @returns {boolean} Whether or not `thisArg` is not changed by `.apply()`.\n */\n\n\nfunction isValidThisArg(expectedThis, thisArg, context) {\n  if (!expectedThis) {\n    return astUtils.isNullOrUndefined(thisArg);\n  }\n\n  return astUtils.equalTokens(expectedThis, thisArg, context);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require spread operators instead of `.apply()`\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/prefer-spread\"\n    },\n    schema: [],\n    fixable: null\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      CallExpression(node) {\n        if (!isVariadicApplyCalling(node)) {\n          return;\n        }\n\n        const applied = node.callee.object;\n        const expectedThis = applied.type === \"MemberExpression\" ? applied.object : null;\n        const thisArg = node.arguments[0];\n\n        if (isValidThisArg(expectedThis, thisArg, sourceCode)) {\n          context.report({\n            node,\n            message: \"Use the spread operator instead of '.apply()'.\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/prefer-spread.js"],"names":["astUtils","require","isVariadicApplyCalling","node","callee","type","property","name","computed","arguments","length","isValidThisArg","expectedThis","thisArg","context","isNullOrUndefined","equalTokens","module","exports","meta","docs","description","category","recommended","url","schema","fixable","create","sourceCode","getSourceCode","CallExpression","applied","object","report","message"],"mappings":"AAAA;;;;AAKA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;;;;;;;AAKA,SAASC,sBAAT,CAAgCC,IAAhC,EAAsC;AAClC,SACIA,IAAI,CAACC,MAAL,CAAYC,IAAZ,KAAqB,kBAArB,IACAF,IAAI,CAACC,MAAL,CAAYE,QAAZ,CAAqBD,IAArB,KAA8B,YAD9B,IAEAF,IAAI,CAACC,MAAL,CAAYE,QAAZ,CAAqBC,IAArB,KAA8B,OAF9B,IAGAJ,IAAI,CAACC,MAAL,CAAYI,QAAZ,KAAyB,KAHzB,IAIAL,IAAI,CAACM,SAAL,CAAeC,MAAf,KAA0B,CAJ1B,IAKAP,IAAI,CAACM,SAAL,CAAe,CAAf,EAAkBJ,IAAlB,KAA2B,iBAL3B,IAMAF,IAAI,CAACM,SAAL,CAAe,CAAf,EAAkBJ,IAAlB,KAA2B,eAP/B;AASH;AAGD;;;;;;;;;AAOA,SAASM,cAAT,CAAwBC,YAAxB,EAAsCC,OAAtC,EAA+CC,OAA/C,EAAwD;AACpD,MAAI,CAACF,YAAL,EAAmB;AACf,WAAOZ,QAAQ,CAACe,iBAAT,CAA2BF,OAA3B,CAAP;AACH;;AACD,SAAOb,QAAQ,CAACgB,WAAT,CAAqBJ,YAArB,EAAmCC,OAAnC,EAA4CC,OAA5C,CAAP;AACH,C,CAED;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFd,IAAAA,IAAI,EAAE,YADJ;AAGFe,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,gDADX;AAEFC,MAAAA,QAAQ,EAAE,cAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,EAVN;AAWFC,IAAAA,OAAO,EAAE;AAXP,GADO;;AAebC,EAAAA,MAAM,CAACb,OAAD,EAAU;AACZ,UAAMc,UAAU,GAAGd,OAAO,CAACe,aAAR,EAAnB;AAEA,WAAO;AACHC,MAAAA,cAAc,CAAC3B,IAAD,EAAO;AACjB,YAAI,CAACD,sBAAsB,CAACC,IAAD,CAA3B,EAAmC;AAC/B;AACH;;AAED,cAAM4B,OAAO,GAAG5B,IAAI,CAACC,MAAL,CAAY4B,MAA5B;AACA,cAAMpB,YAAY,GAAImB,OAAO,CAAC1B,IAAR,KAAiB,kBAAlB,GAAwC0B,OAAO,CAACC,MAAhD,GAAyD,IAA9E;AACA,cAAMnB,OAAO,GAAGV,IAAI,CAACM,SAAL,CAAe,CAAf,CAAhB;;AAEA,YAAIE,cAAc,CAACC,YAAD,EAAeC,OAAf,EAAwBe,UAAxB,CAAlB,EAAuD;AACnDd,UAAAA,OAAO,CAACmB,MAAR,CAAe;AACX9B,YAAAA,IADW;AAEX+B,YAAAA,OAAO,EAAE;AAFE,WAAf;AAIH;AACJ;;AAhBE,KAAP;AAkBH;;AApCY,CAAjB","sourcesContent":["/**\n * @fileoverview A rule to suggest using of the spread operator instead of `.apply()`.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a node is a `.apply()` for variadic.\n * @param {ASTNode} node A CallExpression node to check.\n * @returns {boolean} Whether or not the node is a `.apply()` for variadic.\n */\nfunction isVariadicApplyCalling(node) {\n    return (\n        node.callee.type === \"MemberExpression\" &&\n        node.callee.property.type === \"Identifier\" &&\n        node.callee.property.name === \"apply\" &&\n        node.callee.computed === false &&\n        node.arguments.length === 2 &&\n        node.arguments[1].type !== \"ArrayExpression\" &&\n        node.arguments[1].type !== \"SpreadElement\"\n    );\n}\n\n\n/**\n * Checks whether or not `thisArg` is not changed by `.apply()`.\n * @param {ASTNode|null} expectedThis The node that is the owner of the applied function.\n * @param {ASTNode} thisArg The node that is given to the first argument of the `.apply()`.\n * @param {RuleContext} context The ESLint rule context object.\n * @returns {boolean} Whether or not `thisArg` is not changed by `.apply()`.\n */\nfunction isValidThisArg(expectedThis, thisArg, context) {\n    if (!expectedThis) {\n        return astUtils.isNullOrUndefined(thisArg);\n    }\n    return astUtils.equalTokens(expectedThis, thisArg, context);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require spread operators instead of `.apply()`\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/prefer-spread\"\n        },\n\n        schema: [],\n        fixable: null\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        return {\n            CallExpression(node) {\n                if (!isVariadicApplyCalling(node)) {\n                    return;\n                }\n\n                const applied = node.callee.object;\n                const expectedThis = (applied.type === \"MemberExpression\") ? applied.object : null;\n                const thisArg = node.arguments[0];\n\n                if (isValidThisArg(expectedThis, thisArg, sourceCode)) {\n                    context.report({\n                        node,\n                        message: \"Use the spread operator instead of '.apply()'.\"\n                    });\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}