{"ast":null,"code":"'use strict';\n\nconst readdirSync = require('./sync');\n\nconst readdirAsync = require('./async');\n\nconst readdirStream = require('./stream');\n\nmodule.exports = exports = readdirAsyncPath;\nexports.readdir = exports.readdirAsync = exports.async = readdirAsyncPath;\nexports.readdirAsyncStat = exports.async.stat = readdirAsyncStat;\nexports.readdirStream = exports.stream = readdirStreamPath;\nexports.readdirStreamStat = exports.stream.stat = readdirStreamStat;\nexports.readdirSync = exports.sync = readdirSyncPath;\nexports.readdirSyncStat = exports.sync.stat = readdirSyncStat;\n/**\n * Synchronous readdir that returns an array of string paths.\n *\n * @param {string} dir\n * @param {object} [options]\n * @returns {string[]}\n */\n\nfunction readdirSyncPath(dir, options) {\n  return readdirSync(dir, options, {});\n}\n/**\n * Synchronous readdir that returns results as an array of {@link fs.Stats} objects\n *\n * @param {string} dir\n * @param {object} [options]\n * @returns {fs.Stats[]}\n */\n\n\nfunction readdirSyncStat(dir, options) {\n  return readdirSync(dir, options, {\n    stats: true\n  });\n}\n/**\n * Aynchronous readdir (accepts an error-first callback or returns a {@link Promise}).\n * Results are an array of path strings.\n *\n * @param {string} dir\n * @param {object} [options]\n * @param {function} [callback]\n * @returns {Promise<string[]>}\n */\n\n\nfunction readdirAsyncPath(dir, options, callback) {\n  return readdirAsync(dir, options, callback, {});\n}\n/**\n * Aynchronous readdir (accepts an error-first callback or returns a {@link Promise}).\n * Results are an array of {@link fs.Stats} objects.\n *\n * @param {string} dir\n * @param {object} [options]\n * @param {function} [callback]\n * @returns {Promise<fs.Stats[]>}\n */\n\n\nfunction readdirAsyncStat(dir, options, callback) {\n  return readdirAsync(dir, options, callback, {\n    stats: true\n  });\n}\n/**\n * Aynchronous readdir that returns a {@link stream.Readable} (which is also an {@link EventEmitter}).\n * All stream data events (\"data\", \"file\", \"directory\", \"symlink\") are passed a path string.\n *\n * @param {string} dir\n * @param {object} [options]\n * @returns {stream.Readable}\n */\n\n\nfunction readdirStreamPath(dir, options) {\n  return readdirStream(dir, options, {});\n}\n/**\n * Aynchronous readdir that returns a {@link stream.Readable} (which is also an {@link EventEmitter})\n * All stream data events (\"data\", \"file\", \"directory\", \"symlink\") are passed an {@link fs.Stats} object.\n *\n * @param {string} dir\n * @param {object} [options]\n * @returns {stream.Readable}\n */\n\n\nfunction readdirStreamStat(dir, options) {\n  return readdirStream(dir, options, {\n    stats: true\n  });\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/@mrmlnc/readdir-enhanced/lib/index.js"],"names":["readdirSync","require","readdirAsync","readdirStream","module","exports","readdirAsyncPath","readdir","async","readdirAsyncStat","stat","stream","readdirStreamPath","readdirStreamStat","sync","readdirSyncPath","readdirSyncStat","dir","options","stats","callback"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,QAAD,CAA3B;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,SAAD,CAA5B;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,UAAD,CAA7B;;AAEAG,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGC,gBAA3B;AACAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACH,YAAR,GAAuBG,OAAO,CAACG,KAAR,GAAgBF,gBAAzD;AACAD,OAAO,CAACI,gBAAR,GAA2BJ,OAAO,CAACG,KAAR,CAAcE,IAAd,GAAqBD,gBAAhD;AACAJ,OAAO,CAACF,aAAR,GAAwBE,OAAO,CAACM,MAAR,GAAiBC,iBAAzC;AACAP,OAAO,CAACQ,iBAAR,GAA4BR,OAAO,CAACM,MAAR,CAAeD,IAAf,GAAsBG,iBAAlD;AACAR,OAAO,CAACL,WAAR,GAAsBK,OAAO,CAACS,IAAR,GAAeC,eAArC;AACAV,OAAO,CAACW,eAAR,GAA0BX,OAAO,CAACS,IAAR,CAAaJ,IAAb,GAAoBM,eAA9C;AAEA;;;;;;;;AAOA,SAASD,eAAT,CAA0BE,GAA1B,EAA+BC,OAA/B,EAAwC;AACtC,SAAOlB,WAAW,CAACiB,GAAD,EAAMC,OAAN,EAAe,EAAf,CAAlB;AACD;AAED;;;;;;;;;AAOA,SAASF,eAAT,CAA0BC,GAA1B,EAA+BC,OAA/B,EAAwC;AACtC,SAAOlB,WAAW,CAACiB,GAAD,EAAMC,OAAN,EAAe;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAf,CAAlB;AACD;AAED;;;;;;;;;;;AASA,SAASb,gBAAT,CAA2BW,GAA3B,EAAgCC,OAAhC,EAAyCE,QAAzC,EAAmD;AACjD,SAAOlB,YAAY,CAACe,GAAD,EAAMC,OAAN,EAAeE,QAAf,EAAyB,EAAzB,CAAnB;AACD;AAED;;;;;;;;;;;AASA,SAASX,gBAAT,CAA2BQ,GAA3B,EAAgCC,OAAhC,EAAyCE,QAAzC,EAAmD;AACjD,SAAOlB,YAAY,CAACe,GAAD,EAAMC,OAAN,EAAeE,QAAf,EAAyB;AAAED,IAAAA,KAAK,EAAE;AAAT,GAAzB,CAAnB;AACD;AAED;;;;;;;;;;AAQA,SAASP,iBAAT,CAA4BK,GAA5B,EAAiCC,OAAjC,EAA0C;AACxC,SAAOf,aAAa,CAACc,GAAD,EAAMC,OAAN,EAAe,EAAf,CAApB;AACD;AAED;;;;;;;;;;AAQA,SAASL,iBAAT,CAA4BI,GAA5B,EAAiCC,OAAjC,EAA0C;AACxC,SAAOf,aAAa,CAACc,GAAD,EAAMC,OAAN,EAAe;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAf,CAApB;AACD","sourcesContent":["'use strict';\n\nconst readdirSync = require('./sync');\nconst readdirAsync = require('./async');\nconst readdirStream = require('./stream');\n\nmodule.exports = exports = readdirAsyncPath;\nexports.readdir = exports.readdirAsync = exports.async = readdirAsyncPath;\nexports.readdirAsyncStat = exports.async.stat = readdirAsyncStat;\nexports.readdirStream = exports.stream = readdirStreamPath;\nexports.readdirStreamStat = exports.stream.stat = readdirStreamStat;\nexports.readdirSync = exports.sync = readdirSyncPath;\nexports.readdirSyncStat = exports.sync.stat = readdirSyncStat;\n\n/**\n * Synchronous readdir that returns an array of string paths.\n *\n * @param {string} dir\n * @param {object} [options]\n * @returns {string[]}\n */\nfunction readdirSyncPath (dir, options) {\n  return readdirSync(dir, options, {});\n}\n\n/**\n * Synchronous readdir that returns results as an array of {@link fs.Stats} objects\n *\n * @param {string} dir\n * @param {object} [options]\n * @returns {fs.Stats[]}\n */\nfunction readdirSyncStat (dir, options) {\n  return readdirSync(dir, options, { stats: true });\n}\n\n/**\n * Aynchronous readdir (accepts an error-first callback or returns a {@link Promise}).\n * Results are an array of path strings.\n *\n * @param {string} dir\n * @param {object} [options]\n * @param {function} [callback]\n * @returns {Promise<string[]>}\n */\nfunction readdirAsyncPath (dir, options, callback) {\n  return readdirAsync(dir, options, callback, {});\n}\n\n/**\n * Aynchronous readdir (accepts an error-first callback or returns a {@link Promise}).\n * Results are an array of {@link fs.Stats} objects.\n *\n * @param {string} dir\n * @param {object} [options]\n * @param {function} [callback]\n * @returns {Promise<fs.Stats[]>}\n */\nfunction readdirAsyncStat (dir, options, callback) {\n  return readdirAsync(dir, options, callback, { stats: true });\n}\n\n/**\n * Aynchronous readdir that returns a {@link stream.Readable} (which is also an {@link EventEmitter}).\n * All stream data events (\"data\", \"file\", \"directory\", \"symlink\") are passed a path string.\n *\n * @param {string} dir\n * @param {object} [options]\n * @returns {stream.Readable}\n */\nfunction readdirStreamPath (dir, options) {\n  return readdirStream(dir, options, {});\n}\n\n/**\n * Aynchronous readdir that returns a {@link stream.Readable} (which is also an {@link EventEmitter})\n * All stream data events (\"data\", \"file\", \"directory\", \"symlink\") are passed an {@link fs.Stats} object.\n *\n * @param {string} dir\n * @param {object} [options]\n * @returns {stream.Readable}\n */\nfunction readdirStreamStat (dir, options) {\n  return readdirStream(dir, options, { stats: true });\n}\n"]},"metadata":{},"sourceType":"script"}