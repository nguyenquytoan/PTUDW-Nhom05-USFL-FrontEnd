{"ast":null,"code":"/**\n * @fileoverview Rule to enforce the use of `u` flag on RegExp.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n  CALL,\n  CONSTRUCT,\n  ReferenceTracker,\n  getStringIfConstant\n} = require(\"eslint-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce the use of `u` flag on RegExp\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/require-unicode-regexp\"\n    },\n    messages: {\n      requireUFlag: \"Use the 'u' flag.\"\n    },\n    schema: []\n  },\n\n  create(context) {\n    return {\n      \"Literal[regex]\"(node) {\n        const flags = node.regex.flags || \"\";\n\n        if (!flags.includes(\"u\")) {\n          context.report({\n            node,\n            messageId: \"requireUFlag\"\n          });\n        }\n      },\n\n      Program() {\n        const scope = context.getScope();\n        const tracker = new ReferenceTracker(scope);\n        const trackMap = {\n          RegExp: {\n            [CALL]: true,\n            [CONSTRUCT]: true\n          }\n        };\n\n        for (const {\n          node\n        } of tracker.iterateGlobalReferences(trackMap)) {\n          const flagsNode = node.arguments[1];\n          const flags = getStringIfConstant(flagsNode, scope);\n\n          if (!flagsNode || typeof flags === \"string\" && !flags.includes(\"u\")) {\n            context.report({\n              node,\n              messageId: \"requireUFlag\"\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/require-unicode-regexp.js"],"names":["CALL","CONSTRUCT","ReferenceTracker","getStringIfConstant","require","module","exports","meta","type","docs","description","category","recommended","url","messages","requireUFlag","schema","create","context","node","flags","regex","includes","report","messageId","Program","scope","getScope","tracker","trackMap","RegExp","iterateGlobalReferences","flagsNode","arguments"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEA,MAAM;AACFA,EAAAA,IADE;AAEFC,EAAAA,SAFE;AAGFC,EAAAA,gBAHE;AAIFC,EAAAA;AAJE,IAKFC,OAAO,CAAC,cAAD,CALX,C,CAOA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,uCADX;AAEFC,MAAAA,QAAQ,EAAE,gBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,YAAY,EAAE;AADR,KAVR;AAcFC,IAAAA,MAAM,EAAE;AAdN,GADO;;AAkBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,WAAO;AACH,uBAAiBC,IAAjB,EAAuB;AACnB,cAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAWD,KAAX,IAAoB,EAAlC;;AAEA,YAAI,CAACA,KAAK,CAACE,QAAN,CAAe,GAAf,CAAL,EAA0B;AACtBJ,UAAAA,OAAO,CAACK,MAAR,CAAe;AAAEJ,YAAAA,IAAF;AAAQK,YAAAA,SAAS,EAAE;AAAnB,WAAf;AACH;AACJ,OAPE;;AASHC,MAAAA,OAAO,GAAG;AACN,cAAMC,KAAK,GAAGR,OAAO,CAACS,QAAR,EAAd;AACA,cAAMC,OAAO,GAAG,IAAI1B,gBAAJ,CAAqBwB,KAArB,CAAhB;AACA,cAAMG,QAAQ,GAAG;AACbC,UAAAA,MAAM,EAAE;AAAE,aAAC9B,IAAD,GAAQ,IAAV;AAAgB,aAACC,SAAD,GAAa;AAA7B;AADK,SAAjB;;AAIA,aAAK,MAAM;AAAEkB,UAAAA;AAAF,SAAX,IAAuBS,OAAO,CAACG,uBAAR,CAAgCF,QAAhC,CAAvB,EAAkE;AAC9D,gBAAMG,SAAS,GAAGb,IAAI,CAACc,SAAL,CAAe,CAAf,CAAlB;AACA,gBAAMb,KAAK,GAAGjB,mBAAmB,CAAC6B,SAAD,EAAYN,KAAZ,CAAjC;;AAEA,cAAI,CAACM,SAAD,IAAe,OAAOZ,KAAP,KAAiB,QAAjB,IAA6B,CAACA,KAAK,CAACE,QAAN,CAAe,GAAf,CAAjD,EAAuE;AACnEJ,YAAAA,OAAO,CAACK,MAAR,CAAe;AAAEJ,cAAAA,IAAF;AAAQK,cAAAA,SAAS,EAAE;AAAnB,aAAf;AACH;AACJ;AACJ;;AAxBE,KAAP;AA0BH;;AA7CY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to enforce the use of `u` flag on RegExp.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n    CALL,\n    CONSTRUCT,\n    ReferenceTracker,\n    getStringIfConstant\n} = require(\"eslint-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce the use of `u` flag on RegExp\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/require-unicode-regexp\"\n        },\n\n        messages: {\n            requireUFlag: \"Use the 'u' flag.\"\n        },\n\n        schema: []\n    },\n\n    create(context) {\n        return {\n            \"Literal[regex]\"(node) {\n                const flags = node.regex.flags || \"\";\n\n                if (!flags.includes(\"u\")) {\n                    context.report({ node, messageId: \"requireUFlag\" });\n                }\n            },\n\n            Program() {\n                const scope = context.getScope();\n                const tracker = new ReferenceTracker(scope);\n                const trackMap = {\n                    RegExp: { [CALL]: true, [CONSTRUCT]: true }\n                };\n\n                for (const { node } of tracker.iterateGlobalReferences(trackMap)) {\n                    const flagsNode = node.arguments[1];\n                    const flags = getStringIfConstant(flagsNode, scope);\n\n                    if (!flagsNode || (typeof flags === \"string\" && !flags.includes(\"u\"))) {\n                        context.report({ node, messageId: \"requireUFlag\" });\n                    }\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}