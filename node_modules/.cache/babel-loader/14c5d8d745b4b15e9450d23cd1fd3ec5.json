{"ast":null,"code":"var resolveKeyword = require('css-tree').keyword;\n\nvar {\n  hasNoChildren\n} = require('./utils');\n\nmodule.exports = function cleanAtrule(node, item, list) {\n  if (node.block) {\n    // otherwise removed at-rule don't prevent @import for removal\n    if (this.stylesheet !== null) {\n      this.stylesheet.firstAtrulesAllowed = false;\n    }\n\n    if (hasNoChildren(node.block)) {\n      list.remove(item);\n      return;\n    }\n  }\n\n  switch (node.name) {\n    case 'charset':\n      if (hasNoChildren(node.prelude)) {\n        list.remove(item);\n        return;\n      } // if there is any rule before @charset -> remove it\n\n\n      if (item.prev) {\n        list.remove(item);\n        return;\n      }\n\n      break;\n\n    case 'import':\n      if (this.stylesheet === null || !this.stylesheet.firstAtrulesAllowed) {\n        list.remove(item);\n        return;\n      } // if there are some rules that not an @import or @charset before @import\n      // remove it\n\n\n      list.prevUntil(item.prev, function (rule) {\n        if (rule.type === 'Atrule') {\n          if (rule.name === 'import' || rule.name === 'charset') {\n            return;\n          }\n        }\n\n        this.root.firstAtrulesAllowed = false;\n        list.remove(item);\n        return true;\n      }, this);\n      break;\n\n    default:\n      var name = resolveKeyword(node.name).basename;\n\n      if (name === 'keyframes' || name === 'media' || name === 'supports') {\n        // drop at-rule with no prelude\n        if (hasNoChildren(node.prelude) || hasNoChildren(node.block)) {\n          list.remove(item);\n        }\n      }\n\n  }\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/csso/lib/clean/Atrule.js"],"names":["resolveKeyword","require","keyword","hasNoChildren","module","exports","cleanAtrule","node","item","list","block","stylesheet","firstAtrulesAllowed","remove","name","prelude","prev","prevUntil","rule","type","root","basename"],"mappings":"AAAA,IAAIA,cAAc,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoBC,OAAzC;;AACA,IAAI;AAAEC,EAAAA;AAAF,IAAoBF,OAAO,CAAC,SAAD,CAA/B;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,IAAjC,EAAuC;AACpD,MAAIF,IAAI,CAACG,KAAT,EAAgB;AACZ;AACA,QAAI,KAAKC,UAAL,KAAoB,IAAxB,EAA8B;AAC1B,WAAKA,UAAL,CAAgBC,mBAAhB,GAAsC,KAAtC;AACH;;AAED,QAAIT,aAAa,CAACI,IAAI,CAACG,KAAN,CAAjB,EAA+B;AAC3BD,MAAAA,IAAI,CAACI,MAAL,CAAYL,IAAZ;AACA;AACH;AACJ;;AAED,UAAQD,IAAI,CAACO,IAAb;AACI,SAAK,SAAL;AACI,UAAIX,aAAa,CAACI,IAAI,CAACQ,OAAN,CAAjB,EAAiC;AAC7BN,QAAAA,IAAI,CAACI,MAAL,CAAYL,IAAZ;AACA;AACH,OAJL,CAMI;;;AACA,UAAIA,IAAI,CAACQ,IAAT,EAAe;AACXP,QAAAA,IAAI,CAACI,MAAL,CAAYL,IAAZ;AACA;AACH;;AAED;;AAEJ,SAAK,QAAL;AACI,UAAI,KAAKG,UAAL,KAAoB,IAApB,IAA4B,CAAC,KAAKA,UAAL,CAAgBC,mBAAjD,EAAsE;AAClEH,QAAAA,IAAI,CAACI,MAAL,CAAYL,IAAZ;AACA;AACH,OAJL,CAMI;AACA;;;AACAC,MAAAA,IAAI,CAACQ,SAAL,CAAeT,IAAI,CAACQ,IAApB,EAA0B,UAASE,IAAT,EAAe;AACrC,YAAIA,IAAI,CAACC,IAAL,KAAc,QAAlB,EAA4B;AACxB,cAAID,IAAI,CAACJ,IAAL,KAAc,QAAd,IAA0BI,IAAI,CAACJ,IAAL,KAAc,SAA5C,EAAuD;AACnD;AACH;AACJ;;AAED,aAAKM,IAAL,CAAUR,mBAAV,GAAgC,KAAhC;AACAH,QAAAA,IAAI,CAACI,MAAL,CAAYL,IAAZ;AACA,eAAO,IAAP;AACH,OAVD,EAUG,IAVH;AAYA;;AAEJ;AACI,UAAIM,IAAI,GAAGd,cAAc,CAACO,IAAI,CAACO,IAAN,CAAd,CAA0BO,QAArC;;AACA,UAAIP,IAAI,KAAK,WAAT,IACAA,IAAI,KAAK,OADT,IAEAA,IAAI,KAAK,UAFb,EAEyB;AAErB;AACA,YAAIX,aAAa,CAACI,IAAI,CAACQ,OAAN,CAAb,IAA+BZ,aAAa,CAACI,IAAI,CAACG,KAAN,CAAhD,EAA8D;AAC1DD,UAAAA,IAAI,CAACI,MAAL,CAAYL,IAAZ;AACH;AACJ;;AA/CT;AAiDH,CA9DD","sourcesContent":["var resolveKeyword = require('css-tree').keyword;\nvar { hasNoChildren } = require('./utils');\n\nmodule.exports = function cleanAtrule(node, item, list) {\n    if (node.block) {\n        // otherwise removed at-rule don't prevent @import for removal\n        if (this.stylesheet !== null) {\n            this.stylesheet.firstAtrulesAllowed = false;\n        }\n\n        if (hasNoChildren(node.block)) {\n            list.remove(item);\n            return;\n        }\n    }\n\n    switch (node.name) {\n        case 'charset':\n            if (hasNoChildren(node.prelude)) {\n                list.remove(item);\n                return;\n            }\n\n            // if there is any rule before @charset -> remove it\n            if (item.prev) {\n                list.remove(item);\n                return;\n            }\n\n            break;\n\n        case 'import':\n            if (this.stylesheet === null || !this.stylesheet.firstAtrulesAllowed) {\n                list.remove(item);\n                return;\n            }\n\n            // if there are some rules that not an @import or @charset before @import\n            // remove it\n            list.prevUntil(item.prev, function(rule) {\n                if (rule.type === 'Atrule') {\n                    if (rule.name === 'import' || rule.name === 'charset') {\n                        return;\n                    }\n                }\n\n                this.root.firstAtrulesAllowed = false;\n                list.remove(item);\n                return true;\n            }, this);\n\n            break;\n\n        default:\n            var name = resolveKeyword(node.name).basename;\n            if (name === 'keyframes' ||\n                name === 'media' ||\n                name === 'supports') {\n\n                // drop at-rule with no prelude\n                if (hasNoChildren(node.prelude) || hasNoChildren(node.block)) {\n                    list.remove(item);\n                }\n            }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}