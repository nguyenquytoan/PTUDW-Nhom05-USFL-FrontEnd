{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\n/**\n * Reducer function that converts a codec list to a hash.\n * @throws Error on bad codec\n * @param {{name:string, decode:function, encode:function, root:function}} candidate A possible codec\n * @returns True where an error is not thrown\n */\n\n\nfunction testCodec(candidate) {\n  assert(!!candidate && typeof candidate === 'object', 'Codec must be an object');\n  assert(typeof candidate.name === 'string' && /^[\\w-]+$/.test(candidate.name), 'Codec.name must be a kebab-case string');\n  assert(typeof candidate.decode === 'function' && candidate.decode.length === 1, 'Codec.decode must be a function that accepts a single source string');\n  assert(typeof candidate.encode === 'undefined' || typeof candidate.encode === 'function' && candidate.encode.length === 1, 'Codec.encode must be a function that accepts a single absolute path string, or else be omitted');\n  assert(typeof candidate.root === 'undefined' || typeof candidate.root === 'function' && candidate.root.length === 0, 'Codec.root must be a function that accepts no arguments, or else be omitted');\n  return true;\n}\n\nmodule.exports = testCodec;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/adjust-sourcemap-loader/lib/process/test-codec.js"],"names":["assert","require","testCodec","candidate","name","test","decode","length","encode","root","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;AAEA;;;;;;;;AAMA,SAASC,SAAT,CAAmBC,SAAnB,EAA8B;AAC5BH,EAAAA,MAAM,CACJ,CAAC,CAACG,SAAF,IAAgB,OAAOA,SAAP,KAAqB,QADjC,EAEJ,yBAFI,CAAN;AAIAH,EAAAA,MAAM,CACH,OAAOG,SAAS,CAACC,IAAjB,KAA0B,QAA3B,IAAwC,WAAWC,IAAX,CAAgBF,SAAS,CAACC,IAA1B,CADpC,EAEJ,wCAFI,CAAN;AAIAJ,EAAAA,MAAM,CACH,OAAOG,SAAS,CAACG,MAAjB,KAA4B,UAA7B,IAA6CH,SAAS,CAACG,MAAV,CAAiBC,MAAjB,KAA4B,CADrE,EAEJ,qEAFI,CAAN;AAIAP,EAAAA,MAAM,CACH,OAAOG,SAAS,CAACK,MAAjB,KAA4B,WAA7B,IACE,OAAOL,SAAS,CAACK,MAAjB,KAA4B,UAA7B,IAA6CL,SAAS,CAACK,MAAV,CAAiBD,MAAjB,KAA4B,CAFtE,EAGJ,gGAHI,CAAN;AAKAP,EAAAA,MAAM,CACH,OAAOG,SAAS,CAACM,IAAjB,KAA0B,WAA3B,IACC,OAAON,SAAS,CAACM,IAAjB,KAA0B,UAA3B,IAA2CN,SAAS,CAACM,IAAV,CAAeF,MAAf,KAA0B,CAFjE,EAGJ,6EAHI,CAAN;AAKA,SAAO,IAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiBT,SAAjB","sourcesContent":["'use strict';\n\nvar assert = require('assert');\n\n/**\n * Reducer function that converts a codec list to a hash.\n * @throws Error on bad codec\n * @param {{name:string, decode:function, encode:function, root:function}} candidate A possible codec\n * @returns True where an error is not thrown\n */\nfunction testCodec(candidate) {\n  assert(\n    !!candidate && (typeof candidate === 'object'),\n    'Codec must be an object'\n  );\n  assert(\n    (typeof candidate.name === 'string') && /^[\\w-]+$/.test(candidate.name),\n    'Codec.name must be a kebab-case string'\n  );\n  assert(\n    (typeof candidate.decode === 'function') && (candidate.decode.length === 1),\n    'Codec.decode must be a function that accepts a single source string'\n  );\n  assert(\n    (typeof candidate.encode === 'undefined') ||\n    ((typeof candidate.encode === 'function') && (candidate.encode.length === 1)),\n    'Codec.encode must be a function that accepts a single absolute path string, or else be omitted'\n  );\n  assert(\n    (typeof candidate.root === 'undefined') ||\n    (typeof candidate.root === 'function') && (candidate.root.length === 0),\n    'Codec.root must be a function that accepts no arguments, or else be omitted'\n  );\n  return true;\n}\n\nmodule.exports = testCodec;"]},"metadata":{},"sourceType":"script"}