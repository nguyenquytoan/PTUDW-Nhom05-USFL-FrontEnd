{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"chai\").assert,\n    ensureArrayLike = require(\"../../array-like/ensure\");\n\ndescribe(\"array-like/ensure\", function () {\n  it(\"Should return input value\", function () {\n    var value = [];\n    assert.equal(ensureArrayLike(value), value);\n  });\n  it(\"Should allow strings with allowString option\", function () {\n    var value = \"foo\";\n    assert.equal(ensureArrayLike(value, {\n      allowString: true\n    }), value);\n  });\n  it(\"Should crash on invalid value\", function () {\n    try {\n      ensureArrayLike(\"foo\");\n      throw new Error(\"Unexpected\");\n    } catch (error) {\n      assert.equal(error.name, \"TypeError\");\n      assert(error.message.includes(\"is not an array like value\"));\n    }\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type/test/array-like/ensure.js"],"names":["assert","require","ensureArrayLike","describe","it","value","equal","allowString","Error","error","name","message","includes"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAYC,OAAO,CAAC,MAAD,CAAP,CAAgBD,MAAtC;AAAA,IACIE,eAAe,GAAGD,OAAO,CAAC,yBAAD,CAD7B;;AAGAE,QAAQ,CAAC,mBAAD,EAAsB,YAAY;AACzCC,EAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAY;AAC3C,QAAIC,KAAK,GAAG,EAAZ;AACAL,IAAAA,MAAM,CAACM,KAAP,CAAaJ,eAAe,CAACG,KAAD,CAA5B,EAAqCA,KAArC;AACA,GAHC,CAAF;AAIAD,EAAAA,EAAE,CAAC,8CAAD,EAAiD,YAAY;AAC9D,QAAIC,KAAK,GAAG,KAAZ;AACAL,IAAAA,MAAM,CAACM,KAAP,CAAaJ,eAAe,CAACG,KAAD,EAAQ;AAAEE,MAAAA,WAAW,EAAE;AAAf,KAAR,CAA5B,EAA4DF,KAA5D;AACA,GAHC,CAAF;AAIAD,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAY;AAC/C,QAAI;AACHF,MAAAA,eAAe,CAAC,KAAD,CAAf;AACA,YAAM,IAAIM,KAAJ,CAAU,YAAV,CAAN;AACA,KAHD,CAGE,OAAOC,KAAP,EAAc;AACfT,MAAAA,MAAM,CAACM,KAAP,CAAaG,KAAK,CAACC,IAAnB,EAAyB,WAAzB;AACAV,MAAAA,MAAM,CAACS,KAAK,CAACE,OAAN,CAAcC,QAAd,CAAuB,4BAAvB,CAAD,CAAN;AACA;AACD,GARC,CAAF;AASA,CAlBO,CAAR","sourcesContent":["\"use strict\";\n\nvar assert          = require(\"chai\").assert\n  , ensureArrayLike = require(\"../../array-like/ensure\");\n\ndescribe(\"array-like/ensure\", function () {\n\tit(\"Should return input value\", function () {\n\t\tvar value = [];\n\t\tassert.equal(ensureArrayLike(value), value);\n\t});\n\tit(\"Should allow strings with allowString option\", function () {\n\t\tvar value = \"foo\";\n\t\tassert.equal(ensureArrayLike(value, { allowString: true }), value);\n\t});\n\tit(\"Should crash on invalid value\", function () {\n\t\ttry {\n\t\t\tensureArrayLike(\"foo\");\n\t\t\tthrow new Error(\"Unexpected\");\n\t\t} catch (error) {\n\t\t\tassert.equal(error.name, \"TypeError\");\n\t\t\tassert(error.message.includes(\"is not an array like value\"));\n\t\t}\n\t});\n});\n"]},"metadata":{},"sourceType":"script"}