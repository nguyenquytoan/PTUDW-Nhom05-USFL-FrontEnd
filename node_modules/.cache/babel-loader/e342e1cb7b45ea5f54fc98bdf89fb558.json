{"ast":null,"code":"/**\n * @fileoverview Rule to control spacing within function calls\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require or disallow spacing between function identifiers and their invocations\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/func-call-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: {\n      anyOf: [{\n        type: \"array\",\n        items: [{\n          enum: [\"never\"]\n        }],\n        minItems: 0,\n        maxItems: 1\n      }, {\n        type: \"array\",\n        items: [{\n          enum: [\"always\"]\n        }, {\n          type: \"object\",\n          properties: {\n            allowNewlines: {\n              type: \"boolean\"\n            }\n          },\n          additionalProperties: false\n        }],\n        minItems: 0,\n        maxItems: 2\n      }]\n    },\n    messages: {\n      unexpected: \"Unexpected newline between function name and paren.\",\n      missing: \"Missing space between function name and paren.\"\n    }\n  },\n\n  create(context) {\n    const never = context.options[0] !== \"always\";\n    const allowNewlines = !never && context.options[1] && context.options[1].allowNewlines;\n    const sourceCode = context.getSourceCode();\n    const text = sourceCode.getText();\n    /**\n     * Check if open space is present in a function name\n     * @param {ASTNode} node node to evaluate\n     * @param {Token} leftToken The last token of the callee. This may be the closing parenthesis that encloses the callee.\n     * @param {Token} rightToken Tha first token of the arguments. this is the opening parenthesis that encloses the arguments.\n     * @returns {void}\n     * @private\n     */\n\n    function checkSpacing(node, leftToken, rightToken) {\n      const textBetweenTokens = text.slice(leftToken.range[1], rightToken.range[0]).replace(/\\/\\*.*?\\*\\//gu, \"\");\n      const hasWhitespace = /\\s/u.test(textBetweenTokens);\n      const hasNewline = hasWhitespace && astUtils.LINEBREAK_MATCHER.test(textBetweenTokens);\n      /*\n       * never allowNewlines hasWhitespace hasNewline message\n       * F     F             F             F          Missing space between function name and paren.\n       * F     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\n       * F     F             T             T          Unexpected newline between function name and paren.\n       * F     F             T             F          (OK)\n       * F     T             T             F          (OK)\n       * F     T             T             T          (OK)\n       * F     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\n       * F     T             F             F          Missing space between function name and paren.\n       * T     T             F             F          (Invalid `never && allowNewlines`)\n       * T     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\n       * T     T             T             T          (Invalid `never && allowNewlines`)\n       * T     T             T             F          (Invalid `never && allowNewlines`)\n       * T     F             T             F          Unexpected space between function name and paren.\n       * T     F             T             T          Unexpected space between function name and paren.\n       * T     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\n       * T     F             F             F          (OK)\n       *\n       * T                   T                        Unexpected space between function name and paren.\n       * F                   F                        Missing space between function name and paren.\n       * F     F                           T          Unexpected newline between function name and paren.\n       */\n\n      if (never && hasWhitespace) {\n        context.report({\n          node,\n          loc: leftToken.loc.start,\n          messageId: \"unexpected\",\n\n          fix(fixer) {\n            /*\n             * Only autofix if there is no newline\n             * https://github.com/eslint/eslint/issues/7787\n             */\n            if (!hasNewline) {\n              return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n            }\n\n            return null;\n          }\n\n        });\n      } else if (!never && !hasWhitespace) {\n        context.report({\n          node,\n          loc: leftToken.loc.start,\n          messageId: \"missing\",\n\n          fix(fixer) {\n            return fixer.insertTextBefore(rightToken, \" \");\n          }\n\n        });\n      } else if (!never && !allowNewlines && hasNewline) {\n        context.report({\n          node,\n          loc: leftToken.loc.start,\n          messageId: \"unexpected\",\n\n          fix(fixer) {\n            return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], \" \");\n          }\n\n        });\n      }\n    }\n\n    return {\n      \"CallExpression, NewExpression\"(node) {\n        const lastToken = sourceCode.getLastToken(node);\n        const lastCalleeToken = sourceCode.getLastToken(node.callee);\n        const parenToken = sourceCode.getFirstTokenBetween(lastCalleeToken, lastToken, astUtils.isOpeningParenToken);\n        const prevToken = parenToken && sourceCode.getTokenBefore(parenToken); // Parens in NewExpression are optional\n\n        if (!(parenToken && parenToken.range[1] < node.range[1])) {\n          return;\n        }\n\n        checkSpacing(node, prevToken, parenToken);\n      },\n\n      ImportExpression(node) {\n        const leftToken = sourceCode.getFirstToken(node);\n        const rightToken = sourceCode.getTokenAfter(leftToken);\n        checkSpacing(node, leftToken, rightToken);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/func-call-spacing.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","anyOf","items","enum","minItems","maxItems","properties","allowNewlines","additionalProperties","messages","unexpected","missing","create","context","never","options","sourceCode","getSourceCode","text","getText","checkSpacing","node","leftToken","rightToken","textBetweenTokens","slice","range","replace","hasWhitespace","test","hasNewline","LINEBREAK_MATCHER","report","loc","start","messageId","fix","fixer","removeRange","insertTextBefore","replaceTextRange","lastToken","getLastToken","lastCalleeToken","callee","parenToken","getFirstTokenBetween","isOpeningParenToken","prevToken","getTokenBefore","ImportExpression","getFirstToken","getTokenAfter"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to control spacing within function calls\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require or disallow spacing between function identifiers and their invocations\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/func-call-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"never\"]\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 1\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                allowNewlines: {\n                                    type: \"boolean\"\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        },\n\n        messages: {\n            unexpected: \"Unexpected newline between function name and paren.\",\n            missing: \"Missing space between function name and paren.\"\n        }\n    },\n\n    create(context) {\n\n        const never = context.options[0] !== \"always\";\n        const allowNewlines = !never && context.options[1] && context.options[1].allowNewlines;\n        const sourceCode = context.getSourceCode();\n        const text = sourceCode.getText();\n\n        /**\n         * Check if open space is present in a function name\n         * @param {ASTNode} node node to evaluate\n         * @param {Token} leftToken The last token of the callee. This may be the closing parenthesis that encloses the callee.\n         * @param {Token} rightToken Tha first token of the arguments. this is the opening parenthesis that encloses the arguments.\n         * @returns {void}\n         * @private\n         */\n        function checkSpacing(node, leftToken, rightToken) {\n            const textBetweenTokens = text.slice(leftToken.range[1], rightToken.range[0]).replace(/\\/\\*.*?\\*\\//gu, \"\");\n            const hasWhitespace = /\\s/u.test(textBetweenTokens);\n            const hasNewline = hasWhitespace && astUtils.LINEBREAK_MATCHER.test(textBetweenTokens);\n\n            /*\n             * never allowNewlines hasWhitespace hasNewline message\n             * F     F             F             F          Missing space between function name and paren.\n             * F     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\n             * F     F             T             T          Unexpected newline between function name and paren.\n             * F     F             T             F          (OK)\n             * F     T             T             F          (OK)\n             * F     T             T             T          (OK)\n             * F     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\n             * F     T             F             F          Missing space between function name and paren.\n             * T     T             F             F          (Invalid `never && allowNewlines`)\n             * T     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\n             * T     T             T             T          (Invalid `never && allowNewlines`)\n             * T     T             T             F          (Invalid `never && allowNewlines`)\n             * T     F             T             F          Unexpected space between function name and paren.\n             * T     F             T             T          Unexpected space between function name and paren.\n             * T     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\n             * T     F             F             F          (OK)\n             *\n             * T                   T                        Unexpected space between function name and paren.\n             * F                   F                        Missing space between function name and paren.\n             * F     F                           T          Unexpected newline between function name and paren.\n             */\n\n            if (never && hasWhitespace) {\n                context.report({\n                    node,\n                    loc: leftToken.loc.start,\n                    messageId: \"unexpected\",\n                    fix(fixer) {\n\n                        /*\n                         * Only autofix if there is no newline\n                         * https://github.com/eslint/eslint/issues/7787\n                         */\n                        if (!hasNewline) {\n                            return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n                        }\n\n                        return null;\n                    }\n                });\n            } else if (!never && !hasWhitespace) {\n                context.report({\n                    node,\n                    loc: leftToken.loc.start,\n                    messageId: \"missing\",\n                    fix(fixer) {\n                        return fixer.insertTextBefore(rightToken, \" \");\n                    }\n                });\n            } else if (!never && !allowNewlines && hasNewline) {\n                context.report({\n                    node,\n                    loc: leftToken.loc.start,\n                    messageId: \"unexpected\",\n                    fix(fixer) {\n                        return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], \" \");\n                    }\n                });\n            }\n        }\n\n        return {\n            \"CallExpression, NewExpression\"(node) {\n                const lastToken = sourceCode.getLastToken(node);\n                const lastCalleeToken = sourceCode.getLastToken(node.callee);\n                const parenToken = sourceCode.getFirstTokenBetween(lastCalleeToken, lastToken, astUtils.isOpeningParenToken);\n                const prevToken = parenToken && sourceCode.getTokenBefore(parenToken);\n\n                // Parens in NewExpression are optional\n                if (!(parenToken && parenToken.range[1] < node.range[1])) {\n                    return;\n                }\n\n                checkSpacing(node, prevToken, parenToken);\n            },\n\n            ImportExpression(node) {\n                const leftToken = sourceCode.getFirstToken(node);\n                const rightToken = sourceCode.getTokenAfter(leftToken);\n\n                checkSpacing(node, leftToken, rightToken);\n            }\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}