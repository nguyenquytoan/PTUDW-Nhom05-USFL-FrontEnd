{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _default_reporter = _interopRequireDefault(require('./default_reporter'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst ICONS = _jestUtil().specialChars.ICONS;\n\nclass VerboseReporter extends _default_reporter.default {\n  constructor(globalConfig) {\n    super(globalConfig);\n\n    _defineProperty(this, '_globalConfig', void 0);\n\n    this._globalConfig = globalConfig;\n  }\n\n  static filterTestResults(testResults) {\n    return testResults.filter(({\n      status\n    }) => status !== 'pending');\n  }\n\n  static groupTestsBySuites(testResults) {\n    const root = {\n      suites: [],\n      tests: [],\n      title: ''\n    };\n    testResults.forEach(testResult => {\n      let targetSuite = root; // Find the target suite for this test,\n      // creating nested suites as necessary.\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = testResult.ancestorTitles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          const title = _step.value;\n          let matchingSuite = targetSuite.suites.find(s => s.title === title);\n\n          if (!matchingSuite) {\n            matchingSuite = {\n              suites: [],\n              tests: [],\n              title\n            };\n            targetSuite.suites.push(matchingSuite);\n          }\n\n          targetSuite = matchingSuite;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      targetSuite.tests.push(testResult);\n    });\n    return root;\n  }\n\n  onTestResult(test, result, aggregatedResults) {\n    super.testFinished(test.context.config, result, aggregatedResults);\n\n    if (!result.skipped) {\n      this.printTestFileHeader(result.testFilePath, test.context.config, result);\n\n      if (!result.testExecError && !result.skipped) {\n        this._logTestResults(result.testResults);\n      }\n\n      this.printTestFileFailureMessage(result.testFilePath, test.context.config, result);\n    }\n\n    super.forceFlushBufferedOutput();\n  }\n\n  _logTestResults(testResults) {\n    this._logSuite(VerboseReporter.groupTestsBySuites(testResults), 0);\n\n    this._logLine();\n  }\n\n  _logSuite(suite, indentLevel) {\n    if (suite.title) {\n      this._logLine(suite.title, indentLevel);\n    }\n\n    this._logTests(suite.tests, indentLevel + 1);\n\n    suite.suites.forEach(suite => this._logSuite(suite, indentLevel + 1));\n  }\n\n  _getIcon(status) {\n    if (status === 'failed') {\n      return _chalk().default.red(ICONS.failed);\n    } else if (status === 'pending') {\n      return _chalk().default.yellow(ICONS.pending);\n    } else if (status === 'todo') {\n      return _chalk().default.magenta(ICONS.todo);\n    } else {\n      return _chalk().default.green(ICONS.success);\n    }\n  }\n\n  _logTest(test, indentLevel) {\n    const status = this._getIcon(test.status);\n\n    const time = test.duration ? ` (${test.duration.toFixed(0)}ms)` : '';\n\n    this._logLine(status + ' ' + _chalk().default.dim(test.title + time), indentLevel);\n  }\n\n  _logTests(tests, indentLevel) {\n    if (this._globalConfig.expand) {\n      tests.forEach(test => this._logTest(test, indentLevel));\n    } else {\n      const summedTests = tests.reduce((result, test) => {\n        if (test.status === 'pending') {\n          result.pending.push(test);\n        } else if (test.status === 'todo') {\n          result.todo.push(test);\n        } else {\n          this._logTest(test, indentLevel);\n        }\n\n        return result;\n      }, {\n        pending: [],\n        todo: []\n      });\n\n      if (summedTests.pending.length > 0) {\n        summedTests.pending.forEach(this._logTodoOrPendingTest(indentLevel));\n      }\n\n      if (summedTests.todo.length > 0) {\n        summedTests.todo.forEach(this._logTodoOrPendingTest(indentLevel));\n      }\n    }\n  }\n\n  _logTodoOrPendingTest(indentLevel) {\n    return test => {\n      const printedTestStatus = test.status === 'pending' ? 'skipped' : test.status;\n\n      const icon = this._getIcon(test.status);\n\n      const text = _chalk().default.dim(`${printedTestStatus} ${test.title}`);\n\n      this._logLine(`${icon} ${text}`, indentLevel);\n    };\n  }\n\n  _logLine(str, indentLevel) {\n    const indentation = '  '.repeat(indentLevel || 0);\n    this.log(indentation + (str || ''));\n  }\n\n}\n\nexports.default = VerboseReporter;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/@jest/reporters/build/verbose_reporter.js"],"names":["Object","defineProperty","exports","value","default","_chalk","data","_interopRequireDefault","require","_jestUtil","_default_reporter","obj","__esModule","_defineProperty","key","enumerable","configurable","writable","ICONS","specialChars","VerboseReporter","constructor","globalConfig","_globalConfig","filterTestResults","testResults","filter","status","groupTestsBySuites","root","suites","tests","title","forEach","testResult","targetSuite","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","ancestorTitles","Symbol","iterator","_step","next","done","matchingSuite","find","s","push","err","return","onTestResult","test","result","aggregatedResults","testFinished","context","config","skipped","printTestFileHeader","testFilePath","testExecError","_logTestResults","printTestFileFailureMessage","forceFlushBufferedOutput","_logSuite","_logLine","suite","indentLevel","_logTests","_getIcon","red","failed","yellow","pending","magenta","todo","green","success","_logTest","time","duration","toFixed","dim","expand","summedTests","reduce","length","_logTodoOrPendingTest","printedTestStatus","icon","text","str","indentation","repeat","log"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _default_reporter = _interopRequireDefault(require('./default_reporter'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nconst ICONS = _jestUtil().specialChars.ICONS;\n\nclass VerboseReporter extends _default_reporter.default {\n  constructor(globalConfig) {\n    super(globalConfig);\n\n    _defineProperty(this, '_globalConfig', void 0);\n\n    this._globalConfig = globalConfig;\n  }\n\n  static filterTestResults(testResults) {\n    return testResults.filter(({status}) => status !== 'pending');\n  }\n\n  static groupTestsBySuites(testResults) {\n    const root = {\n      suites: [],\n      tests: [],\n      title: ''\n    };\n    testResults.forEach(testResult => {\n      let targetSuite = root; // Find the target suite for this test,\n      // creating nested suites as necessary.\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (\n          var _iterator = testResult.ancestorTitles[Symbol.iterator](), _step;\n          !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n          _iteratorNormalCompletion = true\n        ) {\n          const title = _step.value;\n          let matchingSuite = targetSuite.suites.find(s => s.title === title);\n\n          if (!matchingSuite) {\n            matchingSuite = {\n              suites: [],\n              tests: [],\n              title\n            };\n            targetSuite.suites.push(matchingSuite);\n          }\n\n          targetSuite = matchingSuite;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      targetSuite.tests.push(testResult);\n    });\n    return root;\n  }\n\n  onTestResult(test, result, aggregatedResults) {\n    super.testFinished(test.context.config, result, aggregatedResults);\n\n    if (!result.skipped) {\n      this.printTestFileHeader(\n        result.testFilePath,\n        test.context.config,\n        result\n      );\n\n      if (!result.testExecError && !result.skipped) {\n        this._logTestResults(result.testResults);\n      }\n\n      this.printTestFileFailureMessage(\n        result.testFilePath,\n        test.context.config,\n        result\n      );\n    }\n\n    super.forceFlushBufferedOutput();\n  }\n\n  _logTestResults(testResults) {\n    this._logSuite(VerboseReporter.groupTestsBySuites(testResults), 0);\n\n    this._logLine();\n  }\n\n  _logSuite(suite, indentLevel) {\n    if (suite.title) {\n      this._logLine(suite.title, indentLevel);\n    }\n\n    this._logTests(suite.tests, indentLevel + 1);\n\n    suite.suites.forEach(suite => this._logSuite(suite, indentLevel + 1));\n  }\n\n  _getIcon(status) {\n    if (status === 'failed') {\n      return _chalk().default.red(ICONS.failed);\n    } else if (status === 'pending') {\n      return _chalk().default.yellow(ICONS.pending);\n    } else if (status === 'todo') {\n      return _chalk().default.magenta(ICONS.todo);\n    } else {\n      return _chalk().default.green(ICONS.success);\n    }\n  }\n\n  _logTest(test, indentLevel) {\n    const status = this._getIcon(test.status);\n\n    const time = test.duration ? ` (${test.duration.toFixed(0)}ms)` : '';\n\n    this._logLine(\n      status + ' ' + _chalk().default.dim(test.title + time),\n      indentLevel\n    );\n  }\n\n  _logTests(tests, indentLevel) {\n    if (this._globalConfig.expand) {\n      tests.forEach(test => this._logTest(test, indentLevel));\n    } else {\n      const summedTests = tests.reduce(\n        (result, test) => {\n          if (test.status === 'pending') {\n            result.pending.push(test);\n          } else if (test.status === 'todo') {\n            result.todo.push(test);\n          } else {\n            this._logTest(test, indentLevel);\n          }\n\n          return result;\n        },\n        {\n          pending: [],\n          todo: []\n        }\n      );\n\n      if (summedTests.pending.length > 0) {\n        summedTests.pending.forEach(this._logTodoOrPendingTest(indentLevel));\n      }\n\n      if (summedTests.todo.length > 0) {\n        summedTests.todo.forEach(this._logTodoOrPendingTest(indentLevel));\n      }\n    }\n  }\n\n  _logTodoOrPendingTest(indentLevel) {\n    return test => {\n      const printedTestStatus =\n        test.status === 'pending' ? 'skipped' : test.status;\n\n      const icon = this._getIcon(test.status);\n\n      const text = _chalk().default.dim(`${printedTestStatus} ${test.title}`);\n\n      this._logLine(`${icon} ${text}`, indentLevel);\n    };\n  }\n\n  _logLine(str, indentLevel) {\n    const indentation = '  '.repeat(indentLevel || 0);\n    this.log(indentation + (str || ''));\n  }\n}\n\nexports.default = VerboseReporter;\n"]},"metadata":{},"sourceType":"script"}