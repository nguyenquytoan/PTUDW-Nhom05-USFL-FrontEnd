{"ast":null,"code":"// Generated by LiveScript 1.6.0\n(function () {\n  var ref$, id, find, sort, min, max, map, unlines, nameToRaw, dasherize, naturalJoin, wordWrap, wordwrap, getPreText, setHelpStyleDefaults, generateHelpForOption, generateHelp;\n  ref$ = require('prelude-ls'), id = ref$.id, find = ref$.find, sort = ref$.sort, min = ref$.min, max = ref$.max, map = ref$.map, unlines = ref$.unlines;\n  ref$ = require('./util'), nameToRaw = ref$.nameToRaw, dasherize = ref$.dasherize, naturalJoin = ref$.naturalJoin;\n  wordWrap = require('word-wrap');\n\n  wordwrap = function (a, b) {\n    var ref$, indent, width;\n    ref$ = b === undefined ? ['', a - 1] : [repeatString$(' ', a), b - a - 1], indent = ref$[0], width = ref$[1];\n    return function (text) {\n      return wordWrap(text, {\n        indent: indent,\n        width: width,\n        trim: true\n      });\n    };\n  };\n\n  getPreText = function (option, arg$, maxWidth) {\n    var mainName, shortNames, ref$, longNames, type, description, aliasSeparator, typeSeparator, initialIndent, names, namesString, namesStringLen, typeSeparatorString, typeSeparatorStringLen, wrap;\n    mainName = option.option, shortNames = (ref$ = option.shortNames) != null ? ref$ : [], longNames = (ref$ = option.longNames) != null ? ref$ : [], type = option.type, description = option.description;\n    aliasSeparator = arg$.aliasSeparator, typeSeparator = arg$.typeSeparator, initialIndent = arg$.initialIndent;\n\n    if (option.negateName) {\n      mainName = \"no-\" + mainName;\n\n      if (longNames) {\n        longNames = map(function (it) {\n          return \"no-\" + it;\n        }, longNames);\n      }\n    }\n\n    names = mainName.length === 1 ? [mainName].concat(shortNames, longNames) : shortNames.concat([mainName], longNames);\n    namesString = map(nameToRaw, names).join(aliasSeparator);\n    namesStringLen = namesString.length;\n    typeSeparatorString = mainName === 'NUM' ? '::' : typeSeparator;\n    typeSeparatorStringLen = typeSeparatorString.length;\n\n    if (maxWidth != null && !option.boolean && initialIndent + namesStringLen + typeSeparatorStringLen + type.length > maxWidth) {\n      wrap = wordwrap(initialIndent + namesStringLen + typeSeparatorStringLen, maxWidth);\n      return namesString + \"\" + typeSeparatorString + wrap(type).replace(/^\\s+/, '');\n    } else {\n      return namesString + \"\" + (option.boolean ? '' : typeSeparatorString + \"\" + type);\n    }\n  };\n\n  setHelpStyleDefaults = function (helpStyle) {\n    helpStyle.aliasSeparator == null && (helpStyle.aliasSeparator = ', ');\n    helpStyle.typeSeparator == null && (helpStyle.typeSeparator = ' ');\n    helpStyle.descriptionSeparator == null && (helpStyle.descriptionSeparator = '  ');\n    helpStyle.initialIndent == null && (helpStyle.initialIndent = 2);\n    helpStyle.secondaryIndent == null && (helpStyle.secondaryIndent = 4);\n    helpStyle.maxPadFactor == null && (helpStyle.maxPadFactor = 1.5);\n  };\n\n  generateHelpForOption = function (getOption, arg$) {\n    var stdout, helpStyle, ref$;\n    stdout = arg$.stdout, helpStyle = (ref$ = arg$.helpStyle) != null ? ref$ : {};\n    setHelpStyleDefaults(helpStyle);\n    return function (optionName) {\n      var maxWidth, wrap, option, e, pre, defaultString, restPositionalString, description, fullDescription, that, preDescription, descriptionString, exampleString, examples, seperator;\n      maxWidth = stdout != null && stdout.isTTY ? stdout.columns - 1 : null;\n      wrap = maxWidth ? wordwrap(maxWidth) : id;\n\n      try {\n        option = getOption(dasherize(optionName));\n      } catch (e$) {\n        e = e$;\n        return e.message;\n      }\n\n      pre = getPreText(option, helpStyle);\n      defaultString = option['default'] && !option.negateName ? \"\\ndefault: \" + option['default'] : '';\n      restPositionalString = option.restPositional ? 'Everything after this option is considered a positional argument, even if it looks like an option.' : '';\n      description = option.longDescription || option.description && sentencize(option.description);\n      fullDescription = description && restPositionalString ? description + \" \" + restPositionalString : (that = description || restPositionalString) ? that : '';\n      preDescription = 'description:';\n      descriptionString = !fullDescription ? '' : maxWidth && fullDescription.length - 1 - preDescription.length > maxWidth ? \"\\n\" + preDescription + \"\\n\" + wrap(fullDescription) : \"\\n\" + preDescription + \" \" + fullDescription;\n      exampleString = (that = option.example) ? (examples = [].concat(that), examples.length > 1 ? \"\\nexamples:\\n\" + unlines(examples) : \"\\nexample: \" + examples[0]) : '';\n      seperator = defaultString || descriptionString || exampleString ? \"\\n\" + repeatString$('=', pre.length) : '';\n      return pre + \"\" + seperator + defaultString + descriptionString + exampleString;\n    };\n  };\n\n  generateHelp = function (arg$) {\n    var options, prepend, append, helpStyle, ref$, stdout, aliasSeparator, typeSeparator, descriptionSeparator, maxPadFactor, initialIndent, secondaryIndent;\n    options = arg$.options, prepend = arg$.prepend, append = arg$.append, helpStyle = (ref$ = arg$.helpStyle) != null ? ref$ : {}, stdout = arg$.stdout;\n    setHelpStyleDefaults(helpStyle);\n    aliasSeparator = helpStyle.aliasSeparator, typeSeparator = helpStyle.typeSeparator, descriptionSeparator = helpStyle.descriptionSeparator, maxPadFactor = helpStyle.maxPadFactor, initialIndent = helpStyle.initialIndent, secondaryIndent = helpStyle.secondaryIndent;\n    return function (arg$) {\n      var ref$, showHidden, interpolate, maxWidth, output, out, data, optionCount, totalPreLen, preLens, i$, len$, item, that, pre, descParts, desc, preLen, sortedPreLens, maxPreLen, preLenMean, x, padAmount, descSepLen, fullWrapCount, partialWrapCount, descLen, totalLen, initialSpace, wrapAllFull, i, wrap;\n      ref$ = arg$ != null ? arg$ : {}, showHidden = ref$.showHidden, interpolate = ref$.interpolate;\n      maxWidth = stdout != null && stdout.isTTY ? stdout.columns - 1 : null;\n      output = [];\n\n      out = function (it) {\n        return output.push(it != null ? it : '');\n      };\n\n      if (prepend) {\n        out(interpolate ? interp(prepend, interpolate) : prepend);\n        out();\n      }\n\n      data = [];\n      optionCount = 0;\n      totalPreLen = 0;\n      preLens = [];\n\n      for (i$ = 0, len$ = (ref$ = options).length; i$ < len$; ++i$) {\n        item = ref$[i$];\n\n        if (showHidden || !item.hidden) {\n          if (that = item.heading) {\n            data.push({\n              type: 'heading',\n              value: that\n            });\n          } else {\n            pre = getPreText(item, helpStyle, maxWidth);\n            descParts = [];\n\n            if ((that = item.description) != null) {\n              descParts.push(that);\n            }\n\n            if (that = item['enum']) {\n              descParts.push(\"either: \" + naturalJoin(that));\n            }\n\n            if (item['default'] && !item.negateName) {\n              descParts.push(\"default: \" + item['default']);\n            }\n\n            desc = descParts.join(' - ');\n            data.push({\n              type: 'option',\n              pre: pre,\n              desc: desc,\n              descLen: desc.length\n            });\n            preLen = pre.length;\n            optionCount++;\n            totalPreLen += preLen;\n            preLens.push(preLen);\n          }\n        }\n      }\n\n      sortedPreLens = sort(preLens);\n      maxPreLen = sortedPreLens[sortedPreLens.length - 1];\n      preLenMean = initialIndent + totalPreLen / optionCount;\n      x = optionCount > 2 ? min(preLenMean * maxPadFactor, maxPreLen) : maxPreLen;\n\n      for (i$ = sortedPreLens.length - 1; i$ >= 0; --i$) {\n        preLen = sortedPreLens[i$];\n\n        if (preLen <= x) {\n          padAmount = preLen;\n          break;\n        }\n      }\n\n      descSepLen = descriptionSeparator.length;\n\n      if (maxWidth != null) {\n        fullWrapCount = 0;\n        partialWrapCount = 0;\n\n        for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {\n          item = data[i$];\n\n          if (item.type === 'option') {\n            pre = item.pre, desc = item.desc, descLen = item.descLen;\n\n            if (descLen === 0) {\n              item.wrap = 'none';\n            } else {\n              preLen = max(padAmount, pre.length) + initialIndent + descSepLen;\n              totalLen = preLen + descLen;\n\n              if (totalLen > maxWidth) {\n                if (descLen / 2.5 > maxWidth - preLen) {\n                  fullWrapCount++;\n                  item.wrap = 'full';\n                } else {\n                  partialWrapCount++;\n                  item.wrap = 'partial';\n                }\n              } else {\n                item.wrap = 'none';\n              }\n            }\n          }\n        }\n      }\n\n      initialSpace = repeatString$(' ', initialIndent);\n      wrapAllFull = optionCount > 1 && fullWrapCount + partialWrapCount * 0.5 > optionCount * 0.5;\n\n      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {\n        i = i$;\n        item = data[i$];\n\n        if (item.type === 'heading') {\n          if (i !== 0) {\n            out();\n          }\n\n          out(item.value + \":\");\n        } else {\n          pre = item.pre, desc = item.desc, descLen = item.descLen, wrap = item.wrap;\n\n          if (maxWidth != null) {\n            if (wrapAllFull || wrap === 'full') {\n              wrap = wordwrap(initialIndent + secondaryIndent, maxWidth);\n              out(initialSpace + \"\" + pre + \"\\n\" + wrap(desc));\n              continue;\n            } else if (wrap === 'partial') {\n              wrap = wordwrap(initialIndent + descSepLen + max(padAmount, pre.length), maxWidth);\n              out(initialSpace + \"\" + pad(pre, padAmount) + descriptionSeparator + wrap(desc).replace(/^\\s+/, ''));\n              continue;\n            }\n          }\n\n          if (descLen === 0) {\n            out(initialSpace + \"\" + pre);\n          } else {\n            out(initialSpace + \"\" + pad(pre, padAmount) + descriptionSeparator + desc);\n          }\n        }\n      }\n\n      if (append) {\n        out();\n        out(interpolate ? interp(append, interpolate) : append);\n      }\n\n      return unlines(output);\n    };\n  };\n\n  function pad(str, num) {\n    var len, padAmount;\n    len = str.length;\n    padAmount = num - len;\n    return str + \"\" + repeatString$(' ', padAmount > 0 ? padAmount : 0);\n  }\n\n  function sentencize(str) {\n    var first, rest, period;\n    first = str.charAt(0).toUpperCase();\n    rest = str.slice(1);\n    period = /[\\.!\\?]$/.test(str) ? '' : '.';\n    return first + \"\" + rest + period;\n  }\n\n  function interp(string, object) {\n    return string.replace(/{{([a-zA-Z$_][a-zA-Z$_0-9]*)}}/g, function (arg$, key) {\n      var ref$;\n      return (ref$ = object[key]) != null ? ref$ : \"{{\" + key + \"}}\";\n    });\n  }\n\n  module.exports = {\n    generateHelp: generateHelp,\n    generateHelpForOption: generateHelpForOption\n  };\n\n  function repeatString$(str, n) {\n    for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;\n\n    return r;\n  }\n}).call(this);","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/optionator/lib/help.js"],"names":["ref$","id","find","sort","min","max","map","unlines","nameToRaw","dasherize","naturalJoin","wordWrap","wordwrap","getPreText","setHelpStyleDefaults","generateHelpForOption","generateHelp","require","a","b","indent","width","undefined","repeatString$","text","trim","option","arg$","maxWidth","mainName","shortNames","longNames","type","description","aliasSeparator","typeSeparator","initialIndent","names","namesString","namesStringLen","typeSeparatorString","typeSeparatorStringLen","wrap","negateName","it","length","concat","join","boolean","replace","helpStyle","descriptionSeparator","secondaryIndent","maxPadFactor","getOption","stdout","optionName","e","pre","defaultString","restPositionalString","fullDescription","that","preDescription","descriptionString","exampleString","examples","seperator","isTTY","columns","e$","message","restPositional","longDescription","sentencize","example","options","prepend","append","showHidden","interpolate","output","out","data","optionCount","totalPreLen","preLens","i$","len$","item","descParts","desc","preLen","sortedPreLens","maxPreLen","preLenMean","x","padAmount","descSepLen","fullWrapCount","partialWrapCount","descLen","totalLen","initialSpace","wrapAllFull","i","push","interp","hidden","heading","value","pad","str","num","len","first","rest","period","charAt","toUpperCase","slice","test","string","object","key","module","exports","n","r","call"],"mappings":"AAAA;AACA,CAAC,YAAU;AACT,MAAIA,IAAJ,EAAUC,EAAV,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,GAApC,EAAyCC,OAAzC,EAAkDC,SAAlD,EAA6DC,SAA7D,EAAwEC,WAAxE,EAAqFC,QAArF,EAA+FC,QAA/F,EAAyGC,UAAzG,EAAqHC,oBAArH,EAA2IC,qBAA3I,EAAkKC,YAAlK;AACAhB,EAAAA,IAAI,GAAGiB,OAAO,CAAC,YAAD,CAAd,EAA8BhB,EAAE,GAAGD,IAAI,CAACC,EAAxC,EAA4CC,IAAI,GAAGF,IAAI,CAACE,IAAxD,EAA8DC,IAAI,GAAGH,IAAI,CAACG,IAA1E,EAAgFC,GAAG,GAAGJ,IAAI,CAACI,GAA3F,EAAgGC,GAAG,GAAGL,IAAI,CAACK,GAA3G,EAAgHC,GAAG,GAAGN,IAAI,CAACM,GAA3H,EAAgIC,OAAO,GAAGP,IAAI,CAACO,OAA/I;AACAP,EAAAA,IAAI,GAAGiB,OAAO,CAAC,QAAD,CAAd,EAA0BT,SAAS,GAAGR,IAAI,CAACQ,SAA3C,EAAsDC,SAAS,GAAGT,IAAI,CAACS,SAAvE,EAAkFC,WAAW,GAAGV,IAAI,CAACU,WAArG;AACAC,EAAAA,QAAQ,GAAGM,OAAO,CAAC,WAAD,CAAlB;;AACAL,EAAAA,QAAQ,GAAG,UAASM,CAAT,EAAYC,CAAZ,EAAc;AACvB,QAAInB,IAAJ,EAAUoB,MAAV,EAAkBC,KAAlB;AACArB,IAAAA,IAAI,GAAGmB,CAAC,KAAKG,SAAN,GACH,CAAC,EAAD,EAAKJ,CAAC,GAAG,CAAT,CADG,GAEH,CAACK,aAAa,CAAC,GAAD,EAAML,CAAN,CAAd,EAAwBC,CAAC,GAAGD,CAAJ,GAAQ,CAAhC,CAFJ,EAEwCE,MAAM,GAAGpB,IAAI,CAAC,CAAD,CAFrD,EAE0DqB,KAAK,GAAGrB,IAAI,CAAC,CAAD,CAFtE;AAGA,WAAO,UAASwB,IAAT,EAAc;AACnB,aAAOb,QAAQ,CAACa,IAAD,EAAO;AACpBJ,QAAAA,MAAM,EAAEA,MADY;AAEpBC,QAAAA,KAAK,EAAEA,KAFa;AAGpBI,QAAAA,IAAI,EAAE;AAHc,OAAP,CAAf;AAKD,KAND;AAOD,GAZD;;AAaAZ,EAAAA,UAAU,GAAG,UAASa,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,EAAgC;AAC3C,QAAIC,QAAJ,EAAcC,UAAd,EAA0B9B,IAA1B,EAAgC+B,SAAhC,EAA2CC,IAA3C,EAAiDC,WAAjD,EAA8DC,cAA9D,EAA8EC,aAA9E,EAA6FC,aAA7F,EAA4GC,KAA5G,EAAmHC,WAAnH,EAAgIC,cAAhI,EAAgJC,mBAAhJ,EAAqKC,sBAArK,EAA6LC,IAA7L;AACAb,IAAAA,QAAQ,GAAGH,MAAM,CAACA,MAAlB,EAA0BI,UAAU,GAAG,CAAC9B,IAAI,GAAG0B,MAAM,CAACI,UAAf,KAA8B,IAA9B,GACnC9B,IADmC,GAEnC,EAFJ,EAEQ+B,SAAS,GAAG,CAAC/B,IAAI,GAAG0B,MAAM,CAACK,SAAf,KAA6B,IAA7B,GAChB/B,IADgB,GAEhB,EAJJ,EAIQgC,IAAI,GAAGN,MAAM,CAACM,IAJtB,EAI4BC,WAAW,GAAGP,MAAM,CAACO,WAJjD;AAKAC,IAAAA,cAAc,GAAGP,IAAI,CAACO,cAAtB,EAAsCC,aAAa,GAAGR,IAAI,CAACQ,aAA3D,EAA0EC,aAAa,GAAGT,IAAI,CAACS,aAA/F;;AACA,QAAIV,MAAM,CAACiB,UAAX,EAAuB;AACrBd,MAAAA,QAAQ,GAAG,QAAQA,QAAnB;;AACA,UAAIE,SAAJ,EAAe;AACbA,QAAAA,SAAS,GAAGzB,GAAG,CAAC,UAASsC,EAAT,EAAY;AAC1B,iBAAO,QAAQA,EAAf;AACD,SAFc,EAEZb,SAFY,CAAf;AAGD;AACF;;AACDM,IAAAA,KAAK,GAAGR,QAAQ,CAACgB,MAAT,KAAoB,CAApB,GACJ,CAAChB,QAAD,EAAWiB,MAAX,CAAkBhB,UAAlB,EAA8BC,SAA9B,CADI,GAEJD,UAAU,CAACgB,MAAX,CAAkB,CAACjB,QAAD,CAAlB,EAA8BE,SAA9B,CAFJ;AAGAO,IAAAA,WAAW,GAAGhC,GAAG,CAACE,SAAD,EAAY6B,KAAZ,CAAH,CAAsBU,IAAtB,CAA2Bb,cAA3B,CAAd;AACAK,IAAAA,cAAc,GAAGD,WAAW,CAACO,MAA7B;AACAL,IAAAA,mBAAmB,GAAGX,QAAQ,KAAK,KAAb,GAAqB,IAArB,GAA4BM,aAAlD;AACAM,IAAAA,sBAAsB,GAAGD,mBAAmB,CAACK,MAA7C;;AACA,QAAIjB,QAAQ,IAAI,IAAZ,IAAoB,CAACF,MAAM,CAACsB,OAA5B,IAAuCZ,aAAa,GAAGG,cAAhB,GAAiCE,sBAAjC,GAA0DT,IAAI,CAACa,MAA/D,GAAwEjB,QAAnH,EAA6H;AAC3Hc,MAAAA,IAAI,GAAG9B,QAAQ,CAACwB,aAAa,GAAGG,cAAhB,GAAiCE,sBAAlC,EAA0Db,QAA1D,CAAf;AACA,aAAOU,WAAW,GAAG,EAAd,GAAmBE,mBAAnB,GAAyCE,IAAI,CAACV,IAAD,CAAJ,CAAWiB,OAAX,CAAmB,MAAnB,EAA2B,EAA3B,CAAhD;AACD,KAHD,MAGO;AACL,aAAOX,WAAW,GAAG,EAAd,IAAoBZ,MAAM,CAACsB,OAAP,GACvB,EADuB,GAEvBR,mBAAmB,GAAG,EAAtB,GAA2BR,IAFxB,CAAP;AAGD;AACF,GA/BD;;AAgCAlB,EAAAA,oBAAoB,GAAG,UAASoC,SAAT,EAAmB;AACxCA,IAAAA,SAAS,CAAChB,cAAV,IAA4B,IAA5B,KAAqCgB,SAAS,CAAChB,cAAV,GAA2B,IAAhE;AACAgB,IAAAA,SAAS,CAACf,aAAV,IAA2B,IAA3B,KAAoCe,SAAS,CAACf,aAAV,GAA0B,GAA9D;AACAe,IAAAA,SAAS,CAACC,oBAAV,IAAkC,IAAlC,KAA2CD,SAAS,CAACC,oBAAV,GAAiC,IAA5E;AACAD,IAAAA,SAAS,CAACd,aAAV,IAA2B,IAA3B,KAAoCc,SAAS,CAACd,aAAV,GAA0B,CAA9D;AACAc,IAAAA,SAAS,CAACE,eAAV,IAA6B,IAA7B,KAAsCF,SAAS,CAACE,eAAV,GAA4B,CAAlE;AACAF,IAAAA,SAAS,CAACG,YAAV,IAA0B,IAA1B,KAAmCH,SAAS,CAACG,YAAV,GAAyB,GAA5D;AACD,GAPD;;AAQAtC,EAAAA,qBAAqB,GAAG,UAASuC,SAAT,EAAoB3B,IAApB,EAAyB;AAC/C,QAAI4B,MAAJ,EAAYL,SAAZ,EAAuBlD,IAAvB;AACAuD,IAAAA,MAAM,GAAG5B,IAAI,CAAC4B,MAAd,EAAsBL,SAAS,GAAG,CAAClD,IAAI,GAAG2B,IAAI,CAACuB,SAAb,KAA2B,IAA3B,GAC9BlD,IAD8B,GAE9B,EAFJ;AAGAc,IAAAA,oBAAoB,CAACoC,SAAD,CAApB;AACA,WAAO,UAASM,UAAT,EAAoB;AACzB,UAAI5B,QAAJ,EAAcc,IAAd,EAAoBhB,MAApB,EAA4B+B,CAA5B,EAA+BC,GAA/B,EAAoCC,aAApC,EAAmDC,oBAAnD,EAAyE3B,WAAzE,EAAsF4B,eAAtF,EAAuGC,IAAvG,EAA6GC,cAA7G,EAA6HC,iBAA7H,EAAgJC,aAAhJ,EAA+JC,QAA/J,EAAyKC,SAAzK;AACAvC,MAAAA,QAAQ,GAAG2B,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACa,KAAzB,GAAiCb,MAAM,CAACc,OAAP,GAAiB,CAAlD,GAAsD,IAAjE;AACA3B,MAAAA,IAAI,GAAGd,QAAQ,GAAGhB,QAAQ,CAACgB,QAAD,CAAX,GAAwB3B,EAAvC;;AACA,UAAI;AACFyB,QAAAA,MAAM,GAAG4B,SAAS,CAAC7C,SAAS,CAAC+C,UAAD,CAAV,CAAlB;AACD,OAFD,CAEE,OAAOc,EAAP,EAAW;AACXb,QAAAA,CAAC,GAAGa,EAAJ;AACA,eAAOb,CAAC,CAACc,OAAT;AACD;;AACDb,MAAAA,GAAG,GAAG7C,UAAU,CAACa,MAAD,EAASwB,SAAT,CAAhB;AACAS,MAAAA,aAAa,GAAGjC,MAAM,CAAC,SAAD,CAAN,IAAqB,CAACA,MAAM,CAACiB,UAA7B,GAA0C,gBAAgBjB,MAAM,CAAC,SAAD,CAAhE,GAA8E,EAA9F;AACAkC,MAAAA,oBAAoB,GAAGlC,MAAM,CAAC8C,cAAP,GAAwB,oGAAxB,GAA+H,EAAtJ;AACAvC,MAAAA,WAAW,GAAGP,MAAM,CAAC+C,eAAP,IAA0B/C,MAAM,CAACO,WAAP,IAAsByC,UAAU,CAAChD,MAAM,CAACO,WAAR,CAAxE;AACA4B,MAAAA,eAAe,GAAG5B,WAAW,IAAI2B,oBAAf,GACd3B,WAAW,GAAG,GAAd,GAAoB2B,oBADN,GAEd,CAACE,IAAI,GAAG7B,WAAW,IAAI2B,oBAAvB,IAA+CE,IAA/C,GAAsD,EAF1D;AAGAC,MAAAA,cAAc,GAAG,cAAjB;AACAC,MAAAA,iBAAiB,GAAG,CAACH,eAAD,GAChB,EADgB,GAEhBjC,QAAQ,IAAIiC,eAAe,CAAChB,MAAhB,GAAyB,CAAzB,GAA6BkB,cAAc,CAAClB,MAA5C,GAAqDjB,QAAjE,GACE,OAAOmC,cAAP,GAAwB,IAAxB,GAA+BrB,IAAI,CAACmB,eAAD,CADrC,GAEE,OAAOE,cAAP,GAAwB,GAAxB,GAA8BF,eAJpC;AAKAI,MAAAA,aAAa,GAAG,CAACH,IAAI,GAAGpC,MAAM,CAACiD,OAAf,KAA2BT,QAAQ,GAAG,GAAGpB,MAAH,CAAUgB,IAAV,CAAX,EAA4BI,QAAQ,CAACrB,MAAT,GAAkB,CAAlB,GACnE,kBAAkBtC,OAAO,CAAC2D,QAAD,CAD0C,GAEnE,gBAAgBA,QAAQ,CAAC,CAAD,CAFZ,IAEmB,EAFnC;AAGAC,MAAAA,SAAS,GAAGR,aAAa,IAAIK,iBAAjB,IAAsCC,aAAtC,GAAsD,OAAO1C,aAAa,CAAC,GAAD,EAAMmC,GAAG,CAACb,MAAV,CAA1E,GAA8F,EAA1G;AACA,aAAOa,GAAG,GAAG,EAAN,GAAWS,SAAX,GAAuBR,aAAvB,GAAuCK,iBAAvC,GAA2DC,aAAlE;AACD,KA5BD;AA6BD,GAnCD;;AAoCAjD,EAAAA,YAAY,GAAG,UAASW,IAAT,EAAc;AAC3B,QAAIiD,OAAJ,EAAaC,OAAb,EAAsBC,MAAtB,EAA8B5B,SAA9B,EAAyClD,IAAzC,EAA+CuD,MAA/C,EAAuDrB,cAAvD,EAAuEC,aAAvE,EAAsFgB,oBAAtF,EAA4GE,YAA5G,EAA0HjB,aAA1H,EAAyIgB,eAAzI;AACAwB,IAAAA,OAAO,GAAGjD,IAAI,CAACiD,OAAf,EAAwBC,OAAO,GAAGlD,IAAI,CAACkD,OAAvC,EAAgDC,MAAM,GAAGnD,IAAI,CAACmD,MAA9D,EAAsE5B,SAAS,GAAG,CAAClD,IAAI,GAAG2B,IAAI,CAACuB,SAAb,KAA2B,IAA3B,GAC9ElD,IAD8E,GAE9E,EAFJ,EAEQuD,MAAM,GAAG5B,IAAI,CAAC4B,MAFtB;AAGAzC,IAAAA,oBAAoB,CAACoC,SAAD,CAApB;AACAhB,IAAAA,cAAc,GAAGgB,SAAS,CAAChB,cAA3B,EAA2CC,aAAa,GAAGe,SAAS,CAACf,aAArE,EAAoFgB,oBAAoB,GAAGD,SAAS,CAACC,oBAArH,EAA2IE,YAAY,GAAGH,SAAS,CAACG,YAApK,EAAkLjB,aAAa,GAAGc,SAAS,CAACd,aAA5M,EAA2NgB,eAAe,GAAGF,SAAS,CAACE,eAAvP;AACA,WAAO,UAASzB,IAAT,EAAc;AACnB,UAAI3B,IAAJ,EAAU+E,UAAV,EAAsBC,WAAtB,EAAmCpD,QAAnC,EAA6CqD,MAA7C,EAAqDC,GAArD,EAA0DC,IAA1D,EAAgEC,WAAhE,EAA6EC,WAA7E,EAA0FC,OAA1F,EAAmGC,EAAnG,EAAuGC,IAAvG,EAA6GC,IAA7G,EAAmH3B,IAAnH,EAAyHJ,GAAzH,EAA8HgC,SAA9H,EAAyIC,IAAzI,EAA+IC,MAA/I,EAAuJC,aAAvJ,EAAsKC,SAAtK,EAAiLC,UAAjL,EAA6LC,CAA7L,EAAgMC,SAAhM,EAA2MC,UAA3M,EAAuNC,aAAvN,EAAsOC,gBAAtO,EAAwPC,OAAxP,EAAiQC,QAAjQ,EAA2QC,YAA3Q,EAAyRC,WAAzR,EAAsSC,CAAtS,EAAyS/D,IAAzS;AACA1C,MAAAA,IAAI,GAAG2B,IAAI,IAAI,IAAR,GACHA,IADG,GAEH,EAFJ,EAEQoD,UAAU,GAAG/E,IAAI,CAAC+E,UAF1B,EAEsCC,WAAW,GAAGhF,IAAI,CAACgF,WAFzD;AAGApD,MAAAA,QAAQ,GAAG2B,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACa,KAAzB,GAAiCb,MAAM,CAACc,OAAP,GAAiB,CAAlD,GAAsD,IAAjE;AACAY,MAAAA,MAAM,GAAG,EAAT;;AACAC,MAAAA,GAAG,GAAG,UAAStC,EAAT,EAAY;AAChB,eAAOqC,MAAM,CAACyB,IAAP,CAAY9D,EAAE,IAAI,IAAN,GAAaA,EAAb,GAAkB,EAA9B,CAAP;AACD,OAFD;;AAGA,UAAIiC,OAAJ,EAAa;AACXK,QAAAA,GAAG,CAACF,WAAW,GAAG2B,MAAM,CAAC9B,OAAD,EAAUG,WAAV,CAAT,GAAkCH,OAA9C,CAAH;AACAK,QAAAA,GAAG;AACJ;;AACDC,MAAAA,IAAI,GAAG,EAAP;AACAC,MAAAA,WAAW,GAAG,CAAd;AACAC,MAAAA,WAAW,GAAG,CAAd;AACAC,MAAAA,OAAO,GAAG,EAAV;;AACA,WAAKC,EAAE,GAAG,CAAL,EAAQC,IAAI,GAAG,CAACxF,IAAI,GAAG4E,OAAR,EAAiB/B,MAArC,EAA6C0C,EAAE,GAAGC,IAAlD,EAAwD,EAAED,EAA1D,EAA8D;AAC5DE,QAAAA,IAAI,GAAGzF,IAAI,CAACuF,EAAD,CAAX;;AACA,YAAIR,UAAU,IAAI,CAACU,IAAI,CAACmB,MAAxB,EAAgC;AAC9B,cAAI9C,IAAI,GAAG2B,IAAI,CAACoB,OAAhB,EAAyB;AACvB1B,YAAAA,IAAI,CAACuB,IAAL,CAAU;AACR1E,cAAAA,IAAI,EAAE,SADE;AAER8E,cAAAA,KAAK,EAAEhD;AAFC,aAAV;AAID,WALD,MAKO;AACLJ,YAAAA,GAAG,GAAG7C,UAAU,CAAC4E,IAAD,EAAOvC,SAAP,EAAkBtB,QAAlB,CAAhB;AACA8D,YAAAA,SAAS,GAAG,EAAZ;;AACA,gBAAI,CAAC5B,IAAI,GAAG2B,IAAI,CAACxD,WAAb,KAA6B,IAAjC,EAAuC;AACrCyD,cAAAA,SAAS,CAACgB,IAAV,CAAe5C,IAAf;AACD;;AACD,gBAAIA,IAAI,GAAG2B,IAAI,CAAC,MAAD,CAAf,EAAyB;AACvBC,cAAAA,SAAS,CAACgB,IAAV,CAAe,aAAahG,WAAW,CAACoD,IAAD,CAAvC;AACD;;AACD,gBAAI2B,IAAI,CAAC,SAAD,CAAJ,IAAmB,CAACA,IAAI,CAAC9C,UAA7B,EAAyC;AACvC+C,cAAAA,SAAS,CAACgB,IAAV,CAAe,cAAcjB,IAAI,CAAC,SAAD,CAAjC;AACD;;AACDE,YAAAA,IAAI,GAAGD,SAAS,CAAC3C,IAAV,CAAe,KAAf,CAAP;AACAoC,YAAAA,IAAI,CAACuB,IAAL,CAAU;AACR1E,cAAAA,IAAI,EAAE,QADE;AAER0B,cAAAA,GAAG,EAAEA,GAFG;AAGRiC,cAAAA,IAAI,EAAEA,IAHE;AAIRU,cAAAA,OAAO,EAAEV,IAAI,CAAC9C;AAJN,aAAV;AAMA+C,YAAAA,MAAM,GAAGlC,GAAG,CAACb,MAAb;AACAuC,YAAAA,WAAW;AACXC,YAAAA,WAAW,IAAIO,MAAf;AACAN,YAAAA,OAAO,CAACoB,IAAR,CAAad,MAAb;AACD;AACF;AACF;;AACDC,MAAAA,aAAa,GAAG1F,IAAI,CAACmF,OAAD,CAApB;AACAQ,MAAAA,SAAS,GAAGD,aAAa,CAACA,aAAa,CAAChD,MAAd,GAAuB,CAAxB,CAAzB;AACAkD,MAAAA,UAAU,GAAG3D,aAAa,GAAGiD,WAAW,GAAGD,WAA3C;AACAY,MAAAA,CAAC,GAAGZ,WAAW,GAAG,CAAd,GAAkBhF,GAAG,CAAC2F,UAAU,GAAG1C,YAAd,EAA4ByC,SAA5B,CAArB,GAA8DA,SAAlE;;AACA,WAAKP,EAAE,GAAGM,aAAa,CAAChD,MAAd,GAAuB,CAAjC,EAAoC0C,EAAE,IAAI,CAA1C,EAA6C,EAAEA,EAA/C,EAAmD;AACjDK,QAAAA,MAAM,GAAGC,aAAa,CAACN,EAAD,CAAtB;;AACA,YAAIK,MAAM,IAAII,CAAd,EAAiB;AACfC,UAAAA,SAAS,GAAGL,MAAZ;AACA;AACD;AACF;;AACDM,MAAAA,UAAU,GAAG/C,oBAAoB,CAACN,MAAlC;;AACA,UAAIjB,QAAQ,IAAI,IAAhB,EAAsB;AACpBuE,QAAAA,aAAa,GAAG,CAAhB;AACAC,QAAAA,gBAAgB,GAAG,CAAnB;;AACA,aAAKb,EAAE,GAAG,CAAL,EAAQC,IAAI,GAAGL,IAAI,CAACtC,MAAzB,EAAiC0C,EAAE,GAAGC,IAAtC,EAA4C,EAAED,EAA9C,EAAkD;AAChDE,UAAAA,IAAI,GAAGN,IAAI,CAACI,EAAD,CAAX;;AACA,cAAIE,IAAI,CAACzD,IAAL,KAAc,QAAlB,EAA4B;AAC1B0B,YAAAA,GAAG,GAAG+B,IAAI,CAAC/B,GAAX,EAAgBiC,IAAI,GAAGF,IAAI,CAACE,IAA5B,EAAkCU,OAAO,GAAGZ,IAAI,CAACY,OAAjD;;AACA,gBAAIA,OAAO,KAAK,CAAhB,EAAmB;AACjBZ,cAAAA,IAAI,CAAC/C,IAAL,GAAY,MAAZ;AACD,aAFD,MAEO;AACLkD,cAAAA,MAAM,GAAGvF,GAAG,CAAC4F,SAAD,EAAYvC,GAAG,CAACb,MAAhB,CAAH,GAA6BT,aAA7B,GAA6C8D,UAAtD;AACAI,cAAAA,QAAQ,GAAGV,MAAM,GAAGS,OAApB;;AACA,kBAAIC,QAAQ,GAAG1E,QAAf,EAAyB;AACvB,oBAAIyE,OAAO,GAAG,GAAV,GAAgBzE,QAAQ,GAAGgE,MAA/B,EAAuC;AACrCO,kBAAAA,aAAa;AACbV,kBAAAA,IAAI,CAAC/C,IAAL,GAAY,MAAZ;AACD,iBAHD,MAGO;AACL0D,kBAAAA,gBAAgB;AAChBX,kBAAAA,IAAI,CAAC/C,IAAL,GAAY,SAAZ;AACD;AACF,eARD,MAQO;AACL+C,gBAAAA,IAAI,CAAC/C,IAAL,GAAY,MAAZ;AACD;AACF;AACF;AACF;AACF;;AACD6D,MAAAA,YAAY,GAAGhF,aAAa,CAAC,GAAD,EAAMa,aAAN,CAA5B;AACAoE,MAAAA,WAAW,GAAGpB,WAAW,GAAG,CAAd,IAAmBe,aAAa,GAAGC,gBAAgB,GAAG,GAAnC,GAAyChB,WAAW,GAAG,GAAxF;;AACA,WAAKG,EAAE,GAAG,CAAL,EAAQC,IAAI,GAAGL,IAAI,CAACtC,MAAzB,EAAiC0C,EAAE,GAAGC,IAAtC,EAA4C,EAAED,EAA9C,EAAkD;AAChDkB,QAAAA,CAAC,GAAGlB,EAAJ;AACAE,QAAAA,IAAI,GAAGN,IAAI,CAACI,EAAD,CAAX;;AACA,YAAIE,IAAI,CAACzD,IAAL,KAAc,SAAlB,EAA6B;AAC3B,cAAIyE,CAAC,KAAK,CAAV,EAAa;AACXvB,YAAAA,GAAG;AACJ;;AACDA,UAAAA,GAAG,CAACO,IAAI,CAACqB,KAAL,GAAa,GAAd,CAAH;AACD,SALD,MAKO;AACLpD,UAAAA,GAAG,GAAG+B,IAAI,CAAC/B,GAAX,EAAgBiC,IAAI,GAAGF,IAAI,CAACE,IAA5B,EAAkCU,OAAO,GAAGZ,IAAI,CAACY,OAAjD,EAA0D3D,IAAI,GAAG+C,IAAI,CAAC/C,IAAtE;;AACA,cAAId,QAAQ,IAAI,IAAhB,EAAsB;AACpB,gBAAI4E,WAAW,IAAI9D,IAAI,KAAK,MAA5B,EAAoC;AAClCA,cAAAA,IAAI,GAAG9B,QAAQ,CAACwB,aAAa,GAAGgB,eAAjB,EAAkCxB,QAAlC,CAAf;AACAsD,cAAAA,GAAG,CAACqB,YAAY,GAAG,EAAf,GAAoB7C,GAApB,GAA0B,IAA1B,GAAiChB,IAAI,CAACiD,IAAD,CAAtC,CAAH;AACA;AACD,aAJD,MAIO,IAAIjD,IAAI,KAAK,SAAb,EAAwB;AAC7BA,cAAAA,IAAI,GAAG9B,QAAQ,CAACwB,aAAa,GAAG8D,UAAhB,GAA6B7F,GAAG,CAAC4F,SAAD,EAAYvC,GAAG,CAACb,MAAhB,CAAjC,EAA0DjB,QAA1D,CAAf;AACAsD,cAAAA,GAAG,CAACqB,YAAY,GAAG,EAAf,GAAoBQ,GAAG,CAACrD,GAAD,EAAMuC,SAAN,CAAvB,GAA0C9C,oBAA1C,GAAiET,IAAI,CAACiD,IAAD,CAAJ,CAAW1C,OAAX,CAAmB,MAAnB,EAA2B,EAA3B,CAAlE,CAAH;AACA;AACD;AACF;;AACD,cAAIoD,OAAO,KAAK,CAAhB,EAAmB;AACjBnB,YAAAA,GAAG,CAACqB,YAAY,GAAG,EAAf,GAAoB7C,GAArB,CAAH;AACD,WAFD,MAEO;AACLwB,YAAAA,GAAG,CAACqB,YAAY,GAAG,EAAf,GAAoBQ,GAAG,CAACrD,GAAD,EAAMuC,SAAN,CAAvB,GAA0C9C,oBAA1C,GAAiEwC,IAAlE,CAAH;AACD;AACF;AACF;;AACD,UAAIb,MAAJ,EAAY;AACVI,QAAAA,GAAG;AACHA,QAAAA,GAAG,CAACF,WAAW,GAAG2B,MAAM,CAAC7B,MAAD,EAASE,WAAT,CAAT,GAAiCF,MAA7C,CAAH;AACD;;AACD,aAAOvE,OAAO,CAAC0E,MAAD,CAAd;AACD,KA9HD;AA+HD,GAtID;;AAuIA,WAAS8B,GAAT,CAAaC,GAAb,EAAkBC,GAAlB,EAAsB;AACpB,QAAIC,GAAJ,EAASjB,SAAT;AACAiB,IAAAA,GAAG,GAAGF,GAAG,CAACnE,MAAV;AACAoD,IAAAA,SAAS,GAAGgB,GAAG,GAAGC,GAAlB;AACA,WAAOF,GAAG,GAAG,EAAN,GAAWzF,aAAa,CAAC,GAAD,EAAM0E,SAAS,GAAG,CAAZ,GAAgBA,SAAhB,GAA4B,CAAlC,CAA/B;AACD;;AACD,WAASvB,UAAT,CAAoBsC,GAApB,EAAwB;AACtB,QAAIG,KAAJ,EAAWC,IAAX,EAAiBC,MAAjB;AACAF,IAAAA,KAAK,GAAGH,GAAG,CAACM,MAAJ,CAAW,CAAX,EAAcC,WAAd,EAAR;AACAH,IAAAA,IAAI,GAAGJ,GAAG,CAACQ,KAAJ,CAAU,CAAV,CAAP;AACAH,IAAAA,MAAM,GAAG,WAAWI,IAAX,CAAgBT,GAAhB,IAAuB,EAAvB,GAA4B,GAArC;AACA,WAAOG,KAAK,GAAG,EAAR,GAAaC,IAAb,GAAoBC,MAA3B;AACD;;AACD,WAASV,MAAT,CAAgBe,MAAhB,EAAwBC,MAAxB,EAA+B;AAC7B,WAAOD,MAAM,CAACzE,OAAP,CAAe,iCAAf,EAAkD,UAAStB,IAAT,EAAeiG,GAAf,EAAmB;AAC1E,UAAI5H,IAAJ;AACA,aAAO,CAACA,IAAI,GAAG2H,MAAM,CAACC,GAAD,CAAd,KAAwB,IAAxB,GACH5H,IADG,GAEH,OAAO4H,GAAP,GAAa,IAFjB;AAGD,KALM,CAAP;AAMD;;AACDC,EAAAA,MAAM,CAACC,OAAP,GAAiB;AACf9G,IAAAA,YAAY,EAAEA,YADC;AAEfD,IAAAA,qBAAqB,EAAEA;AAFR,GAAjB;;AAIA,WAASQ,aAAT,CAAuByF,GAAvB,EAA4Be,CAA5B,EAA8B;AAC5B,SAAK,IAAIC,CAAC,GAAG,EAAb,EAAiBD,CAAC,GAAG,CAArB,EAAwB,CAACA,CAAC,KAAK,CAAP,MAAcf,GAAG,IAAIA,GAArB,CAAxB,EAAmD,IAAIe,CAAC,GAAG,CAAR,EAAWC,CAAC,IAAIhB,GAAL;;AAC9D,WAAOgB,CAAP;AACD;AACF,CAlQD,EAkQGC,IAlQH,CAkQQ,IAlQR","sourcesContent":["// Generated by LiveScript 1.6.0\n(function(){\n  var ref$, id, find, sort, min, max, map, unlines, nameToRaw, dasherize, naturalJoin, wordWrap, wordwrap, getPreText, setHelpStyleDefaults, generateHelpForOption, generateHelp;\n  ref$ = require('prelude-ls'), id = ref$.id, find = ref$.find, sort = ref$.sort, min = ref$.min, max = ref$.max, map = ref$.map, unlines = ref$.unlines;\n  ref$ = require('./util'), nameToRaw = ref$.nameToRaw, dasherize = ref$.dasherize, naturalJoin = ref$.naturalJoin;\n  wordWrap = require('word-wrap');\n  wordwrap = function(a, b){\n    var ref$, indent, width;\n    ref$ = b === undefined\n      ? ['', a - 1]\n      : [repeatString$(' ', a), b - a - 1], indent = ref$[0], width = ref$[1];\n    return function(text){\n      return wordWrap(text, {\n        indent: indent,\n        width: width,\n        trim: true\n      });\n    };\n  };\n  getPreText = function(option, arg$, maxWidth){\n    var mainName, shortNames, ref$, longNames, type, description, aliasSeparator, typeSeparator, initialIndent, names, namesString, namesStringLen, typeSeparatorString, typeSeparatorStringLen, wrap;\n    mainName = option.option, shortNames = (ref$ = option.shortNames) != null\n      ? ref$\n      : [], longNames = (ref$ = option.longNames) != null\n      ? ref$\n      : [], type = option.type, description = option.description;\n    aliasSeparator = arg$.aliasSeparator, typeSeparator = arg$.typeSeparator, initialIndent = arg$.initialIndent;\n    if (option.negateName) {\n      mainName = \"no-\" + mainName;\n      if (longNames) {\n        longNames = map(function(it){\n          return \"no-\" + it;\n        }, longNames);\n      }\n    }\n    names = mainName.length === 1\n      ? [mainName].concat(shortNames, longNames)\n      : shortNames.concat([mainName], longNames);\n    namesString = map(nameToRaw, names).join(aliasSeparator);\n    namesStringLen = namesString.length;\n    typeSeparatorString = mainName === 'NUM' ? '::' : typeSeparator;\n    typeSeparatorStringLen = typeSeparatorString.length;\n    if (maxWidth != null && !option.boolean && initialIndent + namesStringLen + typeSeparatorStringLen + type.length > maxWidth) {\n      wrap = wordwrap(initialIndent + namesStringLen + typeSeparatorStringLen, maxWidth);\n      return namesString + \"\" + typeSeparatorString + wrap(type).replace(/^\\s+/, '');\n    } else {\n      return namesString + \"\" + (option.boolean\n        ? ''\n        : typeSeparatorString + \"\" + type);\n    }\n  };\n  setHelpStyleDefaults = function(helpStyle){\n    helpStyle.aliasSeparator == null && (helpStyle.aliasSeparator = ', ');\n    helpStyle.typeSeparator == null && (helpStyle.typeSeparator = ' ');\n    helpStyle.descriptionSeparator == null && (helpStyle.descriptionSeparator = '  ');\n    helpStyle.initialIndent == null && (helpStyle.initialIndent = 2);\n    helpStyle.secondaryIndent == null && (helpStyle.secondaryIndent = 4);\n    helpStyle.maxPadFactor == null && (helpStyle.maxPadFactor = 1.5);\n  };\n  generateHelpForOption = function(getOption, arg$){\n    var stdout, helpStyle, ref$;\n    stdout = arg$.stdout, helpStyle = (ref$ = arg$.helpStyle) != null\n      ? ref$\n      : {};\n    setHelpStyleDefaults(helpStyle);\n    return function(optionName){\n      var maxWidth, wrap, option, e, pre, defaultString, restPositionalString, description, fullDescription, that, preDescription, descriptionString, exampleString, examples, seperator;\n      maxWidth = stdout != null && stdout.isTTY ? stdout.columns - 1 : null;\n      wrap = maxWidth ? wordwrap(maxWidth) : id;\n      try {\n        option = getOption(dasherize(optionName));\n      } catch (e$) {\n        e = e$;\n        return e.message;\n      }\n      pre = getPreText(option, helpStyle);\n      defaultString = option['default'] && !option.negateName ? \"\\ndefault: \" + option['default'] : '';\n      restPositionalString = option.restPositional ? 'Everything after this option is considered a positional argument, even if it looks like an option.' : '';\n      description = option.longDescription || option.description && sentencize(option.description);\n      fullDescription = description && restPositionalString\n        ? description + \" \" + restPositionalString\n        : (that = description || restPositionalString) ? that : '';\n      preDescription = 'description:';\n      descriptionString = !fullDescription\n        ? ''\n        : maxWidth && fullDescription.length - 1 - preDescription.length > maxWidth\n          ? \"\\n\" + preDescription + \"\\n\" + wrap(fullDescription)\n          : \"\\n\" + preDescription + \" \" + fullDescription;\n      exampleString = (that = option.example) ? (examples = [].concat(that), examples.length > 1\n        ? \"\\nexamples:\\n\" + unlines(examples)\n        : \"\\nexample: \" + examples[0]) : '';\n      seperator = defaultString || descriptionString || exampleString ? \"\\n\" + repeatString$('=', pre.length) : '';\n      return pre + \"\" + seperator + defaultString + descriptionString + exampleString;\n    };\n  };\n  generateHelp = function(arg$){\n    var options, prepend, append, helpStyle, ref$, stdout, aliasSeparator, typeSeparator, descriptionSeparator, maxPadFactor, initialIndent, secondaryIndent;\n    options = arg$.options, prepend = arg$.prepend, append = arg$.append, helpStyle = (ref$ = arg$.helpStyle) != null\n      ? ref$\n      : {}, stdout = arg$.stdout;\n    setHelpStyleDefaults(helpStyle);\n    aliasSeparator = helpStyle.aliasSeparator, typeSeparator = helpStyle.typeSeparator, descriptionSeparator = helpStyle.descriptionSeparator, maxPadFactor = helpStyle.maxPadFactor, initialIndent = helpStyle.initialIndent, secondaryIndent = helpStyle.secondaryIndent;\n    return function(arg$){\n      var ref$, showHidden, interpolate, maxWidth, output, out, data, optionCount, totalPreLen, preLens, i$, len$, item, that, pre, descParts, desc, preLen, sortedPreLens, maxPreLen, preLenMean, x, padAmount, descSepLen, fullWrapCount, partialWrapCount, descLen, totalLen, initialSpace, wrapAllFull, i, wrap;\n      ref$ = arg$ != null\n        ? arg$\n        : {}, showHidden = ref$.showHidden, interpolate = ref$.interpolate;\n      maxWidth = stdout != null && stdout.isTTY ? stdout.columns - 1 : null;\n      output = [];\n      out = function(it){\n        return output.push(it != null ? it : '');\n      };\n      if (prepend) {\n        out(interpolate ? interp(prepend, interpolate) : prepend);\n        out();\n      }\n      data = [];\n      optionCount = 0;\n      totalPreLen = 0;\n      preLens = [];\n      for (i$ = 0, len$ = (ref$ = options).length; i$ < len$; ++i$) {\n        item = ref$[i$];\n        if (showHidden || !item.hidden) {\n          if (that = item.heading) {\n            data.push({\n              type: 'heading',\n              value: that\n            });\n          } else {\n            pre = getPreText(item, helpStyle, maxWidth);\n            descParts = [];\n            if ((that = item.description) != null) {\n              descParts.push(that);\n            }\n            if (that = item['enum']) {\n              descParts.push(\"either: \" + naturalJoin(that));\n            }\n            if (item['default'] && !item.negateName) {\n              descParts.push(\"default: \" + item['default']);\n            }\n            desc = descParts.join(' - ');\n            data.push({\n              type: 'option',\n              pre: pre,\n              desc: desc,\n              descLen: desc.length\n            });\n            preLen = pre.length;\n            optionCount++;\n            totalPreLen += preLen;\n            preLens.push(preLen);\n          }\n        }\n      }\n      sortedPreLens = sort(preLens);\n      maxPreLen = sortedPreLens[sortedPreLens.length - 1];\n      preLenMean = initialIndent + totalPreLen / optionCount;\n      x = optionCount > 2 ? min(preLenMean * maxPadFactor, maxPreLen) : maxPreLen;\n      for (i$ = sortedPreLens.length - 1; i$ >= 0; --i$) {\n        preLen = sortedPreLens[i$];\n        if (preLen <= x) {\n          padAmount = preLen;\n          break;\n        }\n      }\n      descSepLen = descriptionSeparator.length;\n      if (maxWidth != null) {\n        fullWrapCount = 0;\n        partialWrapCount = 0;\n        for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {\n          item = data[i$];\n          if (item.type === 'option') {\n            pre = item.pre, desc = item.desc, descLen = item.descLen;\n            if (descLen === 0) {\n              item.wrap = 'none';\n            } else {\n              preLen = max(padAmount, pre.length) + initialIndent + descSepLen;\n              totalLen = preLen + descLen;\n              if (totalLen > maxWidth) {\n                if (descLen / 2.5 > maxWidth - preLen) {\n                  fullWrapCount++;\n                  item.wrap = 'full';\n                } else {\n                  partialWrapCount++;\n                  item.wrap = 'partial';\n                }\n              } else {\n                item.wrap = 'none';\n              }\n            }\n          }\n        }\n      }\n      initialSpace = repeatString$(' ', initialIndent);\n      wrapAllFull = optionCount > 1 && fullWrapCount + partialWrapCount * 0.5 > optionCount * 0.5;\n      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {\n        i = i$;\n        item = data[i$];\n        if (item.type === 'heading') {\n          if (i !== 0) {\n            out();\n          }\n          out(item.value + \":\");\n        } else {\n          pre = item.pre, desc = item.desc, descLen = item.descLen, wrap = item.wrap;\n          if (maxWidth != null) {\n            if (wrapAllFull || wrap === 'full') {\n              wrap = wordwrap(initialIndent + secondaryIndent, maxWidth);\n              out(initialSpace + \"\" + pre + \"\\n\" + wrap(desc));\n              continue;\n            } else if (wrap === 'partial') {\n              wrap = wordwrap(initialIndent + descSepLen + max(padAmount, pre.length), maxWidth);\n              out(initialSpace + \"\" + pad(pre, padAmount) + descriptionSeparator + wrap(desc).replace(/^\\s+/, ''));\n              continue;\n            }\n          }\n          if (descLen === 0) {\n            out(initialSpace + \"\" + pre);\n          } else {\n            out(initialSpace + \"\" + pad(pre, padAmount) + descriptionSeparator + desc);\n          }\n        }\n      }\n      if (append) {\n        out();\n        out(interpolate ? interp(append, interpolate) : append);\n      }\n      return unlines(output);\n    };\n  };\n  function pad(str, num){\n    var len, padAmount;\n    len = str.length;\n    padAmount = num - len;\n    return str + \"\" + repeatString$(' ', padAmount > 0 ? padAmount : 0);\n  }\n  function sentencize(str){\n    var first, rest, period;\n    first = str.charAt(0).toUpperCase();\n    rest = str.slice(1);\n    period = /[\\.!\\?]$/.test(str) ? '' : '.';\n    return first + \"\" + rest + period;\n  }\n  function interp(string, object){\n    return string.replace(/{{([a-zA-Z$_][a-zA-Z$_0-9]*)}}/g, function(arg$, key){\n      var ref$;\n      return (ref$ = object[key]) != null\n        ? ref$\n        : \"{{\" + key + \"}}\";\n    });\n  }\n  module.exports = {\n    generateHelp: generateHelp,\n    generateHelpForOption: generateHelpForOption\n  };\n  function repeatString$(str, n){\n    for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;\n    return r;\n  }\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}