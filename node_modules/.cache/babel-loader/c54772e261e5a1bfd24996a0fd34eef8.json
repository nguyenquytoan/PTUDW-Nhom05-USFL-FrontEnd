{"ast":null,"code":"/**\n * @fileoverview Rule to disallow use of unmodified expressions in loop conditions\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst Traverser = require(\"../shared/traverser\"),\n      astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst SENTINEL_PATTERN = /(?:(?:Call|Class|Function|Member|New|Yield)Expression|Statement|Declaration)$/u;\nconst LOOP_PATTERN = /^(?:DoWhile|For|While)Statement$/u; // for-in/of statements don't have `test` property.\n\nconst GROUP_PATTERN = /^(?:BinaryExpression|ConditionalExpression)$/u;\nconst SKIP_PATTERN = /^(?:ArrowFunction|Class|Function)Expression$/u;\nconst DYNAMIC_PATTERN = /^(?:Call|Member|New|TaggedTemplate|Yield)Expression$/u;\n/**\n * @typedef {Object} LoopConditionInfo\n * @property {eslint-scope.Reference} reference - The reference.\n * @property {ASTNode} group - BinaryExpression or ConditionalExpression nodes\n *      that the reference is belonging to.\n * @property {Function} isInLoop - The predicate which checks a given reference\n *      is in this loop.\n * @property {boolean} modified - The flag that the reference is modified in\n *      this loop.\n */\n\n/**\n * Checks whether or not a given reference is a write reference.\n * @param {eslint-scope.Reference} reference A reference to check.\n * @returns {boolean} `true` if the reference is a write reference.\n */\n\nfunction isWriteReference(reference) {\n  if (reference.init) {\n    const def = reference.resolved && reference.resolved.defs[0];\n\n    if (!def || def.type !== \"Variable\" || def.parent.kind !== \"var\") {\n      return false;\n    }\n  }\n\n  return reference.isWrite();\n}\n/**\n * Checks whether or not a given loop condition info does not have the modified\n * flag.\n * @param {LoopConditionInfo} condition A loop condition info to check.\n * @returns {boolean} `true` if the loop condition info is \"unmodified\".\n */\n\n\nfunction isUnmodified(condition) {\n  return !condition.modified;\n}\n/**\n * Checks whether or not a given loop condition info does not have the modified\n * flag and does not have the group this condition belongs to.\n * @param {LoopConditionInfo} condition A loop condition info to check.\n * @returns {boolean} `true` if the loop condition info is \"unmodified\".\n */\n\n\nfunction isUnmodifiedAndNotBelongToGroup(condition) {\n  return !(condition.modified || condition.group);\n}\n/**\n * Checks whether or not a given reference is inside of a given node.\n * @param {ASTNode} node A node to check.\n * @param {eslint-scope.Reference} reference A reference to check.\n * @returns {boolean} `true` if the reference is inside of the node.\n */\n\n\nfunction isInRange(node, reference) {\n  const or = node.range;\n  const ir = reference.identifier.range;\n  return or[0] <= ir[0] && ir[1] <= or[1];\n}\n/**\n * Checks whether or not a given reference is inside of a loop node's condition.\n * @param {ASTNode} node A node to check.\n * @param {eslint-scope.Reference} reference A reference to check.\n * @returns {boolean} `true` if the reference is inside of the loop node's\n *      condition.\n */\n\n\nconst isInLoop = {\n  WhileStatement: isInRange,\n  DoWhileStatement: isInRange,\n\n  ForStatement(node, reference) {\n    return isInRange(node, reference) && !(node.init && isInRange(node.init, reference));\n  }\n\n};\n/**\n * Gets the function which encloses a given reference.\n * This supports only FunctionDeclaration.\n * @param {eslint-scope.Reference} reference A reference to get.\n * @returns {ASTNode|null} The function node or null.\n */\n\nfunction getEncloseFunctionDeclaration(reference) {\n  let node = reference.identifier;\n\n  while (node) {\n    if (node.type === \"FunctionDeclaration\") {\n      return node.id ? node : null;\n    }\n\n    node = node.parent;\n  }\n\n  return null;\n}\n/**\n * Updates the \"modified\" flags of given loop conditions with given modifiers.\n * @param {LoopConditionInfo[]} conditions The loop conditions to be updated.\n * @param {eslint-scope.Reference[]} modifiers The references to update.\n * @returns {void}\n */\n\n\nfunction updateModifiedFlag(conditions, modifiers) {\n  for (let i = 0; i < conditions.length; ++i) {\n    const condition = conditions[i];\n\n    for (let j = 0; !condition.modified && j < modifiers.length; ++j) {\n      const modifier = modifiers[j];\n      let funcNode, funcVar;\n      /*\n       * Besides checking for the condition being in the loop, we want to\n       * check the function that this modifier is belonging to is called\n       * in the loop.\n       * FIXME: This should probably be extracted to a function.\n       */\n\n      const inLoop = condition.isInLoop(modifier) || Boolean((funcNode = getEncloseFunctionDeclaration(modifier)) && (funcVar = astUtils.getVariableByName(modifier.from.upper, funcNode.id.name)) && funcVar.references.some(condition.isInLoop));\n      condition.modified = inLoop;\n    }\n  }\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow unmodified loop conditions\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-unmodified-loop-condition\"\n    },\n    schema: []\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    let groupMap = null;\n    /**\n     * Reports a given condition info.\n     * @param {LoopConditionInfo} condition A loop condition info to report.\n     * @returns {void}\n     */\n\n    function report(condition) {\n      const node = condition.reference.identifier;\n      context.report({\n        node,\n        message: \"'{{name}}' is not modified in this loop.\",\n        data: node\n      });\n    }\n    /**\n     * Registers given conditions to the group the condition belongs to.\n     * @param {LoopConditionInfo[]} conditions A loop condition info to\n     *      register.\n     * @returns {void}\n     */\n\n\n    function registerConditionsToGroup(conditions) {\n      for (let i = 0; i < conditions.length; ++i) {\n        const condition = conditions[i];\n\n        if (condition.group) {\n          let group = groupMap.get(condition.group);\n\n          if (!group) {\n            group = [];\n            groupMap.set(condition.group, group);\n          }\n\n          group.push(condition);\n        }\n      }\n    }\n    /**\n     * Reports references which are inside of unmodified groups.\n     * @param {LoopConditionInfo[]} conditions A loop condition info to report.\n     * @returns {void}\n     */\n\n\n    function checkConditionsInGroup(conditions) {\n      if (conditions.every(isUnmodified)) {\n        conditions.forEach(report);\n      }\n    }\n    /**\n     * Checks whether or not a given group node has any dynamic elements.\n     * @param {ASTNode} root A node to check.\n     *      This node is one of BinaryExpression or ConditionalExpression.\n     * @returns {boolean} `true` if the node is dynamic.\n     */\n\n\n    function hasDynamicExpressions(root) {\n      let retv = false;\n      Traverser.traverse(root, {\n        visitorKeys: sourceCode.visitorKeys,\n\n        enter(node) {\n          if (DYNAMIC_PATTERN.test(node.type)) {\n            retv = true;\n            this.break();\n          } else if (SKIP_PATTERN.test(node.type)) {\n            this.skip();\n          }\n        }\n\n      });\n      return retv;\n    }\n    /**\n     * Creates the loop condition information from a given reference.\n     * @param {eslint-scope.Reference} reference A reference to create.\n     * @returns {LoopConditionInfo|null} Created loop condition info, or null.\n     */\n\n\n    function toLoopCondition(reference) {\n      if (reference.init) {\n        return null;\n      }\n\n      let group = null;\n      let child = reference.identifier;\n      let node = child.parent;\n\n      while (node) {\n        if (SENTINEL_PATTERN.test(node.type)) {\n          if (LOOP_PATTERN.test(node.type) && node.test === child) {\n            // This reference is inside of a loop condition.\n            return {\n              reference,\n              group,\n              isInLoop: isInLoop[node.type].bind(null, node),\n              modified: false\n            };\n          } // This reference is outside of a loop condition.\n\n\n          break;\n        }\n        /*\n         * If it's inside of a group, OK if either operand is modified.\n         * So stores the group this reference belongs to.\n         */\n\n\n        if (GROUP_PATTERN.test(node.type)) {\n          // If this expression is dynamic, no need to check.\n          if (hasDynamicExpressions(node)) {\n            break;\n          } else {\n            group = node;\n          }\n        }\n\n        child = node;\n        node = node.parent;\n      }\n\n      return null;\n    }\n    /**\n     * Finds unmodified references which are inside of a loop condition.\n     * Then reports the references which are outside of groups.\n     * @param {eslint-scope.Variable} variable A variable to report.\n     * @returns {void}\n     */\n\n\n    function checkReferences(variable) {\n      // Gets references that exist in loop conditions.\n      const conditions = variable.references.map(toLoopCondition).filter(Boolean);\n\n      if (conditions.length === 0) {\n        return;\n      } // Registers the conditions to belonging groups.\n\n\n      registerConditionsToGroup(conditions); // Check the conditions are modified.\n\n      const modifiers = variable.references.filter(isWriteReference);\n\n      if (modifiers.length > 0) {\n        updateModifiedFlag(conditions, modifiers);\n      }\n      /*\n       * Reports the conditions which are not belonging to groups.\n       * Others will be reported after all variables are done.\n       */\n\n\n      conditions.filter(isUnmodifiedAndNotBelongToGroup).forEach(report);\n    }\n\n    return {\n      \"Program:exit\"() {\n        const queue = [context.getScope()];\n        groupMap = new Map();\n        let scope;\n\n        while (scope = queue.pop()) {\n          queue.push(...scope.childScopes);\n          scope.variables.forEach(checkReferences);\n        }\n\n        groupMap.forEach(checkConditionsInGroup);\n        groupMap = null;\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-unmodified-loop-condition.js"],"names":["Traverser","require","astUtils","SENTINEL_PATTERN","LOOP_PATTERN","GROUP_PATTERN","SKIP_PATTERN","DYNAMIC_PATTERN","isWriteReference","reference","init","def","resolved","defs","type","parent","kind","isWrite","isUnmodified","condition","modified","isUnmodifiedAndNotBelongToGroup","group","isInRange","node","or","range","ir","identifier","isInLoop","WhileStatement","DoWhileStatement","ForStatement","getEncloseFunctionDeclaration","id","updateModifiedFlag","conditions","modifiers","i","length","j","modifier","funcNode","funcVar","inLoop","Boolean","getVariableByName","from","upper","name","references","some","module","exports","meta","docs","description","category","recommended","url","schema","create","context","sourceCode","getSourceCode","groupMap","report","message","data","registerConditionsToGroup","get","set","push","checkConditionsInGroup","every","forEach","hasDynamicExpressions","root","retv","traverse","visitorKeys","enter","test","break","skip","toLoopCondition","child","bind","checkReferences","variable","map","filter","queue","getScope","Map","scope","pop","childScopes","variables"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to disallow use of unmodified expressions in loop conditions\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst Traverser = require(\"../shared/traverser\"),\n    astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst SENTINEL_PATTERN = /(?:(?:Call|Class|Function|Member|New|Yield)Expression|Statement|Declaration)$/u;\nconst LOOP_PATTERN = /^(?:DoWhile|For|While)Statement$/u; // for-in/of statements don't have `test` property.\nconst GROUP_PATTERN = /^(?:BinaryExpression|ConditionalExpression)$/u;\nconst SKIP_PATTERN = /^(?:ArrowFunction|Class|Function)Expression$/u;\nconst DYNAMIC_PATTERN = /^(?:Call|Member|New|TaggedTemplate|Yield)Expression$/u;\n\n/**\n * @typedef {Object} LoopConditionInfo\n * @property {eslint-scope.Reference} reference - The reference.\n * @property {ASTNode} group - BinaryExpression or ConditionalExpression nodes\n *      that the reference is belonging to.\n * @property {Function} isInLoop - The predicate which checks a given reference\n *      is in this loop.\n * @property {boolean} modified - The flag that the reference is modified in\n *      this loop.\n */\n\n/**\n * Checks whether or not a given reference is a write reference.\n * @param {eslint-scope.Reference} reference A reference to check.\n * @returns {boolean} `true` if the reference is a write reference.\n */\nfunction isWriteReference(reference) {\n    if (reference.init) {\n        const def = reference.resolved && reference.resolved.defs[0];\n\n        if (!def || def.type !== \"Variable\" || def.parent.kind !== \"var\") {\n            return false;\n        }\n    }\n    return reference.isWrite();\n}\n\n/**\n * Checks whether or not a given loop condition info does not have the modified\n * flag.\n * @param {LoopConditionInfo} condition A loop condition info to check.\n * @returns {boolean} `true` if the loop condition info is \"unmodified\".\n */\nfunction isUnmodified(condition) {\n    return !condition.modified;\n}\n\n/**\n * Checks whether or not a given loop condition info does not have the modified\n * flag and does not have the group this condition belongs to.\n * @param {LoopConditionInfo} condition A loop condition info to check.\n * @returns {boolean} `true` if the loop condition info is \"unmodified\".\n */\nfunction isUnmodifiedAndNotBelongToGroup(condition) {\n    return !(condition.modified || condition.group);\n}\n\n/**\n * Checks whether or not a given reference is inside of a given node.\n * @param {ASTNode} node A node to check.\n * @param {eslint-scope.Reference} reference A reference to check.\n * @returns {boolean} `true` if the reference is inside of the node.\n */\nfunction isInRange(node, reference) {\n    const or = node.range;\n    const ir = reference.identifier.range;\n\n    return or[0] <= ir[0] && ir[1] <= or[1];\n}\n\n/**\n * Checks whether or not a given reference is inside of a loop node's condition.\n * @param {ASTNode} node A node to check.\n * @param {eslint-scope.Reference} reference A reference to check.\n * @returns {boolean} `true` if the reference is inside of the loop node's\n *      condition.\n */\nconst isInLoop = {\n    WhileStatement: isInRange,\n    DoWhileStatement: isInRange,\n    ForStatement(node, reference) {\n        return (\n            isInRange(node, reference) &&\n            !(node.init && isInRange(node.init, reference))\n        );\n    }\n};\n\n/**\n * Gets the function which encloses a given reference.\n * This supports only FunctionDeclaration.\n * @param {eslint-scope.Reference} reference A reference to get.\n * @returns {ASTNode|null} The function node or null.\n */\nfunction getEncloseFunctionDeclaration(reference) {\n    let node = reference.identifier;\n\n    while (node) {\n        if (node.type === \"FunctionDeclaration\") {\n            return node.id ? node : null;\n        }\n\n        node = node.parent;\n    }\n\n    return null;\n}\n\n/**\n * Updates the \"modified\" flags of given loop conditions with given modifiers.\n * @param {LoopConditionInfo[]} conditions The loop conditions to be updated.\n * @param {eslint-scope.Reference[]} modifiers The references to update.\n * @returns {void}\n */\nfunction updateModifiedFlag(conditions, modifiers) {\n\n    for (let i = 0; i < conditions.length; ++i) {\n        const condition = conditions[i];\n\n        for (let j = 0; !condition.modified && j < modifiers.length; ++j) {\n            const modifier = modifiers[j];\n            let funcNode, funcVar;\n\n            /*\n             * Besides checking for the condition being in the loop, we want to\n             * check the function that this modifier is belonging to is called\n             * in the loop.\n             * FIXME: This should probably be extracted to a function.\n             */\n            const inLoop = condition.isInLoop(modifier) || Boolean(\n                (funcNode = getEncloseFunctionDeclaration(modifier)) &&\n                (funcVar = astUtils.getVariableByName(modifier.from.upper, funcNode.id.name)) &&\n                funcVar.references.some(condition.isInLoop)\n            );\n\n            condition.modified = inLoop;\n        }\n    }\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow unmodified loop conditions\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-unmodified-loop-condition\"\n        },\n\n        schema: []\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        let groupMap = null;\n\n        /**\n         * Reports a given condition info.\n         * @param {LoopConditionInfo} condition A loop condition info to report.\n         * @returns {void}\n         */\n        function report(condition) {\n            const node = condition.reference.identifier;\n\n            context.report({\n                node,\n                message: \"'{{name}}' is not modified in this loop.\",\n                data: node\n            });\n        }\n\n        /**\n         * Registers given conditions to the group the condition belongs to.\n         * @param {LoopConditionInfo[]} conditions A loop condition info to\n         *      register.\n         * @returns {void}\n         */\n        function registerConditionsToGroup(conditions) {\n            for (let i = 0; i < conditions.length; ++i) {\n                const condition = conditions[i];\n\n                if (condition.group) {\n                    let group = groupMap.get(condition.group);\n\n                    if (!group) {\n                        group = [];\n                        groupMap.set(condition.group, group);\n                    }\n                    group.push(condition);\n                }\n            }\n        }\n\n        /**\n         * Reports references which are inside of unmodified groups.\n         * @param {LoopConditionInfo[]} conditions A loop condition info to report.\n         * @returns {void}\n         */\n        function checkConditionsInGroup(conditions) {\n            if (conditions.every(isUnmodified)) {\n                conditions.forEach(report);\n            }\n        }\n\n        /**\n         * Checks whether or not a given group node has any dynamic elements.\n         * @param {ASTNode} root A node to check.\n         *      This node is one of BinaryExpression or ConditionalExpression.\n         * @returns {boolean} `true` if the node is dynamic.\n         */\n        function hasDynamicExpressions(root) {\n            let retv = false;\n\n            Traverser.traverse(root, {\n                visitorKeys: sourceCode.visitorKeys,\n                enter(node) {\n                    if (DYNAMIC_PATTERN.test(node.type)) {\n                        retv = true;\n                        this.break();\n                    } else if (SKIP_PATTERN.test(node.type)) {\n                        this.skip();\n                    }\n                }\n            });\n\n            return retv;\n        }\n\n        /**\n         * Creates the loop condition information from a given reference.\n         * @param {eslint-scope.Reference} reference A reference to create.\n         * @returns {LoopConditionInfo|null} Created loop condition info, or null.\n         */\n        function toLoopCondition(reference) {\n            if (reference.init) {\n                return null;\n            }\n\n            let group = null;\n            let child = reference.identifier;\n            let node = child.parent;\n\n            while (node) {\n                if (SENTINEL_PATTERN.test(node.type)) {\n                    if (LOOP_PATTERN.test(node.type) && node.test === child) {\n\n                        // This reference is inside of a loop condition.\n                        return {\n                            reference,\n                            group,\n                            isInLoop: isInLoop[node.type].bind(null, node),\n                            modified: false\n                        };\n                    }\n\n                    // This reference is outside of a loop condition.\n                    break;\n                }\n\n                /*\n                 * If it's inside of a group, OK if either operand is modified.\n                 * So stores the group this reference belongs to.\n                 */\n                if (GROUP_PATTERN.test(node.type)) {\n\n                    // If this expression is dynamic, no need to check.\n                    if (hasDynamicExpressions(node)) {\n                        break;\n                    } else {\n                        group = node;\n                    }\n                }\n\n                child = node;\n                node = node.parent;\n            }\n\n            return null;\n        }\n\n        /**\n         * Finds unmodified references which are inside of a loop condition.\n         * Then reports the references which are outside of groups.\n         * @param {eslint-scope.Variable} variable A variable to report.\n         * @returns {void}\n         */\n        function checkReferences(variable) {\n\n            // Gets references that exist in loop conditions.\n            const conditions = variable\n                .references\n                .map(toLoopCondition)\n                .filter(Boolean);\n\n            if (conditions.length === 0) {\n                return;\n            }\n\n            // Registers the conditions to belonging groups.\n            registerConditionsToGroup(conditions);\n\n            // Check the conditions are modified.\n            const modifiers = variable.references.filter(isWriteReference);\n\n            if (modifiers.length > 0) {\n                updateModifiedFlag(conditions, modifiers);\n            }\n\n            /*\n             * Reports the conditions which are not belonging to groups.\n             * Others will be reported after all variables are done.\n             */\n            conditions\n                .filter(isUnmodifiedAndNotBelongToGroup)\n                .forEach(report);\n        }\n\n        return {\n            \"Program:exit\"() {\n                const queue = [context.getScope()];\n\n                groupMap = new Map();\n\n                let scope;\n\n                while ((scope = queue.pop())) {\n                    queue.push(...scope.childScopes);\n                    scope.variables.forEach(checkReferences);\n                }\n\n                groupMap.forEach(checkConditionsInGroup);\n                groupMap = null;\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}