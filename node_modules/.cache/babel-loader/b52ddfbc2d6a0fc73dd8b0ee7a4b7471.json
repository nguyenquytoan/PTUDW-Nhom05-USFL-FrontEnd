{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar pathUtils = require(\"../../utils/path\");\n\nvar patternUtils = require(\"../../utils/pattern\");\n\nvar EntryFilter =\n/** @class */\nfunction () {\n  function EntryFilter(options, micromatchOptions) {\n    this.options = options;\n    this.micromatchOptions = micromatchOptions;\n    this.index = new Map();\n  }\n  /**\r\n   * Returns filter for directories.\r\n   */\n\n\n  EntryFilter.prototype.getFilter = function (positive, negative) {\n    var _this = this;\n\n    var positiveRe = patternUtils.convertPatternsToRe(positive, this.micromatchOptions);\n    var negativeRe = patternUtils.convertPatternsToRe(negative, this.micromatchOptions);\n    return function (entry) {\n      return _this.filter(entry, positiveRe, negativeRe);\n    };\n  };\n  /**\r\n   * Returns true if entry must be added to result.\r\n   */\n\n\n  EntryFilter.prototype.filter = function (entry, positiveRe, negativeRe) {\n    // Exclude duplicate results\n    if (this.options.unique) {\n      if (this.isDuplicateEntry(entry)) {\n        return false;\n      }\n\n      this.createIndexRecord(entry);\n    } // Filter files and directories by options\n\n\n    if (this.onlyFileFilter(entry) || this.onlyDirectoryFilter(entry)) {\n      return false;\n    }\n\n    if (this.isSkippedByAbsoluteNegativePatterns(entry, negativeRe)) {\n      return false;\n    }\n\n    return this.isMatchToPatterns(entry.path, positiveRe) && !this.isMatchToPatterns(entry.path, negativeRe);\n  };\n  /**\r\n   * Return true if the entry already has in the cross reader index.\r\n   */\n\n\n  EntryFilter.prototype.isDuplicateEntry = function (entry) {\n    return this.index.has(entry.path);\n  };\n  /**\r\n   * Create record in the cross reader index.\r\n   */\n\n\n  EntryFilter.prototype.createIndexRecord = function (entry) {\n    this.index.set(entry.path, undefined);\n  };\n  /**\r\n   * Returns true for non-files if the «onlyFiles» option is enabled.\r\n   */\n\n\n  EntryFilter.prototype.onlyFileFilter = function (entry) {\n    return this.options.onlyFiles && !entry.isFile();\n  };\n  /**\r\n   * Returns true for non-directories if the «onlyDirectories» option is enabled.\r\n   */\n\n\n  EntryFilter.prototype.onlyDirectoryFilter = function (entry) {\n    return this.options.onlyDirectories && !entry.isDirectory();\n  };\n  /**\r\n   * Return true when `absolute` option is enabled and matched to the negative patterns.\r\n   */\n\n\n  EntryFilter.prototype.isSkippedByAbsoluteNegativePatterns = function (entry, negativeRe) {\n    if (!this.options.absolute) {\n      return false;\n    }\n\n    var fullpath = pathUtils.makeAbsolute(this.options.cwd, entry.path);\n    return this.isMatchToPatterns(fullpath, negativeRe);\n  };\n  /**\r\n   * Return true when entry match to provided patterns.\r\n   *\r\n   * First, just trying to apply patterns to the path.\r\n   * Second, trying to apply patterns to the path with final slash (need to micromatch to support «directory/**» patterns).\r\n   */\n\n\n  EntryFilter.prototype.isMatchToPatterns = function (filepath, patternsRe) {\n    return patternUtils.matchAny(filepath, patternsRe) || patternUtils.matchAny(filepath + '/', patternsRe);\n  };\n\n  return EntryFilter;\n}();\n\nexports.default = EntryFilter;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/fast-glob/out/providers/filters/entry.js"],"names":["Object","defineProperty","exports","value","pathUtils","require","patternUtils","EntryFilter","options","micromatchOptions","index","Map","prototype","getFilter","positive","negative","_this","positiveRe","convertPatternsToRe","negativeRe","entry","filter","unique","isDuplicateEntry","createIndexRecord","onlyFileFilter","onlyDirectoryFilter","isSkippedByAbsoluteNegativePatterns","isMatchToPatterns","path","has","set","undefined","onlyFiles","isFile","onlyDirectories","isDirectory","absolute","fullpath","makeAbsolute","cwd","filepath","patternsRe","matchAny","default"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar pathUtils = require(\"../../utils/path\");\r\nvar patternUtils = require(\"../../utils/pattern\");\r\nvar EntryFilter = /** @class */ (function () {\r\n    function EntryFilter(options, micromatchOptions) {\r\n        this.options = options;\r\n        this.micromatchOptions = micromatchOptions;\r\n        this.index = new Map();\r\n    }\r\n    /**\r\n     * Returns filter for directories.\r\n     */\r\n    EntryFilter.prototype.getFilter = function (positive, negative) {\r\n        var _this = this;\r\n        var positiveRe = patternUtils.convertPatternsToRe(positive, this.micromatchOptions);\r\n        var negativeRe = patternUtils.convertPatternsToRe(negative, this.micromatchOptions);\r\n        return function (entry) { return _this.filter(entry, positiveRe, negativeRe); };\r\n    };\r\n    /**\r\n     * Returns true if entry must be added to result.\r\n     */\r\n    EntryFilter.prototype.filter = function (entry, positiveRe, negativeRe) {\r\n        // Exclude duplicate results\r\n        if (this.options.unique) {\r\n            if (this.isDuplicateEntry(entry)) {\r\n                return false;\r\n            }\r\n            this.createIndexRecord(entry);\r\n        }\r\n        // Filter files and directories by options\r\n        if (this.onlyFileFilter(entry) || this.onlyDirectoryFilter(entry)) {\r\n            return false;\r\n        }\r\n        if (this.isSkippedByAbsoluteNegativePatterns(entry, negativeRe)) {\r\n            return false;\r\n        }\r\n        return this.isMatchToPatterns(entry.path, positiveRe) && !this.isMatchToPatterns(entry.path, negativeRe);\r\n    };\r\n    /**\r\n     * Return true if the entry already has in the cross reader index.\r\n     */\r\n    EntryFilter.prototype.isDuplicateEntry = function (entry) {\r\n        return this.index.has(entry.path);\r\n    };\r\n    /**\r\n     * Create record in the cross reader index.\r\n     */\r\n    EntryFilter.prototype.createIndexRecord = function (entry) {\r\n        this.index.set(entry.path, undefined);\r\n    };\r\n    /**\r\n     * Returns true for non-files if the «onlyFiles» option is enabled.\r\n     */\r\n    EntryFilter.prototype.onlyFileFilter = function (entry) {\r\n        return this.options.onlyFiles && !entry.isFile();\r\n    };\r\n    /**\r\n     * Returns true for non-directories if the «onlyDirectories» option is enabled.\r\n     */\r\n    EntryFilter.prototype.onlyDirectoryFilter = function (entry) {\r\n        return this.options.onlyDirectories && !entry.isDirectory();\r\n    };\r\n    /**\r\n     * Return true when `absolute` option is enabled and matched to the negative patterns.\r\n     */\r\n    EntryFilter.prototype.isSkippedByAbsoluteNegativePatterns = function (entry, negativeRe) {\r\n        if (!this.options.absolute) {\r\n            return false;\r\n        }\r\n        var fullpath = pathUtils.makeAbsolute(this.options.cwd, entry.path);\r\n        return this.isMatchToPatterns(fullpath, negativeRe);\r\n    };\r\n    /**\r\n     * Return true when entry match to provided patterns.\r\n     *\r\n     * First, just trying to apply patterns to the path.\r\n     * Second, trying to apply patterns to the path with final slash (need to micromatch to support «directory/**» patterns).\r\n     */\r\n    EntryFilter.prototype.isMatchToPatterns = function (filepath, patternsRe) {\r\n        return patternUtils.matchAny(filepath, patternsRe) || patternUtils.matchAny(filepath + '/', patternsRe);\r\n    };\r\n    return EntryFilter;\r\n}());\r\nexports.default = EntryFilter;\r\n"]},"metadata":{},"sourceType":"script"}