{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\n\nconst crypto = require('crypto');\n\nconst https = require('https');\n\nconst http = require('http');\n\nconst net = require('net');\n\nconst tls = require('tls');\n\nconst url = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\n\nconst EventTarget = require('./event-target');\n\nconst extension = require('./extension');\n\nconst Receiver = require('./receiver');\n\nconst Sender = require('./sender');\n\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = require('./constants');\n\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst protocolVersions = [8, 13];\nconst closeTimeout = 30 * 1000;\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\n\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|url.Url|url.URL)} address The URL to which to connect\n   * @param {(String|String[])} protocols The subprotocols\n   * @param {Object} options Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n    this.readyState = WebSocket.CONNECTING;\n    this.protocol = '';\n    this._binaryType = BINARY_TYPES[0];\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = '';\n    this._closeTimer = null;\n    this._closeCode = 1006;\n    this._extensions = {};\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (Array.isArray(protocols)) {\n        protocols = protocols.join(', ');\n      } else if (typeof protocols === 'object' && protocols !== null) {\n        options = protocols;\n        protocols = undefined;\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._isServer = true;\n    }\n  }\n\n  get CONNECTING() {\n    return WebSocket.CONNECTING;\n  }\n\n  get CLOSING() {\n    return WebSocket.CLOSING;\n  }\n\n  get CLOSED() {\n    return WebSocket.CLOSED;\n  }\n\n  get OPEN() {\n    return WebSocket.OPEN;\n  }\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */\n\n\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n    this._binaryType = type; //\n    // Allow to change `binaryType` on the fly.\n    //\n\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n  /**\n   * @type {Number}\n   */\n\n\n  get bufferedAmount() {\n    if (!this._socket) return 0; //\n    // `socket.bufferSize` is `undefined` if the socket is closed.\n    //\n\n    return (this._socket.bufferSize || 0) + this._sender._bufferedBytes;\n  }\n  /**\n   * @type {String}\n   */\n\n\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Number} maxPayload The maximum allowed message size\n   * @private\n   */\n\n\n  setSocket(socket, head, maxPayload) {\n    const receiver = new Receiver(this._binaryType, this._extensions, maxPayload);\n    this._sender = new Sender(socket, this._extensions);\n    this._receiver = receiver;\n    this._socket = socket;\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n    socket.setTimeout(0);\n    socket.setNoDelay();\n    if (head.length > 0) socket.unshift(head);\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n    this.readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n\n\n  emitClose() {\n    this.readyState = WebSocket.CLOSED;\n\n    if (!this._socket) {\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} code Status code explaining why the connection is closing\n   * @param {String} data A string explaining why the connection is closing\n   * @public\n   */\n\n\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (this._closeFrameSent && this._closeFrameReceived) this._socket.end();\n      return;\n    }\n\n    this.readyState = WebSocket.CLOSING;\n\n    this._sender.close(code, data, !this._isServer, err => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n      this._closeFrameSent = true;\n      if (this._closeFrameReceived) this._socket.end();\n    }); //\n    // Specify a timeout for the closing handshake to complete.\n    //\n\n\n    this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), closeTimeout);\n  }\n  /**\n   * Send a ping.\n   *\n   * @param {*} data The data to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when the ping is sent\n   * @public\n   */\n\n\n  ping(data, mask, cb) {\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (this.readyState !== WebSocket.OPEN) {\n      const err = new Error(`WebSocket is not open: readyState ${this.readyState} ` + `(${readyStates[this.readyState]})`);\n      if (cb) return cb(err);\n      throw err;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    if (mask === undefined) mask = !this._isServer;\n\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n  /**\n   * Send a pong.\n   *\n   * @param {*} data The data to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when the pong is sent\n   * @public\n   */\n\n\n  pong(data, mask, cb) {\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (this.readyState !== WebSocket.OPEN) {\n      const err = new Error(`WebSocket is not open: readyState ${this.readyState} ` + `(${readyStates[this.readyState]})`);\n      if (cb) return cb(err);\n      throw err;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    if (mask === undefined) mask = !this._isServer;\n\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when data is written out\n   * @public\n   */\n\n\n  send(data, options, cb) {\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (this.readyState !== WebSocket.OPEN) {\n      const err = new Error(`WebSocket is not open: readyState ${this.readyState} ` + `(${readyStates[this.readyState]})`);\n      if (cb) return cb(err);\n      throw err;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    const opts = Object.assign({\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true\n    }, options);\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n\n\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this._socket) {\n      this.readyState = WebSocket.CLOSING;\n\n      this._socket.destroy();\n    }\n  }\n\n}\n\nreadyStates.forEach((readyState, i) => {\n  WebSocket[readyState] = i;\n}); //\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n\n['open', 'error', 'close', 'message'].forEach(method => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    /**\n     * Return the listener of the event.\n     *\n     * @return {(Function|undefined)} The event listener or `undefined`\n     * @public\n     */\n    get() {\n      const listeners = this.listeners(method);\n\n      for (var i = 0; i < listeners.length; i++) {\n        if (listeners[i]._listener) return listeners[i]._listener;\n      }\n\n      return undefined;\n    },\n\n    /**\n     * Add a listener for the event.\n     *\n     * @param {Function} listener The listener to add\n     * @public\n     */\n    set(listener) {\n      const listeners = this.listeners(method);\n\n      for (var i = 0; i < listeners.length; i++) {\n        //\n        // Remove only the listeners added via `addEventListener`.\n        //\n        if (listeners[i]._listener) this.removeListener(method, listeners[i]);\n      }\n\n      this.addEventListener(method, listener);\n    }\n\n  });\n});\nWebSocket.prototype.addEventListener = EventTarget.addEventListener;\nWebSocket.prototype.removeEventListener = EventTarget.removeEventListener;\nmodule.exports = WebSocket;\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|url.Url|url.URL)} address The URL to which to connect\n * @param {String} protocols The subprotocols\n * @param {Object} options Connection options\n * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable\n *     permessage-deflate\n * @param {Number} options.handshakeTimeout Timeout in milliseconds for the\n *     handshake request\n * @param {Number} options.protocolVersion Value of the `Sec-WebSocket-Version`\n *     header\n * @param {String} options.origin Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {Number} options.maxPayload The maximum allowed message size\n * @param {Boolean} options.followRedirects Whether or not to follow redirects\n * @param {Number} options.maxRedirects The maximum number of redirects allowed\n * @private\n */\n\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = Object.assign({\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10\n  }, options, {\n    createConnection: undefined,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: undefined,\n    auth: undefined,\n    host: undefined,\n    path: undefined,\n    port: undefined\n  });\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(`Unsupported protocol version: ${opts.protocolVersion} ` + `(supported versions: ${protocolVersions.join(', ')})`);\n  }\n\n  var parsedUrl;\n\n  if (typeof address === 'object' && address.href !== undefined) {\n    parsedUrl = address;\n    websocket.url = address.href;\n  } else {\n    //\n    // The WHATWG URL constructor is not available on Node.js < 6.13.0\n    //\n    parsedUrl = url.URL ? new url.URL(address) : url.parse(address);\n    websocket.url = address;\n  }\n\n  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';\n\n  if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {\n    throw new Error(`Invalid URL: ${websocket.url}`);\n  }\n\n  const isSecure = parsedUrl.protocol === 'wss:' || parsedUrl.protocol === 'https:';\n  const defaultPort = isSecure ? 443 : 80;\n  const key = crypto.randomBytes(16).toString('base64');\n  const get = isSecure ? https.get : http.get;\n  const path = parsedUrl.search ? `${parsedUrl.pathname || '/'}${parsedUrl.search}` : parsedUrl.pathname || '/';\n  var perMessageDeflate;\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[') ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;\n  opts.headers = Object.assign({\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket'\n  }, opts.headers);\n  opts.path = path;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(opts.perMessageDeflate !== true ? opts.perMessageDeflate : {}, false, opts.maxPayload);\n    opts.headers['Sec-WebSocket-Extensions'] = extension.format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n\n  if (protocols) {\n    opts.headers['Sec-WebSocket-Protocol'] = protocols;\n  }\n\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n\n  if (parsedUrl.auth) {\n    opts.auth = parsedUrl.auth;\n  } else if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isUnixSocket) {\n    const parts = path.split(':');\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  var req = websocket._req = get(opts);\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', err => {\n    if (websocket._req.aborted) return;\n    req = websocket._req = null;\n    websocket.readyState = WebSocket.CLOSING;\n    websocket.emit('error', err);\n    websocket.emitClose();\n  });\n  req.on('response', res => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n      const addr = url.URL ? new url.URL(location, address) : url.resolve(address, location);\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(websocket, req, `Unexpected server response: ${res.statusCode}`);\n    }\n  });\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res); //\n    // The user may have closed the connection from a listener of the `upgrade`\n    // event.\n    //\n\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n    req = websocket._req = null;\n    const digest = crypto.createHash('sha1').update(key + GUID).digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    const protList = (protocols || '').split(/, */);\n    var protError;\n\n    if (!protocols && serverProt) {\n      protError = 'Server sent a subprotocol but none was requested';\n    } else if (protocols && !serverProt) {\n      protError = 'Server sent no subprotocol';\n    } else if (serverProt && !protList.includes(serverProt)) {\n      protError = 'Server sent an invalid subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket.protocol = serverProt;\n\n    if (perMessageDeflate) {\n      try {\n        const extensions = extension.parse(res.headers['sec-websocket-extensions']);\n\n        if (extensions[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n          websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Extensions header');\n        return;\n      }\n    }\n\n    websocket.setSocket(socket, head, opts.maxPayload);\n  });\n}\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\n\n\nfunction netConnect(options) {\n  //\n  // Override `options.path` only if `options` is a copy of the original options\n  // object. This is always true on Node.js >= 8 but not on Node.js 6 where\n  // `options.socketPath` might be `undefined` even if the `socketPath` option\n  // was originally set.\n  //\n  if (options.protocolVersion) options.path = options.socketPath;\n  return net.connect(options);\n}\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\n\n\nfunction tlsConnect(options) {\n  options.path = undefined;\n  options.servername = options.servername || options.host;\n  return tls.connect(options);\n}\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket)} stream The request to abort or the\n *     socket to destroy\n * @param {String} message The error message\n * @private\n */\n\n\nfunction abortHandshake(websocket, stream, message) {\n  websocket.readyState = WebSocket.CLOSING;\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream.abort();\n    stream.once('abort', websocket.emitClose.bind(websocket));\n    websocket.emit('error', err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {String} reason The reason for closing\n * @private\n */\n\n\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._socket.removeListener('data', socketOnData);\n\n  websocket._socket.resume();\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n  if (code === 1005) websocket.close();else websocket.close(code, reason);\n}\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\n\n\nfunction receiverOnDrain() {\n  this[kWebSocket]._socket.resume();\n}\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\n\n\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  websocket._socket.removeListener('data', socketOnData);\n\n  websocket.readyState = WebSocket.CLOSING;\n  websocket._closeCode = err[kStatusCode];\n  websocket.emit('error', err);\n\n  websocket._socket.destroy();\n}\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\n\n\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message\n * @private\n */\n\n\nfunction receiverOnMessage(data) {\n  this[kWebSocket].emit('message', data);\n}\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\n\n\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n  websocket.pong(data, !websocket._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\n\n\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */\n\n\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n  this.removeListener('close', socketOnClose);\n  this.removeListener('end', socketOnEnd);\n  websocket.readyState = WebSocket.CLOSING; //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk and emitted synchronously in a single\n  // `'data'` event.\n  //\n\n  websocket._socket.read();\n\n  websocket._receiver.end();\n\n  this.removeListener('data', socketOnData);\n  this[kWebSocket] = undefined;\n  clearTimeout(websocket._closeTimer);\n\n  if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\n\n\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */\n\n\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n  websocket.readyState = WebSocket.CLOSING;\n\n  websocket._receiver.end();\n\n  this.end();\n}\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */\n\n\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n  websocket.readyState = WebSocket.CLOSING;\n  this.destroy();\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-environment-jsdom-fourteen/node_modules/ws/lib/websocket.js"],"names":["EventEmitter","require","crypto","https","http","net","tls","url","PerMessageDeflate","EventTarget","extension","Receiver","Sender","BINARY_TYPES","EMPTY_BUFFER","GUID","kStatusCode","kWebSocket","NOOP","readyStates","protocolVersions","closeTimeout","WebSocket","constructor","address","protocols","options","readyState","CONNECTING","protocol","_binaryType","_closeFrameReceived","_closeFrameSent","_closeMessage","_closeTimer","_closeCode","_extensions","_receiver","_sender","_socket","_isServer","_redirects","Array","isArray","join","undefined","initAsClient","CLOSING","CLOSED","OPEN","binaryType","type","includes","bufferedAmount","bufferSize","_bufferedBytes","extensions","Object","keys","setSocket","socket","head","maxPayload","receiver","on","receiverOnConclude","receiverOnDrain","receiverOnError","receiverOnMessage","receiverOnPing","receiverOnPong","setTimeout","setNoDelay","length","unshift","socketOnClose","socketOnData","socketOnEnd","socketOnError","emit","emitClose","extensionName","cleanup","removeAllListeners","close","code","data","msg","abortHandshake","_req","end","err","destroy","bind","ping","mask","cb","Error","toString","pong","send","opts","assign","binary","compress","fin","terminate","forEach","i","method","defineProperty","prototype","get","listeners","_listener","set","listener","removeListener","addEventListener","removeEventListener","module","exports","websocket","protocolVersion","perMessageDeflate","followRedirects","maxRedirects","createConnection","socketPath","hostname","timeout","auth","host","path","port","RangeError","parsedUrl","href","URL","parse","isUnixSocket","pathname","isSecure","defaultPort","key","randomBytes","search","tlsConnect","netConnect","startsWith","slice","headers","Connection","Upgrade","handshakeTimeout","format","offer","origin","Origin","username","password","parts","split","req","aborted","res","location","statusCode","abort","addr","resolve","digest","createHash","update","serverProt","protList","protError","accept","connect","servername","stream","message","captureStackTrace","setHeader","once","reason","resume","receiverOnFinish","read","clearTimeout","_writableState","finished","errorEmitted","chunk","write","pause"],"mappings":"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","sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst crypto = require('crypto');\nconst https = require('https');\nconst http = require('http');\nconst net = require('net');\nconst tls = require('tls');\nconst url = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst EventTarget = require('./event-target');\nconst extension = require('./extension');\nconst Receiver = require('./receiver');\nconst Sender = require('./sender');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = require('./constants');\n\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst protocolVersions = [8, 13];\nconst closeTimeout = 30 * 1000;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|url.Url|url.URL)} address The URL to which to connect\n   * @param {(String|String[])} protocols The subprotocols\n   * @param {Object} options Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this.readyState = WebSocket.CONNECTING;\n    this.protocol = '';\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = '';\n    this._closeTimer = null;\n    this._closeCode = 1006;\n    this._extensions = {};\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (Array.isArray(protocols)) {\n        protocols = protocols.join(', ');\n      } else if (typeof protocols === 'object' && protocols !== null) {\n        options = protocols;\n        protocols = undefined;\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._isServer = true;\n    }\n  }\n\n  get CONNECTING() {\n    return WebSocket.CONNECTING;\n  }\n  get CLOSING() {\n    return WebSocket.CLOSING;\n  }\n  get CLOSED() {\n    return WebSocket.CLOSED;\n  }\n  get OPEN() {\n    return WebSocket.OPEN;\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return 0;\n\n    //\n    // `socket.bufferSize` is `undefined` if the socket is closed.\n    //\n    return (this._socket.bufferSize || 0) + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Number} maxPayload The maximum allowed message size\n   * @private\n   */\n  setSocket(socket, head, maxPayload) {\n    const receiver = new Receiver(\n      this._binaryType,\n      this._extensions,\n      maxPayload\n    );\n\n    this._sender = new Sender(socket, this._extensions);\n    this._receiver = receiver;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    socket.setTimeout(0);\n    socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this.readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    this.readyState = WebSocket.CLOSED;\n\n    if (!this._socket) {\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} code Status code explaining why the connection is closing\n   * @param {String} data A string explaining why the connection is closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (this._closeFrameSent && this._closeFrameReceived) this._socket.end();\n      return;\n    }\n\n    this.readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n      if (this._closeFrameReceived) this._socket.end();\n    });\n\n    //\n    // Specify a timeout for the closing handshake to complete.\n    //\n    this._closeTimer = setTimeout(\n      this._socket.destroy.bind(this._socket),\n      closeTimeout\n    );\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} data The data to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (this.readyState !== WebSocket.OPEN) {\n      const err = new Error(\n        `WebSocket is not open: readyState ${this.readyState} ` +\n          `(${readyStates[this.readyState]})`\n      );\n\n      if (cb) return cb(err);\n      throw err;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} data The data to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (this.readyState !== WebSocket.OPEN) {\n      const err = new Error(\n        `WebSocket is not open: readyState ${this.readyState} ` +\n          `(${readyStates[this.readyState]})`\n      );\n\n      if (cb) return cb(err);\n      throw err;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (this.readyState !== WebSocket.OPEN) {\n      const err = new Error(\n        `WebSocket is not open: readyState ${this.readyState} ` +\n          `(${readyStates[this.readyState]})`\n      );\n\n      if (cb) return cb(err);\n      throw err;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    const opts = Object.assign(\n      {\n        binary: typeof data !== 'string',\n        mask: !this._isServer,\n        compress: true,\n        fin: true\n      },\n      options\n    );\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this._socket) {\n      this.readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\nreadyStates.forEach((readyState, i) => {\n  WebSocket[readyState] = i;\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    /**\n     * Return the listener of the event.\n     *\n     * @return {(Function|undefined)} The event listener or `undefined`\n     * @public\n     */\n    get() {\n      const listeners = this.listeners(method);\n      for (var i = 0; i < listeners.length; i++) {\n        if (listeners[i]._listener) return listeners[i]._listener;\n      }\n\n      return undefined;\n    },\n    /**\n     * Add a listener for the event.\n     *\n     * @param {Function} listener The listener to add\n     * @public\n     */\n    set(listener) {\n      const listeners = this.listeners(method);\n      for (var i = 0; i < listeners.length; i++) {\n        //\n        // Remove only the listeners added via `addEventListener`.\n        //\n        if (listeners[i]._listener) this.removeListener(method, listeners[i]);\n      }\n      this.addEventListener(method, listener);\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = EventTarget.addEventListener;\nWebSocket.prototype.removeEventListener = EventTarget.removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|url.Url|url.URL)} address The URL to which to connect\n * @param {String} protocols The subprotocols\n * @param {Object} options Connection options\n * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable\n *     permessage-deflate\n * @param {Number} options.handshakeTimeout Timeout in milliseconds for the\n *     handshake request\n * @param {Number} options.protocolVersion Value of the `Sec-WebSocket-Version`\n *     header\n * @param {String} options.origin Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {Number} options.maxPayload The maximum allowed message size\n * @param {Boolean} options.followRedirects Whether or not to follow redirects\n * @param {Number} options.maxRedirects The maximum number of redirects allowed\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = Object.assign(\n    {\n      protocolVersion: protocolVersions[1],\n      maxPayload: 100 * 1024 * 1024,\n      perMessageDeflate: true,\n      followRedirects: false,\n      maxRedirects: 10\n    },\n    options,\n    {\n      createConnection: undefined,\n      socketPath: undefined,\n      hostname: undefined,\n      protocol: undefined,\n      timeout: undefined,\n      method: undefined,\n      auth: undefined,\n      host: undefined,\n      path: undefined,\n      port: undefined\n    }\n  );\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  var parsedUrl;\n\n  if (typeof address === 'object' && address.href !== undefined) {\n    parsedUrl = address;\n    websocket.url = address.href;\n  } else {\n    //\n    // The WHATWG URL constructor is not available on Node.js < 6.13.0\n    //\n    parsedUrl = url.URL ? new url.URL(address) : url.parse(address);\n    websocket.url = address;\n  }\n\n  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';\n\n  if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {\n    throw new Error(`Invalid URL: ${websocket.url}`);\n  }\n\n  const isSecure =\n    parsedUrl.protocol === 'wss:' || parsedUrl.protocol === 'https:';\n  const defaultPort = isSecure ? 443 : 80;\n  const key = crypto.randomBytes(16).toString('base64');\n  const get = isSecure ? https.get : http.get;\n  const path = parsedUrl.search\n    ? `${parsedUrl.pathname || '/'}${parsedUrl.search}`\n    : parsedUrl.pathname || '/';\n  var perMessageDeflate;\n\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = Object.assign(\n    {\n      'Sec-WebSocket-Version': opts.protocolVersion,\n      'Sec-WebSocket-Key': key,\n      Connection: 'Upgrade',\n      Upgrade: 'websocket'\n    },\n    opts.headers\n  );\n  opts.path = path;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = extension.format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols) {\n    opts.headers['Sec-WebSocket-Protocol'] = protocols;\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.auth) {\n    opts.auth = parsedUrl.auth;\n  } else if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isUnixSocket) {\n    const parts = path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  var req = (websocket._req = get(opts));\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (websocket._req.aborted) return;\n\n    req = websocket._req = null;\n    websocket.readyState = WebSocket.CLOSING;\n    websocket.emit('error', err);\n    websocket.emitClose();\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      const addr = url.URL\n        ? new url.URL(location, address)\n        : url.resolve(address, location);\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the `upgrade`\n    // event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    const digest = crypto\n      .createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    const protList = (protocols || '').split(/, */);\n    var protError;\n\n    if (!protocols && serverProt) {\n      protError = 'Server sent a subprotocol but none was requested';\n    } else if (protocols && !serverProt) {\n      protError = 'Server sent no subprotocol';\n    } else if (serverProt && !protList.includes(serverProt)) {\n      protError = 'Server sent an invalid subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket.protocol = serverProt;\n\n    if (perMessageDeflate) {\n      try {\n        const extensions = extension.parse(\n          res.headers['sec-websocket-extensions']\n        );\n\n        if (extensions[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n          websocket._extensions[\n            PerMessageDeflate.extensionName\n          ] = perMessageDeflate;\n        }\n      } catch (err) {\n        abortHandshake(\n          websocket,\n          socket,\n          'Invalid Sec-WebSocket-Extensions header'\n        );\n        return;\n      }\n    }\n\n    websocket.setSocket(socket, head, opts.maxPayload);\n  });\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  //\n  // Override `options.path` only if `options` is a copy of the original options\n  // object. This is always true on Node.js >= 8 but not on Node.js 6 where\n  // `options.socketPath` might be `undefined` even if the `socketPath` option\n  // was originally set.\n  //\n  if (options.protocolVersion) options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n  options.servername = options.servername || options.host;\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket)} stream The request to abort or the\n *     socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket.readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream.abort();\n    stream.once('abort', websocket.emitClose.bind(websocket));\n    websocket.emit('error', err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {String} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._socket.removeListener('data', socketOnData);\n  websocket._socket.resume();\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  this[kWebSocket]._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  websocket._socket.removeListener('data', socketOnData);\n\n  websocket.readyState = WebSocket.CLOSING;\n  websocket._closeCode = err[kStatusCode];\n  websocket.emit('error', err);\n  websocket._socket.destroy();\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message\n * @private\n */\nfunction receiverOnMessage(data) {\n  this[kWebSocket].emit('message', data);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  websocket.pong(data, !websocket._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('end', socketOnEnd);\n\n  websocket.readyState = WebSocket.CLOSING;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk and emitted synchronously in a single\n  // `'data'` event.\n  //\n  websocket._socket.read();\n  websocket._receiver.end();\n\n  this.removeListener('data', socketOnData);\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket.readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  websocket.readyState = WebSocket.CLOSING;\n  this.destroy();\n}\n"]},"metadata":{},"sourceType":"script"}