{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst mergeCache = new WeakMap();\n/**\n * Merges two given objects and caches the result to avoid computation if same objects passed as arguments again.\n * @example\n * // performs Object.assign(first, second), stores the result in WeakMap and returns result\n * cachedMerge({a: 1}, {a: 2})\n * {a: 2}\n *  // when same arguments passed, gets the result from WeakMap and returns it.\n * cachedMerge({a: 1}, {a: 2})\n * {a: 2}\n * @param {object} first first object\n * @param {object} second second object\n * @returns {object} merged object of first and second object\n */\n\nconst cachedMerge = (first, second) => {\n  let innerCache = mergeCache.get(first);\n\n  if (innerCache === undefined) {\n    innerCache = new WeakMap();\n    mergeCache.set(first, innerCache);\n  }\n\n  const prevMerge = innerCache.get(second);\n  if (prevMerge !== undefined) return prevMerge;\n  const newMerge = Object.assign({}, first, second);\n  innerCache.set(second, newMerge);\n  return newMerge;\n};\n\nmodule.exports = cachedMerge;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/webpack/lib/util/cachedMerge.js"],"names":["mergeCache","WeakMap","cachedMerge","first","second","innerCache","get","undefined","set","prevMerge","newMerge","Object","assign","module","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,UAAU,GAAG,IAAIC,OAAJ,EAAnB;AAEA;;;;;;;;;;;;;;AAaA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,MAAIC,UAAU,GAAGL,UAAU,CAACM,GAAX,CAAeH,KAAf,CAAjB;;AACA,MAAIE,UAAU,KAAKE,SAAnB,EAA8B;AAC7BF,IAAAA,UAAU,GAAG,IAAIJ,OAAJ,EAAb;AACAD,IAAAA,UAAU,CAACQ,GAAX,CAAeL,KAAf,EAAsBE,UAAtB;AACA;;AACD,QAAMI,SAAS,GAAGJ,UAAU,CAACC,GAAX,CAAeF,MAAf,CAAlB;AACA,MAAIK,SAAS,KAAKF,SAAlB,EAA6B,OAAOE,SAAP;AAC7B,QAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,KAAlB,EAAyBC,MAAzB,CAAjB;AACAC,EAAAA,UAAU,CAACG,GAAX,CAAeJ,MAAf,EAAuBM,QAAvB;AACA,SAAOA,QAAP;AACA,CAXD;;AAaAG,MAAM,CAACC,OAAP,GAAiBZ,WAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst mergeCache = new WeakMap();\n\n/**\n * Merges two given objects and caches the result to avoid computation if same objects passed as arguments again.\n * @example\n * // performs Object.assign(first, second), stores the result in WeakMap and returns result\n * cachedMerge({a: 1}, {a: 2})\n * {a: 2}\n *  // when same arguments passed, gets the result from WeakMap and returns it.\n * cachedMerge({a: 1}, {a: 2})\n * {a: 2}\n * @param {object} first first object\n * @param {object} second second object\n * @returns {object} merged object of first and second object\n */\nconst cachedMerge = (first, second) => {\n\tlet innerCache = mergeCache.get(first);\n\tif (innerCache === undefined) {\n\t\tinnerCache = new WeakMap();\n\t\tmergeCache.set(first, innerCache);\n\t}\n\tconst prevMerge = innerCache.get(second);\n\tif (prevMerge !== undefined) return prevMerge;\n\tconst newMerge = Object.assign({}, first, second);\n\tinnerCache.set(second, newMerge);\n\treturn newMerge;\n};\n\nmodule.exports = cachedMerge;\n"]},"metadata":{},"sourceType":"script"}