{"ast":null,"code":"this.workbox = this.workbox || {};\n\nthis.workbox.cacheableResponse = function (exports, WorkboxError_mjs, assert_mjs, getFriendlyURL_mjs, logger_mjs) {\n  'use strict';\n\n  try {\n    self['workbox:cacheable-response:4.3.1'] && _();\n  } catch (e) {} // eslint-disable-line\n\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * This class allows you to set up rules determining what\n   * status codes and/or headers need to be present in order for a\n   * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n   * to be considered cacheable.\n   *\n   * @memberof workbox.cacheableResponse\n   */\n\n\n  class CacheableResponse {\n    /**\n     * To construct a new CacheableResponse instance you must provide at least\n     * one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config = {}) {\n      {\n        if (!(config.statuses || config.headers)) {\n          throw new WorkboxError_mjs.WorkboxError('statuses-or-headers-required', {\n            moduleName: 'workbox-cacheable-response',\n            className: 'CacheableResponse',\n            funcName: 'constructor'\n          });\n        }\n\n        if (config.statuses) {\n          assert_mjs.assert.isArray(config.statuses, {\n            moduleName: 'workbox-cacheable-response',\n            className: 'CacheableResponse',\n            funcName: 'constructor',\n            paramName: 'config.statuses'\n          });\n        }\n\n        if (config.headers) {\n          assert_mjs.assert.isType(config.headers, 'object', {\n            moduleName: 'workbox-cacheable-response',\n            className: 'CacheableResponse',\n            funcName: 'constructor',\n            paramName: 'config.headers'\n          });\n        }\n      }\n      this._statuses = config.statuses;\n      this._headers = config.headers;\n    }\n    /**\n     * Checks a response to see whether it's cacheable or not, based on this\n     * object's configuration.\n     *\n     * @param {Response} response The response whose cacheability is being\n     * checked.\n     * @return {boolean} `true` if the `Response` is cacheable, and `false`\n     * otherwise.\n     */\n\n\n    isResponseCacheable(response) {\n      {\n        assert_mjs.assert.isInstance(response, Response, {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'isResponseCacheable',\n          paramName: 'response'\n        });\n      }\n      let cacheable = true;\n\n      if (this._statuses) {\n        cacheable = this._statuses.includes(response.status);\n      }\n\n      if (this._headers && cacheable) {\n        cacheable = Object.keys(this._headers).some(headerName => {\n          return response.headers.get(headerName) === this._headers[headerName];\n        });\n      }\n\n      {\n        if (!cacheable) {\n          logger_mjs.logger.groupCollapsed(`The request for ` + `'${getFriendlyURL_mjs.getFriendlyURL(response.url)}' returned a response that does ` + `not meet the criteria for being cached.`);\n          logger_mjs.logger.groupCollapsed(`View cacheability criteria here.`);\n          logger_mjs.logger.log(`Cacheable statuses: ` + JSON.stringify(this._statuses));\n          logger_mjs.logger.log(`Cacheable headers: ` + JSON.stringify(this._headers, null, 2));\n          logger_mjs.logger.groupEnd();\n          const logFriendlyHeaders = {};\n          response.headers.forEach((value, key) => {\n            logFriendlyHeaders[key] = value;\n          });\n          logger_mjs.logger.groupCollapsed(`View response status and headers here.`);\n          logger_mjs.logger.log(`Response status: ` + response.status);\n          logger_mjs.logger.log(`Response headers: ` + JSON.stringify(logFriendlyHeaders, null, 2));\n          logger_mjs.logger.groupEnd();\n          logger_mjs.logger.groupCollapsed(`View full response details here.`);\n          logger_mjs.logger.log(response.headers);\n          logger_mjs.logger.log(response);\n          logger_mjs.logger.groupEnd();\n          logger_mjs.logger.groupEnd();\n        }\n      }\n      return cacheable;\n    }\n\n  }\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * A class implementing the `cacheWillUpdate` lifecycle callback. This makes it\n   * easier to add in cacheability checks to requests made via Workbox's built-in\n   * strategies.\n   *\n   * @memberof workbox.cacheableResponse\n   */\n\n\n  class Plugin {\n    /**\n     * To construct a new cacheable response Plugin instance you must provide at\n     * least one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config) {\n      this._cacheableResponse = new CacheableResponse(config);\n    }\n    /**\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {boolean}\n     * @private\n     */\n\n\n    cacheWillUpdate({\n      response\n    }) {\n      if (this._cacheableResponse.isResponseCacheable(response)) {\n        return response;\n      }\n\n      return null;\n    }\n\n  }\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n\n  exports.CacheableResponse = CacheableResponse;\n  exports.Plugin = Plugin;\n  return exports;\n}({}, workbox.core._private, workbox.core._private, workbox.core._private, workbox.core._private);","map":{"version":3,"sources":["../_version.mjs","../CacheableResponse.mjs","../Plugin.mjs","../index.mjs"],"names":["self","_","constructor","config","WorkboxError","moduleName","className","funcName","assert","paramName","isResponseCacheable","cacheable","response","headerName","logger","getFriendlyURL","JSON","logFriendlyHeaders","cacheWillUpdate"],"mappings":"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","sourcesContent":["try{self['workbox:cacheable-response:4.3.1']&&_()}catch(e){}// eslint-disable-line","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {getFriendlyURL} from 'workbox-core/_private/getFriendlyURL.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport './_version.mjs';\n\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof workbox.cacheableResponse\n */\nclass CacheableResponse {\n  /**\n   * To construct a new CacheableResponse instance you must provide at least\n   * one of the `config` properties.\n   *\n   * If both `statuses` and `headers` are specified, then both conditions must\n   * be met for the `Response` to be considered cacheable.\n   *\n   * @param {Object} config\n   * @param {Array<number>} [config.statuses] One or more status codes that a\n   * `Response` can have and be considered cacheable.\n   * @param {Object<string,string>} [config.headers] A mapping of header names\n   * and expected values that a `Response` can have and be considered cacheable.\n   * If multiple headers are provided, only one needs to be present.\n   */\n  constructor(config = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(config.statuses || config.headers)) {\n        throw new WorkboxError('statuses-or-headers-required', {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor',\n        });\n      }\n\n      if (config.statuses) {\n        assert.isArray(config.statuses, {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor',\n          paramName: 'config.statuses',\n        });\n      }\n\n      if (config.headers) {\n        assert.isType(config.headers, 'object', {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor',\n          paramName: 'config.headers',\n        });\n      }\n    }\n\n    this._statuses = config.statuses;\n    this._headers = config.headers;\n  }\n\n  /**\n   * Checks a response to see whether it's cacheable or not, based on this\n   * object's configuration.\n   *\n   * @param {Response} response The response whose cacheability is being\n   * checked.\n   * @return {boolean} `true` if the `Response` is cacheable, and `false`\n   * otherwise.\n   */\n  isResponseCacheable(response) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(response, Response, {\n        moduleName: 'workbox-cacheable-response',\n        className: 'CacheableResponse',\n        funcName: 'isResponseCacheable',\n        paramName: 'response',\n      });\n    }\n\n    let cacheable = true;\n\n    if (this._statuses) {\n      cacheable = this._statuses.includes(response.status);\n    }\n\n    if (this._headers && cacheable) {\n      cacheable = Object.keys(this._headers).some((headerName) => {\n        return response.headers.get(headerName) === this._headers[headerName];\n      });\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!cacheable) {\n        logger.groupCollapsed(`The request for ` +\n          `'${getFriendlyURL(response.url)}' returned a response that does ` +\n          `not meet the criteria for being cached.`);\n\n        logger.groupCollapsed(`View cacheability criteria here.`);\n        logger.log(`Cacheable statuses: ` +\n          JSON.stringify(this._statuses));\n        logger.log(`Cacheable headers: ` +\n          JSON.stringify(this._headers, null, 2));\n        logger.groupEnd();\n\n        const logFriendlyHeaders = {};\n        response.headers.forEach((value, key) => {\n          logFriendlyHeaders[key] = value;\n        });\n\n        logger.groupCollapsed(`View response status and headers here.`);\n        logger.log(`Response status: ` + response.status);\n        logger.log(`Response headers: ` +\n          JSON.stringify(logFriendlyHeaders, null, 2));\n        logger.groupEnd();\n\n        logger.groupCollapsed(`View full response details here.`);\n        logger.log(response.headers);\n        logger.log(response);\n        logger.groupEnd();\n\n        logger.groupEnd();\n      }\n    }\n\n    return cacheable;\n  }\n}\n\nexport {CacheableResponse};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {CacheableResponse} from './CacheableResponse.mjs';\nimport './_version.mjs';\n\n/**\n * A class implementing the `cacheWillUpdate` lifecycle callback. This makes it\n * easier to add in cacheability checks to requests made via Workbox's built-in\n * strategies.\n *\n * @memberof workbox.cacheableResponse\n */\nclass Plugin {\n  /**\n   * To construct a new cacheable response Plugin instance you must provide at\n   * least one of the `config` properties.\n   *\n   * If both `statuses` and `headers` are specified, then both conditions must\n   * be met for the `Response` to be considered cacheable.\n   *\n   * @param {Object} config\n   * @param {Array<number>} [config.statuses] One or more status codes that a\n   * `Response` can have and be considered cacheable.\n   * @param {Object<string,string>} [config.headers] A mapping of header names\n   * and expected values that a `Response` can have and be considered cacheable.\n   * If multiple headers are provided, only one needs to be present.\n   */\n  constructor(config) {\n    this._cacheableResponse = new CacheableResponse(config);\n  }\n\n  /**\n   * @param {Object} options\n   * @param {Response} options.response\n   * @return {boolean}\n   * @private\n   */\n  cacheWillUpdate({response}) {\n    if (this._cacheableResponse.isResponseCacheable(response)) {\n      return response;\n    }\n    return null;\n  }\n}\n\nexport {Plugin};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {CacheableResponse} from './CacheableResponse.mjs';\nimport {Plugin} from './Plugin.mjs';\nimport './_version.mjs';\n\n\n/**\n * @namespace workbox.cacheableResponse\n */\n\nexport {\n  CacheableResponse,\n  Plugin,\n};\n"]},"metadata":{},"sourceType":"script"}