{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of function declaration identifiers as variables.\n * @author Ian Christian Myers\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow reassigning `function` declarations\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-func-assign\"\n    },\n    schema: []\n  },\n\n  create(context) {\n    /**\n     * Reports a reference if is non initializer and writable.\n     * @param {References} references Collection of reference to check.\n     * @returns {void}\n     */\n    function checkReference(references) {\n      astUtils.getModifyingReferences(references).forEach(reference => {\n        context.report({\n          node: reference.identifier,\n          message: \"'{{name}}' is a function.\",\n          data: {\n            name: reference.identifier.name\n          }\n        });\n      });\n    }\n    /**\n     * Finds and reports references that are non initializer and writable.\n     * @param {Variable} variable A variable to check.\n     * @returns {void}\n     */\n\n\n    function checkVariable(variable) {\n      if (variable.defs[0].type === \"FunctionName\") {\n        checkReference(variable.references);\n      }\n    }\n    /**\n     * Checks parameters of a given function node.\n     * @param {ASTNode} node A function node to check.\n     * @returns {void}\n     */\n\n\n    function checkForFunction(node) {\n      context.getDeclaredVariables(node).forEach(checkVariable);\n    }\n\n    return {\n      FunctionDeclaration: checkForFunction,\n      FunctionExpression: checkForFunction\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-func-assign.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","create","context","checkReference","references","getModifyingReferences","forEach","reference","report","node","identifier","message","data","name","checkVariable","variable","defs","checkForFunction","getDeclaredVariables","FunctionDeclaration","FunctionExpression"],"mappings":"AAAA;;;;AAKA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,SADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,8CADX;AAEFC,MAAAA,QAAQ,EAAE,iBAFR;AAGFC,MAAAA,WAAW,EAAE,IAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE;AAVN,GADO;;AAcbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;;;;;AAKA,aAASC,cAAT,CAAwBC,UAAxB,EAAoC;AAChCf,MAAAA,QAAQ,CAACgB,sBAAT,CAAgCD,UAAhC,EAA4CE,OAA5C,CAAoDC,SAAS,IAAI;AAC7DL,QAAAA,OAAO,CAACM,MAAR,CAAe;AAAEC,UAAAA,IAAI,EAAEF,SAAS,CAACG,UAAlB;AAA8BC,UAAAA,OAAO,EAAE,2BAAvC;AAAoEC,UAAAA,IAAI,EAAE;AAAEC,YAAAA,IAAI,EAAEN,SAAS,CAACG,UAAV,CAAqBG;AAA7B;AAA1E,SAAf;AACH,OAFD;AAGH;AAED;;;;;;;AAKA,aAASC,aAAT,CAAuBC,QAAvB,EAAiC;AAC7B,UAAIA,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAiBtB,IAAjB,KAA0B,cAA9B,EAA8C;AAC1CS,QAAAA,cAAc,CAACY,QAAQ,CAACX,UAAV,CAAd;AACH;AACJ;AAED;;;;;;;AAKA,aAASa,gBAAT,CAA0BR,IAA1B,EAAgC;AAC5BP,MAAAA,OAAO,CAACgB,oBAAR,CAA6BT,IAA7B,EAAmCH,OAAnC,CAA2CQ,aAA3C;AACH;;AAED,WAAO;AACHK,MAAAA,mBAAmB,EAAEF,gBADlB;AAEHG,MAAAA,kBAAkB,EAAEH;AAFjB,KAAP;AAIH;;AAnDY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to flag use of function declaration identifiers as variables.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow reassigning `function` declarations\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-func-assign\"\n        },\n\n        schema: []\n    },\n\n    create(context) {\n\n        /**\n         * Reports a reference if is non initializer and writable.\n         * @param {References} references Collection of reference to check.\n         * @returns {void}\n         */\n        function checkReference(references) {\n            astUtils.getModifyingReferences(references).forEach(reference => {\n                context.report({ node: reference.identifier, message: \"'{{name}}' is a function.\", data: { name: reference.identifier.name } });\n            });\n        }\n\n        /**\n         * Finds and reports references that are non initializer and writable.\n         * @param {Variable} variable A variable to check.\n         * @returns {void}\n         */\n        function checkVariable(variable) {\n            if (variable.defs[0].type === \"FunctionName\") {\n                checkReference(variable.references);\n            }\n        }\n\n        /**\n         * Checks parameters of a given function node.\n         * @param {ASTNode} node A function node to check.\n         * @returns {void}\n         */\n        function checkForFunction(node) {\n            context.getDeclaredVariables(node).forEach(checkVariable);\n        }\n\n        return {\n            FunctionDeclaration: checkForFunction,\n            FunctionExpression: checkForFunction\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}