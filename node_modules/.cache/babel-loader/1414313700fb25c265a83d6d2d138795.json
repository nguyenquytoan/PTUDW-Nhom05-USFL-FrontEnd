{"ast":null,"code":"var isMergeable = require('./is-mergeable');\n\nvar optimizeProperties = require('./properties/optimize');\n\nvar sortSelectors = require('../level-1/sort-selectors');\n\nvar tidyRules = require('../level-1/tidy-rules');\n\nvar OptimizationLevel = require('../../options/optimization-level').OptimizationLevel;\n\nvar serializeBody = require('../../writer/one-time').body;\n\nvar serializeRules = require('../../writer/one-time').rules;\n\nvar Token = require('../../tokenizer/token');\n\nfunction mergeAdjacent(tokens, context) {\n  var lastToken = [null, [], []];\n  var options = context.options;\n  var adjacentSpace = options.compatibility.selectors.adjacentSpace;\n  var selectorsSortingMethod = options.level[OptimizationLevel.One].selectorsSortingMethod;\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var mergeLimit = options.compatibility.selectors.mergeLimit;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    var token = tokens[i];\n\n    if (token[0] != Token.RULE) {\n      lastToken = [null, [], []];\n      continue;\n    }\n\n    if (lastToken[0] == Token.RULE && serializeRules(token[1]) == serializeRules(lastToken[1])) {\n      Array.prototype.push.apply(lastToken[2], token[2]);\n      optimizeProperties(lastToken[2], true, true, context);\n      token[2] = [];\n    } else if (lastToken[0] == Token.RULE && serializeBody(token[2]) == serializeBody(lastToken[2]) && isMergeable(serializeRules(token[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) && isMergeable(serializeRules(lastToken[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) && lastToken[1].length < mergeLimit) {\n      lastToken[1] = tidyRules(lastToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);\n      lastToken[1] = lastToken.length > 1 ? sortSelectors(lastToken[1], selectorsSortingMethod) : lastToken[1];\n      token[2] = [];\n    } else {\n      lastToken = token;\n    }\n  }\n}\n\nmodule.exports = mergeAdjacent;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/clean-css/lib/optimizer/level-2/merge-adjacent.js"],"names":["isMergeable","require","optimizeProperties","sortSelectors","tidyRules","OptimizationLevel","serializeBody","body","serializeRules","rules","Token","mergeAdjacent","tokens","context","lastToken","options","adjacentSpace","compatibility","selectors","selectorsSortingMethod","level","One","mergeablePseudoClasses","mergeablePseudoElements","mergeLimit","multiplePseudoMerging","i","l","length","token","RULE","Array","prototype","push","apply","concat","warnings","module","exports"],"mappings":"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","sourcesContent":["var isMergeable = require('./is-mergeable');\n\nvar optimizeProperties = require('./properties/optimize');\n\nvar sortSelectors = require('../level-1/sort-selectors');\nvar tidyRules = require('../level-1/tidy-rules');\n\nvar OptimizationLevel = require('../../options/optimization-level').OptimizationLevel;\n\nvar serializeBody = require('../../writer/one-time').body;\nvar serializeRules = require('../../writer/one-time').rules;\n\nvar Token = require('../../tokenizer/token');\n\nfunction mergeAdjacent(tokens, context) {\n  var lastToken = [null, [], []];\n  var options = context.options;\n  var adjacentSpace = options.compatibility.selectors.adjacentSpace;\n  var selectorsSortingMethod = options.level[OptimizationLevel.One].selectorsSortingMethod;\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var mergeLimit = options.compatibility.selectors.mergeLimit;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    var token = tokens[i];\n\n    if (token[0] != Token.RULE) {\n      lastToken = [null, [], []];\n      continue;\n    }\n\n    if (lastToken[0] == Token.RULE && serializeRules(token[1]) == serializeRules(lastToken[1])) {\n      Array.prototype.push.apply(lastToken[2], token[2]);\n      optimizeProperties(lastToken[2], true, true, context);\n      token[2] = [];\n    } else if (lastToken[0] == Token.RULE && serializeBody(token[2]) == serializeBody(lastToken[2]) &&\n        isMergeable(serializeRules(token[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) &&\n        isMergeable(serializeRules(lastToken[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) &&\n        lastToken[1].length < mergeLimit) {\n      lastToken[1] = tidyRules(lastToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);\n      lastToken[1] = lastToken.length > 1 ? sortSelectors(lastToken[1], selectorsSortingMethod) : lastToken[1];\n      token[2] = [];\n    } else {\n      lastToken = token;\n    }\n  }\n}\n\nmodule.exports = mergeAdjacent;\n"]},"metadata":{},"sourceType":"script"}