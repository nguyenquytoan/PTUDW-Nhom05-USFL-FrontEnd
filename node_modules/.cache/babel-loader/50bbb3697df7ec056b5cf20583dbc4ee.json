{"ast":null,"code":"var hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar noop = function () {};\n\nfunction ensureFunction(value) {\n  return typeof value === 'function' ? value : noop;\n}\n\nfunction invokeForType(fn, type) {\n  return function (node, item, list) {\n    if (node.type === type) {\n      fn.call(this, node, item, list);\n    }\n  };\n}\n\nfunction getWalkersFromStructure(name, nodeType) {\n  var structure = nodeType.structure;\n  var walkers = [];\n\n  for (var key in structure) {\n    if (hasOwnProperty.call(structure, key) === false) {\n      continue;\n    }\n\n    var fieldTypes = structure[key];\n    var walker = {\n      name: key,\n      type: false,\n      nullable: false\n    };\n\n    if (!Array.isArray(structure[key])) {\n      fieldTypes = [structure[key]];\n    }\n\n    for (var i = 0; i < fieldTypes.length; i++) {\n      var fieldType = fieldTypes[i];\n\n      if (fieldType === null) {\n        walker.nullable = true;\n      } else if (typeof fieldType === 'string') {\n        walker.type = 'node';\n      } else if (Array.isArray(fieldType)) {\n        walker.type = 'list';\n      }\n    }\n\n    if (walker.type) {\n      walkers.push(walker);\n    }\n  }\n\n  if (walkers.length) {\n    return {\n      context: nodeType.walkContext,\n      fields: walkers\n    };\n  }\n\n  return null;\n}\n\nfunction getTypesFromConfig(config) {\n  var types = {};\n\n  for (var name in config.node) {\n    if (hasOwnProperty.call(config.node, name)) {\n      var nodeType = config.node[name];\n\n      if (!nodeType.structure) {\n        throw new Error('Missed `structure` field in `' + name + '` node type definition');\n      }\n\n      types[name] = getWalkersFromStructure(name, nodeType);\n    }\n  }\n\n  return types;\n}\n\nfunction createTypeIterator(config, reverse) {\n  var fields = config.fields.slice();\n  var contextName = config.context;\n  var useContext = typeof contextName === 'string';\n\n  if (reverse) {\n    fields.reverse();\n  }\n\n  return function (node, context, walk) {\n    var prevContextValue;\n\n    if (useContext) {\n      prevContextValue = context[contextName];\n      context[contextName] = node;\n    }\n\n    for (var i = 0; i < fields.length; i++) {\n      var field = fields[i];\n      var ref = node[field.name];\n\n      if (!field.nullable || ref) {\n        if (field.type === 'list') {\n          if (reverse) {\n            ref.forEachRight(walk);\n          } else {\n            ref.forEach(walk);\n          }\n        } else {\n          walk(ref);\n        }\n      }\n    }\n\n    if (useContext) {\n      context[contextName] = prevContextValue;\n    }\n  };\n}\n\nfunction createFastTraveralMap(iterators) {\n  return {\n    Atrule: {\n      StyleSheet: iterators.StyleSheet,\n      Atrule: iterators.Atrule,\n      Rule: iterators.Rule,\n      Block: iterators.Block\n    },\n    Rule: {\n      StyleSheet: iterators.StyleSheet,\n      Atrule: iterators.Atrule,\n      Rule: iterators.Rule,\n      Block: iterators.Block\n    },\n    Declaration: {\n      StyleSheet: iterators.StyleSheet,\n      Atrule: iterators.Atrule,\n      Rule: iterators.Rule,\n      Block: iterators.Block,\n      DeclarationList: iterators.DeclarationList\n    }\n  };\n}\n\nmodule.exports = function createWalker(config) {\n  var types = getTypesFromConfig(config);\n  var iteratorsNatural = {};\n  var iteratorsReverse = {};\n\n  for (var name in types) {\n    if (hasOwnProperty.call(types, name) && types[name] !== null) {\n      iteratorsNatural[name] = createTypeIterator(types[name], false);\n      iteratorsReverse[name] = createTypeIterator(types[name], true);\n    }\n  }\n\n  var fastTraversalIteratorsNatural = createFastTraveralMap(iteratorsNatural);\n  var fastTraversalIteratorsReverse = createFastTraveralMap(iteratorsReverse);\n\n  var walk = function (root, options) {\n    function walkNode(node, item, list) {\n      enter.call(context, node, item, list);\n\n      if (iterators.hasOwnProperty(node.type)) {\n        iterators[node.type](node, context, walkNode);\n      }\n\n      leave.call(context, node, item, list);\n    }\n\n    var enter = noop;\n    var leave = noop;\n    var iterators = iteratorsNatural;\n    var context = {\n      root: root,\n      stylesheet: null,\n      atrule: null,\n      atrulePrelude: null,\n      rule: null,\n      selector: null,\n      block: null,\n      declaration: null,\n      function: null\n    };\n\n    if (typeof options === 'function') {\n      enter = options;\n    } else if (options) {\n      enter = ensureFunction(options.enter);\n      leave = ensureFunction(options.leave);\n\n      if (options.reverse) {\n        iterators = iteratorsReverse;\n      }\n\n      if (options.visit) {\n        if (fastTraversalIteratorsNatural.hasOwnProperty(options.visit)) {\n          iterators = options.reverse ? fastTraversalIteratorsReverse[options.visit] : fastTraversalIteratorsNatural[options.visit];\n        } else if (!types.hasOwnProperty(options.visit)) {\n          throw new Error('Bad value `' + options.visit + '` for `visit` option (should be: ' + Object.keys(types).join(', ') + ')');\n        }\n\n        enter = invokeForType(enter, options.visit);\n        leave = invokeForType(leave, options.visit);\n      }\n    }\n\n    if (enter === noop && leave === noop) {\n      throw new Error('Neither `enter` nor `leave` walker handler is set or both aren\\'t a function');\n    } // swap handlers in reverse mode to invert visit order\n\n\n    if (options.reverse) {\n      var tmp = enter;\n      enter = leave;\n      leave = tmp;\n    }\n\n    walkNode(root);\n  };\n\n  walk.find = function (ast, fn) {\n    var found = null;\n    walk(ast, function (node, item, list) {\n      if (found === null && fn.call(this, node, item, list)) {\n        found = node;\n      }\n    });\n    return found;\n  };\n\n  walk.findLast = function (ast, fn) {\n    var found = null;\n    walk(ast, {\n      reverse: true,\n      enter: function (node, item, list) {\n        if (found === null && fn.call(this, node, item, list)) {\n          found = node;\n        }\n      }\n    });\n    return found;\n  };\n\n  walk.findAll = function (ast, fn) {\n    var found = [];\n    walk(ast, function (node, item, list) {\n      if (fn.call(this, node, item, list)) {\n        found.push(node);\n      }\n    });\n    return found;\n  };\n\n  return walk;\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/csso/node_modules/css-tree/lib/walker/create.js"],"names":["hasOwnProperty","Object","prototype","noop","ensureFunction","value","invokeForType","fn","type","node","item","list","call","getWalkersFromStructure","name","nodeType","structure","walkers","key","fieldTypes","walker","nullable","Array","isArray","i","length","fieldType","push","context","walkContext","fields","getTypesFromConfig","config","types","Error","createTypeIterator","reverse","slice","contextName","useContext","walk","prevContextValue","field","ref","forEachRight","forEach","createFastTraveralMap","iterators","Atrule","StyleSheet","Rule","Block","Declaration","DeclarationList","module","exports","createWalker","iteratorsNatural","iteratorsReverse","fastTraversalIteratorsNatural","fastTraversalIteratorsReverse","root","options","walkNode","enter","leave","stylesheet","atrule","atrulePrelude","rule","selector","block","declaration","function","visit","keys","join","tmp","find","ast","found","findLast","findAll"],"mappings":"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","sourcesContent":["var hasOwnProperty = Object.prototype.hasOwnProperty;\nvar noop = function() {};\n\nfunction ensureFunction(value) {\n    return typeof value === 'function' ? value : noop;\n}\n\nfunction invokeForType(fn, type) {\n    return function(node, item, list) {\n        if (node.type === type) {\n            fn.call(this, node, item, list);\n        }\n    };\n}\n\nfunction getWalkersFromStructure(name, nodeType) {\n    var structure = nodeType.structure;\n    var walkers = [];\n\n    for (var key in structure) {\n        if (hasOwnProperty.call(structure, key) === false) {\n            continue;\n        }\n\n        var fieldTypes = structure[key];\n        var walker = {\n            name: key,\n            type: false,\n            nullable: false\n        };\n\n        if (!Array.isArray(structure[key])) {\n            fieldTypes = [structure[key]];\n        }\n\n        for (var i = 0; i < fieldTypes.length; i++) {\n            var fieldType = fieldTypes[i];\n            if (fieldType === null) {\n                walker.nullable = true;\n            } else if (typeof fieldType === 'string') {\n                walker.type = 'node';\n            } else if (Array.isArray(fieldType)) {\n                walker.type = 'list';\n            }\n        }\n\n        if (walker.type) {\n            walkers.push(walker);\n        }\n    }\n\n    if (walkers.length) {\n        return {\n            context: nodeType.walkContext,\n            fields: walkers\n        };\n    }\n\n    return null;\n}\n\nfunction getTypesFromConfig(config) {\n    var types = {};\n\n    for (var name in config.node) {\n        if (hasOwnProperty.call(config.node, name)) {\n            var nodeType = config.node[name];\n\n            if (!nodeType.structure) {\n                throw new Error('Missed `structure` field in `' + name + '` node type definition');\n            }\n\n            types[name] = getWalkersFromStructure(name, nodeType);\n        }\n    }\n\n    return types;\n}\n\nfunction createTypeIterator(config, reverse) {\n    var fields = config.fields.slice();\n    var contextName = config.context;\n    var useContext = typeof contextName === 'string';\n\n    if (reverse) {\n        fields.reverse();\n    }\n\n    return function(node, context, walk) {\n        var prevContextValue;\n\n        if (useContext) {\n            prevContextValue = context[contextName];\n            context[contextName] = node;\n        }\n\n        for (var i = 0; i < fields.length; i++) {\n            var field = fields[i];\n            var ref = node[field.name];\n\n            if (!field.nullable || ref) {\n                if (field.type === 'list') {\n                    if (reverse) {\n                        ref.forEachRight(walk);\n                    } else {\n                        ref.forEach(walk);\n                    }\n                } else {\n                    walk(ref);\n                }\n            }\n        }\n\n        if (useContext) {\n            context[contextName] = prevContextValue;\n        }\n    };\n}\n\nfunction createFastTraveralMap(iterators) {\n    return {\n        Atrule: {\n            StyleSheet: iterators.StyleSheet,\n            Atrule: iterators.Atrule,\n            Rule: iterators.Rule,\n            Block: iterators.Block\n        },\n        Rule: {\n            StyleSheet: iterators.StyleSheet,\n            Atrule: iterators.Atrule,\n            Rule: iterators.Rule,\n            Block: iterators.Block\n        },\n        Declaration: {\n            StyleSheet: iterators.StyleSheet,\n            Atrule: iterators.Atrule,\n            Rule: iterators.Rule,\n            Block: iterators.Block,\n            DeclarationList: iterators.DeclarationList\n        }\n    };\n}\n\nmodule.exports = function createWalker(config) {\n    var types = getTypesFromConfig(config);\n    var iteratorsNatural = {};\n    var iteratorsReverse = {};\n\n    for (var name in types) {\n        if (hasOwnProperty.call(types, name) && types[name] !== null) {\n            iteratorsNatural[name] = createTypeIterator(types[name], false);\n            iteratorsReverse[name] = createTypeIterator(types[name], true);\n        }\n    }\n\n    var fastTraversalIteratorsNatural = createFastTraveralMap(iteratorsNatural);\n    var fastTraversalIteratorsReverse = createFastTraveralMap(iteratorsReverse);\n\n    var walk = function(root, options) {\n        function walkNode(node, item, list) {\n            enter.call(context, node, item, list);\n\n            if (iterators.hasOwnProperty(node.type)) {\n                iterators[node.type](node, context, walkNode);\n            }\n\n            leave.call(context, node, item, list);\n        }\n\n        var enter = noop;\n        var leave = noop;\n        var iterators = iteratorsNatural;\n        var context = {\n            root: root,\n            stylesheet: null,\n            atrule: null,\n            atrulePrelude: null,\n            rule: null,\n            selector: null,\n            block: null,\n            declaration: null,\n            function: null\n        };\n\n        if (typeof options === 'function') {\n            enter = options;\n        } else if (options) {\n            enter = ensureFunction(options.enter);\n            leave = ensureFunction(options.leave);\n\n            if (options.reverse) {\n                iterators = iteratorsReverse;\n            }\n\n            if (options.visit) {\n                if (fastTraversalIteratorsNatural.hasOwnProperty(options.visit)) {\n                    iterators = options.reverse\n                        ? fastTraversalIteratorsReverse[options.visit]\n                        : fastTraversalIteratorsNatural[options.visit];\n                } else if (!types.hasOwnProperty(options.visit)) {\n                    throw new Error('Bad value `' + options.visit + '` for `visit` option (should be: ' + Object.keys(types).join(', ') + ')');\n                }\n\n                enter = invokeForType(enter, options.visit);\n                leave = invokeForType(leave, options.visit);\n            }\n        }\n\n        if (enter === noop && leave === noop) {\n            throw new Error('Neither `enter` nor `leave` walker handler is set or both aren\\'t a function');\n        }\n\n        // swap handlers in reverse mode to invert visit order\n        if (options.reverse) {\n            var tmp = enter;\n            enter = leave;\n            leave = tmp;\n        }\n\n        walkNode(root);\n    };\n\n    walk.find = function(ast, fn) {\n        var found = null;\n\n        walk(ast, function(node, item, list) {\n            if (found === null && fn.call(this, node, item, list)) {\n                found = node;\n            }\n        });\n\n        return found;\n    };\n\n    walk.findLast = function(ast, fn) {\n        var found = null;\n\n        walk(ast, {\n            reverse: true,\n            enter: function(node, item, list) {\n                if (found === null && fn.call(this, node, item, list)) {\n                    found = node;\n                }\n            }\n        });\n\n        return found;\n    };\n\n    walk.findAll = function(ast, fn) {\n        var found = [];\n\n        walk(ast, function(node, item, list) {\n            if (fn.call(this, node, item, list)) {\n                found.push(node);\n            }\n        });\n\n        return found;\n    };\n\n    return walk;\n};\n"]},"metadata":{},"sourceType":"script"}