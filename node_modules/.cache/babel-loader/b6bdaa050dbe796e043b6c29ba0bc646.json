{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ansiEscapes() {\n  const data = _interopRequireDefault(require('ansi-escapes'));\n\n  _ansiEscapes = function _ansiEscapes() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWatcher() {\n  const data = require('jest-watcher');\n\n  _jestWatcher = function _jestWatcher() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst ARROW = _jestUtil().specialChars.ARROW,\n      CLEAR = _jestUtil().specialChars.CLEAR;\n\nclass SnapshotInteractiveMode {\n  constructor(pipe) {\n    _defineProperty(this, '_pipe', void 0);\n\n    _defineProperty(this, '_isActive', void 0);\n\n    _defineProperty(this, '_updateTestRunnerConfig', void 0);\n\n    _defineProperty(this, '_testAssertions', void 0);\n\n    _defineProperty(this, '_countPaths', void 0);\n\n    _defineProperty(this, '_skippedNum', void 0);\n\n    this._pipe = pipe;\n    this._isActive = false;\n    this._skippedNum = 0;\n  }\n\n  isActive() {\n    return this._isActive;\n  }\n\n  getSkippedNum() {\n    return this._skippedNum;\n  }\n\n  _clearTestSummary() {\n    this._pipe.write(_ansiEscapes().default.cursorUp(6));\n\n    this._pipe.write(_ansiEscapes().default.eraseDown);\n  }\n\n  _drawUIProgress() {\n    this._clearTestSummary();\n\n    const numPass = this._countPaths - this._testAssertions.length;\n    const numRemaining = this._countPaths - numPass - this._skippedNum;\n\n    let stats = _chalk().default.bold.dim((0, _jestUtil().pluralize)('snapshot', numRemaining) + ' remaining');\n\n    if (numPass) {\n      stats += ', ' + _chalk().default.bold.green((0, _jestUtil().pluralize)('snapshot', numPass) + ' updated');\n    }\n\n    if (this._skippedNum) {\n      stats += ', ' + _chalk().default.bold.yellow((0, _jestUtil().pluralize)('snapshot', this._skippedNum) + ' skipped');\n    }\n\n    const messages = ['\\n' + _chalk().default.bold('Interactive Snapshot Progress'), ARROW + stats, '\\n' + _chalk().default.bold('Watch Usage'), _chalk().default.dim(ARROW + 'Press ') + 'u' + _chalk().default.dim(' to update failing snapshots for this test.'), _chalk().default.dim(ARROW + 'Press ') + 's' + _chalk().default.dim(' to skip the current test.'), _chalk().default.dim(ARROW + 'Press ') + 'q' + _chalk().default.dim(' to quit Interactive Snapshot Mode.'), _chalk().default.dim(ARROW + 'Press ') + 'Enter' + _chalk().default.dim(' to trigger a test run.')];\n\n    this._pipe.write(messages.filter(Boolean).join('\\n') + '\\n');\n  }\n\n  _drawUIDoneWithSkipped() {\n    this._pipe.write(CLEAR);\n\n    const numPass = this._countPaths - this._testAssertions.length;\n\n    let stats = _chalk().default.bold.dim((0, _jestUtil().pluralize)('snapshot', this._countPaths) + ' reviewed');\n\n    if (numPass) {\n      stats += ', ' + _chalk().default.bold.green((0, _jestUtil().pluralize)('snapshot', numPass) + ' updated');\n    }\n\n    if (this._skippedNum) {\n      stats += ', ' + _chalk().default.bold.yellow((0, _jestUtil().pluralize)('snapshot', this._skippedNum) + ' skipped');\n    }\n\n    const messages = ['\\n' + _chalk().default.bold('Interactive Snapshot Result'), ARROW + stats, '\\n' + _chalk().default.bold('Watch Usage'), _chalk().default.dim(ARROW + 'Press ') + 'r' + _chalk().default.dim(' to restart Interactive Snapshot Mode.'), _chalk().default.dim(ARROW + 'Press ') + 'q' + _chalk().default.dim(' to quit Interactive Snapshot Mode.')];\n\n    this._pipe.write(messages.filter(Boolean).join('\\n') + '\\n');\n  }\n\n  _drawUIDone() {\n    this._pipe.write(CLEAR);\n\n    const numPass = this._countPaths - this._testAssertions.length;\n\n    let stats = _chalk().default.bold.dim((0, _jestUtil().pluralize)('snapshot', this._countPaths) + ' reviewed');\n\n    if (numPass) {\n      stats += ', ' + _chalk().default.bold.green((0, _jestUtil().pluralize)('snapshot', numPass) + ' updated');\n    }\n\n    const messages = ['\\n' + _chalk().default.bold('Interactive Snapshot Result'), ARROW + stats, '\\n' + _chalk().default.bold('Watch Usage'), _chalk().default.dim(ARROW + 'Press ') + 'Enter' + _chalk().default.dim(' to return to watch mode.')];\n\n    this._pipe.write(messages.filter(Boolean).join('\\n') + '\\n');\n  }\n\n  _drawUIOverlay() {\n    if (this._testAssertions.length === 0) {\n      return this._drawUIDone();\n    }\n\n    if (this._testAssertions.length - this._skippedNum === 0) {\n      return this._drawUIDoneWithSkipped();\n    }\n\n    return this._drawUIProgress();\n  }\n\n  put(key) {\n    switch (key) {\n      case 's':\n        if (this._skippedNum === this._testAssertions.length) break;\n        this._skippedNum += 1; // move skipped test to the end\n\n        this._testAssertions.push(this._testAssertions.shift());\n\n        if (this._testAssertions.length - this._skippedNum > 0) {\n          this._run(false);\n        } else {\n          this._drawUIDoneWithSkipped();\n        }\n\n        break;\n\n      case 'u':\n        this._run(true);\n\n        break;\n\n      case 'q':\n      case _jestWatcher().KEYS.ESCAPE:\n        this.abort();\n        break;\n\n      case 'r':\n        this.restart();\n        break;\n\n      case _jestWatcher().KEYS.ENTER:\n        if (this._testAssertions.length === 0) {\n          this.abort();\n        } else {\n          this._run(false);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  abort() {\n    this._isActive = false;\n    this._skippedNum = 0;\n\n    this._updateTestRunnerConfig(null, false);\n  }\n\n  restart() {\n    this._skippedNum = 0;\n    this._countPaths = this._testAssertions.length;\n\n    this._run(false);\n  }\n\n  updateWithResults(results) {\n    const hasSnapshotFailure = !!results.snapshot.failure;\n\n    if (hasSnapshotFailure) {\n      this._drawUIOverlay();\n\n      return;\n    }\n\n    this._testAssertions.shift();\n\n    if (this._testAssertions.length - this._skippedNum === 0) {\n      this._drawUIOverlay();\n\n      return;\n    } // Go to the next test\n\n\n    this._run(false);\n  }\n\n  _run(shouldUpdateSnapshot) {\n    const testAssertion = this._testAssertions[0];\n\n    this._updateTestRunnerConfig(testAssertion, shouldUpdateSnapshot);\n  }\n\n  run(failedSnapshotTestAssertions, onConfigChange) {\n    if (!failedSnapshotTestAssertions.length) {\n      return;\n    }\n\n    this._testAssertions = [...failedSnapshotTestAssertions];\n    this._countPaths = this._testAssertions.length;\n    this._updateTestRunnerConfig = onConfigChange;\n    this._isActive = true;\n\n    this._run(false);\n  }\n\n}\n\nexports.default = SnapshotInteractiveMode;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/@jest/core/build/SnapshotInteractiveMode.js"],"names":["Object","defineProperty","exports","value","default","_chalk","data","_interopRequireDefault","require","_ansiEscapes","_jestWatcher","_jestUtil","obj","__esModule","_defineProperty","key","enumerable","configurable","writable","ARROW","specialChars","CLEAR","SnapshotInteractiveMode","constructor","pipe","_pipe","_isActive","_skippedNum","isActive","getSkippedNum","_clearTestSummary","write","cursorUp","eraseDown","_drawUIProgress","numPass","_countPaths","_testAssertions","length","numRemaining","stats","bold","dim","pluralize","green","yellow","messages","filter","Boolean","join","_drawUIDoneWithSkipped","_drawUIDone","_drawUIOverlay","put","push","shift","_run","KEYS","ESCAPE","abort","restart","ENTER","_updateTestRunnerConfig","updateWithResults","results","hasSnapshotFailure","snapshot","failure","shouldUpdateSnapshot","testAssertion","run","failedSnapshotTestAssertions","onConfigChange"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ansiEscapes() {\n  const data = _interopRequireDefault(require('ansi-escapes'));\n\n  _ansiEscapes = function _ansiEscapes() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWatcher() {\n  const data = require('jest-watcher');\n\n  _jestWatcher = function _jestWatcher() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nconst ARROW = _jestUtil().specialChars.ARROW,\n  CLEAR = _jestUtil().specialChars.CLEAR;\n\nclass SnapshotInteractiveMode {\n  constructor(pipe) {\n    _defineProperty(this, '_pipe', void 0);\n\n    _defineProperty(this, '_isActive', void 0);\n\n    _defineProperty(this, '_updateTestRunnerConfig', void 0);\n\n    _defineProperty(this, '_testAssertions', void 0);\n\n    _defineProperty(this, '_countPaths', void 0);\n\n    _defineProperty(this, '_skippedNum', void 0);\n\n    this._pipe = pipe;\n    this._isActive = false;\n    this._skippedNum = 0;\n  }\n\n  isActive() {\n    return this._isActive;\n  }\n\n  getSkippedNum() {\n    return this._skippedNum;\n  }\n\n  _clearTestSummary() {\n    this._pipe.write(_ansiEscapes().default.cursorUp(6));\n\n    this._pipe.write(_ansiEscapes().default.eraseDown);\n  }\n\n  _drawUIProgress() {\n    this._clearTestSummary();\n\n    const numPass = this._countPaths - this._testAssertions.length;\n    const numRemaining = this._countPaths - numPass - this._skippedNum;\n\n    let stats = _chalk().default.bold.dim(\n      (0, _jestUtil().pluralize)('snapshot', numRemaining) + ' remaining'\n    );\n\n    if (numPass) {\n      stats +=\n        ', ' +\n        _chalk().default.bold.green(\n          (0, _jestUtil().pluralize)('snapshot', numPass) + ' updated'\n        );\n    }\n\n    if (this._skippedNum) {\n      stats +=\n        ', ' +\n        _chalk().default.bold.yellow(\n          (0, _jestUtil().pluralize)('snapshot', this._skippedNum) + ' skipped'\n        );\n    }\n\n    const messages = [\n      '\\n' + _chalk().default.bold('Interactive Snapshot Progress'),\n      ARROW + stats,\n      '\\n' + _chalk().default.bold('Watch Usage'),\n      _chalk().default.dim(ARROW + 'Press ') +\n        'u' +\n        _chalk().default.dim(' to update failing snapshots for this test.'),\n      _chalk().default.dim(ARROW + 'Press ') +\n        's' +\n        _chalk().default.dim(' to skip the current test.'),\n      _chalk().default.dim(ARROW + 'Press ') +\n        'q' +\n        _chalk().default.dim(' to quit Interactive Snapshot Mode.'),\n      _chalk().default.dim(ARROW + 'Press ') +\n        'Enter' +\n        _chalk().default.dim(' to trigger a test run.')\n    ];\n\n    this._pipe.write(messages.filter(Boolean).join('\\n') + '\\n');\n  }\n\n  _drawUIDoneWithSkipped() {\n    this._pipe.write(CLEAR);\n\n    const numPass = this._countPaths - this._testAssertions.length;\n\n    let stats = _chalk().default.bold.dim(\n      (0, _jestUtil().pluralize)('snapshot', this._countPaths) + ' reviewed'\n    );\n\n    if (numPass) {\n      stats +=\n        ', ' +\n        _chalk().default.bold.green(\n          (0, _jestUtil().pluralize)('snapshot', numPass) + ' updated'\n        );\n    }\n\n    if (this._skippedNum) {\n      stats +=\n        ', ' +\n        _chalk().default.bold.yellow(\n          (0, _jestUtil().pluralize)('snapshot', this._skippedNum) + ' skipped'\n        );\n    }\n\n    const messages = [\n      '\\n' + _chalk().default.bold('Interactive Snapshot Result'),\n      ARROW + stats,\n      '\\n' + _chalk().default.bold('Watch Usage'),\n      _chalk().default.dim(ARROW + 'Press ') +\n        'r' +\n        _chalk().default.dim(' to restart Interactive Snapshot Mode.'),\n      _chalk().default.dim(ARROW + 'Press ') +\n        'q' +\n        _chalk().default.dim(' to quit Interactive Snapshot Mode.')\n    ];\n\n    this._pipe.write(messages.filter(Boolean).join('\\n') + '\\n');\n  }\n\n  _drawUIDone() {\n    this._pipe.write(CLEAR);\n\n    const numPass = this._countPaths - this._testAssertions.length;\n\n    let stats = _chalk().default.bold.dim(\n      (0, _jestUtil().pluralize)('snapshot', this._countPaths) + ' reviewed'\n    );\n\n    if (numPass) {\n      stats +=\n        ', ' +\n        _chalk().default.bold.green(\n          (0, _jestUtil().pluralize)('snapshot', numPass) + ' updated'\n        );\n    }\n\n    const messages = [\n      '\\n' + _chalk().default.bold('Interactive Snapshot Result'),\n      ARROW + stats,\n      '\\n' + _chalk().default.bold('Watch Usage'),\n      _chalk().default.dim(ARROW + 'Press ') +\n        'Enter' +\n        _chalk().default.dim(' to return to watch mode.')\n    ];\n\n    this._pipe.write(messages.filter(Boolean).join('\\n') + '\\n');\n  }\n\n  _drawUIOverlay() {\n    if (this._testAssertions.length === 0) {\n      return this._drawUIDone();\n    }\n\n    if (this._testAssertions.length - this._skippedNum === 0) {\n      return this._drawUIDoneWithSkipped();\n    }\n\n    return this._drawUIProgress();\n  }\n\n  put(key) {\n    switch (key) {\n      case 's':\n        if (this._skippedNum === this._testAssertions.length) break;\n        this._skippedNum += 1; // move skipped test to the end\n\n        this._testAssertions.push(this._testAssertions.shift());\n\n        if (this._testAssertions.length - this._skippedNum > 0) {\n          this._run(false);\n        } else {\n          this._drawUIDoneWithSkipped();\n        }\n\n        break;\n\n      case 'u':\n        this._run(true);\n\n        break;\n\n      case 'q':\n      case _jestWatcher().KEYS.ESCAPE:\n        this.abort();\n        break;\n\n      case 'r':\n        this.restart();\n        break;\n\n      case _jestWatcher().KEYS.ENTER:\n        if (this._testAssertions.length === 0) {\n          this.abort();\n        } else {\n          this._run(false);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  abort() {\n    this._isActive = false;\n    this._skippedNum = 0;\n\n    this._updateTestRunnerConfig(null, false);\n  }\n\n  restart() {\n    this._skippedNum = 0;\n    this._countPaths = this._testAssertions.length;\n\n    this._run(false);\n  }\n\n  updateWithResults(results) {\n    const hasSnapshotFailure = !!results.snapshot.failure;\n\n    if (hasSnapshotFailure) {\n      this._drawUIOverlay();\n\n      return;\n    }\n\n    this._testAssertions.shift();\n\n    if (this._testAssertions.length - this._skippedNum === 0) {\n      this._drawUIOverlay();\n\n      return;\n    } // Go to the next test\n\n    this._run(false);\n  }\n\n  _run(shouldUpdateSnapshot) {\n    const testAssertion = this._testAssertions[0];\n\n    this._updateTestRunnerConfig(testAssertion, shouldUpdateSnapshot);\n  }\n\n  run(failedSnapshotTestAssertions, onConfigChange) {\n    if (!failedSnapshotTestAssertions.length) {\n      return;\n    }\n\n    this._testAssertions = [...failedSnapshotTestAssertions];\n    this._countPaths = this._testAssertions.length;\n    this._updateTestRunnerConfig = onConfigChange;\n    this._isActive = true;\n\n    this._run(false);\n  }\n}\n\nexports.default = SnapshotInteractiveMode;\n"]},"metadata":{},"sourceType":"script"}