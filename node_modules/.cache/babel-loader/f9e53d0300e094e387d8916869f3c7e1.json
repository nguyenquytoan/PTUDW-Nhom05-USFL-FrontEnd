{"ast":null,"code":"/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst ol = require('common-tags').oneLine;\n\nconst checkURLCasing = options => {\n  const oldToNewOptionNames = {\n    dontCacheBustUrlsMatching: 'dontCacheBustURLsMatching',\n    ignoreUrlParametersMatching: 'ignoreURLParametersMatching',\n    modifyUrlPrefix: 'modifyURLPrefix',\n    templatedUrls: 'templatedURLs'\n  };\n  const warnings = [];\n\n  for (const [oldOption, newOption] of Object.entries(oldToNewOptionNames)) {\n    if (oldOption in options) {\n      warnings.push(ol`The '${oldOption}' option has been renamed to\n          '${newOption}'. Please update your config. '${oldOption}' is now\n          deprecated and will be removed in a future release of Workbox.`); // Rename the option so the config will be valid.\n\n      options[newOption] = options[oldOption];\n      delete options[oldOption];\n    }\n  }\n\n  return warnings;\n};\n\nconst checkStrategyClasses = options => {\n  const oldToNewOptionValues = {\n    cacheFirst: 'CacheFirst',\n    cacheOnly: 'CacheOnly',\n    networkFirst: 'NetworkFirst',\n    networkOnly: 'NetworkOnly',\n    staleWhileRevalidate: 'StaleWhileRevalidate'\n  };\n  const warnings = [];\n\n  if (options.runtimeCaching) {\n    for (const entry of options.runtimeCaching) {\n      if (typeof entry.handler === 'string' && oldToNewOptionValues.hasOwnProperty(entry.handler)) {\n        const oldValue = entry.handler;\n        const newValue = oldToNewOptionValues[entry.handler];\n        warnings.push(ol`Specifying '${oldValue}'' in a\n          'runtimeCaching[].handler' option is deprecated. Please update your\n          config to use '${newValue}' instead. In v4 Workbox strategies are now\n          classes instead of functions.`); // Set the new value so the config will be valid.\n\n        entry.handler = newValue;\n      }\n    }\n  }\n\n  return warnings;\n};\n\nmodule.exports = options => {\n  return [...checkURLCasing(options), ...checkStrategyClasses(options)];\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-build/src/lib/check-for-deprecated-options.js"],"names":["ol","require","oneLine","checkURLCasing","options","oldToNewOptionNames","dontCacheBustUrlsMatching","ignoreUrlParametersMatching","modifyUrlPrefix","templatedUrls","warnings","oldOption","newOption","Object","entries","push","checkStrategyClasses","oldToNewOptionValues","cacheFirst","cacheOnly","networkFirst","networkOnly","staleWhileRevalidate","runtimeCaching","entry","handler","hasOwnProperty","oldValue","newValue","module","exports"],"mappings":"AAAA;;;;;;;AAQA,MAAMA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBC,OAAlC;;AAGA,MAAMC,cAAc,GAAIC,OAAD,IAAa;AAClC,QAAMC,mBAAmB,GAAG;AAC1BC,IAAAA,yBAAyB,EAAE,2BADD;AAE1BC,IAAAA,2BAA2B,EAAE,6BAFH;AAG1BC,IAAAA,eAAe,EAAE,iBAHS;AAI1BC,IAAAA,aAAa,EAAE;AAJW,GAA5B;AAOA,QAAMC,QAAQ,GAAG,EAAjB;;AACA,OAAK,MAAM,CAACC,SAAD,EAAYC,SAAZ,CAAX,IAAqCC,MAAM,CAACC,OAAP,CAAeT,mBAAf,CAArC,EAA0E;AACxE,QAAIM,SAAS,IAAIP,OAAjB,EAA0B;AACxBM,MAAAA,QAAQ,CAACK,IAAT,CAAcf,EAAG,QAAOW,SAAU;aAC3BC,SAAU,kCAAiCD,SAAU;yEAD5D,EADwB,CAKxB;;AACAP,MAAAA,OAAO,CAACQ,SAAD,CAAP,GAAqBR,OAAO,CAACO,SAAD,CAA5B;AACA,aAAOP,OAAO,CAACO,SAAD,CAAd;AACD;AACF;;AACD,SAAOD,QAAP;AACD,CArBD;;AAwBA,MAAMM,oBAAoB,GAAIZ,OAAD,IAAa;AACxC,QAAMa,oBAAoB,GAAG;AAC3BC,IAAAA,UAAU,EAAE,YADe;AAE3BC,IAAAA,SAAS,EAAE,WAFgB;AAG3BC,IAAAA,YAAY,EAAE,cAHa;AAI3BC,IAAAA,WAAW,EAAE,aAJc;AAK3BC,IAAAA,oBAAoB,EAAE;AALK,GAA7B;AAQA,QAAMZ,QAAQ,GAAG,EAAjB;;AACA,MAAIN,OAAO,CAACmB,cAAZ,EAA4B;AAC1B,SAAK,MAAMC,KAAX,IAAoBpB,OAAO,CAACmB,cAA5B,EAA4C;AAC1C,UAAI,OAAOC,KAAK,CAACC,OAAb,KAAyB,QAAzB,IACAR,oBAAoB,CAACS,cAArB,CAAoCF,KAAK,CAACC,OAA1C,CADJ,EACwD;AACtD,cAAME,QAAQ,GAAGH,KAAK,CAACC,OAAvB;AACA,cAAMG,QAAQ,GAAGX,oBAAoB,CAACO,KAAK,CAACC,OAAP,CAArC;AAEAf,QAAAA,QAAQ,CAACK,IAAT,CAAcf,EAAG,eAAc2B,QAAS;;2BAErBC,QAAS;wCAF5B,EAJsD,CAStD;;AACAJ,QAAAA,KAAK,CAACC,OAAN,GAAgBG,QAAhB;AACD;AACF;AACF;;AACD,SAAOlB,QAAP;AACD,CA5BD;;AA8BAmB,MAAM,CAACC,OAAP,GAAkB1B,OAAD,IAAa;AAC5B,SAAO,CACL,GAAGD,cAAc,CAACC,OAAD,CADZ,EAEL,GAAGY,oBAAoB,CAACZ,OAAD,CAFlB,CAAP;AAID,CALD","sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst ol = require('common-tags').oneLine;\n\n\nconst checkURLCasing = (options) => {\n  const oldToNewOptionNames = {\n    dontCacheBustUrlsMatching: 'dontCacheBustURLsMatching',\n    ignoreUrlParametersMatching: 'ignoreURLParametersMatching',\n    modifyUrlPrefix: 'modifyURLPrefix',\n    templatedUrls: 'templatedURLs',\n  };\n\n  const warnings = [];\n  for (const [oldOption, newOption] of Object.entries(oldToNewOptionNames)) {\n    if (oldOption in options) {\n      warnings.push(ol`The '${oldOption}' option has been renamed to\n          '${newOption}'. Please update your config. '${oldOption}' is now\n          deprecated and will be removed in a future release of Workbox.`);\n\n      // Rename the option so the config will be valid.\n      options[newOption] = options[oldOption];\n      delete options[oldOption];\n    }\n  }\n  return warnings;\n};\n\n\nconst checkStrategyClasses = (options) => {\n  const oldToNewOptionValues = {\n    cacheFirst: 'CacheFirst',\n    cacheOnly: 'CacheOnly',\n    networkFirst: 'NetworkFirst',\n    networkOnly: 'NetworkOnly',\n    staleWhileRevalidate: 'StaleWhileRevalidate',\n  };\n\n  const warnings = [];\n  if (options.runtimeCaching) {\n    for (const entry of options.runtimeCaching) {\n      if (typeof entry.handler === 'string' &&\n          oldToNewOptionValues.hasOwnProperty(entry.handler)) {\n        const oldValue = entry.handler;\n        const newValue = oldToNewOptionValues[entry.handler];\n\n        warnings.push(ol`Specifying '${oldValue}'' in a\n          'runtimeCaching[].handler' option is deprecated. Please update your\n          config to use '${newValue}' instead. In v4 Workbox strategies are now\n          classes instead of functions.`);\n\n        // Set the new value so the config will be valid.\n        entry.handler = newValue;\n      }\n    }\n  }\n  return warnings;\n};\n\nmodule.exports = (options) => {\n  return [\n    ...checkURLCasing(options),\n    ...checkStrategyClasses(options),\n  ];\n};\n"]},"metadata":{},"sourceType":"script"}