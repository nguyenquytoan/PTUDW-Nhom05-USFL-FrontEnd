{"ast":null,"code":"/* eslint-env mocha */\nimport assert from 'assert';\nimport { getOpeningElement, setParserName } from '../helper';\nimport hasProp, { hasAnyProp, hasEveryProp } from '../../src/hasProp';\ndescribe('hasProp', () => {\n  beforeEach(() => {\n    setParserName('babel');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof hasProp;\n    assert.equal(expected, actual);\n  });\n  it('should return false if no arguments are provided', () => {\n    const expected = false;\n    const actual = hasProp();\n    assert.equal(expected, actual);\n  });\n  it('should return false if the prop is absent', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const expected = false;\n    const actual = hasProp(props, prop);\n    assert.equal(expected, actual);\n  });\n  it('should return true if the prop exists', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const expected = true;\n    const actual = hasProp(props, prop);\n    assert.equal(expected, actual);\n  });\n  it('should return true if the prop may exist in spread loose mode', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const options = {\n      spreadStrict: false\n    };\n    const expected = true;\n    const actual = hasProp(props, prop, options);\n    assert.equal(expected, actual);\n  });\n  it('should return false if the prop is considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const options = {\n      ignoreCase: false\n    };\n    const expected = false;\n    const actual = hasProp(props, prop, options);\n    assert.equal(expected, actual);\n  });\n});\ndescribe('hasAnyProp tests', () => {\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof hasAnyProp;\n    assert.equal(expected, actual);\n  });\n  it('should return false if no arguments are provided', () => {\n    const expected = false;\n    const actual = hasAnyProp();\n    assert.equal(expected, actual);\n  });\n  it('should return false if the prop is absent', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const expected = false;\n    const actual = hasAnyProp(props, prop);\n    assert.equal(expected, actual);\n  });\n  it('should return false if all props are absent in array', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const propsToCheck = ['id', 'className'];\n    const expected = false;\n    const actual = hasAnyProp(props, propsToCheck);\n    assert.equal(expected, actual);\n  });\n  it('should return false if all props are absent in space delimited string', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const propsToCheck = 'id className';\n    const expected = false;\n    const actual = hasAnyProp(props, propsToCheck);\n    assert.equal(expected, actual);\n  });\n  it('should return true if the prop exists', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const expected = true;\n    const actual = hasAnyProp(props, prop);\n    assert.equal(expected, actual);\n  });\n  it('should return true if any prop exists in array', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = ['className', 'id'];\n    const expected = true;\n    const actual = hasAnyProp(props, prop);\n    assert.equal(expected, actual);\n  });\n  it('should return true if any prop exists in space delimited string', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'className id';\n    const expected = true;\n    const actual = hasAnyProp(props, prop);\n    assert.equal(expected, actual);\n  });\n  it('should return true if the prop may exist in spread loose mode', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const options = {\n      spreadStrict: false\n    };\n    const expected = true;\n    const actual = hasAnyProp(props, prop, options);\n    assert.equal(expected, actual);\n  });\n  it('should return true if any prop may exist in spread loose mode', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = ['id', 'className'];\n    const options = {\n      spreadStrict: false\n    };\n    const expected = true;\n    const actual = hasAnyProp(props, prop, options);\n    assert.equal(expected, actual);\n  });\n  it('should return false if the prop is considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const options = {\n      ignoreCase: false\n    };\n    const expected = false;\n    const actual = hasAnyProp(props, prop, options);\n    assert.equal(expected, actual);\n  });\n  it('should return false if all props are considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = ['id', 'iD', 'className'];\n    const options = {\n      ignoreCase: false\n    };\n    const expected = false;\n    const actual = hasAnyProp(props, prop, options);\n    assert.equal(expected, actual);\n  });\n});\ndescribe('hasEveryProp tests', () => {\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof hasEveryProp;\n    assert.equal(expected, actual);\n  });\n  it('should return true if no arguments are provided', () => {\n    const expected = true;\n    const actual = hasEveryProp();\n    assert.equal(expected, actual);\n  });\n  it('should return false if the prop is absent', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const expected = false;\n    const actual = hasEveryProp(props, prop);\n    assert.equal(expected, actual);\n  });\n  it('should return false if any props are absent in array', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const propsToCheck = ['id', 'className'];\n    const expected = false;\n    const actual = hasEveryProp(props, propsToCheck);\n    assert.equal(expected, actual);\n  });\n  it('should return false if all props are absent in array', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const propsToCheck = ['id', 'className'];\n    const expected = false;\n    const actual = hasEveryProp(props, propsToCheck);\n    assert.equal(expected, actual);\n  });\n  it('should return false if any props are absent in space delimited string', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const propsToCheck = 'id className';\n    const expected = false;\n    const actual = hasEveryProp(props, propsToCheck);\n    assert.equal(expected, actual);\n  });\n  it('should return false if all props are absent in space delimited string', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const propsToCheck = 'id className';\n    const expected = false;\n    const actual = hasEveryProp(props, propsToCheck);\n    assert.equal(expected, actual);\n  });\n  it('should return true if the prop exists', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const expected = true;\n    const actual = hasEveryProp(props, prop);\n    assert.equal(expected, actual);\n  });\n  it('should return true if all props exist in array', () => {\n    const code = '<div id=\"foo\" className=\"box\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = ['className', 'id'];\n    const expected = true;\n    const actual = hasEveryProp(props, prop);\n    assert.equal(expected, actual);\n  });\n  it('should return true if all props exist in space delimited string', () => {\n    const code = '<div id=\"foo\" className=\"box\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'className id';\n    const expected = true;\n    const actual = hasEveryProp(props, prop);\n    assert.equal(expected, actual);\n  });\n  it('should return true if the props may exist in spread loose mode', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const options = {\n      spreadStrict: false\n    };\n    const expected = true;\n    const actual = hasEveryProp(props, prop, options);\n    assert.equal(expected, actual);\n  });\n  it('should return true if all props may exist in spread loose mode', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = ['id', 'className'];\n    const options = {\n      spreadStrict: false\n    };\n    const expected = true;\n    const actual = hasEveryProp(props, prop, options);\n    assert.equal(expected, actual);\n  });\n  it('should return false if the prop is considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = 'id';\n    const options = {\n      ignoreCase: false\n    };\n    const expected = false;\n    const actual = hasEveryProp(props, prop, options);\n    assert.equal(expected, actual);\n  });\n  it('should return false if all props are considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = ['id', 'iD', 'className'];\n    const options = {\n      ignoreCase: false\n    };\n    const expected = false;\n    const actual = hasEveryProp(props, prop, options);\n    assert.equal(expected, actual);\n  });\n  it('should return true if all props are considered present in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" className=\"box\" />';\n    const node = getOpeningElement(code);\n    const {\n      attributes: props\n    } = node;\n    const prop = ['ID', 'className'];\n    const options = {\n      ignoreCase: false\n    };\n    const expected = true;\n    const actual = hasEveryProp(props, prop, options);\n    assert.equal(expected, actual);\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/__tests__/src/hasProp-test.js"],"names":["assert","getOpeningElement","setParserName","hasProp","hasAnyProp","hasEveryProp","describe","beforeEach","it","expected","actual","equal","code","node","attributes","props","prop","options","spreadStrict","ignoreCase","propsToCheck"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport assert from 'assert';\nimport { getOpeningElement, setParserName } from '../helper';\nimport hasProp, { hasAnyProp, hasEveryProp } from '../../src/hasProp';\n\ndescribe('hasProp', () => {\n  beforeEach(() => {\n    setParserName('babel');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof hasProp;\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return false if no arguments are provided', () => {\n    const expected = false;\n    const actual = hasProp();\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return false if the prop is absent', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = false;\n    const actual = hasProp(props, prop);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return true if the prop exists', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = true;\n    const actual = hasProp(props, prop);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return true if the prop may exist in spread loose mode', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = {\n      spreadStrict: false,\n    };\n\n    const expected = true;\n    const actual = hasProp(props, prop, options);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return false if the prop is considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = {\n      ignoreCase: false,\n    };\n\n    const expected = false;\n    const actual = hasProp(props, prop, options);\n\n    assert.equal(expected, actual);\n  });\n});\n\ndescribe('hasAnyProp tests', () => {\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof hasAnyProp;\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return false if no arguments are provided', () => {\n    const expected = false;\n    const actual = hasAnyProp();\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return false if the prop is absent', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = false;\n    const actual = hasAnyProp(props, prop);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return false if all props are absent in array', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const propsToCheck = ['id', 'className'];\n\n    const expected = false;\n    const actual = hasAnyProp(props, propsToCheck);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return false if all props are absent in space delimited string', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const propsToCheck = 'id className';\n\n    const expected = false;\n    const actual = hasAnyProp(props, propsToCheck);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return true if the prop exists', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = true;\n    const actual = hasAnyProp(props, prop);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return true if any prop exists in array', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = ['className', 'id'];\n\n    const expected = true;\n    const actual = hasAnyProp(props, prop);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return true if any prop exists in space delimited string', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'className id';\n\n    const expected = true;\n    const actual = hasAnyProp(props, prop);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return true if the prop may exist in spread loose mode', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = {\n      spreadStrict: false,\n    };\n\n    const expected = true;\n    const actual = hasAnyProp(props, prop, options);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return true if any prop may exist in spread loose mode', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = ['id', 'className'];\n    const options = {\n      spreadStrict: false,\n    };\n\n    const expected = true;\n    const actual = hasAnyProp(props, prop, options);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return false if the prop is considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = {\n      ignoreCase: false,\n    };\n\n    const expected = false;\n    const actual = hasAnyProp(props, prop, options);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return false if all props are considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = ['id', 'iD', 'className'];\n    const options = {\n      ignoreCase: false,\n    };\n\n    const expected = false;\n    const actual = hasAnyProp(props, prop, options);\n\n    assert.equal(expected, actual);\n  });\n});\n\ndescribe('hasEveryProp tests', () => {\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof hasEveryProp;\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return true if no arguments are provided', () => {\n    const expected = true;\n    const actual = hasEveryProp();\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return false if the prop is absent', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = false;\n    const actual = hasEveryProp(props, prop);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return false if any props are absent in array', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const propsToCheck = ['id', 'className'];\n\n    const expected = false;\n    const actual = hasEveryProp(props, propsToCheck);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return false if all props are absent in array', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const propsToCheck = ['id', 'className'];\n\n    const expected = false;\n    const actual = hasEveryProp(props, propsToCheck);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return false if any props are absent in space delimited string', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const propsToCheck = 'id className';\n\n    const expected = false;\n    const actual = hasEveryProp(props, propsToCheck);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return false if all props are absent in space delimited string', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const propsToCheck = 'id className';\n\n    const expected = false;\n    const actual = hasEveryProp(props, propsToCheck);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return true if the prop exists', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = true;\n    const actual = hasEveryProp(props, prop);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return true if all props exist in array', () => {\n    const code = '<div id=\"foo\" className=\"box\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = ['className', 'id'];\n\n    const expected = true;\n    const actual = hasEveryProp(props, prop);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return true if all props exist in space delimited string', () => {\n    const code = '<div id=\"foo\" className=\"box\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'className id';\n\n    const expected = true;\n    const actual = hasEveryProp(props, prop);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return true if the props may exist in spread loose mode', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = {\n      spreadStrict: false,\n    };\n\n    const expected = true;\n    const actual = hasEveryProp(props, prop, options);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return true if all props may exist in spread loose mode', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = ['id', 'className'];\n    const options = {\n      spreadStrict: false,\n    };\n\n    const expected = true;\n    const actual = hasEveryProp(props, prop, options);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return false if the prop is considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = {\n      ignoreCase: false,\n    };\n\n    const expected = false;\n    const actual = hasEveryProp(props, prop, options);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return false if all props are considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = ['id', 'iD', 'className'];\n    const options = {\n      ignoreCase: false,\n    };\n\n    const expected = false;\n    const actual = hasEveryProp(props, prop, options);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return true if all props are considered present in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" className=\"box\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = ['ID', 'className'];\n    const options = {\n      ignoreCase: false,\n    };\n\n    const expected = true;\n    const actual = hasEveryProp(props, prop, options);\n\n    assert.equal(expected, actual);\n  });\n});\n"]},"metadata":{},"sourceType":"module"}