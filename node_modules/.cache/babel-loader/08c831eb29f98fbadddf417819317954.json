{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _convert = require('./lib/convert');\n\nvar _convert2 = _interopRequireDefault(_convert);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst LENGTH_UNITS = ['em', 'ex', 'ch', 'rem', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm', 'q', 'in', 'pt', 'pc', 'px'];\n\nfunction parseWord(node, opts, keepZeroUnit) {\n  const pair = (0, _postcssValueParser.unit)(node.value);\n\n  if (pair) {\n    const num = Number(pair.number);\n    const u = pair.unit;\n\n    if (num === 0) {\n      node.value = keepZeroUnit || !~LENGTH_UNITS.indexOf(u.toLowerCase()) && u !== '%' ? 0 + u : 0;\n    } else {\n      node.value = (0, _convert2.default)(num, u, opts);\n\n      if (typeof opts.precision === 'number' && u.toLowerCase() === 'px' && ~pair.number.indexOf('.')) {\n        const precision = Math.pow(10, opts.precision);\n        node.value = Math.round(parseFloat(node.value) * precision) / precision + u;\n      }\n    }\n  }\n}\n\nfunction clampOpacity(node) {\n  const pair = (0, _postcssValueParser.unit)(node.value);\n\n  if (!pair) {\n    return;\n  }\n\n  let num = Number(pair.number);\n\n  if (num > 1) {\n    node.value = 1 + pair.unit;\n  } else if (num < 0) {\n    node.value = 0 + pair.unit;\n  }\n}\n\nfunction shouldStripPercent(decl) {\n  const {\n    parent\n  } = decl;\n  const lowerCasedProp = decl.prop.toLowerCase();\n  return ~decl.value.indexOf('%') && (lowerCasedProp === 'max-height' || lowerCasedProp === 'height') || parent.parent && parent.parent.name && parent.parent.name.toLowerCase() === 'keyframes' && lowerCasedProp === 'stroke-dasharray' || lowerCasedProp === 'stroke-dashoffset' || lowerCasedProp === 'stroke-width';\n}\n\nfunction transform(opts, decl) {\n  const lowerCasedProp = decl.prop.toLowerCase();\n\n  if (~lowerCasedProp.indexOf('flex') || lowerCasedProp.indexOf('--') === 0) {\n    return;\n  }\n\n  decl.value = (0, _postcssValueParser2.default)(decl.value).walk(node => {\n    const lowerCasedValue = node.value.toLowerCase();\n\n    if (node.type === 'word') {\n      parseWord(node, opts, shouldStripPercent(decl));\n\n      if (lowerCasedProp === 'opacity' || lowerCasedProp === 'shape-image-threshold') {\n        clampOpacity(node);\n      }\n    } else if (node.type === 'function') {\n      if (lowerCasedValue === 'calc' || lowerCasedValue === 'hsl' || lowerCasedValue === 'hsla') {\n        (0, _postcssValueParser.walk)(node.nodes, n => {\n          if (n.type === 'word') {\n            parseWord(n, opts, true);\n          }\n        });\n        return false;\n      }\n\n      if (lowerCasedValue === 'url') {\n        return false;\n      }\n    }\n  }).toString();\n}\n\nconst plugin = 'postcss-convert-values';\nexports.default = _postcss2.default.plugin(plugin, (opts = {\n  precision: false\n}) => {\n  return css => css.walkDecls(transform.bind(null, opts));\n});\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-convert-values/dist/index.js"],"names":["Object","defineProperty","exports","value","_postcss","require","_postcss2","_interopRequireDefault","_postcssValueParser","_postcssValueParser2","_convert","_convert2","obj","__esModule","default","LENGTH_UNITS","parseWord","node","opts","keepZeroUnit","pair","unit","num","Number","number","u","indexOf","toLowerCase","precision","Math","pow","round","parseFloat","clampOpacity","shouldStripPercent","decl","parent","lowerCasedProp","prop","name","transform","walk","lowerCasedValue","type","nodes","n","toString","plugin","css","walkDecls","bind","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _postcssValueParser = require('postcss-value-parser');\n\nvar _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);\n\nvar _convert = require('./lib/convert');\n\nvar _convert2 = _interopRequireDefault(_convert);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst LENGTH_UNITS = ['em', 'ex', 'ch', 'rem', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm', 'q', 'in', 'pt', 'pc', 'px'];\n\nfunction parseWord(node, opts, keepZeroUnit) {\n    const pair = (0, _postcssValueParser.unit)(node.value);\n    if (pair) {\n        const num = Number(pair.number);\n        const u = pair.unit;\n        if (num === 0) {\n            node.value = keepZeroUnit || !~LENGTH_UNITS.indexOf(u.toLowerCase()) && u !== '%' ? 0 + u : 0;\n        } else {\n            node.value = (0, _convert2.default)(num, u, opts);\n\n            if (typeof opts.precision === 'number' && u.toLowerCase() === 'px' && ~pair.number.indexOf('.')) {\n                const precision = Math.pow(10, opts.precision);\n                node.value = Math.round(parseFloat(node.value) * precision) / precision + u;\n            }\n        }\n    }\n}\n\nfunction clampOpacity(node) {\n    const pair = (0, _postcssValueParser.unit)(node.value);\n    if (!pair) {\n        return;\n    }\n    let num = Number(pair.number);\n    if (num > 1) {\n        node.value = 1 + pair.unit;\n    } else if (num < 0) {\n        node.value = 0 + pair.unit;\n    }\n}\n\nfunction shouldStripPercent(decl) {\n    const { parent } = decl;\n    const lowerCasedProp = decl.prop.toLowerCase();\n    return ~decl.value.indexOf('%') && (lowerCasedProp === 'max-height' || lowerCasedProp === 'height') || parent.parent && parent.parent.name && parent.parent.name.toLowerCase() === 'keyframes' && lowerCasedProp === 'stroke-dasharray' || lowerCasedProp === 'stroke-dashoffset' || lowerCasedProp === 'stroke-width';\n}\n\nfunction transform(opts, decl) {\n    const lowerCasedProp = decl.prop.toLowerCase();\n    if (~lowerCasedProp.indexOf('flex') || lowerCasedProp.indexOf('--') === 0) {\n        return;\n    }\n\n    decl.value = (0, _postcssValueParser2.default)(decl.value).walk(node => {\n        const lowerCasedValue = node.value.toLowerCase();\n\n        if (node.type === 'word') {\n            parseWord(node, opts, shouldStripPercent(decl));\n            if (lowerCasedProp === 'opacity' || lowerCasedProp === 'shape-image-threshold') {\n                clampOpacity(node);\n            }\n        } else if (node.type === 'function') {\n            if (lowerCasedValue === 'calc' || lowerCasedValue === 'hsl' || lowerCasedValue === 'hsla') {\n                (0, _postcssValueParser.walk)(node.nodes, n => {\n                    if (n.type === 'word') {\n                        parseWord(n, opts, true);\n                    }\n                });\n                return false;\n            }\n            if (lowerCasedValue === 'url') {\n                return false;\n            }\n        }\n    }).toString();\n}\n\nconst plugin = 'postcss-convert-values';\n\nexports.default = _postcss2.default.plugin(plugin, (opts = { precision: false }) => {\n    return css => css.walkDecls(transform.bind(null, opts));\n});\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}