{"ast":null,"code":"import postcss from 'postcss';\nconst OVERRIDABLE_RULES = ['keyframes', 'counter-style'];\nconst SCOPE_RULES = ['media', 'supports'];\n\nfunction isOverridable(name) {\n  return ~OVERRIDABLE_RULES.indexOf(postcss.vendor.unprefixed(name.toLowerCase()));\n}\n\nfunction isScope(name) {\n  return ~SCOPE_RULES.indexOf(postcss.vendor.unprefixed(name.toLowerCase()));\n}\n\nfunction getScope(node) {\n  let current = node.parent;\n  const chain = [node.name.toLowerCase(), node.params];\n\n  do {\n    if (current.type === 'atrule' && isScope(current.name)) {\n      chain.unshift(current.name + ' ' + current.params);\n    }\n\n    current = current.parent;\n  } while (current);\n\n  return chain.join('|');\n}\n\nexport default postcss.plugin('postcss-discard-overridden', () => {\n  return css => {\n    const cache = {};\n    const rules = [];\n    css.walkAtRules(node => {\n      if (isOverridable(node.name)) {\n        const scope = getScope(node);\n        cache[scope] = node;\n        rules.push({\n          node,\n          scope\n        });\n      }\n    });\n    rules.forEach(rule => {\n      if (cache[rule.scope] !== rule.node) {\n        rule.node.remove();\n      }\n    });\n  };\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-discard-overridden/src/index.js"],"names":["postcss","OVERRIDABLE_RULES","SCOPE_RULES","isOverridable","name","indexOf","vendor","unprefixed","toLowerCase","isScope","getScope","node","current","parent","chain","params","type","unshift","join","plugin","css","cache","rules","walkAtRules","scope","push","forEach","rule","remove"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AAEA,MAAMC,iBAAiB,GAAG,CAAC,WAAD,EAAc,eAAd,CAA1B;AACA,MAAMC,WAAW,GAAG,CAAC,OAAD,EAAU,UAAV,CAApB;;AAEA,SAASC,aAAT,CAAwBC,IAAxB,EAA8B;AAC1B,SAAO,CAACH,iBAAiB,CAACI,OAAlB,CAA0BL,OAAO,CAACM,MAAR,CAAeC,UAAf,CAA0BH,IAAI,CAACI,WAAL,EAA1B,CAA1B,CAAR;AACH;;AAED,SAASC,OAAT,CAAkBL,IAAlB,EAAwB;AACpB,SAAO,CAACF,WAAW,CAACG,OAAZ,CAAoBL,OAAO,CAACM,MAAR,CAAeC,UAAf,CAA0BH,IAAI,CAACI,WAAL,EAA1B,CAApB,CAAR;AACH;;AAED,SAASE,QAAT,CAAmBC,IAAnB,EAAyB;AACrB,MAAIC,OAAO,GAAGD,IAAI,CAACE,MAAnB;AACA,QAAMC,KAAK,GAAG,CAACH,IAAI,CAACP,IAAL,CAAUI,WAAV,EAAD,EAA0BG,IAAI,CAACI,MAA/B,CAAd;;AACA,KAAG;AACC,QAAIH,OAAO,CAACI,IAAR,KAAiB,QAAjB,IAA6BP,OAAO,CAACG,OAAO,CAACR,IAAT,CAAxC,EAAwD;AACpDU,MAAAA,KAAK,CAACG,OAAN,CAAcL,OAAO,CAACR,IAAR,GAAe,GAAf,GAAqBQ,OAAO,CAACG,MAA3C;AACH;;AACDH,IAAAA,OAAO,GAAGA,OAAO,CAACC,MAAlB;AACH,GALD,QAKSD,OALT;;AAMA,SAAOE,KAAK,CAACI,IAAN,CAAW,GAAX,CAAP;AACH;;AAED,eAAelB,OAAO,CAACmB,MAAR,CAAe,4BAAf,EAA6C,MAAM;AAC9D,SAAOC,GAAG,IAAI;AACV,UAAMC,KAAK,GAAG,EAAd;AACA,UAAMC,KAAK,GAAG,EAAd;AACAF,IAAAA,GAAG,CAACG,WAAJ,CAAgBZ,IAAI,IAAI;AACpB,UAAIR,aAAa,CAACQ,IAAI,CAACP,IAAN,CAAjB,EAA8B;AAC1B,cAAMoB,KAAK,GAAGd,QAAQ,CAACC,IAAD,CAAtB;AACAU,QAAAA,KAAK,CAACG,KAAD,CAAL,GAAeb,IAAf;AACAW,QAAAA,KAAK,CAACG,IAAN,CAAW;AACPd,UAAAA,IADO;AAEPa,UAAAA;AAFO,SAAX;AAIH;AACJ,KATD;AAUAF,IAAAA,KAAK,CAACI,OAAN,CAAcC,IAAI,IAAI;AAClB,UAAIN,KAAK,CAACM,IAAI,CAACH,KAAN,CAAL,KAAsBG,IAAI,CAAChB,IAA/B,EAAqC;AACjCgB,QAAAA,IAAI,CAAChB,IAAL,CAAUiB,MAAV;AACH;AACJ,KAJD;AAKH,GAlBD;AAmBH,CApBc,CAAf","sourcesContent":["import postcss from 'postcss';\n\nconst OVERRIDABLE_RULES = ['keyframes', 'counter-style'];\nconst SCOPE_RULES = ['media', 'supports'];\n\nfunction isOverridable (name) {\n    return ~OVERRIDABLE_RULES.indexOf(postcss.vendor.unprefixed(name.toLowerCase()));\n}\n\nfunction isScope (name) {\n    return ~SCOPE_RULES.indexOf(postcss.vendor.unprefixed(name.toLowerCase()));\n}\n\nfunction getScope (node) {\n    let current = node.parent;\n    const chain = [node.name.toLowerCase(), node.params];\n    do {\n        if (current.type === 'atrule' && isScope(current.name)) {\n            chain.unshift(current.name + ' ' + current.params);\n        }\n        current = current.parent;\n    } while (current);\n    return chain.join('|');\n}\n\nexport default postcss.plugin('postcss-discard-overridden', () => {\n    return css => {\n        const cache = {};\n        const rules = [];\n        css.walkAtRules(node => {\n            if (isOverridable(node.name)) {\n                const scope = getScope(node);\n                cache[scope] = node;\n                rules.push({\n                    node,\n                    scope,\n                });\n            }\n        });\n        rules.forEach(rule => {\n            if (cache[rule.scope] !== rule.node) {\n                rule.node.remove();\n            }\n        });\n    };\n});\n"]},"metadata":{},"sourceType":"module"}