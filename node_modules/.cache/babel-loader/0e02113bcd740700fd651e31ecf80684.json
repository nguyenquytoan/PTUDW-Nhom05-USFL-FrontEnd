{"ast":null,"code":"var crypto = require('../browser');\n\nvar test = require('tape');\n\nvar fs = require('fs');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar path = require('path'); // Test RSA encryption/decryption\n\n\ntest('node tests', function (t) {\n  var keyPem = fs.readFileSync(path.join(__dirname, 'test_key.pem'), 'ascii');\n  var rsaPubPem = fs.readFileSync(path.join(__dirname, 'test_rsa_pubkey.pem'), 'ascii');\n  var rsaKeyPem = fs.readFileSync(path.join(__dirname, 'test_rsa_privkey.pem'), 'ascii');\n  var rsaKeyPemEncrypted = fs.readFileSync(path.join(__dirname, 'test_rsa_privkey_encrypted.pem'), 'ascii');\n  var input = 'I AM THE WALRUS';\n  var bufferToEncrypt = Buffer.from(input);\n  var encryptedBuffer = crypto.publicEncrypt(rsaPubPem, bufferToEncrypt);\n  var decryptedBuffer = crypto.privateDecrypt(rsaKeyPem, encryptedBuffer);\n  t.equal(input, decryptedBuffer.toString());\n  var decryptedBufferWithPassword = crypto.privateDecrypt({\n    key: rsaKeyPemEncrypted,\n    passphrase: 'password'\n  }, encryptedBuffer);\n  t.equal(input, decryptedBufferWithPassword.toString()); // encryptedBuffer = crypto.publicEncrypt(certPem, bufferToEncrypt);\n  // decryptedBuffer = crypto.privateDecrypt(keyPem, encryptedBuffer);\n  // t.equal(input, decryptedBuffer.toString());\n\n  encryptedBuffer = crypto.publicEncrypt(keyPem, bufferToEncrypt);\n  decryptedBuffer = crypto.privateDecrypt(keyPem, encryptedBuffer);\n  t.equal(input, decryptedBuffer.toString());\n  encryptedBuffer = crypto.privateEncrypt(keyPem, bufferToEncrypt);\n  decryptedBuffer = crypto.publicDecrypt(keyPem, encryptedBuffer);\n  t.equal(input, decryptedBuffer.toString());\n  t.throws(function () {\n    crypto.privateDecrypt({\n      key: rsaKeyPemEncrypted,\n      passphrase: 'wrong'\n    }, encryptedBuffer);\n  });\n  t.end();\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/public-encrypt/test/nodeTests.js"],"names":["crypto","require","test","fs","Buffer","path","t","keyPem","readFileSync","join","__dirname","rsaPubPem","rsaKeyPem","rsaKeyPemEncrypted","input","bufferToEncrypt","from","encryptedBuffer","publicEncrypt","decryptedBuffer","privateDecrypt","equal","toString","decryptedBufferWithPassword","key","passphrase","privateEncrypt","publicDecrypt","throws","end"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,YAAD,CAApB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,aAAD,CAAP,CAAuBG,MAApC;;AACA,IAAIC,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAAlB,C,CACA;;;AACAC,IAAI,CAAC,YAAD,EAAe,UAAUI,CAAV,EAAa;AAC9B,MAAIC,MAAM,GAAGJ,EAAE,CAACK,YAAH,CAAgBH,IAAI,CAACI,IAAL,CAAUC,SAAV,EAAqB,cAArB,CAAhB,EAAsD,OAAtD,CAAb;AACA,MAAIC,SAAS,GAAGR,EAAE,CAACK,YAAH,CAAgBH,IAAI,CAACI,IAAL,CAAUC,SAAV,EAAqB,qBAArB,CAAhB,EACd,OADc,CAAhB;AAEA,MAAIE,SAAS,GAAGT,EAAE,CAACK,YAAH,CAAgBH,IAAI,CAACI,IAAL,CAAUC,SAAV,EAAqB,sBAArB,CAAhB,EACd,OADc,CAAhB;AAEA,MAAIG,kBAAkB,GAAGV,EAAE,CAACK,YAAH,CAAgBH,IAAI,CAACI,IAAL,CACvCC,SADuC,EAC5B,gCAD4B,CAAhB,EACuB,OADvB,CAAzB;AAEA,MAAII,KAAK,GAAG,iBAAZ;AACA,MAAIC,eAAe,GAAGX,MAAM,CAACY,IAAP,CAAYF,KAAZ,CAAtB;AAEA,MAAIG,eAAe,GAAGjB,MAAM,CAACkB,aAAP,CAAqBP,SAArB,EAAgCI,eAAhC,CAAtB;AAEA,MAAII,eAAe,GAAGnB,MAAM,CAACoB,cAAP,CAAsBR,SAAtB,EAAiCK,eAAjC,CAAtB;AACAX,EAAAA,CAAC,CAACe,KAAF,CAAQP,KAAR,EAAeK,eAAe,CAACG,QAAhB,EAAf;AAEA,MAAIC,2BAA2B,GAAGvB,MAAM,CAACoB,cAAP,CAAsB;AACtDI,IAAAA,GAAG,EAAEX,kBADiD;AAEtDY,IAAAA,UAAU,EAAE;AAF0C,GAAtB,EAG/BR,eAH+B,CAAlC;AAIAX,EAAAA,CAAC,CAACe,KAAF,CAAQP,KAAR,EAAeS,2BAA2B,CAACD,QAA5B,EAAf,EApB8B,CAsB9B;AAEA;AACA;;AAEAL,EAAAA,eAAe,GAAGjB,MAAM,CAACkB,aAAP,CAAqBX,MAArB,EAA6BQ,eAA7B,CAAlB;AAEAI,EAAAA,eAAe,GAAGnB,MAAM,CAACoB,cAAP,CAAsBb,MAAtB,EAA8BU,eAA9B,CAAlB;AACAX,EAAAA,CAAC,CAACe,KAAF,CAAQP,KAAR,EAAeK,eAAe,CAACG,QAAhB,EAAf;AAEAL,EAAAA,eAAe,GAAGjB,MAAM,CAAC0B,cAAP,CAAsBnB,MAAtB,EAA8BQ,eAA9B,CAAlB;AAEAI,EAAAA,eAAe,GAAGnB,MAAM,CAAC2B,aAAP,CAAqBpB,MAArB,EAA6BU,eAA7B,CAAlB;AACAX,EAAAA,CAAC,CAACe,KAAF,CAAQP,KAAR,EAAeK,eAAe,CAACG,QAAhB,EAAf;AAEAhB,EAAAA,CAAC,CAACsB,MAAF,CAAS,YAAY;AACnB5B,IAAAA,MAAM,CAACoB,cAAP,CAAsB;AACpBI,MAAAA,GAAG,EAAEX,kBADe;AAEpBY,MAAAA,UAAU,EAAE;AAFQ,KAAtB,EAGGR,eAHH;AAID,GALD;AAMAX,EAAAA,CAAC,CAACuB,GAAF;AACD,CA5CG,CAAJ","sourcesContent":["var crypto = require('../browser')\nvar test = require('tape')\nvar fs = require('fs')\nvar Buffer = require('safe-buffer').Buffer\nvar path = require('path')\n// Test RSA encryption/decryption\ntest('node tests', function (t) {\n  var keyPem = fs.readFileSync(path.join(__dirname, 'test_key.pem'), 'ascii')\n  var rsaPubPem = fs.readFileSync(path.join(__dirname, 'test_rsa_pubkey.pem'),\n    'ascii')\n  var rsaKeyPem = fs.readFileSync(path.join(__dirname, 'test_rsa_privkey.pem'),\n    'ascii')\n  var rsaKeyPemEncrypted = fs.readFileSync(path.join(\n    __dirname, 'test_rsa_privkey_encrypted.pem'), 'ascii')\n  var input = 'I AM THE WALRUS'\n  var bufferToEncrypt = Buffer.from(input)\n\n  var encryptedBuffer = crypto.publicEncrypt(rsaPubPem, bufferToEncrypt)\n\n  var decryptedBuffer = crypto.privateDecrypt(rsaKeyPem, encryptedBuffer)\n  t.equal(input, decryptedBuffer.toString())\n\n  var decryptedBufferWithPassword = crypto.privateDecrypt({\n    key: rsaKeyPemEncrypted,\n    passphrase: 'password'\n  }, encryptedBuffer)\n  t.equal(input, decryptedBufferWithPassword.toString())\n\n  // encryptedBuffer = crypto.publicEncrypt(certPem, bufferToEncrypt);\n\n  // decryptedBuffer = crypto.privateDecrypt(keyPem, encryptedBuffer);\n  // t.equal(input, decryptedBuffer.toString());\n\n  encryptedBuffer = crypto.publicEncrypt(keyPem, bufferToEncrypt)\n\n  decryptedBuffer = crypto.privateDecrypt(keyPem, encryptedBuffer)\n  t.equal(input, decryptedBuffer.toString())\n\n  encryptedBuffer = crypto.privateEncrypt(keyPem, bufferToEncrypt)\n\n  decryptedBuffer = crypto.publicDecrypt(keyPem, encryptedBuffer)\n  t.equal(input, decryptedBuffer.toString())\n\n  t.throws(function () {\n    crypto.privateDecrypt({\n      key: rsaKeyPemEncrypted,\n      passphrase: 'wrong'\n    }, encryptedBuffer)\n  })\n  t.end()\n})\n"]},"metadata":{},"sourceType":"script"}