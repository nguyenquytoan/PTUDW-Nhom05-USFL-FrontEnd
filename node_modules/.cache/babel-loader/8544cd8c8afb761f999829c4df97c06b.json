{"ast":null,"code":"'use strict';\n/**\n * Cache results of the first function call to ensure only calling once.\n *\n * ```js\n * var utils = require('lazy-cache')(require);\n * // cache the call to `require('ansi-yellow')`\n * utils('ansi-yellow', 'yellow');\n * // use `ansi-yellow`\n * console.log(utils.yellow('this is yellow'));\n * ```\n *\n * @param  {Function} `fn` Function that will be called only once.\n * @return {Function} Function that can be called to get the cached function\n * @api public\n */\n\nfunction lazyCache(fn) {\n  var cache = {};\n\n  var proxy = function (mod, name) {\n    name = name || camelcase(mod); // check both boolean and string in case `process.env` cases to string\n\n    if (process.env.UNLAZY === 'true' || process.env.UNLAZY === true || process.env.TRAVIS) {\n      cache[name] = fn(mod);\n    }\n\n    Object.defineProperty(proxy, name, {\n      enumerable: true,\n      configurable: true,\n      get: getter\n    });\n\n    function getter() {\n      if (cache.hasOwnProperty(name)) {\n        return cache[name];\n      }\n\n      return cache[name] = fn(mod);\n    }\n\n    return getter;\n  };\n\n  return proxy;\n}\n/**\n * Used to camelcase the name to be stored on the `lazy` object.\n *\n * @param  {String} `str` String containing `_`, `.`, `-` or whitespace that will be camelcased.\n * @return {String} camelcased string.\n */\n\n\nfunction camelcase(str) {\n  if (str.length === 1) {\n    return str.toLowerCase();\n  }\n\n  str = str.replace(/^[\\W_]+|[\\W_]+$/g, '').toLowerCase();\n  return str.replace(/[\\W_]+(\\w|$)/g, function (_, ch) {\n    return ch.toUpperCase();\n  });\n}\n/**\n * Expose `lazyCache`\n */\n\n\nmodule.exports = lazyCache;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/lazy-cache/index.js"],"names":["lazyCache","fn","cache","proxy","mod","name","camelcase","process","env","UNLAZY","TRAVIS","Object","defineProperty","enumerable","configurable","get","getter","hasOwnProperty","str","length","toLowerCase","replace","_","ch","toUpperCase","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;AAgBA,SAASA,SAAT,CAAmBC,EAAnB,EAAuB;AACrB,MAAIC,KAAK,GAAG,EAAZ;;AACA,MAAIC,KAAK,GAAG,UAASC,GAAT,EAAcC,IAAd,EAAoB;AAC9BA,IAAAA,IAAI,GAAGA,IAAI,IAAIC,SAAS,CAACF,GAAD,CAAxB,CAD8B,CAG9B;;AACA,QAAIG,OAAO,CAACC,GAAR,CAAYC,MAAZ,KAAuB,MAAvB,IAAiCF,OAAO,CAACC,GAAR,CAAYC,MAAZ,KAAuB,IAAxD,IAAgEF,OAAO,CAACC,GAAR,CAAYE,MAAhF,EAAwF;AACtFR,MAAAA,KAAK,CAACG,IAAD,CAAL,GAAcJ,EAAE,CAACG,GAAD,CAAhB;AACD;;AAEDO,IAAAA,MAAM,CAACC,cAAP,CAAsBT,KAAtB,EAA6BE,IAA7B,EAAmC;AACjCQ,MAAAA,UAAU,EAAE,IADqB;AAEjCC,MAAAA,YAAY,EAAE,IAFmB;AAGjCC,MAAAA,GAAG,EAAEC;AAH4B,KAAnC;;AAMA,aAASA,MAAT,GAAkB;AAChB,UAAId,KAAK,CAACe,cAAN,CAAqBZ,IAArB,CAAJ,EAAgC;AAC9B,eAAOH,KAAK,CAACG,IAAD,CAAZ;AACD;;AACD,aAAQH,KAAK,CAACG,IAAD,CAAL,GAAcJ,EAAE,CAACG,GAAD,CAAxB;AACD;;AACD,WAAOY,MAAP;AACD,GArBD;;AAsBA,SAAOb,KAAP;AACD;AAED;;;;;;;;AAOA,SAASG,SAAT,CAAmBY,GAAnB,EAAwB;AACtB,MAAIA,GAAG,CAACC,MAAJ,KAAe,CAAnB,EAAsB;AACpB,WAAOD,GAAG,CAACE,WAAJ,EAAP;AACD;;AACDF,EAAAA,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAY,kBAAZ,EAAgC,EAAhC,EAAoCD,WAApC,EAAN;AACA,SAAOF,GAAG,CAACG,OAAJ,CAAY,eAAZ,EAA6B,UAASC,CAAT,EAAYC,EAAZ,EAAgB;AAClD,WAAOA,EAAE,CAACC,WAAH,EAAP;AACD,GAFM,CAAP;AAGD;AAED;;;;;AAIAC,MAAM,CAACC,OAAP,GAAiB1B,SAAjB","sourcesContent":["'use strict';\n\n/**\n * Cache results of the first function call to ensure only calling once.\n *\n * ```js\n * var utils = require('lazy-cache')(require);\n * // cache the call to `require('ansi-yellow')`\n * utils('ansi-yellow', 'yellow');\n * // use `ansi-yellow`\n * console.log(utils.yellow('this is yellow'));\n * ```\n *\n * @param  {Function} `fn` Function that will be called only once.\n * @return {Function} Function that can be called to get the cached function\n * @api public\n */\n\nfunction lazyCache(fn) {\n  var cache = {};\n  var proxy = function(mod, name) {\n    name = name || camelcase(mod);\n\n    // check both boolean and string in case `process.env` cases to string\n    if (process.env.UNLAZY === 'true' || process.env.UNLAZY === true || process.env.TRAVIS) {\n      cache[name] = fn(mod);\n    }\n\n    Object.defineProperty(proxy, name, {\n      enumerable: true,\n      configurable: true,\n      get: getter\n    });\n\n    function getter() {\n      if (cache.hasOwnProperty(name)) {\n        return cache[name];\n      }\n      return (cache[name] = fn(mod));\n    }\n    return getter;\n  };\n  return proxy;\n}\n\n/**\n * Used to camelcase the name to be stored on the `lazy` object.\n *\n * @param  {String} `str` String containing `_`, `.`, `-` or whitespace that will be camelcased.\n * @return {String} camelcased string.\n */\n\nfunction camelcase(str) {\n  if (str.length === 1) {\n    return str.toLowerCase();\n  }\n  str = str.replace(/^[\\W_]+|[\\W_]+$/g, '').toLowerCase();\n  return str.replace(/[\\W_]+(\\w|$)/g, function(_, ch) {\n    return ch.toUpperCase();\n  });\n}\n\n/**\n * Expose `lazyCache`\n */\n\nmodule.exports = lazyCache;\n"]},"metadata":{},"sourceType":"script"}