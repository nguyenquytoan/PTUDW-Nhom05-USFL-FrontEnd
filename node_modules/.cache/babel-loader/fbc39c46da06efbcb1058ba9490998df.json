{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ts = require(\"typescript\");\n\nfunction isAccessorDeclaration(node) {\n  return node.kind === ts.SyntaxKind.GetAccessor || node.kind === ts.SyntaxKind.SetAccessor;\n}\n\nexports.isAccessorDeclaration = isAccessorDeclaration;\n\nfunction isArrayBindingPattern(node) {\n  return node.kind === ts.SyntaxKind.ArrayBindingPattern;\n}\n\nexports.isArrayBindingPattern = isArrayBindingPattern;\n\nfunction isArrayLiteralExpression(node) {\n  return node.kind === ts.SyntaxKind.ArrayLiteralExpression;\n}\n\nexports.isArrayLiteralExpression = isArrayLiteralExpression;\n\nfunction isArrayTypeNode(node) {\n  return node.kind === ts.SyntaxKind.ArrayType;\n}\n\nexports.isArrayTypeNode = isArrayTypeNode;\n\nfunction isArrowFunction(node) {\n  return node.kind === ts.SyntaxKind.ArrowFunction;\n}\n\nexports.isArrowFunction = isArrowFunction;\n\nfunction isAsExpression(node) {\n  return node.kind === ts.SyntaxKind.AsExpression;\n}\n\nexports.isAsExpression = isAsExpression;\n\nfunction isAssertionExpression(node) {\n  return node.kind === ts.SyntaxKind.AsExpression || node.kind === ts.SyntaxKind.TypeAssertionExpression;\n}\n\nexports.isAssertionExpression = isAssertionExpression;\n\nfunction isAwaitExpression(node) {\n  return node.kind === ts.SyntaxKind.AwaitExpression;\n}\n\nexports.isAwaitExpression = isAwaitExpression;\n\nfunction isBinaryExpression(node) {\n  return node.kind === ts.SyntaxKind.BinaryExpression;\n}\n\nexports.isBinaryExpression = isBinaryExpression;\n\nfunction isBindingElement(node) {\n  return node.kind === ts.SyntaxKind.BindingElement;\n}\n\nexports.isBindingElement = isBindingElement;\n\nfunction isBindingPattern(node) {\n  return node.kind === ts.SyntaxKind.ArrayBindingPattern || node.kind === ts.SyntaxKind.ObjectBindingPattern;\n}\n\nexports.isBindingPattern = isBindingPattern;\n\nfunction isBlock(node) {\n  return node.kind === ts.SyntaxKind.Block;\n}\n\nexports.isBlock = isBlock;\n\nfunction isBlockLike(node) {\n  return node.statements !== undefined;\n}\n\nexports.isBlockLike = isBlockLike;\n\nfunction isBooleanLiteral(node) {\n  return node.kind === ts.SyntaxKind.TrueKeyword || node.kind === ts.SyntaxKind.FalseKeyword;\n}\n\nexports.isBooleanLiteral = isBooleanLiteral;\n\nfunction isBreakOrContinueStatement(node) {\n  return node.kind === ts.SyntaxKind.BreakStatement || node.kind === ts.SyntaxKind.ContinueStatement;\n}\n\nexports.isBreakOrContinueStatement = isBreakOrContinueStatement;\n\nfunction isBreakStatement(node) {\n  return node.kind === ts.SyntaxKind.BreakStatement;\n}\n\nexports.isBreakStatement = isBreakStatement;\n\nfunction isCallExpression(node) {\n  return node.kind === ts.SyntaxKind.CallExpression;\n}\n\nexports.isCallExpression = isCallExpression;\n\nfunction isCallLikeExpression(node) {\n  switch (node.kind) {\n    case ts.SyntaxKind.CallExpression:\n    case ts.SyntaxKind.Decorator:\n    case ts.SyntaxKind.JsxOpeningElement:\n    case ts.SyntaxKind.JsxSelfClosingElement:\n    case ts.SyntaxKind.NewExpression:\n    case ts.SyntaxKind.TaggedTemplateExpression:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexports.isCallLikeExpression = isCallLikeExpression;\n\nfunction isCallSignatureDeclaration(node) {\n  return node.kind === ts.SyntaxKind.CallSignature;\n}\n\nexports.isCallSignatureDeclaration = isCallSignatureDeclaration;\n\nfunction isCaseBlock(node) {\n  return node.kind === ts.SyntaxKind.CaseBlock;\n}\n\nexports.isCaseBlock = isCaseBlock;\n\nfunction isCaseClause(node) {\n  return node.kind === ts.SyntaxKind.CaseClause;\n}\n\nexports.isCaseClause = isCaseClause;\n\nfunction isCaseOrDefaultClause(node) {\n  return node.kind === ts.SyntaxKind.CaseClause || node.kind === ts.SyntaxKind.DefaultClause;\n}\n\nexports.isCaseOrDefaultClause = isCaseOrDefaultClause;\n\nfunction isCatchClause(node) {\n  return node.kind === ts.SyntaxKind.CatchClause;\n}\n\nexports.isCatchClause = isCatchClause;\n\nfunction isClassDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ClassDeclaration;\n}\n\nexports.isClassDeclaration = isClassDeclaration;\n\nfunction isClassExpression(node) {\n  return node.kind === ts.SyntaxKind.ClassExpression;\n}\n\nexports.isClassExpression = isClassExpression;\n\nfunction isClassLikeDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ClassDeclaration || node.kind === ts.SyntaxKind.ClassExpression;\n}\n\nexports.isClassLikeDeclaration = isClassLikeDeclaration;\n\nfunction isCommaListExpression(node) {\n  return node.kind === ts.SyntaxKind.CommaListExpression;\n}\n\nexports.isCommaListExpression = isCommaListExpression;\n\nfunction isConditionalExpression(node) {\n  return node.kind === ts.SyntaxKind.ConditionalExpression;\n}\n\nexports.isConditionalExpression = isConditionalExpression;\n\nfunction isConditionalTypeNode(node) {\n  return node.kind === ts.SyntaxKind.ConditionalType;\n}\n\nexports.isConditionalTypeNode = isConditionalTypeNode;\n\nfunction isConstructorDeclaration(node) {\n  return node.kind === ts.SyntaxKind.Constructor;\n}\n\nexports.isConstructorDeclaration = isConstructorDeclaration;\n\nfunction isConstructorTypeNode(node) {\n  return node.kind === ts.SyntaxKind.ConstructorType;\n}\n\nexports.isConstructorTypeNode = isConstructorTypeNode;\n\nfunction isConstructSignatureDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ConstructSignature;\n}\n\nexports.isConstructSignatureDeclaration = isConstructSignatureDeclaration;\n\nfunction isContinueStatement(node) {\n  return node.kind === ts.SyntaxKind.ContinueStatement;\n}\n\nexports.isContinueStatement = isContinueStatement;\n\nfunction isComputedPropertyName(node) {\n  return node.kind === ts.SyntaxKind.ComputedPropertyName;\n}\n\nexports.isComputedPropertyName = isComputedPropertyName;\n\nfunction isDebuggerStatement(node) {\n  return node.kind === ts.SyntaxKind.DebuggerStatement;\n}\n\nexports.isDebuggerStatement = isDebuggerStatement;\n\nfunction isDecorator(node) {\n  return node.kind === ts.SyntaxKind.Decorator;\n}\n\nexports.isDecorator = isDecorator;\n\nfunction isDefaultClause(node) {\n  return node.kind === ts.SyntaxKind.DefaultClause;\n}\n\nexports.isDefaultClause = isDefaultClause;\n\nfunction isDeleteExpression(node) {\n  return node.kind === ts.SyntaxKind.DeleteExpression;\n}\n\nexports.isDeleteExpression = isDeleteExpression;\n\nfunction isDoStatement(node) {\n  return node.kind === ts.SyntaxKind.DoStatement;\n}\n\nexports.isDoStatement = isDoStatement;\n\nfunction isElementAccessExpression(node) {\n  return node.kind === ts.SyntaxKind.ElementAccessExpression;\n}\n\nexports.isElementAccessExpression = isElementAccessExpression;\n\nfunction isEmptyStatement(node) {\n  return node.kind === ts.SyntaxKind.EmptyStatement;\n}\n\nexports.isEmptyStatement = isEmptyStatement;\n\nfunction isEntityName(node) {\n  return node.kind === ts.SyntaxKind.Identifier || isQualifiedName(node);\n}\n\nexports.isEntityName = isEntityName;\n\nfunction isEntityNameExpression(node) {\n  return node.kind === ts.SyntaxKind.Identifier || isPropertyAccessExpression(node) && isEntityNameExpression(node.expression);\n}\n\nexports.isEntityNameExpression = isEntityNameExpression;\n\nfunction isEnumDeclaration(node) {\n  return node.kind === ts.SyntaxKind.EnumDeclaration;\n}\n\nexports.isEnumDeclaration = isEnumDeclaration;\n\nfunction isEnumMember(node) {\n  return node.kind === ts.SyntaxKind.EnumMember;\n}\n\nexports.isEnumMember = isEnumMember;\n\nfunction isExportAssignment(node) {\n  return node.kind === ts.SyntaxKind.ExportAssignment;\n}\n\nexports.isExportAssignment = isExportAssignment;\n\nfunction isExportDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ExportDeclaration;\n}\n\nexports.isExportDeclaration = isExportDeclaration;\n\nfunction isExportSpecifier(node) {\n  return node.kind === ts.SyntaxKind.ExportSpecifier;\n}\n\nexports.isExportSpecifier = isExportSpecifier;\n\nfunction isExpression(node) {\n  switch (node.kind) {\n    case ts.SyntaxKind.ArrayLiteralExpression:\n    case ts.SyntaxKind.ArrowFunction:\n    case ts.SyntaxKind.AsExpression:\n    case ts.SyntaxKind.AwaitExpression:\n    case ts.SyntaxKind.BinaryExpression:\n    case ts.SyntaxKind.CallExpression:\n    case ts.SyntaxKind.ClassExpression:\n    case ts.SyntaxKind.CommaListExpression:\n    case ts.SyntaxKind.ConditionalExpression:\n    case ts.SyntaxKind.DeleteExpression:\n    case ts.SyntaxKind.ElementAccessExpression:\n    case ts.SyntaxKind.FalseKeyword:\n    case ts.SyntaxKind.FunctionExpression:\n    case ts.SyntaxKind.Identifier:\n    case ts.SyntaxKind.JsxElement:\n    case ts.SyntaxKind.JsxFragment:\n    case ts.SyntaxKind.JsxExpression:\n    case ts.SyntaxKind.JsxOpeningElement:\n    case ts.SyntaxKind.JsxOpeningFragment:\n    case ts.SyntaxKind.JsxSelfClosingElement:\n    case ts.SyntaxKind.MetaProperty:\n    case ts.SyntaxKind.NewExpression:\n    case ts.SyntaxKind.NonNullExpression:\n    case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n    case ts.SyntaxKind.NullKeyword:\n    case ts.SyntaxKind.NumericLiteral:\n    case ts.SyntaxKind.ObjectLiteralExpression:\n    case ts.SyntaxKind.OmittedExpression:\n    case ts.SyntaxKind.ParenthesizedExpression:\n    case ts.SyntaxKind.PostfixUnaryExpression:\n    case ts.SyntaxKind.PrefixUnaryExpression:\n    case ts.SyntaxKind.PropertyAccessExpression:\n    case ts.SyntaxKind.RegularExpressionLiteral:\n    case ts.SyntaxKind.SpreadElement:\n    case ts.SyntaxKind.StringLiteral:\n    case ts.SyntaxKind.SuperKeyword:\n    case ts.SyntaxKind.TaggedTemplateExpression:\n    case ts.SyntaxKind.TemplateExpression:\n    case ts.SyntaxKind.ThisKeyword:\n    case ts.SyntaxKind.TrueKeyword:\n    case ts.SyntaxKind.TypeAssertionExpression:\n    case ts.SyntaxKind.TypeOfExpression:\n    case ts.SyntaxKind.VoidExpression:\n    case ts.SyntaxKind.YieldExpression:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexports.isExpression = isExpression;\n\nfunction isExpressionStatement(node) {\n  return node.kind === ts.SyntaxKind.ExpressionStatement;\n}\n\nexports.isExpressionStatement = isExpressionStatement;\n\nfunction isExpressionWithTypeArguments(node) {\n  return node.kind === ts.SyntaxKind.ExpressionWithTypeArguments;\n}\n\nexports.isExpressionWithTypeArguments = isExpressionWithTypeArguments;\n\nfunction isExternalModuleReference(node) {\n  return node.kind === ts.SyntaxKind.ExternalModuleReference;\n}\n\nexports.isExternalModuleReference = isExternalModuleReference;\n\nfunction isForInStatement(node) {\n  return node.kind === ts.SyntaxKind.ForInStatement;\n}\n\nexports.isForInStatement = isForInStatement;\n\nfunction isForInOrOfStatement(node) {\n  return node.kind === ts.SyntaxKind.ForOfStatement || node.kind === ts.SyntaxKind.ForInStatement;\n}\n\nexports.isForInOrOfStatement = isForInOrOfStatement;\n\nfunction isForOfStatement(node) {\n  return node.kind === ts.SyntaxKind.ForOfStatement;\n}\n\nexports.isForOfStatement = isForOfStatement;\n\nfunction isForStatement(node) {\n  return node.kind === ts.SyntaxKind.ForStatement;\n}\n\nexports.isForStatement = isForStatement;\n\nfunction isFunctionDeclaration(node) {\n  return node.kind === ts.SyntaxKind.FunctionDeclaration;\n}\n\nexports.isFunctionDeclaration = isFunctionDeclaration;\n\nfunction isFunctionExpression(node) {\n  return node.kind === ts.SyntaxKind.FunctionExpression;\n}\n\nexports.isFunctionExpression = isFunctionExpression;\n\nfunction isFunctionTypeNode(node) {\n  return node.kind === ts.SyntaxKind.FunctionType;\n}\n\nexports.isFunctionTypeNode = isFunctionTypeNode;\n\nfunction isGetAccessorDeclaration(node) {\n  return node.kind === ts.SyntaxKind.GetAccessor;\n}\n\nexports.isGetAccessorDeclaration = isGetAccessorDeclaration;\n\nfunction isIdentifier(node) {\n  return node.kind === ts.SyntaxKind.Identifier;\n}\n\nexports.isIdentifier = isIdentifier;\n\nfunction isIfStatement(node) {\n  return node.kind === ts.SyntaxKind.IfStatement;\n}\n\nexports.isIfStatement = isIfStatement;\n\nfunction isImportClause(node) {\n  return node.kind === ts.SyntaxKind.ImportClause;\n}\n\nexports.isImportClause = isImportClause;\n\nfunction isImportDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ImportDeclaration;\n}\n\nexports.isImportDeclaration = isImportDeclaration;\n\nfunction isImportEqualsDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ImportEqualsDeclaration;\n}\n\nexports.isImportEqualsDeclaration = isImportEqualsDeclaration;\n\nfunction isImportSpecifier(node) {\n  return node.kind === ts.SyntaxKind.ImportSpecifier;\n}\n\nexports.isImportSpecifier = isImportSpecifier;\n\nfunction isIndexedAccessTypeNode(node) {\n  return node.kind === ts.SyntaxKind.IndexedAccessType;\n}\n\nexports.isIndexedAccessTypeNode = isIndexedAccessTypeNode;\n\nfunction isIndexSignatureDeclaration(node) {\n  return node.kind === ts.SyntaxKind.IndexSignature;\n}\n\nexports.isIndexSignatureDeclaration = isIndexSignatureDeclaration;\n\nfunction isInferTypeNode(node) {\n  return node.kind === ts.SyntaxKind.InferType;\n}\n\nexports.isInferTypeNode = isInferTypeNode;\n\nfunction isInterfaceDeclaration(node) {\n  return node.kind === ts.SyntaxKind.InterfaceDeclaration;\n}\n\nexports.isInterfaceDeclaration = isInterfaceDeclaration;\n\nfunction isIntersectionTypeNode(node) {\n  return node.kind === ts.SyntaxKind.IntersectionType;\n}\n\nexports.isIntersectionTypeNode = isIntersectionTypeNode;\n\nfunction isIterationStatement(node) {\n  switch (node.kind) {\n    case ts.SyntaxKind.ForStatement:\n    case ts.SyntaxKind.ForOfStatement:\n    case ts.SyntaxKind.ForInStatement:\n    case ts.SyntaxKind.WhileStatement:\n    case ts.SyntaxKind.DoStatement:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexports.isIterationStatement = isIterationStatement;\n\nfunction isJsDoc(node) {\n  return node.kind === ts.SyntaxKind.JSDocComment;\n}\n\nexports.isJsDoc = isJsDoc;\n\nfunction isJsxAttribute(node) {\n  return node.kind === ts.SyntaxKind.JsxAttribute;\n}\n\nexports.isJsxAttribute = isJsxAttribute;\n\nfunction isJsxAttributeLike(node) {\n  return node.kind === ts.SyntaxKind.JsxAttribute || node.kind === ts.SyntaxKind.JsxSpreadAttribute;\n}\n\nexports.isJsxAttributeLike = isJsxAttributeLike;\n\nfunction isJsxAttributes(node) {\n  return node.kind === ts.SyntaxKind.JsxAttributes;\n}\n\nexports.isJsxAttributes = isJsxAttributes;\n\nfunction isJsxClosingElement(node) {\n  return node.kind === ts.SyntaxKind.JsxClosingElement;\n}\n\nexports.isJsxClosingElement = isJsxClosingElement;\n\nfunction isJsxClosingFragment(node) {\n  return node.kind === ts.SyntaxKind.JsxClosingFragment;\n}\n\nexports.isJsxClosingFragment = isJsxClosingFragment;\n\nfunction isJsxElement(node) {\n  return node.kind === ts.SyntaxKind.JsxElement;\n}\n\nexports.isJsxElement = isJsxElement;\n\nfunction isJsxExpression(node) {\n  return node.kind === ts.SyntaxKind.JsxExpression;\n}\n\nexports.isJsxExpression = isJsxExpression;\n\nfunction isJsxFragment(node) {\n  return node.kind === ts.SyntaxKind.JsxFragment;\n}\n\nexports.isJsxFragment = isJsxFragment;\n\nfunction isJsxOpeningElement(node) {\n  return node.kind === ts.SyntaxKind.JsxOpeningElement;\n}\n\nexports.isJsxOpeningElement = isJsxOpeningElement;\n\nfunction isJsxOpeningFragment(node) {\n  return node.kind === ts.SyntaxKind.JsxOpeningFragment;\n}\n\nexports.isJsxOpeningFragment = isJsxOpeningFragment;\n\nfunction isJsxOpeningLikeElement(node) {\n  return node.kind === ts.SyntaxKind.JsxOpeningElement || node.kind === ts.SyntaxKind.JsxSelfClosingElement;\n}\n\nexports.isJsxOpeningLikeElement = isJsxOpeningLikeElement;\n\nfunction isJsxSelfClosingElement(node) {\n  return node.kind === ts.SyntaxKind.JsxSelfClosingElement;\n}\n\nexports.isJsxSelfClosingElement = isJsxSelfClosingElement;\n\nfunction isJsxSpreadAttribute(node) {\n  return node.kind === ts.SyntaxKind.JsxSpreadAttribute;\n}\n\nexports.isJsxSpreadAttribute = isJsxSpreadAttribute;\n\nfunction isJsxText(node) {\n  return node.kind === ts.SyntaxKind.JsxText;\n}\n\nexports.isJsxText = isJsxText;\n\nfunction isLabeledStatement(node) {\n  return node.kind === ts.SyntaxKind.LabeledStatement;\n}\n\nexports.isLabeledStatement = isLabeledStatement;\n\nfunction isLiteralExpression(node) {\n  return node.kind >= ts.SyntaxKind.FirstLiteralToken && node.kind <= ts.SyntaxKind.LastLiteralToken;\n}\n\nexports.isLiteralExpression = isLiteralExpression;\n\nfunction isLiteralTypeNode(node) {\n  return node.kind === ts.SyntaxKind.LiteralType;\n}\n\nexports.isLiteralTypeNode = isLiteralTypeNode;\n\nfunction isMappedTypeNode(node) {\n  return node.kind === ts.SyntaxKind.MappedType;\n}\n\nexports.isMappedTypeNode = isMappedTypeNode;\n\nfunction isMetaProperty(node) {\n  return node.kind === ts.SyntaxKind.MetaProperty;\n}\n\nexports.isMetaProperty = isMetaProperty;\n\nfunction isMethodDeclaration(node) {\n  return node.kind === ts.SyntaxKind.MethodDeclaration;\n}\n\nexports.isMethodDeclaration = isMethodDeclaration;\n\nfunction isMethodSignature(node) {\n  return node.kind === ts.SyntaxKind.MethodSignature;\n}\n\nexports.isMethodSignature = isMethodSignature;\n\nfunction isModuleBlock(node) {\n  return node.kind === ts.SyntaxKind.ModuleBlock;\n}\n\nexports.isModuleBlock = isModuleBlock;\n\nfunction isModuleDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ModuleDeclaration;\n}\n\nexports.isModuleDeclaration = isModuleDeclaration;\n\nfunction isNamedExports(node) {\n  return node.kind === ts.SyntaxKind.NamedExports;\n}\n\nexports.isNamedExports = isNamedExports;\n\nfunction isNamedImports(node) {\n  return node.kind === ts.SyntaxKind.NamedImports;\n}\n\nexports.isNamedImports = isNamedImports;\n\nfunction isNamespaceDeclaration(node) {\n  return isModuleDeclaration(node) && node.name.kind === ts.SyntaxKind.Identifier && node.body !== undefined && (node.body.kind === ts.SyntaxKind.ModuleBlock || isNamespaceDeclaration(node.body));\n}\n\nexports.isNamespaceDeclaration = isNamespaceDeclaration;\n\nfunction isNamespaceImport(node) {\n  return node.kind === ts.SyntaxKind.NamespaceImport;\n}\n\nexports.isNamespaceImport = isNamespaceImport;\n\nfunction isNamespaceExportDeclaration(node) {\n  return node.kind === ts.SyntaxKind.NamespaceExportDeclaration;\n}\n\nexports.isNamespaceExportDeclaration = isNamespaceExportDeclaration;\n\nfunction isNewExpression(node) {\n  return node.kind === ts.SyntaxKind.NewExpression;\n}\n\nexports.isNewExpression = isNewExpression;\n\nfunction isNonNullExpression(node) {\n  return node.kind === ts.SyntaxKind.NonNullExpression;\n}\n\nexports.isNonNullExpression = isNonNullExpression;\n\nfunction isNoSubstitutionTemplateLiteral(node) {\n  return node.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral;\n}\n\nexports.isNoSubstitutionTemplateLiteral = isNoSubstitutionTemplateLiteral;\n\nfunction isNullLiteral(node) {\n  return node.kind === ts.SyntaxKind.NullKeyword;\n}\n\nexports.isNullLiteral = isNullLiteral;\n\nfunction isNumericLiteral(node) {\n  return node.kind === ts.SyntaxKind.NumericLiteral;\n}\n\nexports.isNumericLiteral = isNumericLiteral;\n\nfunction isNumericOrStringLikeLiteral(node) {\n  switch (node.kind) {\n    case ts.SyntaxKind.StringLiteral:\n    case ts.SyntaxKind.NumericLiteral:\n    case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexports.isNumericOrStringLikeLiteral = isNumericOrStringLikeLiteral;\n\nfunction isObjectBindingPattern(node) {\n  return node.kind === ts.SyntaxKind.ObjectBindingPattern;\n}\n\nexports.isObjectBindingPattern = isObjectBindingPattern;\n\nfunction isObjectLiteralExpression(node) {\n  return node.kind === ts.SyntaxKind.ObjectLiteralExpression;\n}\n\nexports.isObjectLiteralExpression = isObjectLiteralExpression;\n\nfunction isOmittedExpression(node) {\n  return node.kind === ts.SyntaxKind.OmittedExpression;\n}\n\nexports.isOmittedExpression = isOmittedExpression;\n\nfunction isParameterDeclaration(node) {\n  return node.kind === ts.SyntaxKind.Parameter;\n}\n\nexports.isParameterDeclaration = isParameterDeclaration;\n\nfunction isParenthesizedExpression(node) {\n  return node.kind === ts.SyntaxKind.ParenthesizedExpression;\n}\n\nexports.isParenthesizedExpression = isParenthesizedExpression;\n\nfunction isParenthesizedTypeNode(node) {\n  return node.kind === ts.SyntaxKind.ParenthesizedType;\n}\n\nexports.isParenthesizedTypeNode = isParenthesizedTypeNode;\n\nfunction isPostfixUnaryExpression(node) {\n  return node.kind === ts.SyntaxKind.PostfixUnaryExpression;\n}\n\nexports.isPostfixUnaryExpression = isPostfixUnaryExpression;\n\nfunction isPrefixUnaryExpression(node) {\n  return node.kind === ts.SyntaxKind.PrefixUnaryExpression;\n}\n\nexports.isPrefixUnaryExpression = isPrefixUnaryExpression;\n\nfunction isPropertyAccessExpression(node) {\n  return node.kind === ts.SyntaxKind.PropertyAccessExpression;\n}\n\nexports.isPropertyAccessExpression = isPropertyAccessExpression;\n\nfunction isPropertyAssignment(node) {\n  return node.kind === ts.SyntaxKind.PropertyAssignment;\n}\n\nexports.isPropertyAssignment = isPropertyAssignment;\n\nfunction isPropertyDeclaration(node) {\n  return node.kind === ts.SyntaxKind.PropertyDeclaration;\n}\n\nexports.isPropertyDeclaration = isPropertyDeclaration;\n\nfunction isPropertySignature(node) {\n  return node.kind === ts.SyntaxKind.PropertySignature;\n}\n\nexports.isPropertySignature = isPropertySignature;\n\nfunction isQualifiedName(node) {\n  return node.kind === ts.SyntaxKind.QualifiedName;\n}\n\nexports.isQualifiedName = isQualifiedName;\n\nfunction isRegularExpressionLiteral(node) {\n  return node.kind === ts.SyntaxKind.RegularExpressionLiteral;\n}\n\nexports.isRegularExpressionLiteral = isRegularExpressionLiteral;\n\nfunction isReturnStatement(node) {\n  return node.kind === ts.SyntaxKind.ReturnStatement;\n}\n\nexports.isReturnStatement = isReturnStatement;\n\nfunction isSetAccessorDeclaration(node) {\n  return node.kind === ts.SyntaxKind.SetAccessor;\n}\n\nexports.isSetAccessorDeclaration = isSetAccessorDeclaration;\n\nfunction isShorthandPropertyAssignment(node) {\n  return node.kind === ts.SyntaxKind.ShorthandPropertyAssignment;\n}\n\nexports.isShorthandPropertyAssignment = isShorthandPropertyAssignment;\n\nfunction isSignatureDeclaration(node) {\n  return node.parameters !== undefined;\n}\n\nexports.isSignatureDeclaration = isSignatureDeclaration;\n\nfunction isSourceFile(node) {\n  return node.kind === ts.SyntaxKind.SourceFile;\n}\n\nexports.isSourceFile = isSourceFile;\n\nfunction isSpreadAssignment(node) {\n  return node.kind === ts.SyntaxKind.SpreadAssignment;\n}\n\nexports.isSpreadAssignment = isSpreadAssignment;\n\nfunction isSpreadElement(node) {\n  return node.kind === ts.SyntaxKind.SpreadElement;\n}\n\nexports.isSpreadElement = isSpreadElement;\n\nfunction isStringLiteral(node) {\n  return node.kind === ts.SyntaxKind.StringLiteral;\n}\n\nexports.isStringLiteral = isStringLiteral;\n\nfunction isSwitchStatement(node) {\n  return node.kind === ts.SyntaxKind.SwitchStatement;\n}\n\nexports.isSwitchStatement = isSwitchStatement;\n\nfunction isSyntaxList(node) {\n  return node.kind === ts.SyntaxKind.SyntaxList;\n}\n\nexports.isSyntaxList = isSyntaxList;\n\nfunction isTaggedTemplateExpression(node) {\n  return node.kind === ts.SyntaxKind.TaggedTemplateExpression;\n}\n\nexports.isTaggedTemplateExpression = isTaggedTemplateExpression;\n\nfunction isTemplateExpression(node) {\n  return node.kind === ts.SyntaxKind.TemplateExpression;\n}\n\nexports.isTemplateExpression = isTemplateExpression;\n\nfunction isTemplateLiteral(node) {\n  return node.kind === ts.SyntaxKind.TemplateExpression || node.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral;\n}\n\nexports.isTemplateLiteral = isTemplateLiteral;\n\nfunction isTextualLiteral(node) {\n  return node.kind === ts.SyntaxKind.StringLiteral || node.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral;\n}\n\nexports.isTextualLiteral = isTextualLiteral;\n\nfunction isThrowStatement(node) {\n  return node.kind === ts.SyntaxKind.ThrowStatement;\n}\n\nexports.isThrowStatement = isThrowStatement;\n\nfunction isTryStatement(node) {\n  return node.kind === ts.SyntaxKind.TryStatement;\n}\n\nexports.isTryStatement = isTryStatement;\n\nfunction isTupleTypeNode(node) {\n  return node.kind === ts.SyntaxKind.TupleType;\n}\n\nexports.isTupleTypeNode = isTupleTypeNode;\n\nfunction isTypeAliasDeclaration(node) {\n  return node.kind === ts.SyntaxKind.TypeAliasDeclaration;\n}\n\nexports.isTypeAliasDeclaration = isTypeAliasDeclaration;\n\nfunction isTypeAssertion(node) {\n  return node.kind === ts.SyntaxKind.TypeAssertionExpression;\n}\n\nexports.isTypeAssertion = isTypeAssertion;\n\nfunction isTypeLiteralNode(node) {\n  return node.kind === ts.SyntaxKind.TypeLiteral;\n}\n\nexports.isTypeLiteralNode = isTypeLiteralNode;\n\nfunction isTypeOfExpression(node) {\n  return node.kind === ts.SyntaxKind.TypeOfExpression;\n}\n\nexports.isTypeOfExpression = isTypeOfExpression;\n\nfunction isTypeOperatorNode(node) {\n  return node.kind === ts.SyntaxKind.TypeOperator;\n}\n\nexports.isTypeOperatorNode = isTypeOperatorNode;\n\nfunction isTypeParameterDeclaration(node) {\n  return node.kind === ts.SyntaxKind.TypeParameter;\n}\n\nexports.isTypeParameterDeclaration = isTypeParameterDeclaration;\n\nfunction isTypePredicateNode(node) {\n  return node.kind === ts.SyntaxKind.TypePredicate;\n}\n\nexports.isTypePredicateNode = isTypePredicateNode;\n\nfunction isTypeReferenceNode(node) {\n  return node.kind === ts.SyntaxKind.TypeReference;\n}\n\nexports.isTypeReferenceNode = isTypeReferenceNode;\n\nfunction isTypeQueryNode(node) {\n  return node.kind === ts.SyntaxKind.TypeQuery;\n}\n\nexports.isTypeQueryNode = isTypeQueryNode;\n\nfunction isUnionTypeNode(node) {\n  return node.kind === ts.SyntaxKind.UnionType;\n}\n\nexports.isUnionTypeNode = isUnionTypeNode;\n\nfunction isVariableDeclaration(node) {\n  return node.kind === ts.SyntaxKind.VariableDeclaration;\n}\n\nexports.isVariableDeclaration = isVariableDeclaration;\n\nfunction isVariableStatement(node) {\n  return node.kind === ts.SyntaxKind.VariableStatement;\n}\n\nexports.isVariableStatement = isVariableStatement;\n\nfunction isVariableDeclarationList(node) {\n  return node.kind === ts.SyntaxKind.VariableDeclarationList;\n}\n\nexports.isVariableDeclarationList = isVariableDeclarationList;\n\nfunction isVoidExpression(node) {\n  return node.kind === ts.SyntaxKind.VoidExpression;\n}\n\nexports.isVoidExpression = isVoidExpression;\n\nfunction isWhileStatement(node) {\n  return node.kind === ts.SyntaxKind.WhileStatement;\n}\n\nexports.isWhileStatement = isWhileStatement;\n\nfunction isWithStatement(node) {\n  return node.kind === ts.SyntaxKind.WithStatement;\n}\n\nexports.isWithStatement = isWithStatement;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/tsutils/typeguard/2.8/node.js"],"names":["Object","defineProperty","exports","value","ts","require","isAccessorDeclaration","node","kind","SyntaxKind","GetAccessor","SetAccessor","isArrayBindingPattern","ArrayBindingPattern","isArrayLiteralExpression","ArrayLiteralExpression","isArrayTypeNode","ArrayType","isArrowFunction","ArrowFunction","isAsExpression","AsExpression","isAssertionExpression","TypeAssertionExpression","isAwaitExpression","AwaitExpression","isBinaryExpression","BinaryExpression","isBindingElement","BindingElement","isBindingPattern","ObjectBindingPattern","isBlock","Block","isBlockLike","statements","undefined","isBooleanLiteral","TrueKeyword","FalseKeyword","isBreakOrContinueStatement","BreakStatement","ContinueStatement","isBreakStatement","isCallExpression","CallExpression","isCallLikeExpression","Decorator","JsxOpeningElement","JsxSelfClosingElement","NewExpression","TaggedTemplateExpression","isCallSignatureDeclaration","CallSignature","isCaseBlock","CaseBlock","isCaseClause","CaseClause","isCaseOrDefaultClause","DefaultClause","isCatchClause","CatchClause","isClassDeclaration","ClassDeclaration","isClassExpression","ClassExpression","isClassLikeDeclaration","isCommaListExpression","CommaListExpression","isConditionalExpression","ConditionalExpression","isConditionalTypeNode","ConditionalType","isConstructorDeclaration","Constructor","isConstructorTypeNode","ConstructorType","isConstructSignatureDeclaration","ConstructSignature","isContinueStatement","isComputedPropertyName","ComputedPropertyName","isDebuggerStatement","DebuggerStatement","isDecorator","isDefaultClause","isDeleteExpression","DeleteExpression","isDoStatement","DoStatement","isElementAccessExpression","ElementAccessExpression","isEmptyStatement","EmptyStatement","isEntityName","Identifier","isQualifiedName","isEntityNameExpression","isPropertyAccessExpression","expression","isEnumDeclaration","EnumDeclaration","isEnumMember","EnumMember","isExportAssignment","ExportAssignment","isExportDeclaration","ExportDeclaration","isExportSpecifier","ExportSpecifier","isExpression","FunctionExpression","JsxElement","JsxFragment","JsxExpression","JsxOpeningFragment","MetaProperty","NonNullExpression","NoSubstitutionTemplateLiteral","NullKeyword","NumericLiteral","ObjectLiteralExpression","OmittedExpression","ParenthesizedExpression","PostfixUnaryExpression","PrefixUnaryExpression","PropertyAccessExpression","RegularExpressionLiteral","SpreadElement","StringLiteral","SuperKeyword","TemplateExpression","ThisKeyword","TypeOfExpression","VoidExpression","YieldExpression","isExpressionStatement","ExpressionStatement","isExpressionWithTypeArguments","ExpressionWithTypeArguments","isExternalModuleReference","ExternalModuleReference","isForInStatement","ForInStatement","isForInOrOfStatement","ForOfStatement","isForOfStatement","isForStatement","ForStatement","isFunctionDeclaration","FunctionDeclaration","isFunctionExpression","isFunctionTypeNode","FunctionType","isGetAccessorDeclaration","isIdentifier","isIfStatement","IfStatement","isImportClause","ImportClause","isImportDeclaration","ImportDeclaration","isImportEqualsDeclaration","ImportEqualsDeclaration","isImportSpecifier","ImportSpecifier","isIndexedAccessTypeNode","IndexedAccessType","isIndexSignatureDeclaration","IndexSignature","isInferTypeNode","InferType","isInterfaceDeclaration","InterfaceDeclaration","isIntersectionTypeNode","IntersectionType","isIterationStatement","WhileStatement","isJsDoc","JSDocComment","isJsxAttribute","JsxAttribute","isJsxAttributeLike","JsxSpreadAttribute","isJsxAttributes","JsxAttributes","isJsxClosingElement","JsxClosingElement","isJsxClosingFragment","JsxClosingFragment","isJsxElement","isJsxExpression","isJsxFragment","isJsxOpeningElement","isJsxOpeningFragment","isJsxOpeningLikeElement","isJsxSelfClosingElement","isJsxSpreadAttribute","isJsxText","JsxText","isLabeledStatement","LabeledStatement","isLiteralExpression","FirstLiteralToken","LastLiteralToken","isLiteralTypeNode","LiteralType","isMappedTypeNode","MappedType","isMetaProperty","isMethodDeclaration","MethodDeclaration","isMethodSignature","MethodSignature","isModuleBlock","ModuleBlock","isModuleDeclaration","ModuleDeclaration","isNamedExports","NamedExports","isNamedImports","NamedImports","isNamespaceDeclaration","name","body","isNamespaceImport","NamespaceImport","isNamespaceExportDeclaration","NamespaceExportDeclaration","isNewExpression","isNonNullExpression","isNoSubstitutionTemplateLiteral","isNullLiteral","isNumericLiteral","isNumericOrStringLikeLiteral","isObjectBindingPattern","isObjectLiteralExpression","isOmittedExpression","isParameterDeclaration","Parameter","isParenthesizedExpression","isParenthesizedTypeNode","ParenthesizedType","isPostfixUnaryExpression","isPrefixUnaryExpression","isPropertyAssignment","PropertyAssignment","isPropertyDeclaration","PropertyDeclaration","isPropertySignature","PropertySignature","QualifiedName","isRegularExpressionLiteral","isReturnStatement","ReturnStatement","isSetAccessorDeclaration","isShorthandPropertyAssignment","ShorthandPropertyAssignment","isSignatureDeclaration","parameters","isSourceFile","SourceFile","isSpreadAssignment","SpreadAssignment","isSpreadElement","isStringLiteral","isSwitchStatement","SwitchStatement","isSyntaxList","SyntaxList","isTaggedTemplateExpression","isTemplateExpression","isTemplateLiteral","isTextualLiteral","isThrowStatement","ThrowStatement","isTryStatement","TryStatement","isTupleTypeNode","TupleType","isTypeAliasDeclaration","TypeAliasDeclaration","isTypeAssertion","isTypeLiteralNode","TypeLiteral","isTypeOfExpression","isTypeOperatorNode","TypeOperator","isTypeParameterDeclaration","TypeParameter","isTypePredicateNode","TypePredicate","isTypeReferenceNode","TypeReference","isTypeQueryNode","TypeQuery","isUnionTypeNode","UnionType","isVariableDeclaration","VariableDeclaration","isVariableStatement","VariableStatement","isVariableDeclarationList","VariableDeclarationList","isVoidExpression","isWhileStatement","isWithStatement","WithStatement"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ts = require(\"typescript\");\nfunction isAccessorDeclaration(node) {\n    return node.kind === ts.SyntaxKind.GetAccessor ||\n        node.kind === ts.SyntaxKind.SetAccessor;\n}\nexports.isAccessorDeclaration = isAccessorDeclaration;\nfunction isArrayBindingPattern(node) {\n    return node.kind === ts.SyntaxKind.ArrayBindingPattern;\n}\nexports.isArrayBindingPattern = isArrayBindingPattern;\nfunction isArrayLiteralExpression(node) {\n    return node.kind === ts.SyntaxKind.ArrayLiteralExpression;\n}\nexports.isArrayLiteralExpression = isArrayLiteralExpression;\nfunction isArrayTypeNode(node) {\n    return node.kind === ts.SyntaxKind.ArrayType;\n}\nexports.isArrayTypeNode = isArrayTypeNode;\nfunction isArrowFunction(node) {\n    return node.kind === ts.SyntaxKind.ArrowFunction;\n}\nexports.isArrowFunction = isArrowFunction;\nfunction isAsExpression(node) {\n    return node.kind === ts.SyntaxKind.AsExpression;\n}\nexports.isAsExpression = isAsExpression;\nfunction isAssertionExpression(node) {\n    return node.kind === ts.SyntaxKind.AsExpression ||\n        node.kind === ts.SyntaxKind.TypeAssertionExpression;\n}\nexports.isAssertionExpression = isAssertionExpression;\nfunction isAwaitExpression(node) {\n    return node.kind === ts.SyntaxKind.AwaitExpression;\n}\nexports.isAwaitExpression = isAwaitExpression;\nfunction isBinaryExpression(node) {\n    return node.kind === ts.SyntaxKind.BinaryExpression;\n}\nexports.isBinaryExpression = isBinaryExpression;\nfunction isBindingElement(node) {\n    return node.kind === ts.SyntaxKind.BindingElement;\n}\nexports.isBindingElement = isBindingElement;\nfunction isBindingPattern(node) {\n    return node.kind === ts.SyntaxKind.ArrayBindingPattern ||\n        node.kind === ts.SyntaxKind.ObjectBindingPattern;\n}\nexports.isBindingPattern = isBindingPattern;\nfunction isBlock(node) {\n    return node.kind === ts.SyntaxKind.Block;\n}\nexports.isBlock = isBlock;\nfunction isBlockLike(node) {\n    return node.statements !== undefined;\n}\nexports.isBlockLike = isBlockLike;\nfunction isBooleanLiteral(node) {\n    return node.kind === ts.SyntaxKind.TrueKeyword || node.kind === ts.SyntaxKind.FalseKeyword;\n}\nexports.isBooleanLiteral = isBooleanLiteral;\nfunction isBreakOrContinueStatement(node) {\n    return node.kind === ts.SyntaxKind.BreakStatement ||\n        node.kind === ts.SyntaxKind.ContinueStatement;\n}\nexports.isBreakOrContinueStatement = isBreakOrContinueStatement;\nfunction isBreakStatement(node) {\n    return node.kind === ts.SyntaxKind.BreakStatement;\n}\nexports.isBreakStatement = isBreakStatement;\nfunction isCallExpression(node) {\n    return node.kind === ts.SyntaxKind.CallExpression;\n}\nexports.isCallExpression = isCallExpression;\nfunction isCallLikeExpression(node) {\n    switch (node.kind) {\n        case ts.SyntaxKind.CallExpression:\n        case ts.SyntaxKind.Decorator:\n        case ts.SyntaxKind.JsxOpeningElement:\n        case ts.SyntaxKind.JsxSelfClosingElement:\n        case ts.SyntaxKind.NewExpression:\n        case ts.SyntaxKind.TaggedTemplateExpression:\n            return true;\n        default:\n            return false;\n    }\n}\nexports.isCallLikeExpression = isCallLikeExpression;\nfunction isCallSignatureDeclaration(node) {\n    return node.kind === ts.SyntaxKind.CallSignature;\n}\nexports.isCallSignatureDeclaration = isCallSignatureDeclaration;\nfunction isCaseBlock(node) {\n    return node.kind === ts.SyntaxKind.CaseBlock;\n}\nexports.isCaseBlock = isCaseBlock;\nfunction isCaseClause(node) {\n    return node.kind === ts.SyntaxKind.CaseClause;\n}\nexports.isCaseClause = isCaseClause;\nfunction isCaseOrDefaultClause(node) {\n    return node.kind === ts.SyntaxKind.CaseClause ||\n        node.kind === ts.SyntaxKind.DefaultClause;\n}\nexports.isCaseOrDefaultClause = isCaseOrDefaultClause;\nfunction isCatchClause(node) {\n    return node.kind === ts.SyntaxKind.CatchClause;\n}\nexports.isCatchClause = isCatchClause;\nfunction isClassDeclaration(node) {\n    return node.kind === ts.SyntaxKind.ClassDeclaration;\n}\nexports.isClassDeclaration = isClassDeclaration;\nfunction isClassExpression(node) {\n    return node.kind === ts.SyntaxKind.ClassExpression;\n}\nexports.isClassExpression = isClassExpression;\nfunction isClassLikeDeclaration(node) {\n    return node.kind === ts.SyntaxKind.ClassDeclaration ||\n        node.kind === ts.SyntaxKind.ClassExpression;\n}\nexports.isClassLikeDeclaration = isClassLikeDeclaration;\nfunction isCommaListExpression(node) {\n    return node.kind === ts.SyntaxKind.CommaListExpression;\n}\nexports.isCommaListExpression = isCommaListExpression;\nfunction isConditionalExpression(node) {\n    return node.kind === ts.SyntaxKind.ConditionalExpression;\n}\nexports.isConditionalExpression = isConditionalExpression;\nfunction isConditionalTypeNode(node) {\n    return node.kind === ts.SyntaxKind.ConditionalType;\n}\nexports.isConditionalTypeNode = isConditionalTypeNode;\nfunction isConstructorDeclaration(node) {\n    return node.kind === ts.SyntaxKind.Constructor;\n}\nexports.isConstructorDeclaration = isConstructorDeclaration;\nfunction isConstructorTypeNode(node) {\n    return node.kind === ts.SyntaxKind.ConstructorType;\n}\nexports.isConstructorTypeNode = isConstructorTypeNode;\nfunction isConstructSignatureDeclaration(node) {\n    return node.kind === ts.SyntaxKind.ConstructSignature;\n}\nexports.isConstructSignatureDeclaration = isConstructSignatureDeclaration;\nfunction isContinueStatement(node) {\n    return node.kind === ts.SyntaxKind.ContinueStatement;\n}\nexports.isContinueStatement = isContinueStatement;\nfunction isComputedPropertyName(node) {\n    return node.kind === ts.SyntaxKind.ComputedPropertyName;\n}\nexports.isComputedPropertyName = isComputedPropertyName;\nfunction isDebuggerStatement(node) {\n    return node.kind === ts.SyntaxKind.DebuggerStatement;\n}\nexports.isDebuggerStatement = isDebuggerStatement;\nfunction isDecorator(node) {\n    return node.kind === ts.SyntaxKind.Decorator;\n}\nexports.isDecorator = isDecorator;\nfunction isDefaultClause(node) {\n    return node.kind === ts.SyntaxKind.DefaultClause;\n}\nexports.isDefaultClause = isDefaultClause;\nfunction isDeleteExpression(node) {\n    return node.kind === ts.SyntaxKind.DeleteExpression;\n}\nexports.isDeleteExpression = isDeleteExpression;\nfunction isDoStatement(node) {\n    return node.kind === ts.SyntaxKind.DoStatement;\n}\nexports.isDoStatement = isDoStatement;\nfunction isElementAccessExpression(node) {\n    return node.kind === ts.SyntaxKind.ElementAccessExpression;\n}\nexports.isElementAccessExpression = isElementAccessExpression;\nfunction isEmptyStatement(node) {\n    return node.kind === ts.SyntaxKind.EmptyStatement;\n}\nexports.isEmptyStatement = isEmptyStatement;\nfunction isEntityName(node) {\n    return node.kind === ts.SyntaxKind.Identifier || isQualifiedName(node);\n}\nexports.isEntityName = isEntityName;\nfunction isEntityNameExpression(node) {\n    return node.kind === ts.SyntaxKind.Identifier ||\n        isPropertyAccessExpression(node) && isEntityNameExpression(node.expression);\n}\nexports.isEntityNameExpression = isEntityNameExpression;\nfunction isEnumDeclaration(node) {\n    return node.kind === ts.SyntaxKind.EnumDeclaration;\n}\nexports.isEnumDeclaration = isEnumDeclaration;\nfunction isEnumMember(node) {\n    return node.kind === ts.SyntaxKind.EnumMember;\n}\nexports.isEnumMember = isEnumMember;\nfunction isExportAssignment(node) {\n    return node.kind === ts.SyntaxKind.ExportAssignment;\n}\nexports.isExportAssignment = isExportAssignment;\nfunction isExportDeclaration(node) {\n    return node.kind === ts.SyntaxKind.ExportDeclaration;\n}\nexports.isExportDeclaration = isExportDeclaration;\nfunction isExportSpecifier(node) {\n    return node.kind === ts.SyntaxKind.ExportSpecifier;\n}\nexports.isExportSpecifier = isExportSpecifier;\nfunction isExpression(node) {\n    switch (node.kind) {\n        case ts.SyntaxKind.ArrayLiteralExpression:\n        case ts.SyntaxKind.ArrowFunction:\n        case ts.SyntaxKind.AsExpression:\n        case ts.SyntaxKind.AwaitExpression:\n        case ts.SyntaxKind.BinaryExpression:\n        case ts.SyntaxKind.CallExpression:\n        case ts.SyntaxKind.ClassExpression:\n        case ts.SyntaxKind.CommaListExpression:\n        case ts.SyntaxKind.ConditionalExpression:\n        case ts.SyntaxKind.DeleteExpression:\n        case ts.SyntaxKind.ElementAccessExpression:\n        case ts.SyntaxKind.FalseKeyword:\n        case ts.SyntaxKind.FunctionExpression:\n        case ts.SyntaxKind.Identifier:\n        case ts.SyntaxKind.JsxElement:\n        case ts.SyntaxKind.JsxFragment:\n        case ts.SyntaxKind.JsxExpression:\n        case ts.SyntaxKind.JsxOpeningElement:\n        case ts.SyntaxKind.JsxOpeningFragment:\n        case ts.SyntaxKind.JsxSelfClosingElement:\n        case ts.SyntaxKind.MetaProperty:\n        case ts.SyntaxKind.NewExpression:\n        case ts.SyntaxKind.NonNullExpression:\n        case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n        case ts.SyntaxKind.NullKeyword:\n        case ts.SyntaxKind.NumericLiteral:\n        case ts.SyntaxKind.ObjectLiteralExpression:\n        case ts.SyntaxKind.OmittedExpression:\n        case ts.SyntaxKind.ParenthesizedExpression:\n        case ts.SyntaxKind.PostfixUnaryExpression:\n        case ts.SyntaxKind.PrefixUnaryExpression:\n        case ts.SyntaxKind.PropertyAccessExpression:\n        case ts.SyntaxKind.RegularExpressionLiteral:\n        case ts.SyntaxKind.SpreadElement:\n        case ts.SyntaxKind.StringLiteral:\n        case ts.SyntaxKind.SuperKeyword:\n        case ts.SyntaxKind.TaggedTemplateExpression:\n        case ts.SyntaxKind.TemplateExpression:\n        case ts.SyntaxKind.ThisKeyword:\n        case ts.SyntaxKind.TrueKeyword:\n        case ts.SyntaxKind.TypeAssertionExpression:\n        case ts.SyntaxKind.TypeOfExpression:\n        case ts.SyntaxKind.VoidExpression:\n        case ts.SyntaxKind.YieldExpression:\n            return true;\n        default:\n            return false;\n    }\n}\nexports.isExpression = isExpression;\nfunction isExpressionStatement(node) {\n    return node.kind === ts.SyntaxKind.ExpressionStatement;\n}\nexports.isExpressionStatement = isExpressionStatement;\nfunction isExpressionWithTypeArguments(node) {\n    return node.kind === ts.SyntaxKind.ExpressionWithTypeArguments;\n}\nexports.isExpressionWithTypeArguments = isExpressionWithTypeArguments;\nfunction isExternalModuleReference(node) {\n    return node.kind === ts.SyntaxKind.ExternalModuleReference;\n}\nexports.isExternalModuleReference = isExternalModuleReference;\nfunction isForInStatement(node) {\n    return node.kind === ts.SyntaxKind.ForInStatement;\n}\nexports.isForInStatement = isForInStatement;\nfunction isForInOrOfStatement(node) {\n    return node.kind === ts.SyntaxKind.ForOfStatement || node.kind === ts.SyntaxKind.ForInStatement;\n}\nexports.isForInOrOfStatement = isForInOrOfStatement;\nfunction isForOfStatement(node) {\n    return node.kind === ts.SyntaxKind.ForOfStatement;\n}\nexports.isForOfStatement = isForOfStatement;\nfunction isForStatement(node) {\n    return node.kind === ts.SyntaxKind.ForStatement;\n}\nexports.isForStatement = isForStatement;\nfunction isFunctionDeclaration(node) {\n    return node.kind === ts.SyntaxKind.FunctionDeclaration;\n}\nexports.isFunctionDeclaration = isFunctionDeclaration;\nfunction isFunctionExpression(node) {\n    return node.kind === ts.SyntaxKind.FunctionExpression;\n}\nexports.isFunctionExpression = isFunctionExpression;\nfunction isFunctionTypeNode(node) {\n    return node.kind === ts.SyntaxKind.FunctionType;\n}\nexports.isFunctionTypeNode = isFunctionTypeNode;\nfunction isGetAccessorDeclaration(node) {\n    return node.kind === ts.SyntaxKind.GetAccessor;\n}\nexports.isGetAccessorDeclaration = isGetAccessorDeclaration;\nfunction isIdentifier(node) {\n    return node.kind === ts.SyntaxKind.Identifier;\n}\nexports.isIdentifier = isIdentifier;\nfunction isIfStatement(node) {\n    return node.kind === ts.SyntaxKind.IfStatement;\n}\nexports.isIfStatement = isIfStatement;\nfunction isImportClause(node) {\n    return node.kind === ts.SyntaxKind.ImportClause;\n}\nexports.isImportClause = isImportClause;\nfunction isImportDeclaration(node) {\n    return node.kind === ts.SyntaxKind.ImportDeclaration;\n}\nexports.isImportDeclaration = isImportDeclaration;\nfunction isImportEqualsDeclaration(node) {\n    return node.kind === ts.SyntaxKind.ImportEqualsDeclaration;\n}\nexports.isImportEqualsDeclaration = isImportEqualsDeclaration;\nfunction isImportSpecifier(node) {\n    return node.kind === ts.SyntaxKind.ImportSpecifier;\n}\nexports.isImportSpecifier = isImportSpecifier;\nfunction isIndexedAccessTypeNode(node) {\n    return node.kind === ts.SyntaxKind.IndexedAccessType;\n}\nexports.isIndexedAccessTypeNode = isIndexedAccessTypeNode;\nfunction isIndexSignatureDeclaration(node) {\n    return node.kind === ts.SyntaxKind.IndexSignature;\n}\nexports.isIndexSignatureDeclaration = isIndexSignatureDeclaration;\nfunction isInferTypeNode(node) {\n    return node.kind === ts.SyntaxKind.InferType;\n}\nexports.isInferTypeNode = isInferTypeNode;\nfunction isInterfaceDeclaration(node) {\n    return node.kind === ts.SyntaxKind.InterfaceDeclaration;\n}\nexports.isInterfaceDeclaration = isInterfaceDeclaration;\nfunction isIntersectionTypeNode(node) {\n    return node.kind === ts.SyntaxKind.IntersectionType;\n}\nexports.isIntersectionTypeNode = isIntersectionTypeNode;\nfunction isIterationStatement(node) {\n    switch (node.kind) {\n        case ts.SyntaxKind.ForStatement:\n        case ts.SyntaxKind.ForOfStatement:\n        case ts.SyntaxKind.ForInStatement:\n        case ts.SyntaxKind.WhileStatement:\n        case ts.SyntaxKind.DoStatement:\n            return true;\n        default:\n            return false;\n    }\n}\nexports.isIterationStatement = isIterationStatement;\nfunction isJsDoc(node) {\n    return node.kind === ts.SyntaxKind.JSDocComment;\n}\nexports.isJsDoc = isJsDoc;\nfunction isJsxAttribute(node) {\n    return node.kind === ts.SyntaxKind.JsxAttribute;\n}\nexports.isJsxAttribute = isJsxAttribute;\nfunction isJsxAttributeLike(node) {\n    return node.kind === ts.SyntaxKind.JsxAttribute ||\n        node.kind === ts.SyntaxKind.JsxSpreadAttribute;\n}\nexports.isJsxAttributeLike = isJsxAttributeLike;\nfunction isJsxAttributes(node) {\n    return node.kind === ts.SyntaxKind.JsxAttributes;\n}\nexports.isJsxAttributes = isJsxAttributes;\nfunction isJsxClosingElement(node) {\n    return node.kind === ts.SyntaxKind.JsxClosingElement;\n}\nexports.isJsxClosingElement = isJsxClosingElement;\nfunction isJsxClosingFragment(node) {\n    return node.kind === ts.SyntaxKind.JsxClosingFragment;\n}\nexports.isJsxClosingFragment = isJsxClosingFragment;\nfunction isJsxElement(node) {\n    return node.kind === ts.SyntaxKind.JsxElement;\n}\nexports.isJsxElement = isJsxElement;\nfunction isJsxExpression(node) {\n    return node.kind === ts.SyntaxKind.JsxExpression;\n}\nexports.isJsxExpression = isJsxExpression;\nfunction isJsxFragment(node) {\n    return node.kind === ts.SyntaxKind.JsxFragment;\n}\nexports.isJsxFragment = isJsxFragment;\nfunction isJsxOpeningElement(node) {\n    return node.kind === ts.SyntaxKind.JsxOpeningElement;\n}\nexports.isJsxOpeningElement = isJsxOpeningElement;\nfunction isJsxOpeningFragment(node) {\n    return node.kind === ts.SyntaxKind.JsxOpeningFragment;\n}\nexports.isJsxOpeningFragment = isJsxOpeningFragment;\nfunction isJsxOpeningLikeElement(node) {\n    return node.kind === ts.SyntaxKind.JsxOpeningElement ||\n        node.kind === ts.SyntaxKind.JsxSelfClosingElement;\n}\nexports.isJsxOpeningLikeElement = isJsxOpeningLikeElement;\nfunction isJsxSelfClosingElement(node) {\n    return node.kind === ts.SyntaxKind.JsxSelfClosingElement;\n}\nexports.isJsxSelfClosingElement = isJsxSelfClosingElement;\nfunction isJsxSpreadAttribute(node) {\n    return node.kind === ts.SyntaxKind.JsxSpreadAttribute;\n}\nexports.isJsxSpreadAttribute = isJsxSpreadAttribute;\nfunction isJsxText(node) {\n    return node.kind === ts.SyntaxKind.JsxText;\n}\nexports.isJsxText = isJsxText;\nfunction isLabeledStatement(node) {\n    return node.kind === ts.SyntaxKind.LabeledStatement;\n}\nexports.isLabeledStatement = isLabeledStatement;\nfunction isLiteralExpression(node) {\n    return node.kind >= ts.SyntaxKind.FirstLiteralToken &&\n        node.kind <= ts.SyntaxKind.LastLiteralToken;\n}\nexports.isLiteralExpression = isLiteralExpression;\nfunction isLiteralTypeNode(node) {\n    return node.kind === ts.SyntaxKind.LiteralType;\n}\nexports.isLiteralTypeNode = isLiteralTypeNode;\nfunction isMappedTypeNode(node) {\n    return node.kind === ts.SyntaxKind.MappedType;\n}\nexports.isMappedTypeNode = isMappedTypeNode;\nfunction isMetaProperty(node) {\n    return node.kind === ts.SyntaxKind.MetaProperty;\n}\nexports.isMetaProperty = isMetaProperty;\nfunction isMethodDeclaration(node) {\n    return node.kind === ts.SyntaxKind.MethodDeclaration;\n}\nexports.isMethodDeclaration = isMethodDeclaration;\nfunction isMethodSignature(node) {\n    return node.kind === ts.SyntaxKind.MethodSignature;\n}\nexports.isMethodSignature = isMethodSignature;\nfunction isModuleBlock(node) {\n    return node.kind === ts.SyntaxKind.ModuleBlock;\n}\nexports.isModuleBlock = isModuleBlock;\nfunction isModuleDeclaration(node) {\n    return node.kind === ts.SyntaxKind.ModuleDeclaration;\n}\nexports.isModuleDeclaration = isModuleDeclaration;\nfunction isNamedExports(node) {\n    return node.kind === ts.SyntaxKind.NamedExports;\n}\nexports.isNamedExports = isNamedExports;\nfunction isNamedImports(node) {\n    return node.kind === ts.SyntaxKind.NamedImports;\n}\nexports.isNamedImports = isNamedImports;\nfunction isNamespaceDeclaration(node) {\n    return isModuleDeclaration(node) &&\n        node.name.kind === ts.SyntaxKind.Identifier &&\n        node.body !== undefined &&\n        (node.body.kind === ts.SyntaxKind.ModuleBlock ||\n            isNamespaceDeclaration(node.body));\n}\nexports.isNamespaceDeclaration = isNamespaceDeclaration;\nfunction isNamespaceImport(node) {\n    return node.kind === ts.SyntaxKind.NamespaceImport;\n}\nexports.isNamespaceImport = isNamespaceImport;\nfunction isNamespaceExportDeclaration(node) {\n    return node.kind === ts.SyntaxKind.NamespaceExportDeclaration;\n}\nexports.isNamespaceExportDeclaration = isNamespaceExportDeclaration;\nfunction isNewExpression(node) {\n    return node.kind === ts.SyntaxKind.NewExpression;\n}\nexports.isNewExpression = isNewExpression;\nfunction isNonNullExpression(node) {\n    return node.kind === ts.SyntaxKind.NonNullExpression;\n}\nexports.isNonNullExpression = isNonNullExpression;\nfunction isNoSubstitutionTemplateLiteral(node) {\n    return node.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral;\n}\nexports.isNoSubstitutionTemplateLiteral = isNoSubstitutionTemplateLiteral;\nfunction isNullLiteral(node) {\n    return node.kind === ts.SyntaxKind.NullKeyword;\n}\nexports.isNullLiteral = isNullLiteral;\nfunction isNumericLiteral(node) {\n    return node.kind === ts.SyntaxKind.NumericLiteral;\n}\nexports.isNumericLiteral = isNumericLiteral;\nfunction isNumericOrStringLikeLiteral(node) {\n    switch (node.kind) {\n        case ts.SyntaxKind.StringLiteral:\n        case ts.SyntaxKind.NumericLiteral:\n        case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n            return true;\n        default:\n            return false;\n    }\n}\nexports.isNumericOrStringLikeLiteral = isNumericOrStringLikeLiteral;\nfunction isObjectBindingPattern(node) {\n    return node.kind === ts.SyntaxKind.ObjectBindingPattern;\n}\nexports.isObjectBindingPattern = isObjectBindingPattern;\nfunction isObjectLiteralExpression(node) {\n    return node.kind === ts.SyntaxKind.ObjectLiteralExpression;\n}\nexports.isObjectLiteralExpression = isObjectLiteralExpression;\nfunction isOmittedExpression(node) {\n    return node.kind === ts.SyntaxKind.OmittedExpression;\n}\nexports.isOmittedExpression = isOmittedExpression;\nfunction isParameterDeclaration(node) {\n    return node.kind === ts.SyntaxKind.Parameter;\n}\nexports.isParameterDeclaration = isParameterDeclaration;\nfunction isParenthesizedExpression(node) {\n    return node.kind === ts.SyntaxKind.ParenthesizedExpression;\n}\nexports.isParenthesizedExpression = isParenthesizedExpression;\nfunction isParenthesizedTypeNode(node) {\n    return node.kind === ts.SyntaxKind.ParenthesizedType;\n}\nexports.isParenthesizedTypeNode = isParenthesizedTypeNode;\nfunction isPostfixUnaryExpression(node) {\n    return node.kind === ts.SyntaxKind.PostfixUnaryExpression;\n}\nexports.isPostfixUnaryExpression = isPostfixUnaryExpression;\nfunction isPrefixUnaryExpression(node) {\n    return node.kind === ts.SyntaxKind.PrefixUnaryExpression;\n}\nexports.isPrefixUnaryExpression = isPrefixUnaryExpression;\nfunction isPropertyAccessExpression(node) {\n    return node.kind === ts.SyntaxKind.PropertyAccessExpression;\n}\nexports.isPropertyAccessExpression = isPropertyAccessExpression;\nfunction isPropertyAssignment(node) {\n    return node.kind === ts.SyntaxKind.PropertyAssignment;\n}\nexports.isPropertyAssignment = isPropertyAssignment;\nfunction isPropertyDeclaration(node) {\n    return node.kind === ts.SyntaxKind.PropertyDeclaration;\n}\nexports.isPropertyDeclaration = isPropertyDeclaration;\nfunction isPropertySignature(node) {\n    return node.kind === ts.SyntaxKind.PropertySignature;\n}\nexports.isPropertySignature = isPropertySignature;\nfunction isQualifiedName(node) {\n    return node.kind === ts.SyntaxKind.QualifiedName;\n}\nexports.isQualifiedName = isQualifiedName;\nfunction isRegularExpressionLiteral(node) {\n    return node.kind === ts.SyntaxKind.RegularExpressionLiteral;\n}\nexports.isRegularExpressionLiteral = isRegularExpressionLiteral;\nfunction isReturnStatement(node) {\n    return node.kind === ts.SyntaxKind.ReturnStatement;\n}\nexports.isReturnStatement = isReturnStatement;\nfunction isSetAccessorDeclaration(node) {\n    return node.kind === ts.SyntaxKind.SetAccessor;\n}\nexports.isSetAccessorDeclaration = isSetAccessorDeclaration;\nfunction isShorthandPropertyAssignment(node) {\n    return node.kind === ts.SyntaxKind.ShorthandPropertyAssignment;\n}\nexports.isShorthandPropertyAssignment = isShorthandPropertyAssignment;\nfunction isSignatureDeclaration(node) {\n    return node.parameters !== undefined;\n}\nexports.isSignatureDeclaration = isSignatureDeclaration;\nfunction isSourceFile(node) {\n    return node.kind === ts.SyntaxKind.SourceFile;\n}\nexports.isSourceFile = isSourceFile;\nfunction isSpreadAssignment(node) {\n    return node.kind === ts.SyntaxKind.SpreadAssignment;\n}\nexports.isSpreadAssignment = isSpreadAssignment;\nfunction isSpreadElement(node) {\n    return node.kind === ts.SyntaxKind.SpreadElement;\n}\nexports.isSpreadElement = isSpreadElement;\nfunction isStringLiteral(node) {\n    return node.kind === ts.SyntaxKind.StringLiteral;\n}\nexports.isStringLiteral = isStringLiteral;\nfunction isSwitchStatement(node) {\n    return node.kind === ts.SyntaxKind.SwitchStatement;\n}\nexports.isSwitchStatement = isSwitchStatement;\nfunction isSyntaxList(node) {\n    return node.kind === ts.SyntaxKind.SyntaxList;\n}\nexports.isSyntaxList = isSyntaxList;\nfunction isTaggedTemplateExpression(node) {\n    return node.kind === ts.SyntaxKind.TaggedTemplateExpression;\n}\nexports.isTaggedTemplateExpression = isTaggedTemplateExpression;\nfunction isTemplateExpression(node) {\n    return node.kind === ts.SyntaxKind.TemplateExpression;\n}\nexports.isTemplateExpression = isTemplateExpression;\nfunction isTemplateLiteral(node) {\n    return node.kind === ts.SyntaxKind.TemplateExpression ||\n        node.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral;\n}\nexports.isTemplateLiteral = isTemplateLiteral;\nfunction isTextualLiteral(node) {\n    return node.kind === ts.SyntaxKind.StringLiteral ||\n        node.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral;\n}\nexports.isTextualLiteral = isTextualLiteral;\nfunction isThrowStatement(node) {\n    return node.kind === ts.SyntaxKind.ThrowStatement;\n}\nexports.isThrowStatement = isThrowStatement;\nfunction isTryStatement(node) {\n    return node.kind === ts.SyntaxKind.TryStatement;\n}\nexports.isTryStatement = isTryStatement;\nfunction isTupleTypeNode(node) {\n    return node.kind === ts.SyntaxKind.TupleType;\n}\nexports.isTupleTypeNode = isTupleTypeNode;\nfunction isTypeAliasDeclaration(node) {\n    return node.kind === ts.SyntaxKind.TypeAliasDeclaration;\n}\nexports.isTypeAliasDeclaration = isTypeAliasDeclaration;\nfunction isTypeAssertion(node) {\n    return node.kind === ts.SyntaxKind.TypeAssertionExpression;\n}\nexports.isTypeAssertion = isTypeAssertion;\nfunction isTypeLiteralNode(node) {\n    return node.kind === ts.SyntaxKind.TypeLiteral;\n}\nexports.isTypeLiteralNode = isTypeLiteralNode;\nfunction isTypeOfExpression(node) {\n    return node.kind === ts.SyntaxKind.TypeOfExpression;\n}\nexports.isTypeOfExpression = isTypeOfExpression;\nfunction isTypeOperatorNode(node) {\n    return node.kind === ts.SyntaxKind.TypeOperator;\n}\nexports.isTypeOperatorNode = isTypeOperatorNode;\nfunction isTypeParameterDeclaration(node) {\n    return node.kind === ts.SyntaxKind.TypeParameter;\n}\nexports.isTypeParameterDeclaration = isTypeParameterDeclaration;\nfunction isTypePredicateNode(node) {\n    return node.kind === ts.SyntaxKind.TypePredicate;\n}\nexports.isTypePredicateNode = isTypePredicateNode;\nfunction isTypeReferenceNode(node) {\n    return node.kind === ts.SyntaxKind.TypeReference;\n}\nexports.isTypeReferenceNode = isTypeReferenceNode;\nfunction isTypeQueryNode(node) {\n    return node.kind === ts.SyntaxKind.TypeQuery;\n}\nexports.isTypeQueryNode = isTypeQueryNode;\nfunction isUnionTypeNode(node) {\n    return node.kind === ts.SyntaxKind.UnionType;\n}\nexports.isUnionTypeNode = isUnionTypeNode;\nfunction isVariableDeclaration(node) {\n    return node.kind === ts.SyntaxKind.VariableDeclaration;\n}\nexports.isVariableDeclaration = isVariableDeclaration;\nfunction isVariableStatement(node) {\n    return node.kind === ts.SyntaxKind.VariableStatement;\n}\nexports.isVariableStatement = isVariableStatement;\nfunction isVariableDeclarationList(node) {\n    return node.kind === ts.SyntaxKind.VariableDeclarationList;\n}\nexports.isVariableDeclarationList = isVariableDeclarationList;\nfunction isVoidExpression(node) {\n    return node.kind === ts.SyntaxKind.VoidExpression;\n}\nexports.isVoidExpression = isVoidExpression;\nfunction isWhileStatement(node) {\n    return node.kind === ts.SyntaxKind.WhileStatement;\n}\nexports.isWhileStatement = isWhileStatement;\nfunction isWithStatement(node) {\n    return node.kind === ts.SyntaxKind.WithStatement;\n}\nexports.isWithStatement = isWithStatement;\n"]},"metadata":{},"sourceType":"script"}