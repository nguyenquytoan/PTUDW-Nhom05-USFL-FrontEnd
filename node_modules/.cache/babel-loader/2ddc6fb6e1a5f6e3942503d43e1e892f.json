{"ast":null,"code":"/**\n * @fileoverview Rule to restrict what can be thrown as an exception.\n * @author Dieter Oberkofler\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow throwing literals as exceptions\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-throw-literal\"\n    },\n    schema: [],\n    messages: {\n      object: \"Expected an error object to be thrown.\",\n      undef: \"Do not throw undefined.\"\n    }\n  },\n\n  create(context) {\n    return {\n      ThrowStatement(node) {\n        if (!astUtils.couldBeError(node.argument)) {\n          context.report({\n            node,\n            messageId: \"object\"\n          });\n        } else if (node.argument.type === \"Identifier\") {\n          if (node.argument.name === \"undefined\") {\n            context.report({\n              node,\n              messageId: \"undef\"\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-throw-literal.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","object","undef","create","context","ThrowStatement","node","couldBeError","argument","report","messageId","name"],"mappings":"AAAA;;;;AAKA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,0CADX;AAEFC,MAAAA,QAAQ,EAAE,gBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,EAVN;AAYFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,MAAM,EAAE,wCADF;AAENC,MAAAA,KAAK,EAAE;AAFD;AAZR,GADO;;AAmBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,WAAO;AAEHC,MAAAA,cAAc,CAACC,IAAD,EAAO;AACjB,YAAI,CAAClB,QAAQ,CAACmB,YAAT,CAAsBD,IAAI,CAACE,QAA3B,CAAL,EAA2C;AACvCJ,UAAAA,OAAO,CAACK,MAAR,CAAe;AAAEH,YAAAA,IAAF;AAAQI,YAAAA,SAAS,EAAE;AAAnB,WAAf;AACH,SAFD,MAEO,IAAIJ,IAAI,CAACE,QAAL,CAAcf,IAAd,KAAuB,YAA3B,EAAyC;AAC5C,cAAIa,IAAI,CAACE,QAAL,CAAcG,IAAd,KAAuB,WAA3B,EAAwC;AACpCP,YAAAA,OAAO,CAACK,MAAR,CAAe;AAAEH,cAAAA,IAAF;AAAQI,cAAAA,SAAS,EAAE;AAAnB,aAAf;AACH;AACJ;AAEJ;;AAXE,KAAP;AAeH;;AApCY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to restrict what can be thrown as an exception.\n * @author Dieter Oberkofler\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow throwing literals as exceptions\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-throw-literal\"\n        },\n\n        schema: [],\n\n        messages: {\n            object: \"Expected an error object to be thrown.\",\n            undef: \"Do not throw undefined.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n\n            ThrowStatement(node) {\n                if (!astUtils.couldBeError(node.argument)) {\n                    context.report({ node, messageId: \"object\" });\n                } else if (node.argument.type === \"Identifier\") {\n                    if (node.argument.name === \"undefined\") {\n                        context.report({ node, messageId: \"undef\" });\n                    }\n                }\n\n            }\n\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}