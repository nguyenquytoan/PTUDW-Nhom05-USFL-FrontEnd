{"ast":null,"code":"// @remove-on-eject-begin\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict'; // Do this as the first thing so that any code reading it knows the right env.\n\nprocess.env.BABEL_ENV = 'development';\nprocess.env.NODE_ENV = 'development'; // Makes the script crash on unhandled rejections instead of silently\n// ignoring them. In the future, promise rejections that are not handled will\n// terminate the Node.js process with a non-zero exit code.\n\nprocess.on('unhandledRejection', err => {\n  throw err;\n}); // Ensure environment variables are read.\n\nrequire('../config/env'); // @remove-on-eject-begin\n// Do the preflight check (only happens before eject).\n\n\nconst verifyPackageTree = require('./utils/verifyPackageTree');\n\nif (process.env.SKIP_PREFLIGHT_CHECK !== 'true') {\n  verifyPackageTree();\n}\n\nconst verifyTypeScriptSetup = require('./utils/verifyTypeScriptSetup');\n\nverifyTypeScriptSetup(); // @remove-on-eject-end\n\nconst fs = require('fs');\n\nconst chalk = require('react-dev-utils/chalk');\n\nconst webpack = require('webpack');\n\nconst WebpackDevServer = require('webpack-dev-server');\n\nconst clearConsole = require('react-dev-utils/clearConsole');\n\nconst checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');\n\nconst {\n  choosePort,\n  createCompiler,\n  prepareProxy,\n  prepareUrls\n} = require('react-dev-utils/WebpackDevServerUtils');\n\nconst openBrowser = require('react-dev-utils/openBrowser');\n\nconst paths = require('../config/paths');\n\nconst configFactory = require('../config/webpack.config');\n\nconst createDevServerConfig = require('../config/webpackDevServer.config');\n\nconst useYarn = fs.existsSync(paths.yarnLockFile);\nconst isInteractive = process.stdout.isTTY; // Warn and crash if required files are missing\n\nif (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {\n  process.exit(1);\n} // Tools like Cloud9 rely on this.\n\n\nconst DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;\nconst HOST = process.env.HOST || '0.0.0.0';\n\nif (process.env.HOST) {\n  console.log(chalk.cyan(`Attempting to bind to HOST environment variable: ${chalk.yellow(chalk.bold(process.env.HOST))}`));\n  console.log(`If this was unintentional, check that you haven't mistakenly set it in your shell.`);\n  console.log(`Learn more here: ${chalk.yellow('https://bit.ly/CRA-advanced-config')}`);\n  console.log();\n} // We require that you explicitly set browsers and do not fall back to\n// browserslist defaults.\n\n\nconst {\n  checkBrowsers\n} = require('react-dev-utils/browsersHelper');\n\ncheckBrowsers(paths.appPath, isInteractive).then(() => {\n  // We attempt to use the default port but if it is busy, we offer the user to\n  // run on a different port. `choosePort()` Promise resolves to the next free port.\n  return choosePort(HOST, DEFAULT_PORT);\n}).then(port => {\n  if (port == null) {\n    // We have not found a port.\n    return;\n  }\n\n  const config = configFactory('development');\n  const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';\n\n  const appName = require(paths.appPackageJson).name;\n\n  const useTypeScript = fs.existsSync(paths.appTsConfig);\n  const tscCompileOnError = process.env.TSC_COMPILE_ON_ERROR === 'true';\n  const urls = prepareUrls(protocol, HOST, port, paths.publicUrlOrPath.slice(0, -1));\n  const devSocket = {\n    warnings: warnings => devServer.sockWrite(devServer.sockets, 'warnings', warnings),\n    errors: errors => devServer.sockWrite(devServer.sockets, 'errors', errors)\n  }; // Create a webpack compiler that is configured with custom messages.\n\n  const compiler = createCompiler({\n    appName,\n    config,\n    devSocket,\n    urls,\n    useYarn,\n    useTypeScript,\n    tscCompileOnError,\n    webpack\n  }); // Load proxy config\n\n  const proxySetting = require(paths.appPackageJson).proxy;\n\n  const proxyConfig = prepareProxy(proxySetting, paths.appPublic, paths.publicUrlOrPath); // Serve webpack assets generated by the compiler over a web server.\n\n  const serverConfig = createDevServerConfig(proxyConfig, urls.lanUrlForConfig);\n  const devServer = new WebpackDevServer(compiler, serverConfig); // Launch WebpackDevServer.\n\n  devServer.listen(port, HOST, err => {\n    if (err) {\n      return console.log(err);\n    }\n\n    if (isInteractive) {\n      clearConsole();\n    } // We used to support resolving modules according to `NODE_PATH`.\n    // This now has been deprecated in favor of jsconfig/tsconfig.json\n    // This lets you use absolute paths in imports inside large monorepos:\n\n\n    if (process.env.NODE_PATH) {\n      console.log(chalk.yellow('Setting NODE_PATH to resolve modules absolutely has been deprecated in favor of setting baseUrl in jsconfig.json (or tsconfig.json if you are using TypeScript) and will be removed in a future major release of create-react-app.'));\n      console.log();\n    }\n\n    console.log(chalk.cyan('Starting the development server...\\n'));\n    openBrowser(urls.localUrlForBrowser);\n  });\n  ['SIGINT', 'SIGTERM'].forEach(function (sig) {\n    process.on(sig, function () {\n      devServer.close();\n      process.exit();\n    });\n  });\n\n  if (isInteractive || process.env.CI !== 'true') {\n    // Gracefully exit when stdin ends\n    process.stdin.on('end', function () {\n      devServer.close();\n      process.exit();\n    });\n    process.stdin.resume();\n  }\n}).catch(err => {\n  if (err && err.message) {\n    console.log(err.message);\n  }\n\n  process.exit(1);\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-scripts/scripts/start.js"],"names":["process","env","BABEL_ENV","NODE_ENV","on","err","require","verifyPackageTree","SKIP_PREFLIGHT_CHECK","verifyTypeScriptSetup","fs","chalk","webpack","WebpackDevServer","clearConsole","checkRequiredFiles","choosePort","createCompiler","prepareProxy","prepareUrls","openBrowser","paths","configFactory","createDevServerConfig","useYarn","existsSync","yarnLockFile","isInteractive","stdout","isTTY","appHtml","appIndexJs","exit","DEFAULT_PORT","parseInt","PORT","HOST","console","log","cyan","yellow","bold","checkBrowsers","appPath","then","port","config","protocol","HTTPS","appName","appPackageJson","name","useTypeScript","appTsConfig","tscCompileOnError","TSC_COMPILE_ON_ERROR","urls","publicUrlOrPath","slice","devSocket","warnings","devServer","sockWrite","sockets","errors","compiler","proxySetting","proxy","proxyConfig","appPublic","serverConfig","lanUrlForConfig","listen","NODE_PATH","localUrlForBrowser","forEach","sig","close","CI","stdin","resume","catch","message"],"mappings":"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","sourcesContent":["// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\n// Do this as the first thing so that any code reading it knows the right env.\nprocess.env.BABEL_ENV = 'development';\nprocess.env.NODE_ENV = 'development';\n\n// Makes the script crash on unhandled rejections instead of silently\n// ignoring them. In the future, promise rejections that are not handled will\n// terminate the Node.js process with a non-zero exit code.\nprocess.on('unhandledRejection', err => {\n  throw err;\n});\n\n// Ensure environment variables are read.\nrequire('../config/env');\n// @remove-on-eject-begin\n// Do the preflight check (only happens before eject).\nconst verifyPackageTree = require('./utils/verifyPackageTree');\nif (process.env.SKIP_PREFLIGHT_CHECK !== 'true') {\n  verifyPackageTree();\n}\nconst verifyTypeScriptSetup = require('./utils/verifyTypeScriptSetup');\nverifyTypeScriptSetup();\n// @remove-on-eject-end\n\nconst fs = require('fs');\nconst chalk = require('react-dev-utils/chalk');\nconst webpack = require('webpack');\nconst WebpackDevServer = require('webpack-dev-server');\nconst clearConsole = require('react-dev-utils/clearConsole');\nconst checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');\nconst {\n  choosePort,\n  createCompiler,\n  prepareProxy,\n  prepareUrls,\n} = require('react-dev-utils/WebpackDevServerUtils');\nconst openBrowser = require('react-dev-utils/openBrowser');\nconst paths = require('../config/paths');\nconst configFactory = require('../config/webpack.config');\nconst createDevServerConfig = require('../config/webpackDevServer.config');\n\nconst useYarn = fs.existsSync(paths.yarnLockFile);\nconst isInteractive = process.stdout.isTTY;\n\n// Warn and crash if required files are missing\nif (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {\n  process.exit(1);\n}\n\n// Tools like Cloud9 rely on this.\nconst DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;\nconst HOST = process.env.HOST || '0.0.0.0';\n\nif (process.env.HOST) {\n  console.log(\n    chalk.cyan(\n      `Attempting to bind to HOST environment variable: ${chalk.yellow(\n        chalk.bold(process.env.HOST)\n      )}`\n    )\n  );\n  console.log(\n    `If this was unintentional, check that you haven't mistakenly set it in your shell.`\n  );\n  console.log(\n    `Learn more here: ${chalk.yellow('https://bit.ly/CRA-advanced-config')}`\n  );\n  console.log();\n}\n\n// We require that you explicitly set browsers and do not fall back to\n// browserslist defaults.\nconst { checkBrowsers } = require('react-dev-utils/browsersHelper');\ncheckBrowsers(paths.appPath, isInteractive)\n  .then(() => {\n    // We attempt to use the default port but if it is busy, we offer the user to\n    // run on a different port. `choosePort()` Promise resolves to the next free port.\n    return choosePort(HOST, DEFAULT_PORT);\n  })\n  .then(port => {\n    if (port == null) {\n      // We have not found a port.\n      return;\n    }\n\n    const config = configFactory('development');\n    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';\n    const appName = require(paths.appPackageJson).name;\n    const useTypeScript = fs.existsSync(paths.appTsConfig);\n    const tscCompileOnError = process.env.TSC_COMPILE_ON_ERROR === 'true';\n    const urls = prepareUrls(\n      protocol,\n      HOST,\n      port,\n      paths.publicUrlOrPath.slice(0, -1)\n    );\n    const devSocket = {\n      warnings: warnings =>\n        devServer.sockWrite(devServer.sockets, 'warnings', warnings),\n      errors: errors =>\n        devServer.sockWrite(devServer.sockets, 'errors', errors),\n    };\n    // Create a webpack compiler that is configured with custom messages.\n    const compiler = createCompiler({\n      appName,\n      config,\n      devSocket,\n      urls,\n      useYarn,\n      useTypeScript,\n      tscCompileOnError,\n      webpack,\n    });\n    // Load proxy config\n    const proxySetting = require(paths.appPackageJson).proxy;\n    const proxyConfig = prepareProxy(\n      proxySetting,\n      paths.appPublic,\n      paths.publicUrlOrPath\n    );\n    // Serve webpack assets generated by the compiler over a web server.\n    const serverConfig = createDevServerConfig(\n      proxyConfig,\n      urls.lanUrlForConfig\n    );\n    const devServer = new WebpackDevServer(compiler, serverConfig);\n    // Launch WebpackDevServer.\n    devServer.listen(port, HOST, err => {\n      if (err) {\n        return console.log(err);\n      }\n      if (isInteractive) {\n        clearConsole();\n      }\n\n      // We used to support resolving modules according to `NODE_PATH`.\n      // This now has been deprecated in favor of jsconfig/tsconfig.json\n      // This lets you use absolute paths in imports inside large monorepos:\n      if (process.env.NODE_PATH) {\n        console.log(\n          chalk.yellow(\n            'Setting NODE_PATH to resolve modules absolutely has been deprecated in favor of setting baseUrl in jsconfig.json (or tsconfig.json if you are using TypeScript) and will be removed in a future major release of create-react-app.'\n          )\n        );\n        console.log();\n      }\n\n      console.log(chalk.cyan('Starting the development server...\\n'));\n      openBrowser(urls.localUrlForBrowser);\n    });\n\n    ['SIGINT', 'SIGTERM'].forEach(function(sig) {\n      process.on(sig, function() {\n        devServer.close();\n        process.exit();\n      });\n    });\n\n    if (isInteractive || process.env.CI !== 'true') {\n      // Gracefully exit when stdin ends\n      process.stdin.on('end', function() {\n        devServer.close();\n        process.exit();\n      });\n      process.stdin.resume();\n    }\n  })\n  .catch(err => {\n    if (err && err.message) {\n      console.log(err.message);\n    }\n    process.exit(1);\n  });\n"]},"metadata":{},"sourceType":"script"}