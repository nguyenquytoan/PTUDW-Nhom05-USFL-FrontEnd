{"ast":null,"code":"import postcss from 'postcss';\nconst selectorRegExp = /:blank([^\\w-]|$)/gi;\nvar postcss$1 = postcss.plugin('css-blank-pseudo', opts => {\n  const replaceWith = String(Object(opts).replaceWith || '[blank]');\n  const preserve = Boolean('preserve' in Object(opts) ? opts.preserve : true);\n  return root => {\n    root.walkRules(selectorRegExp, rule => {\n      const selector = rule.selector.replace(selectorRegExp, ($0, $1) => {\n        return `${replaceWith}${$1}`;\n      });\n      const clone = rule.clone({\n        selector\n      });\n\n      if (preserve) {\n        rule.before(clone);\n      } else {\n        rule.replaceWith(clone);\n      }\n    });\n  };\n});\nexport default postcss$1;","map":{"version":3,"sources":["src/postcss.js"],"names":["selectorRegExp","opts","replaceWith","String","Object","preserve","Boolean","root","rule","selector","$1","clone"],"mappings":";AAEA,MAAMA,cAAc,GAApB,oBAAA;AAEA,IAAA,SAAA,GAAe,OAAO,CAAP,MAAA,CAAA,kBAAA,EAAmCC,IAAI,IAAI;QACnDC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAANA,IAAM,CAANA,CAAAA,WAAAA,IAA3B,SAA0B,C;QACpBC,QAAQ,GAAGC,OAAO,CAAC,cAAcF,MAAM,CAApB,IAAoB,CAApB,GAA6BH,IAAI,CAAjC,QAAA,GAAzB,IAAwB,C;SAEjBM,IAAI,IAAI;AACdA,IAAAA,IAAI,CAAJA,SAAAA,CAAAA,cAAAA,EAA+BC,IAAI,IAAI;YAChCC,QAAQ,GAAG,IAAI,CAAJ,QAAA,CAAA,OAAA,CAAA,cAAA,EAAsC,CAAA,EAAA,EAAA,EAAA,KAAY;AAC1D,eAAA,GAAEP,WAAY,GAAEQ,EAAxB,EAAQ;AADT,OAAiB,C;YAIXC,KAAK,GAAG,IAAI,CAAJ,KAAA,CAAW;AAAEF,QAAAA;AAAF,OAAX,C;;UAEd,Q,EAAc;AACbD,QAAAA,IAAI,CAAJA,MAAAA,CAAAA,KAAAA;AADD,O,MAEO;AACNA,QAAAA,IAAI,CAAJA,WAAAA,CAAAA,KAAAA;;AAVFD,KAAAA;AADD,G;AAJD,CAAe,CAAf","sourcesContent":["import postcss from 'postcss';\n\nconst selectorRegExp = /:blank([^\\w-]|$)/gi;\n\nexport default postcss.plugin('css-blank-pseudo', opts => {\n\tconst replaceWith = String(Object(opts).replaceWith || '[blank]');\n\tconst preserve = Boolean('preserve' in Object(opts) ? opts.preserve : true);\n\n\treturn root => {\n\t\troot.walkRules(selectorRegExp, rule => {\n\t\t\tconst selector = rule.selector.replace(selectorRegExp, ($0, $1) => {\n\t\t\t\treturn `${replaceWith}${$1}`;\n\t\t\t});\n\n\t\t\tconst clone = rule.clone({ selector });\n\n\t\t\tif (preserve) {\n\t\t\t\trule.before(clone);\n\t\t\t} else {\n\t\t\t\trule.replaceWith(clone);\n\t\t\t}\n\t\t});\n\t};\n});\n"]},"metadata":{},"sourceType":"module"}