{"ast":null,"code":"'use strict';\n\nexports.type = 'full';\nexports.active = true;\nexports.description = 'removes unused IDs and minifies used';\nexports.params = {\n  remove: true,\n  minify: true,\n  prefix: '',\n  preserve: [],\n  preservePrefixes: [],\n  force: false\n};\nvar referencesProps = new Set(require('./_collections').referencesProps),\n    regReferencesUrl = /\\burl\\((\"|')?#(.+?)\\1\\)/,\n    regReferencesHref = /^#(.+?)$/,\n    regReferencesBegin = /(\\w+)\\./,\n    styleOrScript = ['style', 'script'],\n    generateIDchars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n    maxIDindex = generateIDchars.length - 1;\n/**\n * Remove unused and minify used IDs\n * (only if there are no any <style> or <script>).\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n *\n * @author Kir Belevich\n */\n\nexports.fn = function (data, params) {\n  var currentID,\n      currentIDstring,\n      IDs = new Map(),\n      referencesIDs = new Map(),\n      hasStyleOrScript = false,\n      preserveIDs = new Set(Array.isArray(params.preserve) ? params.preserve : params.preserve ? [params.preserve] : []),\n      preserveIDPrefixes = new Set(Array.isArray(params.preservePrefixes) ? params.preservePrefixes : params.preservePrefixes ? [params.preservePrefixes] : []),\n      idValuePrefix = '#',\n      idValuePostfix = '.';\n  /**\n   * Bananas!\n   *\n   * @param {Array} items input items\n   * @return {Array} output items\n   */\n\n  function monkeys(items) {\n    for (var i = 0; i < items.content.length && !hasStyleOrScript; i++) {\n      var item = items.content[i]; // quit if <style> or <script> present ('force' param prevents quitting)\n\n      if (!params.force) {\n        if (item.isElem(styleOrScript)) {\n          hasStyleOrScript = true;\n          continue;\n        } // Don't remove IDs if the whole SVG consists only of defs.\n\n\n        if (item.isElem('defs') && item.parentNode.isElem('svg')) {\n          var hasDefsOnly = true;\n\n          for (var j = i + 1; j < items.content.length; j++) {\n            if (items.content[j].isElem()) {\n              hasDefsOnly = false;\n              break;\n            }\n          }\n\n          if (hasDefsOnly) {\n            break;\n          }\n        }\n      } // â€¦and don't remove any ID if yes\n\n\n      if (item.isElem()) {\n        item.eachAttr(function (attr) {\n          var key, match; // save IDs\n\n          if (attr.name === 'id') {\n            key = attr.value;\n\n            if (IDs.has(key)) {\n              item.removeAttr('id'); // remove repeated id\n            } else {\n              IDs.set(key, item);\n            }\n\n            return;\n          } // save references\n\n\n          if (referencesProps.has(attr.name) && (match = attr.value.match(regReferencesUrl))) {\n            key = match[2]; // url() reference\n          } else if (attr.local === 'href' && (match = attr.value.match(regReferencesHref)) || attr.name === 'begin' && (match = attr.value.match(regReferencesBegin))) {\n            key = match[1]; // href reference\n          }\n\n          if (key) {\n            var ref = referencesIDs.get(key) || [];\n            ref.push(attr);\n            referencesIDs.set(key, ref);\n          }\n        });\n      } // go deeper\n\n\n      if (item.content) {\n        monkeys(item);\n      }\n    }\n\n    return items;\n  }\n\n  data = monkeys(data);\n\n  if (hasStyleOrScript) {\n    return data;\n  }\n\n  const idPreserved = id => preserveIDs.has(id) || idMatchesPrefix(preserveIDPrefixes, id);\n\n  for (var ref of referencesIDs) {\n    var key = ref[0];\n\n    if (IDs.has(key)) {\n      // replace referenced IDs with the minified ones\n      if (params.minify && !idPreserved(key)) {\n        do {\n          currentIDstring = getIDstring(currentID = generateID(currentID), params);\n        } while (idPreserved(currentIDstring));\n\n        IDs.get(key).attr('id').value = currentIDstring;\n\n        for (var attr of ref[1]) {\n          attr.value = attr.value.includes(idValuePrefix) ? attr.value.replace(idValuePrefix + key, idValuePrefix + currentIDstring) : attr.value.replace(key + idValuePostfix, currentIDstring + idValuePostfix);\n        }\n      } // don't remove referenced IDs\n\n\n      IDs.delete(key);\n    }\n  } // remove non-referenced IDs attributes from elements\n\n\n  if (params.remove) {\n    for (var keyElem of IDs) {\n      if (!idPreserved(keyElem[0])) {\n        keyElem[1].removeAttr('id');\n      }\n    }\n  }\n\n  return data;\n};\n/**\n * Check if an ID starts with any one of a list of strings.\n *\n * @param {Array} of prefix strings\n * @param {String} current ID\n * @return {Boolean} if currentID starts with one of the strings in prefixArray\n */\n\n\nfunction idMatchesPrefix(prefixArray, currentID) {\n  if (!currentID) return false;\n\n  for (var prefix of prefixArray) if (currentID.startsWith(prefix)) return true;\n\n  return false;\n}\n/**\n * Generate unique minimal ID.\n *\n * @param {Array} [currentID] current ID\n * @return {Array} generated ID array\n */\n\n\nfunction generateID(currentID) {\n  if (!currentID) return [0];\n  currentID[currentID.length - 1]++;\n\n  for (var i = currentID.length - 1; i > 0; i--) {\n    if (currentID[i] > maxIDindex) {\n      currentID[i] = 0;\n\n      if (currentID[i - 1] !== undefined) {\n        currentID[i - 1]++;\n      }\n    }\n  }\n\n  if (currentID[0] > maxIDindex) {\n    currentID[0] = 0;\n    currentID.unshift(0);\n  }\n\n  return currentID;\n}\n/**\n * Get string from generated ID array.\n *\n * @param {Array} arr input ID array\n * @return {String} output ID string\n */\n\n\nfunction getIDstring(arr, params) {\n  var str = params.prefix;\n  return str + arr.map(i => generateIDchars[i]).join('');\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/svgo/plugins/cleanupIDs.js"],"names":["exports","type","active","description","params","remove","minify","prefix","preserve","preservePrefixes","force","referencesProps","Set","require","regReferencesUrl","regReferencesHref","regReferencesBegin","styleOrScript","generateIDchars","maxIDindex","length","fn","data","currentID","currentIDstring","IDs","Map","referencesIDs","hasStyleOrScript","preserveIDs","Array","isArray","preserveIDPrefixes","idValuePrefix","idValuePostfix","monkeys","items","i","content","item","isElem","parentNode","hasDefsOnly","j","eachAttr","attr","key","match","name","value","has","removeAttr","set","local","ref","get","push","idPreserved","id","idMatchesPrefix","getIDstring","generateID","includes","replace","delete","keyElem","prefixArray","startsWith","undefined","unshift","arr","str","map","join"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.type = 'full';\n\nexports.active = true;\n\nexports.description = 'removes unused IDs and minifies used';\n\nexports.params = {\n    remove: true,\n    minify: true,\n    prefix: '',\n    preserve: [],\n    preservePrefixes: [],\n    force: false\n};\n\nvar referencesProps = new Set(require('./_collections').referencesProps),\n    regReferencesUrl = /\\burl\\((\"|')?#(.+?)\\1\\)/,\n    regReferencesHref = /^#(.+?)$/,\n    regReferencesBegin = /(\\w+)\\./,\n    styleOrScript = ['style', 'script'],\n    generateIDchars = [\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n    ],\n    maxIDindex = generateIDchars.length - 1;\n\n/**\n * Remove unused and minify used IDs\n * (only if there are no any <style> or <script>).\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n *\n * @author Kir Belevich\n */\nexports.fn = function(data, params) {\n    var currentID,\n        currentIDstring,\n        IDs = new Map(),\n        referencesIDs = new Map(),\n        hasStyleOrScript = false,\n        preserveIDs = new Set(Array.isArray(params.preserve) ? params.preserve : params.preserve ? [params.preserve] : []),\n        preserveIDPrefixes = new Set(Array.isArray(params.preservePrefixes) ? params.preservePrefixes : (params.preservePrefixes ? [params.preservePrefixes] : [])),\n        idValuePrefix = '#',\n        idValuePostfix = '.';\n\n    /**\n     * Bananas!\n     *\n     * @param {Array} items input items\n     * @return {Array} output items\n     */\n    function monkeys(items) {\n        for (var i = 0; i < items.content.length && !hasStyleOrScript; i++) {\n            var item = items.content[i];\n\n            // quit if <style> or <script> present ('force' param prevents quitting)\n            if (!params.force) {\n                if (item.isElem(styleOrScript)) {\n                    hasStyleOrScript = true;\n                    continue;\n                }\n                // Don't remove IDs if the whole SVG consists only of defs.\n                if (item.isElem('defs') && item.parentNode.isElem('svg')) {\n                    var hasDefsOnly = true;\n                    for (var j = i + 1; j < items.content.length; j++) {\n                        if (items.content[j].isElem()) {\n                            hasDefsOnly = false;\n                            break;\n                        }\n                    }\n                    if (hasDefsOnly) {\n                        break;\n                    }\n                }\n            }\n            // â€¦and don't remove any ID if yes\n            if (item.isElem()) {\n                item.eachAttr(function(attr) {\n                    var key, match;\n\n                    // save IDs\n                    if (attr.name === 'id') {\n                        key = attr.value;\n                        if (IDs.has(key)) {\n                            item.removeAttr('id'); // remove repeated id\n                        } else {\n                            IDs.set(key, item);\n                        }\n                        return;\n                    }\n                    // save references\n                    if (referencesProps.has(attr.name) && (match = attr.value.match(regReferencesUrl))) {\n                        key = match[2]; // url() reference\n                    } else if (\n                        attr.local === 'href' && (match = attr.value.match(regReferencesHref)) ||\n                        attr.name === 'begin' && (match = attr.value.match(regReferencesBegin))\n                    ) {\n                        key = match[1]; // href reference\n                    }\n                    if (key) {\n                        var ref = referencesIDs.get(key) || [];\n                        ref.push(attr);\n                        referencesIDs.set(key, ref);\n                    }\n                });\n            }\n            // go deeper\n            if (item.content) {\n                monkeys(item);\n            }\n        }\n        return items;\n    }\n\n    data = monkeys(data);\n\n    if (hasStyleOrScript) {\n        return data;\n    }\n\n    const idPreserved = id => preserveIDs.has(id) || idMatchesPrefix(preserveIDPrefixes, id);\n\n    for (var ref of referencesIDs) {\n        var key = ref[0];\n\n        if (IDs.has(key)) {\n            // replace referenced IDs with the minified ones\n            if (params.minify && !idPreserved(key)) {\n                do {\n                    currentIDstring = getIDstring(currentID = generateID(currentID), params);\n                } while (idPreserved(currentIDstring));\n\n                IDs.get(key).attr('id').value = currentIDstring;\n\n                for (var attr of ref[1]) {\n                    attr.value = attr.value.includes(idValuePrefix) ?\n                        attr.value.replace(idValuePrefix + key, idValuePrefix + currentIDstring) :\n                        attr.value.replace(key + idValuePostfix, currentIDstring + idValuePostfix);\n                }\n            }\n            // don't remove referenced IDs\n            IDs.delete(key);\n        }\n    }\n    // remove non-referenced IDs attributes from elements\n    if (params.remove) {\n        for(var keyElem of IDs) {\n            if (!idPreserved(keyElem[0])) {\n                keyElem[1].removeAttr('id');\n            }\n        }\n    }\n    return data;\n};\n\n/**\n * Check if an ID starts with any one of a list of strings.\n *\n * @param {Array} of prefix strings\n * @param {String} current ID\n * @return {Boolean} if currentID starts with one of the strings in prefixArray\n */\nfunction idMatchesPrefix(prefixArray, currentID) {\n    if (!currentID) return false;\n\n    for (var prefix of prefixArray) if (currentID.startsWith(prefix)) return true;\n    return false;\n}\n\n/**\n * Generate unique minimal ID.\n *\n * @param {Array} [currentID] current ID\n * @return {Array} generated ID array\n */\nfunction generateID(currentID) {\n    if (!currentID) return [0];\n\n    currentID[currentID.length - 1]++;\n\n    for(var i = currentID.length - 1; i > 0; i--) {\n        if (currentID[i] > maxIDindex) {\n            currentID[i] = 0;\n\n            if (currentID[i - 1] !== undefined) {\n                currentID[i - 1]++;\n            }\n        }\n    }\n    if (currentID[0] > maxIDindex) {\n        currentID[0] = 0;\n        currentID.unshift(0);\n    }\n    return currentID;\n}\n\n/**\n * Get string from generated ID array.\n *\n * @param {Array} arr input ID array\n * @return {String} output ID string\n */\nfunction getIDstring(arr, params) {\n    var str = params.prefix;\n    return str + arr.map(i => generateIDchars[i]).join('');\n}\n"]},"metadata":{},"sourceType":"script"}