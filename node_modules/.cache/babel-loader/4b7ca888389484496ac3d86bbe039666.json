{"ast":null,"code":"const util = require('./util');\n\nmodule.exports = function stringify(value, replacer, space) {\n  const stack = [];\n  let indent = '';\n  let propertyList;\n  let replacerFunc;\n  let gap = '';\n  let quote;\n\n  if (replacer != null && typeof replacer === 'object' && !Array.isArray(replacer)) {\n    space = replacer.space;\n    quote = replacer.quote;\n    replacer = replacer.replacer;\n  }\n\n  if (typeof replacer === 'function') {\n    replacerFunc = replacer;\n  } else if (Array.isArray(replacer)) {\n    propertyList = [];\n\n    for (const v of replacer) {\n      let item;\n\n      if (typeof v === 'string') {\n        item = v;\n      } else if (typeof v === 'number' || v instanceof String || v instanceof Number) {\n        item = String(v);\n      }\n\n      if (item !== undefined && propertyList.indexOf(item) < 0) {\n        propertyList.push(item);\n      }\n    }\n  }\n\n  if (space instanceof Number) {\n    space = Number(space);\n  } else if (space instanceof String) {\n    space = String(space);\n  }\n\n  if (typeof space === 'number') {\n    if (space > 0) {\n      space = Math.min(10, Math.floor(space));\n      gap = '          '.substr(0, space);\n    }\n  } else if (typeof space === 'string') {\n    gap = space.substr(0, 10);\n  }\n\n  return serializeProperty('', {\n    '': value\n  });\n\n  function serializeProperty(key, holder) {\n    let value = holder[key];\n\n    if (value != null) {\n      if (typeof value.toJSON5 === 'function') {\n        value = value.toJSON5(key);\n      } else if (typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n      }\n    }\n\n    if (replacerFunc) {\n      value = replacerFunc.call(holder, key, value);\n    }\n\n    if (value instanceof Number) {\n      value = Number(value);\n    } else if (value instanceof String) {\n      value = String(value);\n    } else if (value instanceof Boolean) {\n      value = value.valueOf();\n    }\n\n    switch (value) {\n      case null:\n        return 'null';\n\n      case true:\n        return 'true';\n\n      case false:\n        return 'false';\n    }\n\n    if (typeof value === 'string') {\n      return quoteString(value, false);\n    }\n\n    if (typeof value === 'number') {\n      return String(value);\n    }\n\n    if (typeof value === 'object') {\n      return Array.isArray(value) ? serializeArray(value) : serializeObject(value);\n    }\n\n    return undefined;\n  }\n\n  function quoteString(value) {\n    const quotes = {\n      \"'\": 0.1,\n      '\"': 0.2\n    };\n    const replacements = {\n      \"'\": \"\\\\'\",\n      '\"': '\\\\\"',\n      '\\\\': '\\\\\\\\',\n      '\\b': '\\\\b',\n      '\\f': '\\\\f',\n      '\\n': '\\\\n',\n      '\\r': '\\\\r',\n      '\\t': '\\\\t',\n      '\\v': '\\\\v',\n      '\\0': '\\\\0',\n      '\\u2028': '\\\\u2028',\n      '\\u2029': '\\\\u2029'\n    };\n    let product = '';\n\n    for (let i = 0; i < value.length; i++) {\n      const c = value[i];\n\n      switch (c) {\n        case \"'\":\n        case '\"':\n          quotes[c]++;\n          product += c;\n          continue;\n\n        case '\\0':\n          if (util.isDigit(value[i + 1])) {\n            product += '\\\\x00';\n            continue;\n          }\n\n      }\n\n      if (replacements[c]) {\n        product += replacements[c];\n        continue;\n      }\n\n      if (c < ' ') {\n        let hexString = c.charCodeAt(0).toString(16);\n        product += '\\\\x' + ('00' + hexString).substring(hexString.length);\n        continue;\n      }\n\n      product += c;\n    }\n\n    const quoteChar = quote || Object.keys(quotes).reduce((a, b) => quotes[a] < quotes[b] ? a : b);\n    product = product.replace(new RegExp(quoteChar, 'g'), replacements[quoteChar]);\n    return quoteChar + product + quoteChar;\n  }\n\n  function serializeObject(value) {\n    if (stack.indexOf(value) >= 0) {\n      throw TypeError('Converting circular structure to JSON5');\n    }\n\n    stack.push(value);\n    let stepback = indent;\n    indent = indent + gap;\n    let keys = propertyList || Object.keys(value);\n    let partial = [];\n\n    for (const key of keys) {\n      const propertyString = serializeProperty(key, value);\n\n      if (propertyString !== undefined) {\n        let member = serializeKey(key) + ':';\n\n        if (gap !== '') {\n          member += ' ';\n        }\n\n        member += propertyString;\n        partial.push(member);\n      }\n    }\n\n    let final;\n\n    if (partial.length === 0) {\n      final = '{}';\n    } else {\n      let properties;\n\n      if (gap === '') {\n        properties = partial.join(',');\n        final = '{' + properties + '}';\n      } else {\n        let separator = ',\\n' + indent;\n        properties = partial.join(separator);\n        final = '{\\n' + indent + properties + ',\\n' + stepback + '}';\n      }\n    }\n\n    stack.pop();\n    indent = stepback;\n    return final;\n  }\n\n  function serializeKey(key) {\n    if (key.length === 0) {\n      return quoteString(key, true);\n    }\n\n    const firstChar = String.fromCodePoint(key.codePointAt(0));\n\n    if (!util.isIdStartChar(firstChar)) {\n      return quoteString(key, true);\n    }\n\n    for (let i = firstChar.length; i < key.length; i++) {\n      if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {\n        return quoteString(key, true);\n      }\n    }\n\n    return key;\n  }\n\n  function serializeArray(value) {\n    if (stack.indexOf(value) >= 0) {\n      throw TypeError('Converting circular structure to JSON5');\n    }\n\n    stack.push(value);\n    let stepback = indent;\n    indent = indent + gap;\n    let partial = [];\n\n    for (let i = 0; i < value.length; i++) {\n      const propertyString = serializeProperty(String(i), value);\n      partial.push(propertyString !== undefined ? propertyString : 'null');\n    }\n\n    let final;\n\n    if (partial.length === 0) {\n      final = '[]';\n    } else {\n      if (gap === '') {\n        let properties = partial.join(',');\n        final = '[' + properties + ']';\n      } else {\n        let separator = ',\\n' + indent;\n        let properties = partial.join(separator);\n        final = '[\\n' + indent + properties + ',\\n' + stepback + ']';\n      }\n    }\n\n    stack.pop();\n    indent = stepback;\n    return final;\n  }\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/json5/lib/stringify.js"],"names":["util","require","module","exports","stringify","value","replacer","space","stack","indent","propertyList","replacerFunc","gap","quote","Array","isArray","v","item","String","Number","undefined","indexOf","push","Math","min","floor","substr","serializeProperty","key","holder","toJSON5","toJSON","call","Boolean","valueOf","quoteString","serializeArray","serializeObject","quotes","replacements","product","i","length","c","isDigit","hexString","charCodeAt","toString","substring","quoteChar","Object","keys","reduce","a","b","replace","RegExp","TypeError","stepback","partial","propertyString","member","serializeKey","final","properties","join","separator","pop","firstChar","fromCodePoint","codePointAt","isIdStartChar","isIdContinueChar"],"mappings":"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","sourcesContent":["const util = require('./util')\n\nmodule.exports = function stringify (value, replacer, space) {\n    const stack = []\n    let indent = ''\n    let propertyList\n    let replacerFunc\n    let gap = ''\n    let quote\n\n    if (\n        replacer != null &&\n        typeof replacer === 'object' &&\n        !Array.isArray(replacer)\n    ) {\n        space = replacer.space\n        quote = replacer.quote\n        replacer = replacer.replacer\n    }\n\n    if (typeof replacer === 'function') {\n        replacerFunc = replacer\n    } else if (Array.isArray(replacer)) {\n        propertyList = []\n        for (const v of replacer) {\n            let item\n\n            if (typeof v === 'string') {\n                item = v\n            } else if (\n                typeof v === 'number' ||\n                v instanceof String ||\n                v instanceof Number\n            ) {\n                item = String(v)\n            }\n\n            if (item !== undefined && propertyList.indexOf(item) < 0) {\n                propertyList.push(item)\n            }\n        }\n    }\n\n    if (space instanceof Number) {\n        space = Number(space)\n    } else if (space instanceof String) {\n        space = String(space)\n    }\n\n    if (typeof space === 'number') {\n        if (space > 0) {\n            space = Math.min(10, Math.floor(space))\n            gap = '          '.substr(0, space)\n        }\n    } else if (typeof space === 'string') {\n        gap = space.substr(0, 10)\n    }\n\n    return serializeProperty('', {'': value})\n\n    function serializeProperty (key, holder) {\n        let value = holder[key]\n        if (value != null) {\n            if (typeof value.toJSON5 === 'function') {\n                value = value.toJSON5(key)\n            } else if (typeof value.toJSON === 'function') {\n                value = value.toJSON(key)\n            }\n        }\n\n        if (replacerFunc) {\n            value = replacerFunc.call(holder, key, value)\n        }\n\n        if (value instanceof Number) {\n            value = Number(value)\n        } else if (value instanceof String) {\n            value = String(value)\n        } else if (value instanceof Boolean) {\n            value = value.valueOf()\n        }\n\n        switch (value) {\n        case null: return 'null'\n        case true: return 'true'\n        case false: return 'false'\n        }\n\n        if (typeof value === 'string') {\n            return quoteString(value, false)\n        }\n\n        if (typeof value === 'number') {\n            return String(value)\n        }\n\n        if (typeof value === 'object') {\n            return Array.isArray(value) ? serializeArray(value) : serializeObject(value)\n        }\n\n        return undefined\n    }\n\n    function quoteString (value) {\n        const quotes = {\n            \"'\": 0.1,\n            '\"': 0.2,\n        }\n\n        const replacements = {\n            \"'\": \"\\\\'\",\n            '\"': '\\\\\"',\n            '\\\\': '\\\\\\\\',\n            '\\b': '\\\\b',\n            '\\f': '\\\\f',\n            '\\n': '\\\\n',\n            '\\r': '\\\\r',\n            '\\t': '\\\\t',\n            '\\v': '\\\\v',\n            '\\0': '\\\\0',\n            '\\u2028': '\\\\u2028',\n            '\\u2029': '\\\\u2029',\n        }\n\n        let product = ''\n\n        for (let i = 0; i < value.length; i++) {\n            const c = value[i]\n            switch (c) {\n            case \"'\":\n            case '\"':\n                quotes[c]++\n                product += c\n                continue\n\n            case '\\0':\n                if (util.isDigit(value[i + 1])) {\n                    product += '\\\\x00'\n                    continue\n                }\n            }\n\n            if (replacements[c]) {\n                product += replacements[c]\n                continue\n            }\n\n            if (c < ' ') {\n                let hexString = c.charCodeAt(0).toString(16)\n                product += '\\\\x' + ('00' + hexString).substring(hexString.length)\n                continue\n            }\n\n            product += c\n        }\n\n        const quoteChar = quote || Object.keys(quotes).reduce((a, b) => (quotes[a] < quotes[b]) ? a : b)\n\n        product = product.replace(new RegExp(quoteChar, 'g'), replacements[quoteChar])\n\n        return quoteChar + product + quoteChar\n    }\n\n    function serializeObject (value) {\n        if (stack.indexOf(value) >= 0) {\n            throw TypeError('Converting circular structure to JSON5')\n        }\n\n        stack.push(value)\n\n        let stepback = indent\n        indent = indent + gap\n\n        let keys = propertyList || Object.keys(value)\n        let partial = []\n        for (const key of keys) {\n            const propertyString = serializeProperty(key, value)\n            if (propertyString !== undefined) {\n                let member = serializeKey(key) + ':'\n                if (gap !== '') {\n                    member += ' '\n                }\n                member += propertyString\n                partial.push(member)\n            }\n        }\n\n        let final\n        if (partial.length === 0) {\n            final = '{}'\n        } else {\n            let properties\n            if (gap === '') {\n                properties = partial.join(',')\n                final = '{' + properties + '}'\n            } else {\n                let separator = ',\\n' + indent\n                properties = partial.join(separator)\n                final = '{\\n' + indent + properties + ',\\n' + stepback + '}'\n            }\n        }\n\n        stack.pop()\n        indent = stepback\n        return final\n    }\n\n    function serializeKey (key) {\n        if (key.length === 0) {\n            return quoteString(key, true)\n        }\n\n        const firstChar = String.fromCodePoint(key.codePointAt(0))\n        if (!util.isIdStartChar(firstChar)) {\n            return quoteString(key, true)\n        }\n\n        for (let i = firstChar.length; i < key.length; i++) {\n            if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {\n                return quoteString(key, true)\n            }\n        }\n\n        return key\n    }\n\n    function serializeArray (value) {\n        if (stack.indexOf(value) >= 0) {\n            throw TypeError('Converting circular structure to JSON5')\n        }\n\n        stack.push(value)\n\n        let stepback = indent\n        indent = indent + gap\n\n        let partial = []\n        for (let i = 0; i < value.length; i++) {\n            const propertyString = serializeProperty(String(i), value)\n            partial.push((propertyString !== undefined) ? propertyString : 'null')\n        }\n\n        let final\n        if (partial.length === 0) {\n            final = '[]'\n        } else {\n            if (gap === '') {\n                let properties = partial.join(',')\n                final = '[' + properties + ']'\n            } else {\n                let separator = ',\\n' + indent\n                let properties = partial.join(separator)\n                final = '[\\n' + indent + properties + ',\\n' + stepback + ']'\n            }\n        }\n\n        stack.pop()\n        indent = stepback\n        return final\n    }\n}\n"]},"metadata":{},"sourceType":"script"}