{"ast":null,"code":"/**\n * @fileoverview Rule to disallow returning value from constructor.\n * @author Pig Fang <https://github.com/g-plane>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow returning value from constructor\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-constructor-return\"\n    },\n    schema: {},\n    fixable: null,\n    messages: {\n      unexpected: \"Unexpected return statement in constructor.\"\n    }\n  },\n\n  create(context) {\n    const stack = [];\n    return {\n      onCodePathStart(_, node) {\n        stack.push(node);\n      },\n\n      onCodePathEnd() {\n        stack.pop();\n      },\n\n      ReturnStatement(node) {\n        const last = stack[stack.length - 1];\n\n        if (!last.parent) {\n          return;\n        }\n\n        if (last.parent.type === \"MethodDefinition\" && last.parent.kind === \"constructor\" && (node.parent.parent === last || node.argument)) {\n          context.report({\n            node,\n            messageId: \"unexpected\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-constructor-return.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","fixable","messages","unexpected","create","context","stack","onCodePathStart","_","node","push","onCodePathEnd","pop","ReturnStatement","last","length","parent","kind","argument","report","messageId"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,SADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,2CADX;AAEFC,MAAAA,QAAQ,EAAE,gBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,EAVN;AAYFC,IAAAA,OAAO,EAAE,IAZP;AAcFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN;AAdR,GADO;;AAoBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,KAAK,GAAG,EAAd;AAEA,WAAO;AACHC,MAAAA,eAAe,CAACC,CAAD,EAAIC,IAAJ,EAAU;AACrBH,QAAAA,KAAK,CAACI,IAAN,CAAWD,IAAX;AACH,OAHE;;AAIHE,MAAAA,aAAa,GAAG;AACZL,QAAAA,KAAK,CAACM,GAAN;AACH,OANE;;AAOHC,MAAAA,eAAe,CAACJ,IAAD,EAAO;AAClB,cAAMK,IAAI,GAAGR,KAAK,CAACA,KAAK,CAACS,MAAN,GAAe,CAAhB,CAAlB;;AAEA,YAAI,CAACD,IAAI,CAACE,MAAV,EAAkB;AACd;AACH;;AAED,YACIF,IAAI,CAACE,MAAL,CAAYtB,IAAZ,KAAqB,kBAArB,IACAoB,IAAI,CAACE,MAAL,CAAYC,IAAZ,KAAqB,aADrB,KAECR,IAAI,CAACO,MAAL,CAAYA,MAAZ,KAAuBF,IAAvB,IAA+BL,IAAI,CAACS,QAFrC,CADJ,EAIE;AACEb,UAAAA,OAAO,CAACc,MAAR,CAAe;AACXV,YAAAA,IADW;AAEXW,YAAAA,SAAS,EAAE;AAFA,WAAf;AAIH;AACJ;;AAxBE,KAAP;AA0BH;;AAjDY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to disallow returning value from constructor.\n * @author Pig Fang <https://github.com/g-plane>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow returning value from constructor\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-constructor-return\"\n        },\n\n        schema: {},\n\n        fixable: null,\n\n        messages: {\n            unexpected: \"Unexpected return statement in constructor.\"\n        }\n    },\n\n    create(context) {\n        const stack = [];\n\n        return {\n            onCodePathStart(_, node) {\n                stack.push(node);\n            },\n            onCodePathEnd() {\n                stack.pop();\n            },\n            ReturnStatement(node) {\n                const last = stack[stack.length - 1];\n\n                if (!last.parent) {\n                    return;\n                }\n\n                if (\n                    last.parent.type === \"MethodDefinition\" &&\n                    last.parent.kind === \"constructor\" &&\n                    (node.parent.parent === last || node.argument)\n                ) {\n                    context.report({\n                        node,\n                        messageId: \"unexpected\"\n                    });\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}