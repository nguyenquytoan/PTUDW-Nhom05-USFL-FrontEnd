{"ast":null,"code":"'use strict';\n\nlet cloneNode = function (obj, parent) {\n  let cloned = new obj.constructor();\n\n  for (let i in obj) {\n    if (!obj.hasOwnProperty(i)) continue;\n    let value = obj[i],\n        type = typeof value;\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent;\n    } else if (i === 'source') {\n      cloned[i] = value;\n    } else if (value instanceof Array) {\n      cloned[i] = value.map(j => cloneNode(j, cloned));\n    } else if (i !== 'before' && i !== 'after' && i !== 'between' && i !== 'semicolon') {\n      if (type === 'object' && value !== null) value = cloneNode(value);\n      cloned[i] = value;\n    }\n  }\n\n  return cloned;\n};\n\nmodule.exports = class Node {\n  constructor(defaults) {\n    defaults = defaults || {};\n    this.raws = {\n      before: '',\n      after: ''\n    };\n\n    for (let name in defaults) {\n      this[name] = defaults[name];\n    }\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    }\n\n    this.parent = undefined;\n    return this;\n  }\n\n  toString() {\n    return [this.raws.before, String(this.value), this.raws.after].join('');\n  }\n\n  clone(overrides) {\n    overrides = overrides || {};\n    let cloned = cloneNode(this);\n\n    for (let name in overrides) {\n      cloned[name] = overrides[name];\n    }\n\n    return cloned;\n  }\n\n  cloneBefore(overrides) {\n    overrides = overrides || {};\n    let cloned = this.clone(overrides);\n    this.parent.insertBefore(this, cloned);\n    return cloned;\n  }\n\n  cloneAfter(overrides) {\n    overrides = overrides || {};\n    let cloned = this.clone(overrides);\n    this.parent.insertAfter(this, cloned);\n    return cloned;\n  }\n\n  replaceWith() {\n    let nodes = Array.prototype.slice.call(arguments);\n\n    if (this.parent) {\n      for (let node of nodes) {\n        this.parent.insertBefore(this, node);\n      }\n\n      this.remove();\n    }\n\n    return this;\n  }\n\n  moveTo(container) {\n    this.cleanRaws(this.root() === container.root());\n    this.remove();\n    container.append(this);\n    return this;\n  }\n\n  moveBefore(node) {\n    this.cleanRaws(this.root() === node.root());\n    this.remove();\n    node.parent.insertBefore(node, this);\n    return this;\n  }\n\n  moveAfter(node) {\n    this.cleanRaws(this.root() === node.root());\n    this.remove();\n    node.parent.insertAfter(node, this);\n    return this;\n  }\n\n  next() {\n    let index = this.parent.index(this);\n    return this.parent.nodes[index + 1];\n  }\n\n  prev() {\n    let index = this.parent.index(this);\n    return this.parent.nodes[index - 1];\n  }\n\n  toJSON() {\n    let fixed = {};\n\n    for (let name in this) {\n      if (!this.hasOwnProperty(name)) continue;\n      if (name === 'parent') continue;\n      let value = this[name];\n\n      if (value instanceof Array) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON();\n          } else {\n            return i;\n          }\n        });\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON();\n      } else {\n        fixed[name] = value;\n      }\n    }\n\n    return fixed;\n  }\n\n  root() {\n    let result = this;\n\n    while (result.parent) result = result.parent;\n\n    return result;\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before;\n    delete this.raws.after;\n    if (!keepBetween) delete this.raws.between;\n  }\n\n  positionInside(index) {\n    let string = this.toString(),\n        column = this.source.start.column,\n        line = this.source.start.line;\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1;\n        line += 1;\n      } else {\n        column += 1;\n      }\n    }\n\n    return {\n      line,\n      column\n    };\n  }\n\n  positionBy(opts) {\n    let pos = this.source.start;\n\n    if (Object(opts).index) {\n      pos = this.positionInside(opts.index);\n    } else if (Object(opts).word) {\n      let index = this.toString().indexOf(opts.word);\n      if (index !== -1) pos = this.positionInside(index);\n    }\n\n    return pos;\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-values-parser/lib/node.js"],"names":["cloneNode","obj","parent","cloned","constructor","i","hasOwnProperty","value","type","Array","map","j","module","exports","Node","defaults","raws","before","after","name","remove","removeChild","undefined","toString","String","join","clone","overrides","cloneBefore","insertBefore","cloneAfter","insertAfter","replaceWith","nodes","prototype","slice","call","arguments","node","moveTo","container","cleanRaws","root","append","moveBefore","moveAfter","next","index","prev","toJSON","fixed","result","keepBetween","between","positionInside","string","column","source","start","line","positionBy","opts","pos","Object","word","indexOf"],"mappings":"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","sourcesContent":["'use strict';\n\nlet cloneNode = function (obj, parent) {\n  let cloned = new obj.constructor();\n\n  for (let i in obj) {\n    if (!obj.hasOwnProperty(i)) continue;\n\n    let value = obj[i],\n      type  = typeof value;\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent;\n    }\n    else if (i === 'source') {\n      cloned[i] = value;\n    }\n    else if (value instanceof Array) {\n      cloned[i] = value.map(j => cloneNode(j, cloned));\n    }\n    else if (i !== 'before'  && i !== 'after' && i !== 'between' && i !== 'semicolon') {\n      if (type === 'object' && value !== null) value = cloneNode(value);\n      cloned[i] = value;\n    }\n  }\n\n  return cloned;\n};\n\nmodule.exports = class Node {\n\n  constructor (defaults) {\n    defaults = defaults || {};\n    this.raws = { before: '', after: '' };\n\n    for (let name in defaults) {\n      this[name] = defaults[name];\n    }\n  }\n\n  remove () {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    }\n\n    this.parent = undefined;\n\n    return this;\n  }\n\n  toString () {\n    return [\n      this.raws.before,\n      String(this.value),\n      this.raws.after\n    ].join('');\n  }\n\n  clone (overrides) {\n    overrides = overrides || {};\n\n    let cloned = cloneNode(this);\n\n    for (let name in overrides) {\n      cloned[name] = overrides[name];\n    }\n\n    return cloned;\n  }\n\n  cloneBefore (overrides) {\n    overrides = overrides || {};\n\n    let cloned = this.clone(overrides);\n\n    this.parent.insertBefore(this, cloned);\n    return cloned;\n  }\n\n  cloneAfter (overrides) {\n    overrides = overrides || {};\n\n    let cloned = this.clone(overrides);\n\n    this.parent.insertAfter(this, cloned);\n    return cloned;\n  }\n\n  replaceWith () {\n    let nodes = Array.prototype.slice.call(arguments);\n\n    if (this.parent) {\n      for (let node of nodes) {\n        this.parent.insertBefore(this, node);\n      }\n\n      this.remove();\n    }\n\n    return this;\n  }\n\n  moveTo (container) {\n    this.cleanRaws(this.root() === container.root());\n    this.remove();\n\n    container.append(this);\n\n    return this;\n  }\n\n  moveBefore (node) {\n    this.cleanRaws(this.root() === node.root());\n    this.remove();\n\n    node.parent.insertBefore(node, this);\n\n    return this;\n  }\n\n  moveAfter (node) {\n    this.cleanRaws(this.root() === node.root());\n    this.remove();\n    node.parent.insertAfter(node, this);\n    return this;\n  }\n\n  next () {\n    let index = this.parent.index(this);\n\n    return this.parent.nodes[index + 1];\n  }\n\n  prev () {\n    let index = this.parent.index(this);\n\n    return this.parent.nodes[index - 1];\n  }\n\n  toJSON () {\n    let fixed = { };\n\n    for (let name in this) {\n      if (!this.hasOwnProperty(name)) continue;\n      if (name === 'parent') continue;\n      let value = this[name];\n\n      if (value instanceof Array) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON();\n          }\n          else {\n            return i;\n          }\n        });\n      }\n      else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON();\n      }\n      else {\n        fixed[name] = value;\n      }\n    }\n\n    return fixed;\n  }\n\n  root () {\n    let result = this;\n\n    while (result.parent) result = result.parent;\n\n    return result;\n  }\n\n  cleanRaws (keepBetween) {\n    delete this.raws.before;\n    delete this.raws.after;\n    if (!keepBetween) delete this.raws.between;\n  }\n\n  positionInside (index) {\n    let string = this.toString(),\n      column = this.source.start.column,\n      line   = this.source.start.line;\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1;\n        line  += 1;\n      }\n      else {\n        column += 1;\n      }\n    }\n\n    return { line, column };\n  }\n\n  positionBy (opts) {\n    let pos = this.source.start;\n\n    if (Object(opts).index) {\n      pos = this.positionInside(opts.index);\n    }\n    else if (Object(opts).word) {\n      let index = this.toString().indexOf(opts.word);\n      if (index !== -1) pos = this.positionInside(index);\n    }\n\n    return pos;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}