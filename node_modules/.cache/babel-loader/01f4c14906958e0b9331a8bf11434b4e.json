{"ast":null,"code":"'use strict';\n\nmodule.exports = readdirAsync;\n\nconst maybe = require('call-me-maybe');\n\nconst DirectoryReader = require('../directory-reader');\n\nlet asyncFacade = {\n  fs: require('fs'),\n  forEach: require('./for-each'),\n  async: true\n};\n/**\n * Returns the buffered output from an asynchronous {@link DirectoryReader},\n * via an error-first callback or a {@link Promise}.\n *\n * @param {string} dir\n * @param {object} [options]\n * @param {function} [callback]\n * @param {object} internalOptions\n */\n\nfunction readdirAsync(dir, options, callback, internalOptions) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  return maybe(callback, new Promise((resolve, reject) => {\n    let results = [];\n    internalOptions.facade = asyncFacade;\n    let reader = new DirectoryReader(dir, options, internalOptions);\n    let stream = reader.stream;\n    stream.on('error', err => {\n      reject(err);\n      stream.pause();\n    });\n    stream.on('data', result => {\n      results.push(result);\n    });\n    stream.on('end', () => {\n      resolve(results);\n    });\n  }));\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/@mrmlnc/readdir-enhanced/lib/async/index.js"],"names":["module","exports","readdirAsync","maybe","require","DirectoryReader","asyncFacade","fs","forEach","async","dir","options","callback","internalOptions","undefined","Promise","resolve","reject","results","facade","reader","stream","on","err","pause","result","push"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,YAAjB;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAAC,eAAD,CAArB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,qBAAD,CAA/B;;AAEA,IAAIE,WAAW,GAAG;AAChBC,EAAAA,EAAE,EAAEH,OAAO,CAAC,IAAD,CADK;AAEhBI,EAAAA,OAAO,EAAEJ,OAAO,CAAC,YAAD,CAFA;AAGhBK,EAAAA,KAAK,EAAE;AAHS,CAAlB;AAMA;;;;;;;;;;AASA,SAASP,YAAT,CAAuBQ,GAAvB,EAA4BC,OAA5B,EAAqCC,QAArC,EAA+CC,eAA/C,EAAgE;AAC9D,MAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,IAAAA,QAAQ,GAAGD,OAAX;AACAA,IAAAA,OAAO,GAAGG,SAAV;AACD;;AAED,SAAOX,KAAK,CAACS,QAAD,EAAW,IAAIG,OAAJ,CAAa,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvD,QAAIC,OAAO,GAAG,EAAd;AAEAL,IAAAA,eAAe,CAACM,MAAhB,GAAyBb,WAAzB;AAEA,QAAIc,MAAM,GAAG,IAAIf,eAAJ,CAAoBK,GAApB,EAAyBC,OAAzB,EAAkCE,eAAlC,CAAb;AACA,QAAIQ,MAAM,GAAGD,MAAM,CAACC,MAApB;AAEAA,IAAAA,MAAM,CAACC,EAAP,CAAU,OAAV,EAAmBC,GAAG,IAAI;AACxBN,MAAAA,MAAM,CAACM,GAAD,CAAN;AACAF,MAAAA,MAAM,CAACG,KAAP;AACD,KAHD;AAIAH,IAAAA,MAAM,CAACC,EAAP,CAAU,MAAV,EAAkBG,MAAM,IAAI;AAC1BP,MAAAA,OAAO,CAACQ,IAAR,CAAaD,MAAb;AACD,KAFD;AAGAJ,IAAAA,MAAM,CAACC,EAAP,CAAU,KAAV,EAAiB,MAAM;AACrBN,MAAAA,OAAO,CAACE,OAAD,CAAP;AACD,KAFD;AAGD,GAlBsB,CAAX,CAAZ;AAmBD","sourcesContent":["'use strict';\n\nmodule.exports = readdirAsync;\n\nconst maybe = require('call-me-maybe');\nconst DirectoryReader = require('../directory-reader');\n\nlet asyncFacade = {\n  fs: require('fs'),\n  forEach: require('./for-each'),\n  async: true\n};\n\n/**\n * Returns the buffered output from an asynchronous {@link DirectoryReader},\n * via an error-first callback or a {@link Promise}.\n *\n * @param {string} dir\n * @param {object} [options]\n * @param {function} [callback]\n * @param {object} internalOptions\n */\nfunction readdirAsync (dir, options, callback, internalOptions) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  return maybe(callback, new Promise(((resolve, reject) => {\n    let results = [];\n\n    internalOptions.facade = asyncFacade;\n\n    let reader = new DirectoryReader(dir, options, internalOptions);\n    let stream = reader.stream;\n\n    stream.on('error', err => {\n      reject(err);\n      stream.pause();\n    });\n    stream.on('data', result => {\n      results.push(result);\n    });\n    stream.on('end', () => {\n      resolve(results);\n    });\n  })));\n}\n"]},"metadata":{},"sourceType":"script"}