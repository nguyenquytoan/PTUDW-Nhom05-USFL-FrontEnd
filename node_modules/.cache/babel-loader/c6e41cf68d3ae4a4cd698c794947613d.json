{"ast":null,"code":"/**\n * @fileoverview Enforces or disallows inline comments.\n * @author Greg Cochard\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow inline comments after code\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-inline-comments\"\n    },\n    schema: []\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    /**\n     * Will check that comments are not on lines starting with or ending with code\n     * @param {ASTNode} node The comment node to check\n     * @private\n     * @returns {void}\n     */\n\n    function testCodeAroundComment(node) {\n      const startLine = String(sourceCode.lines[node.loc.start.line - 1]),\n            endLine = String(sourceCode.lines[node.loc.end.line - 1]),\n            preamble = startLine.slice(0, node.loc.start.column).trim(),\n            postamble = endLine.slice(node.loc.end.column).trim(),\n            isPreambleEmpty = !preamble,\n            isPostambleEmpty = !postamble; // Nothing on both sides\n\n      if (isPreambleEmpty && isPostambleEmpty) {\n        return;\n      } // JSX Exception\n\n\n      if ((isPreambleEmpty || preamble === \"{\") && (isPostambleEmpty || postamble === \"}\")) {\n        const enclosingNode = sourceCode.getNodeByRangeIndex(node.range[0]);\n\n        if (enclosingNode && enclosingNode.type === \"JSXEmptyExpression\") {\n          return;\n        }\n      } // Don't report ESLint directive comments\n\n\n      if (astUtils.isDirectiveComment(node)) {\n        return;\n      }\n\n      context.report({\n        node,\n        message: \"Unexpected comment inline with code.\"\n      });\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      Program() {\n        const comments = sourceCode.getAllComments();\n        comments.filter(token => token.type !== \"Shebang\").forEach(testCodeAroundComment);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-inline-comments.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","create","context","sourceCode","getSourceCode","testCodeAroundComment","node","startLine","String","lines","loc","start","line","endLine","end","preamble","slice","column","trim","postamble","isPreambleEmpty","isPostambleEmpty","enclosingNode","getNodeByRangeIndex","range","isDirectiveComment","report","message","Program","comments","getAllComments","filter","token","forEach"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,qCADX;AAEFC,MAAAA,QAAQ,EAAE,kBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE;AAVN,GADO;;AAcbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;AAEA;;;;;;;AAMA,aAASC,qBAAT,CAA+BC,IAA/B,EAAqC;AAEjC,YAAMC,SAAS,GAAGC,MAAM,CAACL,UAAU,CAACM,KAAX,CAAiBH,IAAI,CAACI,GAAL,CAASC,KAAT,CAAeC,IAAf,GAAsB,CAAvC,CAAD,CAAxB;AAAA,YACIC,OAAO,GAAGL,MAAM,CAACL,UAAU,CAACM,KAAX,CAAiBH,IAAI,CAACI,GAAL,CAASI,GAAT,CAAaF,IAAb,GAAoB,CAArC,CAAD,CADpB;AAAA,YAEIG,QAAQ,GAAGR,SAAS,CAACS,KAAV,CAAgB,CAAhB,EAAmBV,IAAI,CAACI,GAAL,CAASC,KAAT,CAAeM,MAAlC,EAA0CC,IAA1C,EAFf;AAAA,YAGIC,SAAS,GAAGN,OAAO,CAACG,KAAR,CAAcV,IAAI,CAACI,GAAL,CAASI,GAAT,CAAaG,MAA3B,EAAmCC,IAAnC,EAHhB;AAAA,YAIIE,eAAe,GAAG,CAACL,QAJvB;AAAA,YAKIM,gBAAgB,GAAG,CAACF,SALxB,CAFiC,CASjC;;AACA,UAAIC,eAAe,IAAIC,gBAAvB,EAAyC;AACrC;AACH,OAZgC,CAcjC;;;AACA,UACI,CAACD,eAAe,IAAIL,QAAQ,KAAK,GAAjC,MACCM,gBAAgB,IAAIF,SAAS,KAAK,GADnC,CADJ,EAGE;AACE,cAAMG,aAAa,GAAGnB,UAAU,CAACoB,mBAAX,CAA+BjB,IAAI,CAACkB,KAAL,CAAW,CAAX,CAA/B,CAAtB;;AAEA,YAAIF,aAAa,IAAIA,aAAa,CAAC5B,IAAd,KAAuB,oBAA5C,EAAkE;AAC9D;AACH;AACJ,OAxBgC,CA0BjC;;;AACA,UAAIL,QAAQ,CAACoC,kBAAT,CAA4BnB,IAA5B,CAAJ,EAAuC;AACnC;AACH;;AAEDJ,MAAAA,OAAO,CAACwB,MAAR,CAAe;AAAEpB,QAAAA,IAAF;AAAQqB,QAAAA,OAAO,EAAE;AAAjB,OAAf;AACH,KAzCW,CA2CZ;AACA;AACA;;;AAEA,WAAO;AACHC,MAAAA,OAAO,GAAG;AACN,cAAMC,QAAQ,GAAG1B,UAAU,CAAC2B,cAAX,EAAjB;AAEAD,QAAAA,QAAQ,CAACE,MAAT,CAAgBC,KAAK,IAAIA,KAAK,CAACtC,IAAN,KAAe,SAAxC,EAAmDuC,OAAnD,CAA2D5B,qBAA3D;AACH;;AALE,KAAP;AAOH;;AApEY,CAAjB","sourcesContent":["/**\n * @fileoverview Enforces or disallows inline comments.\n * @author Greg Cochard\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow inline comments after code\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-inline-comments\"\n        },\n\n        schema: []\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Will check that comments are not on lines starting with or ending with code\n         * @param {ASTNode} node The comment node to check\n         * @private\n         * @returns {void}\n         */\n        function testCodeAroundComment(node) {\n\n            const startLine = String(sourceCode.lines[node.loc.start.line - 1]),\n                endLine = String(sourceCode.lines[node.loc.end.line - 1]),\n                preamble = startLine.slice(0, node.loc.start.column).trim(),\n                postamble = endLine.slice(node.loc.end.column).trim(),\n                isPreambleEmpty = !preamble,\n                isPostambleEmpty = !postamble;\n\n            // Nothing on both sides\n            if (isPreambleEmpty && isPostambleEmpty) {\n                return;\n            }\n\n            // JSX Exception\n            if (\n                (isPreambleEmpty || preamble === \"{\") &&\n                (isPostambleEmpty || postamble === \"}\")\n            ) {\n                const enclosingNode = sourceCode.getNodeByRangeIndex(node.range[0]);\n\n                if (enclosingNode && enclosingNode.type === \"JSXEmptyExpression\") {\n                    return;\n                }\n            }\n\n            // Don't report ESLint directive comments\n            if (astUtils.isDirectiveComment(node)) {\n                return;\n            }\n\n            context.report({ node, message: \"Unexpected comment inline with code.\" });\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            Program() {\n                const comments = sourceCode.getAllComments();\n\n                comments.filter(token => token.type !== \"Shebang\").forEach(testCodeAroundComment);\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}