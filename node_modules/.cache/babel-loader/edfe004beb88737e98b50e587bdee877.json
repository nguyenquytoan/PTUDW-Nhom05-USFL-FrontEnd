{"ast":null,"code":"\"use strict\";\n\ndefine(['test/test-helpers'], function (testHelpers) {\n  var describeIf = testHelpers.describeIf;\n  var it = testHelpers.itWithFreshLog;\n  var originalConsole = window.console;\n  describe(\"Multiple logger instances tests:\", function () {\n    describe(\"log.getLogger()\", function () {\n      it(\"returns a new logger that is not the default one\", function (log) {\n        var newLogger = log.getLogger(\"newLogger\");\n        expect(newLogger).not.toEqual(log);\n        expect(newLogger.trace).toBeDefined();\n        expect(newLogger.debug).toBeDefined();\n        expect(newLogger.info).toBeDefined();\n        expect(newLogger.warn).toBeDefined();\n        expect(newLogger.error).toBeDefined();\n        expect(newLogger.setLevel).toBeDefined();\n        expect(newLogger.setDefaultLevel).toBeDefined();\n        expect(newLogger.enableAll).toBeDefined();\n        expect(newLogger.disableAll).toBeDefined();\n        expect(newLogger.methodFactory).toBeDefined();\n      });\n      it(\"returns loggers without `getLogger()` and `noConflict()`\", function (log) {\n        var newLogger = log.getLogger(\"newLogger\");\n        expect(newLogger.getLogger).toBeUndefined();\n        expect(newLogger.noConflict).toBeUndefined();\n      });\n      it(\"returns the same instance when called repeatedly with the same name\", function (log) {\n        var logger1 = log.getLogger(\"newLogger\");\n        var logger2 = log.getLogger(\"newLogger\");\n        expect(logger1).toEqual(logger2);\n      });\n      it(\"should throw if called with no name\", function (log) {\n        expect(function () {\n          log.getLogger();\n        }).toThrow();\n      });\n      it(\"should throw if called with empty string for name\", function (log) {\n        expect(function () {\n          log.getLogger(\"\");\n        }).toThrow();\n      });\n      it(\"should throw if called with a non-string name\", function (log) {\n        expect(function () {\n          log.getLogger(true);\n        }).toThrow();\n        expect(function () {\n          log.getLogger({});\n        }).toThrow();\n        expect(function () {\n          log.getLogger([]);\n        }).toThrow();\n        expect(function () {\n          log.getLogger(10);\n        }).toThrow();\n        expect(function () {\n          log.getLogger(function () {});\n        }).toThrow();\n        expect(function () {\n          log.getLogger(null);\n        }).toThrow();\n        expect(function () {\n          log.getLogger(undefined);\n        }).toThrow();\n\n        if (window.Symbol) {\n          expect(function () {\n            log.getLogger(Symbol());\n          }).toThrow();\n        }\n      });\n    });\n    describe(\"inheritance\", function () {\n      beforeEach(function () {\n        window.console = {\n          \"log\": jasmine.createSpy(\"console.log\")\n        };\n        this.addMatchers({\n          \"toBeAtLevel\": testHelpers.toBeAtLevel\n        });\n        testHelpers.clearStoredLevels();\n      });\n      afterEach(function () {\n        window.console = originalConsole;\n      });\n      it(\"loggers are created with the same level as the default logger\", function (log) {\n        log.setLevel(\"ERROR\");\n        var newLogger = log.getLogger(\"newLogger\");\n        expect(newLogger).toBeAtLevel(\"error\");\n      });\n      it(\"if a logger's level is persisted, it uses that level rather than the default logger's level\", function (log) {\n        testHelpers.setStoredLevel(\"error\", \"newLogger\");\n        log.setLevel(\"TRACE\");\n        var newLogger = log.getLogger(\"newLogger\");\n        expect(newLogger).toBeAtLevel(\"error\");\n      });\n      it(\"other loggers do not change when the default logger's level is changed\", function (log) {\n        log.setLevel(\"TRACE\");\n        var newLogger = log.getLogger(\"newLogger\");\n        log.setLevel(\"ERROR\");\n        expect(newLogger).toBeAtLevel(\"TRACE\");\n        expect(log.getLogger(\"newLogger\")).toBeAtLevel(\"TRACE\");\n      });\n      it(\"loggers are created with the same methodFactory as the default logger\", function (log) {\n        log.methodFactory = function (methodName, level) {\n          return function () {};\n        };\n\n        var newLogger = log.getLogger(\"newLogger\");\n        expect(newLogger.methodFactory).toEqual(log.methodFactory);\n      });\n      it(\"loggers have independent method factories\", function (log) {\n        var log1 = log.getLogger('logger1');\n        var log2 = log.getLogger('logger2');\n        var log1Spy = jasmine.createSpy('log1spy');\n\n        log1.methodFactory = function (methodName, level) {\n          return log1Spy;\n        };\n\n        log1.setLevel(log1.getLevel());\n        var log2Spy = jasmine.createSpy('log2spy');\n\n        log2.methodFactory = function (methodName, level) {\n          return log2Spy;\n        };\n\n        log2.setLevel(log2.getLevel());\n        log1.error('test1');\n        log2.error('test2');\n        expect(log1Spy).toHaveBeenCalledWith(\"test1\");\n        expect(log2Spy).toHaveBeenCalledWith(\"test2\");\n      });\n      it(\"new loggers correctly inherit a logging level of `0`\", function (log) {\n        log.setLevel(0);\n        var newLogger = log.getLogger(\"newLogger\");\n        expect(newLogger).toBeAtLevel(\"trace\");\n      });\n    });\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/loglevel/test/multiple-logger-test.js"],"names":["define","testHelpers","describeIf","it","itWithFreshLog","originalConsole","window","console","describe","log","newLogger","getLogger","expect","not","toEqual","trace","toBeDefined","debug","info","warn","error","setLevel","setDefaultLevel","enableAll","disableAll","methodFactory","toBeUndefined","noConflict","logger1","logger2","toThrow","undefined","Symbol","beforeEach","jasmine","createSpy","addMatchers","toBeAtLevel","clearStoredLevels","afterEach","setStoredLevel","methodName","level","log1","log2","log1Spy","getLevel","log2Spy","toHaveBeenCalledWith"],"mappings":"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","sourcesContent":["\"use strict\";\n\ndefine(['test/test-helpers'], function(testHelpers) {\n    var describeIf = testHelpers.describeIf;\n    var it = testHelpers.itWithFreshLog;\n\n    var originalConsole = window.console;\n\n    describe(\"Multiple logger instances tests:\", function() {\n\n        describe(\"log.getLogger()\", function() {\n            it(\"returns a new logger that is not the default one\", function(log) {\n                var newLogger = log.getLogger(\"newLogger\");\n                expect(newLogger).not.toEqual(log);\n                expect(newLogger.trace).toBeDefined();\n                expect(newLogger.debug).toBeDefined();\n                expect(newLogger.info).toBeDefined();\n                expect(newLogger.warn).toBeDefined();\n                expect(newLogger.error).toBeDefined();\n                expect(newLogger.setLevel).toBeDefined();\n                expect(newLogger.setDefaultLevel).toBeDefined();\n                expect(newLogger.enableAll).toBeDefined();\n                expect(newLogger.disableAll).toBeDefined();\n                expect(newLogger.methodFactory).toBeDefined();\n            });\n\n            it(\"returns loggers without `getLogger()` and `noConflict()`\", function(log) {\n                var newLogger = log.getLogger(\"newLogger\");\n                expect(newLogger.getLogger).toBeUndefined();\n                expect(newLogger.noConflict).toBeUndefined();\n            });\n\n            it(\"returns the same instance when called repeatedly with the same name\", function(log) {\n                var logger1 = log.getLogger(\"newLogger\");\n                var logger2 = log.getLogger(\"newLogger\");\n\n                expect(logger1).toEqual(logger2);\n            });\n\n            it(\"should throw if called with no name\", function(log) {\n                expect(function() {\n                  log.getLogger();\n                }).toThrow();\n            });\n\n            it(\"should throw if called with empty string for name\", function(log) {\n                expect(function() {\n                  log.getLogger(\"\");\n                }).toThrow();\n            });\n\n            it(\"should throw if called with a non-string name\", function(log) {\n                expect(function() { log.getLogger(true); }).toThrow();\n                expect(function() { log.getLogger({}); }).toThrow();\n                expect(function() { log.getLogger([]); }).toThrow();\n                expect(function() { log.getLogger(10); }).toThrow();\n                expect(function() { log.getLogger(function(){}); }).toThrow();\n                expect(function() { log.getLogger(null); }).toThrow();\n                expect(function() { log.getLogger(undefined); }).toThrow();\n                if (window.Symbol) {\n                    expect(function() { log.getLogger(Symbol()); }).toThrow();\n                }\n            });\n        });\n\n        describe(\"inheritance\", function() {\n            beforeEach(function() {\n                window.console = {\"log\" : jasmine.createSpy(\"console.log\")};\n                this.addMatchers({\n                    \"toBeAtLevel\" : testHelpers.toBeAtLevel\n                });\n                testHelpers.clearStoredLevels();\n            });\n\n            afterEach(function() {\n                window.console = originalConsole;\n            });\n\n            it(\"loggers are created with the same level as the default logger\", function(log) {\n              log.setLevel(\"ERROR\");\n              var newLogger = log.getLogger(\"newLogger\");\n              expect(newLogger).toBeAtLevel(\"error\");\n            });\n\n            it(\"if a logger's level is persisted, it uses that level rather than the default logger's level\", function(log) {\n                testHelpers.setStoredLevel(\"error\", \"newLogger\");\n                log.setLevel(\"TRACE\");\n                var newLogger = log.getLogger(\"newLogger\");\n                expect(newLogger).toBeAtLevel(\"error\");\n            });\n\n            it(\"other loggers do not change when the default logger's level is changed\", function(log) {\n                log.setLevel(\"TRACE\");\n                var newLogger = log.getLogger(\"newLogger\");\n                log.setLevel(\"ERROR\");\n                expect(newLogger).toBeAtLevel(\"TRACE\");\n                expect(log.getLogger(\"newLogger\")).toBeAtLevel(\"TRACE\");\n            });\n\n            it(\"loggers are created with the same methodFactory as the default logger\", function(log) {\n                log.methodFactory = function(methodName, level) {\n                  return function() {};\n                };\n\n                var newLogger = log.getLogger(\"newLogger\");\n                expect(newLogger.methodFactory).toEqual(log.methodFactory);\n            });\n\n            it(\"loggers have independent method factories\", function(log) {\n                var log1 = log.getLogger('logger1');\n                var log2 = log.getLogger('logger2');\n\n                var log1Spy = jasmine.createSpy('log1spy');\n                log1.methodFactory = function(methodName, level) {\n                    return log1Spy;\n                };\n                log1.setLevel(log1.getLevel());\n\n                var log2Spy = jasmine.createSpy('log2spy');\n                log2.methodFactory = function(methodName, level) {\n                    return log2Spy;\n                };\n                log2.setLevel(log2.getLevel());\n\n                log1.error('test1');\n                log2.error('test2');\n\n                expect(log1Spy).toHaveBeenCalledWith(\"test1\");\n                expect(log2Spy).toHaveBeenCalledWith(\"test2\");\n            });\n\n            it(\"new loggers correctly inherit a logging level of `0`\", function(log) {\n              log.setLevel(0);\n              var newLogger = log.getLogger(\"newLogger\");\n              expect(newLogger).toBeAtLevel(\"trace\");\n            });\n        });\n    });\n});\n"]},"metadata":{},"sourceType":"script"}