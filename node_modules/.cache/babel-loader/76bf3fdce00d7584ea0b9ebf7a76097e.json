{"ast":null,"code":"'use strict';\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar postcss = _interopDefault(require('postcss'));\n\nvar parser = _interopDefault(require('postcss-selector-parser'));\n\nconst anyAnyLinkMatch = /:any-link/;\nvar index = postcss.plugin('postcss-pseudo-class-any-link', opts => {\n  const preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : true;\n  return root => {\n    // walk each matching rule\n    root.walkRules(anyAnyLinkMatch, rule => {\n      const rawSelector = rule.raws.selector && rule.raws.selector.raw || rule.selector; // workaround for https://github.com/postcss/postcss-selector-parser/issues/28#issuecomment-171910556\n\n      if (rawSelector[rawSelector.length - 1] !== ':') {\n        // update the selector\n        const updatedSelector = parser(selectors => {\n          // cache variables\n          let node;\n          let nodeIndex;\n          let selector;\n          let selectorLink;\n          let selectorVisited; // cache the selector index\n\n          let selectorIndex = -1; // for each selector\n\n          while (selector = selectors.nodes[++selectorIndex]) {\n            // reset the node index\n            nodeIndex = -1; // for each node\n\n            while (node = selector.nodes[++nodeIndex]) {\n              // if the node value matches the any-link value\n              if (node.value === ':any-link') {\n                // clone the selector\n                selectorLink = selector.clone();\n                selectorVisited = selector.clone(); // update the matching clone values\n\n                selectorLink.nodes[nodeIndex].value = ':link';\n                selectorVisited.nodes[nodeIndex].value = ':visited'; // replace the selector with the clones and roll back the selector index\n\n                selectors.nodes.splice(selectorIndex--, 1, selectorLink, selectorVisited); // stop updating the selector\n\n                break;\n              }\n            }\n          }\n        }).processSync(rawSelector);\n\n        if (updatedSelector !== rawSelector) {\n          if (preserve) {\n            rule.cloneBefore({\n              selector: updatedSelector\n            });\n          } else {\n            rule.selector = updatedSelector;\n          }\n        }\n      }\n    });\n  };\n});\nmodule.exports = index;","map":{"version":3,"sources":["index.js"],"names":["anyAnyLinkMatch","opts","preserve","Object","Boolean","root","rule","rawSelector","updatedSelector","selectors","selectorIndex","selector","nodeIndex","node","selectorLink","selectorVisited"],"mappings":";;;;;;;;;;AAGA,MAAMA,eAAe,GAArB,WAAA;AAEA,IAAA,KAAA,GAAe,OAAO,CAAP,MAAA,CAAA,+BAAA,EAAgDC,IAAI,IAAI;QAChEC,QAAQ,GAAG,cAAcC,MAAM,CAApB,IAAoB,CAApB,GAA6BC,OAAO,CAACH,IAAI,CAAzC,QAAoC,CAApC,GAAjB,I;SAEOI,IAAI,IAAI;;AAEdA,IAAAA,IAAI,CAAJA,SAAAA,CAAAA,eAAAA,EAAgCC,IAAI,IAAI;YACjCC,WAAW,GAAGD,IAAI,CAAJA,IAAAA,CAAAA,QAAAA,IAAsBA,IAAI,CAAJA,IAAAA,CAAAA,QAAAA,CAAtBA,GAAAA,IAAgDA,IAAI,CADjC,Q,CAAA,CAAA;;UAInCC,WAAW,CAACA,WAAW,CAAXA,MAAAA,GAAZA,CAAW,CAAXA,KAAJ,G,EAAiD;;cAE1CC,eAAe,GAAG,MAAM,CAACC,SAAS,IAAI;;cAE3C,I;cACA,S;cACA,Q;cACA,Y;cAL2C,e,CAAA,CAAA;;cASvCC,aAAa,GAAG,CATuB,C,CAAA,CAAA;;iBAYpCC,QAAQ,GAAGF,SAAS,CAATA,KAAAA,CAAgB,EAAlC,aAAkBA,C,EAAkC;;AAEnDG,YAAAA,SAAS,GAAG,CAFuC,CAEnDA,CAFmD,CAAA;;mBAK5CC,IAAI,GAAGF,QAAQ,CAARA,KAAAA,CAAe,EAA7B,SAAcA,C,EAA6B;;kBAEtCE,IAAI,CAAJA,KAAAA,KAAJ,W,EAAgC;;AAE/BC,gBAAAA,YAAY,GAAGH,QAAQ,CAAvBG,KAAeH,EAAfG;AACAC,gBAAAA,eAAe,GAAGJ,QAAQ,CAHK,KAGbA,EAAlBI,CAH+B,CAAA;;AAM/BD,gBAAAA,YAAY,CAAZA,KAAAA,CAAAA,SAAAA,EAAAA,KAAAA,GAAAA,OAAAA;AACAC,gBAAAA,eAAe,CAAfA,KAAAA,CAAAA,SAAAA,EAAAA,KAAAA,GAP+B,UAO/BA,CAP+B,CAAA;;AAU/BN,gBAAAA,SAAS,CAATA,KAAAA,CAAAA,MAAAA,CAAuBC,aAAvBD,EAAAA,EAAAA,CAAAA,EAAAA,YAAAA,EAV+B,eAU/BA,EAV+B,CAAA;;;;;;AAnBX,SAAM,CAAN,CAAA,WAAA,CAAxB,WAAwB,C;;YAsCpBD,eAAe,KAAnB,W,EAAqC;cACpC,Q,EAAc;AACbF,YAAAA,IAAI,CAAJA,WAAAA,CAAiB;AAChBK,cAAAA,QAAQ,EAAEH;AADM,aAAjBF;AADD,W,MAIO;AACNA,YAAAA,IAAI,CAAJA,QAAAA,GAAAA,eAAAA;;;;AAlDJD,KAAAA;AAFD,G;AAHD,CAAe,CAAf","sourcesContent":["import postcss from 'postcss';\nimport parser from 'postcss-selector-parser';\n\nconst anyAnyLinkMatch = /:any-link/;\n\nexport default postcss.plugin('postcss-pseudo-class-any-link', opts => {\n\tconst preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : true;\n\n\treturn root => {\n\t\t// walk each matching rule\n\t\troot.walkRules(anyAnyLinkMatch, rule => {\n\t\t\tconst rawSelector = rule.raws.selector && rule.raws.selector.raw || rule.selector;\n\n\t\t\t// workaround for https://github.com/postcss/postcss-selector-parser/issues/28#issuecomment-171910556\n\t\t\tif (rawSelector[rawSelector.length - 1] !== ':') {\n\t\t\t\t// update the selector\n\t\t\t\tconst updatedSelector = parser(selectors => {\n\t\t\t\t\t// cache variables\n\t\t\t\t\tlet node;\n\t\t\t\t\tlet nodeIndex;\n\t\t\t\t\tlet selector;\n\t\t\t\t\tlet selectorLink;\n\t\t\t\t\tlet selectorVisited;\n\n\t\t\t\t\t// cache the selector index\n\t\t\t\t\tlet selectorIndex = -1;\n\n\t\t\t\t\t// for each selector\n\t\t\t\t\twhile (selector = selectors.nodes[++selectorIndex]) {\n\t\t\t\t\t\t// reset the node index\n\t\t\t\t\t\tnodeIndex = -1;\n\n\t\t\t\t\t\t// for each node\n\t\t\t\t\t\twhile (node = selector.nodes[++nodeIndex]) {\n\t\t\t\t\t\t\t// if the node value matches the any-link value\n\t\t\t\t\t\t\tif (node.value === ':any-link') {\n\t\t\t\t\t\t\t\t// clone the selector\n\t\t\t\t\t\t\t\tselectorLink = selector.clone();\n\t\t\t\t\t\t\t\tselectorVisited = selector.clone();\n\n\t\t\t\t\t\t\t\t// update the matching clone values\n\t\t\t\t\t\t\t\tselectorLink.nodes[nodeIndex].value = ':link';\n\t\t\t\t\t\t\t\tselectorVisited.nodes[nodeIndex].value = ':visited';\n\n\t\t\t\t\t\t\t\t// replace the selector with the clones and roll back the selector index\n\t\t\t\t\t\t\t\tselectors.nodes.splice(selectorIndex--, 1, selectorLink, selectorVisited);\n\n\t\t\t\t\t\t\t\t// stop updating the selector\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}).processSync(rawSelector);\n\n\t\t\t\tif (updatedSelector !== rawSelector) {\n\t\t\t\t\tif (preserve) {\n\t\t\t\t\t\trule.cloneBefore({\n\t\t\t\t\t\t\tselector: updatedSelector\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\trule.selector = updatedSelector;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t};\n});\n"]},"metadata":{},"sourceType":"script"}