{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeBorder;\n\nvar _postcssValueParser = require('postcss-value-parser'); // border: <line-width> || <line-style> || <color>\n// outline: <outline-color> || <outline-style> || <outline-width>\n\n\nconst borderWidths = ['thin', 'medium', 'thick'];\nconst borderStyles = ['none', 'auto', // only in outline-style\n'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset'];\n\nfunction normalizeBorder(border) {\n  const order = {\n    width: '',\n    style: '',\n    color: ''\n  };\n  border.walk(node => {\n    const {\n      type,\n      value\n    } = node;\n\n    if (type === 'word') {\n      if (~borderStyles.indexOf(value.toLowerCase())) {\n        order.style = value;\n        return false;\n      }\n\n      if (~borderWidths.indexOf(value.toLowerCase()) || (0, _postcssValueParser.unit)(value.toLowerCase())) {\n        if (order.width !== '') {\n          order.width = `${order.width} ${value}`;\n          return false;\n        }\n\n        order.width = value;\n        return false;\n      }\n\n      order.color = value;\n      return false;\n    }\n\n    if (type === 'function') {\n      if (value.toLowerCase() === 'calc') {\n        order.width = (0, _postcssValueParser.stringify)(node);\n      } else {\n        order.color = (0, _postcssValueParser.stringify)(node);\n      }\n\n      return false;\n    }\n  });\n  return `${order.width} ${order.style} ${order.color}`.trim();\n}\n\n;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-ordered-values/dist/rules/border.js"],"names":["Object","defineProperty","exports","value","default","normalizeBorder","_postcssValueParser","require","borderWidths","borderStyles","border","order","width","style","color","walk","node","type","indexOf","toLowerCase","unit","stringify","trim","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,EAAAA,KAAK,EAAE;AADkC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,eAAlB;;AAEA,IAAIC,mBAAmB,GAAGC,OAAO,CAAC,sBAAD,CAAjC,C,CAEA;AACA;;;AAEA,MAAMC,YAAY,GAAG,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,CAArB;AAEA,MAAMC,YAAY,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB;AACtC,QADqB,EACX,QADW,EACD,QADC,EACS,OADT,EACkB,QADlB,EAC4B,QAD5B,EACsC,OADtC,EAC+C,OAD/C,EACwD,QADxD,CAArB;;AAGA,SAASJ,eAAT,CAAyBK,MAAzB,EAAiC;AAC7B,QAAMC,KAAK,GAAG;AAAEC,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,KAAK,EAAE,EAApB;AAAwBC,IAAAA,KAAK,EAAE;AAA/B,GAAd;AAEAJ,EAAAA,MAAM,CAACK,IAAP,CAAYC,IAAI,IAAI;AAChB,UAAM;AAAEC,MAAAA,IAAF;AAAQd,MAAAA;AAAR,QAAkBa,IAAxB;;AACA,QAAIC,IAAI,KAAK,MAAb,EAAqB;AACjB,UAAI,CAACR,YAAY,CAACS,OAAb,CAAqBf,KAAK,CAACgB,WAAN,EAArB,CAAL,EAAgD;AAC5CR,QAAAA,KAAK,CAACE,KAAN,GAAcV,KAAd;AACA,eAAO,KAAP;AACH;;AACD,UAAI,CAACK,YAAY,CAACU,OAAb,CAAqBf,KAAK,CAACgB,WAAN,EAArB,CAAD,IAA8C,CAAC,GAAGb,mBAAmB,CAACc,IAAxB,EAA8BjB,KAAK,CAACgB,WAAN,EAA9B,CAAlD,EAAsG;AAClG,YAAIR,KAAK,CAACC,KAAN,KAAgB,EAApB,EAAwB;AACpBD,UAAAA,KAAK,CAACC,KAAN,GAAe,GAAED,KAAK,CAACC,KAAM,IAAGT,KAAM,EAAtC;AACA,iBAAO,KAAP;AACH;;AACDQ,QAAAA,KAAK,CAACC,KAAN,GAAcT,KAAd;AACA,eAAO,KAAP;AACH;;AACDQ,MAAAA,KAAK,CAACG,KAAN,GAAcX,KAAd;AACA,aAAO,KAAP;AACH;;AACD,QAAIc,IAAI,KAAK,UAAb,EAAyB;AACrB,UAAId,KAAK,CAACgB,WAAN,OAAwB,MAA5B,EAAoC;AAChCR,QAAAA,KAAK,CAACC,KAAN,GAAc,CAAC,GAAGN,mBAAmB,CAACe,SAAxB,EAAmCL,IAAnC,CAAd;AACH,OAFD,MAEO;AACHL,QAAAA,KAAK,CAACG,KAAN,GAAc,CAAC,GAAGR,mBAAmB,CAACe,SAAxB,EAAmCL,IAAnC,CAAd;AACH;;AACD,aAAO,KAAP;AACH;AACJ,GA1BD;AA4BA,SAAQ,GAAEL,KAAK,CAACC,KAAM,IAAGD,KAAK,CAACE,KAAM,IAAGF,KAAK,CAACG,KAAM,EAA7C,CAA+CQ,IAA/C,EAAP;AACH;;AAAA;AACDC,MAAM,CAACrB,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = normalizeBorder;\n\nvar _postcssValueParser = require('postcss-value-parser');\n\n// border: <line-width> || <line-style> || <color>\n// outline: <outline-color> || <outline-style> || <outline-width>\n\nconst borderWidths = ['thin', 'medium', 'thick'];\n\nconst borderStyles = ['none', 'auto', // only in outline-style\n'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset'];\n\nfunction normalizeBorder(border) {\n    const order = { width: '', style: '', color: '' };\n\n    border.walk(node => {\n        const { type, value } = node;\n        if (type === 'word') {\n            if (~borderStyles.indexOf(value.toLowerCase())) {\n                order.style = value;\n                return false;\n            }\n            if (~borderWidths.indexOf(value.toLowerCase()) || (0, _postcssValueParser.unit)(value.toLowerCase())) {\n                if (order.width !== '') {\n                    order.width = `${order.width} ${value}`;\n                    return false;\n                }\n                order.width = value;\n                return false;\n            }\n            order.color = value;\n            return false;\n        }\n        if (type === 'function') {\n            if (value.toLowerCase() === 'calc') {\n                order.width = (0, _postcssValueParser.stringify)(node);\n            } else {\n                order.color = (0, _postcssValueParser.stringify)(node);\n            }\n            return false;\n        }\n    });\n\n    return `${order.width} ${order.style} ${order.color}`.trim();\n};\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}