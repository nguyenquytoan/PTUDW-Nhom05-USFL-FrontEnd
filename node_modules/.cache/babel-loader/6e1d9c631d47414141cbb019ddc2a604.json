{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst path = require('path');\n\nconst cdnUtils = require('../lib/cdn-utils');\n\nconst checkForDeprecatedOptions = require('../lib/check-for-deprecated-options');\n\nconst copyWorkboxLibraries = require('../lib/copy-workbox-libraries');\n\nconst generateSWSchema = require('./options/generate-sw-schema');\n\nconst getFileManifestEntries = require('../lib/get-file-manifest-entries');\n\nconst validate = require('./options/validate');\n\nconst writeServiceWorkerUsingDefaultTemplate = require('../lib/write-sw-using-default-template');\n/**\n * This method creates a list of URLs to precache, referred to as a \"precache\n * manifest\", based on the options you provide.\n *\n * It also takes in additional options that configures the service worker's\n * behavior, like any `runtimeCaching` rules it should use.\n *\n * Based on the precache manifest and the additional configuration, it writes\n * a ready-to-use service worker file to disk at `swDest`.\n *\n * @param {Object} config Please refer to the\n * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-build#full_generatesw_config).\n * @return {Promise<{count: number, size: number, warnings: Array<string>}>}\n * A promise that resolves once the service worker file has been written to\n * `swDest`. The `size` property contains the aggregate size of all the\n * precached entries, in bytes, and the `count` property contains the total\n * number of precached entries. Any non-fatal warning messages will be returned\n * via `warnings`.\n *\n * @memberof module:workbox-build\n */\n\n\nasync function generateSW(config) {\n  // This check needs to be done before validation, since the deprecated options\n  // will be renamed.\n  const deprecationWarnings = checkForDeprecatedOptions(config);\n  const options = validate(config, generateSWSchema);\n  const destDirectory = path.dirname(options.swDest); // Do nothing if importWorkboxFrom is set to 'disabled'. Otherwise, check:\n\n  if (options.importWorkboxFrom === 'cdn') {\n    const cdnURL = cdnUtils.getModuleURL('workbox-sw');\n    options.workboxSWImport = cdnURL;\n  } else if (options.importWorkboxFrom === 'local') {\n    // Copy over the dev + prod version of all of the core libraries.\n    const workboxDirectoryName = await copyWorkboxLibraries(destDirectory); // The Workbox library files should not be precached, since they're cached\n    // automatically by virtue of being used with importScripts().\n\n    options.globIgnores = [`**/${workboxDirectoryName}/*.+(js|mjs)*`].concat(options.globIgnores || []);\n\n    const workboxSWPkg = require(`workbox-sw/package.json`);\n\n    const workboxSWFilename = path.basename(workboxSWPkg.main);\n    options.workboxSWImport = `${workboxDirectoryName}/${workboxSWFilename}`;\n    options.modulePathPrefix = workboxDirectoryName;\n  }\n\n  const {\n    count,\n    size,\n    manifestEntries,\n    warnings\n  } = await getFileManifestEntries(options);\n  await writeServiceWorkerUsingDefaultTemplate(Object.assign({\n    manifestEntries\n  }, options)); // Add in any deprecation warnings.\n\n  warnings.push(...deprecationWarnings);\n  return {\n    count,\n    size,\n    warnings\n  };\n}\n\nmodule.exports = generateSW;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-build/src/entry-points/generate-sw.js"],"names":["path","require","cdnUtils","checkForDeprecatedOptions","copyWorkboxLibraries","generateSWSchema","getFileManifestEntries","validate","writeServiceWorkerUsingDefaultTemplate","generateSW","config","deprecationWarnings","options","destDirectory","dirname","swDest","importWorkboxFrom","cdnURL","getModuleURL","workboxSWImport","workboxDirectoryName","globIgnores","concat","workboxSWPkg","workboxSWFilename","basename","main","modulePathPrefix","count","size","manifestEntries","warnings","Object","assign","push","module","exports"],"mappings":"AAAA;;;;;;;AAQA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,kBAAD,CAAxB;;AACA,MAAME,yBAAyB,GAC3BF,OAAO,CAAC,qCAAD,CADX;;AAEA,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,+BAAD,CAApC;;AACA,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,8BAAD,CAAhC;;AACA,MAAMK,sBAAsB,GAAGL,OAAO,CAAC,kCAAD,CAAtC;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAMO,sCAAsC,GAC1CP,OAAO,CAAC,wCAAD,CADT;AAGA;;;;;;;;;;;;;;;;;;;;;;;AAqBA,eAAeQ,UAAf,CAA0BC,MAA1B,EAAkC;AAChC;AACA;AACA,QAAMC,mBAAmB,GAAGR,yBAAyB,CAACO,MAAD,CAArD;AAEA,QAAME,OAAO,GAAGL,QAAQ,CAACG,MAAD,EAASL,gBAAT,CAAxB;AAEA,QAAMQ,aAAa,GAAGb,IAAI,CAACc,OAAL,CAAaF,OAAO,CAACG,MAArB,CAAtB,CAPgC,CAShC;;AACA,MAAIH,OAAO,CAACI,iBAAR,KAA8B,KAAlC,EAAyC;AACvC,UAAMC,MAAM,GAAGf,QAAQ,CAACgB,YAAT,CAAsB,YAAtB,CAAf;AACAN,IAAAA,OAAO,CAACO,eAAR,GAA0BF,MAA1B;AACD,GAHD,MAGO,IAAIL,OAAO,CAACI,iBAAR,KAA8B,OAAlC,EAA2C;AAChD;AACA,UAAMI,oBAAoB,GAAG,MAAMhB,oBAAoB,CAACS,aAAD,CAAvD,CAFgD,CAIhD;AACA;;AACAD,IAAAA,OAAO,CAACS,WAAR,GAAsB,CACnB,MAAKD,oBAAqB,eADP,EAEpBE,MAFoB,CAEbV,OAAO,CAACS,WAAR,IAAuB,EAFV,CAAtB;;AAIA,UAAME,YAAY,GAAGtB,OAAO,CAAE,yBAAF,CAA5B;;AACA,UAAMuB,iBAAiB,GAAGxB,IAAI,CAACyB,QAAL,CAAcF,YAAY,CAACG,IAA3B,CAA1B;AAEAd,IAAAA,OAAO,CAACO,eAAR,GAA2B,GAAEC,oBAAqB,IAAGI,iBAAkB,EAAvE;AACAZ,IAAAA,OAAO,CAACe,gBAAR,GAA2BP,oBAA3B;AACD;;AAED,QAAM;AAACQ,IAAAA,KAAD;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,eAAd;AAA+BC,IAAAA;AAA/B,MACJ,MAAMzB,sBAAsB,CAACM,OAAD,CAD9B;AAGA,QAAMJ,sCAAsC,CAACwB,MAAM,CAACC,MAAP,CAAc;AACzDH,IAAAA;AADyD,GAAd,EAE1ClB,OAF0C,CAAD,CAA5C,CAjCgC,CAqChC;;AACAmB,EAAAA,QAAQ,CAACG,IAAT,CAAc,GAAGvB,mBAAjB;AAEA,SAAO;AAACiB,IAAAA,KAAD;AAAQC,IAAAA,IAAR;AAAcE,IAAAA;AAAd,GAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiB3B,UAAjB","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst path = require('path');\n\nconst cdnUtils = require('../lib/cdn-utils');\nconst checkForDeprecatedOptions =\n    require('../lib/check-for-deprecated-options');\nconst copyWorkboxLibraries = require('../lib/copy-workbox-libraries');\nconst generateSWSchema = require('./options/generate-sw-schema');\nconst getFileManifestEntries = require('../lib/get-file-manifest-entries');\nconst validate = require('./options/validate');\nconst writeServiceWorkerUsingDefaultTemplate =\n  require('../lib/write-sw-using-default-template');\n\n/**\n * This method creates a list of URLs to precache, referred to as a \"precache\n * manifest\", based on the options you provide.\n *\n * It also takes in additional options that configures the service worker's\n * behavior, like any `runtimeCaching` rules it should use.\n *\n * Based on the precache manifest and the additional configuration, it writes\n * a ready-to-use service worker file to disk at `swDest`.\n *\n * @param {Object} config Please refer to the\n * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-build#full_generatesw_config).\n * @return {Promise<{count: number, size: number, warnings: Array<string>}>}\n * A promise that resolves once the service worker file has been written to\n * `swDest`. The `size` property contains the aggregate size of all the\n * precached entries, in bytes, and the `count` property contains the total\n * number of precached entries. Any non-fatal warning messages will be returned\n * via `warnings`.\n *\n * @memberof module:workbox-build\n */\nasync function generateSW(config) {\n  // This check needs to be done before validation, since the deprecated options\n  // will be renamed.\n  const deprecationWarnings = checkForDeprecatedOptions(config);\n\n  const options = validate(config, generateSWSchema);\n\n  const destDirectory = path.dirname(options.swDest);\n\n  // Do nothing if importWorkboxFrom is set to 'disabled'. Otherwise, check:\n  if (options.importWorkboxFrom === 'cdn') {\n    const cdnURL = cdnUtils.getModuleURL('workbox-sw');\n    options.workboxSWImport = cdnURL;\n  } else if (options.importWorkboxFrom === 'local') {\n    // Copy over the dev + prod version of all of the core libraries.\n    const workboxDirectoryName = await copyWorkboxLibraries(destDirectory);\n\n    // The Workbox library files should not be precached, since they're cached\n    // automatically by virtue of being used with importScripts().\n    options.globIgnores = [\n      `**/${workboxDirectoryName}/*.+(js|mjs)*`,\n    ].concat(options.globIgnores || []);\n\n    const workboxSWPkg = require(`workbox-sw/package.json`);\n    const workboxSWFilename = path.basename(workboxSWPkg.main);\n\n    options.workboxSWImport = `${workboxDirectoryName}/${workboxSWFilename}`;\n    options.modulePathPrefix = workboxDirectoryName;\n  }\n\n  const {count, size, manifestEntries, warnings} =\n    await getFileManifestEntries(options);\n\n  await writeServiceWorkerUsingDefaultTemplate(Object.assign({\n    manifestEntries,\n  }, options));\n\n  // Add in any deprecation warnings.\n  warnings.push(...deprecationWarnings);\n\n  return {count, size, warnings};\n}\n\nmodule.exports = generateSW;\n"]},"metadata":{},"sourceType":"script"}