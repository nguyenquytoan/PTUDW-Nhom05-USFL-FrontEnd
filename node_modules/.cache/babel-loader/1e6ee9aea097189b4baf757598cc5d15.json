{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of certain node types\n * @author Burak Yigit Kaya\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow specified syntax\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-restricted-syntax\"\n    },\n    schema: {\n      type: \"array\",\n      items: {\n        oneOf: [{\n          type: \"string\"\n        }, {\n          type: \"object\",\n          properties: {\n            selector: {\n              type: \"string\"\n            },\n            message: {\n              type: \"string\"\n            }\n          },\n          required: [\"selector\"],\n          additionalProperties: false\n        }]\n      },\n      uniqueItems: true,\n      minItems: 0\n    }\n  },\n\n  create(context) {\n    return context.options.reduce((result, selectorOrObject) => {\n      const isStringFormat = typeof selectorOrObject === \"string\";\n      const hasCustomMessage = !isStringFormat && Boolean(selectorOrObject.message);\n      const selector = isStringFormat ? selectorOrObject : selectorOrObject.selector;\n      const message = hasCustomMessage ? selectorOrObject.message : \"Using '{{selector}}' is not allowed.\";\n      return Object.assign(result, {\n        [selector](node) {\n          context.report({\n            node,\n            message,\n            data: hasCustomMessage ? {} : {\n              selector\n            }\n          });\n        }\n\n      });\n    }, {});\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-restricted-syntax.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","items","oneOf","properties","selector","message","required","additionalProperties","uniqueItems","minItems","create","context","options","reduce","result","selectorOrObject","isStringFormat","hasCustomMessage","Boolean","Object","assign","node","report","data"],"mappings":"AAAA;;;;AAIA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,2BADX;AAEFC,MAAAA,QAAQ,EAAE,kBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE;AACJN,MAAAA,IAAI,EAAE,OADF;AAEJO,MAAAA,KAAK,EAAE;AACHC,QAAAA,KAAK,EAAE,CACH;AACIR,UAAAA,IAAI,EAAE;AADV,SADG,EAIH;AACIA,UAAAA,IAAI,EAAE,QADV;AAEIS,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AAAEV,cAAAA,IAAI,EAAE;AAAR,aADF;AAERW,YAAAA,OAAO,EAAE;AAAEX,cAAAA,IAAI,EAAE;AAAR;AAFD,WAFhB;AAMIY,UAAAA,QAAQ,EAAE,CAAC,UAAD,CANd;AAOIC,UAAAA,oBAAoB,EAAE;AAP1B,SAJG;AADJ,OAFH;AAkBJC,MAAAA,WAAW,EAAE,IAlBT;AAmBJC,MAAAA,QAAQ,EAAE;AAnBN;AAVN,GADO;;AAkCbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,WAAOA,OAAO,CAACC,OAAR,CAAgBC,MAAhB,CAAuB,CAACC,MAAD,EAASC,gBAAT,KAA8B;AACxD,YAAMC,cAAc,GAAI,OAAOD,gBAAP,KAA4B,QAApD;AACA,YAAME,gBAAgB,GAAG,CAACD,cAAD,IAAmBE,OAAO,CAACH,gBAAgB,CAACV,OAAlB,CAAnD;AAEA,YAAMD,QAAQ,GAAGY,cAAc,GAAGD,gBAAH,GAAsBA,gBAAgB,CAACX,QAAtE;AACA,YAAMC,OAAO,GAAGY,gBAAgB,GAAGF,gBAAgB,CAACV,OAApB,GAA8B,sCAA9D;AAEA,aAAOc,MAAM,CAACC,MAAP,CAAcN,MAAd,EAAsB;AACzB,SAACV,QAAD,EAAWiB,IAAX,EAAiB;AACbV,UAAAA,OAAO,CAACW,MAAR,CAAe;AACXD,YAAAA,IADW;AAEXhB,YAAAA,OAFW;AAGXkB,YAAAA,IAAI,EAAEN,gBAAgB,GAAG,EAAH,GAAQ;AAAEb,cAAAA;AAAF;AAHnB,WAAf;AAKH;;AAPwB,OAAtB,CAAP;AASH,KAhBM,EAgBJ,EAhBI,CAAP;AAkBH;;AArDY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to flag use of certain node types\n * @author Burak Yigit Kaya\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow specified syntax\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-restricted-syntax\"\n        },\n\n        schema: {\n            type: \"array\",\n            items: {\n                oneOf: [\n                    {\n                        type: \"string\"\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            selector: { type: \"string\" },\n                            message: { type: \"string\" }\n                        },\n                        required: [\"selector\"],\n                        additionalProperties: false\n                    }\n                ]\n            },\n            uniqueItems: true,\n            minItems: 0\n        }\n    },\n\n    create(context) {\n        return context.options.reduce((result, selectorOrObject) => {\n            const isStringFormat = (typeof selectorOrObject === \"string\");\n            const hasCustomMessage = !isStringFormat && Boolean(selectorOrObject.message);\n\n            const selector = isStringFormat ? selectorOrObject : selectorOrObject.selector;\n            const message = hasCustomMessage ? selectorOrObject.message : \"Using '{{selector}}' is not allowed.\";\n\n            return Object.assign(result, {\n                [selector](node) {\n                    context.report({\n                        node,\n                        message,\n                        data: hasCustomMessage ? {} : { selector }\n                    });\n                }\n            });\n        }, {});\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}