{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.mjs';\nconst SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof module:workbox-precaching\n */\n\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\n  const cacheNames = await caches.keys();\n  const cacheNamesToDelete = cacheNames.filter(cacheName => {\n    return cacheName.includes(substringToFind) && cacheName.includes(self.registration.scope) && cacheName !== currentPrecacheName;\n  });\n  await Promise.all(cacheNamesToDelete.map(cacheName => caches.delete(cacheName)));\n  return cacheNamesToDelete;\n};\n\nexport { deleteOutdatedCaches };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-precaching/utils/deleteOutdatedCaches.mjs"],"names":["SUBSTRING_TO_FIND","deleteOutdatedCaches","currentPrecacheName","substringToFind","cacheNames","caches","keys","cacheNamesToDelete","filter","cacheName","includes","self","registration","scope","Promise","all","map","delete"],"mappings":"AAAA;;;;;;;AAQA,OAAO,iBAAP;AAEA,MAAMA,iBAAiB,GAAG,YAA1B;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,MAAMC,oBAAoB,GAAG,OAC3BC,mBAD2B,EAE3BC,eAAe,GAAGH,iBAFS,KAEa;AACxC,QAAMI,UAAU,GAAG,MAAMC,MAAM,CAACC,IAAP,EAAzB;AAEA,QAAMC,kBAAkB,GAAGH,UAAU,CAACI,MAAX,CAAmBC,SAAD,IAAe;AAC1D,WAAOA,SAAS,CAACC,QAAV,CAAmBP,eAAnB,KACAM,SAAS,CAACC,QAAV,CAAmBC,IAAI,CAACC,YAAL,CAAkBC,KAArC,CADA,IAEAJ,SAAS,KAAKP,mBAFrB;AAGD,GAJ0B,CAA3B;AAMA,QAAMY,OAAO,CAACC,GAAR,CACFR,kBAAkB,CAACS,GAAnB,CAAwBP,SAAD,IAAeJ,MAAM,CAACY,MAAP,CAAcR,SAAd,CAAtC,CADE,CAAN;AAGA,SAAOF,kBAAP;AACD,CAfD;;AAiBA,SAAQN,oBAAR","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\nconst SUBSTRING_TO_FIND = '-precache-';\n\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nconst deleteOutdatedCaches = async (\n  currentPrecacheName,\n  substringToFind = SUBSTRING_TO_FIND) => {\n  const cacheNames = await caches.keys();\n\n  const cacheNamesToDelete = cacheNames.filter((cacheName) => {\n    return cacheName.includes(substringToFind) &&\n           cacheName.includes(self.registration.scope) &&\n           cacheName !== currentPrecacheName;\n  });\n\n  await Promise.all(\n      cacheNamesToDelete.map((cacheName) => caches.delete(cacheName)));\n\n  return cacheNamesToDelete;\n};\n\nexport {deleteOutdatedCaches};\n\n"]},"metadata":{},"sourceType":"module"}