{"ast":null,"code":"const Node = require('./node');\n\nclass Container extends Node {\n  walk(callback) {\n    return this.each((child, i) => {\n      let result = callback(child, i);\n\n      if (result !== false && child.walk) {\n        result = child.walk(callback);\n      }\n\n      return result;\n    });\n  }\n\n  walkType(type, callback) {\n    if (!type || !callback) {\n      throw new Error('Parameters {type} and {callback} are required.');\n    } // allow users to pass a constructor, or node type string; eg. Word.\n\n\n    const isTypeCallable = typeof type === 'function';\n    return this.walk((node, index) => {\n      if (isTypeCallable && node instanceof type || !isTypeCallable && node.type === type) {\n        return callback.call(this, node, index);\n      }\n    });\n  }\n\n}\n\nContainer.registerWalker = constructor => {\n  let walkerName = `walk${constructor.name}`; // plural sugar\n\n  if (walkerName.lastIndexOf('s') !== walkerName.length - 1) {\n    walkerName += 's';\n  }\n\n  if (Container.prototype[walkerName]) {\n    return;\n  } // we need access to `this` so we can't use an arrow function\n\n\n  Container.prototype[walkerName] = function (callback) {\n    return this.walkType(constructor, callback);\n  };\n};\n\nmodule.exports = Container;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-values-parser/old-lib/container.js"],"names":["Node","require","Container","walk","callback","each","child","i","result","walkType","type","Error","isTypeCallable","node","index","call","registerWalker","constructor","walkerName","name","lastIndexOf","length","prototype","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,MAAMC,SAAN,SAAwBF,IAAxB,CAA6B;AAC3BG,EAAAA,IAAI,CAACC,QAAD,EAAW;AACb,WAAO,KAAKC,IAAL,CAAU,CAACC,KAAD,EAAQC,CAAR,KAAc;AAC7B,UAAIC,MAAM,GAAGJ,QAAQ,CAACE,KAAD,EAAQC,CAAR,CAArB;;AACA,UAAIC,MAAM,KAAK,KAAX,IAAoBF,KAAK,CAACH,IAA9B,EAAoC;AAClCK,QAAAA,MAAM,GAAGF,KAAK,CAACH,IAAN,CAAWC,QAAX,CAAT;AACD;;AACD,aAAOI,MAAP;AACD,KANM,CAAP;AAOD;;AAEDC,EAAAA,QAAQ,CAACC,IAAD,EAAON,QAAP,EAAiB;AACvB,QAAI,CAACM,IAAD,IAAS,CAACN,QAAd,EAAwB;AACtB,YAAM,IAAIO,KAAJ,CAAU,gDAAV,CAAN;AACD,KAHsB,CAKvB;;;AACA,UAAMC,cAAc,GAAG,OAAOF,IAAP,KAAgB,UAAvC;AAEA,WAAO,KAAKP,IAAL,CAAU,CAACU,IAAD,EAAOC,KAAP,KAAiB;AAChC,UAAKF,cAAc,IAAIC,IAAI,YAAYH,IAAnC,IAA6C,CAACE,cAAD,IAAmBC,IAAI,CAACH,IAAL,KAAcA,IAAlF,EAAyF;AACvF,eAAON,QAAQ,CAACW,IAAT,CAAc,IAAd,EAAoBF,IAApB,EAA0BC,KAA1B,CAAP;AACD;AACF,KAJM,CAAP;AAKD;;AAxB0B;;AA2B7BZ,SAAS,CAACc,cAAV,GAA4BC,WAAD,IAAiB;AAC1C,MAAIC,UAAU,GAAI,OAAMD,WAAW,CAACE,IAAK,EAAzC,CAD0C,CAG1C;;AACA,MAAID,UAAU,CAACE,WAAX,CAAuB,GAAvB,MAAgCF,UAAU,CAACG,MAAX,GAAoB,CAAxD,EAA2D;AACzDH,IAAAA,UAAU,IAAI,GAAd;AACD;;AAED,MAAIhB,SAAS,CAACoB,SAAV,CAAoBJ,UAApB,CAAJ,EAAqC;AACnC;AACD,GAVyC,CAY1C;;;AACAhB,EAAAA,SAAS,CAACoB,SAAV,CAAoBJ,UAApB,IAAkC,UAASd,QAAT,EAAmB;AACnD,WAAO,KAAKK,QAAL,CAAcQ,WAAd,EAA2Bb,QAA3B,CAAP;AACD,GAFD;AAGD,CAhBD;;AAkBAmB,MAAM,CAACC,OAAP,GAAiBtB,SAAjB","sourcesContent":["const Node = require('./node');\n\nclass Container extends Node {\n  walk(callback) {\n    return this.each((child, i) => {\n      let result = callback(child, i);\n      if (result !== false && child.walk) {\n        result = child.walk(callback);\n      }\n      return result;\n    });\n  }\n\n  walkType(type, callback) {\n    if (!type || !callback) {\n      throw new Error('Parameters {type} and {callback} are required.');\n    }\n\n    // allow users to pass a constructor, or node type string; eg. Word.\n    const isTypeCallable = typeof type === 'function';\n\n    return this.walk((node, index) => {\n      if ((isTypeCallable && node instanceof type) || (!isTypeCallable && node.type === type)) {\n        return callback.call(this, node, index);\n      }\n    });\n  }\n}\n\nContainer.registerWalker = (constructor) => {\n  let walkerName = `walk${constructor.name}`;\n\n  // plural sugar\n  if (walkerName.lastIndexOf('s') !== walkerName.length - 1) {\n    walkerName += 's';\n  }\n\n  if (Container.prototype[walkerName]) {\n    return;\n  }\n\n  // we need access to `this` so we can't use an arrow function\n  Container.prototype[walkerName] = function(callback) {\n    return this.walkType(constructor, callback);\n  };\n};\n\nmodule.exports = Container;\n"]},"metadata":{},"sourceType":"script"}