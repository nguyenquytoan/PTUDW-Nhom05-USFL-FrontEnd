{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nclass InlineChunkHtmlPlugin {\n  constructor(htmlWebpackPlugin, tests) {\n    this.htmlWebpackPlugin = htmlWebpackPlugin;\n    this.tests = tests;\n  }\n\n  getInlinedTag(publicPath, assets, tag) {\n    if (tag.tagName !== 'script' || !(tag.attributes && tag.attributes.src)) {\n      return tag;\n    }\n\n    const scriptName = publicPath ? tag.attributes.src.replace(publicPath, '') : tag.attributes.src;\n\n    if (!this.tests.some(test => scriptName.match(test))) {\n      return tag;\n    }\n\n    const asset = assets[scriptName];\n\n    if (asset == null) {\n      return tag;\n    }\n\n    return {\n      tagName: 'script',\n      innerHTML: asset.source(),\n      closeTag: true\n    };\n  }\n\n  apply(compiler) {\n    let publicPath = compiler.options.output.publicPath || '';\n\n    if (publicPath && !publicPath.endsWith('/')) {\n      publicPath += '/';\n    }\n\n    compiler.hooks.compilation.tap('InlineChunkHtmlPlugin', compilation => {\n      const tagFunction = tag => this.getInlinedTag(publicPath, compilation.assets, tag);\n\n      const hooks = this.htmlWebpackPlugin.getHooks(compilation);\n      hooks.alterAssetTagGroups.tap('InlineChunkHtmlPlugin', assets => {\n        assets.headTags = assets.headTags.map(tagFunction);\n        assets.bodyTags = assets.bodyTags.map(tagFunction);\n      }); // Still emit the runtime chunk for users who do not use our generated\n      // index.html file.\n      // hooks.afterEmit.tap('InlineChunkHtmlPlugin', () => {\n      //   Object.keys(compilation.assets).forEach(assetName => {\n      //     if (this.tests.some(test => assetName.match(test))) {\n      //       delete compilation.assets[assetName];\n      //     }\n      //   });\n      // });\n    });\n  }\n\n}\n\nmodule.exports = InlineChunkHtmlPlugin;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-dev-utils/InlineChunkHtmlPlugin.js"],"names":["InlineChunkHtmlPlugin","constructor","htmlWebpackPlugin","tests","getInlinedTag","publicPath","assets","tag","tagName","attributes","src","scriptName","replace","some","test","match","asset","innerHTML","source","closeTag","apply","compiler","options","output","endsWith","hooks","compilation","tap","tagFunction","getHooks","alterAssetTagGroups","headTags","map","bodyTags","module","exports"],"mappings":"AAAA;;;;;;AAOA;;AAEA,MAAMA,qBAAN,CAA4B;AAC1BC,EAAAA,WAAW,CAACC,iBAAD,EAAoBC,KAApB,EAA2B;AACpC,SAAKD,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACD;;AAEDC,EAAAA,aAAa,CAACC,UAAD,EAAaC,MAAb,EAAqBC,GAArB,EAA0B;AACrC,QAAIA,GAAG,CAACC,OAAJ,KAAgB,QAAhB,IAA4B,EAAED,GAAG,CAACE,UAAJ,IAAkBF,GAAG,CAACE,UAAJ,CAAeC,GAAnC,CAAhC,EAAyE;AACvE,aAAOH,GAAP;AACD;;AACD,UAAMI,UAAU,GAAGN,UAAU,GACzBE,GAAG,CAACE,UAAJ,CAAeC,GAAf,CAAmBE,OAAnB,CAA2BP,UAA3B,EAAuC,EAAvC,CADyB,GAEzBE,GAAG,CAACE,UAAJ,CAAeC,GAFnB;;AAGA,QAAI,CAAC,KAAKP,KAAL,CAAWU,IAAX,CAAgBC,IAAI,IAAIH,UAAU,CAACI,KAAX,CAAiBD,IAAjB,CAAxB,CAAL,EAAsD;AACpD,aAAOP,GAAP;AACD;;AACD,UAAMS,KAAK,GAAGV,MAAM,CAACK,UAAD,CAApB;;AACA,QAAIK,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAOT,GAAP;AACD;;AACD,WAAO;AAAEC,MAAAA,OAAO,EAAE,QAAX;AAAqBS,MAAAA,SAAS,EAAED,KAAK,CAACE,MAAN,EAAhC;AAAgDC,MAAAA,QAAQ,EAAE;AAA1D,KAAP;AACD;;AAEDC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACd,QAAIhB,UAAU,GAAGgB,QAAQ,CAACC,OAAT,CAAiBC,MAAjB,CAAwBlB,UAAxB,IAAsC,EAAvD;;AACA,QAAIA,UAAU,IAAI,CAACA,UAAU,CAACmB,QAAX,CAAoB,GAApB,CAAnB,EAA6C;AAC3CnB,MAAAA,UAAU,IAAI,GAAd;AACD;;AAEDgB,IAAAA,QAAQ,CAACI,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,uBAA/B,EAAwDD,WAAW,IAAI;AACrE,YAAME,WAAW,GAAGrB,GAAG,IACrB,KAAKH,aAAL,CAAmBC,UAAnB,EAA+BqB,WAAW,CAACpB,MAA3C,EAAmDC,GAAnD,CADF;;AAGA,YAAMkB,KAAK,GAAG,KAAKvB,iBAAL,CAAuB2B,QAAvB,CAAgCH,WAAhC,CAAd;AACAD,MAAAA,KAAK,CAACK,mBAAN,CAA0BH,GAA1B,CAA8B,uBAA9B,EAAuDrB,MAAM,IAAI;AAC/DA,QAAAA,MAAM,CAACyB,QAAP,GAAkBzB,MAAM,CAACyB,QAAP,CAAgBC,GAAhB,CAAoBJ,WAApB,CAAlB;AACAtB,QAAAA,MAAM,CAAC2B,QAAP,GAAkB3B,MAAM,CAAC2B,QAAP,CAAgBD,GAAhB,CAAoBJ,WAApB,CAAlB;AACD,OAHD,EALqE,CAUrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAnBD;AAoBD;;AAjDyB;;AAoD5BM,MAAM,CAACC,OAAP,GAAiBnC,qBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nclass InlineChunkHtmlPlugin {\n  constructor(htmlWebpackPlugin, tests) {\n    this.htmlWebpackPlugin = htmlWebpackPlugin;\n    this.tests = tests;\n  }\n\n  getInlinedTag(publicPath, assets, tag) {\n    if (tag.tagName !== 'script' || !(tag.attributes && tag.attributes.src)) {\n      return tag;\n    }\n    const scriptName = publicPath\n      ? tag.attributes.src.replace(publicPath, '')\n      : tag.attributes.src;\n    if (!this.tests.some(test => scriptName.match(test))) {\n      return tag;\n    }\n    const asset = assets[scriptName];\n    if (asset == null) {\n      return tag;\n    }\n    return { tagName: 'script', innerHTML: asset.source(), closeTag: true };\n  }\n\n  apply(compiler) {\n    let publicPath = compiler.options.output.publicPath || '';\n    if (publicPath && !publicPath.endsWith('/')) {\n      publicPath += '/';\n    }\n\n    compiler.hooks.compilation.tap('InlineChunkHtmlPlugin', compilation => {\n      const tagFunction = tag =>\n        this.getInlinedTag(publicPath, compilation.assets, tag);\n\n      const hooks = this.htmlWebpackPlugin.getHooks(compilation);\n      hooks.alterAssetTagGroups.tap('InlineChunkHtmlPlugin', assets => {\n        assets.headTags = assets.headTags.map(tagFunction);\n        assets.bodyTags = assets.bodyTags.map(tagFunction);\n      });\n\n      // Still emit the runtime chunk for users who do not use our generated\n      // index.html file.\n      // hooks.afterEmit.tap('InlineChunkHtmlPlugin', () => {\n      //   Object.keys(compilation.assets).forEach(assetName => {\n      //     if (this.tests.some(test => assetName.match(test))) {\n      //       delete compilation.assets[assetName];\n      //     }\n      //   });\n      // });\n    });\n  }\n}\n\nmodule.exports = InlineChunkHtmlPlugin;\n"]},"metadata":{},"sourceType":"script"}