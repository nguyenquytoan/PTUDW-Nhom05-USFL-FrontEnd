{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _process = _interopRequireDefault(require(\"process\"));\n\nvar _path = require(\"path\");\n\nvar _fsExtra = require(\"fs-extra\");\n\nvar _loaderUtils = require(\"loader-utils\");\n\nvar _ESLintError = _interopRequireDefault(require(\"./ESLintError\"));\n\nvar _createEngine = _interopRequireDefault(require(\"./createEngine\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nclass Linter {\n  constructor(loaderContext, options) {\n    this.loaderContext = loaderContext;\n    this.options = options;\n    this.resourcePath = this.parseResourcePath();\n    const {\n      CLIEngine,\n      engine\n    } = (0, _createEngine.default)(options);\n    this.CLIEngine = CLIEngine;\n    this.engine = engine;\n  }\n\n  parseResourcePath() {\n    const cwd = _process.default.cwd();\n\n    let {\n      resourcePath\n    } = this.loaderContext; // remove cwd from resource path in case webpack has been started from project\n    // root, to allow having relative paths in .eslintignore\n    // istanbul ignore next\n\n    if (resourcePath.indexOf(cwd) === 0) {\n      resourcePath = resourcePath.substr(cwd.length + (cwd === '/' ? 0 : 1));\n    }\n\n    return resourcePath;\n  }\n\n  lint(content) {\n    try {\n      return this.engine.executeOnText(content, this.resourcePath, true);\n    } catch (_) {\n      this.getEmitter(false)(_);\n      return {\n        src: content\n      };\n    }\n  }\n\n  printOutput(data) {\n    const {\n      options\n    } = this; // skip ignored file warning\n\n    if (this.constructor.skipIgnoredFileWarning(data)) {\n      return;\n    } // quiet filter done now\n    // eslint allow rules to be specified in the input between comments\n    // so we can found warnings defined in the input itself\n\n\n    const res = this.filter(data); // if enabled, use eslint auto-fixing where possible\n\n    if (options.fix) {\n      this.autoFix(res);\n    } // skip if no errors or warnings\n\n\n    if (res.errorCount < 1 && res.warningCount < 1) {\n      return;\n    }\n\n    const results = this.parseResults(res); // Do not analyze if there are no results or eslint config\n\n    if (!results) {\n      return;\n    }\n\n    const messages = options.formatter(results);\n    this.reportOutput(results, messages);\n    this.failOnErrorOrWarning(res, messages);\n    const emitter = this.getEmitter(res);\n    emitter(new _ESLintError.default(messages));\n  }\n\n  static skipIgnoredFileWarning(res) {\n    return res && res.warningCount === 1 && res.results && res.results[0] && res.results[0].messages[0] && res.results[0].messages[0].message && res.results[0].messages[0].message.indexOf('ignore') > 1;\n  }\n\n  filter(data) {\n    const res = data; // quiet filter done now\n    // eslint allow rules to be specified in the input between comments\n    // so we can found warnings defined in the input itself\n\n    if (this.options.quiet && res && res.warningCount && res.results && res.results[0]) {\n      res.warningCount = 0;\n      res.results[0].warningCount = 0;\n      res.results[0].messages = res.results[0].messages.filter(message => message.severity !== 1);\n    }\n\n    return res;\n  }\n\n  autoFix(res) {\n    if (res && res.results && res.results[0] && (res.results[0].output !== res.src || res.results[0].fixableErrorCount > 0 || res.results[0].fixableWarningCount > 0)) {\n      this.CLIEngine.outputFixes(res);\n    }\n  }\n\n  parseResults({\n    results\n  }) {\n    // add filename for each results so formatter can have relevant filename\n    if (results) {\n      results.forEach(r => {\n        // eslint-disable-next-line no-param-reassign\n        r.filePath = this.loaderContext.resourcePath;\n      });\n    }\n\n    return results;\n  }\n\n  reportOutput(results, messages) {\n    const {\n      outputReport\n    } = this.options;\n\n    if (!outputReport || !outputReport.filePath) {\n      return;\n    }\n\n    let content = messages; // if a different formatter is passed in as an option use that\n\n    if (outputReport.formatter) {\n      content = outputReport.formatter(results);\n    }\n\n    let filePath = (0, _loaderUtils.interpolateName)(this.loaderContext, outputReport.filePath, {\n      content\n    });\n\n    if (!(0, _path.isAbsolute)(filePath)) {\n      filePath = (0, _path.join)( // eslint-disable-next-line no-underscore-dangle\n      this.loaderContext._compiler.options.output.path, filePath);\n    }\n\n    (0, _fsExtra.ensureFileSync)(filePath);\n    (0, _fsExtra.writeFileSync)(filePath, content);\n  }\n\n  failOnErrorOrWarning({\n    errorCount,\n    warningCount\n  }, messages) {\n    const {\n      failOnError,\n      failOnWarning\n    } = this.options;\n\n    if (failOnError && errorCount) {\n      throw new _ESLintError.default(`Module failed because of a eslint error.\\n${messages}`);\n    }\n\n    if (failOnWarning && warningCount) {\n      throw new _ESLintError.default(`Module failed because of a eslint warning.\\n${messages}`);\n    }\n  }\n\n  getEmitter({\n    errorCount\n  }) {\n    const {\n      options,\n      loaderContext\n    } = this; // default behavior: emit error only if we have errors\n\n    let emitter = errorCount ? loaderContext.emitError : loaderContext.emitWarning; // force emitError or emitWarning if user want this\n\n    if (options.emitError) {\n      emitter = loaderContext.emitError;\n    } else if (options.emitWarning) {\n      emitter = loaderContext.emitWarning;\n    }\n\n    return emitter;\n  }\n\n}\n\nexports.default = Linter;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint-loader/dist/Linter.js"],"names":["Object","defineProperty","exports","value","default","_process","_interopRequireDefault","require","_path","_fsExtra","_loaderUtils","_ESLintError","_createEngine","obj","__esModule","Linter","constructor","loaderContext","options","resourcePath","parseResourcePath","CLIEngine","engine","cwd","indexOf","substr","length","lint","content","executeOnText","_","getEmitter","src","printOutput","data","skipIgnoredFileWarning","res","filter","fix","autoFix","errorCount","warningCount","results","parseResults","messages","formatter","reportOutput","failOnErrorOrWarning","emitter","message","quiet","severity","output","fixableErrorCount","fixableWarningCount","outputFixes","forEach","r","filePath","outputReport","interpolateName","isAbsolute","join","_compiler","path","ensureFileSync","writeFileSync","failOnError","failOnWarning","emitError","emitWarning"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _process = _interopRequireDefault(require(\"process\"));\n\nvar _path = require(\"path\");\n\nvar _fsExtra = require(\"fs-extra\");\n\nvar _loaderUtils = require(\"loader-utils\");\n\nvar _ESLintError = _interopRequireDefault(require(\"./ESLintError\"));\n\nvar _createEngine = _interopRequireDefault(require(\"./createEngine\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Linter {\n  constructor(loaderContext, options) {\n    this.loaderContext = loaderContext;\n    this.options = options;\n    this.resourcePath = this.parseResourcePath();\n    const {\n      CLIEngine,\n      engine\n    } = (0, _createEngine.default)(options);\n    this.CLIEngine = CLIEngine;\n    this.engine = engine;\n  }\n\n  parseResourcePath() {\n    const cwd = _process.default.cwd();\n\n    let {\n      resourcePath\n    } = this.loaderContext; // remove cwd from resource path in case webpack has been started from project\n    // root, to allow having relative paths in .eslintignore\n    // istanbul ignore next\n\n    if (resourcePath.indexOf(cwd) === 0) {\n      resourcePath = resourcePath.substr(cwd.length + (cwd === '/' ? 0 : 1));\n    }\n\n    return resourcePath;\n  }\n\n  lint(content) {\n    try {\n      return this.engine.executeOnText(content, this.resourcePath, true);\n    } catch (_) {\n      this.getEmitter(false)(_);\n      return {\n        src: content\n      };\n    }\n  }\n\n  printOutput(data) {\n    const {\n      options\n    } = this; // skip ignored file warning\n\n    if (this.constructor.skipIgnoredFileWarning(data)) {\n      return;\n    } // quiet filter done now\n    // eslint allow rules to be specified in the input between comments\n    // so we can found warnings defined in the input itself\n\n\n    const res = this.filter(data); // if enabled, use eslint auto-fixing where possible\n\n    if (options.fix) {\n      this.autoFix(res);\n    } // skip if no errors or warnings\n\n\n    if (res.errorCount < 1 && res.warningCount < 1) {\n      return;\n    }\n\n    const results = this.parseResults(res); // Do not analyze if there are no results or eslint config\n\n    if (!results) {\n      return;\n    }\n\n    const messages = options.formatter(results);\n    this.reportOutput(results, messages);\n    this.failOnErrorOrWarning(res, messages);\n    const emitter = this.getEmitter(res);\n    emitter(new _ESLintError.default(messages));\n  }\n\n  static skipIgnoredFileWarning(res) {\n    return res && res.warningCount === 1 && res.results && res.results[0] && res.results[0].messages[0] && res.results[0].messages[0].message && res.results[0].messages[0].message.indexOf('ignore') > 1;\n  }\n\n  filter(data) {\n    const res = data; // quiet filter done now\n    // eslint allow rules to be specified in the input between comments\n    // so we can found warnings defined in the input itself\n\n    if (this.options.quiet && res && res.warningCount && res.results && res.results[0]) {\n      res.warningCount = 0;\n      res.results[0].warningCount = 0;\n      res.results[0].messages = res.results[0].messages.filter(message => message.severity !== 1);\n    }\n\n    return res;\n  }\n\n  autoFix(res) {\n    if (res && res.results && res.results[0] && (res.results[0].output !== res.src || res.results[0].fixableErrorCount > 0 || res.results[0].fixableWarningCount > 0)) {\n      this.CLIEngine.outputFixes(res);\n    }\n  }\n\n  parseResults({\n    results\n  }) {\n    // add filename for each results so formatter can have relevant filename\n    if (results) {\n      results.forEach(r => {\n        // eslint-disable-next-line no-param-reassign\n        r.filePath = this.loaderContext.resourcePath;\n      });\n    }\n\n    return results;\n  }\n\n  reportOutput(results, messages) {\n    const {\n      outputReport\n    } = this.options;\n\n    if (!outputReport || !outputReport.filePath) {\n      return;\n    }\n\n    let content = messages; // if a different formatter is passed in as an option use that\n\n    if (outputReport.formatter) {\n      content = outputReport.formatter(results);\n    }\n\n    let filePath = (0, _loaderUtils.interpolateName)(this.loaderContext, outputReport.filePath, {\n      content\n    });\n\n    if (!(0, _path.isAbsolute)(filePath)) {\n      filePath = (0, _path.join)( // eslint-disable-next-line no-underscore-dangle\n      this.loaderContext._compiler.options.output.path, filePath);\n    }\n\n    (0, _fsExtra.ensureFileSync)(filePath);\n    (0, _fsExtra.writeFileSync)(filePath, content);\n  }\n\n  failOnErrorOrWarning({\n    errorCount,\n    warningCount\n  }, messages) {\n    const {\n      failOnError,\n      failOnWarning\n    } = this.options;\n\n    if (failOnError && errorCount) {\n      throw new _ESLintError.default(`Module failed because of a eslint error.\\n${messages}`);\n    }\n\n    if (failOnWarning && warningCount) {\n      throw new _ESLintError.default(`Module failed because of a eslint warning.\\n${messages}`);\n    }\n  }\n\n  getEmitter({\n    errorCount\n  }) {\n    const {\n      options,\n      loaderContext\n    } = this; // default behavior: emit error only if we have errors\n\n    let emitter = errorCount ? loaderContext.emitError : loaderContext.emitWarning; // force emitError or emitWarning if user want this\n\n    if (options.emitError) {\n      emitter = loaderContext.emitError;\n    } else if (options.emitWarning) {\n      emitter = loaderContext.emitWarning;\n    }\n\n    return emitter;\n  }\n\n}\n\nexports.default = Linter;"]},"metadata":{},"sourceType":"script"}