{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"chai\").assert,\n    isIterable = require(\"../../iterable/is\");\n\ndescribe(\"iterable/is\", function () {\n  it(\"Should return true on array\", function () {\n    assert.equal(isIterable([]), true);\n  });\n  it(\"Should return true on arguments\", function () {\n    assert.equal(isIterable(function () {\n      return arguments;\n    }()), true);\n  });\n  it(\"Should by default return false on string\", function () {\n    assert.equal(isIterable(\"foo\"), false);\n  });\n  it(\"Should accept strings if specified\", function () {\n    assert.equal(isIterable(\"foo\", {\n      allowString: true\n    }), true);\n  });\n  it(\"Should support denyEmpty option\", function () {\n    assert.equal(isIterable([], {\n      denyEmpty: true\n    }), false);\n    assert.equal(isIterable([null], {\n      denyEmpty: true\n    }), true);\n    assert.equal(isIterable(\"\", {\n      allowString: true,\n      denyEmpty: true\n    }), false);\n    assert.equal(isIterable(\"foo\", {\n      allowString: true,\n      denyEmpty: true\n    }), true);\n  });\n\n  if (typeof Set === \"function\") {\n    it(\"Should return true on set\", function () {\n      assert.equal(isIterable(new Set()), true);\n    });\n  }\n\n  if (typeof Map === \"function\") {\n    it(\"Should return true on set\", function () {\n      assert.equal(isIterable(new Map()), true);\n    });\n  }\n\n  it(\"Should return false on plain object\", function () {\n    assert.equal(isIterable({}), false);\n  });\n  it(\"Should return false on function\", function () {\n    assert.equal(isIterable(function () {\n      return true;\n    }), false);\n  });\n\n  if (typeof Object.create === \"function\") {\n    it(\"Should return false on object with no prototype\", function () {\n      assert.equal(isIterable(Object.create(null)), false);\n    });\n  }\n\n  it(\"Should return false on string\", function () {\n    assert.equal(isIterable(\"foo\"), false);\n  });\n  it(\"Should return false on empty string\", function () {\n    assert.equal(isIterable(\"\"), false);\n  });\n  it(\"Should return false on number\", function () {\n    assert.equal(isIterable(123), false);\n  });\n  it(\"Should return false on NaN\", function () {\n    assert.equal(isIterable(NaN), false);\n  });\n  it(\"Should return false on boolean\", function () {\n    assert.equal(isIterable(true), false);\n  });\n\n  if (typeof Symbol === \"function\") {\n    it(\"Should return false on symbol\", function () {\n      assert.equal(isIterable(Symbol(\"foo\")), false);\n    });\n  }\n\n  it(\"Should return false on null\", function () {\n    assert.equal(isIterable(null), false);\n  });\n  it(\"Should return false on undefined\", function () {\n    assert.equal(isIterable(void 0), false);\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type/test/iterable/is.js"],"names":["assert","require","isIterable","describe","it","equal","arguments","allowString","denyEmpty","Set","Map","Object","create","NaN","Symbol"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAOC,OAAO,CAAC,MAAD,CAAP,CAAgBD,MAAjC;AAAA,IACIE,UAAU,GAAGD,OAAO,CAAC,mBAAD,CADxB;;AAGAE,QAAQ,CAAC,aAAD,EAAgB,YAAY;AACnCC,EAAAA,EAAE,CAAC,6BAAD,EAAgC,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,EAAD,CAAvB,EAA6B,IAA7B;AAAqC,GAAnF,CAAF;AACAE,EAAAA,EAAE,CAAC,iCAAD,EAAoC,YAAY;AACjDJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAE,YAAY;AAAE,aAAOI,SAAP;AAAmB,KAAlC,EAAD,CAAvB,EAAgE,IAAhE;AACA,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAY;AAC1DJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,KAAD,CAAvB,EAAgC,KAAhC;AACA,GAFC,CAAF;AAGAE,EAAAA,EAAE,CAAC,oCAAD,EAAuC,YAAY;AACpDJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,KAAD,EAAQ;AAAEK,MAAAA,WAAW,EAAE;AAAf,KAAR,CAAvB,EAAuD,IAAvD;AACA,GAFC,CAAF;AAIAH,EAAAA,EAAE,CAAC,iCAAD,EAAoC,YAAY;AACjDJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,EAAD,EAAK;AAAEM,MAAAA,SAAS,EAAE;AAAb,KAAL,CAAvB,EAAkD,KAAlD;AACAR,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,CAAC,IAAD,CAAD,EAAS;AAAEM,MAAAA,SAAS,EAAE;AAAb,KAAT,CAAvB,EAAsD,IAAtD;AACAR,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,EAAD,EAAK;AAAEK,MAAAA,WAAW,EAAE,IAAf;AAAqBC,MAAAA,SAAS,EAAE;AAAhC,KAAL,CAAvB,EAAqE,KAArE;AACAR,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,KAAD,EAAQ;AAAEK,MAAAA,WAAW,EAAE,IAAf;AAAqBC,MAAAA,SAAS,EAAE;AAAhC,KAAR,CAAvB,EAAwE,IAAxE;AACA,GALC,CAAF;;AAOA,MAAI,OAAOC,GAAP,KAAe,UAAnB,EAA+B;AAC9BL,IAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAY;AAAEJ,MAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,IAAIO,GAAJ,EAAD,CAAvB,EAAoC,IAApC;AAA4C,KAAxF,CAAF;AACA;;AACD,MAAI,OAAOC,GAAP,KAAe,UAAnB,EAA+B;AAC9BN,IAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAY;AAAEJ,MAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,IAAIQ,GAAJ,EAAD,CAAvB,EAAoC,IAApC;AAA4C,KAAxF,CAAF;AACA;;AAEDN,EAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,EAAD,CAAvB,EAA6B,KAA7B;AAAsC,GAA5F,CAAF;AACAE,EAAAA,EAAE,CAAC,iCAAD,EAAoC,YAAY;AACjDJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,YAAY;AAAE,aAAO,IAAP;AAAc,KAA7B,CAAvB,EAAuD,KAAvD;AACA,GAFC,CAAF;;AAIA,MAAI,OAAOS,MAAM,CAACC,MAAd,KAAyB,UAA7B,EAAyC;AACxCR,IAAAA,EAAE,CAAC,iDAAD,EAAoD,YAAY;AACjEJ,MAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAACS,MAAM,CAACC,MAAP,CAAc,IAAd,CAAD,CAAvB,EAA8C,KAA9C;AACA,KAFC,CAAF;AAGA;;AACDR,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,KAAD,CAAvB,EAAgC,KAAhC;AAAyC,GAAzF,CAAF;AACAE,EAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,EAAD,CAAvB,EAA6B,KAA7B;AAAsC,GAA5F,CAAF;AACAE,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,GAAD,CAAvB,EAA8B,KAA9B;AAAuC,GAAvF,CAAF;AACAE,EAAAA,EAAE,CAAC,4BAAD,EAA+B,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAACW,GAAD,CAAvB,EAA8B,KAA9B;AAAuC,GAApF,CAAF;AACAT,EAAAA,EAAE,CAAC,gCAAD,EAAmC,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,IAAD,CAAvB,EAA+B,KAA/B;AAAwC,GAAzF,CAAF;;AACA,MAAI,OAAOY,MAAP,KAAkB,UAAtB,EAAkC;AACjCV,IAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAY;AAC/CJ,MAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAACY,MAAM,CAAC,KAAD,CAAP,CAAvB,EAAwC,KAAxC;AACA,KAFC,CAAF;AAGA;;AAEDV,EAAAA,EAAE,CAAC,6BAAD,EAAgC,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,IAAD,CAAvB,EAA+B,KAA/B;AAAwC,GAAtF,CAAF;AACAE,EAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAY;AAClDJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,UAAU,CAAC,KAAK,CAAN,CAAvB,EAAiC,KAAjC;AACA,GAFC,CAAF;AAGA,CAnDO,CAAR","sourcesContent":["\"use strict\";\n\nvar assert     = require(\"chai\").assert\n  , isIterable = require(\"../../iterable/is\");\n\ndescribe(\"iterable/is\", function () {\n\tit(\"Should return true on array\", function () { assert.equal(isIterable([]), true); });\n\tit(\"Should return true on arguments\", function () {\n\t\tassert.equal(isIterable((function () { return arguments; })()), true);\n\t});\n\tit(\"Should by default return false on string\", function () {\n\t\tassert.equal(isIterable(\"foo\"), false);\n\t});\n\tit(\"Should accept strings if specified\", function () {\n\t\tassert.equal(isIterable(\"foo\", { allowString: true }), true);\n\t});\n\n\tit(\"Should support denyEmpty option\", function () {\n\t\tassert.equal(isIterable([], { denyEmpty: true }), false);\n\t\tassert.equal(isIterable([null], { denyEmpty: true }), true);\n\t\tassert.equal(isIterable(\"\", { allowString: true, denyEmpty: true }), false);\n\t\tassert.equal(isIterable(\"foo\", { allowString: true, denyEmpty: true }), true);\n\t});\n\n\tif (typeof Set === \"function\") {\n\t\tit(\"Should return true on set\", function () { assert.equal(isIterable(new Set()), true); });\n\t}\n\tif (typeof Map === \"function\") {\n\t\tit(\"Should return true on set\", function () { assert.equal(isIterable(new Map()), true); });\n\t}\n\n\tit(\"Should return false on plain object\", function () { assert.equal(isIterable({}), false); });\n\tit(\"Should return false on function\", function () {\n\t\tassert.equal(isIterable(function () { return true; }), false);\n\t});\n\n\tif (typeof Object.create === \"function\") {\n\t\tit(\"Should return false on object with no prototype\", function () {\n\t\t\tassert.equal(isIterable(Object.create(null)), false);\n\t\t});\n\t}\n\tit(\"Should return false on string\", function () { assert.equal(isIterable(\"foo\"), false); });\n\tit(\"Should return false on empty string\", function () { assert.equal(isIterable(\"\"), false); });\n\tit(\"Should return false on number\", function () { assert.equal(isIterable(123), false); });\n\tit(\"Should return false on NaN\", function () { assert.equal(isIterable(NaN), false); });\n\tit(\"Should return false on boolean\", function () { assert.equal(isIterable(true), false); });\n\tif (typeof Symbol === \"function\") {\n\t\tit(\"Should return false on symbol\", function () {\n\t\t\tassert.equal(isIterable(Symbol(\"foo\")), false);\n\t\t});\n\t}\n\n\tit(\"Should return false on null\", function () { assert.equal(isIterable(null), false); });\n\tit(\"Should return false on undefined\", function () {\n\t\tassert.equal(isIterable(void 0), false);\n\t});\n});\n"]},"metadata":{},"sourceType":"script"}