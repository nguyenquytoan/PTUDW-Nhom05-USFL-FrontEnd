{"ast":null,"code":"/**\n * @fileoverview A rule to disallow modifying variables of class declarations\n * @author Toru Nagashima\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow reassigning class members\",\n      category: \"ECMAScript 6\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-class-assign\"\n    },\n    schema: [],\n    messages: {\n      class: \"'{{name}}' is a class.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * Finds and reports references that are non initializer and writable.\n     * @param {Variable} variable A variable to check.\n     * @returns {void}\n     */\n    function checkVariable(variable) {\n      astUtils.getModifyingReferences(variable.references).forEach(reference => {\n        context.report({\n          node: reference.identifier,\n          messageId: \"class\",\n          data: {\n            name: reference.identifier.name\n          }\n        });\n      });\n    }\n    /**\n     * Finds and reports references that are non initializer and writable.\n     * @param {ASTNode} node A ClassDeclaration/ClassExpression node to check.\n     * @returns {void}\n     */\n\n\n    function checkForClass(node) {\n      context.getDeclaredVariables(node).forEach(checkVariable);\n    }\n\n    return {\n      ClassDeclaration: checkForClass,\n      ClassExpression: checkForClass\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-class-assign.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","class","create","context","checkVariable","variable","getModifyingReferences","references","forEach","reference","report","node","identifier","messageId","data","name","checkForClass","getDeclaredVariables","ClassDeclaration","ClassExpression"],"mappings":"AAAA;;;;AAKA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,SADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,oCADX;AAEFC,MAAAA,QAAQ,EAAE,cAFR;AAGFC,MAAAA,WAAW,EAAE,IAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,EAVN;AAYFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,KAAK,EAAE;AADD;AAZR,GADO;;AAkBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;;;;;AAKA,aAASC,aAAT,CAAuBC,QAAvB,EAAiC;AAC7BjB,MAAAA,QAAQ,CAACkB,sBAAT,CAAgCD,QAAQ,CAACE,UAAzC,EAAqDC,OAArD,CAA6DC,SAAS,IAAI;AACtEN,QAAAA,OAAO,CAACO,MAAR,CAAe;AAAEC,UAAAA,IAAI,EAAEF,SAAS,CAACG,UAAlB;AAA8BC,UAAAA,SAAS,EAAE,OAAzC;AAAkDC,UAAAA,IAAI,EAAE;AAAEC,YAAAA,IAAI,EAAEN,SAAS,CAACG,UAAV,CAAqBG;AAA7B;AAAxD,SAAf;AAEH,OAHD;AAIH;AAED;;;;;;;AAKA,aAASC,aAAT,CAAuBL,IAAvB,EAA6B;AACzBR,MAAAA,OAAO,CAACc,oBAAR,CAA6BN,IAA7B,EAAmCH,OAAnC,CAA2CJ,aAA3C;AACH;;AAED,WAAO;AACHc,MAAAA,gBAAgB,EAAEF,aADf;AAEHG,MAAAA,eAAe,EAAEH;AAFd,KAAP;AAKH;;AA9CY,CAAjB","sourcesContent":["/**\n * @fileoverview A rule to disallow modifying variables of class declarations\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow reassigning class members\",\n            category: \"ECMAScript 6\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-class-assign\"\n        },\n\n        schema: [],\n\n        messages: {\n            class: \"'{{name}}' is a class.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Finds and reports references that are non initializer and writable.\n         * @param {Variable} variable A variable to check.\n         * @returns {void}\n         */\n        function checkVariable(variable) {\n            astUtils.getModifyingReferences(variable.references).forEach(reference => {\n                context.report({ node: reference.identifier, messageId: \"class\", data: { name: reference.identifier.name } });\n\n            });\n        }\n\n        /**\n         * Finds and reports references that are non initializer and writable.\n         * @param {ASTNode} node A ClassDeclaration/ClassExpression node to check.\n         * @returns {void}\n         */\n        function checkForClass(node) {\n            context.getDeclaredVariables(node).forEach(checkVariable);\n        }\n\n        return {\n            ClassDeclaration: checkForClass,\n            ClassExpression: checkForClass\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}