{"ast":null,"code":"\"use strict\";\n/* eslint-env jest */\n// XXX Not sure how to make eslint not to complain here, but looks like this\n// declaration works, so leaving it for now\n\nfunction toBeInRange(received, _ref) {\n  var min = _ref.min,\n      max = _ref.max;\n  var pass = received >= min && received <= max;\n\n  if (pass) {\n    return {\n      message: function message() {\n        return \"expected \".concat(received, \" < \").concat(min, \" or \").concat(max, \" < \").concat(received);\n      },\n      pass: true\n    };\n  }\n\n  return {\n    message: function message() {\n      return \"expected \".concat(min, \" >= \").concat(received, \" >= \").concat(max);\n    },\n    pass: false\n  };\n}\n\nexpect.extend({\n  toBeInRange: toBeInRange\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/wait-for-expect/lib/toBeInRangeMatcher.js"],"names":["toBeInRange","received","_ref","min","max","pass","message","concat","expect","extend"],"mappings":"AAAA;AAEA;AACA;AACA;;AACA,SAASA,WAAT,CAAqBC,QAArB,EAA+BC,IAA/B,EAAqC;AACnC,MAAIC,GAAG,GAAGD,IAAI,CAACC,GAAf;AAAA,MACIC,GAAG,GAAGF,IAAI,CAACE,GADf;AAEA,MAAIC,IAAI,GAAGJ,QAAQ,IAAIE,GAAZ,IAAmBF,QAAQ,IAAIG,GAA1C;;AAEA,MAAIC,IAAJ,EAAU;AACR,WAAO;AACLC,MAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,eAAO,YAAYC,MAAZ,CAAmBN,QAAnB,EAA6B,KAA7B,EAAoCM,MAApC,CAA2CJ,GAA3C,EAAgD,MAAhD,EAAwDI,MAAxD,CAA+DH,GAA/D,EAAoE,KAApE,EAA2EG,MAA3E,CAAkFN,QAAlF,CAAP;AACD,OAHI;AAILI,MAAAA,IAAI,EAAE;AAJD,KAAP;AAMD;;AAED,SAAO;AACLC,IAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,aAAO,YAAYC,MAAZ,CAAmBJ,GAAnB,EAAwB,MAAxB,EAAgCI,MAAhC,CAAuCN,QAAvC,EAAiD,MAAjD,EAAyDM,MAAzD,CAAgEH,GAAhE,CAAP;AACD,KAHI;AAILC,IAAAA,IAAI,EAAE;AAJD,GAAP;AAMD;;AAEDG,MAAM,CAACC,MAAP,CAAc;AACZT,EAAAA,WAAW,EAAEA;AADD,CAAd","sourcesContent":["\"use strict\";\n\n/* eslint-env jest */\n// XXX Not sure how to make eslint not to complain here, but looks like this\n// declaration works, so leaving it for now\nfunction toBeInRange(received, _ref) {\n  var min = _ref.min,\n      max = _ref.max;\n  var pass = received >= min && received <= max;\n\n  if (pass) {\n    return {\n      message: function message() {\n        return \"expected \".concat(received, \" < \").concat(min, \" or \").concat(max, \" < \").concat(received);\n      },\n      pass: true\n    };\n  }\n\n  return {\n    message: function message() {\n      return \"expected \".concat(min, \" >= \").concat(received, \" >= \").concat(max);\n    },\n    pass: false\n  };\n}\n\nexpect.extend({\n  toBeInRange: toBeInRange\n});"]},"metadata":{},"sourceType":"script"}