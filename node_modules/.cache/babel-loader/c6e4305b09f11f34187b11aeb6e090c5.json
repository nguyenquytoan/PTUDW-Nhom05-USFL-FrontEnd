{"ast":null,"code":"//\n//                              list\n//                            ┌──────┐\n//             ┌──────────────┼─head │\n//             │              │ tail─┼──────────────┐\n//             │              └──────┘              │\n//             ▼                                    ▼\n//            item        item        item        item\n//          ┌──────┐    ┌──────┐    ┌──────┐    ┌──────┐\n//  null ◀──┼─prev │◀───┼─prev │◀───┼─prev │◀───┼─prev │\n//          │ next─┼───▶│ next─┼───▶│ next─┼───▶│ next─┼──▶ null\n//          ├──────┤    ├──────┤    ├──────┤    ├──────┤\n//          │ data │    │ data │    │ data │    │ data │\n//          └──────┘    └──────┘    └──────┘    └──────┘\n//\nfunction createItem(data) {\n  return {\n    prev: null,\n    next: null,\n    data: data\n  };\n}\n\nfunction allocateCursor(node, prev, next) {\n  var cursor;\n\n  if (cursors !== null) {\n    cursor = cursors;\n    cursors = cursors.cursor;\n    cursor.prev = prev;\n    cursor.next = next;\n    cursor.cursor = node.cursor;\n  } else {\n    cursor = {\n      prev: prev,\n      next: next,\n      cursor: node.cursor\n    };\n  }\n\n  node.cursor = cursor;\n  return cursor;\n}\n\nfunction releaseCursor(node) {\n  var cursor = node.cursor;\n  node.cursor = cursor.cursor;\n  cursor.prev = null;\n  cursor.next = null;\n  cursor.cursor = cursors;\n  cursors = cursor;\n}\n\nvar cursors = null;\n\nvar List = function () {\n  this.cursor = null;\n  this.head = null;\n  this.tail = null;\n};\n\nList.createItem = createItem;\nList.prototype.createItem = createItem;\n\nList.prototype.updateCursors = function (prevOld, prevNew, nextOld, nextNew) {\n  var cursor = this.cursor;\n\n  while (cursor !== null) {\n    if (cursor.prev === prevOld) {\n      cursor.prev = prevNew;\n    }\n\n    if (cursor.next === nextOld) {\n      cursor.next = nextNew;\n    }\n\n    cursor = cursor.cursor;\n  }\n};\n\nList.prototype.getSize = function () {\n  var size = 0;\n  var cursor = this.head;\n\n  while (cursor) {\n    size++;\n    cursor = cursor.next;\n  }\n\n  return size;\n};\n\nList.prototype.fromArray = function (array) {\n  var cursor = null;\n  this.head = null;\n\n  for (var i = 0; i < array.length; i++) {\n    var item = createItem(array[i]);\n\n    if (cursor !== null) {\n      cursor.next = item;\n    } else {\n      this.head = item;\n    }\n\n    item.prev = cursor;\n    cursor = item;\n  }\n\n  this.tail = cursor;\n  return this;\n};\n\nList.prototype.toArray = function () {\n  var cursor = this.head;\n  var result = [];\n\n  while (cursor) {\n    result.push(cursor.data);\n    cursor = cursor.next;\n  }\n\n  return result;\n};\n\nList.prototype.toJSON = List.prototype.toArray;\n\nList.prototype.isEmpty = function () {\n  return this.head === null;\n};\n\nList.prototype.first = function () {\n  return this.head && this.head.data;\n};\n\nList.prototype.last = function () {\n  return this.tail && this.tail.data;\n};\n\nList.prototype.each = function (fn, context) {\n  var item;\n\n  if (context === undefined) {\n    context = this;\n  } // push cursor\n\n\n  var cursor = allocateCursor(this, null, this.head);\n\n  while (cursor.next !== null) {\n    item = cursor.next;\n    cursor.next = item.next;\n    fn.call(context, item.data, item, this);\n  } // pop cursor\n\n\n  releaseCursor(this);\n};\n\nList.prototype.forEach = List.prototype.each;\n\nList.prototype.eachRight = function (fn, context) {\n  var item;\n\n  if (context === undefined) {\n    context = this;\n  } // push cursor\n\n\n  var cursor = allocateCursor(this, this.tail, null);\n\n  while (cursor.prev !== null) {\n    item = cursor.prev;\n    cursor.prev = item.prev;\n    fn.call(context, item.data, item, this);\n  } // pop cursor\n\n\n  releaseCursor(this);\n};\n\nList.prototype.forEachRight = List.prototype.eachRight;\n\nList.prototype.nextUntil = function (start, fn, context) {\n  if (start === null) {\n    return;\n  }\n\n  var item;\n\n  if (context === undefined) {\n    context = this;\n  } // push cursor\n\n\n  var cursor = allocateCursor(this, null, start);\n\n  while (cursor.next !== null) {\n    item = cursor.next;\n    cursor.next = item.next;\n\n    if (fn.call(context, item.data, item, this)) {\n      break;\n    }\n  } // pop cursor\n\n\n  releaseCursor(this);\n};\n\nList.prototype.prevUntil = function (start, fn, context) {\n  if (start === null) {\n    return;\n  }\n\n  var item;\n\n  if (context === undefined) {\n    context = this;\n  } // push cursor\n\n\n  var cursor = allocateCursor(this, start, null);\n\n  while (cursor.prev !== null) {\n    item = cursor.prev;\n    cursor.prev = item.prev;\n\n    if (fn.call(context, item.data, item, this)) {\n      break;\n    }\n  } // pop cursor\n\n\n  releaseCursor(this);\n};\n\nList.prototype.some = function (fn, context) {\n  var cursor = this.head;\n\n  if (context === undefined) {\n    context = this;\n  }\n\n  while (cursor !== null) {\n    if (fn.call(context, cursor.data, cursor, this)) {\n      return true;\n    }\n\n    cursor = cursor.next;\n  }\n\n  return false;\n};\n\nList.prototype.map = function (fn, context) {\n  var result = new List();\n  var cursor = this.head;\n\n  if (context === undefined) {\n    context = this;\n  }\n\n  while (cursor !== null) {\n    result.appendData(fn.call(context, cursor.data, cursor, this));\n    cursor = cursor.next;\n  }\n\n  return result;\n};\n\nList.prototype.filter = function (fn, context) {\n  var result = new List();\n  var cursor = this.head;\n\n  if (context === undefined) {\n    context = this;\n  }\n\n  while (cursor !== null) {\n    if (fn.call(context, cursor.data, cursor, this)) {\n      result.appendData(cursor.data);\n    }\n\n    cursor = cursor.next;\n  }\n\n  return result;\n};\n\nList.prototype.clear = function () {\n  this.head = null;\n  this.tail = null;\n};\n\nList.prototype.copy = function () {\n  var result = new List();\n  var cursor = this.head;\n\n  while (cursor !== null) {\n    result.insert(createItem(cursor.data));\n    cursor = cursor.next;\n  }\n\n  return result;\n};\n\nList.prototype.prepend = function (item) {\n  //      head\n  //    ^\n  // item\n  this.updateCursors(null, item, this.head, item); // insert to the beginning of the list\n\n  if (this.head !== null) {\n    // new item <- first item\n    this.head.prev = item; // new item -> first item\n\n    item.next = this.head;\n  } else {\n    // if list has no head, then it also has no tail\n    // in this case tail points to the new item\n    this.tail = item;\n  } // head always points to new item\n\n\n  this.head = item;\n  return this;\n};\n\nList.prototype.prependData = function (data) {\n  return this.prepend(createItem(data));\n};\n\nList.prototype.append = function (item) {\n  return this.insert(item);\n};\n\nList.prototype.appendData = function (data) {\n  return this.insert(createItem(data));\n};\n\nList.prototype.insert = function (item, before) {\n  if (before !== undefined && before !== null) {\n    // prev   before\n    //      ^\n    //     item\n    this.updateCursors(before.prev, item, before, item);\n\n    if (before.prev === null) {\n      // insert to the beginning of list\n      if (this.head !== before) {\n        throw new Error('before doesn\\'t belong to list');\n      } // since head points to before therefore list doesn't empty\n      // no need to check tail\n\n\n      this.head = item;\n      before.prev = item;\n      item.next = before;\n      this.updateCursors(null, item);\n    } else {\n      // insert between two items\n      before.prev.next = item;\n      item.prev = before.prev;\n      before.prev = item;\n      item.next = before;\n    }\n  } else {\n    // tail\n    //      ^\n    //      item\n    this.updateCursors(this.tail, item, null, item); // insert to the ending of the list\n\n    if (this.tail !== null) {\n      // last item -> new item\n      this.tail.next = item; // last item <- new item\n\n      item.prev = this.tail;\n    } else {\n      // if list has no tail, then it also has no head\n      // in this case head points to new item\n      this.head = item;\n    } // tail always points to new item\n\n\n    this.tail = item;\n  }\n\n  return this;\n};\n\nList.prototype.insertData = function (data, before) {\n  return this.insert(createItem(data), before);\n};\n\nList.prototype.remove = function (item) {\n  //      item\n  //       ^\n  // prev     next\n  this.updateCursors(item, item.prev, item, item.next);\n\n  if (item.prev !== null) {\n    item.prev.next = item.next;\n  } else {\n    if (this.head !== item) {\n      throw new Error('item doesn\\'t belong to list');\n    }\n\n    this.head = item.next;\n  }\n\n  if (item.next !== null) {\n    item.next.prev = item.prev;\n  } else {\n    if (this.tail !== item) {\n      throw new Error('item doesn\\'t belong to list');\n    }\n\n    this.tail = item.prev;\n  }\n\n  item.prev = null;\n  item.next = null;\n  return item;\n};\n\nList.prototype.push = function (data) {\n  this.insert(createItem(data));\n};\n\nList.prototype.pop = function () {\n  if (this.tail !== null) {\n    return this.remove(this.tail);\n  }\n};\n\nList.prototype.unshift = function (data) {\n  this.prepend(createItem(data));\n};\n\nList.prototype.shift = function () {\n  if (this.head !== null) {\n    return this.remove(this.head);\n  }\n};\n\nList.prototype.prependList = function (list) {\n  return this.insertList(list, this.head);\n};\n\nList.prototype.appendList = function (list) {\n  return this.insertList(list);\n};\n\nList.prototype.insertList = function (list, before) {\n  // ignore empty lists\n  if (list.head === null) {\n    return this;\n  }\n\n  if (before !== undefined && before !== null) {\n    this.updateCursors(before.prev, list.tail, before, list.head); // insert in the middle of dist list\n\n    if (before.prev !== null) {\n      // before.prev <-> list.head\n      before.prev.next = list.head;\n      list.head.prev = before.prev;\n    } else {\n      this.head = list.head;\n    }\n\n    before.prev = list.tail;\n    list.tail.next = before;\n  } else {\n    this.updateCursors(this.tail, list.tail, null, list.head); // insert to end of the list\n\n    if (this.tail !== null) {\n      // if destination list has a tail, then it also has a head,\n      // but head doesn't change\n      // dest tail -> source head\n      this.tail.next = list.head; // dest tail <- source head\n\n      list.head.prev = this.tail;\n    } else {\n      // if list has no a tail, then it also has no a head\n      // in this case points head to new item\n      this.head = list.head;\n    } // tail always start point to new item\n\n\n    this.tail = list.tail;\n  }\n\n  list.head = null;\n  list.tail = null;\n  return this;\n};\n\nList.prototype.replace = function (oldItem, newItemOrList) {\n  if ('head' in newItemOrList) {\n    this.insertList(newItemOrList, oldItem);\n  } else {\n    this.insert(newItemOrList, oldItem);\n  }\n\n  this.remove(oldItem);\n};\n\nmodule.exports = List;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/csso/node_modules/css-tree/lib/common/List.js"],"names":["createItem","data","prev","next","allocateCursor","node","cursor","cursors","releaseCursor","List","head","tail","prototype","updateCursors","prevOld","prevNew","nextOld","nextNew","getSize","size","fromArray","array","i","length","item","toArray","result","push","toJSON","isEmpty","first","last","each","fn","context","undefined","call","forEach","eachRight","forEachRight","nextUntil","start","prevUntil","some","map","appendData","filter","clear","copy","insert","prepend","prependData","append","before","Error","insertData","remove","pop","unshift","shift","prependList","list","insertList","appendList","replace","oldItem","newItemOrList","module","exports"],"mappings":"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","sourcesContent":["//\n//                              list\n//                            ┌──────┐\n//             ┌──────────────┼─head │\n//             │              │ tail─┼──────────────┐\n//             │              └──────┘              │\n//             ▼                                    ▼\n//            item        item        item        item\n//          ┌──────┐    ┌──────┐    ┌──────┐    ┌──────┐\n//  null ◀──┼─prev │◀───┼─prev │◀───┼─prev │◀───┼─prev │\n//          │ next─┼───▶│ next─┼───▶│ next─┼───▶│ next─┼──▶ null\n//          ├──────┤    ├──────┤    ├──────┤    ├──────┤\n//          │ data │    │ data │    │ data │    │ data │\n//          └──────┘    └──────┘    └──────┘    └──────┘\n//\n\nfunction createItem(data) {\n    return {\n        prev: null,\n        next: null,\n        data: data\n    };\n}\n\nfunction allocateCursor(node, prev, next) {\n    var cursor;\n\n    if (cursors !== null) {\n        cursor = cursors;\n        cursors = cursors.cursor;\n        cursor.prev = prev;\n        cursor.next = next;\n        cursor.cursor = node.cursor;\n    } else {\n        cursor = {\n            prev: prev,\n            next: next,\n            cursor: node.cursor\n        };\n    }\n\n    node.cursor = cursor;\n\n    return cursor;\n}\n\nfunction releaseCursor(node) {\n    var cursor = node.cursor;\n\n    node.cursor = cursor.cursor;\n    cursor.prev = null;\n    cursor.next = null;\n    cursor.cursor = cursors;\n    cursors = cursor;\n}\n\nvar cursors = null;\nvar List = function() {\n    this.cursor = null;\n    this.head = null;\n    this.tail = null;\n};\n\nList.createItem = createItem;\nList.prototype.createItem = createItem;\n\nList.prototype.updateCursors = function(prevOld, prevNew, nextOld, nextNew) {\n    var cursor = this.cursor;\n\n    while (cursor !== null) {\n        if (cursor.prev === prevOld) {\n            cursor.prev = prevNew;\n        }\n\n        if (cursor.next === nextOld) {\n            cursor.next = nextNew;\n        }\n\n        cursor = cursor.cursor;\n    }\n};\n\nList.prototype.getSize = function() {\n    var size = 0;\n    var cursor = this.head;\n\n    while (cursor) {\n        size++;\n        cursor = cursor.next;\n    }\n\n    return size;\n};\n\nList.prototype.fromArray = function(array) {\n    var cursor = null;\n\n    this.head = null;\n\n    for (var i = 0; i < array.length; i++) {\n        var item = createItem(array[i]);\n\n        if (cursor !== null) {\n            cursor.next = item;\n        } else {\n            this.head = item;\n        }\n\n        item.prev = cursor;\n        cursor = item;\n    }\n\n    this.tail = cursor;\n\n    return this;\n};\n\nList.prototype.toArray = function() {\n    var cursor = this.head;\n    var result = [];\n\n    while (cursor) {\n        result.push(cursor.data);\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.toJSON = List.prototype.toArray;\n\nList.prototype.isEmpty = function() {\n    return this.head === null;\n};\n\nList.prototype.first = function() {\n    return this.head && this.head.data;\n};\n\nList.prototype.last = function() {\n    return this.tail && this.tail.data;\n};\n\nList.prototype.each = function(fn, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, null, this.head);\n\n    while (cursor.next !== null) {\n        item = cursor.next;\n        cursor.next = item.next;\n\n        fn.call(context, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.forEach = List.prototype.each;\n\nList.prototype.eachRight = function(fn, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, this.tail, null);\n\n    while (cursor.prev !== null) {\n        item = cursor.prev;\n        cursor.prev = item.prev;\n\n        fn.call(context, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.forEachRight = List.prototype.eachRight;\n\nList.prototype.nextUntil = function(start, fn, context) {\n    if (start === null) {\n        return;\n    }\n\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, null, start);\n\n    while (cursor.next !== null) {\n        item = cursor.next;\n        cursor.next = item.next;\n\n        if (fn.call(context, item.data, item, this)) {\n            break;\n        }\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.prevUntil = function(start, fn, context) {\n    if (start === null) {\n        return;\n    }\n\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, start, null);\n\n    while (cursor.prev !== null) {\n        item = cursor.prev;\n        cursor.prev = item.prev;\n\n        if (fn.call(context, item.data, item, this)) {\n            break;\n        }\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.some = function(fn, context) {\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        if (fn.call(context, cursor.data, cursor, this)) {\n            return true;\n        }\n\n        cursor = cursor.next;\n    }\n\n    return false;\n};\n\nList.prototype.map = function(fn, context) {\n    var result = new List();\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        result.appendData(fn.call(context, cursor.data, cursor, this));\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.filter = function(fn, context) {\n    var result = new List();\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        if (fn.call(context, cursor.data, cursor, this)) {\n            result.appendData(cursor.data);\n        }\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.clear = function() {\n    this.head = null;\n    this.tail = null;\n};\n\nList.prototype.copy = function() {\n    var result = new List();\n    var cursor = this.head;\n\n    while (cursor !== null) {\n        result.insert(createItem(cursor.data));\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.prepend = function(item) {\n    //      head\n    //    ^\n    // item\n    this.updateCursors(null, item, this.head, item);\n\n    // insert to the beginning of the list\n    if (this.head !== null) {\n        // new item <- first item\n        this.head.prev = item;\n\n        // new item -> first item\n        item.next = this.head;\n    } else {\n        // if list has no head, then it also has no tail\n        // in this case tail points to the new item\n        this.tail = item;\n    }\n\n    // head always points to new item\n    this.head = item;\n\n    return this;\n};\n\nList.prototype.prependData = function(data) {\n    return this.prepend(createItem(data));\n};\n\nList.prototype.append = function(item) {\n    return this.insert(item);\n};\n\nList.prototype.appendData = function(data) {\n    return this.insert(createItem(data));\n};\n\nList.prototype.insert = function(item, before) {\n    if (before !== undefined && before !== null) {\n        // prev   before\n        //      ^\n        //     item\n        this.updateCursors(before.prev, item, before, item);\n\n        if (before.prev === null) {\n            // insert to the beginning of list\n            if (this.head !== before) {\n                throw new Error('before doesn\\'t belong to list');\n            }\n\n            // since head points to before therefore list doesn't empty\n            // no need to check tail\n            this.head = item;\n            before.prev = item;\n            item.next = before;\n\n            this.updateCursors(null, item);\n        } else {\n\n            // insert between two items\n            before.prev.next = item;\n            item.prev = before.prev;\n\n            before.prev = item;\n            item.next = before;\n        }\n    } else {\n        // tail\n        //      ^\n        //      item\n        this.updateCursors(this.tail, item, null, item);\n\n        // insert to the ending of the list\n        if (this.tail !== null) {\n            // last item -> new item\n            this.tail.next = item;\n\n            // last item <- new item\n            item.prev = this.tail;\n        } else {\n            // if list has no tail, then it also has no head\n            // in this case head points to new item\n            this.head = item;\n        }\n\n        // tail always points to new item\n        this.tail = item;\n    }\n\n    return this;\n};\n\nList.prototype.insertData = function(data, before) {\n    return this.insert(createItem(data), before);\n};\n\nList.prototype.remove = function(item) {\n    //      item\n    //       ^\n    // prev     next\n    this.updateCursors(item, item.prev, item, item.next);\n\n    if (item.prev !== null) {\n        item.prev.next = item.next;\n    } else {\n        if (this.head !== item) {\n            throw new Error('item doesn\\'t belong to list');\n        }\n\n        this.head = item.next;\n    }\n\n    if (item.next !== null) {\n        item.next.prev = item.prev;\n    } else {\n        if (this.tail !== item) {\n            throw new Error('item doesn\\'t belong to list');\n        }\n\n        this.tail = item.prev;\n    }\n\n    item.prev = null;\n    item.next = null;\n\n    return item;\n};\n\nList.prototype.push = function(data) {\n    this.insert(createItem(data));\n};\n\nList.prototype.pop = function() {\n    if (this.tail !== null) {\n        return this.remove(this.tail);\n    }\n};\n\nList.prototype.unshift = function(data) {\n    this.prepend(createItem(data));\n};\n\nList.prototype.shift = function() {\n    if (this.head !== null) {\n        return this.remove(this.head);\n    }\n};\n\nList.prototype.prependList = function(list) {\n    return this.insertList(list, this.head);\n};\n\nList.prototype.appendList = function(list) {\n    return this.insertList(list);\n};\n\nList.prototype.insertList = function(list, before) {\n    // ignore empty lists\n    if (list.head === null) {\n        return this;\n    }\n\n    if (before !== undefined && before !== null) {\n        this.updateCursors(before.prev, list.tail, before, list.head);\n\n        // insert in the middle of dist list\n        if (before.prev !== null) {\n            // before.prev <-> list.head\n            before.prev.next = list.head;\n            list.head.prev = before.prev;\n        } else {\n            this.head = list.head;\n        }\n\n        before.prev = list.tail;\n        list.tail.next = before;\n    } else {\n        this.updateCursors(this.tail, list.tail, null, list.head);\n\n        // insert to end of the list\n        if (this.tail !== null) {\n            // if destination list has a tail, then it also has a head,\n            // but head doesn't change\n\n            // dest tail -> source head\n            this.tail.next = list.head;\n\n            // dest tail <- source head\n            list.head.prev = this.tail;\n        } else {\n            // if list has no a tail, then it also has no a head\n            // in this case points head to new item\n            this.head = list.head;\n        }\n\n        // tail always start point to new item\n        this.tail = list.tail;\n    }\n\n    list.head = null;\n    list.tail = null;\n\n    return this;\n};\n\nList.prototype.replace = function(oldItem, newItemOrList) {\n    if ('head' in newItemOrList) {\n        this.insertList(newItemOrList, oldItem);\n    } else {\n        this.insert(newItemOrList, oldItem);\n    }\n\n    this.remove(oldItem);\n};\n\nmodule.exports = List;\n"]},"metadata":{},"sourceType":"script"}