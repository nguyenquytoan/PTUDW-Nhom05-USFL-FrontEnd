{"ast":null,"code":"/**\n * @fileoverview Rule to check multiple var declarations per line\n * @author Alberto Rodríguez\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require or disallow newlines around variable declarations\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/one-var-declaration-per-line\"\n    },\n    schema: [{\n      enum: [\"always\", \"initializations\"]\n    }],\n    fixable: \"whitespace\"\n  },\n\n  create(context) {\n    const ERROR_MESSAGE = \"Expected variable declaration to be on a new line.\";\n    const always = context.options[0] === \"always\"; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Determine if provided keyword is a variant of for specifiers\n     * @private\n     * @param {string} keyword keyword to test\n     * @returns {boolean} True if `keyword` is a variant of for specifier\n     */\n\n    function isForTypeSpecifier(keyword) {\n      return keyword === \"ForStatement\" || keyword === \"ForInStatement\" || keyword === \"ForOfStatement\";\n    }\n    /**\n     * Checks newlines around variable declarations.\n     * @private\n     * @param {ASTNode} node `VariableDeclaration` node to test\n     * @returns {void}\n     */\n\n\n    function checkForNewLine(node) {\n      if (isForTypeSpecifier(node.parent.type)) {\n        return;\n      }\n\n      const declarations = node.declarations;\n      let prev;\n      declarations.forEach(current => {\n        if (prev && prev.loc.end.line === current.loc.start.line) {\n          if (always || prev.init || current.init) {\n            context.report({\n              node,\n              message: ERROR_MESSAGE,\n              loc: current.loc.start,\n              fix: fixer => fixer.insertTextBefore(current, \"\\n\")\n            });\n          }\n        }\n\n        prev = current;\n      });\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      VariableDeclaration: checkForNewLine\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/one-var-declaration-per-line.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","enum","fixable","create","context","ERROR_MESSAGE","always","options","isForTypeSpecifier","keyword","checkForNewLine","node","parent","declarations","prev","forEach","current","loc","end","line","start","init","report","message","fix","fixer","insertTextBefore","VariableDeclaration"],"mappings":"AAAA;;;;AAIA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,2DADX;AAEFC,MAAAA,QAAQ,EAAE,kBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,iBAAX;AADV,KADI,CAVN;AAgBFC,IAAAA,OAAO,EAAE;AAhBP,GADO;;AAoBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,UAAMC,aAAa,GAAG,oDAAtB;AACA,UAAMC,MAAM,GAAGF,OAAO,CAACG,OAAR,CAAgB,CAAhB,MAAuB,QAAtC,CAHY,CAKZ;AACA;AACA;;AAGA;;;;;;;AAMA,aAASC,kBAAT,CAA4BC,OAA5B,EAAqC;AACjC,aAAOA,OAAO,KAAK,cAAZ,IAA8BA,OAAO,KAAK,gBAA1C,IAA8DA,OAAO,KAAK,gBAAjF;AACH;AAED;;;;;;;;AAMA,aAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAC3B,UAAIH,kBAAkB,CAACG,IAAI,CAACC,MAAL,CAAYlB,IAAb,CAAtB,EAA0C;AACtC;AACH;;AAED,YAAMmB,YAAY,GAAGF,IAAI,CAACE,YAA1B;AACA,UAAIC,IAAJ;AAEAD,MAAAA,YAAY,CAACE,OAAb,CAAqBC,OAAO,IAAI;AAC5B,YAAIF,IAAI,IAAIA,IAAI,CAACG,GAAL,CAASC,GAAT,CAAaC,IAAb,KAAsBH,OAAO,CAACC,GAAR,CAAYG,KAAZ,CAAkBD,IAApD,EAA0D;AACtD,cAAIb,MAAM,IAAIQ,IAAI,CAACO,IAAf,IAAuBL,OAAO,CAACK,IAAnC,EAAyC;AACrCjB,YAAAA,OAAO,CAACkB,MAAR,CAAe;AACXX,cAAAA,IADW;AAEXY,cAAAA,OAAO,EAAElB,aAFE;AAGXY,cAAAA,GAAG,EAAED,OAAO,CAACC,GAAR,CAAYG,KAHN;AAIXI,cAAAA,GAAG,EAAEC,KAAK,IAAIA,KAAK,CAACC,gBAAN,CAAuBV,OAAvB,EAAgC,IAAhC;AAJH,aAAf;AAMH;AACJ;;AACDF,QAAAA,IAAI,GAAGE,OAAP;AACH,OAZD;AAaH,KA/CW,CAiDZ;AACA;AACA;;;AAEA,WAAO;AACHW,MAAAA,mBAAmB,EAAEjB;AADlB,KAAP;AAIH;;AA7EY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to check multiple var declarations per line\n * @author Alberto Rodríguez\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require or disallow newlines around variable declarations\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/one-var-declaration-per-line\"\n        },\n\n        schema: [\n            {\n                enum: [\"always\", \"initializations\"]\n            }\n        ],\n\n        fixable: \"whitespace\"\n    },\n\n    create(context) {\n\n        const ERROR_MESSAGE = \"Expected variable declaration to be on a new line.\";\n        const always = context.options[0] === \"always\";\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n\n        /**\n         * Determine if provided keyword is a variant of for specifiers\n         * @private\n         * @param {string} keyword keyword to test\n         * @returns {boolean} True if `keyword` is a variant of for specifier\n         */\n        function isForTypeSpecifier(keyword) {\n            return keyword === \"ForStatement\" || keyword === \"ForInStatement\" || keyword === \"ForOfStatement\";\n        }\n\n        /**\n         * Checks newlines around variable declarations.\n         * @private\n         * @param {ASTNode} node `VariableDeclaration` node to test\n         * @returns {void}\n         */\n        function checkForNewLine(node) {\n            if (isForTypeSpecifier(node.parent.type)) {\n                return;\n            }\n\n            const declarations = node.declarations;\n            let prev;\n\n            declarations.forEach(current => {\n                if (prev && prev.loc.end.line === current.loc.start.line) {\n                    if (always || prev.init || current.init) {\n                        context.report({\n                            node,\n                            message: ERROR_MESSAGE,\n                            loc: current.loc.start,\n                            fix: fixer => fixer.insertTextBefore(current, \"\\n\")\n                        });\n                    }\n                }\n                prev = current;\n            });\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            VariableDeclaration: checkForNewLine\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}