{"ast":null,"code":"// @remove-on-eject-begin\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\nconst fs = require('fs');\n\nconst errorOverlayMiddleware = require('react-dev-utils/errorOverlayMiddleware');\n\nconst evalSourceMapMiddleware = require('react-dev-utils/evalSourceMapMiddleware');\n\nconst noopServiceWorkerMiddleware = require('react-dev-utils/noopServiceWorkerMiddleware');\n\nconst ignoredFiles = require('react-dev-utils/ignoredFiles');\n\nconst redirectServedPath = require('react-dev-utils/redirectServedPathMiddleware');\n\nconst paths = require('./paths');\n\nconst getHttpsConfig = require('./getHttpsConfig');\n\nconst host = process.env.HOST || '0.0.0.0';\nconst sockHost = process.env.WDS_SOCKET_HOST;\nconst sockPath = process.env.WDS_SOCKET_PATH; // default: '/sockjs-node'\n\nconst sockPort = process.env.WDS_SOCKET_PORT;\n\nmodule.exports = function (proxy, allowedHost) {\n  return {\n    // WebpackDevServer 2.4.3 introduced a security fix that prevents remote\n    // websites from potentially accessing local content through DNS rebinding:\n    // https://github.com/webpack/webpack-dev-server/issues/887\n    // https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a\n    // However, it made several existing use cases such as development in cloud\n    // environment or subdomains in development significantly more complicated:\n    // https://github.com/facebook/create-react-app/issues/2271\n    // https://github.com/facebook/create-react-app/issues/2233\n    // While we're investigating better solutions, for now we will take a\n    // compromise. Since our WDS configuration only serves files in the `public`\n    // folder we won't consider accessing them a vulnerability. However, if you\n    // use the `proxy` feature, it gets more dangerous because it can expose\n    // remote code execution vulnerabilities in backends like Django and Rails.\n    // So we will disable the host check normally, but enable it if you have\n    // specified the `proxy` setting. Finally, we let you override it if you\n    // really know what you're doing with a special environment variable.\n    disableHostCheck: !proxy || process.env.DANGEROUSLY_DISABLE_HOST_CHECK === 'true',\n    // Enable gzip compression of generated files.\n    compress: true,\n    // Silence WebpackDevServer's own logs since they're generally not useful.\n    // It will still show compile warnings and errors with this setting.\n    clientLogLevel: 'none',\n    // By default WebpackDevServer serves physical files from current directory\n    // in addition to all the virtual build products that it serves from memory.\n    // This is confusing because those files wonâ€™t automatically be available in\n    // production build folder unless we copy them. However, copying the whole\n    // project directory is dangerous because we may expose sensitive files.\n    // Instead, we establish a convention that only files in `public` directory\n    // get served. Our build script will copy `public` into the `build` folder.\n    // In `index.html`, you can get URL of `public` folder with %PUBLIC_URL%:\n    // <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n    // In JavaScript code, you can access it with `process.env.PUBLIC_URL`.\n    // Note that we only recommend to use `public` folder as an escape hatch\n    // for files like `favicon.ico`, `manifest.json`, and libraries that are\n    // for some reason broken when imported through webpack. If you just want to\n    // use an image, put it in `src` and `import` it from JavaScript instead.\n    contentBase: paths.appPublic,\n    contentBasePublicPath: paths.publicUrlOrPath,\n    // By default files from `contentBase` will not trigger a page reload.\n    watchContentBase: true,\n    // Enable hot reloading server. It will provide WDS_SOCKET_PATH endpoint\n    // for the WebpackDevServer client so it can learn when the files were\n    // updated. The WebpackDevServer client is included as an entry point\n    // in the webpack development configuration. Note that only changes\n    // to CSS are currently hot reloaded. JS changes will refresh the browser.\n    hot: true,\n    // Use 'ws' instead of 'sockjs-node' on server since we're using native\n    // websockets in `webpackHotDevClient`.\n    transportMode: 'ws',\n    // Prevent a WS client from getting injected as we're already including\n    // `webpackHotDevClient`.\n    injectClient: false,\n    // Enable custom sockjs pathname for websocket connection to hot reloading server.\n    // Enable custom sockjs hostname, pathname and port for websocket connection\n    // to hot reloading server.\n    sockHost,\n    sockPath,\n    sockPort,\n    // It is important to tell WebpackDevServer to use the same \"publicPath\" path as\n    // we specified in the webpack config. When homepage is '.', default to serving\n    // from the root.\n    // remove last slash so user can land on `/test` instead of `/test/`\n    publicPath: paths.publicUrlOrPath.slice(0, -1),\n    // WebpackDevServer is noisy by default so we emit custom message instead\n    // by listening to the compiler events with `compiler.hooks[...].tap` calls above.\n    quiet: true,\n    // Reportedly, this avoids CPU overload on some systems.\n    // https://github.com/facebook/create-react-app/issues/293\n    // src/node_modules is not ignored to support absolute imports\n    // https://github.com/facebook/create-react-app/issues/1065\n    watchOptions: {\n      ignored: ignoredFiles(paths.appSrc)\n    },\n    https: getHttpsConfig(),\n    host,\n    overlay: false,\n    historyApiFallback: {\n      // Paths with dots should still use the history fallback.\n      // See https://github.com/facebook/create-react-app/issues/387.\n      disableDotRule: true,\n      index: paths.publicUrlOrPath\n    },\n    public: allowedHost,\n    // `proxy` is run between `before` and `after` `webpack-dev-server` hooks\n    proxy,\n\n    before(app, server) {\n      // Keep `evalSourceMapMiddleware` and `errorOverlayMiddleware`\n      // middlewares before `redirectServedPath` otherwise will not have any effect\n      // This lets us fetch source contents from webpack for the error overlay\n      app.use(evalSourceMapMiddleware(server)); // This lets us open files from the runtime error overlay.\n\n      app.use(errorOverlayMiddleware());\n\n      if (fs.existsSync(paths.proxySetup)) {\n        // This registers user provided middleware for proxy reasons\n        require(paths.proxySetup)(app);\n      }\n    },\n\n    after(app) {\n      // Redirect to `PUBLIC_URL` or `homepage` from `package.json` if url not match\n      app.use(redirectServedPath(paths.publicUrlOrPath)); // This service worker file is effectively a 'no-op' that will reset any\n      // previous service worker registered for the same host:port combination.\n      // We do this in development to avoid hitting the production cache if\n      // it used the same host and port.\n      // https://github.com/facebook/create-react-app/issues/2272#issuecomment-302832432\n\n      app.use(noopServiceWorkerMiddleware(paths.publicUrlOrPath));\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-scripts/config/webpackDevServer.config.js"],"names":["fs","require","errorOverlayMiddleware","evalSourceMapMiddleware","noopServiceWorkerMiddleware","ignoredFiles","redirectServedPath","paths","getHttpsConfig","host","process","env","HOST","sockHost","WDS_SOCKET_HOST","sockPath","WDS_SOCKET_PATH","sockPort","WDS_SOCKET_PORT","module","exports","proxy","allowedHost","disableHostCheck","DANGEROUSLY_DISABLE_HOST_CHECK","compress","clientLogLevel","contentBase","appPublic","contentBasePublicPath","publicUrlOrPath","watchContentBase","hot","transportMode","injectClient","publicPath","slice","quiet","watchOptions","ignored","appSrc","https","overlay","historyApiFallback","disableDotRule","index","public","before","app","server","use","existsSync","proxySetup","after"],"mappings":"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","sourcesContent":["// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\nconst fs = require('fs');\nconst errorOverlayMiddleware = require('react-dev-utils/errorOverlayMiddleware');\nconst evalSourceMapMiddleware = require('react-dev-utils/evalSourceMapMiddleware');\nconst noopServiceWorkerMiddleware = require('react-dev-utils/noopServiceWorkerMiddleware');\nconst ignoredFiles = require('react-dev-utils/ignoredFiles');\nconst redirectServedPath = require('react-dev-utils/redirectServedPathMiddleware');\nconst paths = require('./paths');\nconst getHttpsConfig = require('./getHttpsConfig');\n\nconst host = process.env.HOST || '0.0.0.0';\nconst sockHost = process.env.WDS_SOCKET_HOST;\nconst sockPath = process.env.WDS_SOCKET_PATH; // default: '/sockjs-node'\nconst sockPort = process.env.WDS_SOCKET_PORT;\n\nmodule.exports = function(proxy, allowedHost) {\n  return {\n    // WebpackDevServer 2.4.3 introduced a security fix that prevents remote\n    // websites from potentially accessing local content through DNS rebinding:\n    // https://github.com/webpack/webpack-dev-server/issues/887\n    // https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a\n    // However, it made several existing use cases such as development in cloud\n    // environment or subdomains in development significantly more complicated:\n    // https://github.com/facebook/create-react-app/issues/2271\n    // https://github.com/facebook/create-react-app/issues/2233\n    // While we're investigating better solutions, for now we will take a\n    // compromise. Since our WDS configuration only serves files in the `public`\n    // folder we won't consider accessing them a vulnerability. However, if you\n    // use the `proxy` feature, it gets more dangerous because it can expose\n    // remote code execution vulnerabilities in backends like Django and Rails.\n    // So we will disable the host check normally, but enable it if you have\n    // specified the `proxy` setting. Finally, we let you override it if you\n    // really know what you're doing with a special environment variable.\n    disableHostCheck:\n      !proxy || process.env.DANGEROUSLY_DISABLE_HOST_CHECK === 'true',\n    // Enable gzip compression of generated files.\n    compress: true,\n    // Silence WebpackDevServer's own logs since they're generally not useful.\n    // It will still show compile warnings and errors with this setting.\n    clientLogLevel: 'none',\n    // By default WebpackDevServer serves physical files from current directory\n    // in addition to all the virtual build products that it serves from memory.\n    // This is confusing because those files wonâ€™t automatically be available in\n    // production build folder unless we copy them. However, copying the whole\n    // project directory is dangerous because we may expose sensitive files.\n    // Instead, we establish a convention that only files in `public` directory\n    // get served. Our build script will copy `public` into the `build` folder.\n    // In `index.html`, you can get URL of `public` folder with %PUBLIC_URL%:\n    // <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n    // In JavaScript code, you can access it with `process.env.PUBLIC_URL`.\n    // Note that we only recommend to use `public` folder as an escape hatch\n    // for files like `favicon.ico`, `manifest.json`, and libraries that are\n    // for some reason broken when imported through webpack. If you just want to\n    // use an image, put it in `src` and `import` it from JavaScript instead.\n    contentBase: paths.appPublic,\n    contentBasePublicPath: paths.publicUrlOrPath,\n    // By default files from `contentBase` will not trigger a page reload.\n    watchContentBase: true,\n    // Enable hot reloading server. It will provide WDS_SOCKET_PATH endpoint\n    // for the WebpackDevServer client so it can learn when the files were\n    // updated. The WebpackDevServer client is included as an entry point\n    // in the webpack development configuration. Note that only changes\n    // to CSS are currently hot reloaded. JS changes will refresh the browser.\n    hot: true,\n    // Use 'ws' instead of 'sockjs-node' on server since we're using native\n    // websockets in `webpackHotDevClient`.\n    transportMode: 'ws',\n    // Prevent a WS client from getting injected as we're already including\n    // `webpackHotDevClient`.\n    injectClient: false,\n    // Enable custom sockjs pathname for websocket connection to hot reloading server.\n    // Enable custom sockjs hostname, pathname and port for websocket connection\n    // to hot reloading server.\n    sockHost,\n    sockPath,\n    sockPort,\n    // It is important to tell WebpackDevServer to use the same \"publicPath\" path as\n    // we specified in the webpack config. When homepage is '.', default to serving\n    // from the root.\n    // remove last slash so user can land on `/test` instead of `/test/`\n    publicPath: paths.publicUrlOrPath.slice(0, -1),\n    // WebpackDevServer is noisy by default so we emit custom message instead\n    // by listening to the compiler events with `compiler.hooks[...].tap` calls above.\n    quiet: true,\n    // Reportedly, this avoids CPU overload on some systems.\n    // https://github.com/facebook/create-react-app/issues/293\n    // src/node_modules is not ignored to support absolute imports\n    // https://github.com/facebook/create-react-app/issues/1065\n    watchOptions: {\n      ignored: ignoredFiles(paths.appSrc),\n    },\n    https: getHttpsConfig(),\n    host,\n    overlay: false,\n    historyApiFallback: {\n      // Paths with dots should still use the history fallback.\n      // See https://github.com/facebook/create-react-app/issues/387.\n      disableDotRule: true,\n      index: paths.publicUrlOrPath,\n    },\n    public: allowedHost,\n    // `proxy` is run between `before` and `after` `webpack-dev-server` hooks\n    proxy,\n    before(app, server) {\n      // Keep `evalSourceMapMiddleware` and `errorOverlayMiddleware`\n      // middlewares before `redirectServedPath` otherwise will not have any effect\n      // This lets us fetch source contents from webpack for the error overlay\n      app.use(evalSourceMapMiddleware(server));\n      // This lets us open files from the runtime error overlay.\n      app.use(errorOverlayMiddleware());\n\n      if (fs.existsSync(paths.proxySetup)) {\n        // This registers user provided middleware for proxy reasons\n        require(paths.proxySetup)(app);\n      }\n    },\n    after(app) {\n      // Redirect to `PUBLIC_URL` or `homepage` from `package.json` if url not match\n      app.use(redirectServedPath(paths.publicUrlOrPath));\n\n      // This service worker file is effectively a 'no-op' that will reset any\n      // previous service worker registered for the same host:port combination.\n      // We do this in development to avoid hitting the production cache if\n      // it used the same host and port.\n      // https://github.com/facebook/create-react-app/issues/2272#issuecomment-302832432\n      app.use(noopServiceWorkerMiddleware(paths.publicUrlOrPath));\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"script"}