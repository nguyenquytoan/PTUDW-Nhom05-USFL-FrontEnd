{"ast":null,"code":"\"use strict\";\n\ndefine(['test/test-helpers'], function (testHelpers) {\n  var describeIf = testHelpers.describeIf;\n  var it = testHelpers.itWithFreshLog;\n  var originalConsole = window.console;\n  describeIf(testHelpers.isLocalStorageAvailable(), \"Local storage persistence tests:\", function () {\n    beforeEach(function () {\n      window.console = {\n        \"log\": jasmine.createSpy(\"console.log\")\n      };\n      this.addMatchers({\n        \"toBeAtLevel\": testHelpers.toBeAtLevel,\n        \"toBeTheStoredLevel\": testHelpers.toBeTheLevelStoredByLocalStorage,\n        \"toBeTheLevelStoredByLocalStorage\": testHelpers.toBeTheLevelStoredByLocalStorage,\n        \"toBeTheLevelStoredByCookie\": testHelpers.toBeTheLevelStoredByCookie\n      });\n      testHelpers.clearStoredLevels();\n    });\n    afterEach(function () {\n      window.console = originalConsole;\n    });\n    describe(\"If no level is saved\", function () {\n      it(\"log level is set to warn by default\", function (log) {\n        expect(log).toBeAtLevel(\"warn\");\n      });\n      it(\"warn is not persisted as the current level\", function (log) {\n        expect(\"warn\").not.toBeTheStoredLevel();\n      });\n      it(\"log can be set to info level\", function (log) {\n        log.setLevel(\"info\");\n        expect(log).toBeAtLevel(\"info\");\n      });\n      it(\"log.setLevel() sets a cookie with the given level\", function (log) {\n        log.setLevel(\"debug\");\n        expect(\"debug\").toBeTheStoredLevel();\n      });\n      it(\"log.setLevel() does not set a cookie if `persist` argument is false\", function (log) {\n        log.setLevel(\"debug\", false);\n        expect(\"debug\").not.toBeTheStoredLevel();\n      });\n    });\n    describe(\"If trace level is saved\", function () {\n      beforeEach(function () {\n        testHelpers.setStoredLevel(\"trace\");\n      });\n      it(\"trace is the default log level\", function (log) {\n        expect(log).toBeAtLevel(\"trace\");\n      });\n    });\n    describe(\"If debug level is saved\", function () {\n      beforeEach(function () {\n        testHelpers.setStoredLevel(\"debug\");\n      });\n      it(\"debug is the default log level\", function (log) {\n        expect(log).toBeAtLevel(\"debug\");\n      });\n    });\n    describe(\"If info level is saved\", function () {\n      beforeEach(function () {\n        testHelpers.setStoredLevel(\"info\");\n      });\n      it(\"info is the default log level\", function (log) {\n        expect(log).toBeAtLevel(\"info\");\n      });\n      it(\"log can be changed to warn level\", function (log) {\n        log.setLevel(\"warn\");\n        expect(log).toBeAtLevel(\"warn\");\n      });\n      it(\"log.setLevel() overwrites the saved level\", function (log) {\n        log.setLevel(\"error\");\n        expect(\"error\").toBeTheStoredLevel();\n        expect(\"info\").not.toBeTheStoredLevel();\n      });\n      it(\"log.setLevel() does not overwrite the saved level if `persist` argument is false\", function (log) {\n        log.setLevel(\"error\", false);\n        expect(\"info\").toBeTheStoredLevel();\n        expect(\"error\").not.toBeTheStoredLevel();\n      });\n    });\n    describe(\"If warn level is saved\", function () {\n      beforeEach(function () {\n        testHelpers.setStoredLevel(\"warn\");\n      });\n      it(\"warn is the default log level\", function (log) {\n        expect(log).toBeAtLevel(\"warn\");\n      });\n    });\n    describe(\"If error level is saved\", function () {\n      beforeEach(function () {\n        testHelpers.setStoredLevel(\"error\");\n      });\n      it(\"error is the default log level\", function (log) {\n        expect(log).toBeAtLevel(\"error\");\n      });\n    });\n    describe(\"If the level is saved with other data\", function () {\n      beforeEach(function () {\n        window.localStorage['qwe'] = \"asd\";\n        window.localStorage['loglevel'] = \"ERROR\";\n        window.localStorage['msg'] = \"hello world\";\n      });\n      it(\"error is the default log level\", function (log) {\n        expect(log).toBeAtLevel(\"error\");\n      });\n      it(\"log can be changed to silent level\", function (log) {\n        log.setLevel(\"silent\");\n        expect(log).toBeAtLevel(\"silent\");\n      });\n      it(\"log.setLevel() overrides the saved level only\", function (log) {\n        log.setLevel(\"debug\");\n        expect('debug').toBeTheStoredLevel();\n        expect(window.localStorage['msg']).toBe(\"hello world\");\n      });\n    });\n    describe(\"If the level is stored incorrectly\", function () {\n      beforeEach(function () {\n        testHelpers.setLocalStorageStoredLevel('gibberish');\n      });\n      it(\"warn is the default log level\", function (log) {\n        expect(log).toBeAtLevel(\"warn\");\n      });\n      it(\"warn is not persisted as the current level\", function (log) {\n        expect(\"warn\").not.toBeTheStoredLevel();\n      });\n      it(\"log can be changed to info level\", function (log) {\n        log.setLevel(\"info\");\n        expect(log).toBeAtLevel(\"info\");\n      });\n      it(\"log.setLevel() overrides the saved level with the new level\", function (log) {\n        expect('debug').not.toBeTheStoredLevel();\n        log.setLevel(\"debug\");\n        expect('debug').toBeTheStoredLevel();\n      });\n    });\n    describeIf(testHelpers.isCookieStorageAvailable() && testHelpers.isLocalStorageAvailable(), \"if localStorage and cookies are both available\", function () {\n      it(\"the level stored in cookies is ignored if a local storage level is set\", function () {\n        testHelpers.setCookieStoredLevel(\"info\");\n        testHelpers.setLocalStorageStoredLevel(\"debug\");\n        testHelpers.withFreshLog(function (log) {\n          expect(log).toBeAtLevel(\"debug\");\n        });\n      });\n      it(\"the level stored in cookies is used if no local storage level is set\", function () {\n        testHelpers.setCookieStoredLevel(\"info\");\n        window.localStorage.clear();\n        testHelpers.withFreshLog(function (log) {\n          expect(log).toBeAtLevel(\"info\");\n        });\n      });\n      it(\"the local storage level is set and the cookie level is not\", function (log) {\n        log.setLevel(\"error\");\n        expect(\"error\").toBeTheLevelStoredByLocalStorage();\n        expect(\"error\").not.toBeTheLevelStoredByCookie();\n      });\n    });\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/loglevel/test/local-storage-test.js"],"names":["define","testHelpers","describeIf","it","itWithFreshLog","originalConsole","window","console","isLocalStorageAvailable","beforeEach","jasmine","createSpy","addMatchers","toBeAtLevel","toBeTheLevelStoredByLocalStorage","toBeTheLevelStoredByCookie","clearStoredLevels","afterEach","describe","log","expect","not","toBeTheStoredLevel","setLevel","setStoredLevel","localStorage","toBe","setLocalStorageStoredLevel","isCookieStorageAvailable","setCookieStoredLevel","withFreshLog","clear"],"mappings":"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","sourcesContent":["\"use strict\";\n\ndefine(['test/test-helpers'], function(testHelpers) {\n    var describeIf = testHelpers.describeIf;\n    var it = testHelpers.itWithFreshLog;\n\n    var originalConsole = window.console;\n\n    describeIf(testHelpers.isLocalStorageAvailable(), \"Local storage persistence tests:\", function() {\n\n        beforeEach(function() {\n            window.console = {\"log\" : jasmine.createSpy(\"console.log\")};\n            this.addMatchers({\n                \"toBeAtLevel\" : testHelpers.toBeAtLevel,\n                \"toBeTheStoredLevel\" : testHelpers.toBeTheLevelStoredByLocalStorage,\n                \"toBeTheLevelStoredByLocalStorage\": testHelpers.toBeTheLevelStoredByLocalStorage,\n                \"toBeTheLevelStoredByCookie\": testHelpers.toBeTheLevelStoredByCookie\n            });\n\n            testHelpers.clearStoredLevels();\n        });\n\n        afterEach(function() {\n            window.console = originalConsole;\n        });\n\n        describe(\"If no level is saved\", function() {\n            it(\"log level is set to warn by default\", function(log) {\n                expect(log).toBeAtLevel(\"warn\");\n            });\n\n            it(\"warn is not persisted as the current level\", function(log) {\n                expect(\"warn\").not.toBeTheStoredLevel();\n            });\n\n            it(\"log can be set to info level\", function(log) {\n                log.setLevel(\"info\");\n                expect(log).toBeAtLevel(\"info\");\n            });\n\n            it(\"log.setLevel() sets a cookie with the given level\", function(log) {\n                log.setLevel(\"debug\");\n                expect(\"debug\").toBeTheStoredLevel();\n            });\n\n            it(\"log.setLevel() does not set a cookie if `persist` argument is false\", function(log) {\n                log.setLevel(\"debug\", false);\n                expect(\"debug\").not.toBeTheStoredLevel();\n            });\n        });\n        \n        describe(\"If trace level is saved\", function () {\n            beforeEach(function () {\n                testHelpers.setStoredLevel(\"trace\");\n            });\n            \n            it(\"trace is the default log level\", function (log) {\n                expect(log).toBeAtLevel(\"trace\");\n            });\n        });\n\n        describe(\"If debug level is saved\", function () {\n            beforeEach(function () {\n                testHelpers.setStoredLevel(\"debug\");\n            });\n\n            it(\"debug is the default log level\", function (log) {\n                expect(log).toBeAtLevel(\"debug\");\n            });\n        });\n        \n        describe(\"If info level is saved\", function() {\n            beforeEach(function() {\n                testHelpers.setStoredLevel(\"info\");\n            });\n\n            it(\"info is the default log level\", function(log) {\n                expect(log).toBeAtLevel(\"info\");\n            });\n\n            it(\"log can be changed to warn level\", function(log) {\n                log.setLevel(\"warn\");\n                expect(log).toBeAtLevel(\"warn\");\n            });\n\n            it(\"log.setLevel() overwrites the saved level\", function(log) {\n                log.setLevel(\"error\");\n\n                expect(\"error\").toBeTheStoredLevel();\n                expect(\"info\").not.toBeTheStoredLevel();\n            });\n\n            it(\"log.setLevel() does not overwrite the saved level if `persist` argument is false\", function(log) {\n                log.setLevel(\"error\", false);\n\n                expect(\"info\").toBeTheStoredLevel();\n                expect(\"error\").not.toBeTheStoredLevel();\n            });\n        });\n\n        describe(\"If warn level is saved\", function () {\n            beforeEach(function () {\n                testHelpers.setStoredLevel(\"warn\");\n            });\n\n            it(\"warn is the default log level\", function (log) {\n                expect(log).toBeAtLevel(\"warn\");\n            });\n        });\n\n        describe(\"If error level is saved\", function () {\n            beforeEach(function () {\n                testHelpers.setStoredLevel(\"error\");\n            });\n\n            it(\"error is the default log level\", function (log) {\n                expect(log).toBeAtLevel(\"error\");\n            });\n        });\n\n\n        describe(\"If the level is saved with other data\", function() {\n            beforeEach(function() {\n                window.localStorage['qwe'] = \"asd\";\n                window.localStorage['loglevel'] = \"ERROR\";\n                window.localStorage['msg'] = \"hello world\";\n            });\n\n            it(\"error is the default log level\", function(log) {\n                expect(log).toBeAtLevel(\"error\");\n            });\n\n            it(\"log can be changed to silent level\", function(log) {\n                log.setLevel(\"silent\");\n                expect(log).toBeAtLevel(\"silent\");\n            });\n\n            it(\"log.setLevel() overrides the saved level only\", function(log) {\n                log.setLevel(\"debug\");\n\n                expect('debug').toBeTheStoredLevel();\n                expect(window.localStorage['msg']).toBe(\"hello world\");\n            });\n        });\n\n        describe(\"If the level is stored incorrectly\", function() {\n            beforeEach(function() {\n                testHelpers.setLocalStorageStoredLevel('gibberish');\n            });\n\n            it(\"warn is the default log level\", function(log) {\n                expect(log).toBeAtLevel(\"warn\");\n            });\n\n            it(\"warn is not persisted as the current level\", function(log) {\n                expect(\"warn\").not.toBeTheStoredLevel();\n            });\n\n            it(\"log can be changed to info level\", function(log) {\n                log.setLevel(\"info\");\n                expect(log).toBeAtLevel(\"info\");\n            });\n\n            it(\"log.setLevel() overrides the saved level with the new level\", function(log) {\n                expect('debug').not.toBeTheStoredLevel();\n\n                log.setLevel(\"debug\");\n\n                expect('debug').toBeTheStoredLevel();\n            });\n        });\n\n        describeIf(testHelpers.isCookieStorageAvailable() && testHelpers.isLocalStorageAvailable(),\n                   \"if localStorage and cookies are both available\", function () {\n\n            it(\"the level stored in cookies is ignored if a local storage level is set\", function () {\n                testHelpers.setCookieStoredLevel(\"info\");\n                testHelpers.setLocalStorageStoredLevel(\"debug\");\n\n                testHelpers.withFreshLog(function (log) {\n                    expect(log).toBeAtLevel(\"debug\");\n                });\n            });\n\n            it(\"the level stored in cookies is used if no local storage level is set\", function () {\n                testHelpers.setCookieStoredLevel(\"info\");\n                window.localStorage.clear();\n\n                testHelpers.withFreshLog(function (log) {\n                    expect(log).toBeAtLevel(\"info\");\n                });\n            });\n\n            it(\"the local storage level is set and the cookie level is not\", function (log) {\n                log.setLevel(\"error\");\n                expect(\"error\").toBeTheLevelStoredByLocalStorage();\n                expect(\"error\").not.toBeTheLevelStoredByCookie();\n            });\n        });\n    });\n});\n"]},"metadata":{},"sourceType":"script"}