{"ast":null,"code":"'use strict';\n\nvar csstree = require('css-tree'),\n    csstools = require('../css-tools');\n\nvar CSSStyleDeclaration = function (node) {\n  this.parentNode = node;\n  this.properties = new Map();\n  this.hasSynced = false;\n  this.styleAttr = null;\n  this.styleValue = null;\n  this.parseError = false;\n};\n/**\n * Performs a deep clone of this object.\n *\n * @param parentNode the parentNode to assign to the cloned result\n */\n\n\nCSSStyleDeclaration.prototype.clone = function (parentNode) {\n  var node = this;\n  var nodeData = {};\n  Object.keys(node).forEach(function (key) {\n    if (key !== 'parentNode') {\n      nodeData[key] = node[key];\n    }\n  }); // Deep-clone node data.\n\n  nodeData = JSON.parse(JSON.stringify(nodeData));\n  var clone = new CSSStyleDeclaration(parentNode);\n  Object.assign(clone, nodeData);\n  return clone;\n};\n\nCSSStyleDeclaration.prototype.hasStyle = function () {\n  this.addStyleHandler();\n}; // attr.style\n\n\nCSSStyleDeclaration.prototype.addStyleHandler = function () {\n  this.styleAttr = {\n    // empty style attr\n    'name': 'style',\n    'value': null\n  };\n  Object.defineProperty(this.parentNode.attrs, 'style', {\n    get: this.getStyleAttr.bind(this),\n    set: this.setStyleAttr.bind(this),\n    enumerable: true,\n    configurable: true\n  });\n  this.addStyleValueHandler();\n}; // attr.style.value\n\n\nCSSStyleDeclaration.prototype.addStyleValueHandler = function () {\n  Object.defineProperty(this.styleAttr, 'value', {\n    get: this.getStyleValue.bind(this),\n    set: this.setStyleValue.bind(this),\n    enumerable: true,\n    configurable: true\n  });\n};\n\nCSSStyleDeclaration.prototype.getStyleAttr = function () {\n  return this.styleAttr;\n};\n\nCSSStyleDeclaration.prototype.setStyleAttr = function (newStyleAttr) {\n  this.setStyleValue(newStyleAttr.value); // must before applying value handler!\n\n  this.styleAttr = newStyleAttr;\n  this.addStyleValueHandler();\n  this.hasSynced = false; // raw css changed\n};\n\nCSSStyleDeclaration.prototype.getStyleValue = function () {\n  return this.getCssText();\n};\n\nCSSStyleDeclaration.prototype.setStyleValue = function (newValue) {\n  this.properties.clear(); // reset all existing properties\n\n  this.styleValue = newValue;\n  this.hasSynced = false; // raw css changed\n};\n\nCSSStyleDeclaration.prototype._loadCssText = function () {\n  if (this.hasSynced) {\n    return;\n  }\n\n  this.hasSynced = true; // must be set here to prevent loop in setProperty(...)\n\n  if (!this.styleValue || this.styleValue.length === 0) {\n    return;\n  }\n\n  var inlineCssStr = this.styleValue;\n  var declarations = {};\n\n  try {\n    declarations = csstree.parse(inlineCssStr, {\n      context: 'declarationList',\n      parseValue: false\n    });\n  } catch (parseError) {\n    this.parseError = parseError;\n    return;\n  }\n\n  this.parseError = false;\n  var self = this;\n  declarations.children.each(function (declaration) {\n    try {\n      var styleDeclaration = csstools.csstreeToStyleDeclaration(declaration);\n      self.setProperty(styleDeclaration.name, styleDeclaration.value, styleDeclaration.priority);\n    } catch (styleError) {\n      if (styleError.message !== 'Unknown node type: undefined') {\n        self.parseError = styleError;\n      }\n    }\n  });\n}; // only reads from properties\n\n/**\n * Get the textual representation of the declaration block (equivalent to .cssText attribute).\n *\n * @return {String} Textual representation of the declaration block (empty string for no properties)\n */\n\n\nCSSStyleDeclaration.prototype.getCssText = function () {\n  var properties = this.getProperties();\n\n  if (this.parseError) {\n    // in case of a parse error, pass through original styles\n    return this.styleValue;\n  }\n\n  var cssText = [];\n  properties.forEach(function (property, propertyName) {\n    var strImportant = property.priority === 'important' ? '!important' : '';\n    cssText.push(propertyName.trim() + ':' + property.value.trim() + strImportant);\n  });\n  return cssText.join(';');\n};\n\nCSSStyleDeclaration.prototype._handleParseError = function () {\n  if (this.parseError) {\n    console.warn('Warning: Parse error when parsing inline styles, style properties of this element cannot be used. The raw styles can still be get/set using .attr(\\'style\\').value. Error details: ' + this.parseError);\n  }\n};\n\nCSSStyleDeclaration.prototype._getProperty = function (propertyName) {\n  if (typeof propertyName === 'undefined') {\n    throw Error('1 argument required, but only 0 present.');\n  }\n\n  var properties = this.getProperties();\n\n  this._handleParseError();\n\n  var property = properties.get(propertyName.trim());\n  return property;\n};\n/**\n * Return the optional priority, \"important\".\n *\n * @param {String} propertyName representing the property name to be checked.\n * @return {String} priority that represents the priority (e.g. \"important\") if one exists. If none exists, returns the empty string.\n */\n\n\nCSSStyleDeclaration.prototype.getPropertyPriority = function (propertyName) {\n  var property = this._getProperty(propertyName);\n\n  return property ? property.priority : '';\n};\n/**\n * Return the property value given a property name.\n *\n * @param {String} propertyName representing the property name to be checked.\n * @return {String} value containing the value of the property. If not set, returns the empty string.\n */\n\n\nCSSStyleDeclaration.prototype.getPropertyValue = function (propertyName) {\n  var property = this._getProperty(propertyName);\n\n  return property ? property.value : null;\n};\n/**\n * Return a property name.\n *\n * @param {Number} index of the node to be fetched. The index is zero-based.\n * @return {String} propertyName that is the name of the CSS property at the specified index.\n */\n\n\nCSSStyleDeclaration.prototype.item = function (index) {\n  if (typeof index === 'undefined') {\n    throw Error('1 argument required, but only 0 present.');\n  }\n\n  var properties = this.getProperties();\n\n  this._handleParseError();\n\n  return Array.from(properties.keys())[index];\n};\n/**\n * Return all properties of the node.\n *\n * @return {Map} properties that is a Map with propertyName as key and property (propertyValue + propertyPriority) as value.\n */\n\n\nCSSStyleDeclaration.prototype.getProperties = function () {\n  this._loadCssText();\n\n  return this.properties;\n}; // writes to properties\n\n/**\n * Remove a property from the CSS declaration block.\n *\n * @param {String} propertyName representing the property name to be removed.\n * @return {String} oldValue equal to the value of the CSS property before it was removed.\n */\n\n\nCSSStyleDeclaration.prototype.removeProperty = function (propertyName) {\n  if (typeof propertyName === 'undefined') {\n    throw Error('1 argument required, but only 0 present.');\n  }\n\n  this.hasStyle();\n  var properties = this.getProperties();\n\n  this._handleParseError();\n\n  var oldValue = this.getPropertyValue(propertyName);\n  properties.delete(propertyName.trim());\n  return oldValue;\n};\n/**\n * Modify an existing CSS property or creates a new CSS property in the declaration block.\n *\n * @param {String} propertyName representing the CSS property name to be modified.\n * @param {String} [value] containing the new property value. If not specified, treated as the empty string. value must not contain \"!important\" -- that should be set using the priority parameter.\n * @param {String} [priority] allowing the \"important\" CSS priority to be set. If not specified, treated as the empty string.\n * @return {undefined}\n */\n\n\nCSSStyleDeclaration.prototype.setProperty = function (propertyName, value, priority) {\n  if (typeof propertyName === 'undefined') {\n    throw Error('propertyName argument required, but only not present.');\n  }\n\n  this.hasStyle();\n  var properties = this.getProperties();\n\n  this._handleParseError();\n\n  var property = {\n    value: value.trim(),\n    priority: priority.trim()\n  };\n  properties.set(propertyName.trim(), property);\n  return property;\n};\n\nmodule.exports = CSSStyleDeclaration;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/svgo/lib/svgo/css-style-declaration.js"],"names":["csstree","require","csstools","CSSStyleDeclaration","node","parentNode","properties","Map","hasSynced","styleAttr","styleValue","parseError","prototype","clone","nodeData","Object","keys","forEach","key","JSON","parse","stringify","assign","hasStyle","addStyleHandler","defineProperty","attrs","get","getStyleAttr","bind","set","setStyleAttr","enumerable","configurable","addStyleValueHandler","getStyleValue","setStyleValue","newStyleAttr","value","getCssText","newValue","clear","_loadCssText","length","inlineCssStr","declarations","context","parseValue","self","children","each","declaration","styleDeclaration","csstreeToStyleDeclaration","setProperty","name","priority","styleError","message","getProperties","cssText","property","propertyName","strImportant","push","trim","join","_handleParseError","console","warn","_getProperty","Error","getPropertyPriority","getPropertyValue","item","index","Array","from","removeProperty","oldValue","delete","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar csstree = require('css-tree'),\n    csstools = require('../css-tools');\n\n\nvar CSSStyleDeclaration = function(node) {\n    this.parentNode = node;\n\n    this.properties = new Map();\n    this.hasSynced = false;\n\n    this.styleAttr = null;\n    this.styleValue = null;\n\n    this.parseError = false;\n};\n\n/**\n * Performs a deep clone of this object.\n *\n * @param parentNode the parentNode to assign to the cloned result\n */\nCSSStyleDeclaration.prototype.clone = function(parentNode) {\n    var node = this;\n    var nodeData = {};\n\n    Object.keys(node).forEach(function(key) {\n        if (key !== 'parentNode') {\n            nodeData[key] = node[key];\n        }\n    });\n\n    // Deep-clone node data.\n    nodeData = JSON.parse(JSON.stringify(nodeData));\n\n    var clone = new CSSStyleDeclaration(parentNode);\n    Object.assign(clone, nodeData);\n    return clone;\n};\n\nCSSStyleDeclaration.prototype.hasStyle = function() {\n    this.addStyleHandler();\n};\n\n\n\n\n// attr.style\n\nCSSStyleDeclaration.prototype.addStyleHandler = function() {\n\n    this.styleAttr = { // empty style attr\n        'name': 'style',\n        'value': null\n    };\n\n    Object.defineProperty(this.parentNode.attrs, 'style', {\n        get: this.getStyleAttr.bind(this),\n        set: this.setStyleAttr.bind(this),\n        enumerable: true,\n        configurable: true\n    });\n\n    this.addStyleValueHandler();\n};\n\n// attr.style.value\n\nCSSStyleDeclaration.prototype.addStyleValueHandler = function() {\n\n    Object.defineProperty(this.styleAttr, 'value', {\n        get: this.getStyleValue.bind(this),\n        set: this.setStyleValue.bind(this),\n        enumerable: true,\n        configurable: true\n    });\n};\n\nCSSStyleDeclaration.prototype.getStyleAttr = function() {\n    return this.styleAttr;\n};\n\nCSSStyleDeclaration.prototype.setStyleAttr = function(newStyleAttr) {\n    this.setStyleValue(newStyleAttr.value); // must before applying value handler!\n\n    this.styleAttr = newStyleAttr;\n    this.addStyleValueHandler();\n    this.hasSynced = false; // raw css changed\n};\n\nCSSStyleDeclaration.prototype.getStyleValue = function() {\n    return this.getCssText();\n};\n\nCSSStyleDeclaration.prototype.setStyleValue = function(newValue) {\n    this.properties.clear(); // reset all existing properties\n    this.styleValue = newValue;\n    this.hasSynced = false; // raw css changed\n};\n\n\n\n\nCSSStyleDeclaration.prototype._loadCssText = function() {\n    if (this.hasSynced) {\n        return;\n    }\n    this.hasSynced = true; // must be set here to prevent loop in setProperty(...)\n\n    if (!this.styleValue || this.styleValue.length === 0) {\n        return;\n    }\n    var inlineCssStr = this.styleValue;\n\n    var declarations = {};\n    try {\n        declarations = csstree.parse(inlineCssStr, {\n            context: 'declarationList',\n            parseValue: false\n        });\n    } catch (parseError) {\n        this.parseError = parseError;\n        return;\n    }\n    this.parseError = false;\n\n    var self = this;\n    declarations.children.each(function(declaration) {\n        try {\n          var styleDeclaration = csstools.csstreeToStyleDeclaration(declaration);\n          self.setProperty(styleDeclaration.name, styleDeclaration.value, styleDeclaration.priority);\n        } catch(styleError) {\n            if(styleError.message !== 'Unknown node type: undefined') {\n                self.parseError = styleError;\n            }\n        }\n    });\n};\n\n\n// only reads from properties\n\n/**\n * Get the textual representation of the declaration block (equivalent to .cssText attribute).\n *\n * @return {String} Textual representation of the declaration block (empty string for no properties)\n */\nCSSStyleDeclaration.prototype.getCssText = function() {\n    var properties = this.getProperties();\n\n    if (this.parseError) {\n        // in case of a parse error, pass through original styles\n        return this.styleValue;\n    }\n\n    var cssText = [];\n    properties.forEach(function(property, propertyName) {\n        var strImportant = property.priority === 'important' ? '!important' : '';\n        cssText.push(propertyName.trim() + ':' + property.value.trim() + strImportant);\n    });\n    return cssText.join(';');\n};\n\nCSSStyleDeclaration.prototype._handleParseError = function() {\n    if (this.parseError) {\n        console.warn('Warning: Parse error when parsing inline styles, style properties of this element cannot be used. The raw styles can still be get/set using .attr(\\'style\\').value. Error details: ' + this.parseError);\n    }\n};\n\n\nCSSStyleDeclaration.prototype._getProperty = function(propertyName) {\n    if(typeof propertyName === 'undefined') {\n        throw Error('1 argument required, but only 0 present.');\n    }\n\n    var properties = this.getProperties();\n    this._handleParseError();\n\n    var property = properties.get(propertyName.trim());\n    return property;\n};\n\n/**\n * Return the optional priority, \"important\".\n *\n * @param {String} propertyName representing the property name to be checked.\n * @return {String} priority that represents the priority (e.g. \"important\") if one exists. If none exists, returns the empty string.\n */\nCSSStyleDeclaration.prototype.getPropertyPriority = function(propertyName) {\n    var property = this._getProperty(propertyName);\n    return property ? property.priority : '';\n};\n\n/**\n * Return the property value given a property name.\n *\n * @param {String} propertyName representing the property name to be checked.\n * @return {String} value containing the value of the property. If not set, returns the empty string.\n */\nCSSStyleDeclaration.prototype.getPropertyValue = function(propertyName) {\n    var property = this._getProperty(propertyName);\n    return property ? property.value : null;\n};\n\n/**\n * Return a property name.\n *\n * @param {Number} index of the node to be fetched. The index is zero-based.\n * @return {String} propertyName that is the name of the CSS property at the specified index.\n */\nCSSStyleDeclaration.prototype.item = function(index) {\n    if(typeof index === 'undefined') {\n        throw Error('1 argument required, but only 0 present.');\n    }\n\n    var properties = this.getProperties();\n    this._handleParseError();\n\n    return Array.from(properties.keys())[index];\n};\n\n/**\n * Return all properties of the node.\n *\n * @return {Map} properties that is a Map with propertyName as key and property (propertyValue + propertyPriority) as value.\n */\nCSSStyleDeclaration.prototype.getProperties = function() {\n    this._loadCssText();\n    return this.properties;\n};\n\n\n// writes to properties\n\n/**\n * Remove a property from the CSS declaration block.\n *\n * @param {String} propertyName representing the property name to be removed.\n * @return {String} oldValue equal to the value of the CSS property before it was removed.\n */\nCSSStyleDeclaration.prototype.removeProperty = function(propertyName) {\n    if(typeof propertyName === 'undefined') {\n        throw Error('1 argument required, but only 0 present.');\n    }\n\n    this.hasStyle();\n\n    var properties = this.getProperties();\n    this._handleParseError();\n\n    var oldValue = this.getPropertyValue(propertyName);\n    properties.delete(propertyName.trim());\n    return oldValue;\n};\n\n/**\n * Modify an existing CSS property or creates a new CSS property in the declaration block.\n *\n * @param {String} propertyName representing the CSS property name to be modified.\n * @param {String} [value] containing the new property value. If not specified, treated as the empty string. value must not contain \"!important\" -- that should be set using the priority parameter.\n * @param {String} [priority] allowing the \"important\" CSS priority to be set. If not specified, treated as the empty string.\n * @return {undefined}\n */\nCSSStyleDeclaration.prototype.setProperty = function(propertyName, value, priority) {\n    if(typeof propertyName === 'undefined') {\n        throw Error('propertyName argument required, but only not present.');\n    }\n\n    this.hasStyle();\n\n    var properties = this.getProperties();\n    this._handleParseError();\n\n    var property = {\n        value: value.trim(),\n        priority: priority.trim()\n    };\n    properties.set(propertyName.trim(), property);\n\n    return property;\n};\n\n\nmodule.exports = CSSStyleDeclaration;\n"]},"metadata":{},"sourceType":"script"}