{"ast":null,"code":"var test = require('tape');\n\nvar fs = require('fs');\n\nvar parseKeys = require('parse-asn1');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar path = require('path');\n\nrequire('./nodeTests');\n\nvar rsa1024 = {\n  private: fs.readFileSync(path.join(__dirname, 'rsa.1024.priv')),\n  public: fs.readFileSync(path.join(__dirname, 'rsa.1024.pub'))\n};\nvar rsa1024priv = {\n  private: fs.readFileSync(path.join(__dirname, 'rsa.1024.priv')),\n  public: fs.readFileSync(path.join(__dirname, 'rsa.1024.priv'))\n};\nvar rsa2028 = {\n  private: fs.readFileSync(path.join(__dirname, 'rsa.2028.priv')),\n  public: fs.readFileSync(path.join(__dirname, 'rsa.2028.pub'))\n};\nvar nonrsa1024 = {\n  private: fs.readFileSync(path.join(__dirname, '1024.priv')),\n  public: fs.readFileSync(path.join(__dirname, '1024.pub'))\n};\nvar nonrsa1024str = {\n  private: fs.readFileSync(path.join(__dirname, '1024.priv')).toString(),\n  public: fs.readFileSync(path.join(__dirname, '1024.pub')).toString()\n};\nvar pass1024 = {\n  private: {\n    passphrase: 'fooo',\n    key: fs.readFileSync(path.join(__dirname, 'pass.1024.priv'))\n  },\n  public: fs.readFileSync(path.join(__dirname, 'pass.1024.pub'))\n};\nvar pass2028 = {\n  private: {\n    passphrase: 'password',\n    key: fs.readFileSync(path.join(__dirname, 'rsa.pass.priv'))\n  },\n  public: fs.readFileSync(path.join(__dirname, 'rsa.pass.pub'))\n};\n\nvar nodeCrypto = require('../');\n\nvar myCrypto = require('../browser');\n\nfunction _testIt(keys, message, t) {\n  var pub = keys.public;\n  var priv = keys.private;\n  t.test(message.toString(), function (t) {\n    t.plan(8);\n    var myEnc = myCrypto.publicEncrypt(pub, message);\n    var nodeEnc = nodeCrypto.publicEncrypt(pub, message);\n    t.equals(myCrypto.privateDecrypt(priv, myEnc).toString('hex'), message.toString('hex'), 'my decrypter my message');\n    t.equals(myCrypto.privateDecrypt(priv, nodeEnc).toString('hex'), message.toString('hex'), 'my decrypter node\\'s message');\n    t.equals(nodeCrypto.privateDecrypt(priv, myEnc).toString('hex'), message.toString('hex'), 'node decrypter my message');\n    t.equals(nodeCrypto.privateDecrypt(priv, nodeEnc).toString('hex'), message.toString('hex'), 'node decrypter node\\'s message');\n    myEnc = myCrypto.privateEncrypt(priv, message);\n    nodeEnc = nodeCrypto.privateEncrypt(priv, message);\n    t.equals(myCrypto.publicDecrypt(pub, myEnc).toString('hex'), message.toString('hex'), 'reverse methods my decrypter my message');\n    t.equals(myCrypto.publicDecrypt(pub, nodeEnc).toString('hex'), message.toString('hex'), 'reverse methods my decrypter node\\'s message');\n    t.equals(nodeCrypto.publicDecrypt(pub, myEnc).toString('hex'), message.toString('hex'), 'reverse methods node decrypter my message');\n    t.equals(nodeCrypto.publicDecrypt(pub, nodeEnc).toString('hex'), message.toString('hex'), 'reverse methods node decrypter node\\'s message');\n  });\n}\n\nfunction testIt(keys, message, t) {\n  _testIt(keys, message, t);\n\n  _testIt(paddingObject(keys, 1), Buffer.concat([message, Buffer.from(' with RSA_PKCS1_PADDING')]), t);\n\n  var parsedKey = parseKeys(keys.public);\n  var k = parsedKey.modulus.byteLength();\n  var zBuf = Buffer.alloc(k);\n  var msg = Buffer.concat([zBuf, message, Buffer.from(' with no padding')]).slice(-k);\n\n  _testIt(paddingObject(keys, 3), msg, t);\n}\n\nfunction paddingObject(keys, padding) {\n  return {\n    public: addPadding(keys.public, padding),\n    private: addPadding(keys.private, padding)\n  };\n}\n\nfunction addPadding(key, padding) {\n  if (typeof key === 'string' || Buffer.isBuffer(key)) {\n    return {\n      key: key,\n      padding: padding\n    };\n  }\n\n  var out = {\n    key: key.key,\n    padding: padding\n  };\n\n  if ('passphrase' in key) {\n    out.passphrase = key.passphrase;\n  }\n\n  return out;\n}\n\nfunction testRun(i) {\n  test('run ' + i, function (t) {\n    testIt(rsa1024priv, Buffer.from('1024 2 private keys'), t);\n    testIt(rsa1024, Buffer.from('1024 keys'), t);\n    testIt(rsa2028, Buffer.from('2028 keys'), t);\n    testIt(nonrsa1024, Buffer.from('1024 keys non-rsa key'), t);\n    testIt(pass1024, Buffer.from('1024 keys and password'), t);\n    testIt(nonrsa1024str, Buffer.from('1024 keys non-rsa key as a string'), t);\n    testIt(pass2028, Buffer.from('2028 rsa key with variant passwords'), t);\n  });\n}\n\nvar i = 0;\nvar num = 20;\n\nwhile (++i <= num) {\n  testRun(i);\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/public-encrypt/test/index.js"],"names":["test","require","fs","parseKeys","Buffer","path","rsa1024","private","readFileSync","join","__dirname","public","rsa1024priv","rsa2028","nonrsa1024","nonrsa1024str","toString","pass1024","passphrase","key","pass2028","nodeCrypto","myCrypto","_testIt","keys","message","t","pub","priv","plan","myEnc","publicEncrypt","nodeEnc","equals","privateDecrypt","privateEncrypt","publicDecrypt","testIt","paddingObject","concat","from","parsedKey","k","modulus","byteLength","zBuf","alloc","msg","slice","padding","addPadding","isBuffer","out","testRun","i","num"],"mappings":"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","sourcesContent":["var test = require('tape')\nvar fs = require('fs')\nvar parseKeys = require('parse-asn1')\nvar Buffer = require('safe-buffer').Buffer\nvar path = require('path')\n\nrequire('./nodeTests')\nvar rsa1024 = {\n  private: fs.readFileSync(path.join(__dirname, 'rsa.1024.priv')),\n  public: fs.readFileSync(path.join(__dirname, 'rsa.1024.pub'))\n}\nvar rsa1024priv = {\n  private: fs.readFileSync(path.join(__dirname, 'rsa.1024.priv')),\n  public: fs.readFileSync(path.join(__dirname, 'rsa.1024.priv'))\n}\n\nvar rsa2028 = {\n  private: fs.readFileSync(path.join(__dirname, 'rsa.2028.priv')),\n  public: fs.readFileSync(path.join(__dirname, 'rsa.2028.pub'))\n}\nvar nonrsa1024 = {\n  private: fs.readFileSync(path.join(__dirname, '1024.priv')),\n  public: fs.readFileSync(path.join(__dirname, '1024.pub'))\n}\nvar nonrsa1024str = {\n  private: fs.readFileSync(path.join(__dirname, '1024.priv')).toString(),\n  public: fs.readFileSync(path.join(__dirname, '1024.pub')).toString()\n}\nvar pass1024 = {\n  private: {\n    passphrase: 'fooo',\n    key: fs.readFileSync(path.join(__dirname, 'pass.1024.priv'))\n  },\n  public: fs.readFileSync(path.join(__dirname, 'pass.1024.pub'))\n}\nvar pass2028 = {\n  private: {\n    passphrase: 'password',\n    key: fs.readFileSync(path.join(__dirname, 'rsa.pass.priv'))\n  },\n  public: fs.readFileSync(path.join(__dirname, 'rsa.pass.pub'))\n}\n\nvar nodeCrypto = require('../')\nvar myCrypto = require('../browser')\nfunction _testIt (keys, message, t) {\n  var pub = keys.public\n  var priv = keys.private\n  t.test(message.toString(), function (t) {\n    t.plan(8)\n\n    var myEnc = myCrypto.publicEncrypt(pub, message)\n    var nodeEnc = nodeCrypto.publicEncrypt(pub, message)\n    t.equals(myCrypto.privateDecrypt(priv, myEnc).toString('hex'), message.toString('hex'), 'my decrypter my message')\n    t.equals(myCrypto.privateDecrypt(priv, nodeEnc).toString('hex'), message.toString('hex'), 'my decrypter node\\'s message')\n    t.equals(nodeCrypto.privateDecrypt(priv, myEnc).toString('hex'), message.toString('hex'), 'node decrypter my message')\n    t.equals(nodeCrypto.privateDecrypt(priv, nodeEnc).toString('hex'), message.toString('hex'), 'node decrypter node\\'s message')\n    myEnc = myCrypto.privateEncrypt(priv, message)\n    nodeEnc = nodeCrypto.privateEncrypt(priv, message)\n    t.equals(myCrypto.publicDecrypt(pub, myEnc).toString('hex'), message.toString('hex'), 'reverse methods my decrypter my message')\n    t.equals(myCrypto.publicDecrypt(pub, nodeEnc).toString('hex'), message.toString('hex'), 'reverse methods my decrypter node\\'s message')\n    t.equals(nodeCrypto.publicDecrypt(pub, myEnc).toString('hex'), message.toString('hex'), 'reverse methods node decrypter my message')\n    t.equals(nodeCrypto.publicDecrypt(pub, nodeEnc).toString('hex'), message.toString('hex'), 'reverse methods node decrypter node\\'s message')\n  })\n}\nfunction testIt (keys, message, t) {\n  _testIt(keys, message, t)\n  _testIt(paddingObject(keys, 1), Buffer.concat([message, Buffer.from(' with RSA_PKCS1_PADDING')]), t)\n  var parsedKey = parseKeys(keys.public)\n  var k = parsedKey.modulus.byteLength()\n  var zBuf = Buffer.alloc(k)\n  var msg = Buffer.concat([zBuf, message, Buffer.from(' with no padding')]).slice(-k)\n  _testIt(paddingObject(keys, 3), msg, t)\n}\nfunction paddingObject (keys, padding) {\n  return {\n    public: addPadding(keys.public, padding),\n    private: addPadding(keys.private, padding)\n  }\n}\nfunction addPadding (key, padding) {\n  if (typeof key === 'string' || Buffer.isBuffer(key)) {\n    return {\n      key: key,\n      padding: padding\n    }\n  }\n  var out = {\n    key: key.key,\n    padding: padding\n  }\n  if ('passphrase' in key) {\n    out.passphrase = key.passphrase\n  }\n  return out\n}\nfunction testRun (i) {\n  test('run ' + i, function (t) {\n    testIt(rsa1024priv, Buffer.from('1024 2 private keys'), t)\n    testIt(rsa1024, Buffer.from('1024 keys'), t)\n    testIt(rsa2028, Buffer.from('2028 keys'), t)\n    testIt(nonrsa1024, Buffer.from('1024 keys non-rsa key'), t)\n    testIt(pass1024, Buffer.from('1024 keys and password'), t)\n    testIt(nonrsa1024str, Buffer.from('1024 keys non-rsa key as a string'), t)\n    testIt(pass2028, Buffer.from('2028 rsa key with variant passwords'), t)\n  })\n}\n\nvar i = 0\nvar num = 20\nwhile (++i <= num) {\n  testRun(i)\n}\n"]},"metadata":{},"sourceType":"script"}