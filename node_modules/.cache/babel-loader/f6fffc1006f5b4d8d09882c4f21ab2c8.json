{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _base_reporter = _interopRequireDefault(require('./base_reporter'));\n\nvar _Status = _interopRequireDefault(require('./Status'));\n\nvar _get_result_header = _interopRequireDefault(require('./get_result_header'));\n\nvar _get_snapshot_status = _interopRequireDefault(require('./get_snapshot_status'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst TITLE_BULLET = _chalk().default.bold('\\u25cf ');\n\nclass DefaultReporter extends _base_reporter.default {\n  // ANSI clear sequence for the last printed status\n  constructor(globalConfig) {\n    super();\n\n    _defineProperty(this, '_clear', void 0);\n\n    _defineProperty(this, '_err', void 0);\n\n    _defineProperty(this, '_globalConfig', void 0);\n\n    _defineProperty(this, '_out', void 0);\n\n    _defineProperty(this, '_status', void 0);\n\n    _defineProperty(this, '_bufferedOutput', void 0);\n\n    this._globalConfig = globalConfig;\n    this._clear = '';\n    this._out = process.stdout.write.bind(process.stdout);\n    this._err = process.stderr.write.bind(process.stderr);\n    this._status = new _Status.default();\n    this._bufferedOutput = new Set();\n\n    this._wrapStdio(process.stdout);\n\n    this._wrapStdio(process.stderr);\n\n    this._status.onChange(() => {\n      this._clearStatus();\n\n      this._printStatus();\n    });\n  }\n\n  _wrapStdio(stream) {\n    const originalWrite = stream.write;\n    let buffer = [];\n    let timeout = null;\n\n    const flushBufferedOutput = () => {\n      const string = buffer.join('');\n      buffer = []; // This is to avoid conflicts between random output and status text\n\n      this._clearStatus();\n\n      if (string) {\n        originalWrite.call(stream, string);\n      }\n\n      this._printStatus();\n\n      this._bufferedOutput.delete(flushBufferedOutput);\n    };\n\n    this._bufferedOutput.add(flushBufferedOutput);\n\n    const debouncedFlush = () => {\n      // If the process blows up no errors would be printed.\n      // There should be a smart way to buffer stderr, but for now\n      // we just won't buffer it.\n      if (stream === process.stderr) {\n        flushBufferedOutput();\n      } else {\n        if (!timeout) {\n          timeout = setTimeout(() => {\n            flushBufferedOutput();\n            timeout = null;\n          }, 100);\n        }\n      }\n    };\n\n    stream.write = chunk => {\n      buffer.push(chunk);\n      debouncedFlush();\n      return true;\n    };\n  } // Don't wait for the debounced call and flush all output immediately.\n\n\n  forceFlushBufferedOutput() {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = this._bufferedOutput[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const flushBufferedOutput = _step.value;\n        flushBufferedOutput();\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  _clearStatus() {\n    if (_jestUtil().isInteractive) {\n      if (this._globalConfig.useStderr) {\n        this._err(this._clear);\n      } else {\n        this._out(this._clear);\n      }\n    }\n  }\n\n  _printStatus() {\n    const _this$_status$get = this._status.get(),\n          content = _this$_status$get.content,\n          clear = _this$_status$get.clear;\n\n    this._clear = clear;\n\n    if (_jestUtil().isInteractive) {\n      if (this._globalConfig.useStderr) {\n        this._err(content);\n      } else {\n        this._out(content);\n      }\n    }\n  }\n\n  onRunStart(aggregatedResults, options) {\n    this._status.runStarted(aggregatedResults, options);\n  }\n\n  onTestStart(test) {\n    this._status.testStarted(test.path, test.context.config);\n  }\n\n  onRunComplete() {\n    this.forceFlushBufferedOutput();\n\n    this._status.runFinished();\n\n    process.stdout.write = this._out;\n    process.stderr.write = this._err;\n    (0, _jestUtil().clearLine)(process.stderr);\n  }\n\n  onTestResult(test, testResult, aggregatedResults) {\n    this.testFinished(test.context.config, testResult, aggregatedResults);\n\n    if (!testResult.skipped) {\n      this.printTestFileHeader(testResult.testFilePath, test.context.config, testResult);\n      this.printTestFileFailureMessage(testResult.testFilePath, test.context.config, testResult);\n    }\n\n    this.forceFlushBufferedOutput();\n  }\n\n  testFinished(config, testResult, aggregatedResults) {\n    this._status.testFinished(config, testResult, aggregatedResults);\n  }\n\n  printTestFileHeader(_testPath, config, result) {\n    this.log((0, _get_result_header.default)(result, this._globalConfig, config));\n\n    if (result.console) {\n      this.log('  ' + TITLE_BULLET + 'Console\\n\\n' + (0, _jestUtil().getConsoleOutput)(config.cwd, !!this._globalConfig.verbose, result.console));\n    }\n  }\n\n  printTestFileFailureMessage(_testPath, _config, result) {\n    if (result.failureMessage) {\n      this.log(result.failureMessage);\n    }\n\n    const didUpdate = this._globalConfig.updateSnapshot === 'all';\n    const snapshotStatuses = (0, _get_snapshot_status.default)(result.snapshot, didUpdate);\n    snapshotStatuses.forEach(this.log);\n  }\n\n}\n\nexports.default = DefaultReporter;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/@jest/reporters/build/default_reporter.js"],"names":["Object","defineProperty","exports","value","default","_jestUtil","data","require","_chalk","_interopRequireDefault","_base_reporter","_Status","_get_result_header","_get_snapshot_status","obj","__esModule","_defineProperty","key","enumerable","configurable","writable","TITLE_BULLET","bold","DefaultReporter","constructor","globalConfig","_globalConfig","_clear","_out","process","stdout","write","bind","_err","stderr","_status","_bufferedOutput","Set","_wrapStdio","onChange","_clearStatus","_printStatus","stream","originalWrite","buffer","timeout","flushBufferedOutput","string","join","call","delete","add","debouncedFlush","setTimeout","chunk","push","forceFlushBufferedOutput","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","err","return","isInteractive","useStderr","_this$_status$get","get","content","clear","onRunStart","aggregatedResults","options","runStarted","onTestStart","test","testStarted","path","context","config","onRunComplete","runFinished","clearLine","onTestResult","testResult","testFinished","skipped","printTestFileHeader","testFilePath","printTestFileFailureMessage","_testPath","result","log","console","getConsoleOutput","cwd","verbose","_config","failureMessage","didUpdate","updateSnapshot","snapshotStatuses","snapshot","forEach"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _base_reporter = _interopRequireDefault(require('./base_reporter'));\n\nvar _Status = _interopRequireDefault(require('./Status'));\n\nvar _get_result_header = _interopRequireDefault(require('./get_result_header'));\n\nvar _get_snapshot_status = _interopRequireDefault(\n  require('./get_snapshot_status')\n);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nconst TITLE_BULLET = _chalk().default.bold('\\u25cf ');\n\nclass DefaultReporter extends _base_reporter.default {\n  // ANSI clear sequence for the last printed status\n  constructor(globalConfig) {\n    super();\n\n    _defineProperty(this, '_clear', void 0);\n\n    _defineProperty(this, '_err', void 0);\n\n    _defineProperty(this, '_globalConfig', void 0);\n\n    _defineProperty(this, '_out', void 0);\n\n    _defineProperty(this, '_status', void 0);\n\n    _defineProperty(this, '_bufferedOutput', void 0);\n\n    this._globalConfig = globalConfig;\n    this._clear = '';\n    this._out = process.stdout.write.bind(process.stdout);\n    this._err = process.stderr.write.bind(process.stderr);\n    this._status = new _Status.default();\n    this._bufferedOutput = new Set();\n\n    this._wrapStdio(process.stdout);\n\n    this._wrapStdio(process.stderr);\n\n    this._status.onChange(() => {\n      this._clearStatus();\n\n      this._printStatus();\n    });\n  }\n\n  _wrapStdio(stream) {\n    const originalWrite = stream.write;\n    let buffer = [];\n    let timeout = null;\n\n    const flushBufferedOutput = () => {\n      const string = buffer.join('');\n      buffer = []; // This is to avoid conflicts between random output and status text\n\n      this._clearStatus();\n\n      if (string) {\n        originalWrite.call(stream, string);\n      }\n\n      this._printStatus();\n\n      this._bufferedOutput.delete(flushBufferedOutput);\n    };\n\n    this._bufferedOutput.add(flushBufferedOutput);\n\n    const debouncedFlush = () => {\n      // If the process blows up no errors would be printed.\n      // There should be a smart way to buffer stderr, but for now\n      // we just won't buffer it.\n      if (stream === process.stderr) {\n        flushBufferedOutput();\n      } else {\n        if (!timeout) {\n          timeout = setTimeout(() => {\n            flushBufferedOutput();\n            timeout = null;\n          }, 100);\n        }\n      }\n    };\n\n    stream.write = chunk => {\n      buffer.push(chunk);\n      debouncedFlush();\n      return true;\n    };\n  } // Don't wait for the debounced call and flush all output immediately.\n\n  forceFlushBufferedOutput() {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (\n        var _iterator = this._bufferedOutput[Symbol.iterator](), _step;\n        !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n        _iteratorNormalCompletion = true\n      ) {\n        const flushBufferedOutput = _step.value;\n        flushBufferedOutput();\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  _clearStatus() {\n    if (_jestUtil().isInteractive) {\n      if (this._globalConfig.useStderr) {\n        this._err(this._clear);\n      } else {\n        this._out(this._clear);\n      }\n    }\n  }\n\n  _printStatus() {\n    const _this$_status$get = this._status.get(),\n      content = _this$_status$get.content,\n      clear = _this$_status$get.clear;\n\n    this._clear = clear;\n\n    if (_jestUtil().isInteractive) {\n      if (this._globalConfig.useStderr) {\n        this._err(content);\n      } else {\n        this._out(content);\n      }\n    }\n  }\n\n  onRunStart(aggregatedResults, options) {\n    this._status.runStarted(aggregatedResults, options);\n  }\n\n  onTestStart(test) {\n    this._status.testStarted(test.path, test.context.config);\n  }\n\n  onRunComplete() {\n    this.forceFlushBufferedOutput();\n\n    this._status.runFinished();\n\n    process.stdout.write = this._out;\n    process.stderr.write = this._err;\n    (0, _jestUtil().clearLine)(process.stderr);\n  }\n\n  onTestResult(test, testResult, aggregatedResults) {\n    this.testFinished(test.context.config, testResult, aggregatedResults);\n\n    if (!testResult.skipped) {\n      this.printTestFileHeader(\n        testResult.testFilePath,\n        test.context.config,\n        testResult\n      );\n      this.printTestFileFailureMessage(\n        testResult.testFilePath,\n        test.context.config,\n        testResult\n      );\n    }\n\n    this.forceFlushBufferedOutput();\n  }\n\n  testFinished(config, testResult, aggregatedResults) {\n    this._status.testFinished(config, testResult, aggregatedResults);\n  }\n\n  printTestFileHeader(_testPath, config, result) {\n    this.log(\n      (0, _get_result_header.default)(result, this._globalConfig, config)\n    );\n\n    if (result.console) {\n      this.log(\n        '  ' +\n          TITLE_BULLET +\n          'Console\\n\\n' +\n          (0, _jestUtil().getConsoleOutput)(\n            config.cwd,\n            !!this._globalConfig.verbose,\n            result.console\n          )\n      );\n    }\n  }\n\n  printTestFileFailureMessage(_testPath, _config, result) {\n    if (result.failureMessage) {\n      this.log(result.failureMessage);\n    }\n\n    const didUpdate = this._globalConfig.updateSnapshot === 'all';\n    const snapshotStatuses = (0, _get_snapshot_status.default)(\n      result.snapshot,\n      didUpdate\n    );\n    snapshotStatuses.forEach(this.log);\n  }\n}\n\nexports.default = DefaultReporter;\n"]},"metadata":{},"sourceType":"script"}