{"ast":null,"code":"/**\n * @fileoverview Rule to flag use constant conditions\n * @author Christian Schulz <http://rndm.de>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst EQUALITY_OPERATORS = [\"===\", \"!==\", \"==\", \"!=\"];\nconst RELATIONAL_OPERATORS = [\">\", \"<\", \">=\", \"<=\", \"in\", \"instanceof\"]; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow constant expressions in conditions\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-constant-condition\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        checkLoops: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpected: \"Unexpected constant condition.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0] || {},\n          checkLoops = options.checkLoops !== false,\n          loopSetStack = [];\n    let loopsInCurrentScope = new Set(); //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Checks if a branch node of LogicalExpression short circuits the whole condition\n     * @param {ASTNode} node The branch of main condition which needs to be checked\n     * @param {string} operator The operator of the main LogicalExpression.\n     * @returns {boolean} true when condition short circuits whole condition\n     */\n\n    function isLogicalIdentity(node, operator) {\n      switch (node.type) {\n        case \"Literal\":\n          return operator === \"||\" && node.value === true || operator === \"&&\" && node.value === false;\n\n        case \"UnaryExpression\":\n          return operator === \"&&\" && node.operator === \"void\";\n\n        case \"LogicalExpression\":\n          return isLogicalIdentity(node.left, node.operator) || isLogicalIdentity(node.right, node.operator);\n        // no default\n      }\n\n      return false;\n    }\n    /**\n     * Checks if a node has a constant truthiness value.\n     * @param {ASTNode} node The AST node to check.\n     * @param {boolean} inBooleanPosition `false` if checking branch of a condition.\n     *  `true` in all other cases\n     * @returns {Bool} true when node's truthiness is constant\n     * @private\n     */\n\n\n    function isConstant(node, inBooleanPosition) {\n      switch (node.type) {\n        case \"Literal\":\n        case \"ArrowFunctionExpression\":\n        case \"FunctionExpression\":\n        case \"ObjectExpression\":\n        case \"ArrayExpression\":\n          return true;\n\n        case \"UnaryExpression\":\n          if (node.operator === \"void\") {\n            return true;\n          }\n\n          return node.operator === \"typeof\" && inBooleanPosition || isConstant(node.argument, true);\n\n        case \"BinaryExpression\":\n          return isConstant(node.left, false) && isConstant(node.right, false) && node.operator !== \"in\";\n\n        case \"LogicalExpression\":\n          {\n            const isLeftConstant = isConstant(node.left, inBooleanPosition);\n            const isRightConstant = isConstant(node.right, inBooleanPosition);\n            const isLeftShortCircuit = isLeftConstant && isLogicalIdentity(node.left, node.operator);\n            const isRightShortCircuit = isRightConstant && isLogicalIdentity(node.right, node.operator);\n            return isLeftConstant && isRightConstant || // in the case of an \"OR\", we need to know if the right constant value is truthy\n            node.operator === \"||\" && isRightConstant && node.right.value && (!node.parent || node.parent.type !== \"BinaryExpression\" || !(EQUALITY_OPERATORS.includes(node.parent.operator) || RELATIONAL_OPERATORS.includes(node.parent.operator))) || isLeftShortCircuit || isRightShortCircuit;\n          }\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\" && isConstant(node.right, inBooleanPosition);\n\n        case \"SequenceExpression\":\n          return isConstant(node.expressions[node.expressions.length - 1], inBooleanPosition);\n        // no default\n      }\n\n      return false;\n    }\n    /**\n     * Tracks when the given node contains a constant condition.\n     * @param {ASTNode} node The AST node to check.\n     * @returns {void}\n     * @private\n     */\n\n\n    function trackConstantConditionLoop(node) {\n      if (node.test && isConstant(node.test, true)) {\n        loopsInCurrentScope.add(node);\n      }\n    }\n    /**\n     * Reports when the set contains the given constant condition node\n     * @param {ASTNode} node The AST node to check.\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkConstantConditionLoopInSet(node) {\n      if (loopsInCurrentScope.has(node)) {\n        loopsInCurrentScope.delete(node);\n        context.report({\n          node: node.test,\n          messageId: \"unexpected\"\n        });\n      }\n    }\n    /**\n     * Reports when the given node contains a constant condition.\n     * @param {ASTNode} node The AST node to check.\n     * @returns {void}\n     * @private\n     */\n\n\n    function reportIfConstant(node) {\n      if (node.test && isConstant(node.test, true)) {\n        context.report({\n          node: node.test,\n          messageId: \"unexpected\"\n        });\n      }\n    }\n    /**\n     * Stores current set of constant loops in loopSetStack temporarily\n     * and uses a new set to track constant loops\n     * @returns {void}\n     * @private\n     */\n\n\n    function enterFunction() {\n      loopSetStack.push(loopsInCurrentScope);\n      loopsInCurrentScope = new Set();\n    }\n    /**\n     * Reports when the set still contains stored constant conditions\n     * @returns {void}\n     * @private\n     */\n\n\n    function exitFunction() {\n      loopsInCurrentScope = loopSetStack.pop();\n    }\n    /**\n     * Checks node when checkLoops option is enabled\n     * @param {ASTNode} node The AST node to check.\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkLoop(node) {\n      if (checkLoops) {\n        trackConstantConditionLoop(node);\n      }\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      ConditionalExpression: reportIfConstant,\n      IfStatement: reportIfConstant,\n      WhileStatement: checkLoop,\n      \"WhileStatement:exit\": checkConstantConditionLoopInSet,\n      DoWhileStatement: checkLoop,\n      \"DoWhileStatement:exit\": checkConstantConditionLoopInSet,\n      ForStatement: checkLoop,\n      \"ForStatement > .test\": node => checkLoop(node.parent),\n      \"ForStatement:exit\": checkConstantConditionLoopInSet,\n      FunctionDeclaration: enterFunction,\n      \"FunctionDeclaration:exit\": exitFunction,\n      FunctionExpression: enterFunction,\n      \"FunctionExpression:exit\": exitFunction,\n      YieldExpression: () => loopsInCurrentScope.clear()\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-constant-condition.js"],"names":["EQUALITY_OPERATORS","RELATIONAL_OPERATORS","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","checkLoops","default","additionalProperties","messages","unexpected","create","context","options","loopSetStack","loopsInCurrentScope","Set","isLogicalIdentity","node","operator","value","left","right","isConstant","inBooleanPosition","argument","isLeftConstant","isRightConstant","isLeftShortCircuit","isRightShortCircuit","parent","includes","expressions","length","trackConstantConditionLoop","test","add","checkConstantConditionLoopInSet","has","delete","report","messageId","reportIfConstant","enterFunction","push","exitFunction","pop","checkLoop","ConditionalExpression","IfStatement","WhileStatement","DoWhileStatement","ForStatement","FunctionDeclaration","FunctionExpression","YieldExpression","clear"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to flag use constant conditions\n * @author Christian Schulz <http://rndm.de>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst EQUALITY_OPERATORS = [\"===\", \"!==\", \"==\", \"!=\"];\nconst RELATIONAL_OPERATORS = [\">\", \"<\", \">=\", \"<=\", \"in\", \"instanceof\"];\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow constant expressions in conditions\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-constant-condition\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    checkLoops: {\n                        type: \"boolean\",\n                        default: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpected: \"Unexpected constant condition.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {},\n            checkLoops = options.checkLoops !== false,\n            loopSetStack = [];\n\n        let loopsInCurrentScope = new Set();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n\n        /**\n         * Checks if a branch node of LogicalExpression short circuits the whole condition\n         * @param {ASTNode} node The branch of main condition which needs to be checked\n         * @param {string} operator The operator of the main LogicalExpression.\n         * @returns {boolean} true when condition short circuits whole condition\n         */\n        function isLogicalIdentity(node, operator) {\n            switch (node.type) {\n                case \"Literal\":\n                    return (operator === \"||\" && node.value === true) ||\n                           (operator === \"&&\" && node.value === false);\n\n                case \"UnaryExpression\":\n                    return (operator === \"&&\" && node.operator === \"void\");\n\n                case \"LogicalExpression\":\n                    return isLogicalIdentity(node.left, node.operator) ||\n                             isLogicalIdentity(node.right, node.operator);\n\n                // no default\n            }\n            return false;\n        }\n\n        /**\n         * Checks if a node has a constant truthiness value.\n         * @param {ASTNode} node The AST node to check.\n         * @param {boolean} inBooleanPosition `false` if checking branch of a condition.\n         *  `true` in all other cases\n         * @returns {Bool} true when node's truthiness is constant\n         * @private\n         */\n        function isConstant(node, inBooleanPosition) {\n            switch (node.type) {\n                case \"Literal\":\n                case \"ArrowFunctionExpression\":\n                case \"FunctionExpression\":\n                case \"ObjectExpression\":\n                case \"ArrayExpression\":\n                    return true;\n\n                case \"UnaryExpression\":\n                    if (node.operator === \"void\") {\n                        return true;\n                    }\n\n                    return (node.operator === \"typeof\" && inBooleanPosition) ||\n                        isConstant(node.argument, true);\n\n                case \"BinaryExpression\":\n                    return isConstant(node.left, false) &&\n                            isConstant(node.right, false) &&\n                            node.operator !== \"in\";\n\n                case \"LogicalExpression\": {\n                    const isLeftConstant = isConstant(node.left, inBooleanPosition);\n                    const isRightConstant = isConstant(node.right, inBooleanPosition);\n                    const isLeftShortCircuit = (isLeftConstant && isLogicalIdentity(node.left, node.operator));\n                    const isRightShortCircuit = (isRightConstant && isLogicalIdentity(node.right, node.operator));\n\n                    return (isLeftConstant && isRightConstant) ||\n                        (\n\n                            // in the case of an \"OR\", we need to know if the right constant value is truthy\n                            node.operator === \"||\" &&\n                            isRightConstant &&\n                            node.right.value &&\n                            (\n                                !node.parent ||\n                                node.parent.type !== \"BinaryExpression\" ||\n                                !(EQUALITY_OPERATORS.includes(node.parent.operator) || RELATIONAL_OPERATORS.includes(node.parent.operator))\n                            )\n                        ) ||\n                        isLeftShortCircuit ||\n                        isRightShortCircuit;\n                }\n\n                case \"AssignmentExpression\":\n                    return (node.operator === \"=\") && isConstant(node.right, inBooleanPosition);\n\n                case \"SequenceExpression\":\n                    return isConstant(node.expressions[node.expressions.length - 1], inBooleanPosition);\n\n                // no default\n            }\n            return false;\n        }\n\n        /**\n         * Tracks when the given node contains a constant condition.\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         * @private\n         */\n        function trackConstantConditionLoop(node) {\n            if (node.test && isConstant(node.test, true)) {\n                loopsInCurrentScope.add(node);\n            }\n        }\n\n        /**\n         * Reports when the set contains the given constant condition node\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkConstantConditionLoopInSet(node) {\n            if (loopsInCurrentScope.has(node)) {\n                loopsInCurrentScope.delete(node);\n                context.report({ node: node.test, messageId: \"unexpected\" });\n            }\n        }\n\n        /**\n         * Reports when the given node contains a constant condition.\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         * @private\n         */\n        function reportIfConstant(node) {\n            if (node.test && isConstant(node.test, true)) {\n                context.report({ node: node.test, messageId: \"unexpected\" });\n            }\n        }\n\n        /**\n         * Stores current set of constant loops in loopSetStack temporarily\n         * and uses a new set to track constant loops\n         * @returns {void}\n         * @private\n         */\n        function enterFunction() {\n            loopSetStack.push(loopsInCurrentScope);\n            loopsInCurrentScope = new Set();\n        }\n\n        /**\n         * Reports when the set still contains stored constant conditions\n         * @returns {void}\n         * @private\n         */\n        function exitFunction() {\n            loopsInCurrentScope = loopSetStack.pop();\n        }\n\n        /**\n         * Checks node when checkLoops option is enabled\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkLoop(node) {\n            if (checkLoops) {\n                trackConstantConditionLoop(node);\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            ConditionalExpression: reportIfConstant,\n            IfStatement: reportIfConstant,\n            WhileStatement: checkLoop,\n            \"WhileStatement:exit\": checkConstantConditionLoopInSet,\n            DoWhileStatement: checkLoop,\n            \"DoWhileStatement:exit\": checkConstantConditionLoopInSet,\n            ForStatement: checkLoop,\n            \"ForStatement > .test\": node => checkLoop(node.parent),\n            \"ForStatement:exit\": checkConstantConditionLoopInSet,\n            FunctionDeclaration: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            FunctionExpression: enterFunction,\n            \"FunctionExpression:exit\": exitFunction,\n            YieldExpression: () => loopsInCurrentScope.clear()\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}