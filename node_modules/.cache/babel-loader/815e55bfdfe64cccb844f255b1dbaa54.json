{"ast":null,"code":"var SourceMapGenerator = require('source-map').SourceMapGenerator;\n\nvar all = require('./helpers').all;\n\nvar isRemoteResource = require('../utils/is-remote-resource');\n\nvar isWindows = process.platform == 'win32';\nvar NIX_SEPARATOR_PATTERN = /\\//g;\nvar UNKNOWN_SOURCE = '$stdin';\nvar WINDOWS_SEPARATOR = '\\\\';\n\nfunction store(serializeContext, element) {\n  var fromString = typeof element == 'string';\n  var value = fromString ? element : element[1];\n  var mappings = fromString ? null : element[2];\n  var wrap = serializeContext.wrap;\n  wrap(serializeContext, value);\n  track(serializeContext, value, mappings);\n  serializeContext.output.push(value);\n}\n\nfunction wrap(serializeContext, value) {\n  if (serializeContext.column + value.length > serializeContext.format.wrapAt) {\n    track(serializeContext, serializeContext.format.breakWith, false);\n    serializeContext.output.push(serializeContext.format.breakWith);\n  }\n}\n\nfunction track(serializeContext, value, mappings) {\n  var parts = value.split('\\n');\n\n  if (mappings) {\n    trackAllMappings(serializeContext, mappings);\n  }\n\n  serializeContext.line += parts.length - 1;\n  serializeContext.column = parts.length > 1 ? 0 : serializeContext.column + parts.pop().length;\n}\n\nfunction trackAllMappings(serializeContext, mappings) {\n  for (var i = 0, l = mappings.length; i < l; i++) {\n    trackMapping(serializeContext, mappings[i]);\n  }\n}\n\nfunction trackMapping(serializeContext, mapping) {\n  var line = mapping[0];\n  var column = mapping[1];\n  var originalSource = mapping[2];\n  var source = originalSource;\n  var storedSource = source || UNKNOWN_SOURCE;\n\n  if (isWindows && source && !isRemoteResource(source)) {\n    storedSource = source.replace(NIX_SEPARATOR_PATTERN, WINDOWS_SEPARATOR);\n  }\n\n  serializeContext.outputMap.addMapping({\n    generated: {\n      line: serializeContext.line,\n      column: serializeContext.column\n    },\n    source: storedSource,\n    original: {\n      line: line,\n      column: column\n    }\n  });\n\n  if (serializeContext.inlineSources && originalSource in serializeContext.sourcesContent) {\n    serializeContext.outputMap.setSourceContent(storedSource, serializeContext.sourcesContent[originalSource]);\n  }\n}\n\nfunction serializeStylesAndSourceMap(tokens, context) {\n  var serializeContext = {\n    column: 0,\n    format: context.options.format,\n    indentBy: 0,\n    indentWith: '',\n    inlineSources: context.options.sourceMapInlineSources,\n    line: 1,\n    output: [],\n    outputMap: new SourceMapGenerator(),\n    sourcesContent: context.sourcesContent,\n    spaceAfterClosingBrace: context.options.compatibility.properties.spaceAfterClosingBrace,\n    store: store,\n    wrap: context.options.format.wrapAt ? wrap : function () {\n      /* noop */\n    }\n  };\n  all(serializeContext, tokens);\n  return {\n    sourceMap: serializeContext.outputMap,\n    styles: serializeContext.output.join('')\n  };\n}\n\nmodule.exports = serializeStylesAndSourceMap;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/clean-css/lib/writer/source-maps.js"],"names":["SourceMapGenerator","require","all","isRemoteResource","isWindows","process","platform","NIX_SEPARATOR_PATTERN","UNKNOWN_SOURCE","WINDOWS_SEPARATOR","store","serializeContext","element","fromString","value","mappings","wrap","track","output","push","column","length","format","wrapAt","breakWith","parts","split","trackAllMappings","line","pop","i","l","trackMapping","mapping","originalSource","source","storedSource","replace","outputMap","addMapping","generated","original","inlineSources","sourcesContent","setSourceContent","serializeStylesAndSourceMap","tokens","context","options","indentBy","indentWith","sourceMapInlineSources","spaceAfterClosingBrace","compatibility","properties","sourceMap","styles","join","module","exports"],"mappings":"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","sourcesContent":["var SourceMapGenerator = require('source-map').SourceMapGenerator;\nvar all = require('./helpers').all;\n\nvar isRemoteResource = require('../utils/is-remote-resource');\n\nvar isWindows = process.platform == 'win32';\n\nvar NIX_SEPARATOR_PATTERN = /\\//g;\nvar UNKNOWN_SOURCE = '$stdin';\nvar WINDOWS_SEPARATOR = '\\\\';\n\nfunction store(serializeContext, element) {\n  var fromString = typeof element == 'string';\n  var value = fromString ? element : element[1];\n  var mappings = fromString ? null : element[2];\n  var wrap = serializeContext.wrap;\n\n  wrap(serializeContext, value);\n  track(serializeContext, value, mappings);\n  serializeContext.output.push(value);\n}\n\nfunction wrap(serializeContext, value) {\n  if (serializeContext.column + value.length > serializeContext.format.wrapAt) {\n    track(serializeContext, serializeContext.format.breakWith, false);\n    serializeContext.output.push(serializeContext.format.breakWith);\n  }\n}\n\nfunction track(serializeContext, value, mappings) {\n  var parts = value.split('\\n');\n\n  if (mappings) {\n    trackAllMappings(serializeContext, mappings);\n  }\n\n  serializeContext.line += parts.length - 1;\n  serializeContext.column = parts.length > 1 ? 0 : (serializeContext.column + parts.pop().length);\n}\n\nfunction trackAllMappings(serializeContext, mappings) {\n  for (var i = 0, l = mappings.length; i < l; i++) {\n    trackMapping(serializeContext, mappings[i]);\n  }\n}\n\nfunction trackMapping(serializeContext, mapping) {\n  var line = mapping[0];\n  var column = mapping[1];\n  var originalSource = mapping[2];\n  var source = originalSource;\n  var storedSource = source || UNKNOWN_SOURCE;\n\n  if (isWindows && source && !isRemoteResource(source)) {\n    storedSource = source.replace(NIX_SEPARATOR_PATTERN, WINDOWS_SEPARATOR);\n  }\n\n  serializeContext.outputMap.addMapping({\n    generated: {\n      line: serializeContext.line,\n      column: serializeContext.column\n    },\n    source: storedSource,\n    original: {\n      line: line,\n      column: column\n    }\n  });\n\n  if (serializeContext.inlineSources && (originalSource in serializeContext.sourcesContent)) {\n    serializeContext.outputMap.setSourceContent(storedSource, serializeContext.sourcesContent[originalSource]);\n  }\n}\n\nfunction serializeStylesAndSourceMap(tokens, context) {\n  var serializeContext = {\n    column: 0,\n    format: context.options.format,\n    indentBy: 0,\n    indentWith: '',\n    inlineSources: context.options.sourceMapInlineSources,\n    line: 1,\n    output: [],\n    outputMap: new SourceMapGenerator(),\n    sourcesContent: context.sourcesContent,\n    spaceAfterClosingBrace: context.options.compatibility.properties.spaceAfterClosingBrace,\n    store: store,\n    wrap: context.options.format.wrapAt ?\n      wrap :\n      function () { /* noop */  }\n  };\n\n  all(serializeContext, tokens);\n\n  return {\n    sourceMap: serializeContext.outputMap,\n    styles: serializeContext.output.join('')\n  };\n}\n\nmodule.exports = serializeStylesAndSourceMap;\n"]},"metadata":{},"sourceType":"script"}