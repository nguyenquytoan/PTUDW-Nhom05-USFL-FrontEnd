{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Observable,_Notification,_ColdObservable,_HotObservable,_SubscriptionLog,_scheduler_VirtualTimeScheduler,_scheduler_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\nimport { AsyncScheduler } from '../scheduler/AsyncScheduler';\nvar defaultMaxFrame = 750;\n\nvar TestScheduler = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(TestScheduler, _super);\n\n  function TestScheduler(assertDeepEqual) {\n    var _this = _super.call(this, VirtualAction, defaultMaxFrame) || this;\n\n    _this.assertDeepEqual = assertDeepEqual;\n    _this.hotObservables = [];\n    _this.coldObservables = [];\n    _this.flushTests = [];\n    _this.runMode = false;\n    return _this;\n  }\n\n  TestScheduler.prototype.createTime = function (marbles) {\n    var indexOf = marbles.indexOf('|');\n\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n\n    return indexOf * TestScheduler.frameTimeFactor;\n  };\n\n  TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n\n    var messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);\n    var cold = new ColdObservable(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  };\n\n  TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n\n    var messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);\n    var subject = new HotObservable(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  };\n\n  TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n    var _this = this;\n\n    var messages = [];\n    observable.subscribe(function (value) {\n      messages.push({\n        frame: _this.frame - outerFrame,\n        notification: Notification.createNext(value)\n      });\n    }, function (err) {\n      messages.push({\n        frame: _this.frame - outerFrame,\n        notification: Notification.createError(err)\n      });\n    }, function () {\n      messages.push({\n        frame: _this.frame - outerFrame,\n        notification: Notification.createComplete()\n      });\n    });\n    return messages;\n  };\n\n  TestScheduler.prototype.expectObservable = function (observable, subscriptionMarbles) {\n    var _this = this;\n\n    if (subscriptionMarbles === void 0) {\n      subscriptionMarbles = null;\n    }\n\n    var actual = [];\n    var flushTest = {\n      actual: actual,\n      ready: false\n    };\n    var subscriptionParsed = TestScheduler.parseMarblesAsSubscriptions(subscriptionMarbles, this.runMode);\n    var subscriptionFrame = subscriptionParsed.subscribedFrame === Number.POSITIVE_INFINITY ? 0 : subscriptionParsed.subscribedFrame;\n    var unsubscriptionFrame = subscriptionParsed.unsubscribedFrame;\n    var subscription;\n    this.schedule(function () {\n      subscription = observable.subscribe(function (x) {\n        var value = x;\n\n        if (x instanceof Observable) {\n          value = _this.materializeInnerObservable(value, _this.frame);\n        }\n\n        actual.push({\n          frame: _this.frame,\n          notification: Notification.createNext(value)\n        });\n      }, function (err) {\n        actual.push({\n          frame: _this.frame,\n          notification: Notification.createError(err)\n        });\n      }, function () {\n        actual.push({\n          frame: _this.frame,\n          notification: Notification.createComplete()\n        });\n      });\n    }, subscriptionFrame);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(function () {\n        return subscription.unsubscribe();\n      }, unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n    var runMode = this.runMode;\n    return {\n      toBe: function (marbles, values, errorValue) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true, runMode);\n      }\n    };\n  };\n\n  TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n    var flushTest = {\n      actual: actualSubscriptionLogs,\n      ready: false\n    };\n    this.flushTests.push(flushTest);\n    var runMode = this.runMode;\n    return {\n      toBe: function (marbles) {\n        var marblesArray = typeof marbles === 'string' ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(function (marbles) {\n          return TestScheduler.parseMarblesAsSubscriptions(marbles, runMode);\n        });\n      }\n    };\n  };\n\n  TestScheduler.prototype.flush = function () {\n    var _this = this;\n\n    var hotObservables = this.hotObservables;\n\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    _super.prototype.flush.call(this);\n\n    this.flushTests = this.flushTests.filter(function (test) {\n      if (test.ready) {\n        _this.assertDeepEqual(test.actual, test.expected);\n\n        return false;\n      }\n\n      return true;\n    });\n  };\n\n  TestScheduler.parseMarblesAsSubscriptions = function (marbles, runMode) {\n    var _this = this;\n\n    if (runMode === void 0) {\n      runMode = false;\n    }\n\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n\n    var len = marbles.length;\n    var groupStart = -1;\n    var subscriptionFrame = Number.POSITIVE_INFINITY;\n    var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n    var frame = 0;\n\n    var _loop_1 = function (i) {\n      var nextFrame = frame;\n\n      var advanceFrameBy = function (count) {\n        nextFrame += count * _this.frameTimeFactor;\n      };\n\n      var c = marbles[i];\n\n      switch (c) {\n        case ' ':\n          if (!runMode) {\n            advanceFrameBy(1);\n          }\n\n          break;\n\n        case '-':\n          advanceFrameBy(1);\n          break;\n\n        case '(':\n          groupStart = frame;\n          advanceFrameBy(1);\n          break;\n\n        case ')':\n          groupStart = -1;\n          advanceFrameBy(1);\n          break;\n\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' + 'subscription marble diagram. There can only be one.');\n          }\n\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          advanceFrameBy(1);\n          break;\n\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' + 'subscription marble diagram. There can only be one.');\n          }\n\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n\n        default:\n          if (runMode && c.match(/^[0-9]$/)) {\n            if (i === 0 || marbles[i - 1] === ' ') {\n              var buffer = marbles.slice(i);\n              var match = buffer.match(/^([0-9]+(?:\\.[0-9]+)?)(ms|s|m) /);\n\n              if (match) {\n                i += match[0].length - 1;\n                var duration = parseFloat(match[1]);\n                var unit = match[2];\n                var durationInMs = void 0;\n\n                switch (unit) {\n                  case 'ms':\n                    durationInMs = duration;\n                    break;\n\n                  case 's':\n                    durationInMs = duration * 1000;\n                    break;\n\n                  case 'm':\n                    durationInMs = duration * 1000 * 60;\n                    break;\n\n                  default:\n                    break;\n                }\n\n                advanceFrameBy(durationInMs / this_1.frameTimeFactor);\n                break;\n              }\n            }\n          }\n\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' + 'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n\n      frame = nextFrame;\n      out_i_1 = i;\n    };\n\n    var this_1 = this,\n        out_i_1;\n\n    for (var i = 0; i < len; i++) {\n      _loop_1(i);\n\n      i = out_i_1;\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  };\n\n  TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables, runMode) {\n    var _this = this;\n\n    if (materializeInnerObservables === void 0) {\n      materializeInnerObservables = false;\n    }\n\n    if (runMode === void 0) {\n      runMode = false;\n    }\n\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' + 'unsubscription marker \"!\"');\n    }\n\n    var len = marbles.length;\n    var testMessages = [];\n    var subIndex = runMode ? marbles.replace(/^[ ]+/, '').indexOf('^') : marbles.indexOf('^');\n    var frame = subIndex === -1 ? 0 : subIndex * -this.frameTimeFactor;\n    var getValue = typeof values !== 'object' ? function (x) {\n      return x;\n    } : function (x) {\n      if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n        return values[x].messages;\n      }\n\n      return values[x];\n    };\n    var groupStart = -1;\n\n    var _loop_2 = function (i) {\n      var nextFrame = frame;\n\n      var advanceFrameBy = function (count) {\n        nextFrame += count * _this.frameTimeFactor;\n      };\n\n      var notification = void 0;\n      var c = marbles[i];\n\n      switch (c) {\n        case ' ':\n          if (!runMode) {\n            advanceFrameBy(1);\n          }\n\n          break;\n\n        case '-':\n          advanceFrameBy(1);\n          break;\n\n        case '(':\n          groupStart = frame;\n          advanceFrameBy(1);\n          break;\n\n        case ')':\n          groupStart = -1;\n          advanceFrameBy(1);\n          break;\n\n        case '|':\n          notification = Notification.createComplete();\n          advanceFrameBy(1);\n          break;\n\n        case '^':\n          advanceFrameBy(1);\n          break;\n\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          advanceFrameBy(1);\n          break;\n\n        default:\n          if (runMode && c.match(/^[0-9]$/)) {\n            if (i === 0 || marbles[i - 1] === ' ') {\n              var buffer = marbles.slice(i);\n              var match = buffer.match(/^([0-9]+(?:\\.[0-9]+)?)(ms|s|m) /);\n\n              if (match) {\n                i += match[0].length - 1;\n                var duration = parseFloat(match[1]);\n                var unit = match[2];\n                var durationInMs = void 0;\n\n                switch (unit) {\n                  case 'ms':\n                    durationInMs = duration;\n                    break;\n\n                  case 's':\n                    durationInMs = duration * 1000;\n                    break;\n\n                  case 'm':\n                    durationInMs = duration * 1000 * 60;\n                    break;\n\n                  default:\n                    break;\n                }\n\n                advanceFrameBy(durationInMs / this_2.frameTimeFactor);\n                break;\n              }\n            }\n          }\n\n          notification = Notification.createNext(getValue(c));\n          advanceFrameBy(1);\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({\n          frame: groupStart > -1 ? groupStart : frame,\n          notification: notification\n        });\n      }\n\n      frame = nextFrame;\n      out_i_2 = i;\n    };\n\n    var this_2 = this,\n        out_i_2;\n\n    for (var i = 0; i < len; i++) {\n      _loop_2(i);\n\n      i = out_i_2;\n    }\n\n    return testMessages;\n  };\n\n  TestScheduler.prototype.run = function (callback) {\n    var prevFrameTimeFactor = TestScheduler.frameTimeFactor;\n    var prevMaxFrames = this.maxFrames;\n    TestScheduler.frameTimeFactor = 1;\n    this.maxFrames = Number.POSITIVE_INFINITY;\n    this.runMode = true;\n    AsyncScheduler.delegate = this;\n    var helpers = {\n      cold: this.createColdObservable.bind(this),\n      hot: this.createHotObservable.bind(this),\n      flush: this.flush.bind(this),\n      expectObservable: this.expectObservable.bind(this),\n      expectSubscriptions: this.expectSubscriptions.bind(this)\n    };\n\n    try {\n      var ret = callback(helpers);\n      this.flush();\n      return ret;\n    } finally {\n      TestScheduler.frameTimeFactor = prevFrameTimeFactor;\n      this.maxFrames = prevMaxFrames;\n      this.runMode = false;\n      AsyncScheduler.delegate = undefined;\n    }\n  };\n\n  return TestScheduler;\n}(VirtualTimeScheduler);\n\nexport { TestScheduler };","map":{"version":3,"sources":["../../../src/internal/testing/TestScheduler.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_Observable,_Notification,_ColdObservable,_HotObservable,_SubscriptionLog,_scheduler_VirtualTimeScheduler,_scheduler_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\nimport { AsyncScheduler } from '../scheduler/AsyncScheduler';\nvar defaultMaxFrame = 750;\nvar TestScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TestScheduler, _super);\n    function TestScheduler(assertDeepEqual) {\n        var _this = _super.call(this, VirtualAction, defaultMaxFrame) || this;\n        _this.assertDeepEqual = assertDeepEqual;\n        _this.hotObservables = [];\n        _this.coldObservables = [];\n        _this.flushTests = [];\n        _this.runMode = false;\n        return _this;\n    }\n    TestScheduler.prototype.createTime = function (marbles) {\n        var indexOf = marbles.indexOf('|');\n        if (indexOf === -1) {\n            throw new Error('marble diagram for time should have a completion marker \"|\"');\n        }\n        return indexOf * TestScheduler.frameTimeFactor;\n    };\n    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n        if (marbles.indexOf('^') !== -1) {\n            throw new Error('cold observable cannot have subscription offset \"^\"');\n        }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('cold observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);\n        var cold = new ColdObservable(messages, this);\n        this.coldObservables.push(cold);\n        return cold;\n    };\n    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('hot observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);\n        var subject = new HotObservable(messages, this);\n        this.hotObservables.push(subject);\n        return subject;\n    };\n    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n        var _this = this;\n        var messages = [];\n        observable.subscribe(function (value) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification.createNext(value) });\n        }, function (err) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification.createError(err) });\n        }, function () {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification.createComplete() });\n        });\n        return messages;\n    };\n    TestScheduler.prototype.expectObservable = function (observable, subscriptionMarbles) {\n        var _this = this;\n        if (subscriptionMarbles === void 0) {\n            subscriptionMarbles = null;\n        }\n        var actual = [];\n        var flushTest = { actual: actual, ready: false };\n        var subscriptionParsed = TestScheduler.parseMarblesAsSubscriptions(subscriptionMarbles, this.runMode);\n        var subscriptionFrame = subscriptionParsed.subscribedFrame === Number.POSITIVE_INFINITY ?\n            0 : subscriptionParsed.subscribedFrame;\n        var unsubscriptionFrame = subscriptionParsed.unsubscribedFrame;\n        var subscription;\n        this.schedule(function () {\n            subscription = observable.subscribe(function (x) {\n                var value = x;\n                if (x instanceof Observable) {\n                    value = _this.materializeInnerObservable(value, _this.frame);\n                }\n                actual.push({ frame: _this.frame, notification: Notification.createNext(value) });\n            }, function (err) {\n                actual.push({ frame: _this.frame, notification: Notification.createError(err) });\n            }, function () {\n                actual.push({ frame: _this.frame, notification: Notification.createComplete() });\n            });\n        }, subscriptionFrame);\n        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);\n        }\n        this.flushTests.push(flushTest);\n        var runMode = this.runMode;\n        return {\n            toBe: function (marbles, values, errorValue) {\n                flushTest.ready = true;\n                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true, runMode);\n            }\n        };\n    };\n    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n        var flushTest = { actual: actualSubscriptionLogs, ready: false };\n        this.flushTests.push(flushTest);\n        var runMode = this.runMode;\n        return {\n            toBe: function (marbles) {\n                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n                flushTest.ready = true;\n                flushTest.expected = marblesArray.map(function (marbles) {\n                    return TestScheduler.parseMarblesAsSubscriptions(marbles, runMode);\n                });\n            }\n        };\n    };\n    TestScheduler.prototype.flush = function () {\n        var _this = this;\n        var hotObservables = this.hotObservables;\n        while (hotObservables.length > 0) {\n            hotObservables.shift().setup();\n        }\n        _super.prototype.flush.call(this);\n        this.flushTests = this.flushTests.filter(function (test) {\n            if (test.ready) {\n                _this.assertDeepEqual(test.actual, test.expected);\n                return false;\n            }\n            return true;\n        });\n    };\n    TestScheduler.parseMarblesAsSubscriptions = function (marbles, runMode) {\n        var _this = this;\n        if (runMode === void 0) {\n            runMode = false;\n        }\n        if (typeof marbles !== 'string') {\n            return new SubscriptionLog(Number.POSITIVE_INFINITY);\n        }\n        var len = marbles.length;\n        var groupStart = -1;\n        var subscriptionFrame = Number.POSITIVE_INFINITY;\n        var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n        var frame = 0;\n        var _loop_1 = function (i) {\n            var nextFrame = frame;\n            var advanceFrameBy = function (count) {\n                nextFrame += count * _this.frameTimeFactor;\n            };\n            var c = marbles[i];\n            switch (c) {\n                case ' ':\n                    if (!runMode) {\n                        advanceFrameBy(1);\n                    }\n                    break;\n                case '-':\n                    advanceFrameBy(1);\n                    break;\n                case '(':\n                    groupStart = frame;\n                    advanceFrameBy(1);\n                    break;\n                case ')':\n                    groupStart = -1;\n                    advanceFrameBy(1);\n                    break;\n                case '^':\n                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    advanceFrameBy(1);\n                    break;\n                case '!':\n                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                default:\n                    if (runMode && c.match(/^[0-9]$/)) {\n                        if (i === 0 || marbles[i - 1] === ' ') {\n                            var buffer = marbles.slice(i);\n                            var match = buffer.match(/^([0-9]+(?:\\.[0-9]+)?)(ms|s|m) /);\n                            if (match) {\n                                i += match[0].length - 1;\n                                var duration = parseFloat(match[1]);\n                                var unit = match[2];\n                                var durationInMs = void 0;\n                                switch (unit) {\n                                    case 'ms':\n                                        durationInMs = duration;\n                                        break;\n                                    case 's':\n                                        durationInMs = duration * 1000;\n                                        break;\n                                    case 'm':\n                                        durationInMs = duration * 1000 * 60;\n                                        break;\n                                    default:\n                                        break;\n                                }\n                                advanceFrameBy(durationInMs / this_1.frameTimeFactor);\n                                break;\n                            }\n                        }\n                    }\n                    throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n            }\n            frame = nextFrame;\n            out_i_1 = i;\n        };\n        var this_1 = this, out_i_1;\n        for (var i = 0; i < len; i++) {\n            _loop_1(i);\n            i = out_i_1;\n        }\n        if (unsubscriptionFrame < 0) {\n            return new SubscriptionLog(subscriptionFrame);\n        }\n        else {\n            return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n        }\n    };\n    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables, runMode) {\n        var _this = this;\n        if (materializeInnerObservables === void 0) {\n            materializeInnerObservables = false;\n        }\n        if (runMode === void 0) {\n            runMode = false;\n        }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('conventional marble diagrams cannot have the ' +\n                'unsubscription marker \"!\"');\n        }\n        var len = marbles.length;\n        var testMessages = [];\n        var subIndex = runMode ? marbles.replace(/^[ ]+/, '').indexOf('^') : marbles.indexOf('^');\n        var frame = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n        var getValue = typeof values !== 'object' ?\n            function (x) { return x; } :\n            function (x) {\n                if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n                    return values[x].messages;\n                }\n                return values[x];\n            };\n        var groupStart = -1;\n        var _loop_2 = function (i) {\n            var nextFrame = frame;\n            var advanceFrameBy = function (count) {\n                nextFrame += count * _this.frameTimeFactor;\n            };\n            var notification = void 0;\n            var c = marbles[i];\n            switch (c) {\n                case ' ':\n                    if (!runMode) {\n                        advanceFrameBy(1);\n                    }\n                    break;\n                case '-':\n                    advanceFrameBy(1);\n                    break;\n                case '(':\n                    groupStart = frame;\n                    advanceFrameBy(1);\n                    break;\n                case ')':\n                    groupStart = -1;\n                    advanceFrameBy(1);\n                    break;\n                case '|':\n                    notification = Notification.createComplete();\n                    advanceFrameBy(1);\n                    break;\n                case '^':\n                    advanceFrameBy(1);\n                    break;\n                case '#':\n                    notification = Notification.createError(errorValue || 'error');\n                    advanceFrameBy(1);\n                    break;\n                default:\n                    if (runMode && c.match(/^[0-9]$/)) {\n                        if (i === 0 || marbles[i - 1] === ' ') {\n                            var buffer = marbles.slice(i);\n                            var match = buffer.match(/^([0-9]+(?:\\.[0-9]+)?)(ms|s|m) /);\n                            if (match) {\n                                i += match[0].length - 1;\n                                var duration = parseFloat(match[1]);\n                                var unit = match[2];\n                                var durationInMs = void 0;\n                                switch (unit) {\n                                    case 'ms':\n                                        durationInMs = duration;\n                                        break;\n                                    case 's':\n                                        durationInMs = duration * 1000;\n                                        break;\n                                    case 'm':\n                                        durationInMs = duration * 1000 * 60;\n                                        break;\n                                    default:\n                                        break;\n                                }\n                                advanceFrameBy(durationInMs / this_2.frameTimeFactor);\n                                break;\n                            }\n                        }\n                    }\n                    notification = Notification.createNext(getValue(c));\n                    advanceFrameBy(1);\n                    break;\n            }\n            if (notification) {\n                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });\n            }\n            frame = nextFrame;\n            out_i_2 = i;\n        };\n        var this_2 = this, out_i_2;\n        for (var i = 0; i < len; i++) {\n            _loop_2(i);\n            i = out_i_2;\n        }\n        return testMessages;\n    };\n    TestScheduler.prototype.run = function (callback) {\n        var prevFrameTimeFactor = TestScheduler.frameTimeFactor;\n        var prevMaxFrames = this.maxFrames;\n        TestScheduler.frameTimeFactor = 1;\n        this.maxFrames = Number.POSITIVE_INFINITY;\n        this.runMode = true;\n        AsyncScheduler.delegate = this;\n        var helpers = {\n            cold: this.createColdObservable.bind(this),\n            hot: this.createHotObservable.bind(this),\n            flush: this.flush.bind(this),\n            expectObservable: this.expectObservable.bind(this),\n            expectSubscriptions: this.expectSubscriptions.bind(this),\n        };\n        try {\n            var ret = callback(helpers);\n            this.flush();\n            return ret;\n        }\n        finally {\n            TestScheduler.frameTimeFactor = prevFrameTimeFactor;\n            this.maxFrames = prevMaxFrames;\n            this.runMode = false;\n            AsyncScheduler.delegate = undefined;\n        }\n    };\n    return TestScheduler;\n}(VirtualTimeScheduler));\nexport { TestScheduler };\n//# sourceMappingURL=TestScheduler.js.map\n"]},"metadata":{},"sourceType":"module"}