{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromBindExpression;\n/**\n * Extractor function for a BindExpression type value node.\n * A bind expression looks like `::this.foo`\n * This will return `this.foo.bind(this)` as the value to indicate its existence,\n * since we can not execute the function this.foo.bind(this) in a static environment.\n *\n * @param - value - AST Value object with type `BindExpression`\n * @returns - The extracted value converted to correct type.\n */\n\nfunction extractValueFromBindExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('./index.js').default;\n\n  var callee = getValue(value.callee); // If value.object === null, the callee must be a MemberExpression.\n  // https://github.com/babel/babylon/blob/master/ast/spec.md#bindexpression\n\n  var object = value.object === null ? getValue(value.callee.object) : getValue(value.object);\n\n  if (value.object && value.object.property) {\n    return object + '.' + callee + '.bind(' + object + ')';\n  }\n\n  return callee + '.bind(' + object + ')';\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/lib/values/expressions/BindExpression.js"],"names":["Object","defineProperty","exports","value","default","extractValueFromBindExpression","getValue","require","callee","object","property"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,8BAAlB;AACA;;;;;;;;;;AASA,SAASA,8BAAT,CAAwCF,KAAxC,EAA+C;AAC7C;AACA,MAAIG,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBH,OAArC;;AACA,MAAII,MAAM,GAAGF,QAAQ,CAACH,KAAK,CAACK,MAAP,CAArB,CAH6C,CAK7C;AACA;;AACA,MAAIC,MAAM,GAAGN,KAAK,CAACM,MAAN,KAAiB,IAAjB,GAAwBH,QAAQ,CAACH,KAAK,CAACK,MAAN,CAAaC,MAAd,CAAhC,GAAwDH,QAAQ,CAACH,KAAK,CAACM,MAAP,CAA7E;;AAEA,MAAIN,KAAK,CAACM,MAAN,IAAgBN,KAAK,CAACM,MAAN,CAAaC,QAAjC,EAA2C;AACzC,WAAOD,MAAM,GAAG,GAAT,GAAeD,MAAf,GAAwB,QAAxB,GAAmCC,MAAnC,GAA4C,GAAnD;AACD;;AAED,SAAOD,MAAM,GAAG,QAAT,GAAoBC,MAApB,GAA6B,GAApC;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromBindExpression;\n/**\n * Extractor function for a BindExpression type value node.\n * A bind expression looks like `::this.foo`\n * This will return `this.foo.bind(this)` as the value to indicate its existence,\n * since we can not execute the function this.foo.bind(this) in a static environment.\n *\n * @param - value - AST Value object with type `BindExpression`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromBindExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('./index.js').default;\n  var callee = getValue(value.callee);\n\n  // If value.object === null, the callee must be a MemberExpression.\n  // https://github.com/babel/babylon/blob/master/ast/spec.md#bindexpression\n  var object = value.object === null ? getValue(value.callee.object) : getValue(value.object);\n\n  if (value.object && value.object.property) {\n    return object + '.' + callee + '.bind(' + object + ')';\n  }\n\n  return callee + '.bind(' + object + ')';\n}"]},"metadata":{},"sourceType":"script"}