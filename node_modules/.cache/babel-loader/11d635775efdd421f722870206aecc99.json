{"ast":null,"code":"/**\n * @fileoverview Define the cursor which iterates tokens only.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst Cursor = require(\"./cursor\");\n\nconst utils = require(\"./utils\"); //------------------------------------------------------------------------------\n// Exports\n//------------------------------------------------------------------------------\n\n/**\n * The cursor which iterates tokens only.\n */\n\n\nmodule.exports = class ForwardTokenCursor extends Cursor {\n  /**\n   * Initializes this cursor.\n   * @param {Token[]} tokens The array of tokens.\n   * @param {Comment[]} comments The array of comments.\n   * @param {Object} indexMap The map from locations to indices in `tokens`.\n   * @param {number} startLoc The start location of the iteration range.\n   * @param {number} endLoc The end location of the iteration range.\n   */\n  constructor(tokens, comments, indexMap, startLoc, endLoc) {\n    super();\n    this.tokens = tokens;\n    this.index = utils.getFirstIndex(tokens, indexMap, startLoc);\n    this.indexEnd = utils.getLastIndex(tokens, indexMap, endLoc);\n  }\n  /** @inheritdoc */\n\n\n  moveNext() {\n    if (this.index <= this.indexEnd) {\n      this.current = this.tokens[this.index];\n      this.index += 1;\n      return true;\n    }\n\n    return false;\n  }\n  /*\n   *\n   * Shorthand for performance.\n   *\n   */\n\n  /** @inheritdoc */\n\n\n  getOneToken() {\n    return this.index <= this.indexEnd ? this.tokens[this.index] : null;\n  }\n  /** @inheritdoc */\n\n\n  getAllTokens() {\n    return this.tokens.slice(this.index, this.indexEnd + 1);\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/source-code/token-store/forward-token-cursor.js"],"names":["Cursor","require","utils","module","exports","ForwardTokenCursor","constructor","tokens","comments","indexMap","startLoc","endLoc","index","getFirstIndex","indexEnd","getLastIndex","moveNext","current","getOneToken","getAllTokens","slice"],"mappings":"AAAA;;;;AAIA,a,CAEA;AACA;AACA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB,C,CAEA;AACA;AACA;;AAEA;;;;;AAGAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,kBAAN,SAAiCL,MAAjC,CAAwC;AAErD;;;;;;;;AAQAM,EAAAA,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmBC,QAAnB,EAA6BC,QAA7B,EAAuCC,MAAvC,EAA+C;AACtD;AACA,SAAKJ,MAAL,GAAcA,MAAd;AACA,SAAKK,KAAL,GAAaV,KAAK,CAACW,aAAN,CAAoBN,MAApB,EAA4BE,QAA5B,EAAsCC,QAAtC,CAAb;AACA,SAAKI,QAAL,GAAgBZ,KAAK,CAACa,YAAN,CAAmBR,MAAnB,EAA2BE,QAA3B,EAAqCE,MAArC,CAAhB;AACH;AAED;;;AACAK,EAAAA,QAAQ,GAAG;AACP,QAAI,KAAKJ,KAAL,IAAc,KAAKE,QAAvB,EAAiC;AAC7B,WAAKG,OAAL,GAAe,KAAKV,MAAL,CAAY,KAAKK,KAAjB,CAAf;AACA,WAAKA,KAAL,IAAc,CAAd;AACA,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;AAED;;;;;;AAMA;;;AACAM,EAAAA,WAAW,GAAG;AACV,WAAQ,KAAKN,KAAL,IAAc,KAAKE,QAApB,GAAgC,KAAKP,MAAL,CAAY,KAAKK,KAAjB,CAAhC,GAA0D,IAAjE;AACH;AAED;;;AACAO,EAAAA,YAAY,GAAG;AACX,WAAO,KAAKZ,MAAL,CAAYa,KAAZ,CAAkB,KAAKR,KAAvB,EAA8B,KAAKE,QAAL,GAAgB,CAA9C,CAAP;AACH;;AAzCoD,CAAzD","sourcesContent":["/**\n * @fileoverview Define the cursor which iterates tokens only.\n * @author Toru Nagashima\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst Cursor = require(\"./cursor\");\nconst utils = require(\"./utils\");\n\n//------------------------------------------------------------------------------\n// Exports\n//------------------------------------------------------------------------------\n\n/**\n * The cursor which iterates tokens only.\n */\nmodule.exports = class ForwardTokenCursor extends Cursor {\n\n    /**\n     * Initializes this cursor.\n     * @param {Token[]} tokens The array of tokens.\n     * @param {Comment[]} comments The array of comments.\n     * @param {Object} indexMap The map from locations to indices in `tokens`.\n     * @param {number} startLoc The start location of the iteration range.\n     * @param {number} endLoc The end location of the iteration range.\n     */\n    constructor(tokens, comments, indexMap, startLoc, endLoc) {\n        super();\n        this.tokens = tokens;\n        this.index = utils.getFirstIndex(tokens, indexMap, startLoc);\n        this.indexEnd = utils.getLastIndex(tokens, indexMap, endLoc);\n    }\n\n    /** @inheritdoc */\n    moveNext() {\n        if (this.index <= this.indexEnd) {\n            this.current = this.tokens[this.index];\n            this.index += 1;\n            return true;\n        }\n        return false;\n    }\n\n    /*\n     *\n     * Shorthand for performance.\n     *\n     */\n\n    /** @inheritdoc */\n    getOneToken() {\n        return (this.index <= this.indexEnd) ? this.tokens[this.index] : null;\n    }\n\n    /** @inheritdoc */\n    getAllTokens() {\n        return this.tokens.slice(this.index, this.indexEnd + 1);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}