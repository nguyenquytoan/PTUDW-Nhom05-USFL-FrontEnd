{"ast":null,"code":"'use strict';\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar postcss = _interopDefault(require('postcss'));\n\nvar parser = _interopDefault(require('postcss-values-parser'));\n\nconst placeMatch = /^place-(content|items|self)/;\nvar index = postcss.plugin('postcss-place', opts => {\n  // prepare options\n  const preserve = 'preserve' in Object(opts) ? Boolean(opts.prefix) : true;\n  return root => {\n    // walk each matching declaration\n    root.walkDecls(placeMatch, decl => {\n      // alignment\n      const alignment = decl.prop.match(placeMatch)[1]; // value ast and child nodes\n\n      const value = parser(decl.value).parse();\n      const children = value.nodes[0].nodes; // new justify-[alignment] and align-[alignment] declarations\n\n      const alignValue = children.length === 1 ? decl.value : String(children.slice(0, 1)).trim();\n      const justifyValue = children.length === 1 ? decl.value : String(children.slice(1)).trim();\n      decl.cloneBefore({\n        prop: `align-${alignment}`,\n        value: alignValue\n      });\n      decl.cloneBefore({\n        prop: `justify-${alignment}`,\n        value: justifyValue\n      }); // conditionally remove place-[alignment]\n\n      if (!preserve) {\n        decl.remove();\n      }\n    });\n  };\n});\nmodule.exports = index;","map":{"version":3,"sources":["index.js"],"names":["placeMatch","opts","preserve","Object","Boolean","root","decl","alignment","value","parser","children","alignValue","String","justifyValue","prop"],"mappings":";;;;;;;;;;AAGA,MAAMA,UAAU,GAAhB,6BAAA;AAEA,IAAA,KAAA,GAAe,OAAO,CAAP,MAAA,CAAA,eAAA,EAAgCC,IAAI,IAAI;;QAEhDC,QAAQ,GAAG,cAAcC,MAAM,CAApB,IAAoB,CAApB,GAA6BC,OAAO,CAACH,IAAI,CAAzC,MAAoC,CAApC,GAAjB,I;SAEOI,IAAI,IAAI;;AAEdA,IAAAA,IAAI,CAAJA,SAAAA,CAAAA,UAAAA,EAA2BC,IAAI,IAAI;;YAE5BC,SAAS,GAAGD,IAAI,CAAJA,IAAAA,CAAAA,KAAAA,CAAAA,UAAAA,EAFgB,CAEhBA,C,CAFgB,CAAA;;YAK5BE,KAAK,GAAGC,MAAM,CAACH,IAAI,CAAXG,KAAM,CAANA,CAAd,KAAcA,E;YACRC,QAAQ,GAAGF,KAAK,CAALA,KAAAA,CAAAA,CAAAA,EANiB,K,CAAA,CAAA;;YAS5BG,UAAU,GAAGD,QAAQ,CAARA,MAAAA,KAAAA,CAAAA,GAAwBJ,IAAI,CAA5BI,KAAAA,GAAqCE,MAAM,CAACF,QAAQ,CAARA,KAAAA,CAAAA,CAAAA,EAAPE,CAAOF,CAAD,CAANE,CAAxD,IAAwDA,E;YAClDC,YAAY,GAAGH,QAAQ,CAARA,MAAAA,KAAAA,CAAAA,GAAwBJ,IAAI,CAA5BI,KAAAA,GAAqCE,MAAM,CAACF,QAAQ,CAARA,KAAAA,CAAPE,CAAOF,CAAD,CAANE,CAA1D,IAA0DA,E;AAE1DN,MAAAA,IAAI,CAAJA,WAAAA,CAAiB;AAChBQ,QAAAA,IAAI,EAAG,SAAQP,SADC,EAAA;AAEhBC,QAAAA,KAAK,EAAEG;AAFS,OAAjBL;AAKAA,MAAAA,IAAI,CAAJA,WAAAA,CAAiB;AAChBQ,QAAAA,IAAI,EAAG,WAAUP,SADD,EAAA;AAEhBC,QAAAA,KAAK,EAAEK;AAFS,OAAjBP,EAjBkC,CAAA;;UAuB9B,CAAJ,Q,EAAe;AACdA,QAAAA,IAAI,CAAJA,MAAAA;;AAxBFD,KAAAA;AAFD,G;AAJD,CAAe,CAAf","sourcesContent":["import postcss from 'postcss';\nimport parser from 'postcss-values-parser';\n\nconst placeMatch = /^place-(content|items|self)/;\n\nexport default postcss.plugin('postcss-place', opts => {\n\t// prepare options\n\tconst preserve = 'preserve' in Object(opts) ? Boolean(opts.prefix) : true;\n\n\treturn root => {\n\t\t// walk each matching declaration\n\t\troot.walkDecls(placeMatch, decl => {\n\t\t\t// alignment\n\t\t\tconst alignment = decl.prop.match(placeMatch)[1];\n\n\t\t\t// value ast and child nodes\n\t\t\tconst value = parser(decl.value).parse();\n\t\t\tconst children = value.nodes[0].nodes;\n\n\t\t\t// new justify-[alignment] and align-[alignment] declarations\n\t\t\tconst alignValue = children.length === 1 ? decl.value : String(children.slice(0, 1)).trim();\n\t\t\tconst justifyValue = children.length === 1 ? decl.value : String(children.slice(1)).trim();\n\n\t\t\tdecl.cloneBefore({\n\t\t\t\tprop: `align-${alignment}`,\n\t\t\t\tvalue: alignValue\n\t\t\t});\n\n\t\t\tdecl.cloneBefore({\n\t\t\t\tprop: `justify-${alignment}`,\n\t\t\t\tvalue: justifyValue\n\t\t\t});\n\n\t\t\t// conditionally remove place-[alignment]\n\t\t\tif (!preserve) {\n\t\t\t\tdecl.remove();\n\t\t\t}\n\t\t});\n\t};\n});\n"]},"metadata":{},"sourceType":"script"}