{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst os = require(\"os\");\n\nconst codeFrame = require(\"babel-code-frame\");\n\nconst chalk_1 = require(\"chalk\");\n\nconst fs = require(\"fs\");\n\nconst NormalizedMessage_1 = require(\"../NormalizedMessage\");\n\nconst FsHelper_1 = require(\"../FsHelper\");\n/**\n * Create new code frame formatter.\n *\n * @param options Options for babel-code-frame - see https://www.npmjs.com/package/babel-code-frame\n * @returns {codeframeFormatter}\n */\n\n\nfunction createCodeframeFormatter(options) {\n  return function codeframeFormatter(message, useColors) {\n    const colors = new chalk_1.default.constructor({\n      enabled: useColors\n    });\n    const messageColor = message.isWarningSeverity() ? colors.bold.yellow : colors.bold.red;\n    const positionColor = colors.dim;\n\n    if (message.code === NormalizedMessage_1.NormalizedMessage.ERROR_CODE_INTERNAL) {\n      return messageColor(`INTERNAL ${message.severity.toUpperCase()}(${message.line},${message.character}) `) + message.content + (message.stack ? os.EOL + 'stack trace:' + os.EOL + colors.gray(message.stack) : '');\n    }\n\n    const file = message.file;\n    const source = file && FsHelper_1.fileExistsSync(file) && fs.readFileSync(file, 'utf-8');\n    let frame = '';\n\n    if (source) {\n      frame = codeFrame(source, message.line, // Assertion: `codeFrame` allows passing undefined, typings are incorrect\n      message.character, Object.assign({}, options || {}, {\n        highlightCode: useColors\n      })).split('\\n').map(str => '  ' + str).join(os.EOL);\n    }\n\n    return messageColor(message.severity.toUpperCase() + ' in ' + `${message.file}(${message.line},${message.character}):`) + os.EOL + positionColor(message.line + ':' + message.character) + ' ' + message.content + (frame ? os.EOL + frame : '');\n  };\n}\n\nexports.createCodeframeFormatter = createCodeframeFormatter;","map":{"version":3,"sources":["../../src/formatter/codeframeFormatter.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,EAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,MAAA,EAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AACA,MAAA,mBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;;;;;;;AAMA,SAAgB,wBAAhB,CAAyC,OAAzC,EAAqD;AACnD,SAAO,SAAS,kBAAT,CACL,OADK,EAEL,SAFK,EAEa;AAElB,UAAM,MAAM,GAAG,IAAI,OAAA,CAAA,OAAA,CAAM,WAAV,CAAsB;AAAE,MAAA,OAAO,EAAE;AAAX,KAAtB,CAAf;AACA,UAAM,YAAY,GAAG,OAAO,CAAC,iBAAR,KACjB,MAAM,CAAC,IAAP,CAAY,MADK,GAEjB,MAAM,CAAC,IAAP,CAAY,GAFhB;AAGA,UAAM,aAAa,GAAG,MAAM,CAAC,GAA7B;;AAEA,QAAI,OAAO,CAAC,IAAR,KAAiB,mBAAA,CAAA,iBAAA,CAAkB,mBAAvC,EAA4D;AAC1D,aACE,YAAY,CACV,YAAY,OAAO,CAAC,QAAR,CAAiB,WAAjB,EAA8B,IAAI,OAAO,CAAC,IAAI,IACxD,OAAO,CAAC,SACV,IAHU,CAAZ,GAKA,OAAO,CAAC,OALR,IAMC,OAAO,CAAC,KAAR,GACG,EAAE,CAAC,GAAH,GAAS,cAAT,GAA0B,EAAE,CAAC,GAA7B,GAAmC,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,KAApB,CADtC,GAEG,EARJ,CADF;AAWD;;AAED,UAAM,IAAI,GAAG,OAAO,CAAC,IAArB;AACA,UAAM,MAAM,GACV,IAAI,IAAI,UAAA,CAAA,cAAA,CAAe,IAAf,CAAR,IAAgC,EAAE,CAAC,YAAH,CAAgB,IAAhB,EAAsB,OAAtB,CADlC;AAEA,QAAI,KAAK,GAAG,EAAZ;;AAEA,QAAI,MAAJ,EAAY;AACV,MAAA,KAAK,GAAG,SAAS,CACf,MADe,EAEf,OAAO,CAAC,IAFO,EAEA;AACf,MAAA,OAAO,CAAC,SAHO,EAGG,MAAA,CAAA,MAAA,CAAA,EAAA,EAEZ,OAAO,IAAI,EAFC,EAEE;AAClB,QAAA,aAAa,EAAE;AADG,OAFF,CAHH,CAAT,CASL,KATK,CASC,IATD,EAUL,GAVK,CAUD,GAAG,IAAI,OAAO,GAVb,EAWL,IAXK,CAWA,EAAE,CAAC,GAXH,CAAR;AAYD;;AAED,WACE,YAAY,CACV,OAAO,CAAC,QAAR,CAAiB,WAAjB,KACE,MADF,GAEE,GAAG,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,SAAS,IAH5C,CAAZ,GAKA,EAAE,CAAC,GALH,GAMA,aAAa,CAAC,OAAO,CAAC,IAAR,GAAe,GAAf,GAAqB,OAAO,CAAC,SAA9B,CANb,GAOA,GAPA,GAQA,OAAO,CAAC,OARR,IASC,KAAK,GAAG,EAAE,CAAC,GAAH,GAAS,KAAZ,GAAoB,EAT1B,CADF;AAYD,GAxDD;AAyDD;;AA1DD,OAAA,CAAA,wBAAA,GAAA,wBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = require(\"os\");\nconst codeFrame = require(\"babel-code-frame\");\nconst chalk_1 = require(\"chalk\");\nconst fs = require(\"fs\");\nconst NormalizedMessage_1 = require(\"../NormalizedMessage\");\nconst FsHelper_1 = require(\"../FsHelper\");\n/**\n * Create new code frame formatter.\n *\n * @param options Options for babel-code-frame - see https://www.npmjs.com/package/babel-code-frame\n * @returns {codeframeFormatter}\n */\nfunction createCodeframeFormatter(options) {\n    return function codeframeFormatter(message, useColors) {\n        const colors = new chalk_1.default.constructor({ enabled: useColors });\n        const messageColor = message.isWarningSeverity()\n            ? colors.bold.yellow\n            : colors.bold.red;\n        const positionColor = colors.dim;\n        if (message.code === NormalizedMessage_1.NormalizedMessage.ERROR_CODE_INTERNAL) {\n            return (messageColor(`INTERNAL ${message.severity.toUpperCase()}(${message.line},${message.character}) `) +\n                message.content +\n                (message.stack\n                    ? os.EOL + 'stack trace:' + os.EOL + colors.gray(message.stack)\n                    : ''));\n        }\n        const file = message.file;\n        const source = file && FsHelper_1.fileExistsSync(file) && fs.readFileSync(file, 'utf-8');\n        let frame = '';\n        if (source) {\n            frame = codeFrame(source, message.line, // Assertion: `codeFrame` allows passing undefined, typings are incorrect\n            message.character, Object.assign({}, (options || {}), { highlightCode: useColors }))\n                .split('\\n')\n                .map(str => '  ' + str)\n                .join(os.EOL);\n        }\n        return (messageColor(message.severity.toUpperCase() +\n            ' in ' +\n            `${message.file}(${message.line},${message.character}):`) +\n            os.EOL +\n            positionColor(message.line + ':' + message.character) +\n            ' ' +\n            message.content +\n            (frame ? os.EOL + frame : ''));\n    };\n}\nexports.createCodeframeFormatter = createCodeframeFormatter;\n//# sourceMappingURL=codeframeFormatter.js.map"]},"metadata":{},"sourceType":"script"}