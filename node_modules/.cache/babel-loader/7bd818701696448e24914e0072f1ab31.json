{"ast":null,"code":"// @remove-file-on-eject\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst chalk = require('react-dev-utils/chalk');\n\nconst fs = require('fs');\n\nconst resolve = require('resolve');\n\nconst path = require('path');\n\nconst paths = require('../../config/paths');\n\nconst os = require('os');\n\nconst immer = require('react-dev-utils/immer').produce;\n\nconst globby = require('react-dev-utils/globby').sync;\n\nfunction writeJson(fileName, object) {\n  fs.writeFileSync(fileName, JSON.stringify(object, null, 2).replace(/\\n/g, os.EOL) + os.EOL);\n}\n\nfunction verifyNoTypeScript() {\n  const typescriptFiles = globby(['**/*.(ts|tsx)', '!**/node_modules', '!**/*.d.ts'], {\n    cwd: paths.appSrc\n  });\n\n  if (typescriptFiles.length > 0) {\n    console.warn(chalk.yellow(`We detected TypeScript in your project (${chalk.bold(`src${path.sep}${typescriptFiles[0]}`)}) and created a ${chalk.bold('tsconfig.json')} file for you.`));\n    console.warn();\n    return false;\n  }\n\n  return true;\n}\n\nfunction verifyTypeScriptSetup() {\n  let firstTimeSetup = false;\n\n  if (!fs.existsSync(paths.appTsConfig)) {\n    if (verifyNoTypeScript()) {\n      return;\n    }\n\n    writeJson(paths.appTsConfig, {});\n    firstTimeSetup = true;\n  }\n\n  const isYarn = fs.existsSync(paths.yarnLockFile); // Ensure typescript is installed\n\n  let ts;\n\n  try {\n    ts = require(resolve.sync('typescript', {\n      basedir: paths.appNodeModules\n    }));\n  } catch (_) {\n    console.error(chalk.bold.red(`It looks like you're trying to use TypeScript but do not have ${chalk.bold('typescript')} installed.`));\n    console.error(chalk.bold('Please install', chalk.cyan.bold('typescript'), 'by running', chalk.cyan.bold(isYarn ? 'yarn add typescript' : 'npm install typescript') + '.'));\n    console.error(chalk.bold('If you are not trying to use TypeScript, please remove the ' + chalk.cyan('tsconfig.json') + ' file from your package root (and any TypeScript files).'));\n    console.error();\n    process.exit(1);\n  }\n\n  const compilerOptions = {\n    // These are suggested values and will be set when not present in the\n    // tsconfig.json\n    // 'parsedValue' matches the output value from ts.parseJsonConfigFileContent()\n    target: {\n      parsedValue: ts.ScriptTarget.ES5,\n      suggested: 'es5'\n    },\n    lib: {\n      suggested: ['dom', 'dom.iterable', 'esnext']\n    },\n    allowJs: {\n      suggested: true\n    },\n    skipLibCheck: {\n      suggested: true\n    },\n    esModuleInterop: {\n      suggested: true\n    },\n    allowSyntheticDefaultImports: {\n      suggested: true\n    },\n    strict: {\n      suggested: true\n    },\n    forceConsistentCasingInFileNames: {\n      suggested: true\n    },\n    // TODO: Enable for v4.0 (#6936)\n    // noFallthroughCasesInSwitch: { suggested: true },\n    // These values are required and cannot be changed by the user\n    // Keep this in sync with the webpack config\n    module: {\n      parsedValue: ts.ModuleKind.ESNext,\n      value: 'esnext',\n      reason: 'for import() and import/export'\n    },\n    moduleResolution: {\n      parsedValue: ts.ModuleResolutionKind.NodeJs,\n      value: 'node',\n      reason: 'to match webpack resolution'\n    },\n    resolveJsonModule: {\n      value: true,\n      reason: 'to match webpack loader'\n    },\n    isolatedModules: {\n      value: true,\n      reason: 'implementation limitation'\n    },\n    noEmit: {\n      value: true\n    },\n    jsx: {\n      parsedValue: ts.JsxEmit.React,\n      suggested: 'react'\n    },\n    paths: {\n      value: undefined,\n      reason: 'aliased imports are not supported'\n    }\n  };\n  const formatDiagnosticHost = {\n    getCanonicalFileName: fileName => fileName,\n    getCurrentDirectory: ts.sys.getCurrentDirectory,\n    getNewLine: () => os.EOL\n  };\n  const messages = [];\n  let appTsConfig;\n  let parsedTsConfig;\n  let parsedCompilerOptions;\n\n  try {\n    const {\n      config: readTsConfig,\n      error\n    } = ts.readConfigFile(paths.appTsConfig, ts.sys.readFile);\n\n    if (error) {\n      throw new Error(ts.formatDiagnostic(error, formatDiagnosticHost));\n    }\n\n    appTsConfig = readTsConfig; // Get TS to parse and resolve any \"extends\"\n    // Calling this function also mutates the tsconfig above,\n    // adding in \"include\" and \"exclude\", but the compilerOptions remain untouched\n\n    let result;\n    parsedTsConfig = immer(readTsConfig, config => {\n      result = ts.parseJsonConfigFileContent(config, ts.sys, path.dirname(paths.appTsConfig));\n    });\n\n    if (result.errors && result.errors.length) {\n      throw new Error(ts.formatDiagnostic(result.errors[0], formatDiagnosticHost));\n    }\n\n    parsedCompilerOptions = result.options;\n  } catch (e) {\n    if (e && e.name === 'SyntaxError') {\n      console.error(chalk.red.bold('Could not parse', chalk.cyan('tsconfig.json') + '.', 'Please make sure it contains syntactically correct JSON.'));\n    }\n\n    console.log(e && e.message ? `${e.message}` : '');\n    process.exit(1);\n  }\n\n  if (appTsConfig.compilerOptions == null) {\n    appTsConfig.compilerOptions = {};\n    firstTimeSetup = true;\n  }\n\n  for (const option of Object.keys(compilerOptions)) {\n    const {\n      parsedValue,\n      value,\n      suggested,\n      reason\n    } = compilerOptions[option];\n    const valueToCheck = parsedValue === undefined ? value : parsedValue;\n    const coloredOption = chalk.cyan('compilerOptions.' + option);\n\n    if (suggested != null) {\n      if (parsedCompilerOptions[option] === undefined) {\n        appTsConfig.compilerOptions[option] = suggested;\n        messages.push(`${coloredOption} to be ${chalk.bold('suggested')} value: ${chalk.cyan.bold(suggested)} (this can be changed)`);\n      }\n    } else if (parsedCompilerOptions[option] !== valueToCheck) {\n      appTsConfig.compilerOptions[option] = value;\n      messages.push(`${coloredOption} ${chalk.bold(valueToCheck == null ? 'must not' : 'must')} be ${valueToCheck == null ? 'set' : chalk.cyan.bold(value)}` + (reason != null ? ` (${reason})` : ''));\n    }\n  } // tsconfig will have the merged \"include\" and \"exclude\" by this point\n\n\n  if (parsedTsConfig.include == null) {\n    appTsConfig.include = ['src'];\n    messages.push(`${chalk.cyan('include')} should be ${chalk.cyan.bold('src')}`);\n  }\n\n  if (messages.length > 0) {\n    if (firstTimeSetup) {\n      console.log(chalk.bold('Your', chalk.cyan('tsconfig.json'), 'has been populated with default values.'));\n      console.log();\n    } else {\n      console.warn(chalk.bold('The following changes are being made to your', chalk.cyan('tsconfig.json'), 'file:'));\n      messages.forEach(message => {\n        console.warn('  - ' + message);\n      });\n      console.warn();\n    }\n\n    writeJson(paths.appTsConfig, appTsConfig);\n  } // Reference `react-scripts` types\n\n\n  if (!fs.existsSync(paths.appTypeDeclarations)) {\n    fs.writeFileSync(paths.appTypeDeclarations, `/// <reference types=\"react-scripts\" />${os.EOL}`);\n  }\n}\n\nmodule.exports = verifyTypeScriptSetup;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-scripts/scripts/utils/verifyTypeScriptSetup.js"],"names":["chalk","require","fs","resolve","path","paths","os","immer","produce","globby","sync","writeJson","fileName","object","writeFileSync","JSON","stringify","replace","EOL","verifyNoTypeScript","typescriptFiles","cwd","appSrc","length","console","warn","yellow","bold","sep","verifyTypeScriptSetup","firstTimeSetup","existsSync","appTsConfig","isYarn","yarnLockFile","ts","basedir","appNodeModules","_","error","red","cyan","process","exit","compilerOptions","target","parsedValue","ScriptTarget","ES5","suggested","lib","allowJs","skipLibCheck","esModuleInterop","allowSyntheticDefaultImports","strict","forceConsistentCasingInFileNames","module","ModuleKind","ESNext","value","reason","moduleResolution","ModuleResolutionKind","NodeJs","resolveJsonModule","isolatedModules","noEmit","jsx","JsxEmit","React","undefined","formatDiagnosticHost","getCanonicalFileName","getCurrentDirectory","sys","getNewLine","messages","parsedTsConfig","parsedCompilerOptions","config","readTsConfig","readConfigFile","readFile","Error","formatDiagnostic","result","parseJsonConfigFileContent","dirname","errors","options","e","name","log","message","option","Object","keys","valueToCheck","coloredOption","push","include","forEach","appTypeDeclarations","exports"],"mappings":"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","sourcesContent":["// @remove-file-on-eject\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst chalk = require('react-dev-utils/chalk');\nconst fs = require('fs');\nconst resolve = require('resolve');\nconst path = require('path');\nconst paths = require('../../config/paths');\nconst os = require('os');\nconst immer = require('react-dev-utils/immer').produce;\nconst globby = require('react-dev-utils/globby').sync;\n\nfunction writeJson(fileName, object) {\n  fs.writeFileSync(\n    fileName,\n    JSON.stringify(object, null, 2).replace(/\\n/g, os.EOL) + os.EOL\n  );\n}\n\nfunction verifyNoTypeScript() {\n  const typescriptFiles = globby(\n    ['**/*.(ts|tsx)', '!**/node_modules', '!**/*.d.ts'],\n    { cwd: paths.appSrc }\n  );\n  if (typescriptFiles.length > 0) {\n    console.warn(\n      chalk.yellow(\n        `We detected TypeScript in your project (${chalk.bold(\n          `src${path.sep}${typescriptFiles[0]}`\n        )}) and created a ${chalk.bold('tsconfig.json')} file for you.`\n      )\n    );\n    console.warn();\n    return false;\n  }\n  return true;\n}\n\nfunction verifyTypeScriptSetup() {\n  let firstTimeSetup = false;\n\n  if (!fs.existsSync(paths.appTsConfig)) {\n    if (verifyNoTypeScript()) {\n      return;\n    }\n    writeJson(paths.appTsConfig, {});\n    firstTimeSetup = true;\n  }\n\n  const isYarn = fs.existsSync(paths.yarnLockFile);\n\n  // Ensure typescript is installed\n  let ts;\n  try {\n    ts = require(resolve.sync('typescript', {\n      basedir: paths.appNodeModules,\n    }));\n  } catch (_) {\n    console.error(\n      chalk.bold.red(\n        `It looks like you're trying to use TypeScript but do not have ${chalk.bold(\n          'typescript'\n        )} installed.`\n      )\n    );\n    console.error(\n      chalk.bold(\n        'Please install',\n        chalk.cyan.bold('typescript'),\n        'by running',\n        chalk.cyan.bold(\n          isYarn ? 'yarn add typescript' : 'npm install typescript'\n        ) + '.'\n      )\n    );\n    console.error(\n      chalk.bold(\n        'If you are not trying to use TypeScript, please remove the ' +\n          chalk.cyan('tsconfig.json') +\n          ' file from your package root (and any TypeScript files).'\n      )\n    );\n    console.error();\n    process.exit(1);\n  }\n\n  const compilerOptions = {\n    // These are suggested values and will be set when not present in the\n    // tsconfig.json\n    // 'parsedValue' matches the output value from ts.parseJsonConfigFileContent()\n    target: {\n      parsedValue: ts.ScriptTarget.ES5,\n      suggested: 'es5',\n    },\n    lib: { suggested: ['dom', 'dom.iterable', 'esnext'] },\n    allowJs: { suggested: true },\n    skipLibCheck: { suggested: true },\n    esModuleInterop: { suggested: true },\n    allowSyntheticDefaultImports: { suggested: true },\n    strict: { suggested: true },\n    forceConsistentCasingInFileNames: { suggested: true },\n    // TODO: Enable for v4.0 (#6936)\n    // noFallthroughCasesInSwitch: { suggested: true },\n\n    // These values are required and cannot be changed by the user\n    // Keep this in sync with the webpack config\n    module: {\n      parsedValue: ts.ModuleKind.ESNext,\n      value: 'esnext',\n      reason: 'for import() and import/export',\n    },\n    moduleResolution: {\n      parsedValue: ts.ModuleResolutionKind.NodeJs,\n      value: 'node',\n      reason: 'to match webpack resolution',\n    },\n    resolveJsonModule: { value: true, reason: 'to match webpack loader' },\n    isolatedModules: { value: true, reason: 'implementation limitation' },\n    noEmit: { value: true },\n    jsx: {\n      parsedValue: ts.JsxEmit.React,\n      suggested: 'react',\n    },\n    paths: { value: undefined, reason: 'aliased imports are not supported' },\n  };\n\n  const formatDiagnosticHost = {\n    getCanonicalFileName: fileName => fileName,\n    getCurrentDirectory: ts.sys.getCurrentDirectory,\n    getNewLine: () => os.EOL,\n  };\n\n  const messages = [];\n  let appTsConfig;\n  let parsedTsConfig;\n  let parsedCompilerOptions;\n  try {\n    const { config: readTsConfig, error } = ts.readConfigFile(\n      paths.appTsConfig,\n      ts.sys.readFile\n    );\n\n    if (error) {\n      throw new Error(ts.formatDiagnostic(error, formatDiagnosticHost));\n    }\n\n    appTsConfig = readTsConfig;\n\n    // Get TS to parse and resolve any \"extends\"\n    // Calling this function also mutates the tsconfig above,\n    // adding in \"include\" and \"exclude\", but the compilerOptions remain untouched\n    let result;\n    parsedTsConfig = immer(readTsConfig, config => {\n      result = ts.parseJsonConfigFileContent(\n        config,\n        ts.sys,\n        path.dirname(paths.appTsConfig)\n      );\n    });\n\n    if (result.errors && result.errors.length) {\n      throw new Error(\n        ts.formatDiagnostic(result.errors[0], formatDiagnosticHost)\n      );\n    }\n\n    parsedCompilerOptions = result.options;\n  } catch (e) {\n    if (e && e.name === 'SyntaxError') {\n      console.error(\n        chalk.red.bold(\n          'Could not parse',\n          chalk.cyan('tsconfig.json') + '.',\n          'Please make sure it contains syntactically correct JSON.'\n        )\n      );\n    }\n\n    console.log(e && e.message ? `${e.message}` : '');\n    process.exit(1);\n  }\n\n  if (appTsConfig.compilerOptions == null) {\n    appTsConfig.compilerOptions = {};\n    firstTimeSetup = true;\n  }\n\n  for (const option of Object.keys(compilerOptions)) {\n    const { parsedValue, value, suggested, reason } = compilerOptions[option];\n\n    const valueToCheck = parsedValue === undefined ? value : parsedValue;\n    const coloredOption = chalk.cyan('compilerOptions.' + option);\n\n    if (suggested != null) {\n      if (parsedCompilerOptions[option] === undefined) {\n        appTsConfig.compilerOptions[option] = suggested;\n        messages.push(\n          `${coloredOption} to be ${chalk.bold(\n            'suggested'\n          )} value: ${chalk.cyan.bold(suggested)} (this can be changed)`\n        );\n      }\n    } else if (parsedCompilerOptions[option] !== valueToCheck) {\n      appTsConfig.compilerOptions[option] = value;\n      messages.push(\n        `${coloredOption} ${chalk.bold(\n          valueToCheck == null ? 'must not' : 'must'\n        )} be ${valueToCheck == null ? 'set' : chalk.cyan.bold(value)}` +\n          (reason != null ? ` (${reason})` : '')\n      );\n    }\n  }\n\n  // tsconfig will have the merged \"include\" and \"exclude\" by this point\n  if (parsedTsConfig.include == null) {\n    appTsConfig.include = ['src'];\n    messages.push(\n      `${chalk.cyan('include')} should be ${chalk.cyan.bold('src')}`\n    );\n  }\n\n  if (messages.length > 0) {\n    if (firstTimeSetup) {\n      console.log(\n        chalk.bold(\n          'Your',\n          chalk.cyan('tsconfig.json'),\n          'has been populated with default values.'\n        )\n      );\n      console.log();\n    } else {\n      console.warn(\n        chalk.bold(\n          'The following changes are being made to your',\n          chalk.cyan('tsconfig.json'),\n          'file:'\n        )\n      );\n      messages.forEach(message => {\n        console.warn('  - ' + message);\n      });\n      console.warn();\n    }\n    writeJson(paths.appTsConfig, appTsConfig);\n  }\n\n  // Reference `react-scripts` types\n  if (!fs.existsSync(paths.appTypeDeclarations)) {\n    fs.writeFileSync(\n      paths.appTypeDeclarations,\n      `/// <reference types=\"react-scripts\" />${os.EOL}`\n    );\n  }\n}\n\nmodule.exports = verifyTypeScriptSetup;\n"]},"metadata":{},"sourceType":"script"}