{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"chai\").assert,\n    coerceString = require(\"../../string/coerce\"),\n    isArray = require(\"../../array/is\"),\n    ensureIterable = require(\"../../iterable/ensure\");\n\ndescribe(\"iterable/ensure\", function () {\n  it(\"Should return input value\", function () {\n    var value = [];\n    assert.equal(ensureIterable(value), value);\n  });\n  it(\"Should allow strings with allowString option\", function () {\n    var value = \"foo\";\n    assert.equal(ensureIterable(value, {\n      allowString: true\n    }), value);\n  });\n  it(\"Should crash on invalid value\", function () {\n    try {\n      ensureIterable(\"foo\");\n      throw new Error(\"Unexpected\");\n    } catch (error) {\n      assert.equal(error.name, \"TypeError\");\n      assert(error.message.includes(\"is not expected iterable value\"));\n    }\n  });\n  describe(\"Should support 'coerceItem' option\", function () {\n    it(\"Should resolve coerced array\", function () {\n      var coercedValue = ensureIterable(new Set([\"foo\", 12]), {\n        coerceItem: coerceString\n      });\n      assert(isArray(coercedValue));\n      assert.deepEqual(coercedValue, [\"foo\", \"12\"]);\n    });\n    it(\"Should crash if some value is non coercible\", function () {\n      try {\n        ensureIterable([\"foo\", {}], {\n          coerceItem: coerceString\n        });\n        throw new Error(\"Unexpected\");\n      } catch (error) {\n        assert.equal(error.name, \"TypeError\");\n        assert(error.message.includes(\"is not expected iterable value\"));\n      }\n    });\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type/test/iterable/ensure.js"],"names":["assert","require","coerceString","isArray","ensureIterable","describe","it","value","equal","allowString","Error","error","name","message","includes","coercedValue","Set","coerceItem","deepEqual"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAWC,OAAO,CAAC,MAAD,CAAP,CAAgBD,MAArC;AAAA,IACIE,YAAY,GAAKD,OAAO,CAAC,qBAAD,CAD5B;AAAA,IAEIE,OAAO,GAAUF,OAAO,CAAC,gBAAD,CAF5B;AAAA,IAGIG,cAAc,GAAGH,OAAO,CAAC,uBAAD,CAH5B;;AAKAI,QAAQ,CAAC,iBAAD,EAAoB,YAAY;AACvCC,EAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAY;AAC3C,QAAIC,KAAK,GAAG,EAAZ;AACAP,IAAAA,MAAM,CAACQ,KAAP,CAAaJ,cAAc,CAACG,KAAD,CAA3B,EAAoCA,KAApC;AACA,GAHC,CAAF;AAIAD,EAAAA,EAAE,CAAC,8CAAD,EAAiD,YAAY;AAC9D,QAAIC,KAAK,GAAG,KAAZ;AACAP,IAAAA,MAAM,CAACQ,KAAP,CAAaJ,cAAc,CAACG,KAAD,EAAQ;AAAEE,MAAAA,WAAW,EAAE;AAAf,KAAR,CAA3B,EAA2DF,KAA3D;AACA,GAHC,CAAF;AAIAD,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAY;AAC/C,QAAI;AACHF,MAAAA,cAAc,CAAC,KAAD,CAAd;AACA,YAAM,IAAIM,KAAJ,CAAU,YAAV,CAAN;AACA,KAHD,CAGE,OAAOC,KAAP,EAAc;AACfX,MAAAA,MAAM,CAACQ,KAAP,CAAaG,KAAK,CAACC,IAAnB,EAAyB,WAAzB;AACAZ,MAAAA,MAAM,CAACW,KAAK,CAACE,OAAN,CAAcC,QAAd,CAAuB,gCAAvB,CAAD,CAAN;AACA;AACD,GARC,CAAF;AASAT,EAAAA,QAAQ,CAAC,oCAAD,EAAuC,YAAY;AAC1DC,IAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAY;AAC9C,UAAIS,YAAY,GAAGX,cAAc,CAAC,IAAIY,GAAJ,CAAQ,CAAC,KAAD,EAAQ,EAAR,CAAR,CAAD,EAAuB;AAAEC,QAAAA,UAAU,EAAEf;AAAd,OAAvB,CAAjC;AACAF,MAAAA,MAAM,CAACG,OAAO,CAACY,YAAD,CAAR,CAAN;AACAf,MAAAA,MAAM,CAACkB,SAAP,CAAiBH,YAAjB,EAA+B,CAAC,KAAD,EAAQ,IAAR,CAA/B;AACA,KAJC,CAAF;AAKAT,IAAAA,EAAE,CAAC,6CAAD,EAAgD,YAAY;AAC7D,UAAI;AACHF,QAAAA,cAAc,CAAC,CAAC,KAAD,EAAQ,EAAR,CAAD,EAAc;AAAEa,UAAAA,UAAU,EAAEf;AAAd,SAAd,CAAd;AACA,cAAM,IAAIQ,KAAJ,CAAU,YAAV,CAAN;AACA,OAHD,CAGE,OAAOC,KAAP,EAAc;AACfX,QAAAA,MAAM,CAACQ,KAAP,CAAaG,KAAK,CAACC,IAAnB,EAAyB,WAAzB;AACAZ,QAAAA,MAAM,CAACW,KAAK,CAACE,OAAN,CAAcC,QAAd,CAAuB,gCAAvB,CAAD,CAAN;AACA;AACD,KARC,CAAF;AASA,GAfO,CAAR;AAgBA,CAlCO,CAAR","sourcesContent":["\"use strict\";\n\nvar assert         = require(\"chai\").assert\n  , coerceString   = require(\"../../string/coerce\")\n  , isArray        = require(\"../../array/is\")\n  , ensureIterable = require(\"../../iterable/ensure\");\n\ndescribe(\"iterable/ensure\", function () {\n\tit(\"Should return input value\", function () {\n\t\tvar value = [];\n\t\tassert.equal(ensureIterable(value), value);\n\t});\n\tit(\"Should allow strings with allowString option\", function () {\n\t\tvar value = \"foo\";\n\t\tassert.equal(ensureIterable(value, { allowString: true }), value);\n\t});\n\tit(\"Should crash on invalid value\", function () {\n\t\ttry {\n\t\t\tensureIterable(\"foo\");\n\t\t\tthrow new Error(\"Unexpected\");\n\t\t} catch (error) {\n\t\t\tassert.equal(error.name, \"TypeError\");\n\t\t\tassert(error.message.includes(\"is not expected iterable value\"));\n\t\t}\n\t});\n\tdescribe(\"Should support 'coerceItem' option\", function () {\n\t\tit(\"Should resolve coerced array\", function () {\n\t\t\tvar coercedValue = ensureIterable(new Set([\"foo\", 12]), { coerceItem: coerceString });\n\t\t\tassert(isArray(coercedValue));\n\t\t\tassert.deepEqual(coercedValue, [\"foo\", \"12\"]);\n\t\t});\n\t\tit(\"Should crash if some value is non coercible\", function () {\n\t\t\ttry {\n\t\t\t\tensureIterable([\"foo\", {}], { coerceItem: coerceString });\n\t\t\t\tthrow new Error(\"Unexpected\");\n\t\t\t} catch (error) {\n\t\t\t\tassert.equal(error.name, \"TypeError\");\n\t\t\t\tassert(error.message.includes(\"is not expected iterable value\"));\n\t\t\t}\n\t\t});\n\t});\n});\n"]},"metadata":{},"sourceType":"script"}