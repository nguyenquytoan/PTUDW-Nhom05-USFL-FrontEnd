{"ast":null,"code":"var Buffer = require('buffer').Buffer;\n\nvar fs = require('fs');\n\nvar test = require('tape');\n\nvar UAParser = require('ua-parser-js');\n\nvar http = require('../..');\n\nvar browser = new UAParser().setUA(navigator.userAgent).getBrowser();\nvar browserName = browser.name;\nvar browserVersion = browser.major; // Binary request bodies don't work in a bunch of browsers\n\nvar skipVerification = browserName === 'IE' && browserVersion <= 10 || browserName === 'Safari' && browserVersion <= 5 || browserName === 'WebKit' && browserVersion <= 534 || // Old mobile safari\nbrowserName === 'Android Browser' && browserVersion <= 4;\nvar reference = fs.readFileSync(__dirname + '/../server/static/browserify.png');\ntest('post binary', function (t) {\n  var req = http.request({\n    path: '/echo',\n    method: 'POST'\n  }, function (res) {\n    var buffers = [];\n    res.on('end', function () {\n      if (skipVerification) t.skip('binary data not preserved on this browser');else t.ok(reference.equals(Buffer.concat(buffers)), 'echoed contents match');\n      t.end();\n    });\n    res.on('data', function (data) {\n      buffers.push(data);\n    });\n  });\n  req.write(reference);\n  req.end();\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/stream-http/test/browser/post-binary.js"],"names":["Buffer","require","fs","test","UAParser","http","browser","setUA","navigator","userAgent","getBrowser","browserName","name","browserVersion","major","skipVerification","reference","readFileSync","__dirname","t","req","request","path","method","res","buffers","on","skip","ok","equals","concat","end","data","push","write"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,MAA/B;;AACA,IAAIE,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,cAAD,CAAtB;;AAEA,IAAII,IAAI,GAAGJ,OAAO,CAAC,OAAD,CAAlB;;AAEA,IAAIK,OAAO,GAAI,IAAIF,QAAJ,EAAD,CAAiBG,KAAjB,CAAuBC,SAAS,CAACC,SAAjC,EAA4CC,UAA5C,EAAd;AACA,IAAIC,WAAW,GAAGL,OAAO,CAACM,IAA1B;AACA,IAAIC,cAAc,GAAGP,OAAO,CAACQ,KAA7B,C,CACA;;AACA,IAAIC,gBAAgB,GAAKJ,WAAW,KAAK,IAAhB,IAAwBE,cAAc,IAAI,EAA3C,IACtBF,WAAW,KAAK,QAAhB,IAA4BE,cAAc,IAAI,CADxB,IAEtBF,WAAW,KAAK,QAAhB,IAA4BE,cAAc,IAAI,GAFxB,IAEgC;AACtDF,WAAW,KAAK,iBAAhB,IAAqCE,cAAc,IAAI,CAHzD;AAKA,IAAIG,SAAS,GAAGd,EAAE,CAACe,YAAH,CAAgBC,SAAS,GAAG,kCAA5B,CAAhB;AAEAf,IAAI,CAAC,aAAD,EAAgB,UAAUgB,CAAV,EAAa;AAChC,MAAIC,GAAG,GAAGf,IAAI,CAACgB,OAAL,CAAa;AACtBC,IAAAA,IAAI,EAAE,OADgB;AAEtBC,IAAAA,MAAM,EAAE;AAFc,GAAb,EAGP,UAAUC,GAAV,EAAe;AACjB,QAAIC,OAAO,GAAG,EAAd;AAEAD,IAAAA,GAAG,CAACE,EAAJ,CAAO,KAAP,EAAc,YAAY;AACzB,UAAIX,gBAAJ,EACCI,CAAC,CAACQ,IAAF,CAAO,2CAAP,EADD,KAGCR,CAAC,CAACS,EAAF,CAAKZ,SAAS,CAACa,MAAV,CAAiB7B,MAAM,CAAC8B,MAAP,CAAcL,OAAd,CAAjB,CAAL,EAA+C,uBAA/C;AACDN,MAAAA,CAAC,CAACY,GAAF;AACA,KAND;AAQAP,IAAAA,GAAG,CAACE,EAAJ,CAAO,MAAP,EAAe,UAAUM,IAAV,EAAgB;AAC9BP,MAAAA,OAAO,CAACQ,IAAR,CAAaD,IAAb;AACA,KAFD;AAGA,GAjBS,CAAV;AAmBAZ,EAAAA,GAAG,CAACc,KAAJ,CAAUlB,SAAV;AACAI,EAAAA,GAAG,CAACW,GAAJ;AACA,CAtBG,CAAJ","sourcesContent":["var Buffer = require('buffer').Buffer\nvar fs = require('fs')\nvar test = require('tape')\nvar UAParser = require('ua-parser-js')\n\nvar http = require('../..')\n\nvar browser = (new UAParser()).setUA(navigator.userAgent).getBrowser()\nvar browserName = browser.name\nvar browserVersion = browser.major\n// Binary request bodies don't work in a bunch of browsers\nvar skipVerification = ((browserName === 'IE' && browserVersion <= 10) ||\n\t(browserName === 'Safari' && browserVersion <= 5) ||\n\t(browserName === 'WebKit' && browserVersion <= 534) || // Old mobile safari\n\t(browserName === 'Android Browser' && browserVersion <= 4))\n\nvar reference = fs.readFileSync(__dirname + '/../server/static/browserify.png')\n\ntest('post binary', function (t) {\n\tvar req = http.request({\n\t\tpath: '/echo',\n\t\tmethod: 'POST'\n\t}, function (res) {\n\t\tvar buffers = []\n\n\t\tres.on('end', function () {\n\t\t\tif (skipVerification)\n\t\t\t\tt.skip('binary data not preserved on this browser')\n\t\t\telse\n\t\t\t\tt.ok(reference.equals(Buffer.concat(buffers)), 'echoed contents match')\n\t\t\tt.end()\n\t\t})\n\n\t\tres.on('data', function (data) {\n\t\t\tbuffers.push(data)\n\t\t})\n\t})\n\n\treq.write(reference)\n\treq.end()\n})"]},"metadata":{},"sourceType":"script"}