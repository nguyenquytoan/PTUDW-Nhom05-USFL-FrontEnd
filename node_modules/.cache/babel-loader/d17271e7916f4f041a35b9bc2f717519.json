{"ast":null,"code":"var roundingPrecisionFrom = require('./rounding-precision').roundingPrecisionFrom;\n\nvar override = require('../utils/override');\n\nvar OptimizationLevel = {\n  Zero: '0',\n  One: '1',\n  Two: '2'\n};\nvar DEFAULTS = {};\nDEFAULTS[OptimizationLevel.Zero] = {};\nDEFAULTS[OptimizationLevel.One] = {\n  cleanupCharsets: true,\n  normalizeUrls: true,\n  optimizeBackground: true,\n  optimizeBorderRadius: true,\n  optimizeFilter: true,\n  optimizeFontWeight: true,\n  optimizeOutline: true,\n  removeEmpty: true,\n  removeNegativePaddings: true,\n  removeQuotes: true,\n  removeWhitespace: true,\n  replaceMultipleZeros: true,\n  replaceTimeUnits: true,\n  replaceZeroUnits: true,\n  roundingPrecision: roundingPrecisionFrom(undefined),\n  selectorsSortingMethod: 'standard',\n  specialComments: 'all',\n  tidyAtRules: true,\n  tidyBlockScopes: true,\n  tidySelectors: true,\n  transform: noop\n};\nDEFAULTS[OptimizationLevel.Two] = {\n  mergeAdjacentRules: true,\n  mergeIntoShorthands: true,\n  mergeMedia: true,\n  mergeNonAdjacentRules: true,\n  mergeSemantically: false,\n  overrideProperties: true,\n  removeEmpty: true,\n  reduceNonAdjacentRules: true,\n  removeDuplicateFontRules: true,\n  removeDuplicateMediaBlocks: true,\n  removeDuplicateRules: true,\n  removeUnusedAtRules: false,\n  restructureRules: false,\n  skipProperties: []\n};\nvar ALL_KEYWORD_1 = '*';\nvar ALL_KEYWORD_2 = 'all';\nvar FALSE_KEYWORD_1 = 'false';\nvar FALSE_KEYWORD_2 = 'off';\nvar TRUE_KEYWORD_1 = 'true';\nvar TRUE_KEYWORD_2 = 'on';\nvar LIST_VALUE_SEPARATOR = ',';\nvar OPTION_SEPARATOR = ';';\nvar OPTION_VALUE_SEPARATOR = ':';\n\nfunction noop() {}\n\nfunction optimizationLevelFrom(source) {\n  var level = override(DEFAULTS, {});\n  var Zero = OptimizationLevel.Zero;\n  var One = OptimizationLevel.One;\n  var Two = OptimizationLevel.Two;\n\n  if (undefined === source) {\n    delete level[Two];\n    return level;\n  }\n\n  if (typeof source == 'string') {\n    source = parseInt(source);\n  }\n\n  if (typeof source == 'number' && source === parseInt(Two)) {\n    return level;\n  }\n\n  if (typeof source == 'number' && source === parseInt(One)) {\n    delete level[Two];\n    return level;\n  }\n\n  if (typeof source == 'number' && source === parseInt(Zero)) {\n    delete level[Two];\n    delete level[One];\n    return level;\n  }\n\n  if (typeof source == 'object') {\n    source = covertValuesToHashes(source);\n  }\n\n  if (One in source && 'roundingPrecision' in source[One]) {\n    source[One].roundingPrecision = roundingPrecisionFrom(source[One].roundingPrecision);\n  }\n\n  if (Two in source && 'skipProperties' in source[Two] && typeof source[Two].skipProperties == 'string') {\n    source[Two].skipProperties = source[Two].skipProperties.split(LIST_VALUE_SEPARATOR);\n  }\n\n  if (Zero in source || One in source || Two in source) {\n    level[Zero] = override(level[Zero], source[Zero]);\n  }\n\n  if (One in source && ALL_KEYWORD_1 in source[One]) {\n    level[One] = override(level[One], defaults(One, normalizeValue(source[One][ALL_KEYWORD_1])));\n    delete source[One][ALL_KEYWORD_1];\n  }\n\n  if (One in source && ALL_KEYWORD_2 in source[One]) {\n    level[One] = override(level[One], defaults(One, normalizeValue(source[One][ALL_KEYWORD_2])));\n    delete source[One][ALL_KEYWORD_2];\n  }\n\n  if (One in source || Two in source) {\n    level[One] = override(level[One], source[One]);\n  } else {\n    delete level[One];\n  }\n\n  if (Two in source && ALL_KEYWORD_1 in source[Two]) {\n    level[Two] = override(level[Two], defaults(Two, normalizeValue(source[Two][ALL_KEYWORD_1])));\n    delete source[Two][ALL_KEYWORD_1];\n  }\n\n  if (Two in source && ALL_KEYWORD_2 in source[Two]) {\n    level[Two] = override(level[Two], defaults(Two, normalizeValue(source[Two][ALL_KEYWORD_2])));\n    delete source[Two][ALL_KEYWORD_2];\n  }\n\n  if (Two in source) {\n    level[Two] = override(level[Two], source[Two]);\n  } else {\n    delete level[Two];\n  }\n\n  return level;\n}\n\nfunction defaults(level, value) {\n  var options = override(DEFAULTS[level], {});\n  var key;\n\n  for (key in options) {\n    if (typeof options[key] == 'boolean') {\n      options[key] = value;\n    }\n  }\n\n  return options;\n}\n\nfunction normalizeValue(value) {\n  switch (value) {\n    case FALSE_KEYWORD_1:\n    case FALSE_KEYWORD_2:\n      return false;\n\n    case TRUE_KEYWORD_1:\n    case TRUE_KEYWORD_2:\n      return true;\n\n    default:\n      return value;\n  }\n}\n\nfunction covertValuesToHashes(source) {\n  var clonedSource = override(source, {});\n  var level;\n  var i;\n\n  for (i = 0; i <= 2; i++) {\n    level = '' + i;\n\n    if (level in clonedSource && (clonedSource[level] === undefined || clonedSource[level] === false)) {\n      delete clonedSource[level];\n    }\n\n    if (level in clonedSource && clonedSource[level] === true) {\n      clonedSource[level] = {};\n    }\n\n    if (level in clonedSource && typeof clonedSource[level] == 'string') {\n      clonedSource[level] = covertToHash(clonedSource[level], level);\n    }\n  }\n\n  return clonedSource;\n}\n\nfunction covertToHash(asString, level) {\n  return asString.split(OPTION_SEPARATOR).reduce(function (accumulator, directive) {\n    var parts = directive.split(OPTION_VALUE_SEPARATOR);\n    var name = parts[0];\n    var value = parts[1];\n    var normalizedValue = normalizeValue(value);\n\n    if (ALL_KEYWORD_1 == name || ALL_KEYWORD_2 == name) {\n      accumulator = override(accumulator, defaults(level, normalizedValue));\n    } else {\n      accumulator[name] = normalizedValue;\n    }\n\n    return accumulator;\n  }, {});\n}\n\nmodule.exports = {\n  OptimizationLevel: OptimizationLevel,\n  optimizationLevelFrom: optimizationLevelFrom\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/clean-css/lib/options/optimization-level.js"],"names":["roundingPrecisionFrom","require","override","OptimizationLevel","Zero","One","Two","DEFAULTS","cleanupCharsets","normalizeUrls","optimizeBackground","optimizeBorderRadius","optimizeFilter","optimizeFontWeight","optimizeOutline","removeEmpty","removeNegativePaddings","removeQuotes","removeWhitespace","replaceMultipleZeros","replaceTimeUnits","replaceZeroUnits","roundingPrecision","undefined","selectorsSortingMethod","specialComments","tidyAtRules","tidyBlockScopes","tidySelectors","transform","noop","mergeAdjacentRules","mergeIntoShorthands","mergeMedia","mergeNonAdjacentRules","mergeSemantically","overrideProperties","reduceNonAdjacentRules","removeDuplicateFontRules","removeDuplicateMediaBlocks","removeDuplicateRules","removeUnusedAtRules","restructureRules","skipProperties","ALL_KEYWORD_1","ALL_KEYWORD_2","FALSE_KEYWORD_1","FALSE_KEYWORD_2","TRUE_KEYWORD_1","TRUE_KEYWORD_2","LIST_VALUE_SEPARATOR","OPTION_SEPARATOR","OPTION_VALUE_SEPARATOR","optimizationLevelFrom","source","level","parseInt","covertValuesToHashes","split","defaults","normalizeValue","value","options","key","clonedSource","i","covertToHash","asString","reduce","accumulator","directive","parts","name","normalizedValue","module","exports"],"mappings":"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","sourcesContent":["var roundingPrecisionFrom = require('./rounding-precision').roundingPrecisionFrom;\n\nvar override = require('../utils/override');\n\nvar OptimizationLevel = {\n  Zero: '0',\n  One: '1',\n  Two: '2'\n};\n\nvar DEFAULTS = {};\n\nDEFAULTS[OptimizationLevel.Zero] = {};\nDEFAULTS[OptimizationLevel.One] = {\n  cleanupCharsets: true,\n  normalizeUrls: true,\n  optimizeBackground: true,\n  optimizeBorderRadius: true,\n  optimizeFilter: true,\n  optimizeFontWeight: true,\n  optimizeOutline: true,\n  removeEmpty: true,\n  removeNegativePaddings: true,\n  removeQuotes: true,\n  removeWhitespace: true,\n  replaceMultipleZeros: true,\n  replaceTimeUnits: true,\n  replaceZeroUnits: true,\n  roundingPrecision: roundingPrecisionFrom(undefined),\n  selectorsSortingMethod: 'standard',\n  specialComments: 'all',\n  tidyAtRules: true,\n  tidyBlockScopes: true,\n  tidySelectors: true,\n  transform: noop\n};\nDEFAULTS[OptimizationLevel.Two] = {\n  mergeAdjacentRules: true,\n  mergeIntoShorthands: true,\n  mergeMedia: true,\n  mergeNonAdjacentRules: true,\n  mergeSemantically: false,\n  overrideProperties: true,\n  removeEmpty: true,\n  reduceNonAdjacentRules: true,\n  removeDuplicateFontRules: true,\n  removeDuplicateMediaBlocks: true,\n  removeDuplicateRules: true,\n  removeUnusedAtRules: false,\n  restructureRules: false,\n  skipProperties: []\n};\n\nvar ALL_KEYWORD_1 = '*';\nvar ALL_KEYWORD_2 = 'all';\nvar FALSE_KEYWORD_1 = 'false';\nvar FALSE_KEYWORD_2 = 'off';\nvar TRUE_KEYWORD_1 = 'true';\nvar TRUE_KEYWORD_2 = 'on';\n\nvar LIST_VALUE_SEPARATOR = ',';\nvar OPTION_SEPARATOR = ';';\nvar OPTION_VALUE_SEPARATOR = ':';\n\nfunction noop() {}\n\nfunction optimizationLevelFrom(source) {\n  var level = override(DEFAULTS, {});\n  var Zero = OptimizationLevel.Zero;\n  var One = OptimizationLevel.One;\n  var Two = OptimizationLevel.Two;\n\n\n  if (undefined === source) {\n    delete level[Two];\n    return level;\n  }\n\n  if (typeof source == 'string') {\n    source = parseInt(source);\n  }\n\n  if (typeof source == 'number' && source === parseInt(Two)) {\n    return level;\n  }\n\n  if (typeof source == 'number' && source === parseInt(One)) {\n    delete level[Two];\n    return level;\n  }\n\n  if (typeof source == 'number' && source === parseInt(Zero)) {\n    delete level[Two];\n    delete level[One];\n    return level;\n  }\n\n  if (typeof source == 'object') {\n    source = covertValuesToHashes(source);\n  }\n\n  if (One in source && 'roundingPrecision' in source[One]) {\n    source[One].roundingPrecision = roundingPrecisionFrom(source[One].roundingPrecision);\n  }\n\n  if (Two in source && 'skipProperties' in source[Two] && typeof(source[Two].skipProperties) == 'string') {\n    source[Two].skipProperties = source[Two].skipProperties.split(LIST_VALUE_SEPARATOR);\n  }\n\n  if (Zero in source || One in source || Two in source) {\n    level[Zero] = override(level[Zero], source[Zero]);\n  }\n\n  if (One in source && ALL_KEYWORD_1 in source[One]) {\n    level[One] = override(level[One], defaults(One, normalizeValue(source[One][ALL_KEYWORD_1])));\n    delete source[One][ALL_KEYWORD_1];\n  }\n\n  if (One in source && ALL_KEYWORD_2 in source[One]) {\n    level[One] = override(level[One], defaults(One, normalizeValue(source[One][ALL_KEYWORD_2])));\n    delete source[One][ALL_KEYWORD_2];\n  }\n\n  if (One in source || Two in source) {\n    level[One] = override(level[One], source[One]);\n  } else {\n    delete level[One];\n  }\n\n  if (Two in source && ALL_KEYWORD_1 in source[Two]) {\n    level[Two] = override(level[Two], defaults(Two, normalizeValue(source[Two][ALL_KEYWORD_1])));\n    delete source[Two][ALL_KEYWORD_1];\n  }\n\n  if (Two in source && ALL_KEYWORD_2 in source[Two]) {\n    level[Two] = override(level[Two], defaults(Two, normalizeValue(source[Two][ALL_KEYWORD_2])));\n    delete source[Two][ALL_KEYWORD_2];\n  }\n\n  if (Two in source) {\n    level[Two] = override(level[Two], source[Two]);\n  } else {\n    delete level[Two];\n  }\n\n  return level;\n}\n\nfunction defaults(level, value) {\n  var options = override(DEFAULTS[level], {});\n  var key;\n\n  for (key in options) {\n    if (typeof options[key] == 'boolean') {\n      options[key] = value;\n    }\n  }\n\n  return options;\n}\n\nfunction normalizeValue(value) {\n  switch (value) {\n    case FALSE_KEYWORD_1:\n    case FALSE_KEYWORD_2:\n      return false;\n    case TRUE_KEYWORD_1:\n    case TRUE_KEYWORD_2:\n      return true;\n    default:\n      return value;\n  }\n}\n\nfunction covertValuesToHashes(source) {\n  var clonedSource = override(source, {});\n  var level;\n  var i;\n\n  for (i = 0; i <= 2; i++) {\n    level = '' + i;\n\n    if (level in clonedSource && (clonedSource[level] === undefined || clonedSource[level] === false)) {\n      delete clonedSource[level];\n    }\n\n    if (level in clonedSource && clonedSource[level] === true) {\n      clonedSource[level] = {};\n    }\n\n    if (level in clonedSource && typeof clonedSource[level] == 'string') {\n      clonedSource[level] = covertToHash(clonedSource[level], level);\n    }\n  }\n\n  return clonedSource;\n}\n\nfunction covertToHash(asString, level) {\n  return asString\n    .split(OPTION_SEPARATOR)\n    .reduce(function (accumulator, directive) {\n      var parts = directive.split(OPTION_VALUE_SEPARATOR);\n      var name = parts[0];\n      var value = parts[1];\n      var normalizedValue = normalizeValue(value);\n\n      if (ALL_KEYWORD_1 == name || ALL_KEYWORD_2 == name) {\n        accumulator = override(accumulator, defaults(level, normalizedValue));\n      } else {\n        accumulator[name] = normalizedValue;\n      }\n\n      return accumulator;\n    }, {});\n}\n\nmodule.exports = {\n  OptimizationLevel: OptimizationLevel,\n  optimizationLevelFrom: optimizationLevelFrom,\n};\n"]},"metadata":{},"sourceType":"script"}