{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"chai\").assert,\n    isDate = require(\"../../date/is\");\n\ndescribe(\"date/is\", function () {\n  it(\"Should return true on date\", function () {\n    assert.equal(isDate(new Date()), true);\n  });\n  it(\"Should return false on invalid date\", function () {\n    assert.equal(isDate(new Date(\"foo\")), false);\n  });\n  it(\"Should return false on native date with no common API exposed\", function () {\n    var value = new Date();\n    value.getFullYear = null;\n    assert.equal(isDate(value), false);\n  });\n  it(\"Should return false on Date.prototype\", function () {\n    assert.equal(isDate(Date.prototype), false);\n  });\n  it(\"Should return false on time value\", function () {\n    assert.equal(isDate(12312313), false);\n  });\n  it(\"Should return false on plain object\", function () {\n    assert.equal(isDate({}), false);\n  });\n  it(\"Should return false on function\", function () {\n    assert.equal(isDate(function () {\n      return true;\n    }), false);\n  });\n  it(\"Should return false on array\", function () {\n    assert.equal(isDate([]), false);\n  });\n\n  if (typeof Object.create === \"function\") {\n    it(\"Should return false on object with no prototype\", function () {\n      assert.equal(isDate(Object.create(null)), false);\n    });\n  }\n\n  it(\"Should return false on string\", function () {\n    assert.equal(isDate(\"foo\"), false);\n  });\n  it(\"Should return false on empty string\", function () {\n    assert.equal(isDate(\"\"), false);\n  });\n  it(\"Should return false on number\", function () {\n    assert.equal(isDate(123), false);\n  });\n  it(\"Should return false on NaN\", function () {\n    assert.equal(isDate(NaN), false);\n  });\n  it(\"Should return false on boolean\", function () {\n    assert.equal(isDate(true), false);\n  });\n\n  if (typeof Symbol === \"function\") {\n    it(\"Should return false on symbol\", function () {\n      assert.equal(isDate(Symbol(\"foo\")), false);\n    });\n  }\n\n  it(\"Should return false on null\", function () {\n    assert.equal(isDate(null), false);\n  });\n  it(\"Should return false on undefined\", function () {\n    assert.equal(isDate(void 0), false);\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type/test/date/is.js"],"names":["assert","require","isDate","describe","it","equal","Date","value","getFullYear","prototype","Object","create","NaN","Symbol"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBD,MAA7B;AAAA,IACIE,MAAM,GAAGD,OAAO,CAAC,eAAD,CADpB;;AAGAE,QAAQ,CAAC,SAAD,EAAY,YAAY;AAC/BC,EAAAA,EAAE,CAAC,4BAAD,EAA+B,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAAC,IAAII,IAAJ,EAAD,CAAnB,EAAiC,IAAjC;AAAyC,GAAtF,CAAF;AACAF,EAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAY;AACrDJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAAC,IAAII,IAAJ,CAAS,KAAT,CAAD,CAAnB,EAAsC,KAAtC;AACA,GAFC,CAAF;AAIAF,EAAAA,EAAE,CAAC,+DAAD,EAAkE,YAAY;AAC/E,QAAIG,KAAK,GAAG,IAAID,IAAJ,EAAZ;AACAC,IAAAA,KAAK,CAACC,WAAN,GAAoB,IAApB;AACAR,IAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAACK,KAAD,CAAnB,EAA4B,KAA5B;AACA,GAJC,CAAF;AAKAH,EAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAY;AACvDJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAACI,IAAI,CAACG,SAAN,CAAnB,EAAqC,KAArC;AACA,GAFC,CAAF;AAGAL,EAAAA,EAAE,CAAC,mCAAD,EAAsC,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAAC,QAAD,CAAnB,EAA+B,KAA/B;AAAwC,GAA5F,CAAF;AAEAE,EAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAAC,EAAD,CAAnB,EAAyB,KAAzB;AAAkC,GAAxF,CAAF;AACAE,EAAAA,EAAE,CAAC,iCAAD,EAAoC,YAAY;AACjDJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAAC,YAAY;AAAE,aAAO,IAAP;AAAc,KAA7B,CAAnB,EAAmD,KAAnD;AACA,GAFC,CAAF;AAIAE,EAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAAC,EAAD,CAAnB,EAAyB,KAAzB;AAAkC,GAAjF,CAAF;;AACA,MAAI,OAAOQ,MAAM,CAACC,MAAd,KAAyB,UAA7B,EAAyC;AACxCP,IAAAA,EAAE,CAAC,iDAAD,EAAoD,YAAY;AACjEJ,MAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAACQ,MAAM,CAACC,MAAP,CAAc,IAAd,CAAD,CAAnB,EAA0C,KAA1C;AACA,KAFC,CAAF;AAGA;;AACDP,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAAC,KAAD,CAAnB,EAA4B,KAA5B;AAAqC,GAArF,CAAF;AACAE,EAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAAC,EAAD,CAAnB,EAAyB,KAAzB;AAAkC,GAAxF,CAAF;AACAE,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAAC,GAAD,CAAnB,EAA0B,KAA1B;AAAmC,GAAnF,CAAF;AACAE,EAAAA,EAAE,CAAC,4BAAD,EAA+B,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAACU,GAAD,CAAnB,EAA0B,KAA1B;AAAmC,GAAhF,CAAF;AACAR,EAAAA,EAAE,CAAC,gCAAD,EAAmC,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAAC,IAAD,CAAnB,EAA2B,KAA3B;AAAoC,GAArF,CAAF;;AACA,MAAI,OAAOW,MAAP,KAAkB,UAAtB,EAAkC;AACjCT,IAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAY;AAC/CJ,MAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAACW,MAAM,CAAC,KAAD,CAAP,CAAnB,EAAoC,KAApC;AACA,KAFC,CAAF;AAGA;;AAEDT,EAAAA,EAAE,CAAC,6BAAD,EAAgC,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAAC,IAAD,CAAnB,EAA2B,KAA3B;AAAoC,GAAlF,CAAF;AACAE,EAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAY;AAAEJ,IAAAA,MAAM,CAACK,KAAP,CAAaH,MAAM,CAAC,KAAK,CAAN,CAAnB,EAA6B,KAA7B;AAAsC,GAAzF,CAAF;AACA,CAxCO,CAAR","sourcesContent":["\"use strict\";\n\nvar assert = require(\"chai\").assert\n  , isDate = require(\"../../date/is\");\n\ndescribe(\"date/is\", function () {\n\tit(\"Should return true on date\", function () { assert.equal(isDate(new Date()), true); });\n\tit(\"Should return false on invalid date\", function () {\n\t\tassert.equal(isDate(new Date(\"foo\")), false);\n\t});\n\n\tit(\"Should return false on native date with no common API exposed\", function () {\n\t\tvar value = new Date();\n\t\tvalue.getFullYear = null;\n\t\tassert.equal(isDate(value), false);\n\t});\n\tit(\"Should return false on Date.prototype\", function () {\n\t\tassert.equal(isDate(Date.prototype), false);\n\t});\n\tit(\"Should return false on time value\", function () { assert.equal(isDate(12312313), false); });\n\n\tit(\"Should return false on plain object\", function () { assert.equal(isDate({}), false); });\n\tit(\"Should return false on function\", function () {\n\t\tassert.equal(isDate(function () { return true; }), false);\n\t});\n\n\tit(\"Should return false on array\", function () { assert.equal(isDate([]), false); });\n\tif (typeof Object.create === \"function\") {\n\t\tit(\"Should return false on object with no prototype\", function () {\n\t\t\tassert.equal(isDate(Object.create(null)), false);\n\t\t});\n\t}\n\tit(\"Should return false on string\", function () { assert.equal(isDate(\"foo\"), false); });\n\tit(\"Should return false on empty string\", function () { assert.equal(isDate(\"\"), false); });\n\tit(\"Should return false on number\", function () { assert.equal(isDate(123), false); });\n\tit(\"Should return false on NaN\", function () { assert.equal(isDate(NaN), false); });\n\tit(\"Should return false on boolean\", function () { assert.equal(isDate(true), false); });\n\tif (typeof Symbol === \"function\") {\n\t\tit(\"Should return false on symbol\", function () {\n\t\t\tassert.equal(isDate(Symbol(\"foo\")), false);\n\t\t});\n\t}\n\n\tit(\"Should return false on null\", function () { assert.equal(isDate(null), false); });\n\tit(\"Should return false on undefined\", function () { assert.equal(isDate(void 0), false); });\n});\n"]},"metadata":{},"sourceType":"script"}