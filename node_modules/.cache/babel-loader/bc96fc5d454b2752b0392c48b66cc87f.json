{"ast":null,"code":"/**\n * @fileoverview Enforce newlines between operands of ternary expressions\n * @author Kai Cataldo\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce newlines between operands of ternary expressions\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/multiline-ternary\"\n    },\n    schema: [{\n      enum: [\"always\", \"always-multiline\", \"never\"]\n    }],\n    messages: {\n      expectedTestCons: \"Expected newline between test and consequent of ternary expression.\",\n      expectedConsAlt: \"Expected newline between consequent and alternate of ternary expression.\",\n      unexpectedTestCons: \"Unexpected newline between test and consequent of ternary expression.\",\n      unexpectedConsAlt: \"Unexpected newline between consequent and alternate of ternary expression.\"\n    }\n  },\n\n  create(context) {\n    const option = context.options[0];\n    const multiline = option !== \"never\";\n    const allowSingleLine = option === \"always-multiline\"; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Tests whether node is preceded by supplied tokens\n     * @param {ASTNode} node node to check\n     * @param {ASTNode} parentNode parent of node to report\n     * @param {boolean} expected whether newline was expected or not\n     * @returns {void}\n     * @private\n     */\n\n    function reportError(node, parentNode, expected) {\n      context.report({\n        node,\n        messageId: `${expected ? \"expected\" : \"unexpected\"}${node === parentNode.test ? \"TestCons\" : \"ConsAlt\"}`\n      });\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      ConditionalExpression(node) {\n        const areTestAndConsequentOnSameLine = astUtils.isTokenOnSameLine(node.test, node.consequent);\n        const areConsequentAndAlternateOnSameLine = astUtils.isTokenOnSameLine(node.consequent, node.alternate);\n\n        if (!multiline) {\n          if (!areTestAndConsequentOnSameLine) {\n            reportError(node.test, node, false);\n          }\n\n          if (!areConsequentAndAlternateOnSameLine) {\n            reportError(node.consequent, node, false);\n          }\n        } else {\n          if (allowSingleLine && node.loc.start.line === node.loc.end.line) {\n            return;\n          }\n\n          if (areTestAndConsequentOnSameLine) {\n            reportError(node.test, node, true);\n          }\n\n          if (areConsequentAndAlternateOnSameLine) {\n            reportError(node.consequent, node, true);\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/multiline-ternary.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","enum","messages","expectedTestCons","expectedConsAlt","unexpectedTestCons","unexpectedConsAlt","create","context","option","options","multiline","allowSingleLine","reportError","node","parentNode","expected","report","messageId","test","ConditionalExpression","areTestAndConsequentOnSameLine","isTokenOnSameLine","consequent","areConsequentAndAlternateOnSameLine","alternate","loc","start","line","end"],"mappings":"AAAA;;;;AAKA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,QADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,0DADX;AAEFC,MAAAA,QAAQ,EAAE,kBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,kBAAX,EAA+B,OAA/B;AADV,KADI,CAVN;AAeFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,gBAAgB,EAAE,qEADZ;AAENC,MAAAA,eAAe,EAAE,0EAFX;AAGNC,MAAAA,kBAAkB,EAAE,uEAHd;AAINC,MAAAA,iBAAiB,EAAE;AAJb;AAfR,GADO;;AAwBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,MAAM,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAAf;AACA,UAAMC,SAAS,GAAGF,MAAM,KAAK,OAA7B;AACA,UAAMG,eAAe,GAAGH,MAAM,KAAK,kBAAnC,CAHY,CAKZ;AACA;AACA;;AAEA;;;;;;;;;AAQA,aAASI,WAAT,CAAqBC,IAArB,EAA2BC,UAA3B,EAAuCC,QAAvC,EAAiD;AAC7CR,MAAAA,OAAO,CAACS,MAAR,CAAe;AACXH,QAAAA,IADW;AAEXI,QAAAA,SAAS,EAAG,GAAEF,QAAQ,GAAG,UAAH,GAAgB,YAAa,GAAEF,IAAI,KAAKC,UAAU,CAACI,IAApB,GAA2B,UAA3B,GAAwC,SAAU;AAF5F,OAAf;AAIH,KAtBW,CAwBZ;AACA;AACA;;;AAEA,WAAO;AACHC,MAAAA,qBAAqB,CAACN,IAAD,EAAO;AACxB,cAAMO,8BAA8B,GAAGhC,QAAQ,CAACiC,iBAAT,CAA2BR,IAAI,CAACK,IAAhC,EAAsCL,IAAI,CAACS,UAA3C,CAAvC;AACA,cAAMC,mCAAmC,GAAGnC,QAAQ,CAACiC,iBAAT,CAA2BR,IAAI,CAACS,UAAhC,EAA4CT,IAAI,CAACW,SAAjD,CAA5C;;AAEA,YAAI,CAACd,SAAL,EAAgB;AACZ,cAAI,CAACU,8BAAL,EAAqC;AACjCR,YAAAA,WAAW,CAACC,IAAI,CAACK,IAAN,EAAYL,IAAZ,EAAkB,KAAlB,CAAX;AACH;;AAED,cAAI,CAACU,mCAAL,EAA0C;AACtCX,YAAAA,WAAW,CAACC,IAAI,CAACS,UAAN,EAAkBT,IAAlB,EAAwB,KAAxB,CAAX;AACH;AACJ,SARD,MAQO;AACH,cAAIF,eAAe,IAAIE,IAAI,CAACY,GAAL,CAASC,KAAT,CAAeC,IAAf,KAAwBd,IAAI,CAACY,GAAL,CAASG,GAAT,CAAaD,IAA5D,EAAkE;AAC9D;AACH;;AAED,cAAIP,8BAAJ,EAAoC;AAChCR,YAAAA,WAAW,CAACC,IAAI,CAACK,IAAN,EAAYL,IAAZ,EAAkB,IAAlB,CAAX;AACH;;AAED,cAAIU,mCAAJ,EAAyC;AACrCX,YAAAA,WAAW,CAACC,IAAI,CAACS,UAAN,EAAkBT,IAAlB,EAAwB,IAAxB,CAAX;AACH;AACJ;AACJ;;AA1BE,KAAP;AA4BH;;AAhFY,CAAjB","sourcesContent":["/**\n * @fileoverview Enforce newlines between operands of ternary expressions\n * @author Kai Cataldo\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce newlines between operands of ternary expressions\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/multiline-ternary\"\n        },\n\n        schema: [\n            {\n                enum: [\"always\", \"always-multiline\", \"never\"]\n            }\n        ],\n        messages: {\n            expectedTestCons: \"Expected newline between test and consequent of ternary expression.\",\n            expectedConsAlt: \"Expected newline between consequent and alternate of ternary expression.\",\n            unexpectedTestCons: \"Unexpected newline between test and consequent of ternary expression.\",\n            unexpectedConsAlt: \"Unexpected newline between consequent and alternate of ternary expression.\"\n        }\n    },\n\n    create(context) {\n        const option = context.options[0];\n        const multiline = option !== \"never\";\n        const allowSingleLine = option === \"always-multiline\";\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Tests whether node is preceded by supplied tokens\n         * @param {ASTNode} node node to check\n         * @param {ASTNode} parentNode parent of node to report\n         * @param {boolean} expected whether newline was expected or not\n         * @returns {void}\n         * @private\n         */\n        function reportError(node, parentNode, expected) {\n            context.report({\n                node,\n                messageId: `${expected ? \"expected\" : \"unexpected\"}${node === parentNode.test ? \"TestCons\" : \"ConsAlt\"}`\n            });\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            ConditionalExpression(node) {\n                const areTestAndConsequentOnSameLine = astUtils.isTokenOnSameLine(node.test, node.consequent);\n                const areConsequentAndAlternateOnSameLine = astUtils.isTokenOnSameLine(node.consequent, node.alternate);\n\n                if (!multiline) {\n                    if (!areTestAndConsequentOnSameLine) {\n                        reportError(node.test, node, false);\n                    }\n\n                    if (!areConsequentAndAlternateOnSameLine) {\n                        reportError(node.consequent, node, false);\n                    }\n                } else {\n                    if (allowSingleLine && node.loc.start.line === node.loc.end.line) {\n                        return;\n                    }\n\n                    if (areTestAndConsequentOnSameLine) {\n                        reportError(node.test, node, true);\n                    }\n\n                    if (areConsequentAndAlternateOnSameLine) {\n                        reportError(node.consequent, node, true);\n                    }\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}