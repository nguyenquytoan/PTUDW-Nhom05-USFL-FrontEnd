{"ast":null,"code":"/*\n Copyright 2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst fs = require('fs');\n\nconst os = require('os');\n\nconst path = require('path');\n\nconst mkdirp = require('make-dir');\n\nconst rimraf = require('rimraf');\n/* This exists for compatibility only to avoid changing the\n * prototype chain. */\n\n\nclass SourceStore {}\n\nclass MemoryStore extends SourceStore {\n  constructor() {\n    super();\n    this.data = {};\n  }\n\n  registerSource(filePath, sourceText) {\n    this.data[filePath] = sourceText;\n  }\n\n  getSource(filePath) {\n    return this.data[filePath] || null;\n  }\n\n  dispose() {}\n\n}\n\nclass FileStore extends SourceStore {\n  constructor(opts = {}) {\n    super();\n    const tmpDir = opts.tmpdir || os.tmpdir();\n    this.counter = 0;\n    this.mappings = [];\n    this.basePath = path.resolve(tmpDir, '.istanbul', 'cache_');\n    mkdirp.sync(path.dirname(this.basePath));\n  }\n\n  registerSource(filePath, sourceText) {\n    if (this.mappings[filePath]) {\n      return;\n    }\n\n    this.counter += 1;\n    const mapFile = this.basePath + this.counter;\n    this.mappings[filePath] = mapFile;\n    fs.writeFileSync(mapFile, sourceText, 'utf8');\n  }\n\n  getSource(filePath) {\n    const mapFile = this.mappings[filePath];\n\n    if (!mapFile) {\n      return null;\n    }\n\n    return fs.readFileSync(mapFile, 'utf8');\n  }\n\n  dispose() {\n    this.mappings = [];\n    rimraf.sync(path.dirname(this.basePath));\n  }\n\n}\n\nmodule.exports = {\n  create(type = 'memory', opts = {}) {\n    if (type.toLowerCase() === 'file') {\n      return new FileStore(opts);\n    }\n\n    return new MemoryStore(opts);\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/istanbul-lib-source-maps/lib/source-store.js"],"names":["fs","require","os","path","mkdirp","rimraf","SourceStore","MemoryStore","constructor","data","registerSource","filePath","sourceText","getSource","dispose","FileStore","opts","tmpDir","tmpdir","counter","mappings","basePath","resolve","sync","dirname","mapFile","writeFileSync","readFileSync","module","exports","create","type","toLowerCase"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAAtB;AAEA;;;;AAEA,MAAMK,WAAN,CAAkB;;AAElB,MAAMC,WAAN,SAA0BD,WAA1B,CAAsC;AAClCE,EAAAA,WAAW,GAAG;AACV;AAEA,SAAKC,IAAL,GAAY,EAAZ;AACH;;AAEDC,EAAAA,cAAc,CAACC,QAAD,EAAWC,UAAX,EAAuB;AACjC,SAAKH,IAAL,CAAUE,QAAV,IAAsBC,UAAtB;AACH;;AAEDC,EAAAA,SAAS,CAACF,QAAD,EAAW;AAChB,WAAO,KAAKF,IAAL,CAAUE,QAAV,KAAuB,IAA9B;AACH;;AAEDG,EAAAA,OAAO,GAAG,CAAE;;AAfsB;;AAkBtC,MAAMC,SAAN,SAAwBT,WAAxB,CAAoC;AAChCE,EAAAA,WAAW,CAACQ,IAAI,GAAG,EAAR,EAAY;AACnB;AAEA,UAAMC,MAAM,GAAGD,IAAI,CAACE,MAAL,IAAehB,EAAE,CAACgB,MAAH,EAA9B;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,QAAL,GAAgBlB,IAAI,CAACmB,OAAL,CAAaL,MAAb,EAAqB,WAArB,EAAkC,QAAlC,CAAhB;AACAb,IAAAA,MAAM,CAACmB,IAAP,CAAYpB,IAAI,CAACqB,OAAL,CAAa,KAAKH,QAAlB,CAAZ;AACH;;AAEDX,EAAAA,cAAc,CAACC,QAAD,EAAWC,UAAX,EAAuB;AACjC,QAAI,KAAKQ,QAAL,CAAcT,QAAd,CAAJ,EAA6B;AACzB;AACH;;AAED,SAAKQ,OAAL,IAAgB,CAAhB;AACA,UAAMM,OAAO,GAAG,KAAKJ,QAAL,GAAgB,KAAKF,OAArC;AACA,SAAKC,QAAL,CAAcT,QAAd,IAA0Bc,OAA1B;AACAzB,IAAAA,EAAE,CAAC0B,aAAH,CAAiBD,OAAjB,EAA0Bb,UAA1B,EAAsC,MAAtC;AACH;;AAEDC,EAAAA,SAAS,CAACF,QAAD,EAAW;AAChB,UAAMc,OAAO,GAAG,KAAKL,QAAL,CAAcT,QAAd,CAAhB;;AACA,QAAI,CAACc,OAAL,EAAc;AACV,aAAO,IAAP;AACH;;AAED,WAAOzB,EAAE,CAAC2B,YAAH,CAAgBF,OAAhB,EAAyB,MAAzB,CAAP;AACH;;AAEDX,EAAAA,OAAO,GAAG;AACN,SAAKM,QAAL,GAAgB,EAAhB;AACAf,IAAAA,MAAM,CAACkB,IAAP,CAAYpB,IAAI,CAACqB,OAAL,CAAa,KAAKH,QAAlB,CAAZ;AACH;;AAlC+B;;AAqCpCO,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,MAAM,CAACC,IAAI,GAAG,QAAR,EAAkBf,IAAI,GAAG,EAAzB,EAA6B;AAC/B,QAAIe,IAAI,CAACC,WAAL,OAAuB,MAA3B,EAAmC;AAC/B,aAAO,IAAIjB,SAAJ,CAAcC,IAAd,CAAP;AACH;;AAED,WAAO,IAAIT,WAAJ,CAAgBS,IAAhB,CAAP;AACH;;AAPY,CAAjB","sourcesContent":["/*\n Copyright 2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst fs = require('fs');\nconst os = require('os');\nconst path = require('path');\nconst mkdirp = require('make-dir');\nconst rimraf = require('rimraf');\n\n/* This exists for compatibility only to avoid changing the\n * prototype chain. */\nclass SourceStore {}\n\nclass MemoryStore extends SourceStore {\n    constructor() {\n        super();\n\n        this.data = {};\n    }\n\n    registerSource(filePath, sourceText) {\n        this.data[filePath] = sourceText;\n    }\n\n    getSource(filePath) {\n        return this.data[filePath] || null;\n    }\n\n    dispose() {}\n}\n\nclass FileStore extends SourceStore {\n    constructor(opts = {}) {\n        super();\n\n        const tmpDir = opts.tmpdir || os.tmpdir();\n        this.counter = 0;\n        this.mappings = [];\n        this.basePath = path.resolve(tmpDir, '.istanbul', 'cache_');\n        mkdirp.sync(path.dirname(this.basePath));\n    }\n\n    registerSource(filePath, sourceText) {\n        if (this.mappings[filePath]) {\n            return;\n        }\n\n        this.counter += 1;\n        const mapFile = this.basePath + this.counter;\n        this.mappings[filePath] = mapFile;\n        fs.writeFileSync(mapFile, sourceText, 'utf8');\n    }\n\n    getSource(filePath) {\n        const mapFile = this.mappings[filePath];\n        if (!mapFile) {\n            return null;\n        }\n\n        return fs.readFileSync(mapFile, 'utf8');\n    }\n\n    dispose() {\n        this.mappings = [];\n        rimraf.sync(path.dirname(this.basePath));\n    }\n}\n\nmodule.exports = {\n    create(type = 'memory', opts = {}) {\n        if (type.toLowerCase() === 'file') {\n            return new FileStore(opts);\n        }\n\n        return new MemoryStore(opts);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}