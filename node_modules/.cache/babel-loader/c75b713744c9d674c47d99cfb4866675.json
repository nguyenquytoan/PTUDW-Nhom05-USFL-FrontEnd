{"ast":null,"code":"this.workbox = this.workbox || {}, this.workbox.routing = function (t, e, r) {\n  \"use strict\";\n\n  try {\n    self[\"workbox:routing:4.3.1\"] && _();\n  } catch (t) {}\n\n  const s = \"GET\",\n        n = t => t && \"object\" == typeof t ? t : {\n    handle: t\n  };\n\n  class o {\n    constructor(t, e, r) {\n      this.handler = n(e), this.match = t, this.method = r || s;\n    }\n\n  }\n\n  class i extends o {\n    constructor(t, {\n      whitelist: e = [/./],\n      blacklist: r = []\n    } = {}) {\n      super(t => this.t(t), t), this.s = e, this.o = r;\n    }\n\n    t({\n      url: t,\n      request: e\n    }) {\n      if (\"navigate\" !== e.mode) return !1;\n      const r = t.pathname + t.search;\n\n      for (const t of this.o) if (t.test(r)) return !1;\n\n      return !!this.s.some(t => t.test(r));\n    }\n\n  }\n\n  class u extends o {\n    constructor(t, e, r) {\n      super(({\n        url: e\n      }) => {\n        const r = t.exec(e.href);\n        return r ? e.origin !== location.origin && 0 !== r.index ? null : r.slice(1) : null;\n      }, e, r);\n    }\n\n  }\n\n  class c {\n    constructor() {\n      this.i = new Map();\n    }\n\n    get routes() {\n      return this.i;\n    }\n\n    addFetchListener() {\n      self.addEventListener(\"fetch\", t => {\n        const {\n          request: e\n        } = t,\n              r = this.handleRequest({\n          request: e,\n          event: t\n        });\n        r && t.respondWith(r);\n      });\n    }\n\n    addCacheListener() {\n      self.addEventListener(\"message\", async t => {\n        if (t.data && \"CACHE_URLS\" === t.data.type) {\n          const {\n            payload: e\n          } = t.data,\n                r = Promise.all(e.urlsToCache.map(t => {\n            \"string\" == typeof t && (t = [t]);\n            const e = new Request(...t);\n            return this.handleRequest({\n              request: e\n            });\n          }));\n          t.waitUntil(r), t.ports && t.ports[0] && (await r, t.ports[0].postMessage(!0));\n        }\n      });\n    }\n\n    handleRequest({\n      request: t,\n      event: e\n    }) {\n      const r = new URL(t.url, location);\n      if (!r.protocol.startsWith(\"http\")) return;\n      let s,\n          {\n        params: n,\n        route: o\n      } = this.findMatchingRoute({\n        url: r,\n        request: t,\n        event: e\n      }),\n          i = o && o.handler;\n\n      if (!i && this.u && (i = this.u), i) {\n        try {\n          s = i.handle({\n            url: r,\n            request: t,\n            event: e,\n            params: n\n          });\n        } catch (t) {\n          s = Promise.reject(t);\n        }\n\n        return s && this.h && (s = s.catch(t => this.h.handle({\n          url: r,\n          event: e,\n          err: t\n        }))), s;\n      }\n    }\n\n    findMatchingRoute({\n      url: t,\n      request: e,\n      event: r\n    }) {\n      const s = this.i.get(e.method) || [];\n\n      for (const n of s) {\n        let s,\n            o = n.match({\n          url: t,\n          request: e,\n          event: r\n        });\n        if (o) return Array.isArray(o) && o.length > 0 ? s = o : o.constructor === Object && Object.keys(o).length > 0 && (s = o), {\n          route: n,\n          params: s\n        };\n      }\n\n      return {};\n    }\n\n    setDefaultHandler(t) {\n      this.u = n(t);\n    }\n\n    setCatchHandler(t) {\n      this.h = n(t);\n    }\n\n    registerRoute(t) {\n      this.i.has(t.method) || this.i.set(t.method, []), this.i.get(t.method).push(t);\n    }\n\n    unregisterRoute(t) {\n      if (!this.i.has(t.method)) throw new r.WorkboxError(\"unregister-route-but-not-found-with-method\", {\n        method: t.method\n      });\n      const e = this.i.get(t.method).indexOf(t);\n      if (!(e > -1)) throw new r.WorkboxError(\"unregister-route-route-not-registered\");\n      this.i.get(t.method).splice(e, 1);\n    }\n\n  }\n\n  let a;\n\n  const h = () => (a || ((a = new c()).addFetchListener(), a.addCacheListener()), a);\n\n  return t.NavigationRoute = i, t.RegExpRoute = u, t.registerNavigationRoute = (t, r = {}) => {\n    const s = e.cacheNames.getPrecacheName(r.cacheName),\n          n = new i(async () => {\n      try {\n        const e = await caches.match(t, {\n          cacheName: s\n        });\n        if (e) return e;\n        throw new Error(`The cache ${s} did not have an entry for ` + `${t}.`);\n      } catch (e) {\n        return fetch(t);\n      }\n    }, {\n      whitelist: r.whitelist,\n      blacklist: r.blacklist\n    });\n    return h().registerRoute(n), n;\n  }, t.registerRoute = (t, e, s = \"GET\") => {\n    let n;\n\n    if (\"string\" == typeof t) {\n      const r = new URL(t, location);\n      n = new o(({\n        url: t\n      }) => t.href === r.href, e, s);\n    } else if (t instanceof RegExp) n = new u(t, e, s);else if (\"function\" == typeof t) n = new o(t, e, s);else {\n      if (!(t instanceof o)) throw new r.WorkboxError(\"unsupported-route-type\", {\n        moduleName: \"workbox-routing\",\n        funcName: \"registerRoute\",\n        paramName: \"capture\"\n      });\n      n = t;\n    }\n\n    return h().registerRoute(n), n;\n  }, t.Route = o, t.Router = c, t.setCatchHandler = t => {\n    h().setCatchHandler(t);\n  }, t.setDefaultHandler = t => {\n    h().setDefaultHandler(t);\n  }, t;\n}({}, workbox.core._private, workbox.core._private);","map":{"version":3,"sources":["../_version.mjs","../utils/constants.mjs","../utils/normalizeHandler.mjs","../Route.mjs","../NavigationRoute.mjs","../RegExpRoute.mjs","../Router.mjs","../utils/getOrCreateDefaultRouter.mjs","../registerNavigationRoute.mjs","../registerRoute.mjs","../setCatchHandler.mjs","../setDefaultHandler.mjs"],"names":["self","_","e","defaultMethod","normalizeHandler","handler","handle","Route","constructor","match","method","NavigationRoute","whitelist","blacklist","options","this","_match","_whitelist","_blacklist","url","request","mode","pathnameAndSearch","pathname","search","regExp","test","some","RegExpRoute","result","exec","href","origin","location","index","slice","Router","_routes","Map","addFetchListener","addEventListener","event","responsePromise","handleRequest","respondWith","addCacheListener","async","data","type","payload","requestPromises","Promise","all","urlsToCache","map","entry","Request","waitUntil","ports","postMessage","URL","protocol","startsWith","params","route","findMatchingRoute","_defaultHandler","err","reject","_catchHandler","catch","routes","get","matchResult","Array","isArray","length","Object","keys","setDefaultHandler","setCatchHandler","registerRoute","has","set","push","unregisterRoute","WorkboxError","routeIndex","indexOf","splice","defaultRouter","getOrCreateDefaultRouter","cachedAssetUrl","cacheName","cacheNames","getPrecacheName","response","caches","Error","error","fetch","capture","captureUrl","RegExp","moduleName","funcName","paramName"],"mappings":"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","sourcesContent":["try{self['workbox:routing:4.3.1']&&_()}catch(e){}// eslint-disable-line","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n  'DELETE',\n  'GET',\n  'HEAD',\n  'PATCH',\n  'POST',\n  'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport '../_version.mjs';\n\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n  if (handler && typeof handler === 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.hasMethod(handler, 'handle', {\n        moduleName: 'workbox-routing',\n        className: 'Route',\n        funcName: 'constructor',\n        paramName: 'handler',\n      });\n    }\n    return handler;\n  } else {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(handler, 'function', {\n        moduleName: 'workbox-routing',\n        className: 'Route',\n        funcName: 'constructor',\n        paramName: 'handler',\n      });\n    }\n    return {handle: handler};\n  }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\n\nimport {defaultMethod, validMethods} from './utils/constants.mjs';\nimport {normalizeHandler} from './utils/normalizeHandler.mjs';\nimport './_version.mjs';\n\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox.routing\n */\nclass Route {\n  /**\n   * Constructor for Route class.\n   *\n   * @param {workbox.routing.Route~matchCallback} match\n   * A callback function that determines whether the route matches a given\n   * `fetch` event by returning a non-falsy value.\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resolving to a Response.\n   * @param {string} [method='GET'] The HTTP method to match the Route\n   * against.\n   */\n  constructor(match, handler, method) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(match, 'function', {\n        moduleName: 'workbox-routing',\n        className: 'Route',\n        funcName: 'constructor',\n        paramName: 'match',\n      });\n\n      if (method) {\n        assert.isOneOf(method, validMethods, {paramName: 'method'});\n      }\n    }\n\n    // These values are referenced directly by Router so cannot be\n    // altered by minifification.\n    this.handler = normalizeHandler(handler);\n    this.match = match;\n    this.method = method || defaultMethod;\n  }\n}\n\nexport {Route};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {Route} from './Route.mjs';\nimport './_version.mjs';\n\n/**\n * NavigationRoute makes it easy to create a [Route]{@link\n * workbox.routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * [`mode`]{@link https://fetch.spec.whatwg.org/#concept-request-mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `blacklist` and `whitelist` parameters.\n *\n * @memberof workbox.routing\n * @extends workbox.routing.Route\n */\nclass NavigationRoute extends Route {\n  /**\n   * If both `blacklist` and `whiltelist` are provided, the `blacklist` will\n   * take precedence and the request will not match this route.\n   *\n   * The regular expressions in `whitelist` and `blacklist`\n   * are matched against the concatenated\n   * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n   * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n   * portions of the requested URL.\n   *\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   * @param {Object} options\n   * @param {Array<RegExp>} [options.blacklist] If any of these patterns match,\n   * the route will not handle the request (even if a whitelist RegExp matches).\n   * @param {Array<RegExp>} [options.whitelist=[/./]] If any of these patterns\n   * match the URL's pathname and search parameter, the route will handle the\n   * request (assuming the blacklist doesn't match).\n   */\n  constructor(handler, {whitelist = [/./], blacklist = []} = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isArrayOfClass(whitelist, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'NavigationRoute',\n        funcName: 'constructor',\n        paramName: 'options.whitelist',\n      });\n      assert.isArrayOfClass(blacklist, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'NavigationRoute',\n        funcName: 'constructor',\n        paramName: 'options.blacklist',\n      });\n    }\n\n    super((options) => this._match(options), handler);\n\n    this._whitelist = whitelist;\n    this._blacklist = blacklist;\n  }\n\n  /**\n   * Routes match handler.\n   *\n   * @param {Object} options\n   * @param {URL} options.url\n   * @param {Request} options.request\n   * @return {boolean}\n   *\n   * @private\n   */\n  _match({url, request}) {\n    if (request.mode !== 'navigate') {\n      return false;\n    }\n\n    const pathnameAndSearch = url.pathname + url.search;\n\n    for (const regExp of this._blacklist) {\n      if (regExp.test(pathnameAndSearch)) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.log(`The navigation route is not being used, since the ` +\n              `URL matches this blacklist pattern: ${regExp}`);\n        }\n        return false;\n      }\n    }\n\n    if (this._whitelist.some((regExp) => regExp.test(pathnameAndSearch))) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(`The navigation route is being used.`);\n      }\n      return true;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log(`The navigation route is not being used, since the URL ` +\n          `being navigated to doesn't match the whitelist.`);\n    }\n    return false;\n  }\n}\n\nexport {NavigationRoute};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {Route} from './Route.mjs';\nimport './_version.mjs';\n\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * [Route]{@link workbox.routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\n *\n * @memberof workbox.routing\n * @extends workbox.routing.Route\n */\nclass RegExpRoute extends Route {\n  /**\n   * If the regulard expression contains\n   * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n   * th ecaptured values will be passed to the\n   * [handler's]{@link workbox.routing.Route~handlerCallback} `params`\n   * argument.\n   *\n   * @param {RegExp} regExp The regular expression to match against URLs.\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   * @param {string} [method='GET'] The HTTP method to match the Route\n   * against.\n   */\n  constructor(regExp, handler, method) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(regExp, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'RegExpRoute',\n        funcName: 'constructor',\n        paramName: 'pattern',\n      });\n    }\n\n    const match = ({url}) => {\n      const result = regExp.exec(url.href);\n\n      // Return null immediately if there's no match.\n      if (!result) {\n        return null;\n      }\n\n      // Require that the match start at the first character in the URL string\n      // if it's a cross-origin request.\n      // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n      // behind this behavior.\n      if ((url.origin !== location.origin) && (result.index !== 0)) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.debug(\n              `The regular expression '${regExp}' only partially matched ` +\n            `against the cross-origin URL '${url}'. RegExpRoute's will only ` +\n            `handle cross-origin requests if they match the entire URL.`\n          );\n        }\n\n        return null;\n      }\n\n      // If the route matches, but there aren't any capture groups defined, then\n      // this will return [], which is truthy and therefore sufficient to\n      // indicate a match.\n      // If there are capture groups, then it will return their values.\n      return result.slice(1);\n    };\n\n    super(match, handler, method);\n  }\n}\n\nexport {RegExpRoute};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {getFriendlyURL} from 'workbox-core/_private/getFriendlyURL.mjs';\n\nimport {normalizeHandler} from './utils/normalizeHandler.mjs';\nimport './_version.mjs';\n\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link workbox.routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox.routing\n */\nclass Router {\n  /**\n   * Initializes a new Router.\n   */\n  constructor() {\n    this._routes = new Map();\n  }\n\n  /**\n   * @return {Map<string, Array<workbox.routing.Route>>} routes A `Map` of HTTP\n   * method name ('GET', etc.) to an array of all the corresponding `Route`\n   * instances that are registered.\n   */\n  get routes() {\n    return this._routes;\n  }\n\n  /**\n   * Adds a fetch event listener to respond to events when a route matches\n   * the event's request.\n   */\n  addFetchListener() {\n    self.addEventListener('fetch', (event) => {\n      const {request} = event;\n      const responsePromise = this.handleRequest({request, event});\n      if (responsePromise) {\n        event.respondWith(responsePromise);\n      }\n    });\n  }\n\n  /**\n   * Adds a message event listener for URLs to cache from the window.\n   * This is useful to cache resources loaded on the page prior to when the\n   * service worker started controlling it.\n   *\n   * The format of the message data sent from the window should be as follows.\n   * Where the `urlsToCache` array may consist of URL strings or an array of\n   * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n   *\n   * ```\n   * {\n   *   type: 'CACHE_URLS',\n   *   payload: {\n   *     urlsToCache: [\n   *       './script1.js',\n   *       './script2.js',\n   *       ['./script3.js', {mode: 'no-cors'}],\n   *     ],\n   *   },\n   * }\n   * ```\n   */\n  addCacheListener() {\n    self.addEventListener('message', async (event) => {\n      if (event.data && event.data.type === 'CACHE_URLS') {\n        const {payload} = event.data;\n\n        if (process.env.NODE_ENV !== 'production') {\n          logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n        }\n\n        const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n          if (typeof entry === 'string') {\n            entry = [entry];\n          }\n\n          const request = new Request(...entry);\n          return this.handleRequest({request});\n        }));\n\n        event.waitUntil(requestPromises);\n\n        // If a MessageChannel was used, reply to the message on success.\n        if (event.ports && event.ports[0]) {\n          await requestPromises;\n          event.ports[0].postMessage(true);\n        }\n      }\n    });\n  }\n\n  /**\n   * Apply the routing rules to a FetchEvent object to get a Response from an\n   * appropriate Route's handler.\n   *\n   * @param {Object} options\n   * @param {Request} options.request The request to handle (this is usually\n   *     from a fetch event, but it does not have to be).\n   * @param {FetchEvent} [options.event] The event that triggered the request,\n   *     if applicable.\n   * @return {Promise<Response>|undefined} A promise is returned if a\n   *     registered route can handle the request. If there is no matching\n   *     route and there's no `defaultHandler`, `undefined` is returned.\n   */\n  handleRequest({request, event}) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'handleRequest',\n        paramName: 'options.request',\n      });\n    }\n\n    const url = new URL(request.url, location);\n    if (!url.protocol.startsWith('http')) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(\n            `Workbox Router only supports URLs that start with 'http'.`);\n      }\n      return;\n    }\n\n    let {params, route} = this.findMatchingRoute({url, request, event});\n    let handler = route && route.handler;\n\n    let debugMessages = [];\n    if (process.env.NODE_ENV !== 'production') {\n      if (handler) {\n        debugMessages.push([\n          `Found a route to handle this request:`, route,\n        ]);\n\n        if (params) {\n          debugMessages.push([\n            `Passing the following params to the route's handler:`, params,\n          ]);\n        }\n      }\n    }\n\n    // If we don't have a handler because there was no matching route, then\n    // fall back to defaultHandler if that's defined.\n    if (!handler && this._defaultHandler) {\n      if (process.env.NODE_ENV !== 'production') {\n        debugMessages.push(`Failed to find a matching route. Falling ` +\n          `back to the default handler.`);\n\n        // This is used for debugging in logs in the case of an error.\n        route = '[Default Handler]';\n      }\n      handler = this._defaultHandler;\n    }\n\n    if (!handler) {\n      if (process.env.NODE_ENV !== 'production') {\n        // No handler so Workbox will do nothing. If logs is set of debug\n        // i.e. verbose, we should print out this information.\n        logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n      }\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // We have a handler, meaning Workbox is going to handle the route.\n      // print the routing details to the console.\n      logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n      debugMessages.forEach((msg) => {\n        if (Array.isArray(msg)) {\n          logger.log(...msg);\n        } else {\n          logger.log(msg);\n        }\n      });\n\n      // The Request and Response objects contains a great deal of information,\n      // hide it under a group in case developers want to see it.\n      logger.groupCollapsed(`View request details here.`);\n      logger.log(request);\n      logger.groupEnd();\n\n      logger.groupEnd();\n    }\n\n    // Wrap in try and catch in case the handle method throws a synchronous\n    // error. It should still callback to the catch handler.\n    let responsePromise;\n    try {\n      responsePromise = handler.handle({url, request, event, params});\n    } catch (err) {\n      responsePromise = Promise.reject(err);\n    }\n\n    if (responsePromise && this._catchHandler) {\n      responsePromise = responsePromise.catch((err) => {\n        if (process.env.NODE_ENV !== 'production') {\n          // Still include URL here as it will be async from the console group\n          // and may not make sense without the URL\n          logger.groupCollapsed(`Error thrown when responding to: ` +\n            ` ${getFriendlyURL(url)}. Falling back to Catch Handler.`);\n          logger.error(`Error thrown by:`, route);\n          logger.error(err);\n          logger.groupEnd();\n        }\n        return this._catchHandler.handle({url, event, err});\n      });\n    }\n\n    return responsePromise;\n  }\n\n  /**\n   * Checks a request and URL (and optionally an event) against the list of\n   * registered routes, and if there's a match, returns the corresponding\n   * route along with any params generated by the match.\n   *\n   * @param {Object} options\n   * @param {URL} options.url\n   * @param {Request} options.request The request to match.\n   * @param {FetchEvent} [options.event] The corresponding event (unless N/A).\n   * @return {Object} An object with `route` and `params` properties.\n   *     They are populated if a matching route was found or `undefined`\n   *     otherwise.\n   */\n  findMatchingRoute({url, request, event}) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(url, URL, {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'findMatchingRoute',\n        paramName: 'options.url',\n      });\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'findMatchingRoute',\n        paramName: 'options.request',\n      });\n    }\n\n    const routes = this._routes.get(request.method) || [];\n    for (const route of routes) {\n      let params;\n      let matchResult = route.match({url, request, event});\n      if (matchResult) {\n        if (Array.isArray(matchResult) && matchResult.length > 0) {\n          // Instead of passing an empty array in as params, use undefined.\n          params = matchResult;\n        } else if ((matchResult.constructor === Object &&\n            Object.keys(matchResult).length > 0)) {\n          // Instead of passing an empty object in as params, use undefined.\n          params = matchResult;\n        }\n\n        // Return early if have a match.\n        return {route, params};\n      }\n    }\n    // If no match was found above, return and empty object.\n    return {};\n  }\n\n  /**\n   * Define a default `handler` that's called when no routes explicitly\n   * match the incoming request.\n   *\n   * Without a default handler, unmatched requests will go against the\n   * network as if there were no service worker present.\n   *\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   */\n  setDefaultHandler(handler) {\n    this._defaultHandler = normalizeHandler(handler);\n  }\n\n  /**\n   * If a Route throws an error while handling a request, this `handler`\n   * will be called and given a chance to provide a response.\n   *\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   */\n  setCatchHandler(handler) {\n    this._catchHandler = normalizeHandler(handler);\n  }\n\n  /**\n   * Registers a route with the router.\n   *\n   * @param {workbox.routing.Route} route The route to register.\n   */\n  registerRoute(route) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(route, 'object', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route',\n      });\n\n      assert.hasMethod(route, 'match', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route',\n      });\n\n      assert.isType(route.handler, 'object', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route',\n      });\n\n      assert.hasMethod(route.handler, 'handle', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route.handler',\n      });\n\n      assert.isType(route.method, 'string', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route.method',\n      });\n    }\n\n    if (!this._routes.has(route.method)) {\n      this._routes.set(route.method, []);\n    }\n\n    // Give precedence to all of the earlier routes by adding this additional\n    // route to the end of the array.\n    this._routes.get(route.method).push(route);\n  }\n\n  /**\n   * Unregisters a route with the router.\n   *\n   * @param {workbox.routing.Route} route The route to unregister.\n   */\n  unregisterRoute(route) {\n    if (!this._routes.has(route.method)) {\n      throw new WorkboxError(\n          'unregister-route-but-not-found-with-method', {\n            method: route.method,\n          }\n      );\n    }\n\n    const routeIndex = this._routes.get(route.method).indexOf(route);\n    if (routeIndex > -1) {\n      this._routes.get(route.method).splice(routeIndex, 1);\n    } else {\n      throw new WorkboxError('unregister-route-route-not-registered');\n    }\n  }\n}\n\nexport {Router};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {Router} from '../Router.mjs';\nimport '../_version.mjs';\n\nlet defaultRouter;\n\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n  if (!defaultRouter) {\n    defaultRouter = new Router();\n\n    // The helpers that use the default Router assume these listeners exist.\n    defaultRouter.addFetchListener();\n    defaultRouter.addCacheListener();\n  }\n  return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {NavigationRoute} from './NavigationRoute.mjs';\nimport {getOrCreateDefaultRouter} from './utils/getOrCreateDefaultRouter.mjs';\nimport './_version.mjs';\n\n\n/**\n * Registers a route that will return a precached file for a navigation\n * request. This is useful for the\n * [application shell pattern]{@link https://developers.google.com/web/fundamentals/architecture/app-shell}.\n *\n * When determining the URL of the precached HTML document, you will likely need\n * to call `workbox.precaching.getCacheKeyForURL(originalUrl)`, to account for\n * the fact that Workbox's precaching naming conventions often results in URL\n * cache keys that contain extra revisioning info.\n *\n * This method will generate a\n * [NavigationRoute]{@link workbox.routing.NavigationRoute}\n * and call\n * [Router.registerRoute()]{@link workbox.routing.Router#registerRoute} on a\n * singleton Router instance.\n *\n * @param {string} cachedAssetUrl The cache key to use for the HTML file.\n * @param {Object} [options]\n * @param {string} [options.cacheName] Cache name to store and retrieve\n * requests. Defaults to precache cache name provided by\n * [workbox-core.cacheNames]{@link workbox.core.cacheNames}.\n * @param {Array<RegExp>} [options.blacklist=[]] If any of these patterns\n * match, the route will not handle the request (even if a whitelist entry\n * matches).\n * @param {Array<RegExp>} [options.whitelist=[/./]] If any of these patterns\n * match the URL's pathname and search parameter, the route will handle the\n * request (assuming the blacklist doesn't match).\n * @return {workbox.routing.NavigationRoute} Returns the generated\n * Route.\n *\n * @alias workbox.routing.registerNavigationRoute\n */\nexport const registerNavigationRoute = (cachedAssetUrl, options = {}) => {\n  if (process.env.NODE_ENV !== 'production') {\n    assert.isType(cachedAssetUrl, 'string', {\n      moduleName: 'workbox-routing',\n      funcName: 'registerNavigationRoute',\n      paramName: 'cachedAssetUrl',\n    });\n  }\n\n  const cacheName = cacheNames.getPrecacheName(options.cacheName);\n  const handler = async () => {\n    try {\n      const response = await caches.match(cachedAssetUrl, {cacheName});\n\n      if (response) {\n        return response;\n      }\n\n      // This shouldn't normally happen, but there are edge cases:\n      // https://github.com/GoogleChrome/workbox/issues/1441\n      throw new Error(`The cache ${cacheName} did not have an entry for ` +\n          `${cachedAssetUrl}.`);\n    } catch (error) {\n      // If there's either a cache miss, or the caches.match() call threw\n      // an exception, then attempt to fulfill the navigation request with\n      // a response from the network rather than leaving the user with a\n      // failed navigation.\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(`Unable to respond to navigation request with ` +\n            `cached response. Falling back to network.`, error);\n      }\n\n      // This might still fail if the browser is offline...\n      return fetch(cachedAssetUrl);\n    }\n  };\n\n  const route = new NavigationRoute(handler, {\n    whitelist: options.whitelist,\n    blacklist: options.blacklist,\n  });\n\n  const defaultRouter = getOrCreateDefaultRouter();\n  defaultRouter.registerRoute(route);\n\n  return route;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {Route} from './Route.mjs';\nimport {RegExpRoute} from './RegExpRoute.mjs';\nimport {getOrCreateDefaultRouter} from './utils/getOrCreateDefaultRouter.mjs';\nimport './_version.mjs';\n\n\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call [Router.registerRoute()]{@link\n * workbox.routing.Router#registerRoute}.\n *\n * @param {\n * RegExp|\n * string|\n * workbox.routing.Route~matchCallback|\n * workbox.routing.Route\n * } capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox.routing.Route~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox.routing.Route} The generated `Route`(Useful for\n * unregistering).\n *\n * @alias workbox.routing.registerRoute\n */\nexport const registerRoute = (capture, handler, method = 'GET') => {\n  let route;\n\n  if (typeof capture === 'string') {\n    const captureUrl = new URL(capture, location);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n        throw new WorkboxError('invalid-string', {\n          moduleName: 'workbox-routing',\n          funcName: 'registerRoute',\n          paramName: 'capture',\n        });\n      }\n\n      // We want to check if Express-style wildcards are in the pathname only.\n      // TODO: Remove this log message in v4.\n      const valueToCheck = capture.startsWith('http') ?\n          captureUrl.pathname : capture;\n\n      // See https://github.com/pillarjs/path-to-regexp#parameters\n      const wildcards = '[*:?+]';\n      if (valueToCheck.match(new RegExp(`${wildcards}`))) {\n        logger.debug(\n            `The '$capture' parameter contains an Express-style wildcard ` +\n          `character (${wildcards}). Strings are now always interpreted as ` +\n          `exact matches; use a RegExp for partial or wildcard matches.`\n        );\n      }\n    }\n\n    const matchCallback = ({url}) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if ((url.pathname === captureUrl.pathname) &&\n            (url.origin !== captureUrl.origin)) {\n          logger.debug(\n              `${capture} only partially matches the cross-origin URL ` +\n              `${url}. This route will only handle cross-origin requests ` +\n              `if they match the entire URL.`);\n        }\n      }\n\n      return url.href === captureUrl.href;\n    };\n\n    route = new Route(matchCallback, handler, method);\n  } else if (capture instanceof RegExp) {\n    route = new RegExpRoute(capture, handler, method);\n  } else if (typeof capture === 'function') {\n    route = new Route(capture, handler, method);\n  } else if (capture instanceof Route) {\n    route = capture;\n  } else {\n    throw new WorkboxError('unsupported-route-type', {\n      moduleName: 'workbox-routing',\n      funcName: 'registerRoute',\n      paramName: 'capture',\n    });\n  }\n\n  const defaultRouter = getOrCreateDefaultRouter();\n  defaultRouter.registerRoute(route);\n\n  return route;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {getOrCreateDefaultRouter} from './utils/getOrCreateDefaultRouter.mjs';\n\nimport './_version.mjs';\n\n/**\n * If a Route throws an error while handling a request, this `handler`\n * will be called and given a chance to provide a response.\n *\n * @param {workbox.routing.Route~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @alias workbox.routing.setCatchHandler\n */\nexport const setCatchHandler = (handler) => {\n  const defaultRouter = getOrCreateDefaultRouter();\n  defaultRouter.setCatchHandler(handler);\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {getOrCreateDefaultRouter} from './utils/getOrCreateDefaultRouter.mjs';\n\nimport './_version.mjs';\n\n/**\n * Define a default `handler` that's called when no routes explicitly\n * match the incoming request.\n *\n * Without a default handler, unmatched requests will go against the\n * network as if there were no service worker present.\n *\n * @param {workbox.routing.Route~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @alias workbox.routing.setDefaultHandler\n */\nexport const setDefaultHandler = (handler) => {\n  const defaultRouter = getOrCreateDefaultRouter();\n  defaultRouter.setDefaultHandler(handler);\n};\n"]},"metadata":{},"sourceType":"script"}