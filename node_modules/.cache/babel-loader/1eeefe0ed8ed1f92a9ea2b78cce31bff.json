{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"chai\").assert,\n    handleException = require(\"../../lib/resolve-exception\");\n\ndescribe(\"lib/handle-exception\", function () {\n  it(\"Should throw TypeError\", function () {\n    try {\n      handleException(12, \"Invalid value\");\n      throw new Error(\"Unexpected\");\n    } catch (error) {\n      assert.equal(error.name, \"TypeError\");\n      assert.equal(error.message, \"Invalid value\");\n    }\n  });\n  it(\"Should resolve value in default message\", function () {\n    try {\n      handleException(12, \"%v is invalid\", {});\n      throw new Error(\"Unexpected\");\n    } catch (error) {\n      assert.equal(error.message, \"12 is invalid\");\n    }\n  });\n  it(\"Should support optional values via inputOptions.isOptional\", function () {\n    assert.equal(handleException(null, \"%v is invalid\", {\n      isOptional: true\n    }, null));\n  });\n  it(\"Should support optional values via inputOptions.default\", function () {\n    // prettier-ignore\n    assert.equal(handleException(null, \"%v is invalid\", {\n      \"default\": \"bar\"\n    }), \"bar\");\n  });\n  it(\"Should support custome error message via inputOptions.errorMessage\", function () {\n    try {\n      handleException(null, \"%v is invalid\", {\n        errorMessage: \"%v is not supported age\"\n      });\n      throw new Error(\"Unexpected\");\n    } catch (error) {\n      assert.equal(error.message, \"null is not supported age\");\n    }\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type/test/lib/resolve-exception.js"],"names":["assert","require","handleException","describe","it","Error","error","equal","name","message","isOptional","errorMessage"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAYC,OAAO,CAAC,MAAD,CAAP,CAAgBD,MAAtC;AAAA,IACIE,eAAe,GAAGD,OAAO,CAAC,6BAAD,CAD7B;;AAGAE,QAAQ,CAAC,sBAAD,EAAyB,YAAY;AAC5CC,EAAAA,EAAE,CAAC,wBAAD,EAA2B,YAAY;AACxC,QAAI;AACHF,MAAAA,eAAe,CAAC,EAAD,EAAK,eAAL,CAAf;AACA,YAAM,IAAIG,KAAJ,CAAU,YAAV,CAAN;AACA,KAHD,CAGE,OAAOC,KAAP,EAAc;AACfN,MAAAA,MAAM,CAACO,KAAP,CAAaD,KAAK,CAACE,IAAnB,EAAyB,WAAzB;AACAR,MAAAA,MAAM,CAACO,KAAP,CAAaD,KAAK,CAACG,OAAnB,EAA4B,eAA5B;AACA;AACD,GARC,CAAF;AASAL,EAAAA,EAAE,CAAC,yCAAD,EAA4C,YAAY;AACzD,QAAI;AACHF,MAAAA,eAAe,CAAC,EAAD,EAAK,eAAL,EAAsB,EAAtB,CAAf;AACA,YAAM,IAAIG,KAAJ,CAAU,YAAV,CAAN;AACA,KAHD,CAGE,OAAOC,KAAP,EAAc;AACfN,MAAAA,MAAM,CAACO,KAAP,CAAaD,KAAK,CAACG,OAAnB,EAA4B,eAA5B;AACA;AACD,GAPC,CAAF;AAQAL,EAAAA,EAAE,CAAC,4DAAD,EAA+D,YAAY;AAC5EJ,IAAAA,MAAM,CAACO,KAAP,CAAaL,eAAe,CAAC,IAAD,EAAO,eAAP,EAAwB;AAAEQ,MAAAA,UAAU,EAAE;AAAd,KAAxB,EAA8C,IAA9C,CAA5B;AACA,GAFC,CAAF;AAGAN,EAAAA,EAAE,CAAC,yDAAD,EAA4D,YAAY;AACzE;AACAJ,IAAAA,MAAM,CAACO,KAAP,CAAaL,eAAe,CAAC,IAAD,EAAO,eAAP,EAAwB;AAAE,iBAAW;AAAb,KAAxB,CAA5B,EAA2E,KAA3E;AACA,GAHC,CAAF;AAIAE,EAAAA,EAAE,CAAC,oEAAD,EAAuE,YAAY;AACpF,QAAI;AACHF,MAAAA,eAAe,CAAC,IAAD,EAAO,eAAP,EAAwB;AAAES,QAAAA,YAAY,EAAE;AAAhB,OAAxB,CAAf;AACA,YAAM,IAAIN,KAAJ,CAAU,YAAV,CAAN;AACA,KAHD,CAGE,OAAOC,KAAP,EAAc;AACfN,MAAAA,MAAM,CAACO,KAAP,CAAaD,KAAK,CAACG,OAAnB,EAA4B,2BAA5B;AACA;AACD,GAPC,CAAF;AAQA,CAjCO,CAAR","sourcesContent":["\"use strict\";\n\nvar assert          = require(\"chai\").assert\n  , handleException = require(\"../../lib/resolve-exception\");\n\ndescribe(\"lib/handle-exception\", function () {\n\tit(\"Should throw TypeError\", function () {\n\t\ttry {\n\t\t\thandleException(12, \"Invalid value\");\n\t\t\tthrow new Error(\"Unexpected\");\n\t\t} catch (error) {\n\t\t\tassert.equal(error.name, \"TypeError\");\n\t\t\tassert.equal(error.message, \"Invalid value\");\n\t\t}\n\t});\n\tit(\"Should resolve value in default message\", function () {\n\t\ttry {\n\t\t\thandleException(12, \"%v is invalid\", {});\n\t\t\tthrow new Error(\"Unexpected\");\n\t\t} catch (error) {\n\t\t\tassert.equal(error.message, \"12 is invalid\");\n\t\t}\n\t});\n\tit(\"Should support optional values via inputOptions.isOptional\", function () {\n\t\tassert.equal(handleException(null, \"%v is invalid\", { isOptional: true }, null));\n\t});\n\tit(\"Should support optional values via inputOptions.default\", function () {\n\t\t// prettier-ignore\n\t\tassert.equal(handleException(null, \"%v is invalid\", { \"default\": \"bar\" }), \"bar\");\n\t});\n\tit(\"Should support custome error message via inputOptions.errorMessage\", function () {\n\t\ttry {\n\t\t\thandleException(null, \"%v is invalid\", { errorMessage: \"%v is not supported age\" });\n\t\t\tthrow new Error(\"Unexpected\");\n\t\t} catch (error) {\n\t\t\tassert.equal(error.message, \"null is not supported age\");\n\t\t}\n\t});\n});\n"]},"metadata":{},"sourceType":"script"}