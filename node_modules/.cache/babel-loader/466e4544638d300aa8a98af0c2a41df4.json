{"ast":null,"code":"// Generated by LiveScript 1.6.0\n(function () {\n  var prelude, map, sortBy, fl, closestString, nameToRaw, dasherize, naturalJoin;\n  prelude = require('prelude-ls'), map = prelude.map, sortBy = prelude.sortBy;\n  fl = require('fast-levenshtein');\n\n  closestString = function (possibilities, input) {\n    var distances, ref$, string, distance;\n\n    if (!possibilities.length) {\n      return;\n    }\n\n    distances = map(function (it) {\n      var ref$, longer, shorter;\n      ref$ = input.length > it.length ? [input, it] : [it, input], longer = ref$[0], shorter = ref$[1];\n      return {\n        string: it,\n        distance: fl.get(longer, shorter)\n      };\n    })(possibilities);\n    ref$ = sortBy(function (it) {\n      return it.distance;\n    }, distances)[0], string = ref$.string, distance = ref$.distance;\n    return string;\n  };\n\n  nameToRaw = function (name) {\n    if (name.length === 1 || name === 'NUM') {\n      return \"-\" + name;\n    } else {\n      return \"--\" + name;\n    }\n  };\n\n  dasherize = function (string) {\n    if (/^[A-Z]/.test(string)) {\n      return string;\n    } else {\n      return prelude.dasherize(string);\n    }\n  };\n\n  naturalJoin = function (array) {\n    if (array.length < 3) {\n      return array.join(' or ');\n    } else {\n      return array.slice(0, -1).join(', ') + \", or \" + array[array.length - 1];\n    }\n  };\n\n  module.exports = {\n    closestString: closestString,\n    nameToRaw: nameToRaw,\n    dasherize: dasherize,\n    naturalJoin: naturalJoin\n  };\n}).call(this);","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/optionator/lib/util.js"],"names":["prelude","map","sortBy","fl","closestString","nameToRaw","dasherize","naturalJoin","require","possibilities","input","distances","ref$","string","distance","length","it","longer","shorter","get","name","test","array","join","slice","module","exports","call"],"mappings":"AAAA;AACA,CAAC,YAAU;AACT,MAAIA,OAAJ,EAAaC,GAAb,EAAkBC,MAAlB,EAA0BC,EAA1B,EAA8BC,aAA9B,EAA6CC,SAA7C,EAAwDC,SAAxD,EAAmEC,WAAnE;AACAP,EAAAA,OAAO,GAAGQ,OAAO,CAAC,YAAD,CAAjB,EAAiCP,GAAG,GAAGD,OAAO,CAACC,GAA/C,EAAoDC,MAAM,GAAGF,OAAO,CAACE,MAArE;AACAC,EAAAA,EAAE,GAAGK,OAAO,CAAC,kBAAD,CAAZ;;AACAJ,EAAAA,aAAa,GAAG,UAASK,aAAT,EAAwBC,KAAxB,EAA8B;AAC5C,QAAIC,SAAJ,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,QAA7B;;AACA,QAAI,CAACL,aAAa,CAACM,MAAnB,EAA2B;AACzB;AACD;;AACDJ,IAAAA,SAAS,GAAGV,GAAG,CAAC,UAASe,EAAT,EAAY;AAC1B,UAAIJ,IAAJ,EAAUK,MAAV,EAAkBC,OAAlB;AACAN,MAAAA,IAAI,GAAGF,KAAK,CAACK,MAAN,GAAeC,EAAE,CAACD,MAAlB,GACH,CAACL,KAAD,EAAQM,EAAR,CADG,GAEH,CAACA,EAAD,EAAKN,KAAL,CAFJ,EAEiBO,MAAM,GAAGL,IAAI,CAAC,CAAD,CAF9B,EAEmCM,OAAO,GAAGN,IAAI,CAAC,CAAD,CAFjD;AAGA,aAAO;AACLC,QAAAA,MAAM,EAAEG,EADH;AAELF,QAAAA,QAAQ,EAAEX,EAAE,CAACgB,GAAH,CAAOF,MAAP,EAAeC,OAAf;AAFL,OAAP;AAID,KATc,CAAH,CAUZT,aAVY,CAAZ;AAWAG,IAAAA,IAAI,GAAGV,MAAM,CAAC,UAASc,EAAT,EAAY;AACxB,aAAOA,EAAE,CAACF,QAAV;AACD,KAFY,EAEVH,SAFU,CAAN,CAEO,CAFP,CAAP,EAEkBE,MAAM,GAAGD,IAAI,CAACC,MAFhC,EAEwCC,QAAQ,GAAGF,IAAI,CAACE,QAFxD;AAGA,WAAOD,MAAP;AACD,GApBD;;AAqBAR,EAAAA,SAAS,GAAG,UAASe,IAAT,EAAc;AACxB,QAAIA,IAAI,CAACL,MAAL,KAAgB,CAAhB,IAAqBK,IAAI,KAAK,KAAlC,EAAyC;AACvC,aAAO,MAAMA,IAAb;AACD,KAFD,MAEO;AACL,aAAO,OAAOA,IAAd;AACD;AACF,GAND;;AAOAd,EAAAA,SAAS,GAAG,UAASO,MAAT,EAAgB;AAC1B,QAAI,SAASQ,IAAT,CAAcR,MAAd,CAAJ,EAA2B;AACzB,aAAOA,MAAP;AACD,KAFD,MAEO;AACL,aAAOb,OAAO,CAACM,SAAR,CAAkBO,MAAlB,CAAP;AACD;AACF,GAND;;AAOAN,EAAAA,WAAW,GAAG,UAASe,KAAT,EAAe;AAC3B,QAAIA,KAAK,CAACP,MAAN,GAAe,CAAnB,EAAsB;AACpB,aAAOO,KAAK,CAACC,IAAN,CAAW,MAAX,CAAP;AACD,KAFD,MAEO;AACL,aAAOD,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,EAAmBD,IAAnB,CAAwB,IAAxB,IAAgC,OAAhC,GAA0CD,KAAK,CAACA,KAAK,CAACP,MAAN,GAAe,CAAhB,CAAtD;AACD;AACF,GAND;;AAOAU,EAAAA,MAAM,CAACC,OAAP,GAAiB;AACftB,IAAAA,aAAa,EAAEA,aADA;AAEfC,IAAAA,SAAS,EAAEA,SAFI;AAGfC,IAAAA,SAAS,EAAEA,SAHI;AAIfC,IAAAA,WAAW,EAAEA;AAJE,GAAjB;AAMD,CApDD,EAoDGoB,IApDH,CAoDQ,IApDR","sourcesContent":["// Generated by LiveScript 1.6.0\n(function(){\n  var prelude, map, sortBy, fl, closestString, nameToRaw, dasherize, naturalJoin;\n  prelude = require('prelude-ls'), map = prelude.map, sortBy = prelude.sortBy;\n  fl = require('fast-levenshtein');\n  closestString = function(possibilities, input){\n    var distances, ref$, string, distance;\n    if (!possibilities.length) {\n      return;\n    }\n    distances = map(function(it){\n      var ref$, longer, shorter;\n      ref$ = input.length > it.length\n        ? [input, it]\n        : [it, input], longer = ref$[0], shorter = ref$[1];\n      return {\n        string: it,\n        distance: fl.get(longer, shorter)\n      };\n    })(\n    possibilities);\n    ref$ = sortBy(function(it){\n      return it.distance;\n    }, distances)[0], string = ref$.string, distance = ref$.distance;\n    return string;\n  };\n  nameToRaw = function(name){\n    if (name.length === 1 || name === 'NUM') {\n      return \"-\" + name;\n    } else {\n      return \"--\" + name;\n    }\n  };\n  dasherize = function(string){\n    if (/^[A-Z]/.test(string)) {\n      return string;\n    } else {\n      return prelude.dasherize(string);\n    }\n  };\n  naturalJoin = function(array){\n    if (array.length < 3) {\n      return array.join(' or ');\n    } else {\n      return array.slice(0, -1).join(', ') + \", or \" + array[array.length - 1];\n    }\n  };\n  module.exports = {\n    closestString: closestString,\n    nameToRaw: nameToRaw,\n    dasherize: dasherize,\n    naturalJoin: naturalJoin\n  };\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}