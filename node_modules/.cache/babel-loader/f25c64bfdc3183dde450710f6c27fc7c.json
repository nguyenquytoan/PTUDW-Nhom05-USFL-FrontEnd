{"ast":null,"code":"/**\n * @fileoverview Rule to flag trailing underscores in variable declarations.\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow dangling underscores in identifiers\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-underscore-dangle\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allow: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          }\n        },\n        allowAfterThis: {\n          type: \"boolean\",\n          default: false\n        },\n        allowAfterSuper: {\n          type: \"boolean\",\n          default: false\n        },\n        allowAfterThisConstructor: {\n          type: \"boolean\",\n          default: false\n        },\n        enforceInMethodNames: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const options = context.options[0] || {};\n    const ALLOWED_VARIABLES = options.allow ? options.allow : [];\n    const allowAfterThis = typeof options.allowAfterThis !== \"undefined\" ? options.allowAfterThis : false;\n    const allowAfterSuper = typeof options.allowAfterSuper !== \"undefined\" ? options.allowAfterSuper : false;\n    const allowAfterThisConstructor = typeof options.allowAfterThisConstructor !== \"undefined\" ? options.allowAfterThisConstructor : false;\n    const enforceInMethodNames = typeof options.enforceInMethodNames !== \"undefined\" ? options.enforceInMethodNames : false; //-------------------------------------------------------------------------\n    // Helpers\n    //-------------------------------------------------------------------------\n\n    /**\n     * Check if identifier is present inside the allowed option\n     * @param {string} identifier name of the node\n     * @returns {boolean} true if its is present\n     * @private\n     */\n\n    function isAllowed(identifier) {\n      return ALLOWED_VARIABLES.some(ident => ident === identifier);\n    }\n    /**\n     * Check if identifier has a underscore at the end\n     * @param {string} identifier name of the node\n     * @returns {boolean} true if its is present\n     * @private\n     */\n\n\n    function hasTrailingUnderscore(identifier) {\n      const len = identifier.length;\n      return identifier !== \"_\" && (identifier[0] === \"_\" || identifier[len - 1] === \"_\");\n    }\n    /**\n     * Check if identifier is a special case member expression\n     * @param {string} identifier name of the node\n     * @returns {boolean} true if its is a special case\n     * @private\n     */\n\n\n    function isSpecialCaseIdentifierForMemberExpression(identifier) {\n      return identifier === \"__proto__\";\n    }\n    /**\n     * Check if identifier is a special case variable expression\n     * @param {string} identifier name of the node\n     * @returns {boolean} true if its is a special case\n     * @private\n     */\n\n\n    function isSpecialCaseIdentifierInVariableExpression(identifier) {\n      // Checks for the underscore library usage here\n      return identifier === \"_\";\n    }\n    /**\n     * Check if a node is a member reference of this.constructor\n     * @param {ASTNode} node node to evaluate\n     * @returns {boolean} true if it is a reference on this.constructor\n     * @private\n     */\n\n\n    function isThisConstructorReference(node) {\n      return node.object.type === \"MemberExpression\" && node.object.property.name === \"constructor\" && node.object.object.type === \"ThisExpression\";\n    }\n    /**\n     * Check if function has a underscore at the end\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkForTrailingUnderscoreInFunctionDeclaration(node) {\n      if (node.id) {\n        const identifier = node.id.name;\n\n        if (typeof identifier !== \"undefined\" && hasTrailingUnderscore(identifier) && !isAllowed(identifier)) {\n          context.report({\n            node,\n            message: \"Unexpected dangling '_' in '{{identifier}}'.\",\n            data: {\n              identifier\n            }\n          });\n        }\n      }\n    }\n    /**\n     * Check if variable expression has a underscore at the end\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkForTrailingUnderscoreInVariableExpression(node) {\n      const identifier = node.id.name;\n\n      if (typeof identifier !== \"undefined\" && hasTrailingUnderscore(identifier) && !isSpecialCaseIdentifierInVariableExpression(identifier) && !isAllowed(identifier)) {\n        context.report({\n          node,\n          message: \"Unexpected dangling '_' in '{{identifier}}'.\",\n          data: {\n            identifier\n          }\n        });\n      }\n    }\n    /**\n     * Check if member expression has a underscore at the end\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkForTrailingUnderscoreInMemberExpression(node) {\n      const identifier = node.property.name,\n            isMemberOfThis = node.object.type === \"ThisExpression\",\n            isMemberOfSuper = node.object.type === \"Super\",\n            isMemberOfThisConstructor = isThisConstructorReference(node);\n\n      if (typeof identifier !== \"undefined\" && hasTrailingUnderscore(identifier) && !(isMemberOfThis && allowAfterThis) && !(isMemberOfSuper && allowAfterSuper) && !(isMemberOfThisConstructor && allowAfterThisConstructor) && !isSpecialCaseIdentifierForMemberExpression(identifier) && !isAllowed(identifier)) {\n        context.report({\n          node,\n          message: \"Unexpected dangling '_' in '{{identifier}}'.\",\n          data: {\n            identifier\n          }\n        });\n      }\n    }\n    /**\n     * Check if method declaration or method property has a underscore at the end\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkForTrailingUnderscoreInMethod(node) {\n      const identifier = node.key.name;\n      const isMethod = node.type === \"MethodDefinition\" || node.type === \"Property\" && node.method;\n\n      if (typeof identifier !== \"undefined\" && enforceInMethodNames && isMethod && hasTrailingUnderscore(identifier)) {\n        context.report({\n          node,\n          message: \"Unexpected dangling '_' in '{{identifier}}'.\",\n          data: {\n            identifier\n          }\n        });\n      }\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      FunctionDeclaration: checkForTrailingUnderscoreInFunctionDeclaration,\n      VariableDeclarator: checkForTrailingUnderscoreInVariableExpression,\n      MemberExpression: checkForTrailingUnderscoreInMemberExpression,\n      MethodDefinition: checkForTrailingUnderscoreInMethod,\n      Property: checkForTrailingUnderscoreInMethod\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-underscore-dangle.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","properties","allow","items","allowAfterThis","default","allowAfterSuper","allowAfterThisConstructor","enforceInMethodNames","additionalProperties","create","context","options","ALLOWED_VARIABLES","isAllowed","identifier","some","ident","hasTrailingUnderscore","len","length","isSpecialCaseIdentifierForMemberExpression","isSpecialCaseIdentifierInVariableExpression","isThisConstructorReference","node","object","property","name","checkForTrailingUnderscoreInFunctionDeclaration","id","report","message","data","checkForTrailingUnderscoreInVariableExpression","checkForTrailingUnderscoreInMemberExpression","isMemberOfThis","isMemberOfSuper","isMemberOfThisConstructor","checkForTrailingUnderscoreInMethod","key","isMethod","method","FunctionDeclaration","VariableDeclarator","MemberExpression","MethodDefinition","Property"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to flag trailing underscores in variable declarations.\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow dangling underscores in identifiers\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-underscore-dangle\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allow: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        }\n                    },\n                    allowAfterThis: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowAfterSuper: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowAfterThisConstructor: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    enforceInMethodNames: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create(context) {\n\n        const options = context.options[0] || {};\n        const ALLOWED_VARIABLES = options.allow ? options.allow : [];\n        const allowAfterThis = typeof options.allowAfterThis !== \"undefined\" ? options.allowAfterThis : false;\n        const allowAfterSuper = typeof options.allowAfterSuper !== \"undefined\" ? options.allowAfterSuper : false;\n        const allowAfterThisConstructor = typeof options.allowAfterThisConstructor !== \"undefined\" ? options.allowAfterThisConstructor : false;\n        const enforceInMethodNames = typeof options.enforceInMethodNames !== \"undefined\" ? options.enforceInMethodNames : false;\n\n        //-------------------------------------------------------------------------\n        // Helpers\n        //-------------------------------------------------------------------------\n\n        /**\n         * Check if identifier is present inside the allowed option\n         * @param {string} identifier name of the node\n         * @returns {boolean} true if its is present\n         * @private\n         */\n        function isAllowed(identifier) {\n            return ALLOWED_VARIABLES.some(ident => ident === identifier);\n        }\n\n        /**\n         * Check if identifier has a underscore at the end\n         * @param {string} identifier name of the node\n         * @returns {boolean} true if its is present\n         * @private\n         */\n        function hasTrailingUnderscore(identifier) {\n            const len = identifier.length;\n\n            return identifier !== \"_\" && (identifier[0] === \"_\" || identifier[len - 1] === \"_\");\n        }\n\n        /**\n         * Check if identifier is a special case member expression\n         * @param {string} identifier name of the node\n         * @returns {boolean} true if its is a special case\n         * @private\n         */\n        function isSpecialCaseIdentifierForMemberExpression(identifier) {\n            return identifier === \"__proto__\";\n        }\n\n        /**\n         * Check if identifier is a special case variable expression\n         * @param {string} identifier name of the node\n         * @returns {boolean} true if its is a special case\n         * @private\n         */\n        function isSpecialCaseIdentifierInVariableExpression(identifier) {\n\n            // Checks for the underscore library usage here\n            return identifier === \"_\";\n        }\n\n        /**\n         * Check if a node is a member reference of this.constructor\n         * @param {ASTNode} node node to evaluate\n         * @returns {boolean} true if it is a reference on this.constructor\n         * @private\n         */\n        function isThisConstructorReference(node) {\n            return node.object.type === \"MemberExpression\" &&\n                node.object.property.name === \"constructor\" &&\n                node.object.object.type === \"ThisExpression\";\n        }\n\n        /**\n         * Check if function has a underscore at the end\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForTrailingUnderscoreInFunctionDeclaration(node) {\n            if (node.id) {\n                const identifier = node.id.name;\n\n                if (typeof identifier !== \"undefined\" && hasTrailingUnderscore(identifier) && !isAllowed(identifier)) {\n                    context.report({\n                        node,\n                        message: \"Unexpected dangling '_' in '{{identifier}}'.\",\n                        data: {\n                            identifier\n                        }\n                    });\n                }\n            }\n        }\n\n        /**\n         * Check if variable expression has a underscore at the end\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForTrailingUnderscoreInVariableExpression(node) {\n            const identifier = node.id.name;\n\n            if (typeof identifier !== \"undefined\" && hasTrailingUnderscore(identifier) &&\n                !isSpecialCaseIdentifierInVariableExpression(identifier) && !isAllowed(identifier)) {\n                context.report({\n                    node,\n                    message: \"Unexpected dangling '_' in '{{identifier}}'.\",\n                    data: {\n                        identifier\n                    }\n                });\n            }\n        }\n\n        /**\n         * Check if member expression has a underscore at the end\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForTrailingUnderscoreInMemberExpression(node) {\n            const identifier = node.property.name,\n                isMemberOfThis = node.object.type === \"ThisExpression\",\n                isMemberOfSuper = node.object.type === \"Super\",\n                isMemberOfThisConstructor = isThisConstructorReference(node);\n\n            if (typeof identifier !== \"undefined\" && hasTrailingUnderscore(identifier) &&\n                !(isMemberOfThis && allowAfterThis) &&\n                !(isMemberOfSuper && allowAfterSuper) &&\n                !(isMemberOfThisConstructor && allowAfterThisConstructor) &&\n                !isSpecialCaseIdentifierForMemberExpression(identifier) && !isAllowed(identifier)) {\n                context.report({\n                    node,\n                    message: \"Unexpected dangling '_' in '{{identifier}}'.\",\n                    data: {\n                        identifier\n                    }\n                });\n            }\n        }\n\n        /**\n         * Check if method declaration or method property has a underscore at the end\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForTrailingUnderscoreInMethod(node) {\n            const identifier = node.key.name;\n            const isMethod = node.type === \"MethodDefinition\" || node.type === \"Property\" && node.method;\n\n            if (typeof identifier !== \"undefined\" && enforceInMethodNames && isMethod && hasTrailingUnderscore(identifier)) {\n                context.report({\n                    node,\n                    message: \"Unexpected dangling '_' in '{{identifier}}'.\",\n                    data: {\n                        identifier\n                    }\n                });\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: checkForTrailingUnderscoreInFunctionDeclaration,\n            VariableDeclarator: checkForTrailingUnderscoreInVariableExpression,\n            MemberExpression: checkForTrailingUnderscoreInMemberExpression,\n            MethodDefinition: checkForTrailingUnderscoreInMethod,\n            Property: checkForTrailingUnderscoreInMethod\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}