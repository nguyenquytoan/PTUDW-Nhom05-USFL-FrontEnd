{"ast":null,"code":"/*\n * exit\n * https://github.com/cowboy/node-exit\n *\n * Copyright (c) 2013 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n */\n'use strict';\n\nmodule.exports = function exit(exitCode, streams) {\n  if (!streams) {\n    streams = [process.stdout, process.stderr];\n  }\n\n  var drainCount = 0; // Actually exit if all streams are drained.\n\n  function tryToExit() {\n    if (drainCount === streams.length) {\n      process.exit(exitCode);\n    }\n  }\n\n  streams.forEach(function (stream) {\n    // Count drained streams now, but monitor non-drained streams.\n    if (stream.bufferSize === 0) {\n      drainCount++;\n    } else {\n      stream.write('', 'utf-8', function () {\n        drainCount++;\n        tryToExit();\n      });\n    } // Prevent further writing.\n\n\n    stream.write = function () {};\n  }); // If all streams were already drained, exit now.\n\n  tryToExit(); // In Windows, when run as a Node.js child process, a script utilizing\n  // this library might just exit with a 0 exit code, regardless. This code,\n  // despite the fact that it looks a bit crazy, appears to fix that.\n\n  process.on('exit', function () {\n    process.exit(exitCode);\n  });\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/exit/lib/exit.js"],"names":["module","exports","exit","exitCode","streams","process","stdout","stderr","drainCount","tryToExit","length","forEach","stream","bufferSize","write","on"],"mappings":"AAAA;;;;;;;AAQA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,QAAd,EAAwBC,OAAxB,EAAiC;AAChD,MAAI,CAACA,OAAL,EAAc;AAAEA,IAAAA,OAAO,GAAG,CAACC,OAAO,CAACC,MAAT,EAAiBD,OAAO,CAACE,MAAzB,CAAV;AAA6C;;AAC7D,MAAIC,UAAU,GAAG,CAAjB,CAFgD,CAGhD;;AACA,WAASC,SAAT,GAAqB;AACnB,QAAID,UAAU,KAAKJ,OAAO,CAACM,MAA3B,EAAmC;AACjCL,MAAAA,OAAO,CAACH,IAAR,CAAaC,QAAb;AACD;AACF;;AACDC,EAAAA,OAAO,CAACO,OAAR,CAAgB,UAASC,MAAT,EAAiB;AAC/B;AACA,QAAIA,MAAM,CAACC,UAAP,KAAsB,CAA1B,EAA6B;AAC3BL,MAAAA,UAAU;AACX,KAFD,MAEO;AACLI,MAAAA,MAAM,CAACE,KAAP,CAAa,EAAb,EAAiB,OAAjB,EAA0B,YAAW;AACnCN,QAAAA,UAAU;AACVC,QAAAA,SAAS;AACV,OAHD;AAID,KAT8B,CAU/B;;;AACAG,IAAAA,MAAM,CAACE,KAAP,GAAe,YAAW,CAAE,CAA5B;AACD,GAZD,EATgD,CAsBhD;;AACAL,EAAAA,SAAS,GAvBuC,CAwBhD;AACA;AACA;;AACAJ,EAAAA,OAAO,CAACU,EAAR,CAAW,MAAX,EAAmB,YAAW;AAC5BV,IAAAA,OAAO,CAACH,IAAR,CAAaC,QAAb;AACD,GAFD;AAGD,CA9BD","sourcesContent":["/*\n * exit\n * https://github.com/cowboy/node-exit\n *\n * Copyright (c) 2013 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function exit(exitCode, streams) {\n  if (!streams) { streams = [process.stdout, process.stderr]; }\n  var drainCount = 0;\n  // Actually exit if all streams are drained.\n  function tryToExit() {\n    if (drainCount === streams.length) {\n      process.exit(exitCode);\n    }\n  }\n  streams.forEach(function(stream) {\n    // Count drained streams now, but monitor non-drained streams.\n    if (stream.bufferSize === 0) {\n      drainCount++;\n    } else {\n      stream.write('', 'utf-8', function() {\n        drainCount++;\n        tryToExit();\n      });\n    }\n    // Prevent further writing.\n    stream.write = function() {};\n  });\n  // If all streams were already drained, exit now.\n  tryToExit();\n  // In Windows, when run as a Node.js child process, a script utilizing\n  // this library might just exit with a 0 exit code, regardless. This code,\n  // despite the fact that it looks a bit crazy, appears to fix that.\n  process.on('exit', function() {\n    process.exit(exitCode);\n  });\n};\n"]},"metadata":{},"sourceType":"script"}