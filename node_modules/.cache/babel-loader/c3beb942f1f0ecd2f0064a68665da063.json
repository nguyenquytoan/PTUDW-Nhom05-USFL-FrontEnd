{"ast":null,"code":"/**\n * @fileoverview Rule to disallow assignments to native objects or read-only global variables\n * @author Ilya Volodin\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow assignments to native objects or read-only global variables\",\n      category: \"Best Practices\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-global-assign\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        exceptions: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          },\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const config = context.options[0];\n    const exceptions = config && config.exceptions || [];\n    /**\n     * Reports write references.\n     * @param {Reference} reference A reference to check.\n     * @param {int} index The index of the reference in the references.\n     * @param {Reference[]} references The array that the reference belongs to.\n     * @returns {void}\n     */\n\n    function checkReference(reference, index, references) {\n      const identifier = reference.identifier;\n\n      if (reference.init === false && reference.isWrite() && (\n      /*\n       * Destructuring assignments can have multiple default value,\n       * so possibly there are multiple writeable references for the same identifier.\n       */\n      index === 0 || references[index - 1].identifier !== identifier)) {\n        context.report({\n          node: identifier,\n          message: \"Read-only global '{{name}}' should not be modified.\",\n          data: identifier\n        });\n      }\n    }\n    /**\n     * Reports write references if a given variable is read-only builtin.\n     * @param {Variable} variable A variable to check.\n     * @returns {void}\n     */\n\n\n    function checkVariable(variable) {\n      if (variable.writeable === false && exceptions.indexOf(variable.name) === -1) {\n        variable.references.forEach(checkReference);\n      }\n    }\n\n    return {\n      Program() {\n        const globalScope = context.getScope();\n        globalScope.variables.forEach(checkVariable);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-global-assign.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","properties","exceptions","items","uniqueItems","additionalProperties","create","context","config","options","checkReference","reference","index","references","identifier","init","isWrite","report","node","message","data","checkVariable","variable","writeable","indexOf","name","forEach","Program","globalScope","getScope","variables"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,sEADX;AAEFC,MAAAA,QAAQ,EAAE,gBAFR;AAGFC,MAAAA,WAAW,EAAE,IAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,CACJ;AACIN,MAAAA,IAAI,EAAE,QADV;AAEIO,MAAAA,UAAU,EAAE;AACRC,QAAAA,UAAU,EAAE;AACRR,UAAAA,IAAI,EAAE,OADE;AAERS,UAAAA,KAAK,EAAE;AAAET,YAAAA,IAAI,EAAE;AAAR,WAFC;AAGRU,UAAAA,WAAW,EAAE;AAHL;AADJ,OAFhB;AASIC,MAAAA,oBAAoB,EAAE;AAT1B,KADI;AAVN,GADO;;AA0BbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,MAAM,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAAf;AACA,UAAMP,UAAU,GAAIM,MAAM,IAAIA,MAAM,CAACN,UAAlB,IAAiC,EAApD;AAEA;;;;;;;;AAOA,aAASQ,cAAT,CAAwBC,SAAxB,EAAmCC,KAAnC,EAA0CC,UAA1C,EAAsD;AAClD,YAAMC,UAAU,GAAGH,SAAS,CAACG,UAA7B;;AAEA,UAAIH,SAAS,CAACI,IAAV,KAAmB,KAAnB,IACAJ,SAAS,CAACK,OAAV,EADA;AAGA;;;;AAICJ,MAAAA,KAAK,KAAK,CAAV,IAAeC,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,CAAsBE,UAAtB,KAAqCA,UAPrD,CAAJ,EAQE;AACEP,QAAAA,OAAO,CAACU,MAAR,CAAe;AACXC,UAAAA,IAAI,EAAEJ,UADK;AAEXK,UAAAA,OAAO,EAAE,qDAFE;AAGXC,UAAAA,IAAI,EAAEN;AAHK,SAAf;AAKH;AACJ;AAED;;;;;;;AAKA,aAASO,aAAT,CAAuBC,QAAvB,EAAiC;AAC7B,UAAIA,QAAQ,CAACC,SAAT,KAAuB,KAAvB,IAAgCrB,UAAU,CAACsB,OAAX,CAAmBF,QAAQ,CAACG,IAA5B,MAAsC,CAAC,CAA3E,EAA8E;AAC1EH,QAAAA,QAAQ,CAACT,UAAT,CAAoBa,OAApB,CAA4BhB,cAA5B;AACH;AACJ;;AAED,WAAO;AACHiB,MAAAA,OAAO,GAAG;AACN,cAAMC,WAAW,GAAGrB,OAAO,CAACsB,QAAR,EAApB;AAEAD,QAAAA,WAAW,CAACE,SAAZ,CAAsBJ,OAAtB,CAA8BL,aAA9B;AACH;;AALE,KAAP;AAOH;;AA3EY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to disallow assignments to native objects or read-only global variables\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow assignments to native objects or read-only global variables\",\n            category: \"Best Practices\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-global-assign\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    exceptions: {\n                        type: \"array\",\n                        items: { type: \"string\" },\n                        uniqueItems: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create(context) {\n        const config = context.options[0];\n        const exceptions = (config && config.exceptions) || [];\n\n        /**\n         * Reports write references.\n         * @param {Reference} reference A reference to check.\n         * @param {int} index The index of the reference in the references.\n         * @param {Reference[]} references The array that the reference belongs to.\n         * @returns {void}\n         */\n        function checkReference(reference, index, references) {\n            const identifier = reference.identifier;\n\n            if (reference.init === false &&\n                reference.isWrite() &&\n\n                /*\n                 * Destructuring assignments can have multiple default value,\n                 * so possibly there are multiple writeable references for the same identifier.\n                 */\n                (index === 0 || references[index - 1].identifier !== identifier)\n            ) {\n                context.report({\n                    node: identifier,\n                    message: \"Read-only global '{{name}}' should not be modified.\",\n                    data: identifier\n                });\n            }\n        }\n\n        /**\n         * Reports write references if a given variable is read-only builtin.\n         * @param {Variable} variable A variable to check.\n         * @returns {void}\n         */\n        function checkVariable(variable) {\n            if (variable.writeable === false && exceptions.indexOf(variable.name) === -1) {\n                variable.references.forEach(checkReference);\n            }\n        }\n\n        return {\n            Program() {\n                const globalScope = context.getScope();\n\n                globalScope.variables.forEach(checkVariable);\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}