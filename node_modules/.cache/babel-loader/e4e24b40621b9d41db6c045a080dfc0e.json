{"ast":null,"code":"/**\n * @fileoverview Rule to enforce that all class methods use 'this'.\n * @author Patrick Williams\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce that class methods utilize `this`\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/class-methods-use-this\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        exceptMethods: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          }\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      missingThis: \"Expected 'this' to be used by class {{name}}.\"\n    }\n  },\n\n  create(context) {\n    const config = Object.assign({}, context.options[0]);\n    const exceptMethods = new Set(config.exceptMethods || []);\n    const stack = [];\n    /**\n     * Initializes the current context to false and pushes it onto the stack.\n     * These booleans represent whether 'this' has been used in the context.\n     * @returns {void}\n     * @private\n     */\n\n    function enterFunction() {\n      stack.push(false);\n    }\n    /**\n     * Check if the node is an instance method\n     * @param {ASTNode} node node to check\n     * @returns {boolean} True if its an instance method\n     * @private\n     */\n\n\n    function isInstanceMethod(node) {\n      return !node.static && node.kind !== \"constructor\" && node.type === \"MethodDefinition\";\n    }\n    /**\n     * Check if the node is an instance method not excluded by config\n     * @param {ASTNode} node node to check\n     * @returns {boolean} True if it is an instance method, and not excluded by config\n     * @private\n     */\n\n\n    function isIncludedInstanceMethod(node) {\n      return isInstanceMethod(node) && (node.computed || !exceptMethods.has(node.key.name));\n    }\n    /**\n     * Checks if we are leaving a function that is a method, and reports if 'this' has not been used.\n     * Static methods and the constructor are exempt.\n     * Then pops the context off the stack.\n     * @param {ASTNode} node A function node that was entered.\n     * @returns {void}\n     * @private\n     */\n\n\n    function exitFunction(node) {\n      const methodUsesThis = stack.pop();\n\n      if (isIncludedInstanceMethod(node.parent) && !methodUsesThis) {\n        context.report({\n          node,\n          messageId: \"missingThis\",\n          data: {\n            name: astUtils.getFunctionNameWithKind(node)\n          }\n        });\n      }\n    }\n    /**\n     * Mark the current context as having used 'this'.\n     * @returns {void}\n     * @private\n     */\n\n\n    function markThisUsed() {\n      if (stack.length) {\n        stack[stack.length - 1] = true;\n      }\n    }\n\n    return {\n      FunctionDeclaration: enterFunction,\n      \"FunctionDeclaration:exit\": exitFunction,\n      FunctionExpression: enterFunction,\n      \"FunctionExpression:exit\": exitFunction,\n      ThisExpression: markThisUsed,\n      Super: markThisUsed\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/class-methods-use-this.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","exceptMethods","items","additionalProperties","messages","missingThis","create","context","config","Object","assign","options","Set","stack","enterFunction","push","isInstanceMethod","node","static","kind","isIncludedInstanceMethod","computed","has","key","name","exitFunction","methodUsesThis","pop","parent","report","messageId","data","getFunctionNameWithKind","markThisUsed","length","FunctionDeclaration","FunctionExpression","ThisExpression","Super"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,2CADX;AAEFC,MAAAA,QAAQ,EAAE,gBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,CAAC;AACLN,MAAAA,IAAI,EAAE,QADD;AAELO,MAAAA,UAAU,EAAE;AACRC,QAAAA,aAAa,EAAE;AACXR,UAAAA,IAAI,EAAE,OADK;AAEXS,UAAAA,KAAK,EAAE;AACHT,YAAAA,IAAI,EAAE;AADH;AAFI;AADP,OAFP;AAULU,MAAAA,oBAAoB,EAAE;AAVjB,KAAD,CAVN;AAuBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,WAAW,EAAE;AADP;AAvBR,GADO;;AA4BbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAO,CAACI,OAAR,CAAgB,CAAhB,CAAlB,CAAf;AACA,UAAMV,aAAa,GAAG,IAAIW,GAAJ,CAAQJ,MAAM,CAACP,aAAP,IAAwB,EAAhC,CAAtB;AAEA,UAAMY,KAAK,GAAG,EAAd;AAEA;;;;;;;AAMA,aAASC,aAAT,GAAyB;AACrBD,MAAAA,KAAK,CAACE,IAAN,CAAW,KAAX;AACH;AAED;;;;;;;;AAMA,aAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC5B,aAAO,CAACA,IAAI,CAACC,MAAN,IAAgBD,IAAI,CAACE,IAAL,KAAc,aAA9B,IAA+CF,IAAI,CAACxB,IAAL,KAAc,kBAApE;AACH;AAED;;;;;;;;AAMA,aAAS2B,wBAAT,CAAkCH,IAAlC,EAAwC;AACpC,aAAOD,gBAAgB,CAACC,IAAD,CAAhB,KACFA,IAAI,CAACI,QAAL,IAAiB,CAACpB,aAAa,CAACqB,GAAd,CAAkBL,IAAI,CAACM,GAAL,CAASC,IAA3B,CADhB,CAAP;AAEH;AAED;;;;;;;;;;AAQA,aAASC,YAAT,CAAsBR,IAAtB,EAA4B;AACxB,YAAMS,cAAc,GAAGb,KAAK,CAACc,GAAN,EAAvB;;AAEA,UAAIP,wBAAwB,CAACH,IAAI,CAACW,MAAN,CAAxB,IAAyC,CAACF,cAA9C,EAA8D;AAC1DnB,QAAAA,OAAO,CAACsB,MAAR,CAAe;AACXZ,UAAAA,IADW;AAEXa,UAAAA,SAAS,EAAE,aAFA;AAGXC,UAAAA,IAAI,EAAE;AACFP,YAAAA,IAAI,EAAEpC,QAAQ,CAAC4C,uBAAT,CAAiCf,IAAjC;AADJ;AAHK,SAAf;AAOH;AACJ;AAED;;;;;;;AAKA,aAASgB,YAAT,GAAwB;AACpB,UAAIpB,KAAK,CAACqB,MAAV,EAAkB;AACdrB,QAAAA,KAAK,CAACA,KAAK,CAACqB,MAAN,GAAe,CAAhB,CAAL,GAA0B,IAA1B;AACH;AACJ;;AAED,WAAO;AACHC,MAAAA,mBAAmB,EAAErB,aADlB;AAEH,kCAA4BW,YAFzB;AAGHW,MAAAA,kBAAkB,EAAEtB,aAHjB;AAIH,iCAA2BW,YAJxB;AAKHY,MAAAA,cAAc,EAAEJ,YALb;AAMHK,MAAAA,KAAK,EAAEL;AANJ,KAAP;AAQH;;AA1GY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to enforce that all class methods use 'this'.\n * @author Patrick Williams\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce that class methods utilize `this`\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/class-methods-use-this\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                exceptMethods: {\n                    type: \"array\",\n                    items: {\n                        type: \"string\"\n                    }\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            missingThis: \"Expected 'this' to be used by class {{name}}.\"\n        }\n    },\n    create(context) {\n        const config = Object.assign({}, context.options[0]);\n        const exceptMethods = new Set(config.exceptMethods || []);\n\n        const stack = [];\n\n        /**\n         * Initializes the current context to false and pushes it onto the stack.\n         * These booleans represent whether 'this' has been used in the context.\n         * @returns {void}\n         * @private\n         */\n        function enterFunction() {\n            stack.push(false);\n        }\n\n        /**\n         * Check if the node is an instance method\n         * @param {ASTNode} node node to check\n         * @returns {boolean} True if its an instance method\n         * @private\n         */\n        function isInstanceMethod(node) {\n            return !node.static && node.kind !== \"constructor\" && node.type === \"MethodDefinition\";\n        }\n\n        /**\n         * Check if the node is an instance method not excluded by config\n         * @param {ASTNode} node node to check\n         * @returns {boolean} True if it is an instance method, and not excluded by config\n         * @private\n         */\n        function isIncludedInstanceMethod(node) {\n            return isInstanceMethod(node) &&\n                (node.computed || !exceptMethods.has(node.key.name));\n        }\n\n        /**\n         * Checks if we are leaving a function that is a method, and reports if 'this' has not been used.\n         * Static methods and the constructor are exempt.\n         * Then pops the context off the stack.\n         * @param {ASTNode} node A function node that was entered.\n         * @returns {void}\n         * @private\n         */\n        function exitFunction(node) {\n            const methodUsesThis = stack.pop();\n\n            if (isIncludedInstanceMethod(node.parent) && !methodUsesThis) {\n                context.report({\n                    node,\n                    messageId: \"missingThis\",\n                    data: {\n                        name: astUtils.getFunctionNameWithKind(node)\n                    }\n                });\n            }\n        }\n\n        /**\n         * Mark the current context as having used 'this'.\n         * @returns {void}\n         * @private\n         */\n        function markThisUsed() {\n            if (stack.length) {\n                stack[stack.length - 1] = true;\n            }\n        }\n\n        return {\n            FunctionDeclaration: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            FunctionExpression: enterFunction,\n            \"FunctionExpression:exit\": exitFunction,\n            ThisExpression: markThisUsed,\n            Super: markThisUsed\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}