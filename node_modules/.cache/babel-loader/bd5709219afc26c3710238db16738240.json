{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst arrify = require('arrify');\n\nconst pathType = require('path-type');\n\nconst getExtensions = extensions => extensions.length > 1 ? `{${extensions.join(',')}}` : extensions[0];\n\nconst getPath = filepath => filepath[0] === '!' ? filepath.slice(1) : filepath;\n\nconst addExtensions = (file, extensions) => {\n  if (path.extname(file)) {\n    return `**/${file}`;\n  }\n\n  return `**/${file}.${getExtensions(extensions)}`;\n};\n\nconst getGlob = (dir, opts) => {\n  opts = Object.assign({}, opts);\n\n  if (opts.files && !Array.isArray(opts.files)) {\n    throw new TypeError(`\\`options.files\\` must be an \\`Array\\`, not \\`${typeof opts.files}\\``);\n  }\n\n  if (opts.extensions && !Array.isArray(opts.extensions)) {\n    throw new TypeError(`\\`options.extensions\\` must be an \\`Array\\`, not \\`${typeof opts.extensions}\\``);\n  }\n\n  if (opts.files && opts.extensions) {\n    return opts.files.map(x => path.join(dir, addExtensions(x, opts.extensions)));\n  } else if (opts.files) {\n    return opts.files.map(x => path.join(dir, `**/${x}`));\n  } else if (opts.extensions) {\n    return [path.join(dir, `**/*.${getExtensions(opts.extensions)}`)];\n  }\n\n  return [path.join(dir, '**')];\n};\n\nmodule.exports = (input, opts) => {\n  return Promise.all(arrify(input).map(x => pathType.dir(getPath(x)).then(isDir => isDir ? getGlob(x, opts) : x))).then(globs => [].concat.apply([], globs));\n};\n\nmodule.exports.sync = (input, opts) => {\n  const globs = arrify(input).map(x => pathType.dirSync(getPath(x)) ? getGlob(x, opts) : x);\n  return [].concat.apply([], globs);\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/dir-glob/index.js"],"names":["path","require","arrify","pathType","getExtensions","extensions","length","join","getPath","filepath","slice","addExtensions","file","extname","getGlob","dir","opts","Object","assign","files","Array","isArray","TypeError","map","x","module","exports","input","Promise","all","then","isDir","globs","concat","apply","sync","dirSync"],"mappings":"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","sourcesContent":["'use strict';\nconst path = require('path');\nconst arrify = require('arrify');\nconst pathType = require('path-type');\n\nconst getExtensions = extensions => extensions.length > 1 ? `{${extensions.join(',')}}` : extensions[0];\nconst getPath = filepath => filepath[0] === '!' ? filepath.slice(1) : filepath;\n\nconst addExtensions = (file, extensions) => {\n\tif (path.extname(file)) {\n\t\treturn `**/${file}`;\n\t}\n\n\treturn `**/${file}.${getExtensions(extensions)}`;\n};\n\nconst getGlob = (dir, opts) => {\n\topts = Object.assign({}, opts);\n\n\tif (opts.files && !Array.isArray(opts.files)) {\n\t\tthrow new TypeError(`\\`options.files\\` must be an \\`Array\\`, not \\`${typeof opts.files}\\``);\n\t}\n\n\tif (opts.extensions && !Array.isArray(opts.extensions)) {\n\t\tthrow new TypeError(`\\`options.extensions\\` must be an \\`Array\\`, not \\`${typeof opts.extensions}\\``);\n\t}\n\n\tif (opts.files && opts.extensions) {\n\t\treturn opts.files.map(x => path.join(dir, addExtensions(x, opts.extensions)));\n\t} else if (opts.files) {\n\t\treturn opts.files.map(x => path.join(dir, `**/${x}`));\n\t} else if (opts.extensions) {\n\t\treturn [path.join(dir, `**/*.${getExtensions(opts.extensions)}`)];\n\t}\n\n\treturn [path.join(dir, '**')];\n};\n\nmodule.exports = (input, opts) => {\n\treturn Promise.all(arrify(input).map(x => pathType.dir(getPath(x))\n\t\t.then(isDir => isDir ? getGlob(x, opts) : x)))\n\t\t.then(globs => [].concat.apply([], globs));\n};\n\nmodule.exports.sync = (input, opts) => {\n\tconst globs = arrify(input).map(x => pathType.dirSync(getPath(x)) ? getGlob(x, opts) : x);\n\treturn [].concat.apply([], globs);\n};\n"]},"metadata":{},"sourceType":"script"}