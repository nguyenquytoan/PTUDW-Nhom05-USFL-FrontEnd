{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _postcss = require(\"postcss\");\n\nvar _alphanumSort = require(\"alphanum-sort\");\n\nvar _alphanumSort2 = _interopRequireDefault(_alphanumSort);\n\nvar _has = require(\"has\");\n\nvar _has2 = _interopRequireDefault(_has);\n\nvar _postcssSelectorParser = require(\"postcss-selector-parser\");\n\nvar _postcssSelectorParser2 = _interopRequireDefault(_postcssSelectorParser);\n\nvar _unquote = require(\"./lib/unquote\");\n\nvar _unquote2 = _interopRequireDefault(_unquote);\n\nvar _canUnquote = require(\"./lib/canUnquote\");\n\nvar _canUnquote2 = _interopRequireDefault(_canUnquote);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst pseudoElements = [\"::before\", \"::after\", \"::first-letter\", \"::first-line\"];\n\nfunction getParsed(selectors, callback) {\n  return (0, _postcssSelectorParser2.default)(callback).processSync(selectors);\n}\n\nfunction attribute(selector) {\n  if (selector.value) {\n    // Join selectors that are split over new lines\n    selector.value = selector.value.replace(/\\\\\\n/g, \"\").trim();\n\n    if ((0, _canUnquote2.default)(selector.value)) {\n      selector.value = (0, _unquote2.default)(selector.value);\n    }\n\n    selector.operator = selector.operator.trim();\n  }\n\n  if (!selector.raws) {\n    selector.raws = {};\n  }\n\n  if (!selector.raws.spaces) {\n    selector.raws.spaces = {};\n  }\n\n  selector.raws.spaces.attribute = {\n    before: \"\",\n    after: \"\"\n  };\n  selector.raws.spaces.operator = {\n    before: \"\",\n    after: \"\"\n  };\n  selector.raws.spaces.value = {\n    before: \"\",\n    after: selector.insensitive ? \" \" : \"\"\n  };\n\n  if (selector.insensitive) {\n    selector.raws.spaces.insensitive = {\n      before: \"\",\n      after: \"\"\n    };\n  }\n\n  selector.attribute = selector.attribute.trim();\n}\n\nfunction combinator(selector) {\n  const value = selector.value.trim();\n  selector.value = value.length ? value : \" \";\n}\n\nconst pseudoReplacements = {\n  \":nth-child\": \":first-child\",\n  \":nth-of-type\": \":first-of-type\",\n  \":nth-last-child\": \":last-child\",\n  \":nth-last-of-type\": \":last-of-type\"\n};\n\nfunction pseudo(selector) {\n  const value = selector.value.toLowerCase();\n\n  if (selector.nodes.length === 1 && pseudoReplacements[value]) {\n    const first = selector.at(0);\n    const one = first.at(0);\n\n    if (first.length === 1) {\n      if (one.value === \"1\") {\n        selector.replaceWith(_postcssSelectorParser2.default.pseudo({\n          value: pseudoReplacements[value]\n        }));\n      }\n\n      if (one.value.toLowerCase() === \"even\") {\n        one.value = \"2n\";\n      }\n    }\n\n    if (first.length === 3) {\n      const two = first.at(1);\n      const three = first.at(2);\n\n      if (one.value.toLowerCase() === \"2n\" && two.value === \"+\" && three.value === \"1\") {\n        one.value = \"odd\";\n        two.remove();\n        three.remove();\n      }\n    }\n\n    return;\n  }\n\n  const uniques = [];\n  selector.walk(child => {\n    if (child.type === \"selector\") {\n      const childStr = String(child);\n\n      if (!~uniques.indexOf(childStr)) {\n        uniques.push(childStr);\n      } else {\n        child.remove();\n      }\n    }\n  });\n\n  if (~pseudoElements.indexOf(value)) {\n    selector.value = selector.value.slice(1);\n  }\n}\n\nconst tagReplacements = {\n  from: \"0%\",\n  \"100%\": \"to\"\n};\n\nfunction tag(selector) {\n  const value = selector.value.toLowerCase();\n\n  if ((0, _has2.default)(tagReplacements, value)) {\n    selector.value = tagReplacements[value];\n  }\n}\n\nfunction universal(selector) {\n  const next = selector.next();\n\n  if (next && next.type !== \"combinator\") {\n    selector.remove();\n  }\n}\n\nconst reducers = {\n  attribute,\n  combinator,\n  pseudo,\n  tag,\n  universal\n};\nexports.default = (0, _postcss.plugin)(\"postcss-minify-selectors\", () => {\n  return css => {\n    const cache = {};\n    css.walkRules(rule => {\n      const selector = rule.raws.selector && rule.raws.selector.value === rule.selector ? rule.raws.selector.raw : rule.selector; // If the selector ends with a ':' it is likely a part of a custom mixin,\n      // so just pass through.\n\n      if (selector[selector.length - 1] === \":\") {\n        return;\n      }\n\n      if (cache[selector]) {\n        rule.selector = cache[selector];\n        return;\n      }\n\n      const optimizedSelector = getParsed(selector, selectors => {\n        selectors.nodes = (0, _alphanumSort2.default)(selectors.nodes, {\n          insensitive: true\n        });\n        const uniqueSelectors = [];\n        selectors.walk(sel => {\n          const {\n            type\n          } = sel; // Trim whitespace around the value\n\n          sel.spaces.before = sel.spaces.after = \"\";\n\n          if ((0, _has2.default)(reducers, type)) {\n            reducers[type](sel);\n            return;\n          }\n\n          const toString = String(sel);\n\n          if (type === \"selector\" && sel.parent.type !== \"pseudo\") {\n            if (!~uniqueSelectors.indexOf(toString)) {\n              uniqueSelectors.push(toString);\n            } else {\n              sel.remove();\n            }\n          }\n        });\n      });\n      rule.selector = optimizedSelector;\n      cache[selector] = optimizedSelector;\n    });\n  };\n});\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-minify-selectors/dist/index.js"],"names":["Object","defineProperty","exports","value","_postcss","require","_alphanumSort","_alphanumSort2","_interopRequireDefault","_has","_has2","_postcssSelectorParser","_postcssSelectorParser2","_unquote","_unquote2","_canUnquote","_canUnquote2","obj","__esModule","default","pseudoElements","getParsed","selectors","callback","processSync","attribute","selector","replace","trim","operator","raws","spaces","before","after","insensitive","combinator","length","pseudoReplacements","pseudo","toLowerCase","nodes","first","at","one","replaceWith","two","three","remove","uniques","walk","child","type","childStr","String","indexOf","push","slice","tagReplacements","from","tag","universal","next","reducers","plugin","css","cache","walkRules","rule","raw","optimizedSelector","uniqueSelectors","sel","toString","parent","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _postcss = require(\"postcss\");\n\nvar _alphanumSort = require(\"alphanum-sort\");\n\nvar _alphanumSort2 = _interopRequireDefault(_alphanumSort);\n\nvar _has = require(\"has\");\n\nvar _has2 = _interopRequireDefault(_has);\n\nvar _postcssSelectorParser = require(\"postcss-selector-parser\");\n\nvar _postcssSelectorParser2 = _interopRequireDefault(_postcssSelectorParser);\n\nvar _unquote = require(\"./lib/unquote\");\n\nvar _unquote2 = _interopRequireDefault(_unquote);\n\nvar _canUnquote = require(\"./lib/canUnquote\");\n\nvar _canUnquote2 = _interopRequireDefault(_canUnquote);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst pseudoElements = [\"::before\", \"::after\", \"::first-letter\", \"::first-line\"];\n\nfunction getParsed(selectors, callback) {\n    return (0, _postcssSelectorParser2.default)(callback).processSync(selectors);\n}\n\nfunction attribute(selector) {\n    if (selector.value) {\n        // Join selectors that are split over new lines\n        selector.value = selector.value.replace(/\\\\\\n/g, \"\").trim();\n\n        if ((0, _canUnquote2.default)(selector.value)) {\n            selector.value = (0, _unquote2.default)(selector.value);\n        }\n\n        selector.operator = selector.operator.trim();\n    }\n\n    if (!selector.raws) {\n        selector.raws = {};\n    }\n\n    if (!selector.raws.spaces) {\n        selector.raws.spaces = {};\n    }\n\n    selector.raws.spaces.attribute = {\n        before: \"\",\n        after: \"\"\n    };\n\n    selector.raws.spaces.operator = {\n        before: \"\",\n        after: \"\"\n    };\n\n    selector.raws.spaces.value = {\n        before: \"\",\n        after: selector.insensitive ? \" \" : \"\"\n    };\n\n    if (selector.insensitive) {\n        selector.raws.spaces.insensitive = {\n            before: \"\",\n            after: \"\"\n        };\n    }\n\n    selector.attribute = selector.attribute.trim();\n}\n\nfunction combinator(selector) {\n    const value = selector.value.trim();\n\n    selector.value = value.length ? value : \" \";\n}\n\nconst pseudoReplacements = {\n    \":nth-child\": \":first-child\",\n    \":nth-of-type\": \":first-of-type\",\n    \":nth-last-child\": \":last-child\",\n    \":nth-last-of-type\": \":last-of-type\"\n};\n\nfunction pseudo(selector) {\n    const value = selector.value.toLowerCase();\n\n    if (selector.nodes.length === 1 && pseudoReplacements[value]) {\n        const first = selector.at(0);\n        const one = first.at(0);\n\n        if (first.length === 1) {\n            if (one.value === \"1\") {\n                selector.replaceWith(_postcssSelectorParser2.default.pseudo({\n                    value: pseudoReplacements[value]\n                }));\n            }\n\n            if (one.value.toLowerCase() === \"even\") {\n                one.value = \"2n\";\n            }\n        }\n\n        if (first.length === 3) {\n            const two = first.at(1);\n            const three = first.at(2);\n\n            if (one.value.toLowerCase() === \"2n\" && two.value === \"+\" && three.value === \"1\") {\n                one.value = \"odd\";\n\n                two.remove();\n                three.remove();\n            }\n        }\n\n        return;\n    }\n\n    const uniques = [];\n\n    selector.walk(child => {\n        if (child.type === \"selector\") {\n            const childStr = String(child);\n\n            if (!~uniques.indexOf(childStr)) {\n                uniques.push(childStr);\n            } else {\n                child.remove();\n            }\n        }\n    });\n\n    if (~pseudoElements.indexOf(value)) {\n        selector.value = selector.value.slice(1);\n    }\n}\n\nconst tagReplacements = {\n    from: \"0%\",\n    \"100%\": \"to\"\n};\n\nfunction tag(selector) {\n    const value = selector.value.toLowerCase();\n\n    if ((0, _has2.default)(tagReplacements, value)) {\n        selector.value = tagReplacements[value];\n    }\n}\n\nfunction universal(selector) {\n    const next = selector.next();\n\n    if (next && next.type !== \"combinator\") {\n        selector.remove();\n    }\n}\n\nconst reducers = {\n    attribute,\n    combinator,\n    pseudo,\n    tag,\n    universal\n};\n\nexports.default = (0, _postcss.plugin)(\"postcss-minify-selectors\", () => {\n    return css => {\n        const cache = {};\n\n        css.walkRules(rule => {\n            const selector = rule.raws.selector && rule.raws.selector.value === rule.selector ? rule.raws.selector.raw : rule.selector;\n\n            // If the selector ends with a ':' it is likely a part of a custom mixin,\n            // so just pass through.\n            if (selector[selector.length - 1] === \":\") {\n                return;\n            }\n\n            if (cache[selector]) {\n                rule.selector = cache[selector];\n\n                return;\n            }\n\n            const optimizedSelector = getParsed(selector, selectors => {\n                selectors.nodes = (0, _alphanumSort2.default)(selectors.nodes, { insensitive: true });\n\n                const uniqueSelectors = [];\n\n                selectors.walk(sel => {\n                    const { type } = sel;\n\n                    // Trim whitespace around the value\n                    sel.spaces.before = sel.spaces.after = \"\";\n\n                    if ((0, _has2.default)(reducers, type)) {\n                        reducers[type](sel);\n\n                        return;\n                    }\n\n                    const toString = String(sel);\n\n                    if (type === \"selector\" && sel.parent.type !== \"pseudo\") {\n                        if (!~uniqueSelectors.indexOf(toString)) {\n                            uniqueSelectors.push(toString);\n                        } else {\n                            sel.remove();\n                        }\n                    }\n                });\n            });\n\n            rule.selector = optimizedSelector;\n            cache[selector] = optimizedSelector;\n        });\n    };\n});\nmodule.exports = exports[\"default\"];"]},"metadata":{},"sourceType":"script"}