{"ast":null,"code":"function _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar browserslist = _interopDefault(require('browserslist'));\n\nvar postcss = _interopDefault(require('postcss'));\n\nvar index = postcss.plugin('postcss-browser-comments', opts => root => {\n  // client browserslist\n  const clientBrowserList = browserslist(Object(opts).browsers || null, {\n    path: root.source && root.source.input && root.source.input.file\n  }); // root children references\n\n  const references = root.nodes.slice(0); // for each child node of the root children references\n\n  for (let node of references) {\n    // if the node is a comment browser comment node\n    if (isBrowserCommentNode(node)) {\n      // rule following the browser comment\n      const rule = node.next(); // browser data\n\n      const browserdata = getBrowserData(node.text);\n\n      if (browserdata.isNumbered) {\n        rule.nodes.filter(isBrowserReferenceCommentNode).map(comment => {\n          const browserdataIndex = parseFloat(comment.text) - 1;\n          const browserslistPart = browserdata.browserslist[browserdataIndex]; // whether to remove the rule if the comment browserslist does not match the client browserslist\n\n          const removeRule = !clientBrowserList.some(clientBrowser => browserslist(browserslistPart).some(commentBrowser => commentBrowser === clientBrowser)); // conditionally remove the declaration and reference comment\n\n          if (removeRule) {\n            comment.prev().remove();\n            comment.remove();\n          }\n        }); // conditionally remove the empty rule and comment\n\n        if (!rule.nodes.length) {\n          rule.remove();\n          node.remove();\n        }\n      } else {\n        // whether to remove the rule if the comment browserslist does not match the client browserslist\n        const removeRule = !clientBrowserList.some(clientBrowser => browserslist(browserdata.browserslist).some(commentBrowser => commentBrowser === clientBrowser)); // conditionally remove the rule and comment\n\n        if (removeRule) {\n          rule.remove();\n          node.remove();\n        }\n      }\n    }\n  }\n}); // returns whether a node is a browser comment\n\nconst isBrowserCommentNode = node => node.type === 'comment' && isBrowserCommentNodeRegExp.test(node.text) && node.next().type === 'rule';\n\nconst isBrowserCommentNodeRegExp = /^\\*\\n * /; // returns whether a node is a browser reference comment\n\nconst isBrowserReferenceCommentNode = node => node.type === 'comment' && isBrowserReferenceCommentNodeRegExp.test(node.text);\n\nconst isBrowserReferenceCommentNodeRegExp = /^\\d+$/; // returns browser data from comment text\n\nconst getBrowserData = text => {\n  const browserDataNumbered = text.match(browserDataMutliRegExp);\n  const isNumbered = Boolean(browserDataNumbered);\n  return {\n    browserslist: isNumbered ? browserDataNumbered.map(browserslistPart => getBrowsersList(browserslistPart.replace(browserDataNumberedNewlineRegExp, '$1'))) : getBrowsersList(text.replace(browserDataNewlineRegExp, '')),\n    isNumbered\n  };\n};\n\nconst browserDataMutliRegExp = /(\\n \\* \\d+\\. (?:[^\\n]+|\\n \\* {4,})+)/g;\nconst browserDataNewlineRegExp = /^\\*\\n \\* ?|\\n \\*/g;\nconst browserDataNumberedNewlineRegExp = /\\n \\* (?:( )\\s*)?/g; // returns a browserlist from comment text\n\nconst getBrowsersList = text => text.split(getBrowsersListInSplitRegExp).slice(1).map(part => part.split(getBrowsersListAndSplitRegExp).filter(part2 => part2)).reduce((acc, val) => acc.concat(val), []).map(part => part.replace(getBrowsersListQueryRegExp, ($0, browser, query) => browser === 'all' ? '> 0%' : `${browser}${query ? /^((?:\\d*\\.)?\\d+)-$/.test(query) ? ` <= ${query.slice(0, -1)}` : ` ${query}` : ' > 0'}`).toLowerCase());\n\nconst getBrowsersListInSplitRegExp = /\\s+in\\s+/;\nconst getBrowsersListAndSplitRegExp = /(?: and|, and|,)/;\nconst getBrowsersListQueryRegExp = /^\\s*(\\w+)(?: ((?:(?:\\d*\\.)?\\d+-)?(?:\\d*\\.)?\\d+[+-]?))?.*$/;\nmodule.exports = index;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-browser-comments/index.cjs.js"],"names":["_interopDefault","ex","browserslist","require","postcss","index","plugin","opts","root","clientBrowserList","Object","browsers","path","source","input","file","references","nodes","slice","node","isBrowserCommentNode","rule","next","browserdata","getBrowserData","text","isNumbered","filter","isBrowserReferenceCommentNode","map","comment","browserdataIndex","parseFloat","browserslistPart","removeRule","some","clientBrowser","commentBrowser","prev","remove","length","type","isBrowserCommentNodeRegExp","test","isBrowserReferenceCommentNodeRegExp","browserDataNumbered","match","browserDataMutliRegExp","Boolean","getBrowsersList","replace","browserDataNumberedNewlineRegExp","browserDataNewlineRegExp","split","getBrowsersListInSplitRegExp","part","getBrowsersListAndSplitRegExp","part2","reduce","acc","val","concat","getBrowsersListQueryRegExp","$0","browser","query","toLowerCase","module","exports"],"mappings":"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","sourcesContent":["function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar browserslist = _interopDefault(require('browserslist'));\nvar postcss = _interopDefault(require('postcss'));\n\nvar index = postcss.plugin('postcss-browser-comments', opts => root => {\n  // client browserslist\n  const clientBrowserList = browserslist(Object(opts).browsers || null, {\n    path: root.source && root.source.input && root.source.input.file\n  }); // root children references\n\n  const references = root.nodes.slice(0); // for each child node of the root children references\n\n  for (let node of references) {\n    // if the node is a comment browser comment node\n    if (isBrowserCommentNode(node)) {\n      // rule following the browser comment\n      const rule = node.next(); // browser data\n\n      const browserdata = getBrowserData(node.text);\n\n      if (browserdata.isNumbered) {\n        rule.nodes.filter(isBrowserReferenceCommentNode).map(comment => {\n          const browserdataIndex = parseFloat(comment.text) - 1;\n          const browserslistPart = browserdata.browserslist[browserdataIndex]; // whether to remove the rule if the comment browserslist does not match the client browserslist\n\n          const removeRule = !clientBrowserList.some(clientBrowser => browserslist(browserslistPart).some(commentBrowser => commentBrowser === clientBrowser)); // conditionally remove the declaration and reference comment\n\n          if (removeRule) {\n            comment.prev().remove();\n            comment.remove();\n          }\n        }); // conditionally remove the empty rule and comment\n\n        if (!rule.nodes.length) {\n          rule.remove();\n          node.remove();\n        }\n      } else {\n        // whether to remove the rule if the comment browserslist does not match the client browserslist\n        const removeRule = !clientBrowserList.some(clientBrowser => browserslist(browserdata.browserslist).some(commentBrowser => commentBrowser === clientBrowser)); // conditionally remove the rule and comment\n\n        if (removeRule) {\n          rule.remove();\n          node.remove();\n        }\n      }\n    }\n  }\n}); // returns whether a node is a browser comment\n\nconst isBrowserCommentNode = node => node.type === 'comment' && isBrowserCommentNodeRegExp.test(node.text) && node.next().type === 'rule';\n\nconst isBrowserCommentNodeRegExp = /^\\*\\n * /; // returns whether a node is a browser reference comment\n\nconst isBrowserReferenceCommentNode = node => node.type === 'comment' && isBrowserReferenceCommentNodeRegExp.test(node.text);\n\nconst isBrowserReferenceCommentNodeRegExp = /^\\d+$/; // returns browser data from comment text\n\nconst getBrowserData = text => {\n  const browserDataNumbered = text.match(browserDataMutliRegExp);\n  const isNumbered = Boolean(browserDataNumbered);\n  return {\n    browserslist: isNumbered ? browserDataNumbered.map(browserslistPart => getBrowsersList(browserslistPart.replace(browserDataNumberedNewlineRegExp, '$1'))) : getBrowsersList(text.replace(browserDataNewlineRegExp, '')),\n    isNumbered\n  };\n};\n\nconst browserDataMutliRegExp = /(\\n \\* \\d+\\. (?:[^\\n]+|\\n \\* {4,})+)/g;\nconst browserDataNewlineRegExp = /^\\*\\n \\* ?|\\n \\*/g;\nconst browserDataNumberedNewlineRegExp = /\\n \\* (?:( )\\s*)?/g; // returns a browserlist from comment text\n\nconst getBrowsersList = text => text.split(getBrowsersListInSplitRegExp).slice(1).map(part => part.split(getBrowsersListAndSplitRegExp).filter(part2 => part2)).reduce((acc, val) => acc.concat(val), []).map(part => part.replace(getBrowsersListQueryRegExp, ($0, browser, query) => browser === 'all' ? '> 0%' : `${browser}${query ? /^((?:\\d*\\.)?\\d+)-$/.test(query) ? ` <= ${query.slice(0, -1)}` : ` ${query}` : ' > 0'}`).toLowerCase());\n\nconst getBrowsersListInSplitRegExp = /\\s+in\\s+/;\nconst getBrowsersListAndSplitRegExp = /(?: and|, and|,)/;\nconst getBrowsersListQueryRegExp = /^\\s*(\\w+)(?: ((?:(?:\\d*\\.)?\\d+-)?(?:\\d*\\.)?\\d+[+-]?))?.*$/;\n\nmodule.exports = index;\n"]},"metadata":{},"sourceType":"script"}