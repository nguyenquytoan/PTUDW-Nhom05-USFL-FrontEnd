{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst LONG_TEST_COLOR = _chalk().default.reset.bold.bgRed; // Explicitly reset for these messages since they can get written out in the\n// middle of error logging\n\n\nconst FAIL_TEXT = 'FAIL';\nconst PASS_TEXT = 'PASS';\nconst FAIL = _chalk().default.supportsColor ? _chalk().default.reset.inverse.bold.red(` ${FAIL_TEXT} `) : FAIL_TEXT;\nconst PASS = _chalk().default.supportsColor ? _chalk().default.reset.inverse.bold.green(` ${PASS_TEXT} `) : PASS_TEXT;\n\nvar _default = (result, globalConfig, projectConfig) => {\n  const testPath = result.testFilePath;\n  const status = result.numFailingTests > 0 || result.testExecError ? FAIL : PASS;\n  const runTime = result.perfStats ? (result.perfStats.end - result.perfStats.start) / 1000 : null;\n  const testDetail = [];\n\n  if (runTime !== null && runTime > 5) {\n    testDetail.push(LONG_TEST_COLOR(runTime + 's'));\n  }\n\n  if (result.memoryUsage) {\n    const toMB = bytes => Math.floor(bytes / 1024 / 1024);\n\n    testDetail.push(`${toMB(result.memoryUsage)} MB heap size`);\n  }\n\n  const projectDisplayName = projectConfig && projectConfig.displayName ? (0, _utils.printDisplayName)(projectConfig) + ' ' : '';\n  return `${status} ${projectDisplayName}${(0, _utils.formatTestPath)(projectConfig ? projectConfig : globalConfig, testPath)}` + (testDetail.length ? ` (${testDetail.join(', ')})` : '');\n};\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/@jest/reporters/build/get_result_header.js"],"names":["Object","defineProperty","exports","value","default","_chalk","data","_interopRequireDefault","require","_utils","obj","__esModule","LONG_TEST_COLOR","reset","bold","bgRed","FAIL_TEXT","PASS_TEXT","FAIL","supportsColor","inverse","red","PASS","green","_default","result","globalConfig","projectConfig","testPath","testFilePath","status","numFailingTests","testExecError","runTime","perfStats","end","start","testDetail","push","memoryUsage","toMB","bytes","Math","floor","projectDisplayName","displayName","printDisplayName","formatTestPath","length","join"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst LONG_TEST_COLOR = _chalk().default.reset.bold.bgRed; // Explicitly reset for these messages since they can get written out in the\n// middle of error logging\n\nconst FAIL_TEXT = 'FAIL';\nconst PASS_TEXT = 'PASS';\nconst FAIL = _chalk().default.supportsColor\n  ? _chalk().default.reset.inverse.bold.red(` ${FAIL_TEXT} `)\n  : FAIL_TEXT;\nconst PASS = _chalk().default.supportsColor\n  ? _chalk().default.reset.inverse.bold.green(` ${PASS_TEXT} `)\n  : PASS_TEXT;\n\nvar _default = (result, globalConfig, projectConfig) => {\n  const testPath = result.testFilePath;\n  const status =\n    result.numFailingTests > 0 || result.testExecError ? FAIL : PASS;\n  const runTime = result.perfStats\n    ? (result.perfStats.end - result.perfStats.start) / 1000\n    : null;\n  const testDetail = [];\n\n  if (runTime !== null && runTime > 5) {\n    testDetail.push(LONG_TEST_COLOR(runTime + 's'));\n  }\n\n  if (result.memoryUsage) {\n    const toMB = bytes => Math.floor(bytes / 1024 / 1024);\n\n    testDetail.push(`${toMB(result.memoryUsage)} MB heap size`);\n  }\n\n  const projectDisplayName =\n    projectConfig && projectConfig.displayName\n      ? (0, _utils.printDisplayName)(projectConfig) + ' '\n      : '';\n  return (\n    `${status} ${projectDisplayName}${(0, _utils.formatTestPath)(\n      projectConfig ? projectConfig : globalConfig,\n      testPath\n    )}` + (testDetail.length ? ` (${testDetail.join(', ')})` : '')\n  );\n};\n\nexports.default = _default;\n"]},"metadata":{},"sourceType":"script"}