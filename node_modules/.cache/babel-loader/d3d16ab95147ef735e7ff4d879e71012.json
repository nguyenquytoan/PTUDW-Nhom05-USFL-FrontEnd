{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cosmiconfig = cosmiconfig;\nexports.cosmiconfigSync = cosmiconfigSync;\nexports.defaultLoaders = void 0;\n\nvar _os = _interopRequireDefault(require(\"os\"));\n\nvar _Explorer = require(\"./Explorer\");\n\nvar _ExplorerSync = require(\"./ExplorerSync\");\n\nvar _loaders = require(\"./loaders\");\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\n\nfunction cosmiconfig(moduleName, options = {}) {\n  const normalizedOptions = normalizeOptions(moduleName, options);\n  const explorer = new _Explorer.Explorer(normalizedOptions);\n  return {\n    search: explorer.search.bind(explorer),\n    load: explorer.load.bind(explorer),\n    clearLoadCache: explorer.clearLoadCache.bind(explorer),\n    clearSearchCache: explorer.clearSearchCache.bind(explorer),\n    clearCaches: explorer.clearCaches.bind(explorer)\n  };\n} // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\n\nfunction cosmiconfigSync(moduleName, options = {}) {\n  const normalizedOptions = normalizeOptions(moduleName, options);\n  const explorerSync = new _ExplorerSync.ExplorerSync(normalizedOptions);\n  return {\n    search: explorerSync.searchSync.bind(explorerSync),\n    load: explorerSync.loadSync.bind(explorerSync),\n    clearLoadCache: explorerSync.clearLoadCache.bind(explorerSync),\n    clearSearchCache: explorerSync.clearSearchCache.bind(explorerSync),\n    clearCaches: explorerSync.clearCaches.bind(explorerSync)\n  };\n} // do not allow mutation of default loaders. Make sure it is set inside options\n\n\nconst defaultLoaders = Object.freeze({\n  '.js': _loaders.loaders.loadJs,\n  '.json': _loaders.loaders.loadJson,\n  '.yaml': _loaders.loaders.loadYaml,\n  '.yml': _loaders.loaders.loadYaml,\n  noExt: _loaders.loaders.loadYaml\n});\nexports.defaultLoaders = defaultLoaders;\n\nfunction normalizeOptions(moduleName, options) {\n  const defaults = {\n    packageProp: moduleName,\n    searchPlaces: ['package.json', `.${moduleName}rc`, `.${moduleName}rc.json`, `.${moduleName}rc.yaml`, `.${moduleName}rc.yml`, `.${moduleName}rc.js`, `${moduleName}.config.js`],\n    ignoreEmptySearchPlaces: true,\n    stopDir: _os.default.homedir(),\n    cache: true,\n    transform: identity,\n    loaders: defaultLoaders\n  };\n  const normalizedOptions = { ...defaults,\n    ...options,\n    loaders: { ...defaults.loaders,\n      ...options.loaders\n    }\n  };\n  return normalizedOptions;\n}\n\nconst identity = function identity(x) {\n  return x;\n};","map":{"version":3,"sources":["../src/index.ts"],"names":["options","normalizedOptions","normalizeOptions","explorer","Explorer","search","load","clearLoadCache","clearSearchCache","clearCaches","explorerSync","ExplorerSync","defaultLoaders","loaders","noExt","loadYaml","defaults","packageProp","searchPlaces","moduleName","ignoreEmptySearchPlaces","stopDir","os","cache","transform","identity"],"mappings":";;;;;;;;;AAAA,IAAA,GAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;;;;;EAyCA;;;AACA,SAAA,WAAA,CAAA,UAAA,EAAyCA,OAAgB,GAAzD,EAAA,EAAgE;AAC9D,QAAMC,iBAAkC,GAAGC,gBAAgB,CAAA,UAAA,EAA3D,OAA2D,CAA3D;AAKA,QAAMC,QAAQ,GAAG,IAAIC,SAAAA,CAAJ,QAAA,CAAjB,iBAAiB,CAAjB;AAEA,SAAO;AACLC,IAAAA,MAAM,EAAEF,QAAQ,CAARA,MAAAA,CAAAA,IAAAA,CADH,QACGA,CADH;AAELG,IAAAA,IAAI,EAAEH,QAAQ,CAARA,IAAAA,CAAAA,IAAAA,CAFD,QAECA,CAFD;AAGLI,IAAAA,cAAc,EAAEJ,QAAQ,CAARA,cAAAA,CAAAA,IAAAA,CAHX,QAGWA,CAHX;AAILK,IAAAA,gBAAgB,EAAEL,QAAQ,CAARA,gBAAAA,CAAAA,IAAAA,CAJb,QAIaA,CAJb;AAKLM,IAAAA,WAAW,EAAEN,QAAQ,CAARA,WAAAA,CAAAA,IAAAA,CAAAA,QAAAA;AALR,GAAP;EASF;;;AACA,SAAA,eAAA,CAAA,UAAA,EAA6CH,OAAoB,GAAjE,EAAA,EAAwE;AACtE,QAAMC,iBAAsC,GAAGC,gBAAgB,CAAA,UAAA,EAA/D,OAA+D,CAA/D;AAKA,QAAMQ,YAAY,GAAG,IAAIC,aAAAA,CAAJ,YAAA,CAArB,iBAAqB,CAArB;AAEA,SAAO;AACLN,IAAAA,MAAM,EAAEK,YAAY,CAAZA,UAAAA,CAAAA,IAAAA,CADH,YACGA,CADH;AAELJ,IAAAA,IAAI,EAAEI,YAAY,CAAZA,QAAAA,CAAAA,IAAAA,CAFD,YAECA,CAFD;AAGLH,IAAAA,cAAc,EAAEG,YAAY,CAAZA,cAAAA,CAAAA,IAAAA,CAHX,YAGWA,CAHX;AAILF,IAAAA,gBAAgB,EAAEE,YAAY,CAAZA,gBAAAA,CAAAA,IAAAA,CAJb,YAIaA,CAJb;AAKLD,IAAAA,WAAW,EAAEC,YAAY,CAAZA,WAAAA,CAAAA,IAAAA,CAAAA,YAAAA;AALR,GAAP;EASF;;;AACA,MAAME,cAAc,GAAG,MAAM,CAAN,MAAA,CAAc;AACnC,SAAOC,QAAAA,CAAAA,OAAAA,CAD4B,MAAA;AAEnC,WAASA,QAAAA,CAAAA,OAAAA,CAF0B,QAAA;AAGnC,WAASA,QAAAA,CAAAA,OAAAA,CAH0B,QAAA;AAInC,UAAQA,QAAAA,CAAAA,OAAAA,CAJ2B,QAAA;AAKnCC,EAAAA,KAAK,EAAED,QAAAA,CAAAA,OAAAA,CAAQE;AALoB,CAAd,CAAvB;;;AAgBA,SAAA,gBAAA,CAAA,UAAA,EAAA,OAAA,EAGyC;AACvC,QAAMC,QAA+C,GAAG;AACtDC,IAAAA,WAAW,EAD2C,UAAA;AAEtDC,IAAAA,YAAY,EAAE,CAAA,cAAA,EAEX,IAAGC,UAFQ,IAAA,EAGX,IAAGA,UAHQ,SAAA,EAIX,IAAGA,UAJQ,SAAA,EAKX,IAAGA,UALQ,QAAA,EAMX,IAAGA,UANQ,OAAA,EAOX,GAAEA,UATiD,YAExC,CAFwC;AAWtDC,IAAAA,uBAAuB,EAX+B,IAAA;AAYtDC,IAAAA,OAAO,EAAEC,GAAAA,CAAAA,OAAAA,CAZ6C,OAY7CA,EAZ6C;AAatDC,IAAAA,KAAK,EAbiD,IAAA;AActDC,IAAAA,SAAS,EAd6C,QAAA;AAetDX,IAAAA,OAAO,EAAED;AAf6C,GAAxD;AAkBA,QAAMX,iBAAwD,GAAG,EAC/D,GAD+D,QAAA;AAE/D,OAF+D,OAAA;AAG/DY,IAAAA,OAAO,EAAE,EACP,GAAGG,QAAQ,CADJ,OAAA;AAEP,SAAGhB,OAAO,CAACa;AAFJ;AAHsD,GAAjE;AASA,SAAA,iBAAA;AACD;;AAED,MAAMY,QAAuB,GAAG,SAAA,QAAA,CAAA,CAAA,EAAqB;AACnD,SAAA,CAAA;AADF,CAAA","sourcesContent":["import os from 'os';\nimport { Explorer } from './Explorer';\nimport { ExplorerSync } from './ExplorerSync';\nimport { loaders } from './loaders';\nimport {\n  Config,\n  CosmiconfigResult,\n  ExplorerOptions,\n  ExplorerOptionsSync,\n  Loaders,\n  LoadersSync,\n} from './types';\n\ntype LoaderResult = Config | null;\nexport type Loader =\n  | ((filepath: string, content: string) => Promise<LoaderResult>)\n  | LoaderSync;\nexport type LoaderSync = (filepath: string, content: string) => LoaderResult;\n\nexport type Transform =\n  | ((CosmiconfigResult: CosmiconfigResult) => Promise<CosmiconfigResult>)\n  | TransformSync;\n\nexport type TransformSync = (\n  CosmiconfigResult: CosmiconfigResult,\n) => CosmiconfigResult;\n\ninterface OptionsBase {\n  packageProp?: string;\n  searchPlaces?: Array<string>;\n  ignoreEmptySearchPlaces?: boolean;\n  stopDir?: string;\n  cache?: boolean;\n}\n\nexport interface Options extends OptionsBase {\n  loaders?: Loaders;\n  transform?: Transform;\n}\n\nexport interface OptionsSync extends OptionsBase {\n  loaders?: LoadersSync;\n  transform?: TransformSync;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction cosmiconfig(moduleName: string, options: Options = {}) {\n  const normalizedOptions: ExplorerOptions = normalizeOptions(\n    moduleName,\n    options,\n  );\n\n  const explorer = new Explorer(normalizedOptions);\n\n  return {\n    search: explorer.search.bind(explorer),\n    load: explorer.load.bind(explorer),\n    clearLoadCache: explorer.clearLoadCache.bind(explorer),\n    clearSearchCache: explorer.clearSearchCache.bind(explorer),\n    clearCaches: explorer.clearCaches.bind(explorer),\n  } as const;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction cosmiconfigSync(moduleName: string, options: OptionsSync = {}) {\n  const normalizedOptions: ExplorerOptionsSync = normalizeOptions(\n    moduleName,\n    options,\n  );\n\n  const explorerSync = new ExplorerSync(normalizedOptions);\n\n  return {\n    search: explorerSync.searchSync.bind(explorerSync),\n    load: explorerSync.loadSync.bind(explorerSync),\n    clearLoadCache: explorerSync.clearLoadCache.bind(explorerSync),\n    clearSearchCache: explorerSync.clearSearchCache.bind(explorerSync),\n    clearCaches: explorerSync.clearCaches.bind(explorerSync),\n  } as const;\n}\n\n// do not allow mutation of default loaders. Make sure it is set inside options\nconst defaultLoaders = Object.freeze({\n  '.js': loaders.loadJs,\n  '.json': loaders.loadJson,\n  '.yaml': loaders.loadYaml,\n  '.yml': loaders.loadYaml,\n  noExt: loaders.loadYaml,\n} as const);\n\nfunction normalizeOptions(\n  moduleName: string,\n  options: OptionsSync,\n): ExplorerOptionsSync;\nfunction normalizeOptions(\n  moduleName: string,\n  options: Options,\n): ExplorerOptions;\nfunction normalizeOptions(\n  moduleName: string,\n  options: Options | OptionsSync,\n): ExplorerOptions | ExplorerOptionsSync {\n  const defaults: ExplorerOptions | ExplorerOptionsSync = {\n    packageProp: moduleName,\n    searchPlaces: [\n      'package.json',\n      `.${moduleName}rc`,\n      `.${moduleName}rc.json`,\n      `.${moduleName}rc.yaml`,\n      `.${moduleName}rc.yml`,\n      `.${moduleName}rc.js`,\n      `${moduleName}.config.js`,\n    ],\n    ignoreEmptySearchPlaces: true,\n    stopDir: os.homedir(),\n    cache: true,\n    transform: identity,\n    loaders: defaultLoaders,\n  };\n\n  const normalizedOptions: ExplorerOptions | ExplorerOptionsSync = {\n    ...defaults,\n    ...options,\n    loaders: {\n      ...defaults.loaders,\n      ...options.loaders,\n    },\n  };\n\n  return normalizedOptions;\n}\n\nconst identity: TransformSync = function identity(x) {\n  return x;\n};\n\nexport { cosmiconfig, cosmiconfigSync, defaultLoaders };\n"]},"metadata":{},"sourceType":"script"}