{"ast":null,"code":"import postcss from 'postcss';\nimport parser from 'postcss-selector-parser';\n\nfunction nodeIsInsensitiveAttribute(node) {\n  return node.type === 'attribute' && node.insensitive;\n}\n\nfunction selectorHasInsensitiveAttribute(selector) {\n  return selector.some(nodeIsInsensitiveAttribute);\n}\n\nfunction transformString(strings, charPos, string) {\n  const char = string.charAt(charPos);\n\n  if (char === '') {\n    return strings;\n  }\n\n  let newStrings = strings.map(x => x + char);\n  const upperChar = char.toLocaleUpperCase();\n\n  if (upperChar !== char) {\n    newStrings = newStrings.concat(strings.map(x => x + upperChar));\n  }\n\n  return transformString(newStrings, charPos + 1, string);\n}\n\nfunction createSensitiveAtributes(attribute) {\n  const attributes = transformString([''], 0, attribute.value);\n  return attributes.map(x => {\n    const newAttribute = attribute.clone({\n      spaces: {\n        after: attribute.spaces.after,\n        before: attribute.spaces.before\n      },\n      insensitive: false\n    });\n    newAttribute.setValue(x);\n    return newAttribute;\n  });\n}\n\nfunction createNewSelectors(selector) {\n  let newSelectors = [parser.selector()];\n  selector.walk(node => {\n    if (!nodeIsInsensitiveAttribute(node)) {\n      newSelectors.forEach(newSelector => {\n        newSelector.append(node.clone());\n      });\n      return;\n    }\n\n    const sensitiveAttributes = createSensitiveAtributes(node);\n    const newSelectorsWithSensitiveAttributes = [];\n    sensitiveAttributes.forEach(newNode => {\n      newSelectors.forEach(newSelector => {\n        const newSelectorWithNewNode = newSelector.clone();\n        newSelectorWithNewNode.append(newNode);\n        newSelectorsWithSensitiveAttributes.push(newSelectorWithNewNode);\n      });\n    });\n    newSelectors = newSelectorsWithSensitiveAttributes;\n  });\n  return newSelectors;\n}\n\nfunction transform(selectors) {\n  let newSelectors = [];\n  selectors.each(selector => {\n    if (selectorHasInsensitiveAttribute(selector)) {\n      newSelectors = newSelectors.concat(createNewSelectors(selector));\n      selector.remove();\n    }\n  });\n\n  if (newSelectors.length) {\n    newSelectors.forEach(newSelector => selectors.append(newSelector));\n  }\n}\n\nconst caseInsensitiveRegExp = /i(\\s*\\/\\*[\\W\\w]*?\\*\\/)*\\s*\\]/;\nexport default postcss.plugin('postcss-attribute-case-insensitive', () => css => {\n  css.walkRules(caseInsensitiveRegExp, rule => {\n    rule.selector = parser(transform).processSync(rule.selector);\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-attribute-case-insensitive/src/index.js"],"names":["postcss","parser","nodeIsInsensitiveAttribute","node","type","insensitive","selectorHasInsensitiveAttribute","selector","some","transformString","strings","charPos","string","char","charAt","newStrings","map","x","upperChar","toLocaleUpperCase","concat","createSensitiveAtributes","attribute","attributes","value","newAttribute","clone","spaces","after","before","setValue","createNewSelectors","newSelectors","walk","forEach","newSelector","append","sensitiveAttributes","newSelectorsWithSensitiveAttributes","newNode","newSelectorWithNewNode","push","transform","selectors","each","remove","length","caseInsensitiveRegExp","plugin","css","walkRules","rule","processSync"],"mappings":"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","sourcesContent":["import postcss from 'postcss';\nimport parser from 'postcss-selector-parser';\n\nfunction nodeIsInsensitiveAttribute(node) {\n\treturn node.type === 'attribute' && node.insensitive;\n}\n\nfunction selectorHasInsensitiveAttribute(selector) {\n\treturn selector.some(nodeIsInsensitiveAttribute);\n}\n\nfunction transformString(strings, charPos, string) {\n\tconst char = string.charAt(charPos);\n\tif (char === '') {\n\t\treturn strings;\n\t}\n\n\tlet newStrings = strings.map(x => x + char);\n\tconst upperChar = char.toLocaleUpperCase();\n\n\tif (upperChar !== char) {\n\t\tnewStrings = newStrings.concat(strings.map(x => x + upperChar));\n\t}\n\n\treturn transformString(newStrings, charPos + 1, string);\n}\n\nfunction createSensitiveAtributes(attribute) {\n\tconst attributes = transformString([''], 0, attribute.value);\n\treturn attributes.map(x => {\n\t\tconst newAttribute = attribute.clone({\n\t\t\tspaces: {\n\t\t\t\tafter: attribute.spaces.after,\n\t\t\t\tbefore: attribute.spaces.before\n\t\t\t},\n\t\t\tinsensitive: false\n\t\t});\n\n\t\tnewAttribute.setValue(x);\n\n\t\treturn newAttribute;\n\t});\n}\n\nfunction createNewSelectors(selector) {\n\tlet newSelectors = [parser.selector()];\n\n\tselector.walk(node => {\n\t\tif (!nodeIsInsensitiveAttribute(node)) {\n\t\t\tnewSelectors.forEach(newSelector => {\n\t\t\t\tnewSelector.append(node.clone());\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst sensitiveAttributes = createSensitiveAtributes(node);\n\t\tconst newSelectorsWithSensitiveAttributes = [];\n\n\t\tsensitiveAttributes.forEach(newNode => {\n\t\t\tnewSelectors.forEach(newSelector => {\n\t\t\t\tconst newSelectorWithNewNode = newSelector.clone();\n\t\t\t\tnewSelectorWithNewNode.append(newNode);\n\t\t\t\tnewSelectorsWithSensitiveAttributes.push(newSelectorWithNewNode);\n\t\t\t});\n\t\t});\n\n\t\tnewSelectors = newSelectorsWithSensitiveAttributes;\n\t});\n\n\treturn newSelectors;\n}\n\nfunction transform(selectors) {\n\tlet newSelectors = [];\n\n\tselectors.each(selector => {\n\t\tif (selectorHasInsensitiveAttribute(selector)) {\n\t\t\tnewSelectors = newSelectors.concat(createNewSelectors(selector));\n\t\t\tselector.remove();\n\t\t}\n\t});\n\n\tif (newSelectors.length) {\n\t\tnewSelectors.forEach(newSelector => selectors.append(newSelector));\n\t}\n}\n\nconst caseInsensitiveRegExp = /i(\\s*\\/\\*[\\W\\w]*?\\*\\/)*\\s*\\]/;\n\nexport default postcss.plugin('postcss-attribute-case-insensitive', () => css => {\n\tcss.walkRules(caseInsensitiveRegExp, rule => {\n\t\trule.selector = parser(transform).processSync(rule.selector);\n\t});\n});\n"]},"metadata":{},"sourceType":"module"}