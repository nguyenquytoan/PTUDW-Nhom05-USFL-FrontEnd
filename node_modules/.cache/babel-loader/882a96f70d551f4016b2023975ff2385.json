{"ast":null,"code":"/**\n * @fileoverview A rule to set the maximum number of line of code in a function.\n * @author Pete Ward <peteward44@gmail.com>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\nconst lodash = require(\"lodash\"); //------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\n\nconst OPTIONS_SCHEMA = {\n  type: \"object\",\n  properties: {\n    max: {\n      type: \"integer\",\n      minimum: 0\n    },\n    skipComments: {\n      type: \"boolean\"\n    },\n    skipBlankLines: {\n      type: \"boolean\"\n    },\n    IIFEs: {\n      type: \"boolean\"\n    }\n  },\n  additionalProperties: false\n};\nconst OPTIONS_OR_INTEGER_SCHEMA = {\n  oneOf: [OPTIONS_SCHEMA, {\n    type: \"integer\",\n    minimum: 1\n  }]\n};\n/**\n * Given a list of comment nodes, return a map with numeric keys (source code line numbers) and comment token values.\n * @param {Array} comments An array of comment nodes.\n * @returns {Map.<string,Node>} A map with numeric keys (source code line numbers) and comment token values.\n */\n\nfunction getCommentLineNumbers(comments) {\n  const map = new Map();\n\n  if (!comments) {\n    return map;\n  }\n\n  comments.forEach(comment => {\n    for (let i = comment.loc.start.line; i <= comment.loc.end.line; i++) {\n      map.set(i, comment);\n    }\n  });\n  return map;\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce a maximum number of line of code in a function\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-lines-per-function\"\n    },\n    schema: [OPTIONS_OR_INTEGER_SCHEMA],\n    messages: {\n      exceed: \"{{name}} has too many lines ({{lineCount}}). Maximum allowed is {{maxLines}}.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const lines = sourceCode.lines;\n    const option = context.options[0];\n    let maxLines = 50;\n    let skipComments = false;\n    let skipBlankLines = false;\n    let IIFEs = false;\n\n    if (typeof option === \"object\") {\n      maxLines = typeof option.max === \"number\" ? option.max : 50;\n      skipComments = !!option.skipComments;\n      skipBlankLines = !!option.skipBlankLines;\n      IIFEs = !!option.IIFEs;\n    } else if (typeof option === \"number\") {\n      maxLines = option;\n    }\n\n    const commentLineNumbers = getCommentLineNumbers(sourceCode.getAllComments()); //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Tells if a comment encompasses the entire line.\n     * @param {string} line The source line with a trailing comment\n     * @param {number} lineNumber The one-indexed line number this is on\n     * @param {ASTNode} comment The comment to remove\n     * @returns {boolean} If the comment covers the entire line\n     */\n\n    function isFullLineComment(line, lineNumber, comment) {\n      const start = comment.loc.start,\n            end = comment.loc.end,\n            isFirstTokenOnLine = start.line === lineNumber && !line.slice(0, start.column).trim(),\n            isLastTokenOnLine = end.line === lineNumber && !line.slice(end.column).trim();\n      return comment && (start.line < lineNumber || isFirstTokenOnLine) && (end.line > lineNumber || isLastTokenOnLine);\n    }\n    /**\n     * Identifies is a node is a FunctionExpression which is part of an IIFE\n     * @param {ASTNode} node Node to test\n     * @returns {boolean} True if it's an IIFE\n     */\n\n\n    function isIIFE(node) {\n      return node.type === \"FunctionExpression\" && node.parent && node.parent.type === \"CallExpression\" && node.parent.callee === node;\n    }\n    /**\n     * Identifies is a node is a FunctionExpression which is embedded within a MethodDefinition or Property\n     * @param {ASTNode} node Node to test\n     * @returns {boolean} True if it's a FunctionExpression embedded within a MethodDefinition or Property\n     */\n\n\n    function isEmbedded(node) {\n      if (!node.parent) {\n        return false;\n      }\n\n      if (node !== node.parent.value) {\n        return false;\n      }\n\n      if (node.parent.type === \"MethodDefinition\") {\n        return true;\n      }\n\n      if (node.parent.type === \"Property\") {\n        return node.parent.method === true || node.parent.kind === \"get\" || node.parent.kind === \"set\";\n      }\n\n      return false;\n    }\n    /**\n     * Count the lines in the function\n     * @param {ASTNode} funcNode Function AST node\n     * @returns {void}\n     * @private\n     */\n\n\n    function processFunction(funcNode) {\n      const node = isEmbedded(funcNode) ? funcNode.parent : funcNode;\n\n      if (!IIFEs && isIIFE(node)) {\n        return;\n      }\n\n      let lineCount = 0;\n\n      for (let i = node.loc.start.line - 1; i < node.loc.end.line; ++i) {\n        const line = lines[i];\n\n        if (skipComments) {\n          if (commentLineNumbers.has(i + 1) && isFullLineComment(line, i + 1, commentLineNumbers.get(i + 1))) {\n            continue;\n          }\n        }\n\n        if (skipBlankLines) {\n          if (line.match(/^\\s*$/u)) {\n            continue;\n          }\n        }\n\n        lineCount++;\n      }\n\n      if (lineCount > maxLines) {\n        const name = lodash.upperFirst(astUtils.getFunctionNameWithKind(funcNode));\n        context.report({\n          node,\n          messageId: \"exceed\",\n          data: {\n            name,\n            lineCount,\n            maxLines\n          }\n        });\n      }\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      FunctionDeclaration: processFunction,\n      FunctionExpression: processFunction,\n      ArrowFunctionExpression: processFunction\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/max-lines-per-function.js"],"names":["astUtils","require","lodash","OPTIONS_SCHEMA","type","properties","max","minimum","skipComments","skipBlankLines","IIFEs","additionalProperties","OPTIONS_OR_INTEGER_SCHEMA","oneOf","getCommentLineNumbers","comments","map","Map","forEach","comment","i","loc","start","line","end","set","module","exports","meta","docs","description","category","recommended","url","schema","messages","exceed","create","context","sourceCode","getSourceCode","lines","option","options","maxLines","commentLineNumbers","getAllComments","isFullLineComment","lineNumber","isFirstTokenOnLine","slice","column","trim","isLastTokenOnLine","isIIFE","node","parent","callee","isEmbedded","value","method","kind","processFunction","funcNode","lineCount","has","get","match","name","upperFirst","getFunctionNameWithKind","report","messageId","data","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression"],"mappings":"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","sourcesContent":["/**\n * @fileoverview A rule to set the maximum number of line of code in a function.\n * @author Pete Ward <peteward44@gmail.com>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\nconst lodash = require(\"lodash\");\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nconst OPTIONS_SCHEMA = {\n    type: \"object\",\n    properties: {\n        max: {\n            type: \"integer\",\n            minimum: 0\n        },\n        skipComments: {\n            type: \"boolean\"\n        },\n        skipBlankLines: {\n            type: \"boolean\"\n        },\n        IIFEs: {\n            type: \"boolean\"\n        }\n    },\n    additionalProperties: false\n};\n\nconst OPTIONS_OR_INTEGER_SCHEMA = {\n    oneOf: [\n        OPTIONS_SCHEMA,\n        {\n            type: \"integer\",\n            minimum: 1\n        }\n    ]\n};\n\n/**\n * Given a list of comment nodes, return a map with numeric keys (source code line numbers) and comment token values.\n * @param {Array} comments An array of comment nodes.\n * @returns {Map.<string,Node>} A map with numeric keys (source code line numbers) and comment token values.\n */\nfunction getCommentLineNumbers(comments) {\n    const map = new Map();\n\n    if (!comments) {\n        return map;\n    }\n    comments.forEach(comment => {\n        for (let i = comment.loc.start.line; i <= comment.loc.end.line; i++) {\n            map.set(i, comment);\n        }\n    });\n    return map;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce a maximum number of line of code in a function\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/max-lines-per-function\"\n        },\n\n        schema: [\n            OPTIONS_OR_INTEGER_SCHEMA\n        ],\n        messages: {\n            exceed: \"{{name}} has too many lines ({{lineCount}}). Maximum allowed is {{maxLines}}.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        const lines = sourceCode.lines;\n\n        const option = context.options[0];\n        let maxLines = 50;\n        let skipComments = false;\n        let skipBlankLines = false;\n        let IIFEs = false;\n\n        if (typeof option === \"object\") {\n            maxLines = typeof option.max === \"number\" ? option.max : 50;\n            skipComments = !!option.skipComments;\n            skipBlankLines = !!option.skipBlankLines;\n            IIFEs = !!option.IIFEs;\n        } else if (typeof option === \"number\") {\n            maxLines = option;\n        }\n\n        const commentLineNumbers = getCommentLineNumbers(sourceCode.getAllComments());\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Tells if a comment encompasses the entire line.\n         * @param {string} line The source line with a trailing comment\n         * @param {number} lineNumber The one-indexed line number this is on\n         * @param {ASTNode} comment The comment to remove\n         * @returns {boolean} If the comment covers the entire line\n         */\n        function isFullLineComment(line, lineNumber, comment) {\n            const start = comment.loc.start,\n                end = comment.loc.end,\n                isFirstTokenOnLine = start.line === lineNumber && !line.slice(0, start.column).trim(),\n                isLastTokenOnLine = end.line === lineNumber && !line.slice(end.column).trim();\n\n            return comment &&\n                (start.line < lineNumber || isFirstTokenOnLine) &&\n                (end.line > lineNumber || isLastTokenOnLine);\n        }\n\n        /**\n         * Identifies is a node is a FunctionExpression which is part of an IIFE\n         * @param {ASTNode} node Node to test\n         * @returns {boolean} True if it's an IIFE\n         */\n        function isIIFE(node) {\n            return node.type === \"FunctionExpression\" && node.parent && node.parent.type === \"CallExpression\" && node.parent.callee === node;\n        }\n\n        /**\n         * Identifies is a node is a FunctionExpression which is embedded within a MethodDefinition or Property\n         * @param {ASTNode} node Node to test\n         * @returns {boolean} True if it's a FunctionExpression embedded within a MethodDefinition or Property\n         */\n        function isEmbedded(node) {\n            if (!node.parent) {\n                return false;\n            }\n            if (node !== node.parent.value) {\n                return false;\n            }\n            if (node.parent.type === \"MethodDefinition\") {\n                return true;\n            }\n            if (node.parent.type === \"Property\") {\n                return node.parent.method === true || node.parent.kind === \"get\" || node.parent.kind === \"set\";\n            }\n            return false;\n        }\n\n        /**\n         * Count the lines in the function\n         * @param {ASTNode} funcNode Function AST node\n         * @returns {void}\n         * @private\n         */\n        function processFunction(funcNode) {\n            const node = isEmbedded(funcNode) ? funcNode.parent : funcNode;\n\n            if (!IIFEs && isIIFE(node)) {\n                return;\n            }\n            let lineCount = 0;\n\n            for (let i = node.loc.start.line - 1; i < node.loc.end.line; ++i) {\n                const line = lines[i];\n\n                if (skipComments) {\n                    if (commentLineNumbers.has(i + 1) && isFullLineComment(line, i + 1, commentLineNumbers.get(i + 1))) {\n                        continue;\n                    }\n                }\n\n                if (skipBlankLines) {\n                    if (line.match(/^\\s*$/u)) {\n                        continue;\n                    }\n                }\n\n                lineCount++;\n            }\n\n            if (lineCount > maxLines) {\n                const name = lodash.upperFirst(astUtils.getFunctionNameWithKind(funcNode));\n\n                context.report({\n                    node,\n                    messageId: \"exceed\",\n                    data: { name, lineCount, maxLines }\n                });\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: processFunction,\n            FunctionExpression: processFunction,\n            ArrowFunctionExpression: processFunction\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}