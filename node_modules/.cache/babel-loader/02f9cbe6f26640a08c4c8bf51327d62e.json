{"ast":null,"code":"import { pascalCase, pascalCaseTransformMerge } from \".\";\nvar TEST_CASES = [[\"\", \"\"], [\"test\", \"Test\"], [\"test string\", \"TestString\"], [\"Test String\", \"TestString\"], [\"TestV2\", \"TestV2\"], [\"version 1.2.10\", \"Version_1_2_10\"], [\"version 1.21.0\", \"Version_1_21_0\"], [\"version 1.21.0\", \"Version1210\", {\n  transform: pascalCaseTransformMerge\n}]];\ndescribe(\"pascal case\", function () {\n  var _loop_1 = function (input, result, options) {\n    it(input + \" -> \" + result, function () {\n      expect(pascalCase(input, options)).toEqual(result);\n    });\n  };\n\n  for (var _i = 0, TEST_CASES_1 = TEST_CASES; _i < TEST_CASES_1.length; _i++) {\n    var _a = TEST_CASES_1[_i],\n        input = _a[0],\n        result = _a[1],\n        options = _a[2];\n\n    _loop_1(input, result, options);\n  }\n});","map":{"version":3,"sources":["../src/index.spec.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,EAAqB,wBAArB,QAA8D,GAA9D;AAEA,IAAM,UAAU,GAAiC,CAC/C,CAAC,EAAD,EAAK,EAAL,CAD+C,EAE/C,CAAC,MAAD,EAAS,MAAT,CAF+C,EAG/C,CAAC,aAAD,EAAgB,YAAhB,CAH+C,EAI/C,CAAC,aAAD,EAAgB,YAAhB,CAJ+C,EAK/C,CAAC,QAAD,EAAW,QAAX,CAL+C,EAM/C,CAAC,gBAAD,EAAmB,gBAAnB,CAN+C,EAO/C,CAAC,gBAAD,EAAmB,gBAAnB,CAP+C,EAQ/C,CAAC,gBAAD,EAAmB,aAAnB,EAAkC;AAAE,EAAA,SAAS,EAAE;AAAb,CAAlC,CAR+C,CAAjD;AAWA,QAAQ,CAAC,aAAD,EAAgB,YAAA;0BACV,K,EAAO,M,EAAQ,O,EAAO;AAChC,IAAA,EAAE,CAAI,KAAK,GAAA,MAAL,GAAY,MAAhB,EAA0B,YAAA;AAC1B,MAAA,MAAM,CAAC,UAAU,CAAC,KAAD,EAAQ,OAAR,CAAX,CAAN,CAAmC,OAAnC,CAA2C,MAA3C;AACD,KAFC,CAAF;;;AADF,OAAuC,IAAA,EAAA,GAAA,CAAA,EAAA,YAAA,GAAA,UAAvC,EAAuC,EAAA,GAAA,YAAA,CAAA,MAAvC,EAAuC,EAAA,EAAvC,EAAiD;AAAtC,QAAA,EAAA,GAAA,YAAA,CAAA,EAAA,CAAA;AAAA,QAAC,KAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,QAAQ,MAAA,GAAA,EAAA,CAAA,CAAA,CAAR;AAAA,QAAgB,OAAA,GAAA,EAAA,CAAA,CAAA,CAAhB;;YAAC,K,EAAO,M,EAAQ,O;AAI1B;AACF,CANO,CAAR","sourcesContent":["import { pascalCase, pascalCaseTransformMerge, Options } from \".\";\n\nconst TEST_CASES: [string, string, Options?][] = [\n  [\"\", \"\"],\n  [\"test\", \"Test\"],\n  [\"test string\", \"TestString\"],\n  [\"Test String\", \"TestString\"],\n  [\"TestV2\", \"TestV2\"],\n  [\"version 1.2.10\", \"Version_1_2_10\"],\n  [\"version 1.21.0\", \"Version_1_21_0\"],\n  [\"version 1.21.0\", \"Version1210\", { transform: pascalCaseTransformMerge }]\n];\n\ndescribe(\"pascal case\", () => {\n  for (const [input, result, options] of TEST_CASES) {\n    it(`${input} -> ${result}`, () => {\n      expect(pascalCase(input, options)).toEqual(result);\n    });\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}