{"ast":null,"code":"'use strict';\n/**\n * Class representing an event.\n *\n * @private\n */\n\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was dispatched\n   */\n  constructor(type, target) {\n    this.target = target;\n    this.type = type;\n  }\n\n}\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */\n\n\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(data, target) {\n    super('message', target);\n    this.data = data;\n  }\n\n}\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */\n\n\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being closed\n   * @param {String} reason A human-readable string explaining why the connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(code, reason, target) {\n    super('close', target);\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n    this.reason = reason;\n    this.code = code;\n  }\n\n}\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */\n\n\nclass OpenEvent extends Event {\n  /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(target) {\n    super('open', target);\n  }\n\n}\n/**\n * Class representing an error event.\n *\n * @extends Event\n * @private\n */\n\n\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {Object} error The error that generated this event\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(error, target) {\n    super('error', target);\n    this.message = error.message;\n    this.error = error;\n  }\n\n}\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\n\n\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} method A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @public\n   */\n  addEventListener(method, listener) {\n    if (typeof listener !== 'function') return;\n\n    function onMessage(data) {\n      listener.call(this, new MessageEvent(data, this));\n    }\n\n    function onClose(code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n\n    function onError(error) {\n      listener.call(this, new ErrorEvent(error, this));\n    }\n\n    function onOpen() {\n      listener.call(this, new OpenEvent(this));\n    }\n\n    if (method === 'message') {\n      onMessage._listener = listener;\n      this.on(method, onMessage);\n    } else if (method === 'close') {\n      onClose._listener = listener;\n      this.on(method, onClose);\n    } else if (method === 'error') {\n      onError._listener = listener;\n      this.on(method, onError);\n    } else if (method === 'open') {\n      onOpen._listener = listener;\n      this.on(method, onOpen);\n    } else {\n      this.on(method, listener);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} method A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */\n  removeEventListener(method, listener) {\n    const listeners = this.listeners(method);\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(method, listeners[i]);\n      }\n    }\n  }\n\n};\nmodule.exports = EventTarget;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/webpack-dev-server/node_modules/ws/lib/event-target.js"],"names":["Event","constructor","type","target","MessageEvent","data","CloseEvent","code","reason","wasClean","_closeFrameReceived","_closeFrameSent","OpenEvent","ErrorEvent","error","message","EventTarget","addEventListener","method","listener","onMessage","call","onClose","onError","onOpen","_listener","on","removeEventListener","listeners","i","length","removeListener","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Class representing an event.\n *\n * @private\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was dispatched\n   */\n  constructor(type, target) {\n    this.target = target;\n    this.type = type;\n  }\n}\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(data, target) {\n    super('message', target);\n\n    this.data = data;\n  }\n}\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being closed\n   * @param {String} reason A human-readable string explaining why the connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(code, reason, target) {\n    super('close', target);\n\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n    this.reason = reason;\n    this.code = code;\n  }\n}\n\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */\nclass OpenEvent extends Event {\n  /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(target) {\n    super('open', target);\n  }\n}\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n * @private\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {Object} error The error that generated this event\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(error, target) {\n    super('error', target);\n\n    this.message = error.message;\n    this.error = error;\n  }\n}\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} method A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @public\n   */\n  addEventListener(method, listener) {\n    if (typeof listener !== 'function') return;\n\n    function onMessage(data) {\n      listener.call(this, new MessageEvent(data, this));\n    }\n\n    function onClose(code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n\n    function onError(error) {\n      listener.call(this, new ErrorEvent(error, this));\n    }\n\n    function onOpen() {\n      listener.call(this, new OpenEvent(this));\n    }\n\n    if (method === 'message') {\n      onMessage._listener = listener;\n      this.on(method, onMessage);\n    } else if (method === 'close') {\n      onClose._listener = listener;\n      this.on(method, onClose);\n    } else if (method === 'error') {\n      onError._listener = listener;\n      this.on(method, onError);\n    } else if (method === 'open') {\n      onOpen._listener = listener;\n      this.on(method, onOpen);\n    } else {\n      this.on(method, listener);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} method A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */\n  removeEventListener(method, listener) {\n    const listeners = this.listeners(method);\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(method, listeners[i]);\n      }\n    }\n  }\n};\n\nmodule.exports = EventTarget;\n"]},"metadata":{},"sourceType":"script"}