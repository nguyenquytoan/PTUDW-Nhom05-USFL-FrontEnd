{"ast":null,"code":"var assert = require('assert');\n\nvar forge = require('node-forge');\n\nvar fs = require('fs');\n\nvar exec = require('child_process').exec;\n\ndescribe('generate', function () {\n  var generate = require('../index').generate;\n\n  it('should work without attrs/options', function (done) {\n    var pems = generate();\n    assert.ok(!!pems.private, 'has a private key');\n    assert.ok(!!pems.fingerprint, 'has fingerprint');\n    assert.ok(!!pems.public, 'has a public key');\n    assert.ok(!!pems.cert, 'has a certificate');\n    assert.ok(!pems.pkcs7, 'should not include a pkcs7 by default');\n    assert.ok(!pems.clientcert, 'should not include a client cert by default');\n    assert.ok(!pems.clientprivate, 'should not include a client private key by default');\n    assert.ok(!pems.clientpublic, 'should not include a client public key by default');\n    var caStore = forge.pki.createCaStore();\n    caStore.addCertificate(pems.cert);\n    done();\n  });\n  it('should generate client cert', function (done) {\n    var pems = generate(null, {\n      clientCertificate: true\n    });\n    assert.ok(!!pems.clientcert, 'should include a client cert when requested');\n    assert.ok(!!pems.clientprivate, 'should include a client private key when requested');\n    assert.ok(!!pems.clientpublic, 'should include a client public key when requested');\n    done();\n  });\n  it('should include pkcs7', function (done) {\n    var pems = generate([{\n      name: 'commonName',\n      value: 'contoso.com'\n    }], {\n      pkcs7: true\n    });\n    assert.ok(!!pems.pkcs7, 'has a pkcs7');\n\n    try {\n      fs.unlinkSync('/tmp/tmp.pkcs7');\n    } catch (er) {}\n\n    fs.writeFileSync('/tmp/tmp.pkcs7', pems.pkcs7);\n    exec('openssl pkcs7 -print_certs -in /tmp/tmp.pkcs7', function (err, stdout, stderr) {\n      if (err) {\n        return done(err);\n      }\n\n      const errorMessage = stderr.toString();\n\n      if (errorMessage.length) {\n        return done(new Error(errorMessage));\n      }\n\n      const expected = stdout.toString().replace(/\\n/g, '\\r\\n'); //node-forge uses \\r\\n\n\n      assert.equal(`subject=/CN=contoso.com\\r\\nissuer=/CN=contoso.com\\r\\n` + pems.cert + '\\r\\n', expected);\n      done();\n    });\n  });\n  it('should support sha1 algorithm', function (done) {\n    var pems_sha1 = generate(null, {\n      algorithm: 'sha1'\n    });\n    assert.ok(forge.pki.certificateFromPem(pems_sha1.cert).siginfo.algorithmOid === forge.pki.oids['sha1WithRSAEncryption'], 'can generate sha1 certs');\n    done();\n  });\n  it('should support sha256 algorithm', function (done) {\n    var pems_sha256 = generate(null, {\n      algorithm: 'sha256'\n    });\n    assert.ok(forge.pki.certificateFromPem(pems_sha256.cert).siginfo.algorithmOid === forge.pki.oids['sha256WithRSAEncryption'], 'can generate sha256 certs');\n    done();\n  });\n  describe('with callback', function () {\n    it('should work without attrs/options', function (done) {\n      generate(function (err, pems) {\n        if (err) done(err);\n        assert.ok(!!pems.private, 'has a private key');\n        assert.ok(!!pems.public, 'has a public key');\n        assert.ok(!!pems.cert, 'has a certificate');\n        assert.ok(!pems.pkcs7, 'should not include a pkcs7 by default');\n        assert.ok(!pems.clientcert, 'should not include a client cert by default');\n        assert.ok(!pems.clientprivate, 'should not include a client private key by default');\n        assert.ok(!pems.clientpublic, 'should not include a client public key by default');\n        done();\n      });\n    });\n    it('should generate client cert', function (done) {\n      generate(null, {\n        clientCertificate: true\n      }, function (err, pems) {\n        if (err) done(err);\n        assert.ok(!!pems.clientcert, 'should include a client cert when requested');\n        assert.ok(!!pems.clientprivate, 'should include a client private key when requested');\n        assert.ok(!!pems.clientpublic, 'should include a client public key when requested');\n        done();\n      });\n    });\n    it('should include pkcs7', function (done) {\n      generate([{\n        name: 'commonName',\n        value: 'contoso.com'\n      }], {\n        pkcs7: true\n      }, function (err, pems) {\n        if (err) done(err);\n        assert.ok(!!pems.pkcs7, 'has a pkcs7');\n\n        try {\n          fs.unlinkSync('/tmp/tmp.pkcs7');\n        } catch (er) {}\n\n        fs.writeFileSync('/tmp/tmp.pkcs7', pems.pkcs7);\n        exec('openssl pkcs7 -print_certs -in /tmp/tmp.pkcs7', function (err, stdout, stderr) {\n          if (err) {\n            return done(err);\n          }\n\n          const errorMessage = stderr.toString();\n\n          if (errorMessage.length) {\n            return done(new Error(errorMessage));\n          }\n\n          const expected = stdout.toString().replace(/\\n/g, '\\r\\n'); //node-forge uses \\r\\n\n\n          assert.equal(`subject=/CN=contoso.com\\r\\nissuer=/CN=contoso.com\\r\\n` + pems.cert + '\\r\\n', expected);\n          done();\n        });\n      });\n    });\n    it('should support sha1 algorithm', function (done) {\n      generate(null, {\n        algorithm: 'sha1'\n      }, function (err, pems_sha1) {\n        if (err) done(err);\n        assert.ok(forge.pki.certificateFromPem(pems_sha1.cert).siginfo.algorithmOid === forge.pki.oids['sha1WithRSAEncryption'], 'can generate sha1 certs');\n        done();\n      });\n    });\n    it('should support sha256 algorithm', function (done) {\n      generate(null, {\n        algorithm: 'sha256'\n      }, function (err, pems_sha256) {\n        if (err) done(err);\n        assert.ok(forge.pki.certificateFromPem(pems_sha256.cert).siginfo.algorithmOid === forge.pki.oids['sha256WithRSAEncryption'], 'can generate sha256 certs');\n        done();\n      });\n    });\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/selfsigned/test/tests.js"],"names":["assert","require","forge","fs","exec","describe","generate","it","done","pems","ok","private","fingerprint","public","cert","pkcs7","clientcert","clientprivate","clientpublic","caStore","pki","createCaStore","addCertificate","clientCertificate","name","value","unlinkSync","er","writeFileSync","err","stdout","stderr","errorMessage","toString","length","Error","expected","replace","equal","pems_sha1","algorithm","certificateFromPem","siginfo","algorithmOid","oids","pems_sha256"],"mappings":"AAAA,IAAIA,MAAM,GAAIC,OAAO,CAAC,QAAD,CAArB;;AACA,IAAIC,KAAK,GAAKD,OAAO,CAAC,YAAD,CAArB;;AACA,IAAIE,EAAE,GAAQF,OAAO,CAAC,IAAD,CAArB;;AACA,IAAIG,IAAI,GAAMH,OAAO,CAAC,eAAD,CAAP,CAAyBG,IAAvC;;AAEAC,QAAQ,CAAC,UAAD,EAAa,YAAY;AAE/B,MAAIC,QAAQ,GAAGL,OAAO,CAAC,UAAD,CAAP,CAAoBK,QAAnC;;AAEAC,EAAAA,EAAE,CAAC,mCAAD,EAAsC,UAAUC,IAAV,EAAgB;AACtD,QAAIC,IAAI,GAAGH,QAAQ,EAAnB;AACAN,IAAAA,MAAM,CAACU,EAAP,CAAU,CAAC,CAACD,IAAI,CAACE,OAAjB,EAA0B,mBAA1B;AACAX,IAAAA,MAAM,CAACU,EAAP,CAAU,CAAC,CAACD,IAAI,CAACG,WAAjB,EAA8B,iBAA9B;AACAZ,IAAAA,MAAM,CAACU,EAAP,CAAU,CAAC,CAACD,IAAI,CAACI,MAAjB,EAAyB,kBAAzB;AACAb,IAAAA,MAAM,CAACU,EAAP,CAAU,CAAC,CAACD,IAAI,CAACK,IAAjB,EAAuB,mBAAvB;AACAd,IAAAA,MAAM,CAACU,EAAP,CAAU,CAACD,IAAI,CAACM,KAAhB,EAAuB,uCAAvB;AACAf,IAAAA,MAAM,CAACU,EAAP,CAAU,CAACD,IAAI,CAACO,UAAhB,EAA4B,6CAA5B;AACAhB,IAAAA,MAAM,CAACU,EAAP,CAAU,CAACD,IAAI,CAACQ,aAAhB,EAA+B,oDAA/B;AACAjB,IAAAA,MAAM,CAACU,EAAP,CAAU,CAACD,IAAI,CAACS,YAAhB,EAA8B,mDAA9B;AAEA,QAAIC,OAAO,GAAGjB,KAAK,CAACkB,GAAN,CAAUC,aAAV,EAAd;AACAF,IAAAA,OAAO,CAACG,cAAR,CAAuBb,IAAI,CAACK,IAA5B;AACAN,IAAAA,IAAI;AACL,GAdC,CAAF;AAgBAD,EAAAA,EAAE,CAAC,6BAAD,EAAgC,UAAUC,IAAV,EAAgB;AAChD,QAAIC,IAAI,GAAGH,QAAQ,CAAC,IAAD,EAAO;AAACiB,MAAAA,iBAAiB,EAAE;AAApB,KAAP,CAAnB;AAEAvB,IAAAA,MAAM,CAACU,EAAP,CAAU,CAAC,CAACD,IAAI,CAACO,UAAjB,EAA6B,6CAA7B;AACAhB,IAAAA,MAAM,CAACU,EAAP,CAAU,CAAC,CAACD,IAAI,CAACQ,aAAjB,EAAgC,oDAAhC;AACAjB,IAAAA,MAAM,CAACU,EAAP,CAAU,CAAC,CAACD,IAAI,CAACS,YAAjB,EAA+B,mDAA/B;AACAV,IAAAA,IAAI;AACL,GAPC,CAAF;AASAD,EAAAA,EAAE,CAAC,sBAAD,EAAyB,UAAUC,IAAV,EAAgB;AACzC,QAAIC,IAAI,GAAGH,QAAQ,CAAC,CAAC;AAAEkB,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KAAD,CAAD,EAAiD;AAACV,MAAAA,KAAK,EAAE;AAAR,KAAjD,CAAnB;AAEAf,IAAAA,MAAM,CAACU,EAAP,CAAU,CAAC,CAACD,IAAI,CAACM,KAAjB,EAAwB,aAAxB;;AAEA,QAAI;AACFZ,MAAAA,EAAE,CAACuB,UAAH,CAAc,gBAAd;AACD,KAFD,CAEE,OAAOC,EAAP,EAAW,CAAE;;AAEfxB,IAAAA,EAAE,CAACyB,aAAH,CAAiB,gBAAjB,EAAmCnB,IAAI,CAACM,KAAxC;AACAX,IAAAA,IAAI,CAAC,+CAAD,EAAkD,UAAUyB,GAAV,EAAeC,MAAf,EAAuBC,MAAvB,EAA+B;AACnF,UAAIF,GAAJ,EAAS;AACP,eAAOrB,IAAI,CAACqB,GAAD,CAAX;AACD;;AAED,YAAMG,YAAY,GAAGD,MAAM,CAACE,QAAP,EAArB;;AACA,UAAID,YAAY,CAACE,MAAjB,EAAyB;AACvB,eAAO1B,IAAI,CAAC,IAAI2B,KAAJ,CAAUH,YAAV,CAAD,CAAX;AACD;;AAED,YAAMI,QAAQ,GAAGN,MAAM,CAACG,QAAP,GAAkBI,OAAlB,CAA0B,KAA1B,EAAiC,MAAjC,CAAjB,CAVmF,CAUxB;;AAC3DrC,MAAAA,MAAM,CAACsC,KAAP,CACG,uDAAD,GACE7B,IAAI,CAACK,IADP,GAEE,MAHJ,EAIEsB,QAJF;AAOA5B,MAAAA,IAAI;AACL,KAnBG,CAAJ;AAoBD,GA9BC,CAAF;AAgCAD,EAAAA,EAAE,CAAC,+BAAD,EAAkC,UAAUC,IAAV,EAAgB;AAClD,QAAI+B,SAAS,GAAGjC,QAAQ,CAAC,IAAD,EAAO;AAAEkC,MAAAA,SAAS,EAAE;AAAb,KAAP,CAAxB;AACAxC,IAAAA,MAAM,CAACU,EAAP,CAAUR,KAAK,CAACkB,GAAN,CAAUqB,kBAAV,CAA6BF,SAAS,CAACzB,IAAvC,EAA6C4B,OAA7C,CAAqDC,YAArD,KAAsEzC,KAAK,CAACkB,GAAN,CAAUwB,IAAV,CAAe,uBAAf,CAAhF,EAAyH,yBAAzH;AACApC,IAAAA,IAAI;AACL,GAJC,CAAF;AAMAD,EAAAA,EAAE,CAAC,iCAAD,EAAoC,UAAUC,IAAV,EAAgB;AACpD,QAAIqC,WAAW,GAAGvC,QAAQ,CAAC,IAAD,EAAO;AAAEkC,MAAAA,SAAS,EAAE;AAAb,KAAP,CAA1B;AACAxC,IAAAA,MAAM,CAACU,EAAP,CAAUR,KAAK,CAACkB,GAAN,CAAUqB,kBAAV,CAA6BI,WAAW,CAAC/B,IAAzC,EAA+C4B,OAA/C,CAAuDC,YAAvD,KAAwEzC,KAAK,CAACkB,GAAN,CAAUwB,IAAV,CAAe,yBAAf,CAAlF,EAA6H,2BAA7H;AACApC,IAAAA,IAAI;AACL,GAJC,CAAF;AAMAH,EAAAA,QAAQ,CAAC,eAAD,EAAkB,YAAY;AACpCE,IAAAA,EAAE,CAAC,mCAAD,EAAsC,UAAUC,IAAV,EAAgB;AACtDF,MAAAA,QAAQ,CAAC,UAAUuB,GAAV,EAAepB,IAAf,EAAqB;AAC5B,YAAIoB,GAAJ,EAASrB,IAAI,CAACqB,GAAD,CAAJ;AACT7B,QAAAA,MAAM,CAACU,EAAP,CAAU,CAAC,CAACD,IAAI,CAACE,OAAjB,EAA0B,mBAA1B;AACAX,QAAAA,MAAM,CAACU,EAAP,CAAU,CAAC,CAACD,IAAI,CAACI,MAAjB,EAAyB,kBAAzB;AACAb,QAAAA,MAAM,CAACU,EAAP,CAAU,CAAC,CAACD,IAAI,CAACK,IAAjB,EAAuB,mBAAvB;AACAd,QAAAA,MAAM,CAACU,EAAP,CAAU,CAACD,IAAI,CAACM,KAAhB,EAAuB,uCAAvB;AACAf,QAAAA,MAAM,CAACU,EAAP,CAAU,CAACD,IAAI,CAACO,UAAhB,EAA4B,6CAA5B;AACAhB,QAAAA,MAAM,CAACU,EAAP,CAAU,CAACD,IAAI,CAACQ,aAAhB,EAA+B,oDAA/B;AACAjB,QAAAA,MAAM,CAACU,EAAP,CAAU,CAACD,IAAI,CAACS,YAAhB,EAA8B,mDAA9B;AACAV,QAAAA,IAAI;AACL,OAVO,CAAR;AAWD,KAZC,CAAF;AAcAD,IAAAA,EAAE,CAAC,6BAAD,EAAgC,UAAUC,IAAV,EAAgB;AAChDF,MAAAA,QAAQ,CAAC,IAAD,EAAO;AAACiB,QAAAA,iBAAiB,EAAE;AAApB,OAAP,EAAkC,UAAUM,GAAV,EAAepB,IAAf,EAAqB;AAC7D,YAAIoB,GAAJ,EAASrB,IAAI,CAACqB,GAAD,CAAJ;AACT7B,QAAAA,MAAM,CAACU,EAAP,CAAU,CAAC,CAACD,IAAI,CAACO,UAAjB,EAA6B,6CAA7B;AACAhB,QAAAA,MAAM,CAACU,EAAP,CAAU,CAAC,CAACD,IAAI,CAACQ,aAAjB,EAAgC,oDAAhC;AACAjB,QAAAA,MAAM,CAACU,EAAP,CAAU,CAAC,CAACD,IAAI,CAACS,YAAjB,EAA+B,mDAA/B;AACAV,QAAAA,IAAI;AACL,OANO,CAAR;AAOD,KARC,CAAF;AAUAD,IAAAA,EAAE,CAAC,sBAAD,EAAyB,UAAUC,IAAV,EAAgB;AACzCF,MAAAA,QAAQ,CAAC,CAAC;AAAEkB,QAAAA,IAAI,EAAE,YAAR;AAAsBC,QAAAA,KAAK,EAAE;AAA7B,OAAD,CAAD,EAAiD;AAACV,QAAAA,KAAK,EAAE;AAAR,OAAjD,EAAgE,UAAUc,GAAV,EAAepB,IAAf,EAAqB;AAC3F,YAAIoB,GAAJ,EAASrB,IAAI,CAACqB,GAAD,CAAJ;AACT7B,QAAAA,MAAM,CAACU,EAAP,CAAU,CAAC,CAACD,IAAI,CAACM,KAAjB,EAAwB,aAAxB;;AAEA,YAAI;AACFZ,UAAAA,EAAE,CAACuB,UAAH,CAAc,gBAAd;AACD,SAFD,CAEE,OAAOC,EAAP,EAAW,CAAE;;AAEfxB,QAAAA,EAAE,CAACyB,aAAH,CAAiB,gBAAjB,EAAmCnB,IAAI,CAACM,KAAxC;AACAX,QAAAA,IAAI,CAAC,+CAAD,EAAkD,UAAUyB,GAAV,EAAeC,MAAf,EAAuBC,MAAvB,EAA+B;AACnF,cAAIF,GAAJ,EAAS;AACP,mBAAOrB,IAAI,CAACqB,GAAD,CAAX;AACD;;AAED,gBAAMG,YAAY,GAAGD,MAAM,CAACE,QAAP,EAArB;;AACA,cAAID,YAAY,CAACE,MAAjB,EAAyB;AACvB,mBAAO1B,IAAI,CAAC,IAAI2B,KAAJ,CAAUH,YAAV,CAAD,CAAX;AACD;;AAED,gBAAMI,QAAQ,GAAGN,MAAM,CAACG,QAAP,GAAkBI,OAAlB,CAA0B,KAA1B,EAAiC,MAAjC,CAAjB,CAVmF,CAUxB;;AAC3DrC,UAAAA,MAAM,CAACsC,KAAP,CACG,uDAAD,GACE7B,IAAI,CAACK,IADP,GAEE,MAHJ,EAIEsB,QAJF;AAOA5B,UAAAA,IAAI;AACL,SAnBG,CAAJ;AAoBD,OA7BO,CAAR;AA8BD,KA/BC,CAAF;AAiCAD,IAAAA,EAAE,CAAC,+BAAD,EAAkC,UAAUC,IAAV,EAAgB;AAClDF,MAAAA,QAAQ,CAAC,IAAD,EAAO;AAAEkC,QAAAA,SAAS,EAAE;AAAb,OAAP,EAA8B,UAAUX,GAAV,EAAeU,SAAf,EAA0B;AAC9D,YAAIV,GAAJ,EAASrB,IAAI,CAACqB,GAAD,CAAJ;AACT7B,QAAAA,MAAM,CAACU,EAAP,CAAUR,KAAK,CAACkB,GAAN,CAAUqB,kBAAV,CAA6BF,SAAS,CAACzB,IAAvC,EAA6C4B,OAA7C,CAAqDC,YAArD,KAAsEzC,KAAK,CAACkB,GAAN,CAAUwB,IAAV,CAAe,uBAAf,CAAhF,EAAyH,yBAAzH;AACApC,QAAAA,IAAI;AACL,OAJO,CAAR;AAKD,KANC,CAAF;AAQAD,IAAAA,EAAE,CAAC,iCAAD,EAAoC,UAAUC,IAAV,EAAgB;AACpDF,MAAAA,QAAQ,CAAC,IAAD,EAAO;AAAEkC,QAAAA,SAAS,EAAE;AAAb,OAAP,EAAgC,UAAUX,GAAV,EAAegB,WAAf,EAA4B;AAClE,YAAIhB,GAAJ,EAASrB,IAAI,CAACqB,GAAD,CAAJ;AACT7B,QAAAA,MAAM,CAACU,EAAP,CAAUR,KAAK,CAACkB,GAAN,CAAUqB,kBAAV,CAA6BI,WAAW,CAAC/B,IAAzC,EAA+C4B,OAA/C,CAAuDC,YAAvD,KAAwEzC,KAAK,CAACkB,GAAN,CAAUwB,IAAV,CAAe,yBAAf,CAAlF,EAA6H,2BAA7H;AACApC,QAAAA,IAAI;AACL,OAJO,CAAR;AAKD,KANC,CAAF;AAOD,GAzEO,CAAR;AA0ED,CAnJO,CAAR","sourcesContent":["var assert  = require('assert');\nvar forge   = require('node-forge');\nvar fs      = require('fs');\nvar exec    = require('child_process').exec;\n\ndescribe('generate', function () {\n\n  var generate = require('../index').generate;\n\n  it('should work without attrs/options', function (done) {\n    var pems = generate();\n    assert.ok(!!pems.private, 'has a private key');\n    assert.ok(!!pems.fingerprint, 'has fingerprint');\n    assert.ok(!!pems.public, 'has a public key');\n    assert.ok(!!pems.cert, 'has a certificate');\n    assert.ok(!pems.pkcs7, 'should not include a pkcs7 by default');\n    assert.ok(!pems.clientcert, 'should not include a client cert by default');\n    assert.ok(!pems.clientprivate, 'should not include a client private key by default');\n    assert.ok(!pems.clientpublic, 'should not include a client public key by default');\n\n    var caStore = forge.pki.createCaStore();\n    caStore.addCertificate(pems.cert);\n    done();\n  });\n\n  it('should generate client cert', function (done) {\n    var pems = generate(null, {clientCertificate: true});\n\n    assert.ok(!!pems.clientcert, 'should include a client cert when requested');\n    assert.ok(!!pems.clientprivate, 'should include a client private key when requested');\n    assert.ok(!!pems.clientpublic, 'should include a client public key when requested');\n    done();\n  });\n\n  it('should include pkcs7', function (done) {\n    var pems = generate([{ name: 'commonName', value: 'contoso.com' }], {pkcs7: true});\n\n    assert.ok(!!pems.pkcs7, 'has a pkcs7');\n\n    try {\n      fs.unlinkSync('/tmp/tmp.pkcs7');\n    } catch (er) {}\n\n    fs.writeFileSync('/tmp/tmp.pkcs7', pems.pkcs7);\n    exec('openssl pkcs7 -print_certs -in /tmp/tmp.pkcs7', function (err, stdout, stderr) {\n      if (err) {\n        return done(err);\n      }\n\n      const errorMessage = stderr.toString();\n      if (errorMessage.length) {\n        return done(new Error(errorMessage));\n      }\n\n      const expected = stdout.toString().replace(/\\n/g, '\\r\\n'); //node-forge uses \\r\\n\n      assert.equal(\n        `subject=/CN=contoso.com\\r\\nissuer=/CN=contoso.com\\r\\n` +\n          pems.cert +\n          '\\r\\n',\n        expected\n      );\n\n      done();\n    });\n  });\n\n  it('should support sha1 algorithm', function (done) {\n    var pems_sha1 = generate(null, { algorithm: 'sha1' });\n    assert.ok(forge.pki.certificateFromPem(pems_sha1.cert).siginfo.algorithmOid === forge.pki.oids['sha1WithRSAEncryption'], 'can generate sha1 certs');\n    done();\n  });\n\n  it('should support sha256 algorithm', function (done) {\n    var pems_sha256 = generate(null, { algorithm: 'sha256' });\n    assert.ok(forge.pki.certificateFromPem(pems_sha256.cert).siginfo.algorithmOid === forge.pki.oids['sha256WithRSAEncryption'], 'can generate sha256 certs');\n    done();\n  });\n\n  describe('with callback', function () {\n    it('should work without attrs/options', function (done) {\n      generate(function (err, pems) {\n        if (err) done(err);\n        assert.ok(!!pems.private, 'has a private key');\n        assert.ok(!!pems.public, 'has a public key');\n        assert.ok(!!pems.cert, 'has a certificate');\n        assert.ok(!pems.pkcs7, 'should not include a pkcs7 by default');\n        assert.ok(!pems.clientcert, 'should not include a client cert by default');\n        assert.ok(!pems.clientprivate, 'should not include a client private key by default');\n        assert.ok(!pems.clientpublic, 'should not include a client public key by default');\n        done();\n      });\n    });\n\n    it('should generate client cert', function (done) {\n      generate(null, {clientCertificate: true}, function (err, pems) {\n        if (err) done(err);\n        assert.ok(!!pems.clientcert, 'should include a client cert when requested');\n        assert.ok(!!pems.clientprivate, 'should include a client private key when requested');\n        assert.ok(!!pems.clientpublic, 'should include a client public key when requested');\n        done();\n      });\n    });\n\n    it('should include pkcs7', function (done) {\n      generate([{ name: 'commonName', value: 'contoso.com' }], {pkcs7: true}, function (err, pems) {\n        if (err) done(err);\n        assert.ok(!!pems.pkcs7, 'has a pkcs7');\n\n        try {\n          fs.unlinkSync('/tmp/tmp.pkcs7');\n        } catch (er) {}\n\n        fs.writeFileSync('/tmp/tmp.pkcs7', pems.pkcs7);\n        exec('openssl pkcs7 -print_certs -in /tmp/tmp.pkcs7', function (err, stdout, stderr) {\n          if (err) {\n            return done(err);\n          }\n\n          const errorMessage = stderr.toString();\n          if (errorMessage.length) {\n            return done(new Error(errorMessage));\n          }\n\n          const expected = stdout.toString().replace(/\\n/g, '\\r\\n'); //node-forge uses \\r\\n\n          assert.equal(\n            `subject=/CN=contoso.com\\r\\nissuer=/CN=contoso.com\\r\\n` +\n              pems.cert +\n              '\\r\\n',\n            expected\n          );\n\n          done();\n        });\n      });\n    });\n\n    it('should support sha1 algorithm', function (done) {\n      generate(null, { algorithm: 'sha1' }, function (err, pems_sha1) {\n        if (err) done(err);\n        assert.ok(forge.pki.certificateFromPem(pems_sha1.cert).siginfo.algorithmOid === forge.pki.oids['sha1WithRSAEncryption'], 'can generate sha1 certs');\n        done();\n      });\n    });\n\n    it('should support sha256 algorithm', function (done) {\n      generate(null, { algorithm: 'sha256' }, function (err, pems_sha256) {\n        if (err) done(err);\n        assert.ok(forge.pki.certificateFromPem(pems_sha256.cert).siginfo.algorithmOid === forge.pki.oids['sha256WithRSAEncryption'], 'can generate sha256 certs');\n        done();\n      });\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"script"}