{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = getMaxWorkers;\n\nfunction _os() {\n  const data = _interopRequireDefault(require('os'));\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nfunction getMaxWorkers(argv, defaultOptions) {\n  if (argv.runInBand) {\n    return 1;\n  } else if (argv.maxWorkers) {\n    return parseWorkers(argv.maxWorkers);\n  } else if (defaultOptions && defaultOptions.maxWorkers) {\n    return parseWorkers(defaultOptions.maxWorkers);\n  } else {\n    // In watch mode, Jest should be unobtrusive and not use all available CPUs.\n    const cpus = _os().default.cpus() ? _os().default.cpus().length : 1;\n    return Math.max(argv.watch ? Math.floor(cpus / 2) : cpus - 1, 1);\n  }\n}\n\nconst parseWorkers = maxWorkers => {\n  const parsed = parseInt(maxWorkers.toString(), 10);\n\n  if (typeof maxWorkers === 'string' && maxWorkers.trim().endsWith('%') && parsed > 0 && parsed <= 100) {\n    const cpus = _os().default.cpus().length;\n\n    const workers = Math.floor(parsed / 100 * cpus);\n    return workers >= 1 ? workers : 1;\n  }\n\n  return parsed > 0 ? parsed : 1;\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-config/build/getMaxWorkers.js"],"names":["Object","defineProperty","exports","value","default","getMaxWorkers","_os","data","_interopRequireDefault","require","obj","__esModule","argv","defaultOptions","runInBand","maxWorkers","parseWorkers","cpus","length","Math","max","watch","floor","parsed","parseInt","toString","trim","endsWith","workers"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,aAAlB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,IAAD,CAAR,CAAnC;;AAEAH,EAAAA,GAAG,GAAG,SAASA,GAAT,GAAe;AACnB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASC,sBAAT,CAAgCE,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAACN,IAAAA,OAAO,EAAEM;AAAV,GAArC;AACD;AAED;;;;;;;;AAMA,SAASL,aAAT,CAAuBO,IAAvB,EAA6BC,cAA7B,EAA6C;AAC3C,MAAID,IAAI,CAACE,SAAT,EAAoB;AAClB,WAAO,CAAP;AACD,GAFD,MAEO,IAAIF,IAAI,CAACG,UAAT,EAAqB;AAC1B,WAAOC,YAAY,CAACJ,IAAI,CAACG,UAAN,CAAnB;AACD,GAFM,MAEA,IAAIF,cAAc,IAAIA,cAAc,CAACE,UAArC,EAAiD;AACtD,WAAOC,YAAY,CAACH,cAAc,CAACE,UAAhB,CAAnB;AACD,GAFM,MAEA;AACL;AACA,UAAME,IAAI,GAAGX,GAAG,GAAGF,OAAN,CAAca,IAAd,KAAuBX,GAAG,GAAGF,OAAN,CAAca,IAAd,GAAqBC,MAA5C,GAAqD,CAAlE;AACA,WAAOC,IAAI,CAACC,GAAL,CAASR,IAAI,CAACS,KAAL,GAAaF,IAAI,CAACG,KAAL,CAAWL,IAAI,GAAG,CAAlB,CAAb,GAAoCA,IAAI,GAAG,CAApD,EAAuD,CAAvD,CAAP;AACD;AACF;;AAED,MAAMD,YAAY,GAAGD,UAAU,IAAI;AACjC,QAAMQ,MAAM,GAAGC,QAAQ,CAACT,UAAU,CAACU,QAAX,EAAD,EAAwB,EAAxB,CAAvB;;AAEA,MACE,OAAOV,UAAP,KAAsB,QAAtB,IACAA,UAAU,CAACW,IAAX,GAAkBC,QAAlB,CAA2B,GAA3B,CADA,IAEAJ,MAAM,GAAG,CAFT,IAGAA,MAAM,IAAI,GAJZ,EAKE;AACA,UAAMN,IAAI,GAAGX,GAAG,GAAGF,OAAN,CAAca,IAAd,GAAqBC,MAAlC;;AAEA,UAAMU,OAAO,GAAGT,IAAI,CAACG,KAAL,CAAYC,MAAM,GAAG,GAAV,GAAiBN,IAA5B,CAAhB;AACA,WAAOW,OAAO,IAAI,CAAX,GAAeA,OAAf,GAAyB,CAAhC;AACD;;AAED,SAAOL,MAAM,GAAG,CAAT,GAAaA,MAAb,GAAsB,CAA7B;AACD,CAhBD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = getMaxWorkers;\n\nfunction _os() {\n  const data = _interopRequireDefault(require('os'));\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nfunction getMaxWorkers(argv, defaultOptions) {\n  if (argv.runInBand) {\n    return 1;\n  } else if (argv.maxWorkers) {\n    return parseWorkers(argv.maxWorkers);\n  } else if (defaultOptions && defaultOptions.maxWorkers) {\n    return parseWorkers(defaultOptions.maxWorkers);\n  } else {\n    // In watch mode, Jest should be unobtrusive and not use all available CPUs.\n    const cpus = _os().default.cpus() ? _os().default.cpus().length : 1;\n    return Math.max(argv.watch ? Math.floor(cpus / 2) : cpus - 1, 1);\n  }\n}\n\nconst parseWorkers = maxWorkers => {\n  const parsed = parseInt(maxWorkers.toString(), 10);\n\n  if (\n    typeof maxWorkers === 'string' &&\n    maxWorkers.trim().endsWith('%') &&\n    parsed > 0 &&\n    parsed <= 100\n  ) {\n    const cpus = _os().default.cpus().length;\n\n    const workers = Math.floor((parsed / 100) * cpus);\n    return workers >= 1 ? workers : 1;\n  }\n\n  return parsed > 0 ? parsed : 1;\n};\n"]},"metadata":{},"sourceType":"script"}