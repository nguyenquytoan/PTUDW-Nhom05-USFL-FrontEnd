{"ast":null,"code":"\"use strict\";\n\nfunction isDirectoryIndex(resource, options) {\n  var verdict = false;\n  options.directoryIndexes.every(function (index) {\n    if (index === resource) {\n      verdict = true;\n      return false;\n    }\n\n    return true;\n  });\n  return verdict;\n}\n\nfunction parsePath(urlObj, options) {\n  var path = urlObj.path.absolute.string;\n\n  if (path) {\n    var lastSlash = path.lastIndexOf(\"/\");\n\n    if (lastSlash > -1) {\n      if (++lastSlash < path.length) {\n        var resource = path.substr(lastSlash);\n\n        if (resource !== \".\" && resource !== \"..\") {\n          urlObj.resource = resource;\n          path = path.substr(0, lastSlash);\n        } else {\n          path += \"/\";\n        }\n      }\n\n      urlObj.path.absolute.string = path;\n      urlObj.path.absolute.array = splitPath(path);\n    } else if (path === \".\" || path === \"..\") {\n      // \"..?var\", \"..#anchor\", etc ... not \"..index.html\"\n      path += \"/\";\n      urlObj.path.absolute.string = path;\n      urlObj.path.absolute.array = splitPath(path);\n    } else {\n      // Resource-only\n      urlObj.resource = path;\n      urlObj.path.absolute.string = null;\n    }\n\n    urlObj.extra.resourceIsIndex = isDirectoryIndex(urlObj.resource, options);\n  } // Else: query/hash-only or empty\n\n}\n\nfunction splitPath(path) {\n  // TWEAK :: condition only for speed optimization\n  if (path !== \"/\") {\n    var cleaned = [];\n    path.split(\"/\").forEach(function (dir) {\n      // Cleanup -- splitting \"/dir/\" becomes [\"\",\"dir\",\"\"]\n      if (dir !== \"\") {\n        cleaned.push(dir);\n      }\n    });\n    return cleaned;\n  } else {\n    // Faster to skip the above block and just create an array\n    return [];\n  }\n}\n\nmodule.exports = parsePath;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/relateurl/lib/parse/path.js"],"names":["isDirectoryIndex","resource","options","verdict","directoryIndexes","every","index","parsePath","urlObj","path","absolute","string","lastSlash","lastIndexOf","length","substr","array","splitPath","extra","resourceIsIndex","cleaned","split","forEach","dir","push","module","exports"],"mappings":"AAAA;;AAEA,SAASA,gBAAT,CAA0BC,QAA1B,EAAoCC,OAApC,EACA;AACC,MAAIC,OAAO,GAAG,KAAd;AAEAD,EAAAA,OAAO,CAACE,gBAAR,CAAyBC,KAAzB,CAAgC,UAASC,KAAT,EAChC;AACC,QAAIA,KAAK,KAAKL,QAAd,EACA;AACCE,MAAAA,OAAO,GAAG,IAAV;AACA,aAAO,KAAP;AACA;;AAED,WAAO,IAAP;AACA,GATD;AAWA,SAAOA,OAAP;AACA;;AAID,SAASI,SAAT,CAAmBC,MAAnB,EAA2BN,OAA3B,EACA;AACC,MAAIO,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqBC,MAAhC;;AAEA,MAAIF,IAAJ,EACA;AACC,QAAIG,SAAS,GAAGH,IAAI,CAACI,WAAL,CAAiB,GAAjB,CAAhB;;AAEA,QAAID,SAAS,GAAG,CAAC,CAAjB,EACA;AACC,UAAI,EAAEA,SAAF,GAAcH,IAAI,CAACK,MAAvB,EACA;AACC,YAAIb,QAAQ,GAAGQ,IAAI,CAACM,MAAL,CAAYH,SAAZ,CAAf;;AAEA,YAAIX,QAAQ,KAAG,GAAX,IAAkBA,QAAQ,KAAG,IAAjC,EACA;AACCO,UAAAA,MAAM,CAACP,QAAP,GAAkBA,QAAlB;AACAQ,UAAAA,IAAI,GAAGA,IAAI,CAACM,MAAL,CAAY,CAAZ,EAAeH,SAAf,CAAP;AACA,SAJD,MAMA;AACCH,UAAAA,IAAI,IAAI,GAAR;AACA;AACD;;AAEDD,MAAAA,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqBC,MAArB,GAA8BF,IAA9B;AACAD,MAAAA,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqBM,KAArB,GAA6BC,SAAS,CAACR,IAAD,CAAtC;AACA,KAnBD,MAoBK,IAAIA,IAAI,KAAG,GAAP,IAAcA,IAAI,KAAG,IAAzB,EACL;AACC;AACAA,MAAAA,IAAI,IAAI,GAAR;AAEAD,MAAAA,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqBC,MAArB,GAA8BF,IAA9B;AACAD,MAAAA,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqBM,KAArB,GAA6BC,SAAS,CAACR,IAAD,CAAtC;AACA,KAPI,MASL;AACC;AACAD,MAAAA,MAAM,CAACP,QAAP,GAAkBQ,IAAlB;AACAD,MAAAA,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqBC,MAArB,GAA8B,IAA9B;AACA;;AAEDH,IAAAA,MAAM,CAACU,KAAP,CAAaC,eAAb,GAA+BnB,gBAAgB,CAACQ,MAAM,CAACP,QAAR,EAAkBC,OAAlB,CAA/C;AACA,GA3CF,CA4CC;;AACA;;AAID,SAASe,SAAT,CAAmBR,IAAnB,EACA;AACC;AACA,MAAIA,IAAI,KAAK,GAAb,EACA;AACC,QAAIW,OAAO,GAAG,EAAd;AAEAX,IAAAA,IAAI,CAACY,KAAL,CAAW,GAAX,EAAgBC,OAAhB,CAAyB,UAASC,GAAT,EACzB;AACC;AACA,UAAIA,GAAG,KAAK,EAAZ,EACA;AACCH,QAAAA,OAAO,CAACI,IAAR,CAAaD,GAAb;AACA;AACD,KAPD;AASA,WAAOH,OAAP;AACA,GAdD,MAgBA;AACC;AACA,WAAO,EAAP;AACA;AACD;;AAIDK,MAAM,CAACC,OAAP,GAAiBnB,SAAjB","sourcesContent":["\"use strict\";\n\nfunction isDirectoryIndex(resource, options)\n{\n\tvar verdict = false;\n\t\n\toptions.directoryIndexes.every( function(index)\n\t{\n\t\tif (index === resource)\n\t\t{\n\t\t\tverdict = true;\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;\n\t});\n\t\n\treturn verdict;\n}\n\n\n\nfunction parsePath(urlObj, options)\n{\n\tvar path = urlObj.path.absolute.string;\n\t\n\tif (path)\n\t{\n\t\tvar lastSlash = path.lastIndexOf(\"/\");\n\t\t\n\t\tif (lastSlash > -1)\n\t\t{\n\t\t\tif (++lastSlash < path.length)\n\t\t\t{\n\t\t\t\tvar resource = path.substr(lastSlash);\n\t\t\t\t\n\t\t\t\tif (resource!==\".\" && resource!==\"..\")\n\t\t\t\t{\n\t\t\t\t\turlObj.resource = resource;\n\t\t\t\t\tpath = path.substr(0, lastSlash);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpath += \"/\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\turlObj.path.absolute.string = path;\n\t\t\turlObj.path.absolute.array = splitPath(path);\n\t\t}\n\t\telse if (path===\".\" || path===\"..\")\n\t\t{\n\t\t\t// \"..?var\", \"..#anchor\", etc ... not \"..index.html\"\n\t\t\tpath += \"/\";\n\t\t\t\n\t\t\turlObj.path.absolute.string = path;\n\t\t\turlObj.path.absolute.array = splitPath(path);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Resource-only\n\t\t\turlObj.resource = path;\n\t\t\turlObj.path.absolute.string = null;\n\t\t}\n\t\t\n\t\turlObj.extra.resourceIsIndex = isDirectoryIndex(urlObj.resource, options);\n\t}\n\t// Else: query/hash-only or empty\n}\n\n\n\nfunction splitPath(path)\n{\n\t// TWEAK :: condition only for speed optimization\n\tif (path !== \"/\")\n\t{\n\t\tvar cleaned = [];\n\t\t\n\t\tpath.split(\"/\").forEach( function(dir)\n\t\t{\n\t\t\t// Cleanup -- splitting \"/dir/\" becomes [\"\",\"dir\",\"\"]\n\t\t\tif (dir !== \"\")\n\t\t\t{\n\t\t\t\tcleaned.push(dir);\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn cleaned;\n\t}\n\telse\n\t{\n\t\t// Faster to skip the above block and just create an array\n\t\treturn [];\n\t}\n}\n\n\n\nmodule.exports = parsePath;\n"]},"metadata":{},"sourceType":"script"}