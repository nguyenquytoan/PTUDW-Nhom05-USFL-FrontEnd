{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst os = require('os');\n\nconst codeFrame = require('@babel/code-frame').codeFrameColumns;\n\nconst chalk = require('chalk');\n\nconst fs = require('fs');\n\nconst types = {\n  diagnostic: 'TypeScript',\n  lint: 'TSLint'\n};\n\nfunction formatter(message, useColors) {\n  const {\n    type,\n    severity,\n    file,\n    line,\n    content,\n    code,\n    character\n  } = typeof message.getFile === 'function' ? {\n    type: message.getType(),\n    severity: message.getSeverity(),\n    file: message.getFile(),\n    line: message.getLine(),\n    content: message.getContent(),\n    code: message.getCode(),\n    character: message.getCharacter()\n  } : message;\n  const colors = new chalk.constructor({\n    enabled: useColors\n  });\n  const messageColor = message.isWarningSeverity() ? colors.yellow : colors.red;\n  const fileAndNumberColor = colors.bold.cyan;\n  const source = file && fs.existsSync(file) && fs.readFileSync(file, 'utf-8');\n  const frame = source ? codeFrame(source, {\n    start: {\n      line: line,\n      column: character\n    }\n  }, {\n    highlightCode: useColors\n  }).split('\\n').map(str => '  ' + str).join(os.EOL) : '';\n  return [messageColor.bold(`${types[type]} ${severity.toLowerCase()} in `) + fileAndNumberColor(`${file}(${line},${character})`) + messageColor(':'), content + '  ' + messageColor.underline((type === 'lint' ? 'Rule: ' : 'TS') + code), '', frame].join(os.EOL);\n}\n\nmodule.exports = formatter;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-dev-utils/typescriptFormatter.js"],"names":["os","require","codeFrame","codeFrameColumns","chalk","fs","types","diagnostic","lint","formatter","message","useColors","type","severity","file","line","content","code","character","getFile","getType","getSeverity","getLine","getContent","getCode","getCharacter","colors","constructor","enabled","messageColor","isWarningSeverity","yellow","red","fileAndNumberColor","bold","cyan","source","existsSync","readFileSync","frame","start","column","highlightCode","split","map","str","join","EOL","toLowerCase","underline","module","exports"],"mappings":"AAAA;;;;;;AAOA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,mBAAD,CAAP,CAA6BE,gBAA/C;;AACA,MAAMC,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMI,EAAE,GAAGJ,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAMK,KAAK,GAAG;AAAEC,EAAAA,UAAU,EAAE,YAAd;AAA4BC,EAAAA,IAAI,EAAE;AAAlC,CAAd;;AAEA,SAASC,SAAT,CAAmBC,OAAnB,EAA4BC,SAA5B,EAAuC;AACrC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA,IAAxB;AAA8BC,IAAAA,OAA9B;AAAuCC,IAAAA,IAAvC;AAA6CC,IAAAA;AAA7C,MACJ,OAAOR,OAAO,CAACS,OAAf,KAA2B,UAA3B,GACI;AACEP,IAAAA,IAAI,EAAEF,OAAO,CAACU,OAAR,EADR;AAEEP,IAAAA,QAAQ,EAAEH,OAAO,CAACW,WAAR,EAFZ;AAGEP,IAAAA,IAAI,EAAEJ,OAAO,CAACS,OAAR,EAHR;AAIEJ,IAAAA,IAAI,EAAEL,OAAO,CAACY,OAAR,EAJR;AAKEN,IAAAA,OAAO,EAAEN,OAAO,CAACa,UAAR,EALX;AAMEN,IAAAA,IAAI,EAAEP,OAAO,CAACc,OAAR,EANR;AAOEN,IAAAA,SAAS,EAAER,OAAO,CAACe,YAAR;AAPb,GADJ,GAUIf,OAXN;AAaA,QAAMgB,MAAM,GAAG,IAAItB,KAAK,CAACuB,WAAV,CAAsB;AAAEC,IAAAA,OAAO,EAAEjB;AAAX,GAAtB,CAAf;AACA,QAAMkB,YAAY,GAAGnB,OAAO,CAACoB,iBAAR,KAA8BJ,MAAM,CAACK,MAArC,GAA8CL,MAAM,CAACM,GAA1E;AACA,QAAMC,kBAAkB,GAAGP,MAAM,CAACQ,IAAP,CAAYC,IAAvC;AAEA,QAAMC,MAAM,GAAGtB,IAAI,IAAIT,EAAE,CAACgC,UAAH,CAAcvB,IAAd,CAAR,IAA+BT,EAAE,CAACiC,YAAH,CAAgBxB,IAAhB,EAAsB,OAAtB,CAA9C;AACA,QAAMyB,KAAK,GAAGH,MAAM,GAChBlC,SAAS,CACPkC,MADO,EAEP;AAAEI,IAAAA,KAAK,EAAE;AAAEzB,MAAAA,IAAI,EAAEA,IAAR;AAAc0B,MAAAA,MAAM,EAAEvB;AAAtB;AAAT,GAFO,EAGP;AAAEwB,IAAAA,aAAa,EAAE/B;AAAjB,GAHO,CAAT,CAKGgC,KALH,CAKS,IALT,EAMGC,GANH,CAMOC,GAAG,IAAI,OAAOA,GANrB,EAOGC,IAPH,CAOQ9C,EAAE,CAAC+C,GAPX,CADgB,GAShB,EATJ;AAWA,SAAO,CACLlB,YAAY,CAACK,IAAb,CAAmB,GAAE5B,KAAK,CAACM,IAAD,CAAO,IAAGC,QAAQ,CAACmC,WAAT,EAAuB,MAA3D,IACEf,kBAAkB,CAAE,GAAEnB,IAAK,IAAGC,IAAK,IAAGG,SAAU,GAA9B,CADpB,GAEEW,YAAY,CAAC,GAAD,CAHT,EAILb,OAAO,GACL,IADF,GAEEa,YAAY,CAACoB,SAAb,CAAuB,CAACrC,IAAI,KAAK,MAAT,GAAkB,QAAlB,GAA6B,IAA9B,IAAsCK,IAA7D,CANG,EAOL,EAPK,EAQLsB,KARK,EASLO,IATK,CASA9C,EAAE,CAAC+C,GATH,CAAP;AAUD;;AAEDG,MAAM,CAACC,OAAP,GAAiB1C,SAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst os = require('os');\nconst codeFrame = require('@babel/code-frame').codeFrameColumns;\nconst chalk = require('chalk');\nconst fs = require('fs');\n\nconst types = { diagnostic: 'TypeScript', lint: 'TSLint' };\n\nfunction formatter(message, useColors) {\n  const { type, severity, file, line, content, code, character } =\n    typeof message.getFile === 'function'\n      ? {\n          type: message.getType(),\n          severity: message.getSeverity(),\n          file: message.getFile(),\n          line: message.getLine(),\n          content: message.getContent(),\n          code: message.getCode(),\n          character: message.getCharacter(),\n        }\n      : message;\n\n  const colors = new chalk.constructor({ enabled: useColors });\n  const messageColor = message.isWarningSeverity() ? colors.yellow : colors.red;\n  const fileAndNumberColor = colors.bold.cyan;\n\n  const source = file && fs.existsSync(file) && fs.readFileSync(file, 'utf-8');\n  const frame = source\n    ? codeFrame(\n        source,\n        { start: { line: line, column: character } },\n        { highlightCode: useColors }\n      )\n        .split('\\n')\n        .map(str => '  ' + str)\n        .join(os.EOL)\n    : '';\n\n  return [\n    messageColor.bold(`${types[type]} ${severity.toLowerCase()} in `) +\n      fileAndNumberColor(`${file}(${line},${character})`) +\n      messageColor(':'),\n    content +\n      '  ' +\n      messageColor.underline((type === 'lint' ? 'Rule: ' : 'TS') + code),\n    '',\n    frame,\n  ].join(os.EOL);\n}\n\nmodule.exports = formatter;\n"]},"metadata":{},"sourceType":"script"}