{"ast":null,"code":"var assert = require('assert');\n\nvar rgbRegex = require('..');\n\nvar rgbStrings = ['rgb(12,34,56)', 'rgb(255, 255,      255)', 'rgb(1,   1,1)'];\nvar inexactRgbStrings = ['rgb(,,)', 'rGb(12,34,56)', 'rgb(12, 34, 200) ', '   rgb(12,34,56)', 'rgb(1,2,)'];\ndescribe('rgb-regex', function () {\n  describe('exact: true', function () {\n    it('should return a regex that matches exact rgb strings', function () {\n      rgbStrings.forEach(function (rgb) {\n        assert.ok(rgbRegex({\n          exact: true\n        }).test(rgb));\n      });\n    });\n    it('should return a regex that does not match invalid rgb strings', function () {\n      inexactRgbStrings.forEach(function (invalidRgb) {\n        assert.ok(!rgbRegex({\n          exact: true\n        }).test(invalidRgb));\n      });\n    });\n  });\n  describe('g', function () {\n    it('should match rgb strings', function () {\n      assert.deepEqual(rgbStrings.join('foobar').match(rgbRegex()), rgbStrings);\n    });\n    it('should not match non rgb strings', function () {\n      assert.deepEqual(inexactRgbStrings.join('foobar').match(rgbRegex()), ['rGb(12,34,56)', 'rgb(12, 34, 200)', 'rgb(12,34,56)']);\n    });\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/rgb-regex/test/test.js"],"names":["assert","require","rgbRegex","rgbStrings","inexactRgbStrings","describe","it","forEach","rgb","ok","exact","test","invalidRgb","deepEqual","join","match"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,IAAD,CAAtB;;AAEA,IAAIE,UAAU,GAAG,CACf,eADe,EAEf,yBAFe,EAGf,eAHe,CAAjB;AAMA,IAAIC,iBAAiB,GAAG,CACtB,SADsB,EAEtB,eAFsB,EAGtB,mBAHsB,EAItB,kBAJsB,EAKtB,WALsB,CAAxB;AAQAC,QAAQ,CAAC,WAAD,EAAc,YAAW;AAE/BA,EAAAA,QAAQ,CAAC,aAAD,EAAgB,YAAW;AAEjCC,IAAAA,EAAE,CAAC,sDAAD,EAAyD,YAAW;AACpEH,MAAAA,UAAU,CAACI,OAAX,CAAmB,UAASC,GAAT,EAAc;AAC/BR,QAAAA,MAAM,CAACS,EAAP,CAAUP,QAAQ,CAAC;AAAEQ,UAAAA,KAAK,EAAE;AAAT,SAAD,CAAR,CAA0BC,IAA1B,CAA+BH,GAA/B,CAAV;AACD,OAFD;AAGD,KAJC,CAAF;AAMAF,IAAAA,EAAE,CAAC,+DAAD,EAAkE,YAAW;AAC7EF,MAAAA,iBAAiB,CAACG,OAAlB,CAA0B,UAASK,UAAT,EAAqB;AAC7CZ,QAAAA,MAAM,CAACS,EAAP,CAAU,CAACP,QAAQ,CAAC;AAAEQ,UAAAA,KAAK,EAAE;AAAT,SAAD,CAAR,CAA0BC,IAA1B,CAA+BC,UAA/B,CAAX;AACD,OAFD;AAGD,KAJC,CAAF;AAKD,GAbO,CAAR;AAeAP,EAAAA,QAAQ,CAAC,GAAD,EAAM,YAAW;AAEvBC,IAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAW;AACxCN,MAAAA,MAAM,CAACa,SAAP,CACEV,UAAU,CAACW,IAAX,CAAgB,QAAhB,EAA0BC,KAA1B,CAAgCb,QAAQ,EAAxC,CADF,EAEEC,UAFF;AAID,KALC,CAAF;AAOAG,IAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAW;AAChDN,MAAAA,MAAM,CAACa,SAAP,CACET,iBAAiB,CAACU,IAAlB,CAAuB,QAAvB,EAAiCC,KAAjC,CAAuCb,QAAQ,EAA/C,CADF,EAEE,CAAC,eAAD,EAAkB,kBAAlB,EAAsC,eAAtC,CAFF;AAID,KALC,CAAF;AAMD,GAfO,CAAR;AAgBD,CAjCO,CAAR","sourcesContent":["var assert = require('assert');\nvar rgbRegex = require('..');\n\nvar rgbStrings = [\n  'rgb(12,34,56)',\n  'rgb(255, 255,      255)',\n  'rgb(1,   1,1)'\n];\n\nvar inexactRgbStrings = [\n  'rgb(,,)',\n  'rGb(12,34,56)',\n  'rgb(12, 34, 200) ',\n  '   rgb(12,34,56)',\n  'rgb(1,2,)'\n];\n\ndescribe('rgb-regex', function() {\n\n  describe('exact: true', function() {\n\n    it('should return a regex that matches exact rgb strings', function() {\n      rgbStrings.forEach(function(rgb) {\n        assert.ok(rgbRegex({ exact: true }).test(rgb));\n      });\n    });\n\n    it('should return a regex that does not match invalid rgb strings', function() {\n      inexactRgbStrings.forEach(function(invalidRgb) {\n        assert.ok(!rgbRegex({ exact: true }).test(invalidRgb));\n      });\n    });\n  });\n\n  describe('g', function() {\n\n    it('should match rgb strings', function() {\n      assert.deepEqual(\n        rgbStrings.join('foobar').match(rgbRegex()),\n        rgbStrings\n      )\n    });\n\n    it('should not match non rgb strings', function() {\n      assert.deepEqual(\n        inexactRgbStrings.join('foobar').match(rgbRegex()),\n        ['rGb(12,34,56)', 'rgb(12, 34, 200)', 'rgb(12,34,56)']\n      );\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"script"}