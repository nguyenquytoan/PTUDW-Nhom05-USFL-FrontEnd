{"ast":null,"code":"'use strict';\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _realpathNative() {\n  const data = require('realpath-native');\n\n  _realpathNative = function _realpathNative() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _nodeModulesPaths = _interopRequireDefault(require('./nodeModulesPaths'));\n\nvar _isBuiltinModule = _interopRequireDefault(require('./isBuiltinModule'));\n\nvar _defaultResolver = _interopRequireWildcard(require('./defaultResolver'));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst NATIVE_PLATFORM = 'native'; // We might be inside a symlink.\n\nconst cwd = process.cwd();\nconst resolvedCwd = (0, _realpathNative().sync)(cwd) || cwd;\nconst NODE_PATH = process.env.NODE_PATH;\nconst nodePaths = NODE_PATH ? NODE_PATH.split(_path().default.delimiter).filter(Boolean) // The resolver expects absolute paths.\n.map(p => _path().default.resolve(resolvedCwd, p)) : undefined;\n/* eslint-disable-next-line no-redeclare */\n\nclass Resolver {\n  constructor(moduleMap, options) {\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_moduleMap', void 0);\n\n    _defineProperty(this, '_moduleIDCache', void 0);\n\n    _defineProperty(this, '_moduleNameCache', void 0);\n\n    _defineProperty(this, '_modulePathCache', void 0);\n\n    _defineProperty(this, '_supportsNativePlatform', void 0);\n\n    this._options = {\n      browser: options.browser,\n      defaultPlatform: options.defaultPlatform,\n      extensions: options.extensions,\n      hasCoreModules: options.hasCoreModules === undefined ? true : options.hasCoreModules,\n      moduleDirectories: options.moduleDirectories || ['node_modules'],\n      moduleNameMapper: options.moduleNameMapper,\n      modulePaths: options.modulePaths,\n      platforms: options.platforms,\n      resolver: options.resolver,\n      rootDir: options.rootDir\n    };\n    this._supportsNativePlatform = options.platforms ? options.platforms.includes(NATIVE_PLATFORM) : false;\n    this._moduleMap = moduleMap;\n    this._moduleIDCache = new Map();\n    this._moduleNameCache = new Map();\n    this._modulePathCache = new Map();\n  }\n\n  static clearDefaultResolverCache() {\n    (0, _defaultResolver.clearDefaultResolverCache)();\n  }\n\n  static findNodeModule(path, options) {\n    const resolver = options.resolver ? require(options.resolver) : _defaultResolver.default;\n    const paths = options.paths;\n\n    try {\n      return resolver(path, {\n        basedir: options.basedir,\n        browser: options.browser,\n        defaultResolver: _defaultResolver.default,\n        extensions: options.extensions,\n        moduleDirectory: options.moduleDirectory,\n        paths: paths ? (nodePaths || []).concat(paths) : nodePaths,\n        rootDir: options.rootDir\n      });\n    } catch (e) {}\n\n    return null;\n  }\n\n  resolveModuleFromDirIfExists(dirname, moduleName, options) {\n    const paths = options && options.paths || this._options.modulePaths;\n    const moduleDirectory = this._options.moduleDirectories;\n    const key = dirname + _path().default.delimiter + moduleName;\n    const defaultPlatform = this._options.defaultPlatform;\n\n    const extensions = this._options.extensions.slice();\n\n    let module;\n\n    if (this._supportsNativePlatform) {\n      extensions.unshift(...this._options.extensions.map(ext => '.' + NATIVE_PLATFORM + ext));\n    }\n\n    if (defaultPlatform) {\n      extensions.unshift(...this._options.extensions.map(ext => '.' + defaultPlatform + ext));\n    } // 1. If we have already resolved this module for this directory name,\n    // return a value from the cache.\n\n\n    const cacheResult = this._moduleNameCache.get(key);\n\n    if (cacheResult) {\n      return cacheResult;\n    } // 2. Check if the module is a haste module.\n\n\n    module = this.getModule(moduleName);\n\n    if (module) {\n      this._moduleNameCache.set(key, module);\n\n      return module;\n    } // 3. Check if the module is a node module and resolve it based on\n    // the node module resolution algorithm. If skipNodeResolution is given we\n    // ignore all modules that look like node modules (ie. are not relative\n    // requires). This enables us to speed up resolution when we build a\n    // dependency graph because we don't have to look at modules that may not\n    // exist and aren't mocked.\n\n\n    const skipResolution = options && options.skipNodeResolution && !moduleName.includes(_path().default.sep);\n\n    const resolveNodeModule = name => Resolver.findNodeModule(name, {\n      basedir: dirname,\n      browser: this._options.browser,\n      extensions,\n      moduleDirectory,\n      paths,\n      resolver: this._options.resolver,\n      rootDir: this._options.rootDir\n    });\n\n    if (!skipResolution) {\n      module = resolveNodeModule(moduleName);\n\n      if (module) {\n        this._moduleNameCache.set(key, module);\n\n        return module;\n      }\n    } // 4. Resolve \"haste packages\" which are `package.json` files outside of\n    // `node_modules` folders anywhere in the file system.\n\n\n    const parts = moduleName.split('/');\n    const hastePackage = this.getPackage(parts.shift());\n\n    if (hastePackage) {\n      try {\n        const module = _path().default.join.apply(_path().default, [_path().default.dirname(hastePackage)].concat(parts)); // try resolving with custom resolver first to support extensions,\n        // then fallback to require.resolve\n\n\n        const resolvedModule = resolveNodeModule(module) || require.resolve(module);\n\n        this._moduleNameCache.set(key, resolvedModule);\n\n        return resolvedModule;\n      } catch (ignoredError) {}\n    }\n\n    return null;\n  }\n\n  resolveModule(from, moduleName, options) {\n    const dirname = _path().default.dirname(from);\n\n    const module = this.resolveStubModuleName(from, moduleName) || this.resolveModuleFromDirIfExists(dirname, moduleName, options);\n    if (module) return module; // 5. Throw an error if the module could not be found. `resolve.sync` only\n    // produces an error based on the dirname but we have the actual current\n    // module name available.\n\n    const relativePath = _path().default.relative(dirname, from);\n\n    const err = new Error(`Cannot find module '${moduleName}' from '${relativePath || '.'}'`);\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  }\n\n  isCoreModule(moduleName) {\n    return this._options.hasCoreModules && (0, _isBuiltinModule.default)(moduleName);\n  }\n\n  getModule(name) {\n    return this._moduleMap.getModule(name, this._options.defaultPlatform, this._supportsNativePlatform);\n  }\n\n  getModulePath(from, moduleName) {\n    if (moduleName[0] !== '.' || _path().default.isAbsolute(moduleName)) {\n      return moduleName;\n    }\n\n    return _path().default.normalize(_path().default.dirname(from) + '/' + moduleName);\n  }\n\n  getPackage(name) {\n    return this._moduleMap.getPackage(name, this._options.defaultPlatform, this._supportsNativePlatform);\n  }\n\n  getMockModule(from, name) {\n    const mock = this._moduleMap.getMockModule(name);\n\n    if (mock) {\n      return mock;\n    } else {\n      const moduleName = this.resolveStubModuleName(from, name);\n\n      if (moduleName) {\n        return this.getModule(moduleName) || moduleName;\n      }\n    }\n\n    return null;\n  }\n\n  getModulePaths(from) {\n    const cachedModule = this._modulePathCache.get(from);\n\n    if (cachedModule) {\n      return cachedModule;\n    }\n\n    const moduleDirectory = this._options.moduleDirectories;\n    const paths = (0, _nodeModulesPaths.default)(from, {\n      moduleDirectory\n    });\n\n    if (paths[paths.length - 1] === undefined) {\n      // circumvent node-resolve bug that adds `undefined` as last item.\n      paths.pop();\n    }\n\n    this._modulePathCache.set(from, paths);\n\n    return paths;\n  }\n\n  getModuleID(virtualMocks, from, _moduleName) {\n    const moduleName = _moduleName || '';\n    const key = from + _path().default.delimiter + moduleName;\n\n    const cachedModuleID = this._moduleIDCache.get(key);\n\n    if (cachedModuleID) {\n      return cachedModuleID;\n    }\n\n    const moduleType = this._getModuleType(moduleName);\n\n    const absolutePath = this._getAbsolutePath(virtualMocks, from, moduleName);\n\n    const mockPath = this._getMockPath(from, moduleName);\n\n    const sep = _path().default.delimiter;\n\n    const id = moduleType + sep + (absolutePath ? absolutePath + sep : '') + (mockPath ? mockPath + sep : '');\n\n    this._moduleIDCache.set(key, id);\n\n    return id;\n  }\n\n  _getModuleType(moduleName) {\n    return this.isCoreModule(moduleName) ? 'node' : 'user';\n  }\n\n  _getAbsolutePath(virtualMocks, from, moduleName) {\n    if (this.isCoreModule(moduleName)) {\n      return moduleName;\n    }\n\n    return this._isModuleResolved(from, moduleName) ? this.getModule(moduleName) : this._getVirtualMockPath(virtualMocks, from, moduleName);\n  }\n\n  _getMockPath(from, moduleName) {\n    return !this.isCoreModule(moduleName) ? this.getMockModule(from, moduleName) : null;\n  }\n\n  _getVirtualMockPath(virtualMocks, from, moduleName) {\n    const virtualMockPath = this.getModulePath(from, moduleName);\n    return virtualMocks[virtualMockPath] ? virtualMockPath : moduleName ? this.resolveModule(from, moduleName) : from;\n  }\n\n  _isModuleResolved(from, moduleName) {\n    return !!(this.getModule(moduleName) || this.getMockModule(from, moduleName));\n  }\n\n  resolveStubModuleName(from, moduleName) {\n    const dirname = _path().default.dirname(from);\n\n    const paths = this._options.modulePaths;\n\n    const extensions = this._options.extensions.slice();\n\n    const moduleDirectory = this._options.moduleDirectories;\n    const moduleNameMapper = this._options.moduleNameMapper;\n    const resolver = this._options.resolver;\n    const defaultPlatform = this._options.defaultPlatform;\n\n    if (this._supportsNativePlatform) {\n      extensions.unshift(...this._options.extensions.map(ext => '.' + NATIVE_PLATFORM + ext));\n    }\n\n    if (defaultPlatform) {\n      extensions.unshift(...this._options.extensions.map(ext => '.' + defaultPlatform + ext));\n    }\n\n    if (moduleNameMapper) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = moduleNameMapper[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          const _step$value = _step.value,\n                mappedModuleName = _step$value.moduleName,\n                regex = _step$value.regex;\n\n          if (regex.test(moduleName)) {\n            // Note: once a moduleNameMapper matches the name, it must result\n            // in a module, or else an error is thrown.\n            const matches = moduleName.match(regex);\n            const updatedName = matches ? mappedModuleName.replace(/\\$([0-9]+)/g, (_, index) => matches[parseInt(index, 10)]) : mappedModuleName;\n            const module = this.getModule(updatedName) || Resolver.findNodeModule(updatedName, {\n              basedir: dirname,\n              browser: this._options.browser,\n              extensions,\n              moduleDirectory,\n              paths,\n              resolver,\n              rootDir: this._options.rootDir\n            });\n\n            if (!module) {\n              throw createNoMappedModuleFoundError(moduleName, updatedName, mappedModuleName, regex, resolver);\n            }\n\n            return module;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n}\n\nconst createNoMappedModuleFoundError = (moduleName, updatedName, mappedModuleName, regex, resolver) => {\n  const error = new Error(_chalk().default.red(`${_chalk().default.bold('Configuration error')}:\n\nCould not locate module ${_chalk().default.bold(moduleName)} mapped as:\n${_chalk().default.bold(updatedName)}.\n\nPlease check your configuration for these entries:\n{\n  \"moduleNameMapper\": {\n    \"${regex.toString()}\": \"${_chalk().default.bold(mappedModuleName)}\"\n  },\n  \"resolver\": ${_chalk().default.bold(String(resolver))}\n}`));\n  error.name = '';\n  return error;\n};\n\nmodule.exports = Resolver;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-resolve/build/index.js"],"names":["_path","data","_interopRequireDefault","require","_realpathNative","_chalk","_nodeModulesPaths","_isBuiltinModule","_defaultResolver","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","desc","defineProperty","getOwnPropertyDescriptor","get","set","default","_defineProperty","value","enumerable","configurable","writable","NATIVE_PLATFORM","cwd","process","resolvedCwd","sync","NODE_PATH","env","nodePaths","split","delimiter","filter","Boolean","map","p","resolve","undefined","Resolver","constructor","moduleMap","options","_options","browser","defaultPlatform","extensions","hasCoreModules","moduleDirectories","moduleNameMapper","modulePaths","platforms","resolver","rootDir","_supportsNativePlatform","includes","_moduleMap","_moduleIDCache","Map","_moduleNameCache","_modulePathCache","clearDefaultResolverCache","findNodeModule","path","paths","basedir","defaultResolver","moduleDirectory","concat","e","resolveModuleFromDirIfExists","dirname","moduleName","slice","module","unshift","ext","cacheResult","getModule","skipResolution","skipNodeResolution","sep","resolveNodeModule","name","parts","hastePackage","getPackage","shift","join","apply","resolvedModule","ignoredError","resolveModule","from","resolveStubModuleName","relativePath","relative","err","Error","code","isCoreModule","getModulePath","isAbsolute","normalize","getMockModule","mock","getModulePaths","cachedModule","length","pop","getModuleID","virtualMocks","_moduleName","cachedModuleID","moduleType","_getModuleType","absolutePath","_getAbsolutePath","mockPath","_getMockPath","id","_isModuleResolved","_getVirtualMockPath","virtualMockPath","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","next","done","_step$value","mappedModuleName","regex","test","matches","match","updatedName","replace","_","index","parseInt","createNoMappedModuleFoundError","return","error","red","bold","toString","String","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _realpathNative() {\n  const data = require('realpath-native');\n\n  _realpathNative = function _realpathNative() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _nodeModulesPaths = _interopRequireDefault(require('./nodeModulesPaths'));\n\nvar _isBuiltinModule = _interopRequireDefault(require('./isBuiltinModule'));\n\nvar _defaultResolver = _interopRequireWildcard(require('./defaultResolver'));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc =\n            Object.defineProperty && Object.getOwnPropertyDescriptor\n              ? Object.getOwnPropertyDescriptor(obj, key)\n              : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nconst NATIVE_PLATFORM = 'native'; // We might be inside a symlink.\n\nconst cwd = process.cwd();\nconst resolvedCwd = (0, _realpathNative().sync)(cwd) || cwd;\nconst NODE_PATH = process.env.NODE_PATH;\nconst nodePaths = NODE_PATH\n  ? NODE_PATH.split(_path().default.delimiter)\n      .filter(Boolean) // The resolver expects absolute paths.\n      .map(p => _path().default.resolve(resolvedCwd, p))\n  : undefined;\n/* eslint-disable-next-line no-redeclare */\n\nclass Resolver {\n  constructor(moduleMap, options) {\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_moduleMap', void 0);\n\n    _defineProperty(this, '_moduleIDCache', void 0);\n\n    _defineProperty(this, '_moduleNameCache', void 0);\n\n    _defineProperty(this, '_modulePathCache', void 0);\n\n    _defineProperty(this, '_supportsNativePlatform', void 0);\n\n    this._options = {\n      browser: options.browser,\n      defaultPlatform: options.defaultPlatform,\n      extensions: options.extensions,\n      hasCoreModules:\n        options.hasCoreModules === undefined ? true : options.hasCoreModules,\n      moduleDirectories: options.moduleDirectories || ['node_modules'],\n      moduleNameMapper: options.moduleNameMapper,\n      modulePaths: options.modulePaths,\n      platforms: options.platforms,\n      resolver: options.resolver,\n      rootDir: options.rootDir\n    };\n    this._supportsNativePlatform = options.platforms\n      ? options.platforms.includes(NATIVE_PLATFORM)\n      : false;\n    this._moduleMap = moduleMap;\n    this._moduleIDCache = new Map();\n    this._moduleNameCache = new Map();\n    this._modulePathCache = new Map();\n  }\n\n  static clearDefaultResolverCache() {\n    (0, _defaultResolver.clearDefaultResolverCache)();\n  }\n\n  static findNodeModule(path, options) {\n    const resolver = options.resolver\n      ? require(options.resolver)\n      : _defaultResolver.default;\n    const paths = options.paths;\n\n    try {\n      return resolver(path, {\n        basedir: options.basedir,\n        browser: options.browser,\n        defaultResolver: _defaultResolver.default,\n        extensions: options.extensions,\n        moduleDirectory: options.moduleDirectory,\n        paths: paths ? (nodePaths || []).concat(paths) : nodePaths,\n        rootDir: options.rootDir\n      });\n    } catch (e) {}\n\n    return null;\n  }\n\n  resolveModuleFromDirIfExists(dirname, moduleName, options) {\n    const paths = (options && options.paths) || this._options.modulePaths;\n    const moduleDirectory = this._options.moduleDirectories;\n    const key = dirname + _path().default.delimiter + moduleName;\n    const defaultPlatform = this._options.defaultPlatform;\n\n    const extensions = this._options.extensions.slice();\n\n    let module;\n\n    if (this._supportsNativePlatform) {\n      extensions.unshift(\n        ...this._options.extensions.map(ext => '.' + NATIVE_PLATFORM + ext)\n      );\n    }\n\n    if (defaultPlatform) {\n      extensions.unshift(\n        ...this._options.extensions.map(ext => '.' + defaultPlatform + ext)\n      );\n    } // 1. If we have already resolved this module for this directory name,\n    // return a value from the cache.\n\n    const cacheResult = this._moduleNameCache.get(key);\n\n    if (cacheResult) {\n      return cacheResult;\n    } // 2. Check if the module is a haste module.\n\n    module = this.getModule(moduleName);\n\n    if (module) {\n      this._moduleNameCache.set(key, module);\n\n      return module;\n    } // 3. Check if the module is a node module and resolve it based on\n    // the node module resolution algorithm. If skipNodeResolution is given we\n    // ignore all modules that look like node modules (ie. are not relative\n    // requires). This enables us to speed up resolution when we build a\n    // dependency graph because we don't have to look at modules that may not\n    // exist and aren't mocked.\n\n    const skipResolution =\n      options &&\n      options.skipNodeResolution &&\n      !moduleName.includes(_path().default.sep);\n\n    const resolveNodeModule = name =>\n      Resolver.findNodeModule(name, {\n        basedir: dirname,\n        browser: this._options.browser,\n        extensions,\n        moduleDirectory,\n        paths,\n        resolver: this._options.resolver,\n        rootDir: this._options.rootDir\n      });\n\n    if (!skipResolution) {\n      module = resolveNodeModule(moduleName);\n\n      if (module) {\n        this._moduleNameCache.set(key, module);\n\n        return module;\n      }\n    } // 4. Resolve \"haste packages\" which are `package.json` files outside of\n    // `node_modules` folders anywhere in the file system.\n\n    const parts = moduleName.split('/');\n    const hastePackage = this.getPackage(parts.shift());\n\n    if (hastePackage) {\n      try {\n        const module = _path().default.join.apply(\n          _path().default,\n          [_path().default.dirname(hastePackage)].concat(parts)\n        ); // try resolving with custom resolver first to support extensions,\n        // then fallback to require.resolve\n\n        const resolvedModule =\n          resolveNodeModule(module) || require.resolve(module);\n\n        this._moduleNameCache.set(key, resolvedModule);\n\n        return resolvedModule;\n      } catch (ignoredError) {}\n    }\n\n    return null;\n  }\n\n  resolveModule(from, moduleName, options) {\n    const dirname = _path().default.dirname(from);\n\n    const module =\n      this.resolveStubModuleName(from, moduleName) ||\n      this.resolveModuleFromDirIfExists(dirname, moduleName, options);\n    if (module) return module; // 5. Throw an error if the module could not be found. `resolve.sync` only\n    // produces an error based on the dirname but we have the actual current\n    // module name available.\n\n    const relativePath = _path().default.relative(dirname, from);\n\n    const err = new Error(\n      `Cannot find module '${moduleName}' from '${relativePath || '.'}'`\n    );\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  }\n\n  isCoreModule(moduleName) {\n    return (\n      this._options.hasCoreModules && (0, _isBuiltinModule.default)(moduleName)\n    );\n  }\n\n  getModule(name) {\n    return this._moduleMap.getModule(\n      name,\n      this._options.defaultPlatform,\n      this._supportsNativePlatform\n    );\n  }\n\n  getModulePath(from, moduleName) {\n    if (moduleName[0] !== '.' || _path().default.isAbsolute(moduleName)) {\n      return moduleName;\n    }\n\n    return _path().default.normalize(\n      _path().default.dirname(from) + '/' + moduleName\n    );\n  }\n\n  getPackage(name) {\n    return this._moduleMap.getPackage(\n      name,\n      this._options.defaultPlatform,\n      this._supportsNativePlatform\n    );\n  }\n\n  getMockModule(from, name) {\n    const mock = this._moduleMap.getMockModule(name);\n\n    if (mock) {\n      return mock;\n    } else {\n      const moduleName = this.resolveStubModuleName(from, name);\n\n      if (moduleName) {\n        return this.getModule(moduleName) || moduleName;\n      }\n    }\n\n    return null;\n  }\n\n  getModulePaths(from) {\n    const cachedModule = this._modulePathCache.get(from);\n\n    if (cachedModule) {\n      return cachedModule;\n    }\n\n    const moduleDirectory = this._options.moduleDirectories;\n    const paths = (0, _nodeModulesPaths.default)(from, {\n      moduleDirectory\n    });\n\n    if (paths[paths.length - 1] === undefined) {\n      // circumvent node-resolve bug that adds `undefined` as last item.\n      paths.pop();\n    }\n\n    this._modulePathCache.set(from, paths);\n\n    return paths;\n  }\n\n  getModuleID(virtualMocks, from, _moduleName) {\n    const moduleName = _moduleName || '';\n    const key = from + _path().default.delimiter + moduleName;\n\n    const cachedModuleID = this._moduleIDCache.get(key);\n\n    if (cachedModuleID) {\n      return cachedModuleID;\n    }\n\n    const moduleType = this._getModuleType(moduleName);\n\n    const absolutePath = this._getAbsolutePath(virtualMocks, from, moduleName);\n\n    const mockPath = this._getMockPath(from, moduleName);\n\n    const sep = _path().default.delimiter;\n\n    const id =\n      moduleType +\n      sep +\n      (absolutePath ? absolutePath + sep : '') +\n      (mockPath ? mockPath + sep : '');\n\n    this._moduleIDCache.set(key, id);\n\n    return id;\n  }\n\n  _getModuleType(moduleName) {\n    return this.isCoreModule(moduleName) ? 'node' : 'user';\n  }\n\n  _getAbsolutePath(virtualMocks, from, moduleName) {\n    if (this.isCoreModule(moduleName)) {\n      return moduleName;\n    }\n\n    return this._isModuleResolved(from, moduleName)\n      ? this.getModule(moduleName)\n      : this._getVirtualMockPath(virtualMocks, from, moduleName);\n  }\n\n  _getMockPath(from, moduleName) {\n    return !this.isCoreModule(moduleName)\n      ? this.getMockModule(from, moduleName)\n      : null;\n  }\n\n  _getVirtualMockPath(virtualMocks, from, moduleName) {\n    const virtualMockPath = this.getModulePath(from, moduleName);\n    return virtualMocks[virtualMockPath]\n      ? virtualMockPath\n      : moduleName\n      ? this.resolveModule(from, moduleName)\n      : from;\n  }\n\n  _isModuleResolved(from, moduleName) {\n    return !!(\n      this.getModule(moduleName) || this.getMockModule(from, moduleName)\n    );\n  }\n\n  resolveStubModuleName(from, moduleName) {\n    const dirname = _path().default.dirname(from);\n\n    const paths = this._options.modulePaths;\n\n    const extensions = this._options.extensions.slice();\n\n    const moduleDirectory = this._options.moduleDirectories;\n    const moduleNameMapper = this._options.moduleNameMapper;\n    const resolver = this._options.resolver;\n    const defaultPlatform = this._options.defaultPlatform;\n\n    if (this._supportsNativePlatform) {\n      extensions.unshift(\n        ...this._options.extensions.map(ext => '.' + NATIVE_PLATFORM + ext)\n      );\n    }\n\n    if (defaultPlatform) {\n      extensions.unshift(\n        ...this._options.extensions.map(ext => '.' + defaultPlatform + ext)\n      );\n    }\n\n    if (moduleNameMapper) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (\n          var _iterator = moduleNameMapper[Symbol.iterator](), _step;\n          !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n          _iteratorNormalCompletion = true\n        ) {\n          const _step$value = _step.value,\n            mappedModuleName = _step$value.moduleName,\n            regex = _step$value.regex;\n\n          if (regex.test(moduleName)) {\n            // Note: once a moduleNameMapper matches the name, it must result\n            // in a module, or else an error is thrown.\n            const matches = moduleName.match(regex);\n            const updatedName = matches\n              ? mappedModuleName.replace(\n                  /\\$([0-9]+)/g,\n                  (_, index) => matches[parseInt(index, 10)]\n                )\n              : mappedModuleName;\n            const module =\n              this.getModule(updatedName) ||\n              Resolver.findNodeModule(updatedName, {\n                basedir: dirname,\n                browser: this._options.browser,\n                extensions,\n                moduleDirectory,\n                paths,\n                resolver,\n                rootDir: this._options.rootDir\n              });\n\n            if (!module) {\n              throw createNoMappedModuleFoundError(\n                moduleName,\n                updatedName,\n                mappedModuleName,\n                regex,\n                resolver\n              );\n            }\n\n            return module;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n}\n\nconst createNoMappedModuleFoundError = (\n  moduleName,\n  updatedName,\n  mappedModuleName,\n  regex,\n  resolver\n) => {\n  const error = new Error(\n    _chalk().default.red(`${_chalk().default.bold('Configuration error')}:\n\nCould not locate module ${_chalk().default.bold(moduleName)} mapped as:\n${_chalk().default.bold(updatedName)}.\n\nPlease check your configuration for these entries:\n{\n  \"moduleNameMapper\": {\n    \"${regex.toString()}\": \"${_chalk().default.bold(mappedModuleName)}\"\n  },\n  \"resolver\": ${_chalk().default.bold(String(resolver))}\n}`)\n  );\n  error.name = '';\n  return error;\n};\n\nmodule.exports = Resolver;\n"]},"metadata":{},"sourceType":"script"}