{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar commentRx = /^[ \\t]*(?:\\/\\/|\\/\\*)[@#][ \\t]+sourceMappingURL=data:(?:application|text)\\/json;base64,(.+)(?:\\*\\/)?/mg;\nvar mapFileCommentRx = // //# sourceMappingURL=foo.js.map                       /*# sourceMappingURL=foo.js.map */\n/(?:^[ \\t]*\\/\\/[@|#][ \\t]+sourceMappingURL=(.+?)[ \\t]*$)|(?:^[ \\t]*\\/\\*[@#][ \\t]+sourceMappingURL=(.+?)[ \\t]*\\*\\/[ \\t]*$)/mg;\n\nfunction decodeBase64(base64) {\n  return new Buffer(base64, 'base64').toString();\n}\n\nfunction stripComment(sm) {\n  return sm.split(',').pop();\n}\n\nfunction readFromFileMap(sm, dir) {\n  // NOTE: this will only work on the server since it attempts to read the map file\n  var r = mapFileCommentRx.exec(sm);\n  mapFileCommentRx.lastIndex = 0; // for some odd reason //# .. captures in 1 and /* .. */ in 2\n\n  var filename = r[1] || r[2];\n  var filepath = path.join(dir, filename);\n\n  try {\n    return fs.readFileSync(filepath, 'utf8');\n  } catch (e) {\n    throw new Error('An error occurred while trying to read the map file at ' + filepath + '\\n' + e);\n  }\n}\n\nfunction Converter(sm, opts) {\n  opts = opts || {};\n\n  try {\n    if (opts.isFileComment) sm = readFromFileMap(sm, opts.commentFileDir);\n    if (opts.hasComment) sm = stripComment(sm);\n    if (opts.isEncoded) sm = decodeBase64(sm);\n    if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);\n    this.sourcemap = sm;\n  } catch (e) {\n    console.error(e);\n    return null;\n  }\n}\n\nConverter.prototype.toJSON = function (space) {\n  return JSON.stringify(this.sourcemap, null, space);\n};\n\nConverter.prototype.toBase64 = function () {\n  var json = this.toJSON();\n  return new Buffer(json).toString('base64');\n};\n\nConverter.prototype.toComment = function () {\n  var base64 = this.toBase64();\n  return '//# sourceMappingURL=data:application/json;base64,' + base64;\n}; // returns copy instead of original\n\n\nConverter.prototype.toObject = function () {\n  return JSON.parse(this.toJSON());\n};\n\nConverter.prototype.addProperty = function (key, value) {\n  if (this.sourcemap.hasOwnProperty(key)) throw new Error('property %s already exists on the sourcemap, use set property instead');\n  return this.setProperty(key, value);\n};\n\nConverter.prototype.setProperty = function (key, value) {\n  this.sourcemap[key] = value;\n  return this;\n};\n\nConverter.prototype.getProperty = function (key) {\n  return this.sourcemap[key];\n};\n\nexports.fromObject = function (obj) {\n  return new Converter(obj);\n};\n\nexports.fromJSON = function (json) {\n  return new Converter(json, {\n    isJSON: true\n  });\n};\n\nexports.fromBase64 = function (base64) {\n  return new Converter(base64, {\n    isEncoded: true\n  });\n};\n\nexports.fromComment = function (comment) {\n  comment = comment.replace(/^\\/\\*/g, '//').replace(/\\*\\/$/g, '');\n  return new Converter(comment, {\n    isEncoded: true,\n    hasComment: true\n  });\n};\n\nexports.fromMapFileComment = function (comment, dir) {\n  return new Converter(comment, {\n    commentFileDir: dir,\n    isFileComment: true,\n    isJSON: true\n  });\n}; // Finds last sourcemap comment in file or returns null if none was found\n\n\nexports.fromSource = function (content) {\n  var m = content.match(commentRx);\n  commentRx.lastIndex = 0;\n  return m ? exports.fromComment(m.pop()) : null;\n}; // Finds last sourcemap comment in file or returns null if none was found\n\n\nexports.fromMapFileSource = function (content, dir) {\n  var m = content.match(mapFileCommentRx);\n  mapFileCommentRx.lastIndex = 0;\n  return m ? exports.fromMapFileComment(m.pop(), dir) : null;\n};\n\nexports.removeComments = function (src) {\n  commentRx.lastIndex = 0;\n  return src.replace(commentRx, '');\n};\n\nexports.removeMapFileComments = function (src) {\n  mapFileCommentRx.lastIndex = 0;\n  return src.replace(mapFileCommentRx, '');\n};\n\nexports.__defineGetter__('commentRegex', function () {\n  commentRx.lastIndex = 0;\n  return commentRx;\n});\n\nexports.__defineGetter__('mapFileCommentRegex', function () {\n  mapFileCommentRx.lastIndex = 0;\n  return mapFileCommentRx;\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/rework/node_modules/convert-source-map/index.js"],"names":["fs","require","path","commentRx","mapFileCommentRx","decodeBase64","base64","Buffer","toString","stripComment","sm","split","pop","readFromFileMap","dir","r","exec","lastIndex","filename","filepath","join","readFileSync","e","Error","Converter","opts","isFileComment","commentFileDir","hasComment","isEncoded","isJSON","JSON","parse","sourcemap","console","error","prototype","toJSON","space","stringify","toBase64","json","toComment","toObject","addProperty","key","value","hasOwnProperty","setProperty","getProperty","exports","fromObject","obj","fromJSON","fromBase64","fromComment","comment","replace","fromMapFileComment","fromSource","content","m","match","fromMapFileSource","removeComments","src","removeMapFileComments","__defineGetter__"],"mappings":"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","sourcesContent":["'use strict';\nvar fs = require('fs');\nvar path = require('path');\n\nvar commentRx = /^[ \\t]*(?:\\/\\/|\\/\\*)[@#][ \\t]+sourceMappingURL=data:(?:application|text)\\/json;base64,(.+)(?:\\*\\/)?/mg;\nvar mapFileCommentRx =\n  // //# sourceMappingURL=foo.js.map                       /*# sourceMappingURL=foo.js.map */\n  /(?:^[ \\t]*\\/\\/[@|#][ \\t]+sourceMappingURL=(.+?)[ \\t]*$)|(?:^[ \\t]*\\/\\*[@#][ \\t]+sourceMappingURL=(.+?)[ \\t]*\\*\\/[ \\t]*$)/mg\n\nfunction decodeBase64(base64) {\n  return new Buffer(base64, 'base64').toString();\n}\n\nfunction stripComment(sm) {\n  return sm.split(',').pop();\n}\n\nfunction readFromFileMap(sm, dir) {\n  // NOTE: this will only work on the server since it attempts to read the map file\n\n  var r = mapFileCommentRx.exec(sm);\n  mapFileCommentRx.lastIndex = 0;\n  \n  // for some odd reason //# .. captures in 1 and /* .. */ in 2\n  var filename = r[1] || r[2];\n  var filepath = path.join(dir, filename);\n\n  try {\n    return fs.readFileSync(filepath, 'utf8');\n  } catch (e) {\n    throw new Error('An error occurred while trying to read the map file at ' + filepath + '\\n' + e);\n  }\n}\n\nfunction Converter (sm, opts) {\n  opts = opts || {};\n  try {\n    if (opts.isFileComment) sm = readFromFileMap(sm, opts.commentFileDir);\n    if (opts.hasComment) sm = stripComment(sm);\n    if (opts.isEncoded) sm = decodeBase64(sm);\n    if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);\n\n    this.sourcemap = sm;\n  } catch(e) {\n    console.error(e);\n    return null;\n  }\n}\n\nConverter.prototype.toJSON = function (space) {\n  return JSON.stringify(this.sourcemap, null, space);\n};\n\nConverter.prototype.toBase64 = function () {\n  var json = this.toJSON();\n  return new Buffer(json).toString('base64');\n};\n\nConverter.prototype.toComment = function () {\n  var base64 = this.toBase64();\n  return '//# sourceMappingURL=data:application/json;base64,' + base64;\n};\n\n// returns copy instead of original\nConverter.prototype.toObject = function () {\n  return JSON.parse(this.toJSON());\n};\n\nConverter.prototype.addProperty = function (key, value) {\n  if (this.sourcemap.hasOwnProperty(key)) throw new Error('property %s already exists on the sourcemap, use set property instead');\n  return this.setProperty(key, value);\n};\n\nConverter.prototype.setProperty = function (key, value) {\n  this.sourcemap[key] = value;\n  return this;\n};\n\nConverter.prototype.getProperty = function (key) {\n  return this.sourcemap[key];\n};\n\nexports.fromObject = function (obj) {\n  return new Converter(obj);\n};\n\nexports.fromJSON = function (json) {\n  return new Converter(json, { isJSON: true });\n};\n\nexports.fromBase64 = function (base64) {\n  return new Converter(base64, { isEncoded: true });\n};\n\nexports.fromComment = function (comment) {\n  comment = comment\n    .replace(/^\\/\\*/g, '//')\n    .replace(/\\*\\/$/g, '');\n\n  return new Converter(comment, { isEncoded: true, hasComment: true });\n};\n\nexports.fromMapFileComment = function (comment, dir) {\n  return new Converter(comment, { commentFileDir: dir, isFileComment: true, isJSON: true });\n};\n\n// Finds last sourcemap comment in file or returns null if none was found\nexports.fromSource = function (content) {\n  var m = content.match(commentRx);\n  commentRx.lastIndex = 0;\n  return m ? exports.fromComment(m.pop()) : null;\n};\n\n// Finds last sourcemap comment in file or returns null if none was found\nexports.fromMapFileSource = function (content, dir) {\n  var m = content.match(mapFileCommentRx);\n  mapFileCommentRx.lastIndex = 0;\n  return m ? exports.fromMapFileComment(m.pop(), dir) : null;\n};\n\nexports.removeComments = function (src) {\n  commentRx.lastIndex = 0;\n  return src.replace(commentRx, '');\n};\n\nexports.removeMapFileComments = function (src) {\n  mapFileCommentRx.lastIndex = 0;\n  return src.replace(mapFileCommentRx, '');\n};\n\nexports.__defineGetter__('commentRegex', function () {\n  commentRx.lastIndex = 0;\n  return commentRx; \n});\n\nexports.__defineGetter__('mapFileCommentRegex', function () {\n  mapFileCommentRx.lastIndex = 0;\n  return mapFileCommentRx; \n});\n"]},"metadata":{},"sourceType":"script"}