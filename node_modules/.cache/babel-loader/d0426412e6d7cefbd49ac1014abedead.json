{"ast":null,"code":"/**\n * @fileoverview Defines a storage for rules.\n * @author Nicholas C. Zakas\n * @author aladdin-add\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst builtInRules = require(\"../rules\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Normalizes a rule module to the new-style API\n * @param {(Function|{create: Function})} rule A rule object, which can either be a function\n * (\"old-style\") or an object with a `create` method (\"new-style\")\n * @returns {{create: Function}} A new-style rule.\n */\n\n\nfunction normalizeRule(rule) {\n  return typeof rule === \"function\" ? Object.assign({\n    create: rule\n  }, rule) : rule;\n} //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n\nclass Rules {\n  constructor() {\n    this._rules = Object.create(null);\n  }\n  /**\n   * Registers a rule module for rule id in storage.\n   * @param {string} ruleId Rule id (file name).\n   * @param {Function} ruleModule Rule handler.\n   * @returns {void}\n   */\n\n\n  define(ruleId, ruleModule) {\n    this._rules[ruleId] = normalizeRule(ruleModule);\n  }\n  /**\n   * Access rule handler by id (file name).\n   * @param {string} ruleId Rule id (file name).\n   * @returns {{create: Function, schema: JsonSchema[]}}\n   * A rule. This is normalized to always have the new-style shape with a `create` method.\n   */\n\n\n  get(ruleId) {\n    if (typeof this._rules[ruleId] === \"string\") {\n      this.define(ruleId, require(this._rules[ruleId]));\n    }\n\n    if (this._rules[ruleId]) {\n      return this._rules[ruleId];\n    }\n\n    if (builtInRules.has(ruleId)) {\n      return builtInRules.get(ruleId);\n    }\n\n    return null;\n  }\n\n  *[Symbol.iterator]() {\n    yield* builtInRules;\n\n    for (const ruleId of Object.keys(this._rules)) {\n      yield [ruleId, this.get(ruleId)];\n    }\n  }\n\n}\n\nmodule.exports = Rules;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/linter/rules.js"],"names":["builtInRules","require","normalizeRule","rule","Object","assign","create","Rules","constructor","_rules","define","ruleId","ruleModule","get","has","Symbol","iterator","keys","module","exports"],"mappings":"AAAA;;;;;AAMA,a,CAEA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,UAAD,CAA5B,C,CAEA;AACA;AACA;;AAEA;;;;;;;;AAMA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,SAAO,OAAOA,IAAP,KAAgB,UAAhB,GAA6BC,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,MAAM,EAAEH;AAAV,GAAd,EAAgCA,IAAhC,CAA7B,GAAqEA,IAA5E;AACH,C,CAED;AACA;AACA;;;AAEA,MAAMI,KAAN,CAAY;AACRC,EAAAA,WAAW,GAAG;AACV,SAAKC,MAAL,GAAcL,MAAM,CAACE,MAAP,CAAc,IAAd,CAAd;AACH;AAED;;;;;;;;AAMAI,EAAAA,MAAM,CAACC,MAAD,EAASC,UAAT,EAAqB;AACvB,SAAKH,MAAL,CAAYE,MAAZ,IAAsBT,aAAa,CAACU,UAAD,CAAnC;AACH;AAED;;;;;;;;AAMAC,EAAAA,GAAG,CAACF,MAAD,EAAS;AACR,QAAI,OAAO,KAAKF,MAAL,CAAYE,MAAZ,CAAP,KAA+B,QAAnC,EAA6C;AACzC,WAAKD,MAAL,CAAYC,MAAZ,EAAoBV,OAAO,CAAC,KAAKQ,MAAL,CAAYE,MAAZ,CAAD,CAA3B;AACH;;AACD,QAAI,KAAKF,MAAL,CAAYE,MAAZ,CAAJ,EAAyB;AACrB,aAAO,KAAKF,MAAL,CAAYE,MAAZ,CAAP;AACH;;AACD,QAAIX,YAAY,CAACc,GAAb,CAAiBH,MAAjB,CAAJ,EAA8B;AAC1B,aAAOX,YAAY,CAACa,GAAb,CAAiBF,MAAjB,CAAP;AACH;;AAED,WAAO,IAAP;AACH;;AAED,IAAEI,MAAM,CAACC,QAAT,IAAqB;AACjB,WAAOhB,YAAP;;AAEA,SAAK,MAAMW,MAAX,IAAqBP,MAAM,CAACa,IAAP,CAAY,KAAKR,MAAjB,CAArB,EAA+C;AAC3C,YAAM,CAACE,MAAD,EAAS,KAAKE,GAAL,CAASF,MAAT,CAAT,CAAN;AACH;AACJ;;AAzCO;;AA4CZO,MAAM,CAACC,OAAP,GAAiBZ,KAAjB","sourcesContent":["/**\n * @fileoverview Defines a storage for rules.\n * @author Nicholas C. Zakas\n * @author aladdin-add\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst builtInRules = require(\"../rules\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Normalizes a rule module to the new-style API\n * @param {(Function|{create: Function})} rule A rule object, which can either be a function\n * (\"old-style\") or an object with a `create` method (\"new-style\")\n * @returns {{create: Function}} A new-style rule.\n */\nfunction normalizeRule(rule) {\n    return typeof rule === \"function\" ? Object.assign({ create: rule }, rule) : rule;\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nclass Rules {\n    constructor() {\n        this._rules = Object.create(null);\n    }\n\n    /**\n     * Registers a rule module for rule id in storage.\n     * @param {string} ruleId Rule id (file name).\n     * @param {Function} ruleModule Rule handler.\n     * @returns {void}\n     */\n    define(ruleId, ruleModule) {\n        this._rules[ruleId] = normalizeRule(ruleModule);\n    }\n\n    /**\n     * Access rule handler by id (file name).\n     * @param {string} ruleId Rule id (file name).\n     * @returns {{create: Function, schema: JsonSchema[]}}\n     * A rule. This is normalized to always have the new-style shape with a `create` method.\n     */\n    get(ruleId) {\n        if (typeof this._rules[ruleId] === \"string\") {\n            this.define(ruleId, require(this._rules[ruleId]));\n        }\n        if (this._rules[ruleId]) {\n            return this._rules[ruleId];\n        }\n        if (builtInRules.has(ruleId)) {\n            return builtInRules.get(ruleId);\n        }\n\n        return null;\n    }\n\n    *[Symbol.iterator]() {\n        yield* builtInRules;\n\n        for (const ruleId of Object.keys(this._rules)) {\n            yield [ruleId, this.get(ruleId)];\n        }\n    }\n}\n\nmodule.exports = Rules;\n"]},"metadata":{},"sourceType":"script"}