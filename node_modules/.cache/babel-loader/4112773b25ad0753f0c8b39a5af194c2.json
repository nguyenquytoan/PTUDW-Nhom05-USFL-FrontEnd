{"ast":null,"code":"const assign = require('lodash/assign');\n\nconst each = require('lodash/each');\n\nconst find = require('lodash/find');\n\nconst isArray = require('lodash/isArray');\n\nconst isFunction = require('lodash/isFunction');\n\nconst isRegExp = require('lodash/isRegExp');\n\nconst keys = require('lodash/keys');\n\nconst values = require('lodash/values');\n\nconst webpackSources = require('webpack-sources');\n\nconst PHASES = {\n  OPTIMIZE_CHUNK_ASSETS: 'compilation.optimize-chunk-assets',\n  OPTIMIZE_ASSETS: 'compilation.optimize-assets',\n  EMIT: 'emit'\n};\nconst PHASE_LIST = values(PHASES);\n\nfunction ensureAssetProcessor(processor, index) {\n  if (!processor) {\n    throw new Error('LastCallWebpackPlugin Error: invalid options.assetProcessors[' + String(index) + '] (must be an object).');\n  }\n\n  if (!isRegExp(processor.regExp)) {\n    throw new Error('LastCallWebpackPlugin Error: invalid options.assetProcessors[' + String(index) + '].regExp (must be an regular expression).');\n  }\n\n  if (!isFunction(processor.processor)) {\n    throw new Error('LastCallWebpackPlugin Error: invalid options.assetProcessors[' + String(index) + '].processor (must be a function).');\n  }\n\n  if (processor.phase === undefined) {\n    processor.phase = PHASES.OPTIMIZE_ASSETS;\n  }\n\n  if (!find(PHASE_LIST, function (p) {\n    return p === processor.phase;\n  })) {\n    throw new Error('LastCallWebpackPlugin Error: invalid options.assetProcessors[' + String(index) + '].phase (must be on of: ' + PHASES.join(', ') + ').');\n  }\n}\n\nclass LastCallWebpackPlugin {\n  constructor(options) {\n    this.pluginDescriptor = this.buildPluginDescriptor();\n    this.options = assign({\n      assetProcessors: [],\n      canPrint: true\n    }, options || {});\n    this.phaseAssetProcessors = {};\n    each(PHASE_LIST, phase => {\n      this.phaseAssetProcessors[phase] = [];\n    });\n\n    if (!isArray(this.options.assetProcessors)) {\n      throw new Error('LastCallWebpackPlugin Error: invalid options.assetProcessors (must be an Array).');\n    }\n\n    each(this.options.assetProcessors, (processor, index) => {\n      ensureAssetProcessor(processor, index);\n      this.phaseAssetProcessors[processor.phase].push(processor);\n    });\n    this.resetInternalState();\n  }\n\n  buildPluginDescriptor() {\n    return {\n      name: 'LastCallWebpackPlugin'\n    };\n  }\n\n  resetInternalState() {\n    this.deleteAssetsMap = {};\n  }\n\n  setAsset(assetName, assetValue, immediate, compilation) {\n    if (assetName) {\n      if (assetValue === null) {\n        this.deleteAssetsMap[assetName] = true;\n\n        if (immediate) {\n          delete compilation.assets[assetName];\n        }\n      } else {\n        if (assetValue !== undefined) {\n          compilation.assets[assetName] = this.createAsset(assetValue, compilation.assets[assetName]);\n        }\n      }\n    }\n  }\n\n  deleteAssets(compilation) {\n    if (this.deleteAssetsMap && compilation) {\n      each(keys(this.deleteAssetsMap), key => {\n        delete compilation.assets[key];\n      });\n    }\n  }\n\n  print() {\n    if (this.options.canPrint) {\n      console.log.apply(console, arguments);\n    }\n  }\n\n  createAsset(content, originalAsset) {\n    return new webpackSources.RawSource(content);\n  }\n\n  getAssetsAndProcessors(assets, phase) {\n    const assetProcessors = this.phaseAssetProcessors[phase];\n    const assetNames = keys(assets);\n    const assetsAndProcessors = [];\n    each(assetNames, assetName => {\n      each(assetProcessors, assetProcessor => {\n        const regExpResult = assetProcessor.regExp.exec(assetName);\n        assetProcessor.regExp.lastIndex = 0;\n\n        if (regExpResult) {\n          const assetAndProcessor = {\n            assetName: assetName,\n            regExp: assetProcessor.regExp,\n            processor: assetProcessor.processor,\n            regExpResult: regExpResult\n          };\n          assetsAndProcessors.push(assetAndProcessor);\n        }\n      });\n    });\n    return assetsAndProcessors;\n  }\n\n  process(compilation, phase) {\n    const assetsAndProcessors = this.getAssetsAndProcessors(compilation.assets, phase);\n\n    if (assetsAndProcessors.length <= 0) {\n      return Promise.resolve(undefined);\n    }\n\n    const promises = [];\n    const assetsManipulationObject = {\n      setAsset: (assetName, assetValue, immediate) => {\n        this.setAsset(assetName, assetValue, immediate, compilation);\n      },\n      getAsset: assetName => {\n        var asset = assetName && compilation.assets[assetName] && compilation.assets[assetName].source();\n        return asset || undefined;\n      }\n    };\n    each(assetsAndProcessors, assetAndProcessor => {\n      const asset = compilation.assets[assetAndProcessor.assetName];\n      const promise = assetAndProcessor.processor(assetAndProcessor.assetName, asset, assetsManipulationObject).then(result => {\n        if (result !== undefined) {\n          this.setAsset(assetAndProcessor.assetName, result, false, compilation);\n        }\n      });\n      promises.push(promise);\n    });\n    return Promise.all(promises);\n  }\n\n  apply(compiler) {\n    const hasOptimizeChunkAssetsProcessors = this.phaseAssetProcessors[PHASES.OPTIMIZE_CHUNK_ASSETS].length > 0;\n    const hasOptimizeAssetsProcessors = this.phaseAssetProcessors[PHASES.OPTIMIZE_ASSETS].length > 0;\n    const hasEmitProcessors = this.phaseAssetProcessors[PHASES.EMIT].length > 0;\n    compiler.hooks.compilation.tap(this.pluginDescriptor, (compilation, params) => {\n      this.resetInternalState();\n\n      if (hasOptimizeChunkAssetsProcessors) {\n        compilation.hooks.optimizeChunkAssets.tapPromise(this.pluginDescriptor, chunks => this.process(compilation, PHASES.OPTIMIZE_CHUNK_ASSETS, {\n          chunks: chunks\n        }));\n      }\n\n      if (hasOptimizeAssetsProcessors) {\n        compilation.hooks.optimizeAssets.tapPromise(this.pluginDescriptor, assets => this.process(compilation, PHASES.OPTIMIZE_ASSETS, {\n          assets: assets\n        }));\n      }\n    });\n    compiler.hooks.emit.tapPromise(this.pluginDescriptor, compilation => (hasEmitProcessors ? this.process(compilation, PHASES.EMIT) : Promise.resolve(undefined)).then(result => {\n      this.deleteAssets(compilation);\n      return result;\n    }));\n  }\n\n}\n\nLastCallWebpackPlugin.PHASES = PHASES;\nmodule.exports = LastCallWebpackPlugin;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/last-call-webpack-plugin/src/index.js"],"names":["assign","require","each","find","isArray","isFunction","isRegExp","keys","values","webpackSources","PHASES","OPTIMIZE_CHUNK_ASSETS","OPTIMIZE_ASSETS","EMIT","PHASE_LIST","ensureAssetProcessor","processor","index","Error","String","regExp","phase","undefined","p","join","LastCallWebpackPlugin","constructor","options","pluginDescriptor","buildPluginDescriptor","assetProcessors","canPrint","phaseAssetProcessors","push","resetInternalState","name","deleteAssetsMap","setAsset","assetName","assetValue","immediate","compilation","assets","createAsset","deleteAssets","key","print","console","log","apply","arguments","content","originalAsset","RawSource","getAssetsAndProcessors","assetNames","assetsAndProcessors","assetProcessor","regExpResult","exec","lastIndex","assetAndProcessor","process","length","Promise","resolve","promises","assetsManipulationObject","getAsset","asset","source","promise","then","result","all","compiler","hasOptimizeChunkAssetsProcessors","hasOptimizeAssetsProcessors","hasEmitProcessors","hooks","tap","params","optimizeChunkAssets","tapPromise","chunks","optimizeAssets","emit","module","exports"],"mappings":"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","sourcesContent":["const assign = require('lodash/assign');\nconst each = require('lodash/each');\nconst find = require('lodash/find');\nconst isArray = require('lodash/isArray');\nconst isFunction = require('lodash/isFunction');\nconst isRegExp = require('lodash/isRegExp');\nconst keys = require('lodash/keys');\nconst values = require('lodash/values');\nconst webpackSources = require('webpack-sources');\n\nconst PHASES = {\n  OPTIMIZE_CHUNK_ASSETS: 'compilation.optimize-chunk-assets',\n  OPTIMIZE_ASSETS: 'compilation.optimize-assets',\n  EMIT: 'emit'\n};\nconst PHASE_LIST = values(PHASES);\n\nfunction ensureAssetProcessor(processor, index) {\n  if (!processor) {\n    throw new Error('LastCallWebpackPlugin Error: invalid options.assetProcessors[' + String(index) + '] (must be an object).');\n  }\n  if (!isRegExp(processor.regExp)) {\n    throw new Error('LastCallWebpackPlugin Error: invalid options.assetProcessors[' + String(index) + '].regExp (must be an regular expression).');\n  }\n  if (!isFunction(processor.processor)) {\n    throw new Error('LastCallWebpackPlugin Error: invalid options.assetProcessors[' + String(index) + '].processor (must be a function).');\n  }\n  if (processor.phase === undefined) {\n    processor.phase = PHASES.OPTIMIZE_ASSETS;\n  }\n  if (!find(PHASE_LIST, function(p) { return p === processor.phase; })) {\n    throw new Error('LastCallWebpackPlugin Error: invalid options.assetProcessors[' + String(index) + '].phase (must be on of: ' + PHASES.join(', ') + ').');\n  }\n}\n\nclass LastCallWebpackPlugin {\n  constructor(options) {\n    this.pluginDescriptor = this.buildPluginDescriptor();\n\n    this.options = assign(\n      {\n        assetProcessors: [],\n        canPrint: true\n      },\n      options || {}\n    );\n\n    this.phaseAssetProcessors = {};\n    each(PHASE_LIST, (phase)  => {\n      this.phaseAssetProcessors[phase] = [];\n    });\n\n    if (!isArray(this.options.assetProcessors)) {\n      throw new Error('LastCallWebpackPlugin Error: invalid options.assetProcessors (must be an Array).');\n    }\n    each(this.options.assetProcessors, (processor, index) => {\n      ensureAssetProcessor(processor, index);\n      this.phaseAssetProcessors[processor.phase].push(processor);\n    });\n\n    this.resetInternalState();\n  }\n\n  buildPluginDescriptor() {\n    return { name: 'LastCallWebpackPlugin' };\n  }\n\n  resetInternalState() {\n    this.deleteAssetsMap = {};\n  }\n\n  setAsset(assetName, assetValue, immediate, compilation) {\n    if (assetName) {\n      if (assetValue === null) {\n        this.deleteAssetsMap[assetName] = true;\n        if (immediate) {\n          delete compilation.assets[assetName];\n        }\n      } else {\n        if (assetValue !== undefined) {\n          compilation.assets[assetName] = this.createAsset(assetValue, compilation.assets[assetName]);\n        }\n      }\n    }\n  }\n\n  deleteAssets(compilation) {\n    if (this.deleteAssetsMap && compilation) {\n      each(keys(this.deleteAssetsMap), (key) => {\n        delete compilation.assets[key];\n      });\n    }\n  }\n\n  print() {\n    if (this.options.canPrint) {\n      console.log.apply(console, arguments);\n    }\n  }\n\n  createAsset(content, originalAsset) {\n    return new webpackSources.RawSource(content);\n  }\n\n  getAssetsAndProcessors(assets, phase) {\n    const assetProcessors = this.phaseAssetProcessors[phase];\n    const assetNames = keys(assets);\n    const assetsAndProcessors = [];\n\n    each(assetNames, (assetName) => {\n      each(assetProcessors, (assetProcessor) => {\n        const regExpResult = assetProcessor.regExp.exec(assetName);\n        assetProcessor.regExp.lastIndex = 0;\n        if (regExpResult) {\n          const assetAndProcessor = {\n            assetName: assetName,\n            regExp: assetProcessor.regExp,\n            processor: assetProcessor.processor,\n            regExpResult: regExpResult,\n          };\n          assetsAndProcessors.push(assetAndProcessor);\n        }\n      });\n    });\n\n    return assetsAndProcessors;\n  }\n\n  process(compilation, phase) {\n    const assetsAndProcessors = this.getAssetsAndProcessors(compilation.assets, phase);\n    if (assetsAndProcessors.length <= 0) {\n      return Promise.resolve(undefined);\n    }\n\n    const promises = [];\n\n    const assetsManipulationObject = {\n      setAsset: (assetName, assetValue, immediate) => {\n        this.setAsset(assetName, assetValue, immediate, compilation);\n      },\n      getAsset: (assetName) => {\n        var asset = assetName && compilation.assets[assetName] && compilation.assets[assetName].source();\n        return asset || undefined;\n      }\n    };\n\n    each(assetsAndProcessors, (assetAndProcessor) => {\n      const asset = compilation.assets[assetAndProcessor.assetName];\n      const promise = assetAndProcessor\n        .processor(assetAndProcessor.assetName, asset, assetsManipulationObject)\n        .then((result) => {\n          if (result !== undefined) {\n            this.setAsset(assetAndProcessor.assetName, result, false, compilation);\n          }\n        });\n      promises.push(promise);\n    });\n\n    return Promise.all(promises);\n  }\n\n  apply(compiler) {\n    const hasOptimizeChunkAssetsProcessors =\n      this.phaseAssetProcessors[PHASES.OPTIMIZE_CHUNK_ASSETS].length > 0;\n    const hasOptimizeAssetsProcessors =\n      this.phaseAssetProcessors[PHASES.OPTIMIZE_ASSETS].length > 0;\n    const hasEmitProcessors =\n      this.phaseAssetProcessors[PHASES.EMIT].length > 0;\n\n    compiler.hooks.compilation.tap(\n      this.pluginDescriptor,\n      (compilation, params) => {\n        this.resetInternalState();\n\n        if (hasOptimizeChunkAssetsProcessors) {\n          compilation.hooks.optimizeChunkAssets.tapPromise(\n            this.pluginDescriptor,\n            chunks => this.process(compilation, PHASES.OPTIMIZE_CHUNK_ASSETS, { chunks: chunks })\n          );\n        }\n\n        if (hasOptimizeAssetsProcessors) {\n          compilation.hooks.optimizeAssets.tapPromise(\n            this.pluginDescriptor,\n            assets => this.process(compilation, PHASES.OPTIMIZE_ASSETS, { assets: assets })\n          );\n        }\n      }\n    );\n    compiler.hooks.emit.tapPromise(\n      this.pluginDescriptor,\n      compilation =>\n        (\n          hasEmitProcessors ?\n            this.process(compilation, PHASES.EMIT) :\n            Promise.resolve(undefined)\n        )\n        .then((result) => {\n          this.deleteAssets(compilation);\n          return result;\n        })\n    );\n  }\n}\nLastCallWebpackPlugin.PHASES = PHASES;\n\nmodule.exports = LastCallWebpackPlugin;\n"]},"metadata":{},"sourceType":"script"}