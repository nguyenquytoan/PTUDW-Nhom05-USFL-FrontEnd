{"ast":null,"code":"/**\n * @fileoverview Disallows unnecessary `return await`\n * @author Jordan Harband\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nconst message = \"Redundant use of `await` on a return value.\";\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unnecessary `return await`\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-return-await\"\n    },\n    fixable: null,\n    schema: []\n  },\n\n  create(context) {\n    /**\n     * Reports a found unnecessary `await` expression.\n     * @param {ASTNode} node The node representing the `await` expression to report\n     * @returns {void}\n     */\n    function reportUnnecessaryAwait(node) {\n      context.report({\n        node: context.getSourceCode().getFirstToken(node),\n        loc: node.loc,\n        message\n      });\n    }\n    /**\n     * Determines whether a thrown error from this node will be caught/handled within this function rather than immediately halting\n     * this function. For example, a statement in a `try` block will always have an error handler. A statement in\n     * a `catch` block will only have an error handler if there is also a `finally` block.\n     * @param {ASTNode} node A node representing a location where an could be thrown\n     * @returns {boolean} `true` if a thrown error will be caught/handled in this function\n     */\n\n\n    function hasErrorHandler(node) {\n      let ancestor = node;\n\n      while (!astUtils.isFunction(ancestor) && ancestor.type !== \"Program\") {\n        if (ancestor.parent.type === \"TryStatement\" && (ancestor === ancestor.parent.block || ancestor === ancestor.parent.handler && ancestor.parent.finalizer)) {\n          return true;\n        }\n\n        ancestor = ancestor.parent;\n      }\n\n      return false;\n    }\n    /**\n     * Checks if a node is placed in tail call position. Once `return` arguments (or arrow function expressions) can be a complex expression,\n     * an `await` expression could or could not be unnecessary by the definition of this rule. So we're looking for `await` expressions that are in tail position.\n     * @param {ASTNode} node A node representing the `await` expression to check\n     * @returns {boolean} The checking result\n     */\n\n\n    function isInTailCallPosition(node) {\n      if (node.parent.type === \"ArrowFunctionExpression\") {\n        return true;\n      }\n\n      if (node.parent.type === \"ReturnStatement\") {\n        return !hasErrorHandler(node.parent);\n      }\n\n      if (node.parent.type === \"ConditionalExpression\" && (node === node.parent.consequent || node === node.parent.alternate)) {\n        return isInTailCallPosition(node.parent);\n      }\n\n      if (node.parent.type === \"LogicalExpression\" && node === node.parent.right) {\n        return isInTailCallPosition(node.parent);\n      }\n\n      if (node.parent.type === \"SequenceExpression\" && node === node.parent.expressions[node.parent.expressions.length - 1]) {\n        return isInTailCallPosition(node.parent);\n      }\n\n      return false;\n    }\n\n    return {\n      AwaitExpression(node) {\n        if (isInTailCallPosition(node) && !hasErrorHandler(node)) {\n          reportUnnecessaryAwait(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-return-await.js"],"names":["astUtils","require","message","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","create","context","reportUnnecessaryAwait","node","report","getSourceCode","getFirstToken","loc","hasErrorHandler","ancestor","isFunction","parent","block","handler","finalizer","isInTailCallPosition","consequent","alternate","right","expressions","length","AwaitExpression"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Disallows unnecessary `return await`\n * @author Jordan Harband\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst message = \"Redundant use of `await` on a return value.\";\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow unnecessary `return await`\",\n            category: \"Best Practices\",\n\n            recommended: false,\n\n            url: \"https://eslint.org/docs/rules/no-return-await\"\n        },\n\n        fixable: null,\n\n        schema: [\n        ]\n    },\n\n    create(context) {\n\n        /**\n         * Reports a found unnecessary `await` expression.\n         * @param {ASTNode} node The node representing the `await` expression to report\n         * @returns {void}\n         */\n        function reportUnnecessaryAwait(node) {\n            context.report({\n                node: context.getSourceCode().getFirstToken(node),\n                loc: node.loc,\n                message\n            });\n        }\n\n        /**\n         * Determines whether a thrown error from this node will be caught/handled within this function rather than immediately halting\n         * this function. For example, a statement in a `try` block will always have an error handler. A statement in\n         * a `catch` block will only have an error handler if there is also a `finally` block.\n         * @param {ASTNode} node A node representing a location where an could be thrown\n         * @returns {boolean} `true` if a thrown error will be caught/handled in this function\n         */\n        function hasErrorHandler(node) {\n            let ancestor = node;\n\n            while (!astUtils.isFunction(ancestor) && ancestor.type !== \"Program\") {\n                if (ancestor.parent.type === \"TryStatement\" && (ancestor === ancestor.parent.block || ancestor === ancestor.parent.handler && ancestor.parent.finalizer)) {\n                    return true;\n                }\n                ancestor = ancestor.parent;\n            }\n            return false;\n        }\n\n        /**\n         * Checks if a node is placed in tail call position. Once `return` arguments (or arrow function expressions) can be a complex expression,\n         * an `await` expression could or could not be unnecessary by the definition of this rule. So we're looking for `await` expressions that are in tail position.\n         * @param {ASTNode} node A node representing the `await` expression to check\n         * @returns {boolean} The checking result\n         */\n        function isInTailCallPosition(node) {\n            if (node.parent.type === \"ArrowFunctionExpression\") {\n                return true;\n            }\n            if (node.parent.type === \"ReturnStatement\") {\n                return !hasErrorHandler(node.parent);\n            }\n            if (node.parent.type === \"ConditionalExpression\" && (node === node.parent.consequent || node === node.parent.alternate)) {\n                return isInTailCallPosition(node.parent);\n            }\n            if (node.parent.type === \"LogicalExpression\" && node === node.parent.right) {\n                return isInTailCallPosition(node.parent);\n            }\n            if (node.parent.type === \"SequenceExpression\" && node === node.parent.expressions[node.parent.expressions.length - 1]) {\n                return isInTailCallPosition(node.parent);\n            }\n            return false;\n        }\n\n        return {\n            AwaitExpression(node) {\n                if (isInTailCallPosition(node) && !hasErrorHandler(node)) {\n                    reportUnnecessaryAwait(node);\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}