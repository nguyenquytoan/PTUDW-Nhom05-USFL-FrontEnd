{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transpileNamespace;\n\nvar _core = require(\"@babel/core\");\n\nfunction transpileNamespace(path, t, allowNamespaces) {\n  if (path.node.declare || path.node.id.type === \"StringLiteral\") {\n    path.remove();\n    return;\n  }\n\n  if (!allowNamespaces) {\n    throw path.hub.file.buildCodeFrameError(path.node.id, \"Namespace not marked type-only declare.\" + \" Non-declarative namespaces are only supported experimentally in Babel.\" + \" To enable and review caveats see:\" + \" https://babeljs.io/docs/en/babel-plugin-transform-typescript\");\n  }\n\n  const name = path.node.id.name;\n  const value = handleNested(path, t, t.cloneDeep(path.node));\n  const bound = path.scope.hasOwnBinding(name);\n\n  if (path.parent.type === \"ExportNamedDeclaration\") {\n    if (!bound) {\n      path.parentPath.insertAfter(value);\n      path.replaceWith(getDeclaration(t, name));\n      path.scope.registerDeclaration(path.parentPath);\n    } else {\n      path.parentPath.replaceWith(value);\n    }\n  } else if (bound) {\n    path.replaceWith(value);\n  } else {\n    path.scope.registerDeclaration(path.replaceWithMultiple([getDeclaration(t, name), value])[0]);\n  }\n}\n\nfunction getDeclaration(t, name) {\n  return t.variableDeclaration(\"let\", [t.variableDeclarator(t.identifier(name))]);\n}\n\nfunction getMemberExpression(t, name, itemName) {\n  return t.memberExpression(t.identifier(name), t.identifier(itemName));\n}\n\nfunction handleNested(path, t, node, parentExport) {\n  const names = new Set();\n  const realName = node.id;\n  const name = path.scope.generateUid(realName.name);\n  const namespaceTopLevel = node.body.body;\n\n  for (let i = 0; i < namespaceTopLevel.length; i++) {\n    const subNode = namespaceTopLevel[i];\n\n    switch (subNode.type) {\n      case \"TSModuleDeclaration\":\n        {\n          const transformed = handleNested(path, t, subNode);\n          const moduleName = subNode.id.name;\n\n          if (names.has(moduleName)) {\n            namespaceTopLevel[i] = transformed;\n          } else {\n            names.add(moduleName);\n            namespaceTopLevel.splice(i++, 1, getDeclaration(t, moduleName), transformed);\n          }\n\n          continue;\n        }\n\n      case \"TSEnumDeclaration\":\n      case \"FunctionDeclaration\":\n      case \"ClassDeclaration\":\n        names.add(subNode.id.name);\n        continue;\n\n      case \"VariableDeclaration\":\n        for (const variable of subNode.declarations) {\n          names.add(variable.id.name);\n        }\n\n        continue;\n\n      default:\n        continue;\n\n      case \"ExportNamedDeclaration\":\n    }\n\n    switch (subNode.declaration.type) {\n      case \"TSEnumDeclaration\":\n      case \"FunctionDeclaration\":\n      case \"ClassDeclaration\":\n        {\n          const itemName = subNode.declaration.id.name;\n          names.add(itemName);\n          namespaceTopLevel.splice(i++, 1, subNode.declaration, t.expressionStatement(t.assignmentExpression(\"=\", getMemberExpression(t, name, itemName), t.identifier(itemName))));\n          break;\n        }\n\n      case \"VariableDeclaration\":\n        if (subNode.declaration.kind !== \"const\") {\n          throw path.hub.file.buildCodeFrameError(subNode.declaration, \"Namespaces exporting non-const are not supported by Babel.\" + \" Change to const or see:\" + \" https://babeljs.io/docs/en/babel-plugin-transform-typescript\");\n        }\n\n        for (const variable of subNode.declaration.declarations) {\n          variable.init = t.assignmentExpression(\"=\", getMemberExpression(t, name, variable.id.name), variable.init);\n        }\n\n        namespaceTopLevel[i] = subNode.declaration;\n        break;\n\n      case \"TSModuleDeclaration\":\n        {\n          const transformed = handleNested(path, t, subNode.declaration, t.identifier(name));\n          const moduleName = subNode.declaration.id.name;\n\n          if (names.has(moduleName)) {\n            namespaceTopLevel[i] = transformed;\n          } else {\n            names.add(moduleName);\n            namespaceTopLevel.splice(i++, 1, getDeclaration(t, moduleName), transformed);\n          }\n        }\n    }\n  }\n\n  let fallthroughValue = t.objectExpression([]);\n\n  if (parentExport) {\n    fallthroughValue = _core.template.expression.ast`\n      ${parentExport}.${realName} || (\n        ${parentExport}.${realName} = ${fallthroughValue}\n      )\n    `;\n  }\n\n  return _core.template.statement.ast`\n    (function (${t.identifier(name)}) {\n      ${namespaceTopLevel}\n    })(${realName} || (${realName} = ${fallthroughValue}));\n  `;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/@babel/plugin-transform-typescript/lib/namespace.js"],"names":["Object","defineProperty","exports","value","default","transpileNamespace","_core","require","path","t","allowNamespaces","node","declare","id","type","remove","hub","file","buildCodeFrameError","name","handleNested","cloneDeep","bound","scope","hasOwnBinding","parent","parentPath","insertAfter","replaceWith","getDeclaration","registerDeclaration","replaceWithMultiple","variableDeclaration","variableDeclarator","identifier","getMemberExpression","itemName","memberExpression","parentExport","names","Set","realName","generateUid","namespaceTopLevel","body","i","length","subNode","transformed","moduleName","has","add","splice","variable","declarations","declaration","expressionStatement","assignmentExpression","kind","init","fallthroughValue","objectExpression","template","expression","ast","statement"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transpileNamespace;\n\nvar _core = require(\"@babel/core\");\n\nfunction transpileNamespace(path, t, allowNamespaces) {\n  if (path.node.declare || path.node.id.type === \"StringLiteral\") {\n    path.remove();\n    return;\n  }\n\n  if (!allowNamespaces) {\n    throw path.hub.file.buildCodeFrameError(path.node.id, \"Namespace not marked type-only declare.\" + \" Non-declarative namespaces are only supported experimentally in Babel.\" + \" To enable and review caveats see:\" + \" https://babeljs.io/docs/en/babel-plugin-transform-typescript\");\n  }\n\n  const name = path.node.id.name;\n  const value = handleNested(path, t, t.cloneDeep(path.node));\n  const bound = path.scope.hasOwnBinding(name);\n\n  if (path.parent.type === \"ExportNamedDeclaration\") {\n    if (!bound) {\n      path.parentPath.insertAfter(value);\n      path.replaceWith(getDeclaration(t, name));\n      path.scope.registerDeclaration(path.parentPath);\n    } else {\n      path.parentPath.replaceWith(value);\n    }\n  } else if (bound) {\n    path.replaceWith(value);\n  } else {\n    path.scope.registerDeclaration(path.replaceWithMultiple([getDeclaration(t, name), value])[0]);\n  }\n}\n\nfunction getDeclaration(t, name) {\n  return t.variableDeclaration(\"let\", [t.variableDeclarator(t.identifier(name))]);\n}\n\nfunction getMemberExpression(t, name, itemName) {\n  return t.memberExpression(t.identifier(name), t.identifier(itemName));\n}\n\nfunction handleNested(path, t, node, parentExport) {\n  const names = new Set();\n  const realName = node.id;\n  const name = path.scope.generateUid(realName.name);\n  const namespaceTopLevel = node.body.body;\n\n  for (let i = 0; i < namespaceTopLevel.length; i++) {\n    const subNode = namespaceTopLevel[i];\n\n    switch (subNode.type) {\n      case \"TSModuleDeclaration\":\n        {\n          const transformed = handleNested(path, t, subNode);\n          const moduleName = subNode.id.name;\n\n          if (names.has(moduleName)) {\n            namespaceTopLevel[i] = transformed;\n          } else {\n            names.add(moduleName);\n            namespaceTopLevel.splice(i++, 1, getDeclaration(t, moduleName), transformed);\n          }\n\n          continue;\n        }\n\n      case \"TSEnumDeclaration\":\n      case \"FunctionDeclaration\":\n      case \"ClassDeclaration\":\n        names.add(subNode.id.name);\n        continue;\n\n      case \"VariableDeclaration\":\n        for (const variable of subNode.declarations) {\n          names.add(variable.id.name);\n        }\n\n        continue;\n\n      default:\n        continue;\n\n      case \"ExportNamedDeclaration\":\n    }\n\n    switch (subNode.declaration.type) {\n      case \"TSEnumDeclaration\":\n      case \"FunctionDeclaration\":\n      case \"ClassDeclaration\":\n        {\n          const itemName = subNode.declaration.id.name;\n          names.add(itemName);\n          namespaceTopLevel.splice(i++, 1, subNode.declaration, t.expressionStatement(t.assignmentExpression(\"=\", getMemberExpression(t, name, itemName), t.identifier(itemName))));\n          break;\n        }\n\n      case \"VariableDeclaration\":\n        if (subNode.declaration.kind !== \"const\") {\n          throw path.hub.file.buildCodeFrameError(subNode.declaration, \"Namespaces exporting non-const are not supported by Babel.\" + \" Change to const or see:\" + \" https://babeljs.io/docs/en/babel-plugin-transform-typescript\");\n        }\n\n        for (const variable of subNode.declaration.declarations) {\n          variable.init = t.assignmentExpression(\"=\", getMemberExpression(t, name, variable.id.name), variable.init);\n        }\n\n        namespaceTopLevel[i] = subNode.declaration;\n        break;\n\n      case \"TSModuleDeclaration\":\n        {\n          const transformed = handleNested(path, t, subNode.declaration, t.identifier(name));\n          const moduleName = subNode.declaration.id.name;\n\n          if (names.has(moduleName)) {\n            namespaceTopLevel[i] = transformed;\n          } else {\n            names.add(moduleName);\n            namespaceTopLevel.splice(i++, 1, getDeclaration(t, moduleName), transformed);\n          }\n        }\n    }\n  }\n\n  let fallthroughValue = t.objectExpression([]);\n\n  if (parentExport) {\n    fallthroughValue = _core.template.expression.ast`\n      ${parentExport}.${realName} || (\n        ${parentExport}.${realName} = ${fallthroughValue}\n      )\n    `;\n  }\n\n  return _core.template.statement.ast`\n    (function (${t.identifier(name)}) {\n      ${namespaceTopLevel}\n    })(${realName} || (${realName} = ${fallthroughValue}));\n  `;\n}"]},"metadata":{},"sourceType":"script"}