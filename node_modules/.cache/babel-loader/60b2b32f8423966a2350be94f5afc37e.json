{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.mjs';\nimport '../_version.mjs'; // Name of the search parameter used to store revision info.\n\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof module:workbox-precaching\n */\n\nexport function createCacheKey(entry) {\n  if (!entry) {\n    throw new WorkboxError('add-to-cache-list-unexpected-type', {\n      entry\n    });\n  } // If a precache manifest entry is a string, it's assumed to be a versioned\n  // URL, like '/app.abcd1234.js'. Return as-is.\n\n\n  if (typeof entry === 'string') {\n    const urlObject = new URL(entry, location);\n    return {\n      cacheKey: urlObject.href,\n      url: urlObject.href\n    };\n  }\n\n  const {\n    revision,\n    url\n  } = entry;\n\n  if (!url) {\n    throw new WorkboxError('add-to-cache-list-unexpected-type', {\n      entry\n    });\n  } // If there's just a URL and no revision, then it's also assumed to be a\n  // versioned URL.\n\n\n  if (!revision) {\n    const urlObject = new URL(url, location);\n    return {\n      cacheKey: urlObject.href,\n      url: urlObject.href\n    };\n  } // Otherwise, construct a properly versioned URL using the custom Workbox\n  // search parameter along with the revision info.\n\n\n  const originalURL = new URL(url, location);\n  const cacheKeyURL = new URL(url, location);\n  cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n  return {\n    cacheKey: cacheKeyURL.href,\n    url: originalURL.href\n  };\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-precaching/utils/createCacheKey.mjs"],"names":["WorkboxError","REVISION_SEARCH_PARAM","createCacheKey","entry","urlObject","URL","location","cacheKey","href","url","revision","originalURL","cacheKeyURL","searchParams","set"],"mappings":"AAAA;;;;;;;AAQA,SAAQA,YAAR,QAA2B,wCAA3B;AAEA,OAAO,iBAAP,C,CAEA;;AACA,MAAMC,qBAAqB,GAAG,iBAA9B;AAEA;;;;;;;;;;AASA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AACpC,MAAI,CAACA,KAAL,EAAY;AACV,UAAM,IAAIH,YAAJ,CAAiB,mCAAjB,EAAsD;AAACG,MAAAA;AAAD,KAAtD,CAAN;AACD,GAHmC,CAKpC;AACA;;;AACA,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAMC,SAAS,GAAG,IAAIC,GAAJ,CAAQF,KAAR,EAAeG,QAAf,CAAlB;AACA,WAAO;AACLC,MAAAA,QAAQ,EAAEH,SAAS,CAACI,IADf;AAELC,MAAAA,GAAG,EAAEL,SAAS,CAACI;AAFV,KAAP;AAID;;AAED,QAAM;AAACE,IAAAA,QAAD;AAAWD,IAAAA;AAAX,MAAkBN,KAAxB;;AACA,MAAI,CAACM,GAAL,EAAU;AACR,UAAM,IAAIT,YAAJ,CAAiB,mCAAjB,EAAsD;AAACG,MAAAA;AAAD,KAAtD,CAAN;AACD,GAlBmC,CAoBpC;AACA;;;AACA,MAAI,CAACO,QAAL,EAAe;AACb,UAAMN,SAAS,GAAG,IAAIC,GAAJ,CAAQI,GAAR,EAAaH,QAAb,CAAlB;AACA,WAAO;AACLC,MAAAA,QAAQ,EAAEH,SAAS,CAACI,IADf;AAELC,MAAAA,GAAG,EAAEL,SAAS,CAACI;AAFV,KAAP;AAID,GA5BmC,CA8BpC;AACA;;;AACA,QAAMG,WAAW,GAAG,IAAIN,GAAJ,CAAQI,GAAR,EAAaH,QAAb,CAApB;AACA,QAAMM,WAAW,GAAG,IAAIP,GAAJ,CAAQI,GAAR,EAAaH,QAAb,CAApB;AACAM,EAAAA,WAAW,CAACC,YAAZ,CAAyBC,GAAzB,CAA6Bb,qBAA7B,EAAoDS,QAApD;AACA,SAAO;AACLH,IAAAA,QAAQ,EAAEK,WAAW,CAACJ,IADjB;AAELC,IAAAA,GAAG,EAAEE,WAAW,CAACH;AAFZ,GAAP;AAID","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\n\nimport '../_version.mjs';\n\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function createCacheKey(entry) {\n  if (!entry) {\n    throw new WorkboxError('add-to-cache-list-unexpected-type', {entry});\n  }\n\n  // If a precache manifest entry is a string, it's assumed to be a versioned\n  // URL, like '/app.abcd1234.js'. Return as-is.\n  if (typeof entry === 'string') {\n    const urlObject = new URL(entry, location);\n    return {\n      cacheKey: urlObject.href,\n      url: urlObject.href,\n    };\n  }\n\n  const {revision, url} = entry;\n  if (!url) {\n    throw new WorkboxError('add-to-cache-list-unexpected-type', {entry});\n  }\n\n  // If there's just a URL and no revision, then it's also assumed to be a\n  // versioned URL.\n  if (!revision) {\n    const urlObject = new URL(url, location);\n    return {\n      cacheKey: urlObject.href,\n      url: urlObject.href,\n    };\n  }\n\n  // Otherwise, construct a properly versioned URL using the custom Workbox\n  // search parameter along with the revision info.\n  const originalURL = new URL(url, location);\n  const cacheKeyURL = new URL(url, location);\n  cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n  return {\n    cacheKey: cacheKeyURL.href,\n    url: originalURL.href,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}