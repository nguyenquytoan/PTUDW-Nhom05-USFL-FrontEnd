{"ast":null,"code":"import parser from 'postcss-selector-parser';\nimport postcss from 'postcss';\nconst selectorRegExp = /:has/;\nvar postcss$1 = postcss.plugin('css-has-pseudo', opts => {\n  const preserve = Boolean('preserve' in Object(opts) ? opts.preserve : true);\n  return root => {\n    root.walkRules(selectorRegExp, rule => {\n      const modifiedSelector = parser(selectors => {\n        selectors.walkPseudos(selector => {\n          if (selector.value === ':has' && selector.nodes) {\n            const isNotHas = checkIfParentIsNot(selector);\n            selector.value = isNotHas ? ':not-has' : ':has';\n            const attribute = parser.attribute({\n              attribute: encodeURIComponent(String(selector)).replace(/%3A/g, ':').replace(/%5B/g, '[').replace(/%5D/g, ']').replace(/%2C/g, ',').replace(/[():%\\[\\],]/g, '\\\\$&')\n            });\n\n            if (isNotHas) {\n              selector.parent.parent.replaceWith(attribute);\n            } else {\n              selector.replaceWith(attribute);\n            }\n          }\n        });\n      }).processSync(rule.selector);\n      const clone = rule.clone({\n        selector: modifiedSelector\n      });\n\n      if (preserve) {\n        rule.before(clone);\n      } else {\n        rule.replaceWith(clone);\n      }\n    });\n  };\n});\n\nfunction checkIfParentIsNot(selector) {\n  return Object(Object(selector.parent).parent).type === 'pseudo' && selector.parent.parent.value === ':not';\n}\n\nexport default postcss$1;","map":{"version":3,"sources":["src/postcss.js"],"names":["selectorRegExp","opts","preserve","Boolean","Object","root","rule","modifiedSelector","selectors","selector","isNotHas","checkIfParentIsNot","attribute","encodeURIComponent","String","clone"],"mappings":";;AAGA,MAAMA,cAAc,GAApB,MAAA;AAEA,IAAA,SAAA,GAAe,OAAO,CAAP,MAAA,CAAA,gBAAA,EAAiCC,IAAI,IAAI;QACjDC,QAAQ,GAAGC,OAAO,CAAC,cAAcC,MAAM,CAApB,IAAoB,CAApB,GAA6BH,IAAI,CAAjC,QAAA,GAAzB,IAAwB,C;SAEjBI,IAAI,IAAI;AACdA,IAAAA,IAAI,CAAJA,SAAAA,CAAAA,cAAAA,EAA+BC,IAAI,IAAI;YAChCC,gBAAgB,GAAG,MAAM,CAACC,SAAS,IAAI;AAC5CA,QAAAA,SAAS,CAATA,WAAAA,CAAsBC,QAAQ,IAAI;cAC7BA,QAAQ,CAARA,KAAAA,KAAAA,MAAAA,IAA6BA,QAAQ,CAAzC,K,EAAiD;kBAC1CC,QAAQ,GAAGC,kBAAkB,CAAnC,QAAmC,C;AACnCF,YAAAA,QAAQ,CAARA,KAAAA,GAAiBC,QAAQ,GAAA,UAAA,GAAzBD,MAAAA;kBAEMG,SAAS,GAAG,MAAM,CAAN,SAAA,CAAiB;AAClCA,cAAAA,SAAS,EAAEC,kBAAkB,CAACC,MAAM,CAAzBD,QAAyB,CAAP,CAAlBA,CAAAA,OAAAA,CAAAA,MAAAA,EAAAA,GAAAA,EAAAA,OAAAA,CAAAA,MAAAA,EAAAA,GAAAA,EAAAA,OAAAA,CAAAA,MAAAA,EAAAA,GAAAA,EAAAA,OAAAA,CAAAA,MAAAA,EAAAA,GAAAA,EAAAA,OAAAA,CAAAA,cAAAA,EAAAA,MAAAA;AADuB,aAAjB,C;;gBASlB,Q,EAAc;AACbJ,cAAAA,QAAQ,CAARA,MAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,SAAAA;AADD,a,MAEO;AACNA,cAAAA,QAAQ,CAARA,WAAAA,CAAAA,SAAAA;;;AAjBHD,SAAAA;AADwB,OAAM,CAAN,CAAA,WAAA,CAsBVF,IAAI,CAtBnB,QAAyB,C;YAwBnBS,KAAK,GAAG,IAAI,CAAJ,KAAA,CAAW;AAAEN,QAAAA,QAAQ,EAAEF;AAAZ,OAAX,C;;UAEd,Q,EAAc;AACbD,QAAAA,IAAI,CAAJA,MAAAA,CAAAA,KAAAA;AADD,O,MAEO;AACNA,QAAAA,IAAI,CAAJA,WAAAA,CAAAA,KAAAA;;AA9BFD,KAAAA;AADD,G;AAHD,CAAe,CAAf;;AAwCA,SAAA,kBAAA,CAAA,QAAA,EAAsC;SAC9BD,MAAM,CAACA,MAAM,CAACK,QAAQ,CAAfL,MAAM,CAANA,CAAPA,MAAM,CAANA,CAAAA,IAAAA,KAAAA,QAAAA,IAA4DK,QAAQ,CAARA,MAAAA,CAAAA,MAAAA,CAAAA,KAAAA,KAAnE,M","sourcesContent":["import parser from 'postcss-selector-parser';\nimport postcss from 'postcss';\n\nconst selectorRegExp = /:has/;\n\nexport default postcss.plugin('css-has-pseudo', opts => {\n\tconst preserve = Boolean('preserve' in Object(opts) ? opts.preserve : true);\n\n\treturn root => {\n\t\troot.walkRules(selectorRegExp, rule => {\n\t\t\tconst modifiedSelector = parser(selectors => {\n\t\t\t\tselectors.walkPseudos(selector => {\n\t\t\t\t\tif (selector.value === ':has' && selector.nodes) {\n\t\t\t\t\t\tconst isNotHas = checkIfParentIsNot(selector);\n\t\t\t\t\t\tselector.value = isNotHas ? ':not-has' : ':has';\n\n\t\t\t\t\t\tconst attribute = parser.attribute({\n\t\t\t\t\t\t\tattribute: encodeURIComponent(String(selector))\n\t\t\t\t\t\t\t.replace(/%3A/g, ':')\n\t\t\t\t\t\t\t.replace(/%5B/g, '[')\n\t\t\t\t\t\t\t.replace(/%5D/g, ']')\n\t\t\t\t\t\t\t.replace(/%2C/g, ',')\n\t\t\t\t\t\t\t.replace(/[():%\\[\\],]/g, '\\\\$&')\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (isNotHas) {\n\t\t\t\t\t\t\tselector.parent.parent.replaceWith(attribute);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tselector.replaceWith(attribute);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}).processSync(rule.selector);\n\n\t\t\tconst clone = rule.clone({ selector: modifiedSelector });\n\n\t\t\tif (preserve) {\n\t\t\t\trule.before(clone);\n\t\t\t} else {\n\t\t\t\trule.replaceWith(clone);\n\t\t\t}\n\t\t});\n\t};\n});\n\nfunction checkIfParentIsNot(selector) {\n\treturn Object(Object(selector.parent).parent).type === 'pseudo' && selector.parent.parent.value === ':not';\n}\n"]},"metadata":{},"sourceType":"module"}