{"ast":null,"code":"/**\n * @fileoverview Rule to disallow use of Object.prototype builtins on objects\n * @author Andrew Levine\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow calling some `Object.prototype` methods directly on objects\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-prototype-builtins\"\n    },\n    schema: []\n  },\n\n  create(context) {\n    const DISALLOWED_PROPS = [\"hasOwnProperty\", \"isPrototypeOf\", \"propertyIsEnumerable\"];\n    /**\n     * Reports if a disallowed property is used in a CallExpression\n     * @param {ASTNode} node The CallExpression node.\n     * @returns {void}\n     */\n\n    function disallowBuiltIns(node) {\n      if (node.callee.type !== \"MemberExpression\" || node.callee.computed) {\n        return;\n      }\n\n      const propName = node.callee.property.name;\n\n      if (DISALLOWED_PROPS.indexOf(propName) > -1) {\n        context.report({\n          message: \"Do not access Object.prototype method '{{prop}}' from target object.\",\n          loc: node.callee.property.loc.start,\n          data: {\n            prop: propName\n          },\n          node\n        });\n      }\n    }\n\n    return {\n      CallExpression: disallowBuiltIns\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-prototype-builtins.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","create","context","DISALLOWED_PROPS","disallowBuiltIns","node","callee","computed","propName","property","name","indexOf","report","message","loc","start","data","prop","CallExpression"],"mappings":"AAAA;;;;AAIA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,SADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,sEADX;AAEFC,MAAAA,QAAQ,EAAE,iBAFR;AAGFC,MAAAA,WAAW,EAAE,IAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE;AAVN,GADO;;AAcbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,gBAAgB,GAAG,CACrB,gBADqB,EAErB,eAFqB,EAGrB,sBAHqB,CAAzB;AAMA;;;;;;AAKA,aAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC5B,UAAIA,IAAI,CAACC,MAAL,CAAYZ,IAAZ,KAAqB,kBAArB,IAA2CW,IAAI,CAACC,MAAL,CAAYC,QAA3D,EAAqE;AACjE;AACH;;AACD,YAAMC,QAAQ,GAAGH,IAAI,CAACC,MAAL,CAAYG,QAAZ,CAAqBC,IAAtC;;AAEA,UAAIP,gBAAgB,CAACQ,OAAjB,CAAyBH,QAAzB,IAAqC,CAAC,CAA1C,EAA6C;AACzCN,QAAAA,OAAO,CAACU,MAAR,CAAe;AACXC,UAAAA,OAAO,EAAE,sEADE;AAEXC,UAAAA,GAAG,EAAET,IAAI,CAACC,MAAL,CAAYG,QAAZ,CAAqBK,GAArB,CAAyBC,KAFnB;AAGXC,UAAAA,IAAI,EAAE;AAAEC,YAAAA,IAAI,EAAET;AAAR,WAHK;AAIXH,UAAAA;AAJW,SAAf;AAMH;AACJ;;AAED,WAAO;AACHa,MAAAA,cAAc,EAAEd;AADb,KAAP;AAGH;;AA7CY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to disallow use of Object.prototype builtins on objects\n * @author Andrew Levine\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow calling some `Object.prototype` methods directly on objects\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-prototype-builtins\"\n        },\n\n        schema: []\n    },\n\n    create(context) {\n        const DISALLOWED_PROPS = [\n            \"hasOwnProperty\",\n            \"isPrototypeOf\",\n            \"propertyIsEnumerable\"\n        ];\n\n        /**\n         * Reports if a disallowed property is used in a CallExpression\n         * @param {ASTNode} node The CallExpression node.\n         * @returns {void}\n         */\n        function disallowBuiltIns(node) {\n            if (node.callee.type !== \"MemberExpression\" || node.callee.computed) {\n                return;\n            }\n            const propName = node.callee.property.name;\n\n            if (DISALLOWED_PROPS.indexOf(propName) > -1) {\n                context.report({\n                    message: \"Do not access Object.prototype method '{{prop}}' from target object.\",\n                    loc: node.callee.property.loc.start,\n                    data: { prop: propName },\n                    node\n                });\n            }\n        }\n\n        return {\n            CallExpression: disallowBuiltIns\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}