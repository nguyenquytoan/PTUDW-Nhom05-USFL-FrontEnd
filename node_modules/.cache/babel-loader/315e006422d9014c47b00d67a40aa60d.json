{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst errors = require('./errors');\n\nmodule.exports = regexp => {\n  if (!(regexp instanceof RegExp)) {\n    throw new Error(errors['invalid-dont-cache-bust']);\n  }\n\n  return originalManifest => {\n    const manifest = originalManifest.map(entry => {\n      if (typeof entry.url !== 'string') {\n        throw new Error(errors['manifest-entry-bad-url']);\n      }\n\n      if (entry.url.match(regexp)) {\n        delete entry.revision;\n      }\n\n      return entry;\n    });\n    return {\n      manifest\n    };\n  };\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-build/src/lib/no-revision-for-urls-matching-transform.js"],"names":["errors","require","module","exports","regexp","RegExp","Error","originalManifest","manifest","map","entry","url","match","revision"],"mappings":"AAAA;;;;;;;AAQA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEAC,MAAM,CAACC,OAAP,GAAkBC,MAAD,IAAY;AAC3B,MAAI,EAAEA,MAAM,YAAYC,MAApB,CAAJ,EAAiC;AAC/B,UAAM,IAAIC,KAAJ,CAAUN,MAAM,CAAC,yBAAD,CAAhB,CAAN;AACD;;AAED,SAAQO,gBAAD,IAAsB;AAC3B,UAAMC,QAAQ,GAAGD,gBAAgB,CAACE,GAAjB,CAAsBC,KAAD,IAAW;AAC/C,UAAI,OAAOA,KAAK,CAACC,GAAb,KAAqB,QAAzB,EAAmC;AACjC,cAAM,IAAIL,KAAJ,CAAUN,MAAM,CAAC,wBAAD,CAAhB,CAAN;AACD;;AAED,UAAIU,KAAK,CAACC,GAAN,CAAUC,KAAV,CAAgBR,MAAhB,CAAJ,EAA6B;AAC3B,eAAOM,KAAK,CAACG,QAAb;AACD;;AAED,aAAOH,KAAP;AACD,KAVgB,CAAjB;AAYA,WAAO;AAACF,MAAAA;AAAD,KAAP;AACD,GAdD;AAeD,CApBD","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst errors = require('./errors');\n\nmodule.exports = (regexp) => {\n  if (!(regexp instanceof RegExp)) {\n    throw new Error(errors['invalid-dont-cache-bust']);\n  }\n\n  return (originalManifest) => {\n    const manifest = originalManifest.map((entry) => {\n      if (typeof entry.url !== 'string') {\n        throw new Error(errors['manifest-entry-bad-url']);\n      }\n\n      if (entry.url.match(regexp)) {\n        delete entry.revision;\n      }\n\n      return entry;\n    });\n\n    return {manifest};\n  };\n};\n"]},"metadata":{},"sourceType":"script"}