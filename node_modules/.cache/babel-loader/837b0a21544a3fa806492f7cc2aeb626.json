{"ast":null,"code":"\"use strict\";\n\nvar _helpers = require(\"./util/helpers\");\n\n(0, _helpers.test)('tag selector', 'h1', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[0].type, 'tag');\n});\n(0, _helpers.test)('multiple tag selectors', 'h1, h2', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[1].nodes[0].value, 'h2');\n});\n(0, _helpers.test)('extraneous non-combinating whitespace', '  h1   ,  h2   ', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[0].spaces.before, '  ');\n  t.deepEqual(tree.nodes[0].nodes[0].spaces.after, '   ');\n  t.deepEqual(tree.nodes[1].nodes[0].value, 'h2');\n  t.deepEqual(tree.nodes[1].nodes[0].spaces.before, '  ');\n  t.deepEqual(tree.nodes[1].nodes[0].spaces.after, '   ');\n});\n(0, _helpers.test)('tag with trailing comma', 'h1,', function (t, tree) {\n  t.deepEqual(tree.trailingComma, true);\n});\n(0, _helpers.test)('tag with trailing slash', 'h1\\\\', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1\\\\');\n});\n(0, _helpers.test)('tag with attribute', 'label[for=\"email\"]', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'label');\n  t.deepEqual(tree.nodes[0].nodes[0].type, 'tag');\n  t.deepEqual(tree.nodes[0].nodes[1].value, 'email');\n  t.deepEqual(tree.nodes[0].nodes[1].attribute, 'for');\n  t.deepEqual(tree.nodes[0].nodes[1].operator, '=');\n  t.deepEqual(tree.nodes[0].nodes[1].type, 'attribute');\n  t.deepEqual(tree.nodes[0].nodes[1].quoteMark, '\"');\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-selector-parser/dist/__tests__/tags.js"],"names":["_helpers","require","test","t","tree","deepEqual","nodes","value","type","spaces","before","after","trailingComma","attribute","operator","quoteMark"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _helpers = require(\"./util/helpers\");\n\n(0, _helpers.test)('tag selector', 'h1', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[0].type, 'tag');\n});\n(0, _helpers.test)('multiple tag selectors', 'h1, h2', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[1].nodes[0].value, 'h2');\n});\n(0, _helpers.test)('extraneous non-combinating whitespace', '  h1   ,  h2   ', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1');\n  t.deepEqual(tree.nodes[0].nodes[0].spaces.before, '  ');\n  t.deepEqual(tree.nodes[0].nodes[0].spaces.after, '   ');\n  t.deepEqual(tree.nodes[1].nodes[0].value, 'h2');\n  t.deepEqual(tree.nodes[1].nodes[0].spaces.before, '  ');\n  t.deepEqual(tree.nodes[1].nodes[0].spaces.after, '   ');\n});\n(0, _helpers.test)('tag with trailing comma', 'h1,', function (t, tree) {\n  t.deepEqual(tree.trailingComma, true);\n});\n(0, _helpers.test)('tag with trailing slash', 'h1\\\\', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'h1\\\\');\n});\n(0, _helpers.test)('tag with attribute', 'label[for=\"email\"]', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, 'label');\n  t.deepEqual(tree.nodes[0].nodes[0].type, 'tag');\n  t.deepEqual(tree.nodes[0].nodes[1].value, 'email');\n  t.deepEqual(tree.nodes[0].nodes[1].attribute, 'for');\n  t.deepEqual(tree.nodes[0].nodes[1].operator, '=');\n  t.deepEqual(tree.nodes[0].nodes[1].type, 'attribute');\n  t.deepEqual(tree.nodes[0].nodes[1].quoteMark, '\"');\n});"]},"metadata":{},"sourceType":"script"}