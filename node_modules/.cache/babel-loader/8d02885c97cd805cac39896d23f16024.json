{"ast":null,"code":"/**\n * @fileoverview Rule for disallowing require() outside of the top-level module context\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nconst ACCEPTABLE_PARENTS = [\"AssignmentExpression\", \"VariableDeclarator\", \"MemberExpression\", \"ExpressionStatement\", \"CallExpression\", \"ConditionalExpression\", \"Program\", \"VariableDeclaration\"];\n/**\n * Finds the eslint-scope reference in the given scope.\n * @param {Object} scope The scope to search.\n * @param {ASTNode} node The identifier node.\n * @returns {Reference|null} Returns the found reference or null if none were found.\n */\n\nfunction findReference(scope, node) {\n  const references = scope.references.filter(reference => reference.identifier.range[0] === node.range[0] && reference.identifier.range[1] === node.range[1]);\n  /* istanbul ignore else: correctly returns null */\n\n  if (references.length === 1) {\n    return references[0];\n  }\n\n  return null;\n}\n/**\n * Checks if the given identifier node is shadowed in the given scope.\n * @param {Object} scope The current scope.\n * @param {ASTNode} node The identifier node to check.\n * @returns {boolean} Whether or not the name is shadowed.\n */\n\n\nfunction isShadowed(scope, node) {\n  const reference = findReference(scope, node);\n  return reference && reference.resolved && reference.resolved.defs.length > 0;\n}\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require `require()` calls to be placed at top-level module scope\",\n      category: \"Node.js and CommonJS\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/global-require\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Unexpected require().\"\n    }\n  },\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        const currentScope = context.getScope();\n\n        if (node.callee.name === \"require\" && !isShadowed(currentScope, node.callee)) {\n          const isGoodRequire = context.getAncestors().every(parent => ACCEPTABLE_PARENTS.indexOf(parent.type) > -1);\n\n          if (!isGoodRequire) {\n            context.report({\n              node,\n              messageId: \"unexpected\"\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/global-require.js"],"names":["ACCEPTABLE_PARENTS","findReference","scope","node","references","filter","reference","identifier","range","length","isShadowed","resolved","defs","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","CallExpression","currentScope","getScope","callee","name","isGoodRequire","getAncestors","every","parent","indexOf","report","messageId"],"mappings":"AAAA;;;;AAKA;;AAEA,MAAMA,kBAAkB,GAAG,CACvB,sBADuB,EAEvB,oBAFuB,EAGvB,kBAHuB,EAIvB,qBAJuB,EAKvB,gBALuB,EAMvB,uBANuB,EAOvB,SAPuB,EAQvB,qBARuB,CAA3B;AAWA;;;;;;;AAMA,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAoC;AAChC,QAAMC,UAAU,GAAGF,KAAK,CAACE,UAAN,CAAiBC,MAAjB,CAAwBC,SAAS,IAAIA,SAAS,CAACC,UAAV,CAAqBC,KAArB,CAA2B,CAA3B,MAAkCL,IAAI,CAACK,KAAL,CAAW,CAAX,CAAlC,IAChDF,SAAS,CAACC,UAAV,CAAqBC,KAArB,CAA2B,CAA3B,MAAkCL,IAAI,CAACK,KAAL,CAAW,CAAX,CADvB,CAAnB;AAGA;;AACA,MAAIJ,UAAU,CAACK,MAAX,KAAsB,CAA1B,EAA6B;AACzB,WAAOL,UAAU,CAAC,CAAD,CAAjB;AACH;;AACD,SAAO,IAAP;AAEH;AAED;;;;;;;;AAMA,SAASM,UAAT,CAAoBR,KAApB,EAA2BC,IAA3B,EAAiC;AAC7B,QAAMG,SAAS,GAAGL,aAAa,CAACC,KAAD,EAAQC,IAAR,CAA/B;AAEA,SAAOG,SAAS,IAAIA,SAAS,CAACK,QAAvB,IAAmCL,SAAS,CAACK,QAAV,CAAmBC,IAAnB,CAAwBH,MAAxB,GAAiC,CAA3E;AACH;;AAEDI,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,kEADX;AAEFC,MAAAA,QAAQ,EAAE,sBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,EAVN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,WAAO;AACHC,MAAAA,cAAc,CAACxB,IAAD,EAAO;AACjB,cAAMyB,YAAY,GAAGF,OAAO,CAACG,QAAR,EAArB;;AAEA,YAAI1B,IAAI,CAAC2B,MAAL,CAAYC,IAAZ,KAAqB,SAArB,IAAkC,CAACrB,UAAU,CAACkB,YAAD,EAAezB,IAAI,CAAC2B,MAApB,CAAjD,EAA8E;AAC1E,gBAAME,aAAa,GAAGN,OAAO,CAACO,YAAR,GAAuBC,KAAvB,CAA6BC,MAAM,IAAInC,kBAAkB,CAACoC,OAAnB,CAA2BD,MAAM,CAACnB,IAAlC,IAA0C,CAAC,CAAlF,CAAtB;;AAEA,cAAI,CAACgB,aAAL,EAAoB;AAChBN,YAAAA,OAAO,CAACW,MAAR,CAAe;AAAElC,cAAAA,IAAF;AAAQmC,cAAAA,SAAS,EAAE;AAAnB,aAAf;AACH;AACJ;AACJ;;AAXE,KAAP;AAaH;;AA/BY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule for disallowing require() outside of the top-level module context\n * @author Jamund Ferguson\n */\n\n\"use strict\";\n\nconst ACCEPTABLE_PARENTS = [\n    \"AssignmentExpression\",\n    \"VariableDeclarator\",\n    \"MemberExpression\",\n    \"ExpressionStatement\",\n    \"CallExpression\",\n    \"ConditionalExpression\",\n    \"Program\",\n    \"VariableDeclaration\"\n];\n\n/**\n * Finds the eslint-scope reference in the given scope.\n * @param {Object} scope The scope to search.\n * @param {ASTNode} node The identifier node.\n * @returns {Reference|null} Returns the found reference or null if none were found.\n */\nfunction findReference(scope, node) {\n    const references = scope.references.filter(reference => reference.identifier.range[0] === node.range[0] &&\n            reference.identifier.range[1] === node.range[1]);\n\n    /* istanbul ignore else: correctly returns null */\n    if (references.length === 1) {\n        return references[0];\n    }\n    return null;\n\n}\n\n/**\n * Checks if the given identifier node is shadowed in the given scope.\n * @param {Object} scope The current scope.\n * @param {ASTNode} node The identifier node to check.\n * @returns {boolean} Whether or not the name is shadowed.\n */\nfunction isShadowed(scope, node) {\n    const reference = findReference(scope, node);\n\n    return reference && reference.resolved && reference.resolved.defs.length > 0;\n}\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require `require()` calls to be placed at top-level module scope\",\n            category: \"Node.js and CommonJS\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/global-require\"\n        },\n\n        schema: [],\n        messages: {\n            unexpected: \"Unexpected require().\"\n        }\n    },\n\n    create(context) {\n        return {\n            CallExpression(node) {\n                const currentScope = context.getScope();\n\n                if (node.callee.name === \"require\" && !isShadowed(currentScope, node.callee)) {\n                    const isGoodRequire = context.getAncestors().every(parent => ACCEPTABLE_PARENTS.indexOf(parent.type) > -1);\n\n                    if (!isGoodRequire) {\n                        context.report({ node, messageId: \"unexpected\" });\n                    }\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}