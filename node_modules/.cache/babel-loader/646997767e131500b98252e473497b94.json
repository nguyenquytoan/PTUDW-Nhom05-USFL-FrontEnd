{"ast":null,"code":"import { Node, SourceLocation, Token, addLooseExports, defaultOptions, getLineInfo, isNewLine, lineBreak, lineBreakG, tokTypes, tokenizer } from './acorn.es';\n\nfunction noop() {} // Registered plugins\n\n\nvar pluginsLoose = {};\n\nvar LooseParser = function LooseParser(input, options) {\n  if (options === void 0) options = {};\n  this.toks = tokenizer(input, options);\n  this.options = this.toks.options;\n  this.input = this.toks.input;\n  this.tok = this.last = {\n    type: tokTypes.eof,\n    start: 0,\n    end: 0\n  };\n  this.tok.validateRegExpFlags = noop;\n  this.tok.validateRegExpPattern = noop;\n\n  if (this.options.locations) {\n    var here = this.toks.curPosition();\n    this.tok.loc = new SourceLocation(this.toks, here, here);\n  }\n\n  this.ahead = []; // Tokens ahead\n\n  this.context = []; // Indentation contexted\n\n  this.curIndent = 0;\n  this.curLineStart = 0;\n  this.nextLineStart = this.lineEnd(this.curLineStart) + 1;\n  this.inAsync = false;\n  this.inFunction = false; // Load plugins\n\n  this.options.pluginsLoose = options.pluginsLoose || {};\n  this.loadPlugins(this.options.pluginsLoose);\n};\n\nLooseParser.prototype.startNode = function startNode() {\n  return new Node(this.toks, this.tok.start, this.options.locations ? this.tok.loc.start : null);\n};\n\nLooseParser.prototype.storeCurrentPos = function storeCurrentPos() {\n  return this.options.locations ? [this.tok.start, this.tok.loc.start] : this.tok.start;\n};\n\nLooseParser.prototype.startNodeAt = function startNodeAt(pos) {\n  if (this.options.locations) {\n    return new Node(this.toks, pos[0], pos[1]);\n  } else {\n    return new Node(this.toks, pos);\n  }\n};\n\nLooseParser.prototype.finishNode = function finishNode(node, type) {\n  node.type = type;\n  node.end = this.last.end;\n\n  if (this.options.locations) {\n    node.loc.end = this.last.loc.end;\n  }\n\n  if (this.options.ranges) {\n    node.range[1] = this.last.end;\n  }\n\n  return node;\n};\n\nLooseParser.prototype.dummyNode = function dummyNode(type) {\n  var dummy = this.startNode();\n  dummy.type = type;\n  dummy.end = dummy.start;\n\n  if (this.options.locations) {\n    dummy.loc.end = dummy.loc.start;\n  }\n\n  if (this.options.ranges) {\n    dummy.range[1] = dummy.start;\n  }\n\n  this.last = {\n    type: tokTypes.name,\n    start: dummy.start,\n    end: dummy.start,\n    loc: dummy.loc\n  };\n  return dummy;\n};\n\nLooseParser.prototype.dummyIdent = function dummyIdent() {\n  var dummy = this.dummyNode(\"Identifier\");\n  dummy.name = \"✖\";\n  return dummy;\n};\n\nLooseParser.prototype.dummyString = function dummyString() {\n  var dummy = this.dummyNode(\"Literal\");\n  dummy.value = dummy.raw = \"✖\";\n  return dummy;\n};\n\nLooseParser.prototype.eat = function eat(type) {\n  if (this.tok.type === type) {\n    this.next();\n    return true;\n  } else {\n    return false;\n  }\n};\n\nLooseParser.prototype.isContextual = function isContextual(name) {\n  return this.tok.type === tokTypes.name && this.tok.value === name;\n};\n\nLooseParser.prototype.eatContextual = function eatContextual(name) {\n  return this.tok.value === name && this.eat(tokTypes.name);\n};\n\nLooseParser.prototype.canInsertSemicolon = function canInsertSemicolon() {\n  return this.tok.type === tokTypes.eof || this.tok.type === tokTypes.braceR || lineBreak.test(this.input.slice(this.last.end, this.tok.start));\n};\n\nLooseParser.prototype.semicolon = function semicolon() {\n  return this.eat(tokTypes.semi);\n};\n\nLooseParser.prototype.expect = function expect(type) {\n  var this$1 = this;\n\n  if (this.eat(type)) {\n    return true;\n  }\n\n  for (var i = 1; i <= 2; i++) {\n    if (this$1.lookAhead(i).type === type) {\n      for (var j = 0; j < i; j++) {\n        this$1.next();\n      }\n\n      return true;\n    }\n  }\n};\n\nLooseParser.prototype.pushCx = function pushCx() {\n  this.context.push(this.curIndent);\n};\n\nLooseParser.prototype.popCx = function popCx() {\n  this.curIndent = this.context.pop();\n};\n\nLooseParser.prototype.lineEnd = function lineEnd(pos) {\n  while (pos < this.input.length && !isNewLine(this.input.charCodeAt(pos))) {\n    ++pos;\n  }\n\n  return pos;\n};\n\nLooseParser.prototype.indentationAfter = function indentationAfter(pos) {\n  var this$1 = this;\n\n  for (var count = 0;; ++pos) {\n    var ch = this$1.input.charCodeAt(pos);\n\n    if (ch === 32) {\n      ++count;\n    } else if (ch === 9) {\n      count += this$1.options.tabSize;\n    } else {\n      return count;\n    }\n  }\n};\n\nLooseParser.prototype.closes = function closes(closeTok, indent, line, blockHeuristic) {\n  if (this.tok.type === closeTok || this.tok.type === tokTypes.eof) {\n    return true;\n  }\n\n  return line !== this.curLineStart && this.curIndent < indent && this.tokenStartsLine() && (!blockHeuristic || this.nextLineStart >= this.input.length || this.indentationAfter(this.nextLineStart) < indent);\n};\n\nLooseParser.prototype.tokenStartsLine = function tokenStartsLine() {\n  var this$1 = this;\n\n  for (var p = this.tok.start - 1; p >= this.curLineStart; --p) {\n    var ch = this$1.input.charCodeAt(p);\n\n    if (ch !== 9 && ch !== 32) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nLooseParser.prototype.extend = function extend(name, f) {\n  this[name] = f(this[name]);\n};\n\nLooseParser.prototype.loadPlugins = function loadPlugins(pluginConfigs) {\n  var this$1 = this;\n\n  for (var name in pluginConfigs) {\n    var plugin = pluginsLoose[name];\n\n    if (!plugin) {\n      throw new Error(\"Plugin '\" + name + \"' not found\");\n    }\n\n    plugin(this$1, pluginConfigs[name]);\n  }\n};\n\nLooseParser.prototype.parse = function parse() {\n  this.next();\n  return this.parseTopLevel();\n};\n\nvar lp = LooseParser.prototype;\n\nfunction isSpace(ch) {\n  return ch < 14 && ch > 8 || ch === 32 || ch === 160 || isNewLine(ch);\n}\n\nlp.next = function () {\n  var this$1 = this;\n  this.last = this.tok;\n\n  if (this.ahead.length) {\n    this.tok = this.ahead.shift();\n  } else {\n    this.tok = this.readToken();\n  }\n\n  if (this.tok.start >= this.nextLineStart) {\n    while (this.tok.start >= this.nextLineStart) {\n      this$1.curLineStart = this$1.nextLineStart;\n      this$1.nextLineStart = this$1.lineEnd(this$1.curLineStart) + 1;\n    }\n\n    this.curIndent = this.indentationAfter(this.curLineStart);\n  }\n};\n\nlp.readToken = function () {\n  var this$1 = this;\n\n  for (;;) {\n    try {\n      this$1.toks.next();\n\n      if (this$1.toks.type === tokTypes.dot && this$1.input.substr(this$1.toks.end, 1) === \".\" && this$1.options.ecmaVersion >= 6) {\n        this$1.toks.end++;\n        this$1.toks.type = tokTypes.ellipsis;\n      }\n\n      return new Token(this$1.toks);\n    } catch (e) {\n      if (!(e instanceof SyntaxError)) {\n        throw e;\n      } // Try to skip some text, based on the error message, and then continue\n\n\n      var msg = e.message,\n          pos = e.raisedAt,\n          replace = true;\n\n      if (/unterminated/i.test(msg)) {\n        pos = this$1.lineEnd(e.pos + 1);\n\n        if (/string/.test(msg)) {\n          replace = {\n            start: e.pos,\n            end: pos,\n            type: tokTypes.string,\n            value: this$1.input.slice(e.pos + 1, pos)\n          };\n        } else if (/regular expr/i.test(msg)) {\n          var re = this$1.input.slice(e.pos, pos);\n\n          try {\n            re = new RegExp(re);\n          } catch (e) {\n            /* ignore compilation error due to new syntax */\n          }\n\n          replace = {\n            start: e.pos,\n            end: pos,\n            type: tokTypes.regexp,\n            value: re\n          };\n        } else if (/template/.test(msg)) {\n          replace = {\n            start: e.pos,\n            end: pos,\n            type: tokTypes.template,\n            value: this$1.input.slice(e.pos, pos)\n          };\n        } else {\n          replace = false;\n        }\n      } else if (/invalid (unicode|regexp|number)|expecting unicode|octal literal|is reserved|directly after number|expected number in radix/i.test(msg)) {\n        while (pos < this.input.length && !isSpace(this.input.charCodeAt(pos))) {\n          ++pos;\n        }\n      } else if (/character escape|expected hexadecimal/i.test(msg)) {\n        while (pos < this.input.length) {\n          var ch = this$1.input.charCodeAt(pos++);\n\n          if (ch === 34 || ch === 39 || isNewLine(ch)) {\n            break;\n          }\n        }\n      } else if (/unexpected character/i.test(msg)) {\n        pos++;\n        replace = false;\n      } else if (/regular expression/i.test(msg)) {\n        replace = true;\n      } else {\n        throw e;\n      }\n\n      this$1.resetTo(pos);\n\n      if (replace === true) {\n        replace = {\n          start: pos,\n          end: pos,\n          type: tokTypes.name,\n          value: \"✖\"\n        };\n      }\n\n      if (replace) {\n        if (this$1.options.locations) {\n          replace.loc = new SourceLocation(this$1.toks, getLineInfo(this$1.input, replace.start), getLineInfo(this$1.input, replace.end));\n        }\n\n        return replace;\n      }\n    }\n  }\n};\n\nlp.resetTo = function (pos) {\n  var this$1 = this;\n  this.toks.pos = pos;\n  var ch = this.input.charAt(pos - 1);\n  this.toks.exprAllowed = !ch || /[[{(,;:?/*=+\\-~!|&%^<>]/.test(ch) || /[enwfd]/.test(ch) && /\\b(case|else|return|throw|new|in|(instance|type)?of|delete|void)$/.test(this.input.slice(pos - 10, pos));\n\n  if (this.options.locations) {\n    this.toks.curLine = 1;\n    this.toks.lineStart = lineBreakG.lastIndex = 0;\n    var match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < pos) {\n      ++this$1.toks.curLine;\n      this$1.toks.lineStart = match.index + match[0].length;\n    }\n  }\n};\n\nlp.lookAhead = function (n) {\n  var this$1 = this;\n\n  while (n > this.ahead.length) {\n    this$1.ahead.push(this$1.readToken());\n  }\n\n  return this.ahead[n - 1];\n};\n\nfunction isDummy(node) {\n  return node.name === \"✖\";\n}\n\nvar lp$1 = LooseParser.prototype;\n\nlp$1.parseTopLevel = function () {\n  var this$1 = this;\n  var node = this.startNodeAt(this.options.locations ? [0, getLineInfo(this.input, 0)] : 0);\n  node.body = [];\n\n  while (this.tok.type !== tokTypes.eof) {\n    node.body.push(this$1.parseStatement());\n  }\n\n  this.toks.adaptDirectivePrologue(node.body);\n  this.last = this.tok;\n\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n\n  return this.finishNode(node, \"Program\");\n};\n\nlp$1.parseStatement = function () {\n  var this$1 = this;\n  var starttype = this.tok.type,\n      node = this.startNode(),\n      kind;\n\n  if (this.toks.isLet()) {\n    starttype = tokTypes._var;\n    kind = \"let\";\n  }\n\n  switch (starttype) {\n    case tokTypes._break:\n    case tokTypes._continue:\n      this.next();\n      var isBreak = starttype === tokTypes._break;\n\n      if (this.semicolon() || this.canInsertSemicolon()) {\n        node.label = null;\n      } else {\n        node.label = this.tok.type === tokTypes.name ? this.parseIdent() : null;\n        this.semicolon();\n      }\n\n      return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n\n    case tokTypes._debugger:\n      this.next();\n      this.semicolon();\n      return this.finishNode(node, \"DebuggerStatement\");\n\n    case tokTypes._do:\n      this.next();\n      node.body = this.parseStatement();\n      node.test = this.eat(tokTypes._while) ? this.parseParenExpression() : this.dummyIdent();\n      this.semicolon();\n      return this.finishNode(node, \"DoWhileStatement\");\n\n    case tokTypes._for:\n      this.next(); // `for` keyword\n\n      var isAwait = this.options.ecmaVersion >= 9 && this.inAsync && this.eatContextual(\"await\");\n      this.pushCx();\n      this.expect(tokTypes.parenL);\n\n      if (this.tok.type === tokTypes.semi) {\n        return this.parseFor(node, null);\n      }\n\n      var isLet = this.toks.isLet();\n\n      if (isLet || this.tok.type === tokTypes._var || this.tok.type === tokTypes._const) {\n        var init$1 = this.parseVar(true, isLet ? \"let\" : this.tok.value);\n\n        if (init$1.declarations.length === 1 && (this.tok.type === tokTypes._in || this.isContextual(\"of\"))) {\n          if (this.options.ecmaVersion >= 9 && this.tok.type !== tokTypes._in) {\n            node.await = isAwait;\n          }\n\n          return this.parseForIn(node, init$1);\n        }\n\n        return this.parseFor(node, init$1);\n      }\n\n      var init = this.parseExpression(true);\n\n      if (this.tok.type === tokTypes._in || this.isContextual(\"of\")) {\n        if (this.options.ecmaVersion >= 9 && this.tok.type !== tokTypes._in) {\n          node.await = isAwait;\n        }\n\n        return this.parseForIn(node, this.toAssignable(init));\n      }\n\n      return this.parseFor(node, init);\n\n    case tokTypes._function:\n      this.next();\n      return this.parseFunction(node, true);\n\n    case tokTypes._if:\n      this.next();\n      node.test = this.parseParenExpression();\n      node.consequent = this.parseStatement();\n      node.alternate = this.eat(tokTypes._else) ? this.parseStatement() : null;\n      return this.finishNode(node, \"IfStatement\");\n\n    case tokTypes._return:\n      this.next();\n\n      if (this.eat(tokTypes.semi) || this.canInsertSemicolon()) {\n        node.argument = null;\n      } else {\n        node.argument = this.parseExpression();\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"ReturnStatement\");\n\n    case tokTypes._switch:\n      var blockIndent = this.curIndent,\n          line = this.curLineStart;\n      this.next();\n      node.discriminant = this.parseParenExpression();\n      node.cases = [];\n      this.pushCx();\n      this.expect(tokTypes.braceL);\n      var cur;\n\n      while (!this.closes(tokTypes.braceR, blockIndent, line, true)) {\n        if (this$1.tok.type === tokTypes._case || this$1.tok.type === tokTypes._default) {\n          var isCase = this$1.tok.type === tokTypes._case;\n\n          if (cur) {\n            this$1.finishNode(cur, \"SwitchCase\");\n          }\n\n          node.cases.push(cur = this$1.startNode());\n          cur.consequent = [];\n          this$1.next();\n\n          if (isCase) {\n            cur.test = this$1.parseExpression();\n          } else {\n            cur.test = null;\n          }\n\n          this$1.expect(tokTypes.colon);\n        } else {\n          if (!cur) {\n            node.cases.push(cur = this$1.startNode());\n            cur.consequent = [];\n            cur.test = null;\n          }\n\n          cur.consequent.push(this$1.parseStatement());\n        }\n      }\n\n      if (cur) {\n        this.finishNode(cur, \"SwitchCase\");\n      }\n\n      this.popCx();\n      this.eat(tokTypes.braceR);\n      return this.finishNode(node, \"SwitchStatement\");\n\n    case tokTypes._throw:\n      this.next();\n      node.argument = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(node, \"ThrowStatement\");\n\n    case tokTypes._try:\n      this.next();\n      node.block = this.parseBlock();\n      node.handler = null;\n\n      if (this.tok.type === tokTypes._catch) {\n        var clause = this.startNode();\n        this.next();\n\n        if (this.eat(tokTypes.parenL)) {\n          clause.param = this.toAssignable(this.parseExprAtom(), true);\n          this.expect(tokTypes.parenR);\n        } else {\n          clause.param = null;\n        }\n\n        clause.body = this.parseBlock();\n        node.handler = this.finishNode(clause, \"CatchClause\");\n      }\n\n      node.finalizer = this.eat(tokTypes._finally) ? this.parseBlock() : null;\n\n      if (!node.handler && !node.finalizer) {\n        return node.block;\n      }\n\n      return this.finishNode(node, \"TryStatement\");\n\n    case tokTypes._var:\n    case tokTypes._const:\n      return this.parseVar(false, kind || this.tok.value);\n\n    case tokTypes._while:\n      this.next();\n      node.test = this.parseParenExpression();\n      node.body = this.parseStatement();\n      return this.finishNode(node, \"WhileStatement\");\n\n    case tokTypes._with:\n      this.next();\n      node.object = this.parseParenExpression();\n      node.body = this.parseStatement();\n      return this.finishNode(node, \"WithStatement\");\n\n    case tokTypes.braceL:\n      return this.parseBlock();\n\n    case tokTypes.semi:\n      this.next();\n      return this.finishNode(node, \"EmptyStatement\");\n\n    case tokTypes._class:\n      return this.parseClass(true);\n\n    case tokTypes._import:\n      return this.parseImport();\n\n    case tokTypes._export:\n      return this.parseExport();\n\n    default:\n      if (this.toks.isAsyncFunction()) {\n        this.next();\n        this.next();\n        return this.parseFunction(node, true, true);\n      }\n\n      var expr = this.parseExpression();\n\n      if (isDummy(expr)) {\n        this.next();\n\n        if (this.tok.type === tokTypes.eof) {\n          return this.finishNode(node, \"EmptyStatement\");\n        }\n\n        return this.parseStatement();\n      } else if (starttype === tokTypes.name && expr.type === \"Identifier\" && this.eat(tokTypes.colon)) {\n        node.body = this.parseStatement();\n        node.label = expr;\n        return this.finishNode(node, \"LabeledStatement\");\n      } else {\n        node.expression = expr;\n        this.semicolon();\n        return this.finishNode(node, \"ExpressionStatement\");\n      }\n\n  }\n};\n\nlp$1.parseBlock = function () {\n  var this$1 = this;\n  var node = this.startNode();\n  this.pushCx();\n  this.expect(tokTypes.braceL);\n  var blockIndent = this.curIndent,\n      line = this.curLineStart;\n  node.body = [];\n\n  while (!this.closes(tokTypes.braceR, blockIndent, line, true)) {\n    node.body.push(this$1.parseStatement());\n  }\n\n  this.popCx();\n  this.eat(tokTypes.braceR);\n  return this.finishNode(node, \"BlockStatement\");\n};\n\nlp$1.parseFor = function (node, init) {\n  node.init = init;\n  node.test = node.update = null;\n\n  if (this.eat(tokTypes.semi) && this.tok.type !== tokTypes.semi) {\n    node.test = this.parseExpression();\n  }\n\n  if (this.eat(tokTypes.semi) && this.tok.type !== tokTypes.parenR) {\n    node.update = this.parseExpression();\n  }\n\n  this.popCx();\n  this.expect(tokTypes.parenR);\n  node.body = this.parseStatement();\n  return this.finishNode(node, \"ForStatement\");\n};\n\nlp$1.parseForIn = function (node, init) {\n  var type = this.tok.type === tokTypes._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  node.left = init;\n  node.right = this.parseExpression();\n  this.popCx();\n  this.expect(tokTypes.parenR);\n  node.body = this.parseStatement();\n  return this.finishNode(node, type);\n};\n\nlp$1.parseVar = function (noIn, kind) {\n  var this$1 = this;\n  var node = this.startNode();\n  node.kind = kind;\n  this.next();\n  node.declarations = [];\n\n  do {\n    var decl = this$1.startNode();\n    decl.id = this$1.options.ecmaVersion >= 6 ? this$1.toAssignable(this$1.parseExprAtom(), true) : this$1.parseIdent();\n    decl.init = this$1.eat(tokTypes.eq) ? this$1.parseMaybeAssign(noIn) : null;\n    node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"));\n  } while (this.eat(tokTypes.comma));\n\n  if (!node.declarations.length) {\n    var decl$1 = this.startNode();\n    decl$1.id = this.dummyIdent();\n    node.declarations.push(this.finishNode(decl$1, \"VariableDeclarator\"));\n  }\n\n  if (!noIn) {\n    this.semicolon();\n  }\n\n  return this.finishNode(node, \"VariableDeclaration\");\n};\n\nlp$1.parseClass = function (isStatement) {\n  var this$1 = this;\n  var node = this.startNode();\n  this.next();\n\n  if (this.tok.type === tokTypes.name) {\n    node.id = this.parseIdent();\n  } else if (isStatement === true) {\n    node.id = this.dummyIdent();\n  } else {\n    node.id = null;\n  }\n\n  node.superClass = this.eat(tokTypes._extends) ? this.parseExpression() : null;\n  node.body = this.startNode();\n  node.body.body = [];\n  this.pushCx();\n  var indent = this.curIndent + 1,\n      line = this.curLineStart;\n  this.eat(tokTypes.braceL);\n\n  if (this.curIndent + 1 < indent) {\n    indent = this.curIndent;\n    line = this.curLineStart;\n  }\n\n  while (!this.closes(tokTypes.braceR, indent, line)) {\n    if (this$1.semicolon()) {\n      continue;\n    }\n\n    var method = this$1.startNode(),\n        isGenerator = void 0,\n        isAsync = void 0;\n\n    if (this$1.options.ecmaVersion >= 6) {\n      method.static = false;\n      isGenerator = this$1.eat(tokTypes.star);\n    }\n\n    this$1.parsePropertyName(method);\n\n    if (isDummy(method.key)) {\n      if (isDummy(this$1.parseMaybeAssign())) {\n        this$1.next();\n      }\n\n      this$1.eat(tokTypes.comma);\n      continue;\n    }\n\n    if (method.key.type === \"Identifier\" && !method.computed && method.key.name === \"static\" && this$1.tok.type !== tokTypes.parenL && this$1.tok.type !== tokTypes.braceL) {\n      method.static = true;\n      isGenerator = this$1.eat(tokTypes.star);\n      this$1.parsePropertyName(method);\n    } else {\n      method.static = false;\n    }\n\n    if (!method.computed && method.key.type === \"Identifier\" && method.key.name === \"async\" && this$1.tok.type !== tokTypes.parenL && !this$1.canInsertSemicolon()) {\n      isAsync = true;\n      isGenerator = this$1.options.ecmaVersion >= 9 && this$1.eat(tokTypes.star);\n      this$1.parsePropertyName(method);\n    } else {\n      isAsync = false;\n    }\n\n    if (this$1.options.ecmaVersion >= 5 && method.key.type === \"Identifier\" && !method.computed && (method.key.name === \"get\" || method.key.name === \"set\") && this$1.tok.type !== tokTypes.parenL && this$1.tok.type !== tokTypes.braceL) {\n      method.kind = method.key.name;\n      this$1.parsePropertyName(method);\n      method.value = this$1.parseMethod(false);\n    } else {\n      if (!method.computed && !method.static && !isGenerator && !isAsync && (method.key.type === \"Identifier\" && method.key.name === \"constructor\" || method.key.type === \"Literal\" && method.key.value === \"constructor\")) {\n        method.kind = \"constructor\";\n      } else {\n        method.kind = \"method\";\n      }\n\n      method.value = this$1.parseMethod(isGenerator, isAsync);\n    }\n\n    node.body.body.push(this$1.finishNode(method, \"MethodDefinition\"));\n  }\n\n  this.popCx();\n\n  if (!this.eat(tokTypes.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start;\n\n    if (this.options.locations) {\n      this.last.loc.end = this.tok.loc.start;\n    }\n  }\n\n  this.semicolon();\n  this.finishNode(node.body, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n};\n\nlp$1.parseFunction = function (node, isStatement, isAsync) {\n  var oldInAsync = this.inAsync,\n      oldInFunction = this.inFunction;\n  this.initFunction(node);\n\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = this.eat(tokTypes.star);\n  }\n\n  if (this.options.ecmaVersion >= 8) {\n    node.async = !!isAsync;\n  }\n\n  if (this.tok.type === tokTypes.name) {\n    node.id = this.parseIdent();\n  } else if (isStatement === true) {\n    node.id = this.dummyIdent();\n  }\n\n  this.inAsync = node.async;\n  this.inFunction = true;\n  node.params = this.parseFunctionParams();\n  node.body = this.parseBlock();\n  this.toks.adaptDirectivePrologue(node.body.body);\n  this.inAsync = oldInAsync;\n  this.inFunction = oldInFunction;\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n};\n\nlp$1.parseExport = function () {\n  var node = this.startNode();\n  this.next();\n\n  if (this.eat(tokTypes.star)) {\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : this.dummyString();\n    return this.finishNode(node, \"ExportAllDeclaration\");\n  }\n\n  if (this.eat(tokTypes._default)) {\n    // export default (function foo() {}) // This is FunctionExpression.\n    var isAsync;\n\n    if (this.tok.type === tokTypes._function || (isAsync = this.toks.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      node.declaration = this.parseFunction(fNode, \"nullableID\", isAsync);\n    } else if (this.tok.type === tokTypes._class) {\n      node.declaration = this.parseClass(\"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ExportDefaultDeclaration\");\n  }\n\n  if (this.tok.type.keyword || this.toks.isLet() || this.toks.isAsyncFunction()) {\n    node.declaration = this.parseStatement();\n    node.specifiers = [];\n    node.source = null;\n  } else {\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifierList();\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null;\n    this.semicolon();\n  }\n\n  return this.finishNode(node, \"ExportNamedDeclaration\");\n};\n\nlp$1.parseImport = function () {\n  var node = this.startNode();\n  this.next();\n\n  if (this.tok.type === tokTypes.string) {\n    node.specifiers = [];\n    node.source = this.parseExprAtom();\n  } else {\n    var elt;\n\n    if (this.tok.type === tokTypes.name && this.tok.value !== \"from\") {\n      elt = this.startNode();\n      elt.local = this.parseIdent();\n      this.finishNode(elt, \"ImportDefaultSpecifier\");\n      this.eat(tokTypes.comma);\n    }\n\n    node.specifiers = this.parseImportSpecifierList();\n    node.source = this.eatContextual(\"from\") && this.tok.type === tokTypes.string ? this.parseExprAtom() : this.dummyString();\n\n    if (elt) {\n      node.specifiers.unshift(elt);\n    }\n  }\n\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\");\n};\n\nlp$1.parseImportSpecifierList = function () {\n  var this$1 = this;\n  var elts = [];\n\n  if (this.tok.type === tokTypes.star) {\n    var elt = this.startNode();\n    this.next();\n    elt.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent();\n    elts.push(this.finishNode(elt, \"ImportNamespaceSpecifier\"));\n  } else {\n    var indent = this.curIndent,\n        line = this.curLineStart,\n        continuedLine = this.nextLineStart;\n    this.pushCx();\n    this.eat(tokTypes.braceL);\n\n    if (this.curLineStart > continuedLine) {\n      continuedLine = this.curLineStart;\n    }\n\n    while (!this.closes(tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n      var elt$1 = this$1.startNode();\n\n      if (this$1.eat(tokTypes.star)) {\n        elt$1.local = this$1.eatContextual(\"as\") ? this$1.parseIdent() : this$1.dummyIdent();\n        this$1.finishNode(elt$1, \"ImportNamespaceSpecifier\");\n      } else {\n        if (this$1.isContextual(\"from\")) {\n          break;\n        }\n\n        elt$1.imported = this$1.parseIdent();\n\n        if (isDummy(elt$1.imported)) {\n          break;\n        }\n\n        elt$1.local = this$1.eatContextual(\"as\") ? this$1.parseIdent() : elt$1.imported;\n        this$1.finishNode(elt$1, \"ImportSpecifier\");\n      }\n\n      elts.push(elt$1);\n      this$1.eat(tokTypes.comma);\n    }\n\n    this.eat(tokTypes.braceR);\n    this.popCx();\n  }\n\n  return elts;\n};\n\nlp$1.parseExportSpecifierList = function () {\n  var this$1 = this;\n  var elts = [];\n  var indent = this.curIndent,\n      line = this.curLineStart,\n      continuedLine = this.nextLineStart;\n  this.pushCx();\n  this.eat(tokTypes.braceL);\n\n  if (this.curLineStart > continuedLine) {\n    continuedLine = this.curLineStart;\n  }\n\n  while (!this.closes(tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n    if (this$1.isContextual(\"from\")) {\n      break;\n    }\n\n    var elt = this$1.startNode();\n    elt.local = this$1.parseIdent();\n\n    if (isDummy(elt.local)) {\n      break;\n    }\n\n    elt.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent() : elt.local;\n    this$1.finishNode(elt, \"ExportSpecifier\");\n    elts.push(elt);\n    this$1.eat(tokTypes.comma);\n  }\n\n  this.eat(tokTypes.braceR);\n  this.popCx();\n  return elts;\n};\n\nvar lp$2 = LooseParser.prototype;\n\nlp$2.checkLVal = function (expr) {\n  if (!expr) {\n    return expr;\n  }\n\n  switch (expr.type) {\n    case \"Identifier\":\n    case \"MemberExpression\":\n      return expr;\n\n    case \"ParenthesizedExpression\":\n      expr.expression = this.checkLVal(expr.expression);\n      return expr;\n\n    default:\n      return this.dummyIdent();\n  }\n};\n\nlp$2.parseExpression = function (noIn) {\n  var this$1 = this;\n  var start = this.storeCurrentPos();\n  var expr = this.parseMaybeAssign(noIn);\n\n  if (this.tok.type === tokTypes.comma) {\n    var node = this.startNodeAt(start);\n    node.expressions = [expr];\n\n    while (this.eat(tokTypes.comma)) {\n      node.expressions.push(this$1.parseMaybeAssign(noIn));\n    }\n\n    return this.finishNode(node, \"SequenceExpression\");\n  }\n\n  return expr;\n};\n\nlp$2.parseParenExpression = function () {\n  this.pushCx();\n  this.expect(tokTypes.parenL);\n  var val = this.parseExpression();\n  this.popCx();\n  this.expect(tokTypes.parenR);\n  return val;\n};\n\nlp$2.parseMaybeAssign = function (noIn) {\n  if (this.toks.isContextual(\"yield\")) {\n    var node = this.startNode();\n    this.next();\n\n    if (this.semicolon() || this.canInsertSemicolon() || this.tok.type !== tokTypes.star && !this.tok.type.startsExpr) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(tokTypes.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  var start = this.storeCurrentPos();\n  var left = this.parseMaybeConditional(noIn);\n\n  if (this.tok.type.isAssign) {\n    var node$1 = this.startNodeAt(start);\n    node$1.operator = this.tok.value;\n    node$1.left = this.tok.type === tokTypes.eq ? this.toAssignable(left) : this.checkLVal(left);\n    this.next();\n    node$1.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node$1, \"AssignmentExpression\");\n  }\n\n  return left;\n};\n\nlp$2.parseMaybeConditional = function (noIn) {\n  var start = this.storeCurrentPos();\n  var expr = this.parseExprOps(noIn);\n\n  if (this.eat(tokTypes.question)) {\n    var node = this.startNodeAt(start);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    node.alternate = this.expect(tokTypes.colon) ? this.parseMaybeAssign(noIn) : this.dummyIdent();\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  return expr;\n};\n\nlp$2.parseExprOps = function (noIn) {\n  var start = this.storeCurrentPos();\n  var indent = this.curIndent,\n      line = this.curLineStart;\n  return this.parseExprOp(this.parseMaybeUnary(false), start, -1, noIn, indent, line);\n};\n\nlp$2.parseExprOp = function (left, start, minPrec, noIn, indent, line) {\n  if (this.curLineStart !== line && this.curIndent < indent && this.tokenStartsLine()) {\n    return left;\n  }\n\n  var prec = this.tok.type.binop;\n\n  if (prec != null && (!noIn || this.tok.type !== tokTypes._in)) {\n    if (prec > minPrec) {\n      var node = this.startNodeAt(start);\n      node.left = left;\n      node.operator = this.tok.value;\n      this.next();\n\n      if (this.curLineStart !== line && this.curIndent < indent && this.tokenStartsLine()) {\n        node.right = this.dummyIdent();\n      } else {\n        var rightStart = this.storeCurrentPos();\n        node.right = this.parseExprOp(this.parseMaybeUnary(false), rightStart, prec, noIn, indent, line);\n      }\n\n      this.finishNode(node, /&&|\\|\\|/.test(node.operator) ? \"LogicalExpression\" : \"BinaryExpression\");\n      return this.parseExprOp(node, start, minPrec, noIn, indent, line);\n    }\n  }\n\n  return left;\n};\n\nlp$2.parseMaybeUnary = function (sawUnary) {\n  var this$1 = this;\n  var start = this.storeCurrentPos(),\n      expr;\n\n  if (this.options.ecmaVersion >= 8 && this.toks.isContextual(\"await\") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {\n    expr = this.parseAwait();\n    sawUnary = true;\n  } else if (this.tok.type.prefix) {\n    var node = this.startNode(),\n        update = this.tok.type === tokTypes.incDec;\n\n    if (!update) {\n      sawUnary = true;\n    }\n\n    node.operator = this.tok.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(true);\n\n    if (update) {\n      node.argument = this.checkLVal(node.argument);\n    }\n\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else if (this.tok.type === tokTypes.ellipsis) {\n    var node$1 = this.startNode();\n    this.next();\n    node$1.argument = this.parseMaybeUnary(sawUnary);\n    expr = this.finishNode(node$1, \"SpreadElement\");\n  } else {\n    expr = this.parseExprSubscripts();\n\n    while (this.tok.type.postfix && !this.canInsertSemicolon()) {\n      var node$2 = this$1.startNodeAt(start);\n      node$2.operator = this$1.tok.value;\n      node$2.prefix = false;\n      node$2.argument = this$1.checkLVal(expr);\n      this$1.next();\n      expr = this$1.finishNode(node$2, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(tokTypes.starstar)) {\n    var node$3 = this.startNodeAt(start);\n    node$3.operator = \"**\";\n    node$3.left = expr;\n    node$3.right = this.parseMaybeUnary(false);\n    return this.finishNode(node$3, \"BinaryExpression\");\n  }\n\n  return expr;\n};\n\nlp$2.parseExprSubscripts = function () {\n  var start = this.storeCurrentPos();\n  return this.parseSubscripts(this.parseExprAtom(), start, false, this.curIndent, this.curLineStart);\n};\n\nlp$2.parseSubscripts = function (base, start, noCalls, startIndent, line) {\n  var this$1 = this;\n\n  for (;;) {\n    if (this$1.curLineStart !== line && this$1.curIndent <= startIndent && this$1.tokenStartsLine()) {\n      if (this$1.tok.type === tokTypes.dot && this$1.curIndent === startIndent) {\n        --startIndent;\n      } else {\n        return base;\n      }\n    }\n\n    var maybeAsyncArrow = base.type === \"Identifier\" && base.name === \"async\" && !this$1.canInsertSemicolon();\n\n    if (this$1.eat(tokTypes.dot)) {\n      var node = this$1.startNodeAt(start);\n      node.object = base;\n\n      if (this$1.curLineStart !== line && this$1.curIndent <= startIndent && this$1.tokenStartsLine()) {\n        node.property = this$1.dummyIdent();\n      } else {\n        node.property = this$1.parsePropertyAccessor() || this$1.dummyIdent();\n      }\n\n      node.computed = false;\n      base = this$1.finishNode(node, \"MemberExpression\");\n    } else if (this$1.tok.type === tokTypes.bracketL) {\n      this$1.pushCx();\n      this$1.next();\n      var node$1 = this$1.startNodeAt(start);\n      node$1.object = base;\n      node$1.property = this$1.parseExpression();\n      node$1.computed = true;\n      this$1.popCx();\n      this$1.expect(tokTypes.bracketR);\n      base = this$1.finishNode(node$1, \"MemberExpression\");\n    } else if (!noCalls && this$1.tok.type === tokTypes.parenL) {\n      var exprList = this$1.parseExprList(tokTypes.parenR);\n\n      if (maybeAsyncArrow && this$1.eat(tokTypes.arrow)) {\n        return this$1.parseArrowExpression(this$1.startNodeAt(start), exprList, true);\n      }\n\n      var node$2 = this$1.startNodeAt(start);\n      node$2.callee = base;\n      node$2.arguments = exprList;\n      base = this$1.finishNode(node$2, \"CallExpression\");\n    } else if (this$1.tok.type === tokTypes.backQuote) {\n      var node$3 = this$1.startNodeAt(start);\n      node$3.tag = base;\n      node$3.quasi = this$1.parseTemplate();\n      base = this$1.finishNode(node$3, \"TaggedTemplateExpression\");\n    } else {\n      return base;\n    }\n  }\n};\n\nlp$2.parseExprAtom = function () {\n  var node;\n\n  switch (this.tok.type) {\n    case tokTypes._this:\n    case tokTypes._super:\n      var type = this.tok.type === tokTypes._this ? \"ThisExpression\" : \"Super\";\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, type);\n\n    case tokTypes.name:\n      var start = this.storeCurrentPos();\n      var id = this.parseIdent();\n      var isAsync = false;\n\n      if (id.name === \"async\" && !this.canInsertSemicolon()) {\n        if (this.eat(tokTypes._function)) {\n          return this.parseFunction(this.startNodeAt(start), false, true);\n        }\n\n        if (this.tok.type === tokTypes.name) {\n          id = this.parseIdent();\n          isAsync = true;\n        }\n      }\n\n      return this.eat(tokTypes.arrow) ? this.parseArrowExpression(this.startNodeAt(start), [id], isAsync) : id;\n\n    case tokTypes.regexp:\n      node = this.startNode();\n      var val = this.tok.value;\n      node.regex = {\n        pattern: val.pattern,\n        flags: val.flags\n      };\n      node.value = val.value;\n      node.raw = this.input.slice(this.tok.start, this.tok.end);\n      this.next();\n      return this.finishNode(node, \"Literal\");\n\n    case tokTypes.num:\n    case tokTypes.string:\n      node = this.startNode();\n      node.value = this.tok.value;\n      node.raw = this.input.slice(this.tok.start, this.tok.end);\n      this.next();\n      return this.finishNode(node, \"Literal\");\n\n    case tokTypes._null:\n    case tokTypes._true:\n    case tokTypes._false:\n      node = this.startNode();\n      node.value = this.tok.type === tokTypes._null ? null : this.tok.type === tokTypes._true;\n      node.raw = this.tok.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\");\n\n    case tokTypes.parenL:\n      var parenStart = this.storeCurrentPos();\n      this.next();\n      var inner = this.parseExpression();\n      this.expect(tokTypes.parenR);\n\n      if (this.eat(tokTypes.arrow)) {\n        // (a,)=>a // SequenceExpression makes dummy in the last hole. Drop the dummy.\n        var params = inner.expressions || [inner];\n\n        if (params.length && isDummy(params[params.length - 1])) {\n          params.pop();\n        }\n\n        return this.parseArrowExpression(this.startNodeAt(parenStart), params);\n      }\n\n      if (this.options.preserveParens) {\n        var par = this.startNodeAt(parenStart);\n        par.expression = inner;\n        inner = this.finishNode(par, \"ParenthesizedExpression\");\n      }\n\n      return inner;\n\n    case tokTypes.bracketL:\n      node = this.startNode();\n      node.elements = this.parseExprList(tokTypes.bracketR, true);\n      return this.finishNode(node, \"ArrayExpression\");\n\n    case tokTypes.braceL:\n      return this.parseObj();\n\n    case tokTypes._class:\n      return this.parseClass(false);\n\n    case tokTypes._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, false);\n\n    case tokTypes._new:\n      return this.parseNew();\n\n    case tokTypes.backQuote:\n      return this.parseTemplate();\n\n    default:\n      return this.dummyIdent();\n  }\n};\n\nlp$2.parseNew = function () {\n  var node = this.startNode(),\n      startIndent = this.curIndent,\n      line = this.curLineStart;\n  var meta = this.parseIdent(true);\n\n  if (this.options.ecmaVersion >= 6 && this.eat(tokTypes.dot)) {\n    node.meta = meta;\n    node.property = this.parseIdent(true);\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  var start = this.storeCurrentPos();\n  node.callee = this.parseSubscripts(this.parseExprAtom(), start, true, startIndent, line);\n\n  if (this.tok.type === tokTypes.parenL) {\n    node.arguments = this.parseExprList(tokTypes.parenR);\n  } else {\n    node.arguments = [];\n  }\n\n  return this.finishNode(node, \"NewExpression\");\n};\n\nlp$2.parseTemplateElement = function () {\n  var elem = this.startNode(); // The loose parser accepts invalid unicode escapes even in untagged templates.\n\n  if (this.tok.type === tokTypes.invalidTemplate) {\n    elem.value = {\n      raw: this.tok.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.tok.start, this.tok.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.tok.value\n    };\n  }\n\n  this.next();\n  elem.tail = this.tok.type === tokTypes.backQuote;\n  return this.finishNode(elem, \"TemplateElement\");\n};\n\nlp$2.parseTemplate = function () {\n  var this$1 = this;\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement();\n  node.quasis = [curElt];\n\n  while (!curElt.tail) {\n    this$1.next();\n    node.expressions.push(this$1.parseExpression());\n\n    if (this$1.expect(tokTypes.braceR)) {\n      curElt = this$1.parseTemplateElement();\n    } else {\n      curElt = this$1.startNode();\n      curElt.value = {\n        cooked: \"\",\n        raw: \"\"\n      };\n      curElt.tail = true;\n      this$1.finishNode(curElt, \"TemplateElement\");\n    }\n\n    node.quasis.push(curElt);\n  }\n\n  this.expect(tokTypes.backQuote);\n  return this.finishNode(node, \"TemplateLiteral\");\n};\n\nlp$2.parseObj = function () {\n  var this$1 = this;\n  var node = this.startNode();\n  node.properties = [];\n  this.pushCx();\n  var indent = this.curIndent + 1,\n      line = this.curLineStart;\n  this.eat(tokTypes.braceL);\n\n  if (this.curIndent + 1 < indent) {\n    indent = this.curIndent;\n    line = this.curLineStart;\n  }\n\n  while (!this.closes(tokTypes.braceR, indent, line)) {\n    var prop = this$1.startNode(),\n        isGenerator = void 0,\n        isAsync = void 0,\n        start = void 0;\n\n    if (this$1.options.ecmaVersion >= 9 && this$1.eat(tokTypes.ellipsis)) {\n      prop.argument = this$1.parseMaybeAssign();\n      node.properties.push(this$1.finishNode(prop, \"SpreadElement\"));\n      this$1.eat(tokTypes.comma);\n      continue;\n    }\n\n    if (this$1.options.ecmaVersion >= 6) {\n      start = this$1.storeCurrentPos();\n      prop.method = false;\n      prop.shorthand = false;\n      isGenerator = this$1.eat(tokTypes.star);\n    }\n\n    this$1.parsePropertyName(prop);\n\n    if (this$1.toks.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this$1.options.ecmaVersion >= 9 && this$1.eat(tokTypes.star);\n      this$1.parsePropertyName(prop);\n    } else {\n      isAsync = false;\n    }\n\n    if (isDummy(prop.key)) {\n      if (isDummy(this$1.parseMaybeAssign())) {\n        this$1.next();\n      }\n\n      this$1.eat(tokTypes.comma);\n      continue;\n    }\n\n    if (this$1.eat(tokTypes.colon)) {\n      prop.kind = \"init\";\n      prop.value = this$1.parseMaybeAssign();\n    } else if (this$1.options.ecmaVersion >= 6 && (this$1.tok.type === tokTypes.parenL || this$1.tok.type === tokTypes.braceL)) {\n      prop.kind = \"init\";\n      prop.method = true;\n      prop.value = this$1.parseMethod(isGenerator, isAsync);\n    } else if (this$1.options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" && !prop.computed && (prop.key.name === \"get\" || prop.key.name === \"set\") && this$1.tok.type !== tokTypes.comma && this$1.tok.type !== tokTypes.braceR && this$1.tok.type !== tokTypes.eq) {\n      prop.kind = prop.key.name;\n      this$1.parsePropertyName(prop);\n      prop.value = this$1.parseMethod(false);\n    } else {\n      prop.kind = \"init\";\n\n      if (this$1.options.ecmaVersion >= 6) {\n        if (this$1.eat(tokTypes.eq)) {\n          var assign = this$1.startNodeAt(start);\n          assign.operator = \"=\";\n          assign.left = prop.key;\n          assign.right = this$1.parseMaybeAssign();\n          prop.value = this$1.finishNode(assign, \"AssignmentExpression\");\n        } else {\n          prop.value = prop.key;\n        }\n      } else {\n        prop.value = this$1.dummyIdent();\n      }\n\n      prop.shorthand = true;\n    }\n\n    node.properties.push(this$1.finishNode(prop, \"Property\"));\n    this$1.eat(tokTypes.comma);\n  }\n\n  this.popCx();\n\n  if (!this.eat(tokTypes.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start;\n\n    if (this.options.locations) {\n      this.last.loc.end = this.tok.loc.start;\n    }\n  }\n\n  return this.finishNode(node, \"ObjectExpression\");\n};\n\nlp$2.parsePropertyName = function (prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(tokTypes.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseExpression();\n      this.expect(tokTypes.bracketR);\n      return;\n    } else {\n      prop.computed = false;\n    }\n  }\n\n  var key = this.tok.type === tokTypes.num || this.tok.type === tokTypes.string ? this.parseExprAtom() : this.parseIdent();\n  prop.key = key || this.dummyIdent();\n};\n\nlp$2.parsePropertyAccessor = function () {\n  if (this.tok.type === tokTypes.name || this.tok.type.keyword) {\n    return this.parseIdent();\n  }\n};\n\nlp$2.parseIdent = function () {\n  var name = this.tok.type === tokTypes.name ? this.tok.value : this.tok.type.keyword;\n\n  if (!name) {\n    return this.dummyIdent();\n  }\n\n  var node = this.startNode();\n  this.next();\n  node.name = name;\n  return this.finishNode(node, \"Identifier\");\n};\n\nlp$2.initFunction = function (node) {\n  node.id = null;\n  node.params = [];\n\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n\n  if (this.options.ecmaVersion >= 8) {\n    node.async = false;\n  }\n}; // Convert existing expression atom to assignable pattern\n// if possible.\n\n\nlp$2.toAssignable = function (node, binding) {\n  var this$1 = this;\n\n  if (!node || node.type === \"Identifier\" || node.type === \"MemberExpression\" && !binding) {// Okay\n  } else if (node.type === \"ParenthesizedExpression\") {\n    this.toAssignable(node.expression, binding);\n  } else if (this.options.ecmaVersion < 6) {\n    return this.dummyIdent();\n  } else if (node.type === \"ObjectExpression\") {\n    node.type = \"ObjectPattern\";\n\n    for (var i = 0, list = node.properties; i < list.length; i += 1) {\n      var prop = list[i];\n      this$1.toAssignable(prop, binding);\n    }\n  } else if (node.type === \"ArrayExpression\") {\n    node.type = \"ArrayPattern\";\n    this.toAssignableList(node.elements, binding);\n  } else if (node.type === \"Property\") {\n    this.toAssignable(node.value, binding);\n  } else if (node.type === \"SpreadElement\") {\n    node.type = \"RestElement\";\n    this.toAssignable(node.argument, binding);\n  } else if (node.type === \"AssignmentExpression\") {\n    node.type = \"AssignmentPattern\";\n    delete node.operator;\n  } else {\n    return this.dummyIdent();\n  }\n\n  return node;\n};\n\nlp$2.toAssignableList = function (exprList, binding) {\n  var this$1 = this;\n\n  for (var i = 0, list = exprList; i < list.length; i += 1) {\n    var expr = list[i];\n    this$1.toAssignable(expr, binding);\n  }\n\n  return exprList;\n};\n\nlp$2.parseFunctionParams = function (params) {\n  params = this.parseExprList(tokTypes.parenR);\n  return this.toAssignableList(params, true);\n};\n\nlp$2.parseMethod = function (isGenerator, isAsync) {\n  var node = this.startNode(),\n      oldInAsync = this.inAsync,\n      oldInFunction = this.inFunction;\n  this.initFunction(node);\n\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = !!isGenerator;\n  }\n\n  if (this.options.ecmaVersion >= 8) {\n    node.async = !!isAsync;\n  }\n\n  this.inAsync = node.async;\n  this.inFunction = true;\n  node.params = this.parseFunctionParams();\n  node.body = this.parseBlock();\n  this.toks.adaptDirectivePrologue(node.body.body);\n  this.inAsync = oldInAsync;\n  this.inFunction = oldInFunction;\n  return this.finishNode(node, \"FunctionExpression\");\n};\n\nlp$2.parseArrowExpression = function (node, params, isAsync) {\n  var oldInAsync = this.inAsync,\n      oldInFunction = this.inFunction;\n  this.initFunction(node);\n\n  if (this.options.ecmaVersion >= 8) {\n    node.async = !!isAsync;\n  }\n\n  this.inAsync = node.async;\n  this.inFunction = true;\n  node.params = this.toAssignableList(params, true);\n  node.expression = this.tok.type !== tokTypes.braceL;\n\n  if (node.expression) {\n    node.body = this.parseMaybeAssign();\n  } else {\n    node.body = this.parseBlock();\n    this.toks.adaptDirectivePrologue(node.body.body);\n  }\n\n  this.inAsync = oldInAsync;\n  this.inFunction = oldInFunction;\n  return this.finishNode(node, \"ArrowFunctionExpression\");\n};\n\nlp$2.parseExprList = function (close, allowEmpty) {\n  var this$1 = this;\n  this.pushCx();\n  var indent = this.curIndent,\n      line = this.curLineStart,\n      elts = [];\n  this.next(); // Opening bracket\n\n  while (!this.closes(close, indent + 1, line)) {\n    if (this$1.eat(tokTypes.comma)) {\n      elts.push(allowEmpty ? null : this$1.dummyIdent());\n      continue;\n    }\n\n    var elt = this$1.parseMaybeAssign();\n\n    if (isDummy(elt)) {\n      if (this$1.closes(close, indent, line)) {\n        break;\n      }\n\n      this$1.next();\n    } else {\n      elts.push(elt);\n    }\n\n    this$1.eat(tokTypes.comma);\n  }\n\n  this.popCx();\n\n  if (!this.eat(close)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start;\n\n    if (this.options.locations) {\n      this.last.loc.end = this.tok.loc.start;\n    }\n  }\n\n  return elts;\n};\n\nlp$2.parseAwait = function () {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary();\n  return this.finishNode(node, \"AwaitExpression\");\n}; // Acorn: Loose parser\n//\n// This module provides an alternative parser (`parse_dammit`) that\n// exposes that same interface as `parse`, but will try to parse\n// anything as JavaScript, repairing syntax error the best it can.\n// There are circumstances in which it will raise an error and give\n// up, but they are very rare. The resulting AST will be a mostly\n// valid JavaScript AST (as per the [Mozilla parser API][api], except\n// that:\n//\n// - Return outside functions is allowed\n//\n// - Label consistency (no conflicts, break only to existing labels)\n//   is not enforced.\n//\n// - Bogus Identifier nodes with a name of `\"✖\"` are inserted whenever\n//   the parser got too confused to return anything meaningful.\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n//\n// The expected use for this is to *first* try `acorn.parse`, and only\n// if that fails switch to `parse_dammit`. The loose parser might\n// parse badly indented code incorrectly, so **don't** use it as\n// your default parser.\n//\n// Quite a lot of acorn.js is duplicated here. The alternative was to\n// add a *lot* of extra cruft to that file, making it less readable\n// and slower. Copying and editing the code allowed me to make\n// invasive changes and simplifications without creating a complicated\n// tangle.\n\n\ndefaultOptions.tabSize = 4; // eslint-disable-next-line camelcase\n\nfunction parse_dammit(input, options) {\n  return new LooseParser(input, options).parse();\n}\n\naddLooseExports(parse_dammit, LooseParser, pluginsLoose);\nexport { parse_dammit, LooseParser, pluginsLoose };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsdom/node_modules/acorn/dist/acorn_loose.es.js"],"names":["Node","SourceLocation","Token","addLooseExports","defaultOptions","getLineInfo","isNewLine","lineBreak","lineBreakG","tokTypes","tokenizer","noop","pluginsLoose","LooseParser","input","options","toks","tok","last","type","eof","start","end","validateRegExpFlags","validateRegExpPattern","locations","here","curPosition","loc","ahead","context","curIndent","curLineStart","nextLineStart","lineEnd","inAsync","inFunction","loadPlugins","prototype","startNode","storeCurrentPos","startNodeAt","pos","finishNode","node","ranges","range","dummyNode","dummy","name","dummyIdent","dummyString","value","raw","eat","next","isContextual","eatContextual","canInsertSemicolon","braceR","test","slice","semicolon","semi","expect","this$1","i","lookAhead","j","pushCx","push","popCx","pop","length","charCodeAt","indentationAfter","count","ch","tabSize","closes","closeTok","indent","line","blockHeuristic","tokenStartsLine","p","extend","f","pluginConfigs","plugin","Error","parse","parseTopLevel","lp","isSpace","shift","readToken","dot","substr","ecmaVersion","ellipsis","e","SyntaxError","msg","message","raisedAt","replace","string","re","RegExp","regexp","template","resetTo","charAt","exprAllowed","curLine","lineStart","lastIndex","match","exec","index","n","isDummy","lp$1","body","parseStatement","adaptDirectivePrologue","sourceType","starttype","kind","isLet","_var","_break","_continue","isBreak","label","parseIdent","_debugger","_do","_while","parseParenExpression","_for","isAwait","parenL","parseFor","_const","init$1","parseVar","declarations","_in","await","parseForIn","init","parseExpression","toAssignable","_function","parseFunction","_if","consequent","alternate","_else","_return","argument","_switch","blockIndent","discriminant","cases","braceL","cur","_case","_default","isCase","colon","_throw","_try","block","parseBlock","handler","_catch","clause","param","parseExprAtom","parenR","finalizer","_finally","_with","object","_class","parseClass","_import","parseImport","_export","parseExport","isAsyncFunction","expr","expression","update","left","right","noIn","decl","id","eq","parseMaybeAssign","comma","decl$1","isStatement","superClass","_extends","method","isGenerator","isAsync","static","star","parsePropertyName","key","computed","parseMethod","oldInAsync","oldInFunction","initFunction","generator","async","params","parseFunctionParams","source","fNode","declaration","keyword","specifiers","parseExportSpecifierList","elt","local","parseImportSpecifierList","unshift","elts","continuedLine","elt$1","imported","exported","lp$2","checkLVal","expressions","val","startsExpr","delegate","parseMaybeConditional","isAssign","node$1","operator","parseExprOps","question","parseExprOp","parseMaybeUnary","minPrec","prec","binop","rightStart","sawUnary","allowAwaitOutsideFunction","parseAwait","prefix","incDec","parseExprSubscripts","postfix","node$2","starstar","node$3","parseSubscripts","base","noCalls","startIndent","maybeAsyncArrow","property","parsePropertyAccessor","bracketL","bracketR","exprList","parseExprList","arrow","parseArrowExpression","callee","arguments","backQuote","tag","quasi","parseTemplate","_this","_super","regex","pattern","flags","num","_null","_true","_false","parenStart","inner","preserveParens","par","elements","parseObj","_new","parseNew","meta","parseTemplateElement","elem","invalidTemplate","cooked","tail","curElt","quasis","properties","prop","shorthand","isAsyncProp","assign","binding","list","toAssignableList","close","allowEmpty","parse_dammit"],"mappings":"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","sourcesContent":["import { Node, SourceLocation, Token, addLooseExports, defaultOptions, getLineInfo, isNewLine, lineBreak, lineBreakG, tokTypes, tokenizer } from './acorn.es';\n\nfunction noop() {}\n\n// Registered plugins\nvar pluginsLoose = {};\n\nvar LooseParser = function LooseParser(input, options) {\n  if ( options === void 0 ) options = {};\n\n  this.toks = tokenizer(input, options);\n  this.options = this.toks.options;\n  this.input = this.toks.input;\n  this.tok = this.last = {type: tokTypes.eof, start: 0, end: 0};\n  this.tok.validateRegExpFlags = noop;\n  this.tok.validateRegExpPattern = noop;\n  if (this.options.locations) {\n    var here = this.toks.curPosition();\n    this.tok.loc = new SourceLocation(this.toks, here, here);\n  }\n  this.ahead = []; // Tokens ahead\n  this.context = []; // Indentation contexted\n  this.curIndent = 0;\n  this.curLineStart = 0;\n  this.nextLineStart = this.lineEnd(this.curLineStart) + 1;\n  this.inAsync = false;\n  this.inFunction = false;\n  // Load plugins\n  this.options.pluginsLoose = options.pluginsLoose || {};\n  this.loadPlugins(this.options.pluginsLoose);\n};\n\nLooseParser.prototype.startNode = function startNode () {\n  return new Node(this.toks, this.tok.start, this.options.locations ? this.tok.loc.start : null)\n};\n\nLooseParser.prototype.storeCurrentPos = function storeCurrentPos () {\n  return this.options.locations ? [this.tok.start, this.tok.loc.start] : this.tok.start\n};\n\nLooseParser.prototype.startNodeAt = function startNodeAt (pos) {\n  if (this.options.locations) {\n    return new Node(this.toks, pos[0], pos[1])\n  } else {\n    return new Node(this.toks, pos)\n  }\n};\n\nLooseParser.prototype.finishNode = function finishNode (node, type) {\n  node.type = type;\n  node.end = this.last.end;\n  if (this.options.locations)\n    { node.loc.end = this.last.loc.end; }\n  if (this.options.ranges)\n    { node.range[1] = this.last.end; }\n  return node\n};\n\nLooseParser.prototype.dummyNode = function dummyNode (type) {\n  var dummy = this.startNode();\n  dummy.type = type;\n  dummy.end = dummy.start;\n  if (this.options.locations)\n    { dummy.loc.end = dummy.loc.start; }\n  if (this.options.ranges)\n    { dummy.range[1] = dummy.start; }\n  this.last = {type: tokTypes.name, start: dummy.start, end: dummy.start, loc: dummy.loc};\n  return dummy\n};\n\nLooseParser.prototype.dummyIdent = function dummyIdent () {\n  var dummy = this.dummyNode(\"Identifier\");\n  dummy.name = \"✖\";\n  return dummy\n};\n\nLooseParser.prototype.dummyString = function dummyString () {\n  var dummy = this.dummyNode(\"Literal\");\n  dummy.value = dummy.raw = \"✖\";\n  return dummy\n};\n\nLooseParser.prototype.eat = function eat (type) {\n  if (this.tok.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\nLooseParser.prototype.isContextual = function isContextual (name) {\n  return this.tok.type === tokTypes.name && this.tok.value === name\n};\n\nLooseParser.prototype.eatContextual = function eatContextual (name) {\n  return this.tok.value === name && this.eat(tokTypes.name)\n};\n\nLooseParser.prototype.canInsertSemicolon = function canInsertSemicolon () {\n  return this.tok.type === tokTypes.eof || this.tok.type === tokTypes.braceR ||\n    lineBreak.test(this.input.slice(this.last.end, this.tok.start))\n};\n\nLooseParser.prototype.semicolon = function semicolon () {\n  return this.eat(tokTypes.semi)\n};\n\nLooseParser.prototype.expect = function expect (type) {\n    var this$1 = this;\n\n  if (this.eat(type)) { return true }\n  for (var i = 1; i <= 2; i++) {\n    if (this$1.lookAhead(i).type === type) {\n      for (var j = 0; j < i; j++) { this$1.next(); }\n      return true\n    }\n  }\n};\n\nLooseParser.prototype.pushCx = function pushCx () {\n  this.context.push(this.curIndent);\n};\n\nLooseParser.prototype.popCx = function popCx () {\n  this.curIndent = this.context.pop();\n};\n\nLooseParser.prototype.lineEnd = function lineEnd (pos) {\n  while (pos < this.input.length && !isNewLine(this.input.charCodeAt(pos))) { ++pos; }\n  return pos\n};\n\nLooseParser.prototype.indentationAfter = function indentationAfter (pos) {\n    var this$1 = this;\n\n  for (var count = 0;; ++pos) {\n    var ch = this$1.input.charCodeAt(pos);\n    if (ch === 32) { ++count; }\n    else if (ch === 9) { count += this$1.options.tabSize; }\n    else { return count }\n  }\n};\n\nLooseParser.prototype.closes = function closes (closeTok, indent, line, blockHeuristic) {\n  if (this.tok.type === closeTok || this.tok.type === tokTypes.eof) { return true }\n  return line !== this.curLineStart && this.curIndent < indent && this.tokenStartsLine() &&\n    (!blockHeuristic || this.nextLineStart >= this.input.length ||\n     this.indentationAfter(this.nextLineStart) < indent)\n};\n\nLooseParser.prototype.tokenStartsLine = function tokenStartsLine () {\n    var this$1 = this;\n\n  for (var p = this.tok.start - 1; p >= this.curLineStart; --p) {\n    var ch = this$1.input.charCodeAt(p);\n    if (ch !== 9 && ch !== 32) { return false }\n  }\n  return true\n};\n\nLooseParser.prototype.extend = function extend (name, f) {\n  this[name] = f(this[name]);\n};\n\nLooseParser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n    var this$1 = this;\n\n  for (var name in pluginConfigs) {\n    var plugin = pluginsLoose[name];\n    if (!plugin) { throw new Error(\"Plugin '\" + name + \"' not found\") }\n    plugin(this$1, pluginConfigs[name]);\n  }\n};\n\nLooseParser.prototype.parse = function parse () {\n  this.next();\n  return this.parseTopLevel()\n};\n\nvar lp = LooseParser.prototype;\n\nfunction isSpace(ch) {\n  return (ch < 14 && ch > 8) || ch === 32 || ch === 160 || isNewLine(ch)\n}\n\nlp.next = function() {\n  var this$1 = this;\n\n  this.last = this.tok;\n  if (this.ahead.length)\n    { this.tok = this.ahead.shift(); }\n  else\n    { this.tok = this.readToken(); }\n\n  if (this.tok.start >= this.nextLineStart) {\n    while (this.tok.start >= this.nextLineStart) {\n      this$1.curLineStart = this$1.nextLineStart;\n      this$1.nextLineStart = this$1.lineEnd(this$1.curLineStart) + 1;\n    }\n    this.curIndent = this.indentationAfter(this.curLineStart);\n  }\n};\n\nlp.readToken = function() {\n  var this$1 = this;\n\n  for (;;) {\n    try {\n      this$1.toks.next();\n      if (this$1.toks.type === tokTypes.dot &&\n          this$1.input.substr(this$1.toks.end, 1) === \".\" &&\n          this$1.options.ecmaVersion >= 6) {\n        this$1.toks.end++;\n        this$1.toks.type = tokTypes.ellipsis;\n      }\n      return new Token(this$1.toks)\n    } catch (e) {\n      if (!(e instanceof SyntaxError)) { throw e }\n\n      // Try to skip some text, based on the error message, and then continue\n      var msg = e.message, pos = e.raisedAt, replace = true;\n      if (/unterminated/i.test(msg)) {\n        pos = this$1.lineEnd(e.pos + 1);\n        if (/string/.test(msg)) {\n          replace = {start: e.pos, end: pos, type: tokTypes.string, value: this$1.input.slice(e.pos + 1, pos)};\n        } else if (/regular expr/i.test(msg)) {\n          var re = this$1.input.slice(e.pos, pos);\n          try { re = new RegExp(re); } catch (e) { /* ignore compilation error due to new syntax */ }\n          replace = {start: e.pos, end: pos, type: tokTypes.regexp, value: re};\n        } else if (/template/.test(msg)) {\n          replace = {\n            start: e.pos,\n            end: pos,\n            type: tokTypes.template,\n            value: this$1.input.slice(e.pos, pos)\n          };\n        } else {\n          replace = false;\n        }\n      } else if (/invalid (unicode|regexp|number)|expecting unicode|octal literal|is reserved|directly after number|expected number in radix/i.test(msg)) {\n        while (pos < this.input.length && !isSpace(this.input.charCodeAt(pos))) { ++pos; }\n      } else if (/character escape|expected hexadecimal/i.test(msg)) {\n        while (pos < this.input.length) {\n          var ch = this$1.input.charCodeAt(pos++);\n          if (ch === 34 || ch === 39 || isNewLine(ch)) { break }\n        }\n      } else if (/unexpected character/i.test(msg)) {\n        pos++;\n        replace = false;\n      } else if (/regular expression/i.test(msg)) {\n        replace = true;\n      } else {\n        throw e\n      }\n      this$1.resetTo(pos);\n      if (replace === true) { replace = {start: pos, end: pos, type: tokTypes.name, value: \"✖\"}; }\n      if (replace) {\n        if (this$1.options.locations)\n          { replace.loc = new SourceLocation(\n            this$1.toks,\n            getLineInfo(this$1.input, replace.start),\n            getLineInfo(this$1.input, replace.end)); }\n        return replace\n      }\n    }\n  }\n};\n\nlp.resetTo = function(pos) {\n  var this$1 = this;\n\n  this.toks.pos = pos;\n  var ch = this.input.charAt(pos - 1);\n  this.toks.exprAllowed = !ch || /[[{(,;:?/*=+\\-~!|&%^<>]/.test(ch) ||\n    /[enwfd]/.test(ch) &&\n    /\\b(case|else|return|throw|new|in|(instance|type)?of|delete|void)$/.test(this.input.slice(pos - 10, pos));\n\n  if (this.options.locations) {\n    this.toks.curLine = 1;\n    this.toks.lineStart = lineBreakG.lastIndex = 0;\n    var match;\n    while ((match = lineBreakG.exec(this.input)) && match.index < pos) {\n      ++this$1.toks.curLine;\n      this$1.toks.lineStart = match.index + match[0].length;\n    }\n  }\n};\n\nlp.lookAhead = function(n) {\n  var this$1 = this;\n\n  while (n > this.ahead.length)\n    { this$1.ahead.push(this$1.readToken()); }\n  return this.ahead[n - 1]\n};\n\nfunction isDummy(node) { return node.name === \"✖\" }\n\nvar lp$1 = LooseParser.prototype;\n\nlp$1.parseTopLevel = function() {\n  var this$1 = this;\n\n  var node = this.startNodeAt(this.options.locations ? [0, getLineInfo(this.input, 0)] : 0);\n  node.body = [];\n  while (this.tok.type !== tokTypes.eof) { node.body.push(this$1.parseStatement()); }\n  this.toks.adaptDirectivePrologue(node.body);\n  this.last = this.tok;\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n  return this.finishNode(node, \"Program\")\n};\n\nlp$1.parseStatement = function() {\n  var this$1 = this;\n\n  var starttype = this.tok.type, node = this.startNode(), kind;\n\n  if (this.toks.isLet()) {\n    starttype = tokTypes._var;\n    kind = \"let\";\n  }\n\n  switch (starttype) {\n  case tokTypes._break: case tokTypes._continue:\n    this.next();\n    var isBreak = starttype === tokTypes._break;\n    if (this.semicolon() || this.canInsertSemicolon()) {\n      node.label = null;\n    } else {\n      node.label = this.tok.type === tokTypes.name ? this.parseIdent() : null;\n      this.semicolon();\n    }\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n\n  case tokTypes._debugger:\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\")\n\n  case tokTypes._do:\n    this.next();\n    node.body = this.parseStatement();\n    node.test = this.eat(tokTypes._while) ? this.parseParenExpression() : this.dummyIdent();\n    this.semicolon();\n    return this.finishNode(node, \"DoWhileStatement\")\n\n  case tokTypes._for:\n    this.next(); // `for` keyword\n    var isAwait = this.options.ecmaVersion >= 9 && this.inAsync && this.eatContextual(\"await\");\n\n    this.pushCx();\n    this.expect(tokTypes.parenL);\n    if (this.tok.type === tokTypes.semi) { return this.parseFor(node, null) }\n    var isLet = this.toks.isLet();\n    if (isLet || this.tok.type === tokTypes._var || this.tok.type === tokTypes._const) {\n      var init$1 = this.parseVar(true, isLet ? \"let\" : this.tok.value);\n      if (init$1.declarations.length === 1 && (this.tok.type === tokTypes._in || this.isContextual(\"of\"))) {\n        if (this.options.ecmaVersion >= 9 && this.tok.type !== tokTypes._in) {\n          node.await = isAwait;\n        }\n        return this.parseForIn(node, init$1)\n      }\n      return this.parseFor(node, init$1)\n    }\n    var init = this.parseExpression(true);\n    if (this.tok.type === tokTypes._in || this.isContextual(\"of\")) {\n      if (this.options.ecmaVersion >= 9 && this.tok.type !== tokTypes._in) {\n        node.await = isAwait;\n      }\n      return this.parseForIn(node, this.toAssignable(init))\n    }\n    return this.parseFor(node, init)\n\n  case tokTypes._function:\n    this.next();\n    return this.parseFunction(node, true)\n\n  case tokTypes._if:\n    this.next();\n    node.test = this.parseParenExpression();\n    node.consequent = this.parseStatement();\n    node.alternate = this.eat(tokTypes._else) ? this.parseStatement() : null;\n    return this.finishNode(node, \"IfStatement\")\n\n  case tokTypes._return:\n    this.next();\n    if (this.eat(tokTypes.semi) || this.canInsertSemicolon()) { node.argument = null; }\n    else { node.argument = this.parseExpression(); this.semicolon(); }\n    return this.finishNode(node, \"ReturnStatement\")\n\n  case tokTypes._switch:\n    var blockIndent = this.curIndent, line = this.curLineStart;\n    this.next();\n    node.discriminant = this.parseParenExpression();\n    node.cases = [];\n    this.pushCx();\n    this.expect(tokTypes.braceL);\n\n    var cur;\n    while (!this.closes(tokTypes.braceR, blockIndent, line, true)) {\n      if (this$1.tok.type === tokTypes._case || this$1.tok.type === tokTypes._default) {\n        var isCase = this$1.tok.type === tokTypes._case;\n        if (cur) { this$1.finishNode(cur, \"SwitchCase\"); }\n        node.cases.push(cur = this$1.startNode());\n        cur.consequent = [];\n        this$1.next();\n        if (isCase) { cur.test = this$1.parseExpression(); }\n        else { cur.test = null; }\n        this$1.expect(tokTypes.colon);\n      } else {\n        if (!cur) {\n          node.cases.push(cur = this$1.startNode());\n          cur.consequent = [];\n          cur.test = null;\n        }\n        cur.consequent.push(this$1.parseStatement());\n      }\n    }\n    if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n    this.popCx();\n    this.eat(tokTypes.braceR);\n    return this.finishNode(node, \"SwitchStatement\")\n\n  case tokTypes._throw:\n    this.next();\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\")\n\n  case tokTypes._try:\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n    if (this.tok.type === tokTypes._catch) {\n      var clause = this.startNode();\n      this.next();\n      if (this.eat(tokTypes.parenL)) {\n        clause.param = this.toAssignable(this.parseExprAtom(), true);\n        this.expect(tokTypes.parenR);\n      } else {\n        clause.param = null;\n      }\n      clause.body = this.parseBlock();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n    node.finalizer = this.eat(tokTypes._finally) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer) { return node.block }\n    return this.finishNode(node, \"TryStatement\")\n\n  case tokTypes._var:\n  case tokTypes._const:\n    return this.parseVar(false, kind || this.tok.value)\n\n  case tokTypes._while:\n    this.next();\n    node.test = this.parseParenExpression();\n    node.body = this.parseStatement();\n    return this.finishNode(node, \"WhileStatement\")\n\n  case tokTypes._with:\n    this.next();\n    node.object = this.parseParenExpression();\n    node.body = this.parseStatement();\n    return this.finishNode(node, \"WithStatement\")\n\n  case tokTypes.braceL:\n    return this.parseBlock()\n\n  case tokTypes.semi:\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\")\n\n  case tokTypes._class:\n    return this.parseClass(true)\n\n  case tokTypes._import:\n    return this.parseImport()\n\n  case tokTypes._export:\n    return this.parseExport()\n\n  default:\n    if (this.toks.isAsyncFunction()) {\n      this.next();\n      this.next();\n      return this.parseFunction(node, true, true)\n    }\n    var expr = this.parseExpression();\n    if (isDummy(expr)) {\n      this.next();\n      if (this.tok.type === tokTypes.eof) { return this.finishNode(node, \"EmptyStatement\") }\n      return this.parseStatement()\n    } else if (starttype === tokTypes.name && expr.type === \"Identifier\" && this.eat(tokTypes.colon)) {\n      node.body = this.parseStatement();\n      node.label = expr;\n      return this.finishNode(node, \"LabeledStatement\")\n    } else {\n      node.expression = expr;\n      this.semicolon();\n      return this.finishNode(node, \"ExpressionStatement\")\n    }\n  }\n};\n\nlp$1.parseBlock = function() {\n  var this$1 = this;\n\n  var node = this.startNode();\n  this.pushCx();\n  this.expect(tokTypes.braceL);\n  var blockIndent = this.curIndent, line = this.curLineStart;\n  node.body = [];\n  while (!this.closes(tokTypes.braceR, blockIndent, line, true))\n    { node.body.push(this$1.parseStatement()); }\n  this.popCx();\n  this.eat(tokTypes.braceR);\n  return this.finishNode(node, \"BlockStatement\")\n};\n\nlp$1.parseFor = function(node, init) {\n  node.init = init;\n  node.test = node.update = null;\n  if (this.eat(tokTypes.semi) && this.tok.type !== tokTypes.semi) { node.test = this.parseExpression(); }\n  if (this.eat(tokTypes.semi) && this.tok.type !== tokTypes.parenR) { node.update = this.parseExpression(); }\n  this.popCx();\n  this.expect(tokTypes.parenR);\n  node.body = this.parseStatement();\n  return this.finishNode(node, \"ForStatement\")\n};\n\nlp$1.parseForIn = function(node, init) {\n  var type = this.tok.type === tokTypes._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  node.left = init;\n  node.right = this.parseExpression();\n  this.popCx();\n  this.expect(tokTypes.parenR);\n  node.body = this.parseStatement();\n  return this.finishNode(node, type)\n};\n\nlp$1.parseVar = function(noIn, kind) {\n  var this$1 = this;\n\n  var node = this.startNode();\n  node.kind = kind;\n  this.next();\n  node.declarations = [];\n  do {\n    var decl = this$1.startNode();\n    decl.id = this$1.options.ecmaVersion >= 6 ? this$1.toAssignable(this$1.parseExprAtom(), true) : this$1.parseIdent();\n    decl.init = this$1.eat(tokTypes.eq) ? this$1.parseMaybeAssign(noIn) : null;\n    node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"));\n  } while (this.eat(tokTypes.comma))\n  if (!node.declarations.length) {\n    var decl$1 = this.startNode();\n    decl$1.id = this.dummyIdent();\n    node.declarations.push(this.finishNode(decl$1, \"VariableDeclarator\"));\n  }\n  if (!noIn) { this.semicolon(); }\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\nlp$1.parseClass = function(isStatement) {\n  var this$1 = this;\n\n  var node = this.startNode();\n  this.next();\n  if (this.tok.type === tokTypes.name) { node.id = this.parseIdent(); }\n  else if (isStatement === true) { node.id = this.dummyIdent(); }\n  else { node.id = null; }\n  node.superClass = this.eat(tokTypes._extends) ? this.parseExpression() : null;\n  node.body = this.startNode();\n  node.body.body = [];\n  this.pushCx();\n  var indent = this.curIndent + 1, line = this.curLineStart;\n  this.eat(tokTypes.braceL);\n  if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart; }\n  while (!this.closes(tokTypes.braceR, indent, line)) {\n    if (this$1.semicolon()) { continue }\n    var method = this$1.startNode(), isGenerator = (void 0), isAsync = (void 0);\n    if (this$1.options.ecmaVersion >= 6) {\n      method.static = false;\n      isGenerator = this$1.eat(tokTypes.star);\n    }\n    this$1.parsePropertyName(method);\n    if (isDummy(method.key)) { if (isDummy(this$1.parseMaybeAssign())) { this$1.next(); } this$1.eat(tokTypes.comma); continue }\n    if (method.key.type === \"Identifier\" && !method.computed && method.key.name === \"static\" &&\n        (this$1.tok.type !== tokTypes.parenL && this$1.tok.type !== tokTypes.braceL)) {\n      method.static = true;\n      isGenerator = this$1.eat(tokTypes.star);\n      this$1.parsePropertyName(method);\n    } else {\n      method.static = false;\n    }\n    if (!method.computed &&\n        method.key.type === \"Identifier\" && method.key.name === \"async\" && this$1.tok.type !== tokTypes.parenL &&\n        !this$1.canInsertSemicolon()) {\n      isAsync = true;\n      isGenerator = this$1.options.ecmaVersion >= 9 && this$1.eat(tokTypes.star);\n      this$1.parsePropertyName(method);\n    } else {\n      isAsync = false;\n    }\n    if (this$1.options.ecmaVersion >= 5 && method.key.type === \"Identifier\" &&\n        !method.computed && (method.key.name === \"get\" || method.key.name === \"set\") &&\n        this$1.tok.type !== tokTypes.parenL && this$1.tok.type !== tokTypes.braceL) {\n      method.kind = method.key.name;\n      this$1.parsePropertyName(method);\n      method.value = this$1.parseMethod(false);\n    } else {\n      if (!method.computed && !method.static && !isGenerator && !isAsync && (\n        method.key.type === \"Identifier\" && method.key.name === \"constructor\" ||\n          method.key.type === \"Literal\" && method.key.value === \"constructor\")) {\n        method.kind = \"constructor\";\n      } else {\n        method.kind = \"method\";\n      }\n      method.value = this$1.parseMethod(isGenerator, isAsync);\n    }\n    node.body.body.push(this$1.finishNode(method, \"MethodDefinition\"));\n  }\n  this.popCx();\n  if (!this.eat(tokTypes.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start;\n    if (this.options.locations) { this.last.loc.end = this.tok.loc.start; }\n  }\n  this.semicolon();\n  this.finishNode(node.body, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\nlp$1.parseFunction = function(node, isStatement, isAsync) {\n  var oldInAsync = this.inAsync, oldInFunction = this.inFunction;\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = this.eat(tokTypes.star);\n  }\n  if (this.options.ecmaVersion >= 8) {\n    node.async = !!isAsync;\n  }\n  if (this.tok.type === tokTypes.name) { node.id = this.parseIdent(); }\n  else if (isStatement === true) { node.id = this.dummyIdent(); }\n  this.inAsync = node.async;\n  this.inFunction = true;\n  node.params = this.parseFunctionParams();\n  node.body = this.parseBlock();\n  this.toks.adaptDirectivePrologue(node.body.body);\n  this.inAsync = oldInAsync;\n  this.inFunction = oldInFunction;\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\nlp$1.parseExport = function() {\n  var node = this.startNode();\n  this.next();\n  if (this.eat(tokTypes.star)) {\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : this.dummyString();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(tokTypes._default)) {\n    // export default (function foo() {}) // This is FunctionExpression.\n    var isAsync;\n    if (this.tok.type === tokTypes._function || (isAsync = this.toks.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      node.declaration = this.parseFunction(fNode, \"nullableID\", isAsync);\n    } else if (this.tok.type === tokTypes._class) {\n      node.declaration = this.parseClass(\"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  if (this.tok.type.keyword || this.toks.isLet() || this.toks.isAsyncFunction()) {\n    node.declaration = this.parseStatement();\n    node.specifiers = [];\n    node.source = null;\n  } else {\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifierList();\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null;\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\nlp$1.parseImport = function() {\n  var node = this.startNode();\n  this.next();\n  if (this.tok.type === tokTypes.string) {\n    node.specifiers = [];\n    node.source = this.parseExprAtom();\n  } else {\n    var elt;\n    if (this.tok.type === tokTypes.name && this.tok.value !== \"from\") {\n      elt = this.startNode();\n      elt.local = this.parseIdent();\n      this.finishNode(elt, \"ImportDefaultSpecifier\");\n      this.eat(tokTypes.comma);\n    }\n    node.specifiers = this.parseImportSpecifierList();\n    node.source = this.eatContextual(\"from\") && this.tok.type === tokTypes.string ? this.parseExprAtom() : this.dummyString();\n    if (elt) { node.specifiers.unshift(elt); }\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\nlp$1.parseImportSpecifierList = function() {\n  var this$1 = this;\n\n  var elts = [];\n  if (this.tok.type === tokTypes.star) {\n    var elt = this.startNode();\n    this.next();\n    elt.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent();\n    elts.push(this.finishNode(elt, \"ImportNamespaceSpecifier\"));\n  } else {\n    var indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart;\n    this.pushCx();\n    this.eat(tokTypes.braceL);\n    if (this.curLineStart > continuedLine) { continuedLine = this.curLineStart; }\n    while (!this.closes(tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n      var elt$1 = this$1.startNode();\n      if (this$1.eat(tokTypes.star)) {\n        elt$1.local = this$1.eatContextual(\"as\") ? this$1.parseIdent() : this$1.dummyIdent();\n        this$1.finishNode(elt$1, \"ImportNamespaceSpecifier\");\n      } else {\n        if (this$1.isContextual(\"from\")) { break }\n        elt$1.imported = this$1.parseIdent();\n        if (isDummy(elt$1.imported)) { break }\n        elt$1.local = this$1.eatContextual(\"as\") ? this$1.parseIdent() : elt$1.imported;\n        this$1.finishNode(elt$1, \"ImportSpecifier\");\n      }\n      elts.push(elt$1);\n      this$1.eat(tokTypes.comma);\n    }\n    this.eat(tokTypes.braceR);\n    this.popCx();\n  }\n  return elts\n};\n\nlp$1.parseExportSpecifierList = function() {\n  var this$1 = this;\n\n  var elts = [];\n  var indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart;\n  this.pushCx();\n  this.eat(tokTypes.braceL);\n  if (this.curLineStart > continuedLine) { continuedLine = this.curLineStart; }\n  while (!this.closes(tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n    if (this$1.isContextual(\"from\")) { break }\n    var elt = this$1.startNode();\n    elt.local = this$1.parseIdent();\n    if (isDummy(elt.local)) { break }\n    elt.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent() : elt.local;\n    this$1.finishNode(elt, \"ExportSpecifier\");\n    elts.push(elt);\n    this$1.eat(tokTypes.comma);\n  }\n  this.eat(tokTypes.braceR);\n  this.popCx();\n  return elts\n};\n\nvar lp$2 = LooseParser.prototype;\n\nlp$2.checkLVal = function(expr) {\n  if (!expr) { return expr }\n  switch (expr.type) {\n  case \"Identifier\":\n  case \"MemberExpression\":\n    return expr\n\n  case \"ParenthesizedExpression\":\n    expr.expression = this.checkLVal(expr.expression);\n    return expr\n\n  default:\n    return this.dummyIdent()\n  }\n};\n\nlp$2.parseExpression = function(noIn) {\n  var this$1 = this;\n\n  var start = this.storeCurrentPos();\n  var expr = this.parseMaybeAssign(noIn);\n  if (this.tok.type === tokTypes.comma) {\n    var node = this.startNodeAt(start);\n    node.expressions = [expr];\n    while (this.eat(tokTypes.comma)) { node.expressions.push(this$1.parseMaybeAssign(noIn)); }\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\nlp$2.parseParenExpression = function() {\n  this.pushCx();\n  this.expect(tokTypes.parenL);\n  var val = this.parseExpression();\n  this.popCx();\n  this.expect(tokTypes.parenR);\n  return val\n};\n\nlp$2.parseMaybeAssign = function(noIn) {\n  if (this.toks.isContextual(\"yield\")) {\n    var node = this.startNode();\n    this.next();\n    if (this.semicolon() || this.canInsertSemicolon() || (this.tok.type !== tokTypes.star && !this.tok.type.startsExpr)) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(tokTypes.star);\n      node.argument = this.parseMaybeAssign();\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  }\n\n  var start = this.storeCurrentPos();\n  var left = this.parseMaybeConditional(noIn);\n  if (this.tok.type.isAssign) {\n    var node$1 = this.startNodeAt(start);\n    node$1.operator = this.tok.value;\n    node$1.left = this.tok.type === tokTypes.eq ? this.toAssignable(left) : this.checkLVal(left);\n    this.next();\n    node$1.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node$1, \"AssignmentExpression\")\n  }\n  return left\n};\n\nlp$2.parseMaybeConditional = function(noIn) {\n  var start = this.storeCurrentPos();\n  var expr = this.parseExprOps(noIn);\n  if (this.eat(tokTypes.question)) {\n    var node = this.startNodeAt(start);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    node.alternate = this.expect(tokTypes.colon) ? this.parseMaybeAssign(noIn) : this.dummyIdent();\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\nlp$2.parseExprOps = function(noIn) {\n  var start = this.storeCurrentPos();\n  var indent = this.curIndent, line = this.curLineStart;\n  return this.parseExprOp(this.parseMaybeUnary(false), start, -1, noIn, indent, line)\n};\n\nlp$2.parseExprOp = function(left, start, minPrec, noIn, indent, line) {\n  if (this.curLineStart !== line && this.curIndent < indent && this.tokenStartsLine()) { return left }\n  var prec = this.tok.type.binop;\n  if (prec != null && (!noIn || this.tok.type !== tokTypes._in)) {\n    if (prec > minPrec) {\n      var node = this.startNodeAt(start);\n      node.left = left;\n      node.operator = this.tok.value;\n      this.next();\n      if (this.curLineStart !== line && this.curIndent < indent && this.tokenStartsLine()) {\n        node.right = this.dummyIdent();\n      } else {\n        var rightStart = this.storeCurrentPos();\n        node.right = this.parseExprOp(this.parseMaybeUnary(false), rightStart, prec, noIn, indent, line);\n      }\n      this.finishNode(node, /&&|\\|\\|/.test(node.operator) ? \"LogicalExpression\" : \"BinaryExpression\");\n      return this.parseExprOp(node, start, minPrec, noIn, indent, line)\n    }\n  }\n  return left\n};\n\nlp$2.parseMaybeUnary = function(sawUnary) {\n  var this$1 = this;\n\n  var start = this.storeCurrentPos(), expr;\n  if (this.options.ecmaVersion >= 8 && this.toks.isContextual(\"await\") &&\n    (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))\n  ) {\n    expr = this.parseAwait();\n    sawUnary = true;\n  } else if (this.tok.type.prefix) {\n    var node = this.startNode(), update = this.tok.type === tokTypes.incDec;\n    if (!update) { sawUnary = true; }\n    node.operator = this.tok.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(true);\n    if (update) { node.argument = this.checkLVal(node.argument); }\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else if (this.tok.type === tokTypes.ellipsis) {\n    var node$1 = this.startNode();\n    this.next();\n    node$1.argument = this.parseMaybeUnary(sawUnary);\n    expr = this.finishNode(node$1, \"SpreadElement\");\n  } else {\n    expr = this.parseExprSubscripts();\n    while (this.tok.type.postfix && !this.canInsertSemicolon()) {\n      var node$2 = this$1.startNodeAt(start);\n      node$2.operator = this$1.tok.value;\n      node$2.prefix = false;\n      node$2.argument = this$1.checkLVal(expr);\n      this$1.next();\n      expr = this$1.finishNode(node$2, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(tokTypes.starstar)) {\n    var node$3 = this.startNodeAt(start);\n    node$3.operator = \"**\";\n    node$3.left = expr;\n    node$3.right = this.parseMaybeUnary(false);\n    return this.finishNode(node$3, \"BinaryExpression\")\n  }\n\n  return expr\n};\n\nlp$2.parseExprSubscripts = function() {\n  var start = this.storeCurrentPos();\n  return this.parseSubscripts(this.parseExprAtom(), start, false, this.curIndent, this.curLineStart)\n};\n\nlp$2.parseSubscripts = function(base, start, noCalls, startIndent, line) {\n  var this$1 = this;\n\n  for (;;) {\n    if (this$1.curLineStart !== line && this$1.curIndent <= startIndent && this$1.tokenStartsLine()) {\n      if (this$1.tok.type === tokTypes.dot && this$1.curIndent === startIndent)\n        { --startIndent; }\n      else\n        { return base }\n    }\n\n    var maybeAsyncArrow = base.type === \"Identifier\" && base.name === \"async\" && !this$1.canInsertSemicolon();\n\n    if (this$1.eat(tokTypes.dot)) {\n      var node = this$1.startNodeAt(start);\n      node.object = base;\n      if (this$1.curLineStart !== line && this$1.curIndent <= startIndent && this$1.tokenStartsLine())\n        { node.property = this$1.dummyIdent(); }\n      else\n        { node.property = this$1.parsePropertyAccessor() || this$1.dummyIdent(); }\n      node.computed = false;\n      base = this$1.finishNode(node, \"MemberExpression\");\n    } else if (this$1.tok.type === tokTypes.bracketL) {\n      this$1.pushCx();\n      this$1.next();\n      var node$1 = this$1.startNodeAt(start);\n      node$1.object = base;\n      node$1.property = this$1.parseExpression();\n      node$1.computed = true;\n      this$1.popCx();\n      this$1.expect(tokTypes.bracketR);\n      base = this$1.finishNode(node$1, \"MemberExpression\");\n    } else if (!noCalls && this$1.tok.type === tokTypes.parenL) {\n      var exprList = this$1.parseExprList(tokTypes.parenR);\n      if (maybeAsyncArrow && this$1.eat(tokTypes.arrow))\n        { return this$1.parseArrowExpression(this$1.startNodeAt(start), exprList, true) }\n      var node$2 = this$1.startNodeAt(start);\n      node$2.callee = base;\n      node$2.arguments = exprList;\n      base = this$1.finishNode(node$2, \"CallExpression\");\n    } else if (this$1.tok.type === tokTypes.backQuote) {\n      var node$3 = this$1.startNodeAt(start);\n      node$3.tag = base;\n      node$3.quasi = this$1.parseTemplate();\n      base = this$1.finishNode(node$3, \"TaggedTemplateExpression\");\n    } else {\n      return base\n    }\n  }\n};\n\nlp$2.parseExprAtom = function() {\n  var node;\n  switch (this.tok.type) {\n  case tokTypes._this:\n  case tokTypes._super:\n    var type = this.tok.type === tokTypes._this ? \"ThisExpression\" : \"Super\";\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, type)\n\n  case tokTypes.name:\n    var start = this.storeCurrentPos();\n    var id = this.parseIdent();\n    var isAsync = false;\n    if (id.name === \"async\" && !this.canInsertSemicolon()) {\n      if (this.eat(tokTypes._function))\n        { return this.parseFunction(this.startNodeAt(start), false, true) }\n      if (this.tok.type === tokTypes.name) {\n        id = this.parseIdent();\n        isAsync = true;\n      }\n    }\n    return this.eat(tokTypes.arrow) ? this.parseArrowExpression(this.startNodeAt(start), [id], isAsync) : id\n\n  case tokTypes.regexp:\n    node = this.startNode();\n    var val = this.tok.value;\n    node.regex = {pattern: val.pattern, flags: val.flags};\n    node.value = val.value;\n    node.raw = this.input.slice(this.tok.start, this.tok.end);\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case tokTypes.num: case tokTypes.string:\n    node = this.startNode();\n    node.value = this.tok.value;\n    node.raw = this.input.slice(this.tok.start, this.tok.end);\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case tokTypes._null: case tokTypes._true: case tokTypes._false:\n    node = this.startNode();\n    node.value = this.tok.type === tokTypes._null ? null : this.tok.type === tokTypes._true;\n    node.raw = this.tok.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case tokTypes.parenL:\n    var parenStart = this.storeCurrentPos();\n    this.next();\n    var inner = this.parseExpression();\n    this.expect(tokTypes.parenR);\n    if (this.eat(tokTypes.arrow)) {\n      // (a,)=>a // SequenceExpression makes dummy in the last hole. Drop the dummy.\n      var params = inner.expressions || [inner];\n      if (params.length && isDummy(params[params.length - 1]))\n        { params.pop(); }\n      return this.parseArrowExpression(this.startNodeAt(parenStart), params)\n    }\n    if (this.options.preserveParens) {\n      var par = this.startNodeAt(parenStart);\n      par.expression = inner;\n      inner = this.finishNode(par, \"ParenthesizedExpression\");\n    }\n    return inner\n\n  case tokTypes.bracketL:\n    node = this.startNode();\n    node.elements = this.parseExprList(tokTypes.bracketR, true);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case tokTypes.braceL:\n    return this.parseObj()\n\n  case tokTypes._class:\n    return this.parseClass(false)\n\n  case tokTypes._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, false)\n\n  case tokTypes._new:\n    return this.parseNew()\n\n  case tokTypes.backQuote:\n    return this.parseTemplate()\n\n  default:\n    return this.dummyIdent()\n  }\n};\n\nlp$2.parseNew = function() {\n  var node = this.startNode(), startIndent = this.curIndent, line = this.curLineStart;\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(tokTypes.dot)) {\n    node.meta = meta;\n    node.property = this.parseIdent(true);\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var start = this.storeCurrentPos();\n  node.callee = this.parseSubscripts(this.parseExprAtom(), start, true, startIndent, line);\n  if (this.tok.type === tokTypes.parenL) {\n    node.arguments = this.parseExprList(tokTypes.parenR);\n  } else {\n    node.arguments = [];\n  }\n  return this.finishNode(node, \"NewExpression\")\n};\n\nlp$2.parseTemplateElement = function() {\n  var elem = this.startNode();\n\n  // The loose parser accepts invalid unicode escapes even in untagged templates.\n  if (this.tok.type === tokTypes.invalidTemplate) {\n    elem.value = {\n      raw: this.tok.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.tok.start, this.tok.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.tok.value\n    };\n  }\n  this.next();\n  elem.tail = this.tok.type === tokTypes.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\nlp$2.parseTemplate = function() {\n  var this$1 = this;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement();\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    this$1.next();\n    node.expressions.push(this$1.parseExpression());\n    if (this$1.expect(tokTypes.braceR)) {\n      curElt = this$1.parseTemplateElement();\n    } else {\n      curElt = this$1.startNode();\n      curElt.value = {cooked: \"\", raw: \"\"};\n      curElt.tail = true;\n      this$1.finishNode(curElt, \"TemplateElement\");\n    }\n    node.quasis.push(curElt);\n  }\n  this.expect(tokTypes.backQuote);\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\nlp$2.parseObj = function() {\n  var this$1 = this;\n\n  var node = this.startNode();\n  node.properties = [];\n  this.pushCx();\n  var indent = this.curIndent + 1, line = this.curLineStart;\n  this.eat(tokTypes.braceL);\n  if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart; }\n  while (!this.closes(tokTypes.braceR, indent, line)) {\n    var prop = this$1.startNode(), isGenerator = (void 0), isAsync = (void 0), start = (void 0);\n    if (this$1.options.ecmaVersion >= 9 && this$1.eat(tokTypes.ellipsis)) {\n      prop.argument = this$1.parseMaybeAssign();\n      node.properties.push(this$1.finishNode(prop, \"SpreadElement\"));\n      this$1.eat(tokTypes.comma);\n      continue\n    }\n    if (this$1.options.ecmaVersion >= 6) {\n      start = this$1.storeCurrentPos();\n      prop.method = false;\n      prop.shorthand = false;\n      isGenerator = this$1.eat(tokTypes.star);\n    }\n    this$1.parsePropertyName(prop);\n    if (this$1.toks.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this$1.options.ecmaVersion >= 9 && this$1.eat(tokTypes.star);\n      this$1.parsePropertyName(prop);\n    } else {\n      isAsync = false;\n    }\n    if (isDummy(prop.key)) { if (isDummy(this$1.parseMaybeAssign())) { this$1.next(); } this$1.eat(tokTypes.comma); continue }\n    if (this$1.eat(tokTypes.colon)) {\n      prop.kind = \"init\";\n      prop.value = this$1.parseMaybeAssign();\n    } else if (this$1.options.ecmaVersion >= 6 && (this$1.tok.type === tokTypes.parenL || this$1.tok.type === tokTypes.braceL)) {\n      prop.kind = \"init\";\n      prop.method = true;\n      prop.value = this$1.parseMethod(isGenerator, isAsync);\n    } else if (this$1.options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" &&\n               !prop.computed && (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this$1.tok.type !== tokTypes.comma && this$1.tok.type !== tokTypes.braceR && this$1.tok.type !== tokTypes.eq)) {\n      prop.kind = prop.key.name;\n      this$1.parsePropertyName(prop);\n      prop.value = this$1.parseMethod(false);\n    } else {\n      prop.kind = \"init\";\n      if (this$1.options.ecmaVersion >= 6) {\n        if (this$1.eat(tokTypes.eq)) {\n          var assign = this$1.startNodeAt(start);\n          assign.operator = \"=\";\n          assign.left = prop.key;\n          assign.right = this$1.parseMaybeAssign();\n          prop.value = this$1.finishNode(assign, \"AssignmentExpression\");\n        } else {\n          prop.value = prop.key;\n        }\n      } else {\n        prop.value = this$1.dummyIdent();\n      }\n      prop.shorthand = true;\n    }\n    node.properties.push(this$1.finishNode(prop, \"Property\"));\n    this$1.eat(tokTypes.comma);\n  }\n  this.popCx();\n  if (!this.eat(tokTypes.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start;\n    if (this.options.locations) { this.last.loc.end = this.tok.loc.start; }\n  }\n  return this.finishNode(node, \"ObjectExpression\")\n};\n\nlp$2.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(tokTypes.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseExpression();\n      this.expect(tokTypes.bracketR);\n      return\n    } else {\n      prop.computed = false;\n    }\n  }\n  var key = (this.tok.type === tokTypes.num || this.tok.type === tokTypes.string) ? this.parseExprAtom() : this.parseIdent();\n  prop.key = key || this.dummyIdent();\n};\n\nlp$2.parsePropertyAccessor = function() {\n  if (this.tok.type === tokTypes.name || this.tok.type.keyword) { return this.parseIdent() }\n};\n\nlp$2.parseIdent = function() {\n  var name = this.tok.type === tokTypes.name ? this.tok.value : this.tok.type.keyword;\n  if (!name) { return this.dummyIdent() }\n  var node = this.startNode();\n  this.next();\n  node.name = name;\n  return this.finishNode(node, \"Identifier\")\n};\n\nlp$2.initFunction = function(node) {\n  node.id = null;\n  node.params = [];\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = false; }\n};\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\nlp$2.toAssignable = function(node, binding) {\n  var this$1 = this;\n\n  if (!node || node.type === \"Identifier\" || (node.type === \"MemberExpression\" && !binding)) {\n    // Okay\n  } else if (node.type === \"ParenthesizedExpression\") {\n    this.toAssignable(node.expression, binding);\n  } else if (this.options.ecmaVersion < 6) {\n    return this.dummyIdent()\n  } else if (node.type === \"ObjectExpression\") {\n    node.type = \"ObjectPattern\";\n    for (var i = 0, list = node.properties; i < list.length; i += 1)\n      {\n      var prop = list[i];\n\n      this$1.toAssignable(prop, binding);\n    }\n  } else if (node.type === \"ArrayExpression\") {\n    node.type = \"ArrayPattern\";\n    this.toAssignableList(node.elements, binding);\n  } else if (node.type === \"Property\") {\n    this.toAssignable(node.value, binding);\n  } else if (node.type === \"SpreadElement\") {\n    node.type = \"RestElement\";\n    this.toAssignable(node.argument, binding);\n  } else if (node.type === \"AssignmentExpression\") {\n    node.type = \"AssignmentPattern\";\n    delete node.operator;\n  } else {\n    return this.dummyIdent()\n  }\n  return node\n};\n\nlp$2.toAssignableList = function(exprList, binding) {\n  var this$1 = this;\n\n  for (var i = 0, list = exprList; i < list.length; i += 1)\n    {\n    var expr = list[i];\n\n    this$1.toAssignable(expr, binding);\n  }\n  return exprList\n};\n\nlp$2.parseFunctionParams = function(params) {\n  params = this.parseExprList(tokTypes.parenR);\n  return this.toAssignableList(params, true)\n};\n\nlp$2.parseMethod = function(isGenerator, isAsync) {\n  var node = this.startNode(), oldInAsync = this.inAsync, oldInFunction = this.inFunction;\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = !!isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n  this.inAsync = node.async;\n  this.inFunction = true;\n  node.params = this.parseFunctionParams();\n  node.body = this.parseBlock();\n  this.toks.adaptDirectivePrologue(node.body.body);\n  this.inAsync = oldInAsync;\n  this.inFunction = oldInFunction;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\nlp$2.parseArrowExpression = function(node, params, isAsync) {\n  var oldInAsync = this.inAsync, oldInFunction = this.inFunction;\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n  this.inAsync = node.async;\n  this.inFunction = true;\n  node.params = this.toAssignableList(params, true);\n  node.expression = this.tok.type !== tokTypes.braceL;\n  if (node.expression) {\n    node.body = this.parseMaybeAssign();\n  } else {\n    node.body = this.parseBlock();\n    this.toks.adaptDirectivePrologue(node.body.body);\n  }\n  this.inAsync = oldInAsync;\n  this.inFunction = oldInFunction;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\nlp$2.parseExprList = function(close, allowEmpty) {\n  var this$1 = this;\n\n  this.pushCx();\n  var indent = this.curIndent, line = this.curLineStart, elts = [];\n  this.next(); // Opening bracket\n  while (!this.closes(close, indent + 1, line)) {\n    if (this$1.eat(tokTypes.comma)) {\n      elts.push(allowEmpty ? null : this$1.dummyIdent());\n      continue\n    }\n    var elt = this$1.parseMaybeAssign();\n    if (isDummy(elt)) {\n      if (this$1.closes(close, indent, line)) { break }\n      this$1.next();\n    } else {\n      elts.push(elt);\n    }\n    this$1.eat(tokTypes.comma);\n  }\n  this.popCx();\n  if (!this.eat(close)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start;\n    if (this.options.locations) { this.last.loc.end = this.tok.loc.start; }\n  }\n  return elts\n};\n\nlp$2.parseAwait = function() {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary();\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\n// Acorn: Loose parser\n//\n// This module provides an alternative parser (`parse_dammit`) that\n// exposes that same interface as `parse`, but will try to parse\n// anything as JavaScript, repairing syntax error the best it can.\n// There are circumstances in which it will raise an error and give\n// up, but they are very rare. The resulting AST will be a mostly\n// valid JavaScript AST (as per the [Mozilla parser API][api], except\n// that:\n//\n// - Return outside functions is allowed\n//\n// - Label consistency (no conflicts, break only to existing labels)\n//   is not enforced.\n//\n// - Bogus Identifier nodes with a name of `\"✖\"` are inserted whenever\n//   the parser got too confused to return anything meaningful.\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n//\n// The expected use for this is to *first* try `acorn.parse`, and only\n// if that fails switch to `parse_dammit`. The loose parser might\n// parse badly indented code incorrectly, so **don't** use it as\n// your default parser.\n//\n// Quite a lot of acorn.js is duplicated here. The alternative was to\n// add a *lot* of extra cruft to that file, making it less readable\n// and slower. Copying and editing the code allowed me to make\n// invasive changes and simplifications without creating a complicated\n// tangle.\n\ndefaultOptions.tabSize = 4;\n\n// eslint-disable-next-line camelcase\nfunction parse_dammit(input, options) {\n  return new LooseParser(input, options).parse()\n}\n\naddLooseExports(parse_dammit, LooseParser, pluginsLoose);\n\nexport { parse_dammit, LooseParser, pluginsLoose };\n"]},"metadata":{},"sourceType":"module"}