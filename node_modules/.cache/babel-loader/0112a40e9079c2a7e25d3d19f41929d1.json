{"ast":null,"code":"/**\n * @fileoverview enforce the location of single-line statements\n * @author Teddy Katz\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst POSITION_SCHEMA = {\n  enum: [\"beside\", \"below\", \"any\"]\n};\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce the location of single-line statements\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/nonblock-statement-body-position\"\n    },\n    fixable: \"whitespace\",\n    schema: [POSITION_SCHEMA, {\n      properties: {\n        overrides: {\n          properties: {\n            if: POSITION_SCHEMA,\n            else: POSITION_SCHEMA,\n            while: POSITION_SCHEMA,\n            do: POSITION_SCHEMA,\n            for: POSITION_SCHEMA\n          },\n          additionalProperties: false\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode(); //----------------------------------------------------------------------\n    // Helpers\n    //----------------------------------------------------------------------\n\n    /**\n     * Gets the applicable preference for a particular keyword\n     * @param {string} keywordName The name of a keyword, e.g. 'if'\n     * @returns {string} The applicable option for the keyword, e.g. 'beside'\n     */\n\n    function getOption(keywordName) {\n      return context.options[1] && context.options[1].overrides && context.options[1].overrides[keywordName] || context.options[0] || \"beside\";\n    }\n    /**\n     * Validates the location of a single-line statement\n     * @param {ASTNode} node The single-line statement\n     * @param {string} keywordName The applicable keyword name for the single-line statement\n     * @returns {void}\n     */\n\n\n    function validateStatement(node, keywordName) {\n      const option = getOption(keywordName);\n\n      if (node.type === \"BlockStatement\" || option === \"any\") {\n        return;\n      }\n\n      const tokenBefore = sourceCode.getTokenBefore(node);\n\n      if (tokenBefore.loc.end.line === node.loc.start.line && option === \"below\") {\n        context.report({\n          node,\n          message: \"Expected a linebreak before this statement.\",\n          fix: fixer => fixer.insertTextBefore(node, \"\\n\")\n        });\n      } else if (tokenBefore.loc.end.line !== node.loc.start.line && option === \"beside\") {\n        context.report({\n          node,\n          message: \"Expected no linebreak before this statement.\",\n\n          fix(fixer) {\n            if (sourceCode.getText().slice(tokenBefore.range[1], node.range[0]).trim()) {\n              return null;\n            }\n\n            return fixer.replaceTextRange([tokenBefore.range[1], node.range[0]], \" \");\n          }\n\n        });\n      }\n    } //----------------------------------------------------------------------\n    // Public\n    //----------------------------------------------------------------------\n\n\n    return {\n      IfStatement(node) {\n        validateStatement(node.consequent, \"if\"); // Check the `else` node, but don't check 'else if' statements.\n\n        if (node.alternate && node.alternate.type !== \"IfStatement\") {\n          validateStatement(node.alternate, \"else\");\n        }\n      },\n\n      WhileStatement: node => validateStatement(node.body, \"while\"),\n      DoWhileStatement: node => validateStatement(node.body, \"do\"),\n      ForStatement: node => validateStatement(node.body, \"for\"),\n      ForInStatement: node => validateStatement(node.body, \"for\"),\n      ForOfStatement: node => validateStatement(node.body, \"for\")\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/nonblock-statement-body-position.js"],"names":["POSITION_SCHEMA","enum","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","properties","overrides","if","else","while","do","for","additionalProperties","create","context","sourceCode","getSourceCode","getOption","keywordName","options","validateStatement","node","option","tokenBefore","getTokenBefore","loc","end","line","start","report","message","fix","fixer","insertTextBefore","getText","slice","range","trim","replaceTextRange","IfStatement","consequent","alternate","WhileStatement","body","DoWhileStatement","ForStatement","ForInStatement","ForOfStatement"],"mappings":"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","sourcesContent":["/**\n * @fileoverview enforce the location of single-line statements\n * @author Teddy Katz\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst POSITION_SCHEMA = { enum: [\"beside\", \"below\", \"any\"] };\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce the location of single-line statements\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/nonblock-statement-body-position\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            POSITION_SCHEMA,\n            {\n                properties: {\n                    overrides: {\n                        properties: {\n                            if: POSITION_SCHEMA,\n                            else: POSITION_SCHEMA,\n                            while: POSITION_SCHEMA,\n                            do: POSITION_SCHEMA,\n                            for: POSITION_SCHEMA\n                        },\n                        additionalProperties: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        //----------------------------------------------------------------------\n        // Helpers\n        //----------------------------------------------------------------------\n\n        /**\n         * Gets the applicable preference for a particular keyword\n         * @param {string} keywordName The name of a keyword, e.g. 'if'\n         * @returns {string} The applicable option for the keyword, e.g. 'beside'\n         */\n        function getOption(keywordName) {\n            return context.options[1] && context.options[1].overrides && context.options[1].overrides[keywordName] ||\n                context.options[0] ||\n                \"beside\";\n        }\n\n        /**\n         * Validates the location of a single-line statement\n         * @param {ASTNode} node The single-line statement\n         * @param {string} keywordName The applicable keyword name for the single-line statement\n         * @returns {void}\n         */\n        function validateStatement(node, keywordName) {\n            const option = getOption(keywordName);\n\n            if (node.type === \"BlockStatement\" || option === \"any\") {\n                return;\n            }\n\n            const tokenBefore = sourceCode.getTokenBefore(node);\n\n            if (tokenBefore.loc.end.line === node.loc.start.line && option === \"below\") {\n                context.report({\n                    node,\n                    message: \"Expected a linebreak before this statement.\",\n                    fix: fixer => fixer.insertTextBefore(node, \"\\n\")\n                });\n            } else if (tokenBefore.loc.end.line !== node.loc.start.line && option === \"beside\") {\n                context.report({\n                    node,\n                    message: \"Expected no linebreak before this statement.\",\n                    fix(fixer) {\n                        if (sourceCode.getText().slice(tokenBefore.range[1], node.range[0]).trim()) {\n                            return null;\n                        }\n                        return fixer.replaceTextRange([tokenBefore.range[1], node.range[0]], \" \");\n                    }\n                });\n            }\n        }\n\n        //----------------------------------------------------------------------\n        // Public\n        //----------------------------------------------------------------------\n\n        return {\n            IfStatement(node) {\n                validateStatement(node.consequent, \"if\");\n\n                // Check the `else` node, but don't check 'else if' statements.\n                if (node.alternate && node.alternate.type !== \"IfStatement\") {\n                    validateStatement(node.alternate, \"else\");\n                }\n            },\n            WhileStatement: node => validateStatement(node.body, \"while\"),\n            DoWhileStatement: node => validateStatement(node.body, \"do\"),\n            ForStatement: node => validateStatement(node.body, \"for\"),\n            ForInStatement: node => validateStatement(node.body, \"for\"),\n            ForOfStatement: node => validateStatement(node.body, \"for\")\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}