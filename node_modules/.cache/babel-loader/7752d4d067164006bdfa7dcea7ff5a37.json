{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.wrapAnsiString = exports.getSummary = exports.relativePath = exports.formatTestPath = exports.trimAndFormatPath = exports.printDisplayName = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _slash() {\n  const data = _interopRequireDefault(require('slash'));\n\n  _slash = function _slash() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst PROGRESS_BAR_WIDTH = 40;\n\nconst printDisplayName = config => {\n  const displayName = config.displayName;\n\n  const white = _chalk().default.reset.inverse.white;\n\n  if (!displayName) {\n    return '';\n  }\n\n  if (typeof displayName === 'string') {\n    return _chalk().default.supportsColor ? white(` ${displayName} `) : displayName;\n  }\n\n  const name = displayName.name,\n        color = displayName.color;\n  const chosenColor = _chalk().default.reset.inverse[color] ? _chalk().default.reset.inverse[color] : white;\n  return _chalk().default.supportsColor ? chosenColor(` ${name} `) : name;\n};\n\nexports.printDisplayName = printDisplayName;\n\nconst trimAndFormatPath = (pad, config, testPath, columns) => {\n  const maxLength = columns - pad;\n  const relative = relativePath(config, testPath);\n  const basename = relative.basename;\n  let dirname = relative.dirname; // length is ok\n\n  if ((dirname + _path().default.sep + basename).length <= maxLength) {\n    return (0, _slash().default)(_chalk().default.dim(dirname + _path().default.sep) + _chalk().default.bold(basename));\n  } // we can fit trimmed dirname and full basename\n\n\n  const basenameLength = basename.length;\n\n  if (basenameLength + 4 < maxLength) {\n    const dirnameLength = maxLength - 4 - basenameLength;\n    dirname = '...' + dirname.slice(dirname.length - dirnameLength, dirname.length);\n    return (0, _slash().default)(_chalk().default.dim(dirname + _path().default.sep) + _chalk().default.bold(basename));\n  }\n\n  if (basenameLength + 4 === maxLength) {\n    return (0, _slash().default)(_chalk().default.dim('...' + _path().default.sep) + _chalk().default.bold(basename));\n  } // can't fit dirname, but can fit trimmed basename\n\n\n  return (0, _slash().default)(_chalk().default.bold('...' + basename.slice(basename.length - maxLength - 4, basename.length)));\n};\n\nexports.trimAndFormatPath = trimAndFormatPath;\n\nconst formatTestPath = (config, testPath) => {\n  const _relativePath = relativePath(config, testPath),\n        dirname = _relativePath.dirname,\n        basename = _relativePath.basename;\n\n  return (0, _slash().default)(_chalk().default.dim(dirname + _path().default.sep) + _chalk().default.bold(basename));\n};\n\nexports.formatTestPath = formatTestPath;\n\nconst relativePath = (config, testPath) => {\n  // this function can be called with ProjectConfigs or GlobalConfigs. GlobalConfigs\n  // do not have config.cwd, only config.rootDir. Try using config.cwd, fallback\n  // to config.rootDir. (Also, some unit just use config.rootDir, which is ok)\n  testPath = _path().default.relative(config.cwd || config.rootDir, testPath);\n\n  const dirname = _path().default.dirname(testPath);\n\n  const basename = _path().default.basename(testPath);\n\n  return {\n    basename,\n    dirname\n  };\n};\n\nexports.relativePath = relativePath;\n\nconst getSummary = (aggregatedResults, options) => {\n  let runTime = (Date.now() - aggregatedResults.startTime) / 1000;\n\n  if (options && options.roundTime) {\n    runTime = Math.floor(runTime);\n  }\n\n  const estimatedTime = options && options.estimatedTime || 0;\n  const snapshotResults = aggregatedResults.snapshot;\n  const snapshotsAdded = snapshotResults.added;\n  const snapshotsFailed = snapshotResults.unmatched;\n  const snapshotsOutdated = snapshotResults.unchecked;\n  const snapshotsFilesRemoved = snapshotResults.filesRemoved;\n  const snapshotsDidUpdate = snapshotResults.didUpdate;\n  const snapshotsPassed = snapshotResults.matched;\n  const snapshotsTotal = snapshotResults.total;\n  const snapshotsUpdated = snapshotResults.updated;\n  const suitesFailed = aggregatedResults.numFailedTestSuites;\n  const suitesPassed = aggregatedResults.numPassedTestSuites;\n  const suitesPending = aggregatedResults.numPendingTestSuites;\n  const suitesRun = suitesFailed + suitesPassed;\n  const suitesTotal = aggregatedResults.numTotalTestSuites;\n  const testsFailed = aggregatedResults.numFailedTests;\n  const testsPassed = aggregatedResults.numPassedTests;\n  const testsPending = aggregatedResults.numPendingTests;\n  const testsTodo = aggregatedResults.numTodoTests;\n  const testsTotal = aggregatedResults.numTotalTests;\n  const width = options && options.width || 0;\n  const suites = _chalk().default.bold('Test Suites: ') + (suitesFailed ? _chalk().default.bold.red(`${suitesFailed} failed`) + ', ' : '') + (suitesPending ? _chalk().default.bold.yellow(`${suitesPending} skipped`) + ', ' : '') + (suitesPassed ? _chalk().default.bold.green(`${suitesPassed} passed`) + ', ' : '') + (suitesRun !== suitesTotal ? suitesRun + ' of ' + suitesTotal : suitesTotal) + ` total`;\n  const tests = _chalk().default.bold('Tests:       ') + (testsFailed ? _chalk().default.bold.red(`${testsFailed} failed`) + ', ' : '') + (testsPending ? _chalk().default.bold.yellow(`${testsPending} skipped`) + ', ' : '') + (testsTodo ? _chalk().default.bold.magenta(`${testsTodo} todo`) + ', ' : '') + (testsPassed ? _chalk().default.bold.green(`${testsPassed} passed`) + ', ' : '') + `${testsTotal} total`;\n  const snapshots = _chalk().default.bold('Snapshots:   ') + (snapshotsFailed ? _chalk().default.bold.red(`${snapshotsFailed} failed`) + ', ' : '') + (snapshotsOutdated && !snapshotsDidUpdate ? _chalk().default.bold.yellow(`${snapshotsOutdated} obsolete`) + ', ' : '') + (snapshotsOutdated && snapshotsDidUpdate ? _chalk().default.bold.green(`${snapshotsOutdated} removed`) + ', ' : '') + (snapshotsFilesRemoved && !snapshotsDidUpdate ? _chalk().default.bold.yellow((0, _jestUtil().pluralize)('file', snapshotsFilesRemoved) + ' obsolete') + ', ' : '') + (snapshotsFilesRemoved && snapshotsDidUpdate ? _chalk().default.bold.green((0, _jestUtil().pluralize)('file', snapshotsFilesRemoved) + ' removed') + ', ' : '') + (snapshotsUpdated ? _chalk().default.bold.green(`${snapshotsUpdated} updated`) + ', ' : '') + (snapshotsAdded ? _chalk().default.bold.green(`${snapshotsAdded} written`) + ', ' : '') + (snapshotsPassed ? _chalk().default.bold.green(`${snapshotsPassed} passed`) + ', ' : '') + `${snapshotsTotal} total`;\n  const time = renderTime(runTime, estimatedTime, width);\n  return [suites, tests, snapshots, time].join('\\n');\n};\n\nexports.getSummary = getSummary;\n\nconst renderTime = (runTime, estimatedTime, width) => {\n  // If we are more than one second over the estimated time, highlight it.\n  const renderedTime = estimatedTime && runTime >= estimatedTime + 1 ? _chalk().default.bold.yellow(runTime + 's') : runTime + 's';\n  let time = _chalk().default.bold(`Time:`) + `        ${renderedTime}`;\n\n  if (runTime < estimatedTime) {\n    time += `, estimated ${estimatedTime}s`;\n  } // Only show a progress bar if the test run is actually going to take\n  // some time.\n\n\n  if (estimatedTime > 2 && runTime < estimatedTime && width) {\n    const availableWidth = Math.min(PROGRESS_BAR_WIDTH, width);\n    const length = Math.min(Math.floor(runTime / estimatedTime * availableWidth), availableWidth);\n\n    if (availableWidth >= 2) {\n      time += '\\n' + _chalk().default.green('█').repeat(length) + _chalk().default.white('█').repeat(availableWidth - length);\n    }\n  }\n\n  return time;\n}; // word-wrap a string that contains ANSI escape sequences.\n// ANSI escape sequences do not add to the string length.\n\n\nconst wrapAnsiString = (string, terminalWidth) => {\n  if (terminalWidth === 0) {\n    // if the terminal width is zero, don't bother word-wrapping\n    return string;\n  }\n\n  const ANSI_REGEXP = /[\\u001b\\u009b]\\[\\d{1,2}m/g;\n  const tokens = [];\n  let lastIndex = 0;\n  let match;\n\n  while (match = ANSI_REGEXP.exec(string)) {\n    const ansi = match[0];\n    const index = match['index'];\n\n    if (index != lastIndex) {\n      tokens.push(['string', string.slice(lastIndex, index)]);\n    }\n\n    tokens.push(['ansi', ansi]);\n    lastIndex = index + ansi.length;\n  }\n\n  if (lastIndex != string.length - 1) {\n    tokens.push(['string', string.slice(lastIndex, string.length)]);\n  }\n\n  let lastLineLength = 0;\n  return tokens.reduce((lines, [kind, token]) => {\n    if (kind === 'string') {\n      if (lastLineLength + token.length > terminalWidth) {\n        while (token.length) {\n          const chunk = token.slice(0, terminalWidth - lastLineLength);\n          const remaining = token.slice(terminalWidth - lastLineLength, token.length);\n          lines[lines.length - 1] += chunk;\n          lastLineLength += chunk.length;\n          token = remaining;\n\n          if (token.length) {\n            lines.push('');\n            lastLineLength = 0;\n          }\n        }\n      } else {\n        lines[lines.length - 1] += token;\n        lastLineLength += token.length;\n      }\n    } else {\n      lines[lines.length - 1] += token;\n    }\n\n    return lines;\n  }, ['']).join('\\n');\n};\n\nexports.wrapAnsiString = wrapAnsiString;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/@jest/reporters/build/utils.js"],"names":["Object","defineProperty","exports","value","wrapAnsiString","getSummary","relativePath","formatTestPath","trimAndFormatPath","printDisplayName","_path","data","_interopRequireDefault","require","_chalk","_slash","_jestUtil","obj","__esModule","default","PROGRESS_BAR_WIDTH","config","displayName","white","reset","inverse","supportsColor","name","color","chosenColor","pad","testPath","columns","maxLength","relative","basename","dirname","sep","length","dim","bold","basenameLength","dirnameLength","slice","_relativePath","cwd","rootDir","aggregatedResults","options","runTime","Date","now","startTime","roundTime","Math","floor","estimatedTime","snapshotResults","snapshot","snapshotsAdded","added","snapshotsFailed","unmatched","snapshotsOutdated","unchecked","snapshotsFilesRemoved","filesRemoved","snapshotsDidUpdate","didUpdate","snapshotsPassed","matched","snapshotsTotal","total","snapshotsUpdated","updated","suitesFailed","numFailedTestSuites","suitesPassed","numPassedTestSuites","suitesPending","numPendingTestSuites","suitesRun","suitesTotal","numTotalTestSuites","testsFailed","numFailedTests","testsPassed","numPassedTests","testsPending","numPendingTests","testsTodo","numTodoTests","testsTotal","numTotalTests","width","suites","red","yellow","green","tests","magenta","snapshots","pluralize","time","renderTime","join","renderedTime","availableWidth","min","repeat","string","terminalWidth","ANSI_REGEXP","tokens","lastIndex","match","exec","ansi","index","push","lastLineLength","reduce","lines","kind","token","chunk","remaining"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.wrapAnsiString = exports.getSummary = exports.relativePath = exports.formatTestPath = exports.trimAndFormatPath = exports.printDisplayName = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _slash() {\n  const data = _interopRequireDefault(require('slash'));\n\n  _slash = function _slash() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst PROGRESS_BAR_WIDTH = 40;\n\nconst printDisplayName = config => {\n  const displayName = config.displayName;\n\n  const white = _chalk().default.reset.inverse.white;\n\n  if (!displayName) {\n    return '';\n  }\n\n  if (typeof displayName === 'string') {\n    return _chalk().default.supportsColor\n      ? white(` ${displayName} `)\n      : displayName;\n  }\n\n  const name = displayName.name,\n    color = displayName.color;\n  const chosenColor = _chalk().default.reset.inverse[color]\n    ? _chalk().default.reset.inverse[color]\n    : white;\n  return _chalk().default.supportsColor ? chosenColor(` ${name} `) : name;\n};\n\nexports.printDisplayName = printDisplayName;\n\nconst trimAndFormatPath = (pad, config, testPath, columns) => {\n  const maxLength = columns - pad;\n  const relative = relativePath(config, testPath);\n  const basename = relative.basename;\n  let dirname = relative.dirname; // length is ok\n\n  if ((dirname + _path().default.sep + basename).length <= maxLength) {\n    return (0, _slash().default)(\n      _chalk().default.dim(dirname + _path().default.sep) +\n        _chalk().default.bold(basename)\n    );\n  } // we can fit trimmed dirname and full basename\n\n  const basenameLength = basename.length;\n\n  if (basenameLength + 4 < maxLength) {\n    const dirnameLength = maxLength - 4 - basenameLength;\n    dirname =\n      '...' + dirname.slice(dirname.length - dirnameLength, dirname.length);\n    return (0, _slash().default)(\n      _chalk().default.dim(dirname + _path().default.sep) +\n        _chalk().default.bold(basename)\n    );\n  }\n\n  if (basenameLength + 4 === maxLength) {\n    return (0, _slash().default)(\n      _chalk().default.dim('...' + _path().default.sep) +\n        _chalk().default.bold(basename)\n    );\n  } // can't fit dirname, but can fit trimmed basename\n\n  return (0, _slash().default)(\n    _chalk().default.bold(\n      '...' + basename.slice(basename.length - maxLength - 4, basename.length)\n    )\n  );\n};\n\nexports.trimAndFormatPath = trimAndFormatPath;\n\nconst formatTestPath = (config, testPath) => {\n  const _relativePath = relativePath(config, testPath),\n    dirname = _relativePath.dirname,\n    basename = _relativePath.basename;\n\n  return (0, _slash().default)(\n    _chalk().default.dim(dirname + _path().default.sep) +\n      _chalk().default.bold(basename)\n  );\n};\n\nexports.formatTestPath = formatTestPath;\n\nconst relativePath = (config, testPath) => {\n  // this function can be called with ProjectConfigs or GlobalConfigs. GlobalConfigs\n  // do not have config.cwd, only config.rootDir. Try using config.cwd, fallback\n  // to config.rootDir. (Also, some unit just use config.rootDir, which is ok)\n  testPath = _path().default.relative(config.cwd || config.rootDir, testPath);\n\n  const dirname = _path().default.dirname(testPath);\n\n  const basename = _path().default.basename(testPath);\n\n  return {\n    basename,\n    dirname\n  };\n};\n\nexports.relativePath = relativePath;\n\nconst getSummary = (aggregatedResults, options) => {\n  let runTime = (Date.now() - aggregatedResults.startTime) / 1000;\n\n  if (options && options.roundTime) {\n    runTime = Math.floor(runTime);\n  }\n\n  const estimatedTime = (options && options.estimatedTime) || 0;\n  const snapshotResults = aggregatedResults.snapshot;\n  const snapshotsAdded = snapshotResults.added;\n  const snapshotsFailed = snapshotResults.unmatched;\n  const snapshotsOutdated = snapshotResults.unchecked;\n  const snapshotsFilesRemoved = snapshotResults.filesRemoved;\n  const snapshotsDidUpdate = snapshotResults.didUpdate;\n  const snapshotsPassed = snapshotResults.matched;\n  const snapshotsTotal = snapshotResults.total;\n  const snapshotsUpdated = snapshotResults.updated;\n  const suitesFailed = aggregatedResults.numFailedTestSuites;\n  const suitesPassed = aggregatedResults.numPassedTestSuites;\n  const suitesPending = aggregatedResults.numPendingTestSuites;\n  const suitesRun = suitesFailed + suitesPassed;\n  const suitesTotal = aggregatedResults.numTotalTestSuites;\n  const testsFailed = aggregatedResults.numFailedTests;\n  const testsPassed = aggregatedResults.numPassedTests;\n  const testsPending = aggregatedResults.numPendingTests;\n  const testsTodo = aggregatedResults.numTodoTests;\n  const testsTotal = aggregatedResults.numTotalTests;\n  const width = (options && options.width) || 0;\n  const suites =\n    _chalk().default.bold('Test Suites: ') +\n    (suitesFailed\n      ? _chalk().default.bold.red(`${suitesFailed} failed`) + ', '\n      : '') +\n    (suitesPending\n      ? _chalk().default.bold.yellow(`${suitesPending} skipped`) + ', '\n      : '') +\n    (suitesPassed\n      ? _chalk().default.bold.green(`${suitesPassed} passed`) + ', '\n      : '') +\n    (suitesRun !== suitesTotal\n      ? suitesRun + ' of ' + suitesTotal\n      : suitesTotal) +\n    ` total`;\n  const tests =\n    _chalk().default.bold('Tests:       ') +\n    (testsFailed\n      ? _chalk().default.bold.red(`${testsFailed} failed`) + ', '\n      : '') +\n    (testsPending\n      ? _chalk().default.bold.yellow(`${testsPending} skipped`) + ', '\n      : '') +\n    (testsTodo\n      ? _chalk().default.bold.magenta(`${testsTodo} todo`) + ', '\n      : '') +\n    (testsPassed\n      ? _chalk().default.bold.green(`${testsPassed} passed`) + ', '\n      : '') +\n    `${testsTotal} total`;\n  const snapshots =\n    _chalk().default.bold('Snapshots:   ') +\n    (snapshotsFailed\n      ? _chalk().default.bold.red(`${snapshotsFailed} failed`) + ', '\n      : '') +\n    (snapshotsOutdated && !snapshotsDidUpdate\n      ? _chalk().default.bold.yellow(`${snapshotsOutdated} obsolete`) + ', '\n      : '') +\n    (snapshotsOutdated && snapshotsDidUpdate\n      ? _chalk().default.bold.green(`${snapshotsOutdated} removed`) + ', '\n      : '') +\n    (snapshotsFilesRemoved && !snapshotsDidUpdate\n      ? _chalk().default.bold.yellow(\n          (0, _jestUtil().pluralize)('file', snapshotsFilesRemoved) +\n            ' obsolete'\n        ) + ', '\n      : '') +\n    (snapshotsFilesRemoved && snapshotsDidUpdate\n      ? _chalk().default.bold.green(\n          (0, _jestUtil().pluralize)('file', snapshotsFilesRemoved) + ' removed'\n        ) + ', '\n      : '') +\n    (snapshotsUpdated\n      ? _chalk().default.bold.green(`${snapshotsUpdated} updated`) + ', '\n      : '') +\n    (snapshotsAdded\n      ? _chalk().default.bold.green(`${snapshotsAdded} written`) + ', '\n      : '') +\n    (snapshotsPassed\n      ? _chalk().default.bold.green(`${snapshotsPassed} passed`) + ', '\n      : '') +\n    `${snapshotsTotal} total`;\n  const time = renderTime(runTime, estimatedTime, width);\n  return [suites, tests, snapshots, time].join('\\n');\n};\n\nexports.getSummary = getSummary;\n\nconst renderTime = (runTime, estimatedTime, width) => {\n  // If we are more than one second over the estimated time, highlight it.\n  const renderedTime =\n    estimatedTime && runTime >= estimatedTime + 1\n      ? _chalk().default.bold.yellow(runTime + 's')\n      : runTime + 's';\n  let time = _chalk().default.bold(`Time:`) + `        ${renderedTime}`;\n\n  if (runTime < estimatedTime) {\n    time += `, estimated ${estimatedTime}s`;\n  } // Only show a progress bar if the test run is actually going to take\n  // some time.\n\n  if (estimatedTime > 2 && runTime < estimatedTime && width) {\n    const availableWidth = Math.min(PROGRESS_BAR_WIDTH, width);\n    const length = Math.min(\n      Math.floor((runTime / estimatedTime) * availableWidth),\n      availableWidth\n    );\n\n    if (availableWidth >= 2) {\n      time +=\n        '\\n' +\n        _chalk()\n          .default.green('█')\n          .repeat(length) +\n        _chalk()\n          .default.white('█')\n          .repeat(availableWidth - length);\n    }\n  }\n\n  return time;\n}; // word-wrap a string that contains ANSI escape sequences.\n// ANSI escape sequences do not add to the string length.\n\nconst wrapAnsiString = (string, terminalWidth) => {\n  if (terminalWidth === 0) {\n    // if the terminal width is zero, don't bother word-wrapping\n    return string;\n  }\n\n  const ANSI_REGEXP = /[\\u001b\\u009b]\\[\\d{1,2}m/g;\n  const tokens = [];\n  let lastIndex = 0;\n  let match;\n\n  while ((match = ANSI_REGEXP.exec(string))) {\n    const ansi = match[0];\n    const index = match['index'];\n\n    if (index != lastIndex) {\n      tokens.push(['string', string.slice(lastIndex, index)]);\n    }\n\n    tokens.push(['ansi', ansi]);\n    lastIndex = index + ansi.length;\n  }\n\n  if (lastIndex != string.length - 1) {\n    tokens.push(['string', string.slice(lastIndex, string.length)]);\n  }\n\n  let lastLineLength = 0;\n  return tokens\n    .reduce(\n      (lines, [kind, token]) => {\n        if (kind === 'string') {\n          if (lastLineLength + token.length > terminalWidth) {\n            while (token.length) {\n              const chunk = token.slice(0, terminalWidth - lastLineLength);\n              const remaining = token.slice(\n                terminalWidth - lastLineLength,\n                token.length\n              );\n              lines[lines.length - 1] += chunk;\n              lastLineLength += chunk.length;\n              token = remaining;\n\n              if (token.length) {\n                lines.push('');\n                lastLineLength = 0;\n              }\n            }\n          } else {\n            lines[lines.length - 1] += token;\n            lastLineLength += token.length;\n          }\n        } else {\n          lines[lines.length - 1] += token;\n        }\n\n        return lines;\n      },\n      ['']\n    )\n    .join('\\n');\n};\n\nexports.wrapAnsiString = wrapAnsiString;\n"]},"metadata":{},"sourceType":"script"}