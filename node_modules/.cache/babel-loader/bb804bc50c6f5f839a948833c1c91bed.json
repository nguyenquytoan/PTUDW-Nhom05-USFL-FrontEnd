{"ast":null,"code":"'use strict';\n\nexports.type = 'perItem';\nexports.active = true;\nexports.description = 'converts colors: rgb() to #rrggbb and #rrggbb to #rgb';\nexports.params = {\n  currentColor: false,\n  names2hex: true,\n  rgb2hex: true,\n  shorthex: true,\n  shortname: true\n};\n\nvar collections = require('./_collections'),\n    rNumber = '([+-]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)%?)',\n    rComma = '\\\\s*,\\\\s*',\n    regRGB = new RegExp('^rgb\\\\(\\\\s*' + rNumber + rComma + rNumber + rComma + rNumber + '\\\\s*\\\\)$'),\n    regHEX = /^\\#(([a-fA-F0-9])\\2){3}$/,\n    none = /\\bnone\\b/i;\n/**\n * Convert different colors formats in element attributes to hex.\n *\n * @see http://www.w3.org/TR/SVG/types.html#DataTypeColor\n * @see http://www.w3.org/TR/SVG/single-page.html#types-ColorKeywords\n *\n * @example\n * Convert color name keyword to long hex:\n * fuchsia ➡ #ff00ff\n *\n * Convert rgb() to long hex:\n * rgb(255, 0, 255) ➡ #ff00ff\n * rgb(50%, 100, 100%) ➡ #7f64ff\n *\n * Convert long hex to short hex:\n * #aabbcc ➡ #abc\n *\n * Convert hex to short name\n * #000080 ➡ navy\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\n\n\nexports.fn = function (item, params) {\n  if (item.elem) {\n    item.eachAttr(function (attr) {\n      if (collections.colorsProps.indexOf(attr.name) > -1) {\n        var val = attr.value,\n            match; // Convert colors to currentColor\n\n        if (params.currentColor) {\n          if (typeof params.currentColor === 'string') {\n            match = val === params.currentColor;\n          } else if (params.currentColor.exec) {\n            match = params.currentColor.exec(val);\n          } else {\n            match = !val.match(none);\n          }\n\n          if (match) {\n            val = 'currentColor';\n          }\n        } // Convert color name keyword to long hex\n\n\n        if (params.names2hex && val.toLowerCase() in collections.colorsNames) {\n          val = collections.colorsNames[val.toLowerCase()];\n        } // Convert rgb() to long hex\n\n\n        if (params.rgb2hex && (match = val.match(regRGB))) {\n          match = match.slice(1, 4).map(function (m) {\n            if (m.indexOf('%') > -1) m = Math.round(parseFloat(m) * 2.55);\n            return Math.max(0, Math.min(m, 255));\n          });\n          val = rgb2hex(match);\n        } // Convert long hex to short hex\n\n\n        if (params.shorthex && (match = val.match(regHEX))) {\n          val = '#' + match[0][1] + match[0][3] + match[0][5];\n        } // Convert hex to short name\n\n\n        if (params.shortname) {\n          var lowerVal = val.toLowerCase();\n\n          if (lowerVal in collections.colorsShortNames) {\n            val = collections.colorsShortNames[lowerVal];\n          }\n        }\n\n        attr.value = val;\n      }\n    });\n  }\n};\n/**\n * Convert [r, g, b] to #rrggbb.\n *\n * @see https://gist.github.com/983535\n *\n * @example\n * rgb2hex([255, 255, 255]) // '#ffffff'\n *\n * @param {Array} rgb [r, g, b]\n * @return {String} #rrggbb\n *\n * @author Jed Schmidt\n */\n\n\nfunction rgb2hex(rgb) {\n  return '#' + ('00000' + (rgb[0] << 16 | rgb[1] << 8 | rgb[2]).toString(16)).slice(-6).toUpperCase();\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/svgo/plugins/convertColors.js"],"names":["exports","type","active","description","params","currentColor","names2hex","rgb2hex","shorthex","shortname","collections","require","rNumber","rComma","regRGB","RegExp","regHEX","none","fn","item","elem","eachAttr","attr","colorsProps","indexOf","name","val","value","match","exec","toLowerCase","colorsNames","slice","map","m","Math","round","parseFloat","max","min","lowerVal","colorsShortNames","rgb","toString","toUpperCase"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.type = 'perItem';\n\nexports.active = true;\n\nexports.description = 'converts colors: rgb() to #rrggbb and #rrggbb to #rgb';\n\nexports.params = {\n    currentColor: false,\n    names2hex: true,\n    rgb2hex: true,\n    shorthex: true,\n    shortname: true\n};\n\nvar collections = require('./_collections'),\n    rNumber = '([+-]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)%?)',\n    rComma = '\\\\s*,\\\\s*',\n    regRGB = new RegExp('^rgb\\\\(\\\\s*' + rNumber + rComma + rNumber + rComma + rNumber + '\\\\s*\\\\)$'),\n    regHEX = /^\\#(([a-fA-F0-9])\\2){3}$/,\n    none = /\\bnone\\b/i;\n\n/**\n * Convert different colors formats in element attributes to hex.\n *\n * @see http://www.w3.org/TR/SVG/types.html#DataTypeColor\n * @see http://www.w3.org/TR/SVG/single-page.html#types-ColorKeywords\n *\n * @example\n * Convert color name keyword to long hex:\n * fuchsia ➡ #ff00ff\n *\n * Convert rgb() to long hex:\n * rgb(255, 0, 255) ➡ #ff00ff\n * rgb(50%, 100, 100%) ➡ #7f64ff\n *\n * Convert long hex to short hex:\n * #aabbcc ➡ #abc\n *\n * Convert hex to short name\n * #000080 ➡ navy\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\nexports.fn = function(item, params) {\n\n    if (item.elem) {\n\n        item.eachAttr(function(attr) {\n\n            if (collections.colorsProps.indexOf(attr.name) > -1) {\n\n                var val = attr.value,\n                    match;\n\n                // Convert colors to currentColor\n                if (params.currentColor) {\n                    if (typeof params.currentColor === 'string') {\n                        match = val === params.currentColor;\n                    } else if (params.currentColor.exec) {\n                        match = params.currentColor.exec(val);\n                    } else {\n                        match = !val.match(none);\n                    }\n                    if (match) {\n                        val = 'currentColor';\n                    }\n                }\n\n                // Convert color name keyword to long hex\n                if (params.names2hex && val.toLowerCase() in collections.colorsNames) {\n                    val = collections.colorsNames[val.toLowerCase()];\n                }\n\n                // Convert rgb() to long hex\n                if (params.rgb2hex && (match = val.match(regRGB))) {\n                    match = match.slice(1, 4).map(function(m) {\n                        if (m.indexOf('%') > -1)\n                            m = Math.round(parseFloat(m) * 2.55);\n\n                        return Math.max(0, Math.min(m, 255));\n                    });\n\n                    val = rgb2hex(match);\n                }\n\n                // Convert long hex to short hex\n                if (params.shorthex && (match = val.match(regHEX))) {\n                    val = '#' + match[0][1] + match[0][3] + match[0][5];\n                }\n\n                // Convert hex to short name\n                if (params.shortname) {\n                    var lowerVal = val.toLowerCase();\n                    if (lowerVal in collections.colorsShortNames) {\n                        val = collections.colorsShortNames[lowerVal];\n                    }\n                }\n\n                attr.value = val;\n\n            }\n\n        });\n\n    }\n\n};\n\n/**\n * Convert [r, g, b] to #rrggbb.\n *\n * @see https://gist.github.com/983535\n *\n * @example\n * rgb2hex([255, 255, 255]) // '#ffffff'\n *\n * @param {Array} rgb [r, g, b]\n * @return {String} #rrggbb\n *\n * @author Jed Schmidt\n */\nfunction rgb2hex(rgb) {\n    return '#' + ('00000' + (rgb[0] << 16 | rgb[1] << 8 | rgb[2]).toString(16)).slice(-6).toUpperCase();\n}\n"]},"metadata":{},"sourceType":"script"}