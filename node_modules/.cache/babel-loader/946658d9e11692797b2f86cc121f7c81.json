{"ast":null,"code":"/* eslint-env mocha */\nimport assert from 'assert';\nimport { extractProp, setParserName } from '../helper';\nimport propName from '../../src/propName';\ndescribe('propName', () => {\n  beforeEach(() => {\n    setParserName('babel');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof propName;\n    assert.equal(expected, actual);\n  });\n  it('should throw an error if the argument is missing', () => {\n    assert.throws(() => {\n      propName();\n    }, Error);\n  });\n  it('should throw an error if the argument not a JSX node', () => {\n    assert.throws(() => {\n      propName({\n        a: 'foo'\n      });\n    }, Error);\n  });\n  it('should return correct name for normal prop', () => {\n    const prop = extractProp('<div foo=\"bar\" />');\n    const expected = 'foo';\n    const actual = propName(prop);\n    assert.equal(expected, actual);\n  });\n  it('should return correct name for namespaced prop', () => {\n    const prop = extractProp('<div foo:bar=\"baz\" />', 'foo:bar');\n    const expected = 'foo:bar';\n    const actual = propName(prop);\n    assert.equal(expected, actual);\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/__tests__/src/propName-test.js"],"names":["assert","extractProp","setParserName","propName","describe","beforeEach","it","expected","actual","equal","throws","Error","a","prop"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,WAA3C;AACA,OAAOC,QAAP,MAAqB,oBAArB;AAEAC,QAAQ,CAAC,UAAD,EAAa,MAAM;AACzBC,EAAAA,UAAU,CAAC,MAAM;AACfH,IAAAA,aAAa,CAAC,OAAD,CAAb;AACD,GAFS,CAAV;AAGAI,EAAAA,EAAE,CAAC,0BAAD,EAA6B,MAAM;AACnC,UAAMC,QAAQ,GAAG,UAAjB;AACA,UAAMC,MAAM,GAAG,OAAOL,QAAtB;AAEAH,IAAAA,MAAM,CAACS,KAAP,CAAaF,QAAb,EAAuBC,MAAvB;AACD,GALC,CAAF;AAOAF,EAAAA,EAAE,CAAC,kDAAD,EAAqD,MAAM;AAC3DN,IAAAA,MAAM,CAACU,MAAP,CAAc,MAAM;AAAEP,MAAAA,QAAQ;AAAK,KAAnC,EAAqCQ,KAArC;AACD,GAFC,CAAF;AAIAL,EAAAA,EAAE,CAAC,sDAAD,EAAyD,MAAM;AAC/DN,IAAAA,MAAM,CAACU,MAAP,CAAc,MAAM;AAAEP,MAAAA,QAAQ,CAAC;AAAES,QAAAA,CAAC,EAAE;AAAL,OAAD,CAAR;AAAyB,KAA/C,EAAiDD,KAAjD;AACD,GAFC,CAAF;AAIAL,EAAAA,EAAE,CAAC,4CAAD,EAA+C,MAAM;AACrD,UAAMO,IAAI,GAAGZ,WAAW,CAAC,mBAAD,CAAxB;AAEA,UAAMM,QAAQ,GAAG,KAAjB;AACA,UAAMC,MAAM,GAAGL,QAAQ,CAACU,IAAD,CAAvB;AAEAb,IAAAA,MAAM,CAACS,KAAP,CAAaF,QAAb,EAAuBC,MAAvB;AACD,GAPC,CAAF;AASAF,EAAAA,EAAE,CAAC,gDAAD,EAAmD,MAAM;AACzD,UAAMO,IAAI,GAAGZ,WAAW,CAAC,uBAAD,EAA0B,SAA1B,CAAxB;AAEA,UAAMM,QAAQ,GAAG,SAAjB;AACA,UAAMC,MAAM,GAAGL,QAAQ,CAACU,IAAD,CAAvB;AAEAb,IAAAA,MAAM,CAACS,KAAP,CAAaF,QAAb,EAAuBC,MAAvB;AACD,GAPC,CAAF;AAQD,CApCO,CAAR","sourcesContent":["/* eslint-env mocha */\nimport assert from 'assert';\nimport { extractProp, setParserName } from '../helper';\nimport propName from '../../src/propName';\n\ndescribe('propName', () => {\n  beforeEach(() => {\n    setParserName('babel');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof propName;\n\n    assert.equal(expected, actual);\n  });\n\n  it('should throw an error if the argument is missing', () => {\n    assert.throws(() => { propName(); }, Error);\n  });\n\n  it('should throw an error if the argument not a JSX node', () => {\n    assert.throws(() => { propName({ a: 'foo' }); }, Error);\n  });\n\n  it('should return correct name for normal prop', () => {\n    const prop = extractProp('<div foo=\"bar\" />');\n\n    const expected = 'foo';\n    const actual = propName(prop);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return correct name for namespaced prop', () => {\n    const prop = extractProp('<div foo:bar=\"baz\" />', 'foo:bar');\n\n    const expected = 'foo:bar';\n    const actual = propName(prop);\n\n    assert.equal(expected, actual);\n  });\n});\n"]},"metadata":{},"sourceType":"module"}