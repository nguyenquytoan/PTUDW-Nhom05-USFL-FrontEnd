{"ast":null,"code":"'use strict';\n\nexports.type = 'full';\nexports.active = true;\nexports.params = {\n  onlyMatchedOnce: true,\n  removeMatchedSelectors: true,\n  useMqs: ['', 'screen'],\n  usePseudos: ['']\n};\nexports.description = 'inline styles (additional options)';\n\nvar csstree = require('css-tree'),\n    cssTools = require('../lib/css-tools');\n/**\n * Moves + merges styles from style elements to element styles\n *\n * Options\n *   onlyMatchedOnce (default: true)\n *     inline only selectors that match once\n *\n *   removeMatchedSelectors (default: true)\n *     clean up matched selectors,\n *     leave selectors that hadn't matched\n *\n *   useMqs (default: ['', 'screen'])\n *     what media queries to be used\n *     empty string element for styles outside media queries\n *\n *   usePseudos (default: [''])\n *     what pseudo-classes/-elements to be used\n *     empty string element for all non-pseudo-classes and/or -elements\n *\n * @param {Object} document document element\n * @param {Object} opts plugin params\n *\n * @author strarsis <strarsis@gmail.com>\n */\n\n\nexports.fn = function (document, opts) {\n  // collect <style/>s\n  var styleEls = document.querySelectorAll('style'); //no <styles/>s, nothing to do\n\n  if (styleEls === null) {\n    return document;\n  }\n\n  var styles = [],\n      selectors = [];\n\n  for (var styleEl of styleEls) {\n    if (styleEl.isEmpty() || styleEl.closestElem('foreignObject')) {\n      // skip empty <style/>s or <foreignObject> content.\n      continue;\n    }\n\n    var cssStr = cssTools.getCssStr(styleEl); // collect <style/>s and their css ast\n\n    var cssAst = {};\n\n    try {\n      cssAst = csstree.parse(cssStr, {\n        parseValue: false,\n        parseCustomProperty: false\n      });\n    } catch (parseError) {\n      // console.warn('Warning: Parse error of styles of <style/> element, skipped. Error details: ' + parseError);\n      continue;\n    }\n\n    styles.push({\n      styleEl: styleEl,\n      cssAst: cssAst\n    });\n    selectors = selectors.concat(cssTools.flattenToSelectors(cssAst));\n  } // filter for mediaqueries to be used or without any mediaquery\n\n\n  var selectorsMq = cssTools.filterByMqs(selectors, opts.useMqs); // filter for pseudo elements to be used\n\n  var selectorsPseudo = cssTools.filterByPseudos(selectorsMq, opts.usePseudos); // remove PseudoClass from its SimpleSelector for proper matching\n\n  cssTools.cleanPseudos(selectorsPseudo); // stable sort selectors\n\n  var sortedSelectors = cssTools.sortSelectors(selectorsPseudo).reverse();\n  var selector, selectedEl; // match selectors\n\n  for (selector of sortedSelectors) {\n    var selectorStr = csstree.generate(selector.item.data),\n        selectedEls = null;\n\n    try {\n      selectedEls = document.querySelectorAll(selectorStr);\n    } catch (selectError) {\n      if (selectError.constructor === SyntaxError) {\n        // console.warn('Warning: Syntax error when trying to select \\n\\n' + selectorStr + '\\n\\n, skipped. Error details: ' + selectError);\n        continue;\n      }\n\n      throw selectError;\n    }\n\n    if (selectedEls === null) {\n      // nothing selected\n      continue;\n    }\n\n    selector.selectedEls = selectedEls;\n  } // apply <style/> styles to matched elements\n\n\n  for (selector of sortedSelectors) {\n    if (!selector.selectedEls) {\n      continue;\n    }\n\n    if (opts.onlyMatchedOnce && selector.selectedEls !== null && selector.selectedEls.length > 1) {\n      // skip selectors that match more than once if option onlyMatchedOnce is enabled\n      continue;\n    } // apply <style/> to matched elements\n\n\n    for (selectedEl of selector.selectedEls) {\n      if (selector.rule === null) {\n        continue;\n      } // merge declarations\n\n\n      csstree.walk(selector.rule, {\n        visit: 'Declaration',\n        enter: function (styleCsstreeDeclaration) {\n          // existing inline styles have higher priority\n          // no inline styles, external styles,                                    external styles used\n          // inline styles,    external styles same   priority as inline styles,   inline   styles used\n          // inline styles,    external styles higher priority than inline styles, external styles used\n          var styleDeclaration = cssTools.csstreeToStyleDeclaration(styleCsstreeDeclaration);\n\n          if (selectedEl.style.getPropertyValue(styleDeclaration.name) !== null && selectedEl.style.getPropertyPriority(styleDeclaration.name) >= styleDeclaration.priority) {\n            return;\n          }\n\n          selectedEl.style.setProperty(styleDeclaration.name, styleDeclaration.value, styleDeclaration.priority);\n        }\n      });\n    }\n\n    if (opts.removeMatchedSelectors && selector.selectedEls !== null && selector.selectedEls.length > 0) {\n      // clean up matching simple selectors if option removeMatchedSelectors is enabled\n      selector.rule.prelude.children.remove(selector.item);\n    }\n  }\n\n  if (!opts.removeMatchedSelectors) {\n    return document; // no further processing required\n  } // clean up matched class + ID attribute values\n\n\n  for (selector of sortedSelectors) {\n    if (!selector.selectedEls) {\n      continue;\n    }\n\n    if (opts.onlyMatchedOnce && selector.selectedEls !== null && selector.selectedEls.length > 1) {\n      // skip selectors that match more than once if option onlyMatchedOnce is enabled\n      continue;\n    }\n\n    for (selectedEl of selector.selectedEls) {\n      // class\n      var firstSubSelector = selector.item.data.children.first();\n\n      if (firstSubSelector.type === 'ClassSelector') {\n        selectedEl.class.remove(firstSubSelector.name);\n      } // clean up now empty class attributes\n\n\n      if (typeof selectedEl.class.item(0) === 'undefined') {\n        selectedEl.removeAttr('class');\n      } // ID\n\n\n      if (firstSubSelector.type === 'IdSelector') {\n        selectedEl.removeAttr('id', firstSubSelector.name);\n      }\n    }\n  } // clean up now empty elements\n\n\n  for (var style of styles) {\n    csstree.walk(style.cssAst, {\n      visit: 'Rule',\n      enter: function (node, item, list) {\n        // clean up <style/> atrules without any rulesets left\n        if (node.type === 'Atrule' && // only Atrules containing rulesets\n        node.block !== null && node.block.children.isEmpty()) {\n          list.remove(item);\n          return;\n        } // clean up <style/> rulesets without any css selectors left\n\n\n        if (node.type === 'Rule' && node.prelude.children.isEmpty()) {\n          list.remove(item);\n        }\n      }\n    });\n\n    if (style.cssAst.children.isEmpty()) {\n      // clean up now emtpy <style/>s\n      var styleParentEl = style.styleEl.parentNode;\n      styleParentEl.spliceContent(styleParentEl.content.indexOf(style.styleEl), 1);\n\n      if (styleParentEl.elem === 'defs' && styleParentEl.content.length === 0) {\n        // also clean up now empty <def/>s\n        var defsParentEl = styleParentEl.parentNode;\n        defsParentEl.spliceContent(defsParentEl.content.indexOf(styleParentEl), 1);\n      }\n\n      continue;\n    } // update existing, left over <style>s\n\n\n    cssTools.setCssStr(style.styleEl, csstree.generate(style.cssAst));\n  }\n\n  return document;\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/svgo/plugins/inlineStyles.js"],"names":["exports","type","active","params","onlyMatchedOnce","removeMatchedSelectors","useMqs","usePseudos","description","csstree","require","cssTools","fn","document","opts","styleEls","querySelectorAll","styles","selectors","styleEl","isEmpty","closestElem","cssStr","getCssStr","cssAst","parse","parseValue","parseCustomProperty","parseError","push","concat","flattenToSelectors","selectorsMq","filterByMqs","selectorsPseudo","filterByPseudos","cleanPseudos","sortedSelectors","sortSelectors","reverse","selector","selectedEl","selectorStr","generate","item","data","selectedEls","selectError","constructor","SyntaxError","length","rule","walk","visit","enter","styleCsstreeDeclaration","styleDeclaration","csstreeToStyleDeclaration","style","getPropertyValue","name","getPropertyPriority","priority","setProperty","value","prelude","children","remove","firstSubSelector","first","class","removeAttr","node","list","block","styleParentEl","parentNode","spliceContent","content","indexOf","elem","defsParentEl","setCssStr"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.type = 'full';\n\nexports.active = true;\n\nexports.params = {\n    onlyMatchedOnce: true,\n    removeMatchedSelectors: true,\n    useMqs: ['', 'screen'],\n    usePseudos: ['']\n};\n\nexports.description = 'inline styles (additional options)';\n\n\nvar csstree = require('css-tree'),\n    cssTools = require('../lib/css-tools');\n\n/**\n * Moves + merges styles from style elements to element styles\n *\n * Options\n *   onlyMatchedOnce (default: true)\n *     inline only selectors that match once\n *\n *   removeMatchedSelectors (default: true)\n *     clean up matched selectors,\n *     leave selectors that hadn't matched\n *\n *   useMqs (default: ['', 'screen'])\n *     what media queries to be used\n *     empty string element for styles outside media queries\n *\n *   usePseudos (default: [''])\n *     what pseudo-classes/-elements to be used\n *     empty string element for all non-pseudo-classes and/or -elements\n *\n * @param {Object} document document element\n * @param {Object} opts plugin params\n *\n * @author strarsis <strarsis@gmail.com>\n */\nexports.fn = function(document, opts) {\n\n    // collect <style/>s\n    var styleEls = document.querySelectorAll('style');\n\n    //no <styles/>s, nothing to do\n    if (styleEls === null) {\n        return document;\n    }\n\n    var styles = [],\n        selectors = [];\n\n    for (var styleEl of styleEls) {\n        if (styleEl.isEmpty() || styleEl.closestElem('foreignObject')) {\n            // skip empty <style/>s or <foreignObject> content.\n            continue;\n        }\n\n        var cssStr = cssTools.getCssStr(styleEl);\n\n        // collect <style/>s and their css ast\n        var cssAst = {};\n        try {\n            cssAst = csstree.parse(cssStr, {\n                parseValue: false,\n                parseCustomProperty: false\n            });\n        } catch (parseError) {\n            // console.warn('Warning: Parse error of styles of <style/> element, skipped. Error details: ' + parseError);\n            continue;\n        }\n\n        styles.push({\n            styleEl: styleEl,\n            cssAst: cssAst\n        });\n\n        selectors = selectors.concat(cssTools.flattenToSelectors(cssAst));\n    }\n\n\n    // filter for mediaqueries to be used or without any mediaquery\n    var selectorsMq = cssTools.filterByMqs(selectors, opts.useMqs);\n\n\n    // filter for pseudo elements to be used\n    var selectorsPseudo = cssTools.filterByPseudos(selectorsMq, opts.usePseudos);\n\n    // remove PseudoClass from its SimpleSelector for proper matching\n    cssTools.cleanPseudos(selectorsPseudo);\n\n\n    // stable sort selectors\n    var sortedSelectors = cssTools.sortSelectors(selectorsPseudo).reverse();\n\n\n    var selector,\n        selectedEl;\n\n    // match selectors\n    for (selector of sortedSelectors) {\n        var selectorStr = csstree.generate(selector.item.data),\n            selectedEls = null;\n\n        try {\n            selectedEls = document.querySelectorAll(selectorStr);\n        } catch (selectError) {\n            if (selectError.constructor === SyntaxError) {\n                // console.warn('Warning: Syntax error when trying to select \\n\\n' + selectorStr + '\\n\\n, skipped. Error details: ' + selectError);\n                continue;\n            }\n            throw selectError;\n        }\n\n        if (selectedEls === null) {\n            // nothing selected\n            continue;\n        }\n\n        selector.selectedEls = selectedEls;\n    }\n\n\n    // apply <style/> styles to matched elements\n    for (selector of sortedSelectors) {\n        if(!selector.selectedEls) {\n            continue;\n        }\n\n        if (opts.onlyMatchedOnce && selector.selectedEls !== null && selector.selectedEls.length > 1) {\n            // skip selectors that match more than once if option onlyMatchedOnce is enabled\n            continue;\n        }\n\n        // apply <style/> to matched elements\n        for (selectedEl of selector.selectedEls) {\n            if (selector.rule === null) {\n                continue;\n            }\n\n            // merge declarations\n            csstree.walk(selector.rule, {visit: 'Declaration', enter: function(styleCsstreeDeclaration) {\n\n                // existing inline styles have higher priority\n                // no inline styles, external styles,                                    external styles used\n                // inline styles,    external styles same   priority as inline styles,   inline   styles used\n                // inline styles,    external styles higher priority than inline styles, external styles used\n                var styleDeclaration = cssTools.csstreeToStyleDeclaration(styleCsstreeDeclaration);\n                if (selectedEl.style.getPropertyValue(styleDeclaration.name) !== null &&\n                    selectedEl.style.getPropertyPriority(styleDeclaration.name) >= styleDeclaration.priority) {\n                    return;\n                }\n                selectedEl.style.setProperty(styleDeclaration.name, styleDeclaration.value, styleDeclaration.priority);\n            }});\n        }\n\n        if (opts.removeMatchedSelectors && selector.selectedEls !== null && selector.selectedEls.length > 0) {\n            // clean up matching simple selectors if option removeMatchedSelectors is enabled\n            selector.rule.prelude.children.remove(selector.item);\n        }\n    }\n\n\n    if (!opts.removeMatchedSelectors) {\n        return document; // no further processing required\n    }\n\n\n    // clean up matched class + ID attribute values\n    for (selector of sortedSelectors) {\n        if(!selector.selectedEls) {\n            continue;\n        }\n\n        if (opts.onlyMatchedOnce && selector.selectedEls !== null && selector.selectedEls.length > 1) {\n            // skip selectors that match more than once if option onlyMatchedOnce is enabled\n            continue;\n        }\n\n        for (selectedEl of selector.selectedEls) {\n            // class\n            var firstSubSelector = selector.item.data.children.first();\n            if(firstSubSelector.type === 'ClassSelector') {\n                selectedEl.class.remove(firstSubSelector.name);\n            }\n            // clean up now empty class attributes\n            if(typeof selectedEl.class.item(0) === 'undefined') {\n                selectedEl.removeAttr('class');\n            }\n\n            // ID\n            if(firstSubSelector.type === 'IdSelector') {\n                selectedEl.removeAttr('id', firstSubSelector.name);\n            }\n        }\n    }\n\n\n    // clean up now empty elements\n    for (var style of styles) {\n        csstree.walk(style.cssAst, {visit: 'Rule', enter: function(node, item, list) {\n            // clean up <style/> atrules without any rulesets left\n            if (node.type === 'Atrule' &&\n                // only Atrules containing rulesets\n                node.block !== null &&\n                node.block.children.isEmpty()) {\n                list.remove(item);\n                return;\n            }\n\n            // clean up <style/> rulesets without any css selectors left\n            if (node.type === 'Rule' &&\n                node.prelude.children.isEmpty()) {\n                list.remove(item);\n            }\n        }});\n\n\n        if (style.cssAst.children.isEmpty()) {\n            // clean up now emtpy <style/>s\n            var styleParentEl = style.styleEl.parentNode;\n            styleParentEl.spliceContent(styleParentEl.content.indexOf(style.styleEl), 1);\n\n            if (styleParentEl.elem === 'defs' &&\n                styleParentEl.content.length === 0) {\n                // also clean up now empty <def/>s\n                var defsParentEl = styleParentEl.parentNode;\n                defsParentEl.spliceContent(defsParentEl.content.indexOf(styleParentEl), 1);\n            }\n\n            continue;\n        }\n\n\n        // update existing, left over <style>s\n        cssTools.setCssStr(style.styleEl, csstree.generate(style.cssAst));\n    }\n\n\n    return document;\n};\n"]},"metadata":{},"sourceType":"script"}