{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.mjs';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.mjs';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.mjs';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.mjs';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.mjs';\nimport { logger } from 'workbox-core/_private/logger.mjs';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.mjs';\nimport { messages } from './utils/messages.mjs';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.mjs';\nimport './_version.mjs';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof workbox.strategies\n */\n\nclass NetworkFirst {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link workbox.core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   * @param {number} options.networkTimeoutSeconds If set, any network requests\n   * that fail to respond within the timeout will fallback to the cache.\n   *\n   * This option can be used to combat\n   * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n   * scenarios.\n   */\n  constructor(options = {}) {\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n\n    if (options.plugins) {\n      let isUsingCacheWillUpdate = options.plugins.some(plugin => !!plugin.cacheWillUpdate);\n      this._plugins = isUsingCacheWillUpdate ? options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n    } else {\n      // No plugins passed in, use the default plugin.\n      this._plugins = [cacheOkAndOpaquePlugin];\n    }\n\n    this._networkTimeoutSeconds = options.networkTimeoutSeconds;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (this._networkTimeoutSeconds) {\n        assert.isType(this._networkTimeoutSeconds, 'number', {\n          moduleName: 'workbox-strategies',\n          className: 'NetworkFirst',\n          funcName: 'constructor',\n          paramName: 'networkTimeoutSeconds'\n        });\n      }\n    }\n\n    this._fetchOptions = options.fetchOptions || null;\n    this._matchOptions = options.matchOptions || null;\n  }\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request} options.request The request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  async handle({\n    event,\n    request\n  }) {\n    return this.makeRequest({\n      event,\n      request: request || event.request\n    });\n  }\n  /**\n   * This method can be used to perform a make a standalone request outside the\n   * context of the [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * See \"[Advanced Recipes](https://developers.google.com/web/tools/workbox/guides/advanced-recipes#make-requests)\"\n   * for more usage information.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request Either a\n   *     [`Request`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Request}\n   *     object, or a string URL, corresponding to the request to be made.\n   * @param {FetchEvent} [options.event] If provided, `event.waitUntil()` will\n   *     be called automatically to extend the service worker's lifetime.\n   * @return {Promise<Response>}\n   */\n\n\n  async makeRequest({\n    event,\n    request\n  }) {\n    const logs = [];\n\n    if (typeof request === 'string') {\n      request = new Request(request);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-strategies',\n        className: 'NetworkFirst',\n        funcName: 'handle',\n        paramName: 'makeRequest'\n      });\n    }\n\n    const promises = [];\n    let timeoutId;\n\n    if (this._networkTimeoutSeconds) {\n      const {\n        id,\n        promise\n      } = this._getTimeoutPromise({\n        request,\n        event,\n        logs\n      });\n\n      timeoutId = id;\n      promises.push(promise);\n    }\n\n    const networkPromise = this._getNetworkPromise({\n      timeoutId,\n      request,\n      event,\n      logs\n    });\n\n    promises.push(networkPromise); // Promise.race() will resolve as soon as the first promise resolves.\n\n    let response = await Promise.race(promises); // If Promise.race() resolved with null, it might be due to a network\n    // timeout + a cache miss. If that were to happen, we'd rather wait until\n    // the networkPromise resolves instead of returning null.\n    // Note that it's fine to await an already-resolved promise, so we don't\n    // have to check to see if it's still \"in flight\".\n\n    if (!response) {\n      response = await networkPromise;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(messages.strategyStart('NetworkFirst', request));\n\n      for (let log of logs) {\n        logger.log(log);\n      }\n\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n\n    if (!response) {\n      throw new WorkboxError('no-response', {\n        url: request.url\n      });\n    }\n\n    return response;\n  }\n  /**\n   * @param {Object} options\n   * @param {Request} options.request\n   * @param {Array} options.logs A reference to the logs array\n   * @param {Event} [options.event]\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n\n\n  _getTimeoutPromise({\n    request,\n    logs,\n    event\n  }) {\n    let timeoutId;\n    const timeoutPromise = new Promise(resolve => {\n      const onNetworkTimeout = async () => {\n        if (process.env.NODE_ENV !== 'production') {\n          logs.push(`Timing out the network response at ` + `${this._networkTimeoutSeconds} seconds.`);\n        }\n\n        resolve(await this._respondFromCache({\n          request,\n          event\n        }));\n      };\n\n      timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n    });\n    return {\n      promise: timeoutPromise,\n      id: timeoutId\n    };\n  }\n  /**\n   * @param {Object} options\n   * @param {number|undefined} options.timeoutId\n   * @param {Request} options.request\n   * @param {Array} options.logs A reference to the logs Array.\n   * @param {Event} [options.event]\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n\n\n  async _getNetworkPromise({\n    timeoutId,\n    request,\n    logs,\n    event\n  }) {\n    let error;\n    let response;\n\n    try {\n      response = await fetchWrapper.fetch({\n        request,\n        event,\n        fetchOptions: this._fetchOptions,\n        plugins: this._plugins\n      });\n    } catch (err) {\n      error = err;\n    }\n\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (response) {\n        logs.push(`Got response from network.`);\n      } else {\n        logs.push(`Unable to get a response from the network. Will respond ` + `with a cached response.`);\n      }\n    }\n\n    if (error || !response) {\n      response = await this._respondFromCache({\n        request,\n        event\n      });\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (response) {\n          logs.push(`Found a cached response in the '${this._cacheName}'` + ` cache.`);\n        } else {\n          logs.push(`No response found in the '${this._cacheName}' cache.`);\n        }\n      }\n    } else {\n      // Keep the service worker alive while we put the request in the cache\n      const responseClone = response.clone();\n      const cachePut = cacheWrapper.put({\n        cacheName: this._cacheName,\n        request,\n        response: responseClone,\n        event,\n        plugins: this._plugins\n      });\n\n      if (event) {\n        try {\n          // The event has been responded to so we can keep the SW alive to\n          // respond to the request\n          event.waitUntil(cachePut);\n        } catch (err) {\n          if (process.env.NODE_ENV !== 'production') {\n            logger.warn(`Unable to ensure service worker stays alive when ` + `updating cache for '${getFriendlyURL(request.url)}'.`);\n          }\n        }\n      }\n    }\n\n    return response;\n  }\n  /**\n   * Used if the network timeouts or fails to make the request.\n   *\n   * @param {Object} options\n   * @param {Request} request The request to match in the cache\n   * @param {Event} [options.event]\n   * @return {Promise<Object>}\n   *\n   * @private\n   */\n\n\n  _respondFromCache({\n    event,\n    request\n  }) {\n    return cacheWrapper.match({\n      cacheName: this._cacheName,\n      request,\n      event,\n      matchOptions: this._matchOptions,\n      plugins: this._plugins\n    });\n  }\n\n}\n\nexport { NetworkFirst };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-strategies/NetworkFirst.mjs"],"names":["assert","cacheNames","cacheWrapper","fetchWrapper","getFriendlyURL","logger","WorkboxError","messages","cacheOkAndOpaquePlugin","NetworkFirst","constructor","options","_cacheName","getRuntimeName","cacheName","plugins","isUsingCacheWillUpdate","some","plugin","cacheWillUpdate","_plugins","_networkTimeoutSeconds","networkTimeoutSeconds","process","env","NODE_ENV","isType","moduleName","className","funcName","paramName","_fetchOptions","fetchOptions","_matchOptions","matchOptions","handle","event","request","makeRequest","logs","Request","isInstance","promises","timeoutId","id","promise","_getTimeoutPromise","push","networkPromise","_getNetworkPromise","response","Promise","race","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url","timeoutPromise","resolve","onNetworkTimeout","_respondFromCache","setTimeout","error","fetch","err","clearTimeout","responseClone","clone","cachePut","put","waitUntil","warn","match"],"mappings":"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","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\nimport {cacheWrapper} from 'workbox-core/_private/cacheWrapper.mjs';\nimport {fetchWrapper} from 'workbox-core/_private/fetchWrapper.mjs';\nimport {getFriendlyURL} from 'workbox-core/_private/getFriendlyURL.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\n\nimport {messages} from './utils/messages.mjs';\nimport {cacheOkAndOpaquePlugin} from './plugins/cacheOkAndOpaquePlugin.mjs';\nimport './_version.mjs';\n\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof workbox.strategies\n */\nclass NetworkFirst {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link workbox.core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   * @param {number} options.networkTimeoutSeconds If set, any network requests\n   * that fail to respond within the timeout will fallback to the cache.\n   *\n   * This option can be used to combat\n   * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n   * scenarios.\n   */\n  constructor(options = {}) {\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n\n    if (options.plugins) {\n      let isUsingCacheWillUpdate =\n        options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\n      this._plugins = isUsingCacheWillUpdate ?\n        options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n    } else {\n      // No plugins passed in, use the default plugin.\n      this._plugins = [cacheOkAndOpaquePlugin];\n    }\n\n    this._networkTimeoutSeconds = options.networkTimeoutSeconds;\n    if (process.env.NODE_ENV !== 'production') {\n      if (this._networkTimeoutSeconds) {\n        assert.isType(this._networkTimeoutSeconds, 'number', {\n          moduleName: 'workbox-strategies',\n          className: 'NetworkFirst',\n          funcName: 'constructor',\n          paramName: 'networkTimeoutSeconds',\n        });\n      }\n    }\n\n    this._fetchOptions = options.fetchOptions || null;\n    this._matchOptions = options.matchOptions || null;\n  }\n\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request} options.request The request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n  async handle({event, request}) {\n    return this.makeRequest({\n      event,\n      request: request || event.request,\n    });\n  }\n\n  /**\n   * This method can be used to perform a make a standalone request outside the\n   * context of the [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * See \"[Advanced Recipes](https://developers.google.com/web/tools/workbox/guides/advanced-recipes#make-requests)\"\n   * for more usage information.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request Either a\n   *     [`Request`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Request}\n   *     object, or a string URL, corresponding to the request to be made.\n   * @param {FetchEvent} [options.event] If provided, `event.waitUntil()` will\n   *     be called automatically to extend the service worker's lifetime.\n   * @return {Promise<Response>}\n   */\n  async makeRequest({event, request}) {\n    const logs = [];\n\n    if (typeof request === 'string') {\n      request = new Request(request);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-strategies',\n        className: 'NetworkFirst',\n        funcName: 'handle',\n        paramName: 'makeRequest',\n      });\n    }\n\n    const promises = [];\n    let timeoutId;\n\n    if (this._networkTimeoutSeconds) {\n      const {id, promise} = this._getTimeoutPromise({request, event, logs});\n      timeoutId = id;\n      promises.push(promise);\n    }\n\n    const networkPromise =\n        this._getNetworkPromise({timeoutId, request, event, logs});\n    promises.push(networkPromise);\n\n    // Promise.race() will resolve as soon as the first promise resolves.\n    let response = await Promise.race(promises);\n    // If Promise.race() resolved with null, it might be due to a network\n    // timeout + a cache miss. If that were to happen, we'd rather wait until\n    // the networkPromise resolves instead of returning null.\n    // Note that it's fine to await an already-resolved promise, so we don't\n    // have to check to see if it's still \"in flight\".\n    if (!response) {\n      response = await networkPromise;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(\n          messages.strategyStart('NetworkFirst', request));\n      for (let log of logs) {\n        logger.log(log);\n      }\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n\n    if (!response) {\n      throw new WorkboxError('no-response', {url: request.url});\n    }\n    return response;\n  }\n\n  /**\n   * @param {Object} options\n   * @param {Request} options.request\n   * @param {Array} options.logs A reference to the logs array\n   * @param {Event} [options.event]\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n  _getTimeoutPromise({request, logs, event}) {\n    let timeoutId;\n    const timeoutPromise = new Promise((resolve) => {\n      const onNetworkTimeout = async () => {\n        if (process.env.NODE_ENV !== 'production') {\n          logs.push(`Timing out the network response at ` +\n            `${this._networkTimeoutSeconds} seconds.`);\n        }\n\n        resolve(await this._respondFromCache({request, event}));\n      };\n\n      timeoutId = setTimeout(\n          onNetworkTimeout,\n          this._networkTimeoutSeconds * 1000,\n      );\n    });\n\n    return {\n      promise: timeoutPromise,\n      id: timeoutId,\n    };\n  }\n\n  /**\n   * @param {Object} options\n   * @param {number|undefined} options.timeoutId\n   * @param {Request} options.request\n   * @param {Array} options.logs A reference to the logs Array.\n   * @param {Event} [options.event]\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n  async _getNetworkPromise({timeoutId, request, logs, event}) {\n    let error;\n    let response;\n    try {\n      response = await fetchWrapper.fetch({\n        request,\n        event,\n        fetchOptions: this._fetchOptions,\n        plugins: this._plugins,\n      });\n    } catch (err) {\n      error = err;\n    }\n\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (response) {\n        logs.push(`Got response from network.`);\n      } else {\n        logs.push(`Unable to get a response from the network. Will respond ` +\n          `with a cached response.`);\n      }\n    }\n\n    if (error || !response) {\n      response = await this._respondFromCache({request, event});\n      if (process.env.NODE_ENV !== 'production') {\n        if (response) {\n          logs.push(`Found a cached response in the '${this._cacheName}'` +\n            ` cache.`);\n        } else {\n          logs.push(`No response found in the '${this._cacheName}' cache.`);\n        }\n      }\n    } else {\n      // Keep the service worker alive while we put the request in the cache\n      const responseClone = response.clone();\n      const cachePut = cacheWrapper.put({\n        cacheName: this._cacheName,\n        request,\n        response: responseClone,\n        event,\n        plugins: this._plugins,\n      });\n\n      if (event) {\n        try {\n          // The event has been responded to so we can keep the SW alive to\n          // respond to the request\n          event.waitUntil(cachePut);\n        } catch (err) {\n          if (process.env.NODE_ENV !== 'production') {\n            logger.warn(`Unable to ensure service worker stays alive when ` +\n              `updating cache for '${getFriendlyURL(request.url)}'.`);\n          }\n        }\n      }\n    }\n\n    return response;\n  }\n\n  /**\n   * Used if the network timeouts or fails to make the request.\n   *\n   * @param {Object} options\n   * @param {Request} request The request to match in the cache\n   * @param {Event} [options.event]\n   * @return {Promise<Object>}\n   *\n   * @private\n   */\n  _respondFromCache({event, request}) {\n    return cacheWrapper.match({\n      cacheName: this._cacheName,\n      request,\n      event,\n      matchOptions: this._matchOptions,\n      plugins: this._plugins,\n    });\n  }\n}\n\nexport {NetworkFirst};\n"]},"metadata":{},"sourceType":"module"}