{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"chai\").assert,\n    ensurePlainFunction = require(\"../../plain-function/ensure\");\n\ndescribe(\"plain-function/ensure\", function () {\n  it(\"Should return input value\", function () {\n    var value = function () {\n      return true;\n    };\n\n    assert.equal(ensurePlainFunction(value), value);\n  });\n  it(\"Should crash on invalid value\", function () {\n    try {\n      ensurePlainFunction(null);\n      throw new Error(\"Unexpected\");\n    } catch (error) {\n      assert.equal(error.name, \"TypeError\");\n      assert(error.message.includes(\"is not a plain function\"));\n    }\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type/test/plain-function/ensure.js"],"names":["assert","require","ensurePlainFunction","describe","it","value","equal","Error","error","name","message","includes"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAgBC,OAAO,CAAC,MAAD,CAAP,CAAgBD,MAA1C;AAAA,IACIE,mBAAmB,GAAGD,OAAO,CAAC,6BAAD,CADjC;;AAGAE,QAAQ,CAAC,uBAAD,EAA0B,YAAY;AAC7CC,EAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAY;AAC3C,QAAIC,KAAK,GAAG,YAAY;AAAE,aAAO,IAAP;AAAc,KAAxC;;AACAL,IAAAA,MAAM,CAACM,KAAP,CAAaJ,mBAAmB,CAACG,KAAD,CAAhC,EAAyCA,KAAzC;AACA,GAHC,CAAF;AAIAD,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAY;AAC/C,QAAI;AACHF,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACA,YAAM,IAAIK,KAAJ,CAAU,YAAV,CAAN;AACA,KAHD,CAGE,OAAOC,KAAP,EAAc;AACfR,MAAAA,MAAM,CAACM,KAAP,CAAaE,KAAK,CAACC,IAAnB,EAAyB,WAAzB;AACAT,MAAAA,MAAM,CAACQ,KAAK,CAACE,OAAN,CAAcC,QAAd,CAAuB,yBAAvB,CAAD,CAAN;AACA;AACD,GARC,CAAF;AASA,CAdO,CAAR","sourcesContent":["\"use strict\";\n\nvar assert              = require(\"chai\").assert\n  , ensurePlainFunction = require(\"../../plain-function/ensure\");\n\ndescribe(\"plain-function/ensure\", function () {\n\tit(\"Should return input value\", function () {\n\t\tvar value = function () { return true; };\n\t\tassert.equal(ensurePlainFunction(value), value);\n\t});\n\tit(\"Should crash on invalid value\", function () {\n\t\ttry {\n\t\t\tensurePlainFunction(null);\n\t\t\tthrow new Error(\"Unexpected\");\n\t\t} catch (error) {\n\t\t\tassert.equal(error.name, \"TypeError\");\n\t\t\tassert(error.message.includes(\"is not a plain function\"));\n\t\t}\n\t});\n});\n"]},"metadata":{},"sourceType":"script"}