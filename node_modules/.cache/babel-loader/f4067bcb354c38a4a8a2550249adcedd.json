{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.mjs';\n/**\n * @param {Response} response\n * @return {Response}\n *\n * @private\n * @memberof module:workbox-precaching\n */\n\nexport async function cleanRedirect(response) {\n  const clonedResponse = response.clone(); // Not all browsers support the Response.body stream, so fall back\n  // to reading the entire body into memory as a blob.\n\n  const bodyPromise = 'body' in clonedResponse ? Promise.resolve(clonedResponse.body) : clonedResponse.blob();\n  const body = await bodyPromise; // new Response() is happy when passed either a stream or a Blob.\n\n  return new Response(body, {\n    headers: clonedResponse.headers,\n    status: clonedResponse.status,\n    statusText: clonedResponse.statusText\n  });\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-precaching/utils/cleanRedirect.mjs"],"names":["cleanRedirect","response","clonedResponse","clone","bodyPromise","Promise","resolve","body","blob","Response","headers","status","statusText"],"mappings":"AAAA;;;;;;;AAQA,OAAO,iBAAP;AAEA;;;;;;;;AAOA,OAAO,eAAeA,aAAf,CAA6BC,QAA7B,EAAuC;AAC5C,QAAMC,cAAc,GAAGD,QAAQ,CAACE,KAAT,EAAvB,CAD4C,CAG5C;AACA;;AACA,QAAMC,WAAW,GAAG,UAAUF,cAAV,GAClBG,OAAO,CAACC,OAAR,CAAgBJ,cAAc,CAACK,IAA/B,CADkB,GAElBL,cAAc,CAACM,IAAf,EAFF;AAIA,QAAMD,IAAI,GAAG,MAAMH,WAAnB,CAT4C,CAW5C;;AACA,SAAO,IAAIK,QAAJ,CAAaF,IAAb,EAAmB;AACxBG,IAAAA,OAAO,EAAER,cAAc,CAACQ,OADA;AAExBC,IAAAA,MAAM,EAAET,cAAc,CAACS,MAFC;AAGxBC,IAAAA,UAAU,EAAEV,cAAc,CAACU;AAHH,GAAnB,CAAP;AAKD","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n/**\n * @param {Response} response\n * @return {Response}\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport async function cleanRedirect(response) {\n  const clonedResponse = response.clone();\n\n  // Not all browsers support the Response.body stream, so fall back\n  // to reading the entire body into memory as a blob.\n  const bodyPromise = 'body' in clonedResponse ?\n    Promise.resolve(clonedResponse.body) :\n    clonedResponse.blob();\n\n  const body = await bodyPromise;\n\n  // new Response() is happy when passed either a stream or a Blob.\n  return new Response(body, {\n    headers: clonedResponse.headers,\n    status: clonedResponse.status,\n    statusText: clonedResponse.statusText,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}