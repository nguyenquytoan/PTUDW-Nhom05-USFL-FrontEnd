{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.mjs';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof module:workbox-precaching\n */\n\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching) {\n  // Convert the iterable into an array at the start of the loop to make sure\n  // deletion doesn't mess up iteration.\n  for (const paramName of [...urlObject.searchParams.keys()]) {\n    if (ignoreURLParametersMatching.some(regExp => regExp.test(paramName))) {\n      urlObject.searchParams.delete(paramName);\n    }\n  }\n\n  return urlObject;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-precaching/utils/removeIgnoredSearchParams.mjs"],"names":["removeIgnoredSearchParams","urlObject","ignoreURLParametersMatching","paramName","searchParams","keys","some","regExp","test","delete"],"mappings":"AAAA;;;;;;;AAQA,OAAO,iBAAP;AAEA;;;;;;;;;;;;;AAYA,OAAO,SAASA,yBAAT,CAAmCC,SAAnC,EACHC,2BADG,EAC0B;AAC/B;AACA;AACA,OAAK,MAAMC,SAAX,IAAwB,CAAC,GAAGF,SAAS,CAACG,YAAV,CAAuBC,IAAvB,EAAJ,CAAxB,EAA4D;AAC1D,QAAIH,2BAA2B,CAACI,IAA5B,CAAkCC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAYL,SAAZ,CAA7C,CAAJ,EAA0E;AACxEF,MAAAA,SAAS,CAACG,YAAV,CAAuBK,MAAvB,CAA8BN,SAA9B;AACD;AACF;;AAED,SAAOF,SAAP;AACD","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject,\n    ignoreURLParametersMatching) {\n  // Convert the iterable into an array at the start of the loop to make sure\n  // deletion doesn't mess up iteration.\n  for (const paramName of [...urlObject.searchParams.keys()]) {\n    if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n      urlObject.searchParams.delete(paramName);\n    }\n  }\n\n  return urlObject;\n}\n"]},"metadata":{},"sourceType":"module"}