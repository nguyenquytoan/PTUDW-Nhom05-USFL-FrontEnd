{"ast":null,"code":"// Generated by CoffeeScript 1.6.3\nvar common;\nmodule.exports = common = {\n  /*\n  \tChecks to see if o is an object, and it isn't an instance\n  \tof some class.\n  */\n  isBareObject: function (o) {\n    if (o != null && o.constructor === Object) {\n      return true;\n    }\n\n    return false;\n  },\n\n  /*\n  \tReturns type of an object, including:\n  \tundefined, null, string, number, array,\n  \targuments, element, textnode, whitespace, and object\n  */\n  typeOf: function (item) {\n    var _ref;\n\n    if (item === null) {\n      return 'null';\n    }\n\n    if (typeof item !== 'object') {\n      return typeof item;\n    }\n\n    if (Array.isArray(item)) {\n      return 'array';\n    }\n\n    if (item.nodeName) {\n      if (item.nodeType === 1) {\n        return 'element';\n      }\n\n      if (item.nodeType === 3) {\n        return (_ref = /\\S/.test(item.nodeValue)) != null ? _ref : {\n          'textnode': 'whitespace'\n        };\n      }\n    } else if (typeof item.length === 'number') {\n      if (item.callee) {\n        return 'arguments';\n      }\n    }\n\n    return typeof item;\n  },\n  clone: function (item, includePrototype) {\n    if (includePrototype == null) {\n      includePrototype = false;\n    }\n\n    switch (common.typeOf(item)) {\n      case 'array':\n        return common._cloneArray(item, includePrototype);\n\n      case 'object':\n        return common._cloneObject(item, includePrototype);\n\n      default:\n        return item;\n    }\n  },\n\n  /*\n  \tDeep clone of an object.\n  \tFrom MooTools\n  */\n  _cloneObject: function (o, includePrototype) {\n    var clone, key;\n\n    if (includePrototype == null) {\n      includePrototype = false;\n    }\n\n    if (common.isBareObject(o)) {\n      clone = {};\n\n      for (key in o) {\n        clone[key] = common.clone(o[key], includePrototype);\n      }\n\n      return clone;\n    } else {\n      if (!includePrototype) {\n        return o;\n      }\n\n      if (o instanceof Function) {\n        return o;\n      }\n\n      clone = Object.create(o.constructor.prototype);\n\n      for (key in o) {\n        if (o.hasOwnProperty(key)) {\n          clone[key] = common.clone(o[key], includePrototype);\n        }\n      }\n\n      return clone;\n    }\n  },\n\n  /*\n  \tDeep clone of an array.\n  \tFrom MooTools\n  */\n  _cloneArray: function (a, includePrototype) {\n    var clone, i;\n\n    if (includePrototype == null) {\n      includePrototype = false;\n    }\n\n    i = a.length;\n    clone = new Array(i);\n\n    while (i--) {\n      clone[i] = common.clone(a[i], includePrototype);\n    }\n\n    return clone;\n  }\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/utila/lib/_common.js"],"names":["common","module","exports","isBareObject","o","constructor","Object","typeOf","item","_ref","Array","isArray","nodeName","nodeType","test","nodeValue","length","callee","clone","includePrototype","_cloneArray","_cloneObject","key","Function","create","prototype","hasOwnProperty","a","i"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.6.3\nvar common;\n\nmodule.exports = common = {\n  /*\n  \tChecks to see if o is an object, and it isn't an instance\n  \tof some class.\n  */\n\n  isBareObject: function(o) {\n    if ((o != null) && o.constructor === Object) {\n      return true;\n    }\n    return false;\n  },\n  /*\n  \tReturns type of an object, including:\n  \tundefined, null, string, number, array,\n  \targuments, element, textnode, whitespace, and object\n  */\n\n  typeOf: function(item) {\n    var _ref;\n    if (item === null) {\n      return 'null';\n    }\n    if (typeof item !== 'object') {\n      return typeof item;\n    }\n    if (Array.isArray(item)) {\n      return 'array';\n    }\n    if (item.nodeName) {\n      if (item.nodeType === 1) {\n        return 'element';\n      }\n      if (item.nodeType === 3) {\n        return (_ref = /\\S/.test(item.nodeValue)) != null ? _ref : {\n          'textnode': 'whitespace'\n        };\n      }\n    } else if (typeof item.length === 'number') {\n      if (item.callee) {\n        return 'arguments';\n      }\n    }\n    return typeof item;\n  },\n  clone: function(item, includePrototype) {\n    if (includePrototype == null) {\n      includePrototype = false;\n    }\n    switch (common.typeOf(item)) {\n      case 'array':\n        return common._cloneArray(item, includePrototype);\n      case 'object':\n        return common._cloneObject(item, includePrototype);\n      default:\n        return item;\n    }\n  },\n  /*\n  \tDeep clone of an object.\n  \tFrom MooTools\n  */\n\n  _cloneObject: function(o, includePrototype) {\n    var clone, key;\n    if (includePrototype == null) {\n      includePrototype = false;\n    }\n    if (common.isBareObject(o)) {\n      clone = {};\n      for (key in o) {\n        clone[key] = common.clone(o[key], includePrototype);\n      }\n      return clone;\n    } else {\n      if (!includePrototype) {\n        return o;\n      }\n      if (o instanceof Function) {\n        return o;\n      }\n      clone = Object.create(o.constructor.prototype);\n      for (key in o) {\n        if (o.hasOwnProperty(key)) {\n          clone[key] = common.clone(o[key], includePrototype);\n        }\n      }\n      return clone;\n    }\n  },\n  /*\n  \tDeep clone of an array.\n  \tFrom MooTools\n  */\n\n  _cloneArray: function(a, includePrototype) {\n    var clone, i;\n    if (includePrototype == null) {\n      includePrototype = false;\n    }\n    i = a.length;\n    clone = new Array(i);\n    while (i--) {\n      clone[i] = common.clone(a[i], includePrototype);\n    }\n    return clone;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}