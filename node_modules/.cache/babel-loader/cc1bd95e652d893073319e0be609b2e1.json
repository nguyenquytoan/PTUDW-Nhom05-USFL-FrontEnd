{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.mjs';\n/**\n * The \"match\" callback is used to determine if a `Route` should apply for a\n * particular URL. When matching occurs in response to a fetch event from the\n * client, the `event` and `request` objects are supplied in addition to the\n * URL. However, since the match callback can be invoked outside of a fetch\n * event, matching logic should not assume the `event` or `request` objects\n * will always be available (unlike URL, which is always available).\n * If the match callback returns a truthy value, the matching route's\n * [handler callback]{@link workbox.routing.Route~handlerCallback} will be\n * invoked immediately. If the value returned is a non-empty array or object,\n * that value will be set on the handler's `context.params` argument.\n *\n * @callback Route~matchCallback\n * @param {Object} context\n * @param {URL} context.url The request's URL.\n * @param {FetchEvent} [context.request] The corresponding request,\n *     if available.\n * @param {FetchEvent} [context.event] The corresponding event that triggered\n *     the request, if available.\n * @return {*} To signify a match, return a truthy value.\n *\n * @memberof workbox.routing\n */\n\n/**\n * The \"handler\" callback is invoked whenever a `Router` matches a URL to a\n * `Route` via its [match]{@link workbox.routing.Route~handlerCallback}\n * callback. This callback should return a Promise that resolves with a\n * `Response`.\n *\n * If a non-empty array or object is returned by the\n * [match callback]{@link workbox.routing.Route~matchCallback} it\n * will be passed in as the handler's `context.params` argument.\n *\n * @callback Route~handlerCallback\n * @param {Object} context\n * @param {URL} context.url The URL that matched.\n * @param {FetchEvent} [context.request] The corresponding request,\n *     if available.\n * @param {FetchEvent} [context.event] The corresponding event that triggered\n *     the request, if available.\n * @param {Object} [context.params] Array or Object parameters returned by the\n *     Route's [match callback]{@link workbox.routing.Route~matchCallback}.\n *     This will be undefined if an empty array or object were returned.\n * @return {Promise<Response>} The response that will fulfill the request.\n *\n * @memberof workbox.routing\n */","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-routing/_types.mjs"],"names":[],"mappings":"AAAA;;;;;;;AAQA,OAAO,gBAAP;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport './_version.mjs';\n\n/**\n * The \"match\" callback is used to determine if a `Route` should apply for a\n * particular URL. When matching occurs in response to a fetch event from the\n * client, the `event` and `request` objects are supplied in addition to the\n * URL. However, since the match callback can be invoked outside of a fetch\n * event, matching logic should not assume the `event` or `request` objects\n * will always be available (unlike URL, which is always available).\n * If the match callback returns a truthy value, the matching route's\n * [handler callback]{@link workbox.routing.Route~handlerCallback} will be\n * invoked immediately. If the value returned is a non-empty array or object,\n * that value will be set on the handler's `context.params` argument.\n *\n * @callback Route~matchCallback\n * @param {Object} context\n * @param {URL} context.url The request's URL.\n * @param {FetchEvent} [context.request] The corresponding request,\n *     if available.\n * @param {FetchEvent} [context.event] The corresponding event that triggered\n *     the request, if available.\n * @return {*} To signify a match, return a truthy value.\n *\n * @memberof workbox.routing\n */\n\n/**\n * The \"handler\" callback is invoked whenever a `Router` matches a URL to a\n * `Route` via its [match]{@link workbox.routing.Route~handlerCallback}\n * callback. This callback should return a Promise that resolves with a\n * `Response`.\n *\n * If a non-empty array or object is returned by the\n * [match callback]{@link workbox.routing.Route~matchCallback} it\n * will be passed in as the handler's `context.params` argument.\n *\n * @callback Route~handlerCallback\n * @param {Object} context\n * @param {URL} context.url The URL that matched.\n * @param {FetchEvent} [context.request] The corresponding request,\n *     if available.\n * @param {FetchEvent} [context.event] The corresponding event that triggered\n *     the request, if available.\n * @param {Object} [context.params] Array or Object parameters returned by the\n *     Route's [match callback]{@link workbox.routing.Route~matchCallback}.\n *     This will be undefined if an empty array or object were returned.\n * @return {Promise<Response>} The response that will fulfill the request.\n *\n * @memberof workbox.routing\n */\n"]},"metadata":{},"sourceType":"module"}