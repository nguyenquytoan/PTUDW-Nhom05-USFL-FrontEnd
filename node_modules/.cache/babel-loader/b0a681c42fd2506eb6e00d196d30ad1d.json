{"ast":null,"code":"'use strict';\n\nvar path = require('path'),\n    fs = require('fs');\n\nvar getOutputDirectory = require('./utility/get-output-directory');\n/**\n * Codec for relative paths with respect to the output directory.\n * @type {{name:string, decode: function, encode: function, root: function}}\n */\n\n\nmodule.exports = {\n  name: 'output-relative',\n  decode: decode,\n  encode: encode,\n  root: getOutputDirectory\n};\n/**\n * Decode the given uri.\n * Any path with or without leading slash is tested against context directory.\n * @this {{options: object}} A loader or compilation\n * @param {string} uri A source uri to decode\n * @returns {boolean|string} False where unmatched else the decoded path\n */\n\nfunction decode(uri) {\n  /* jshint validthis:true */\n  var base = getOutputDirectory.call(this),\n      absFile = !!base && path.normalize(path.join(base, uri)),\n      isValid = !!absFile && fs.existsSync(absFile) && fs.statSync(absFile).isFile();\n  return isValid && absFile;\n}\n/**\n * Encode the given file path.\n * @this {{options: object}} A loader or compilation\n * @param {string} absolute An absolute file path to encode\n * @returns {string} A uri\n */\n\n\nfunction encode(absolute) {\n  /* jshint validthis:true */\n  var base = getOutputDirectory.call(this);\n\n  if (!base) {\n    throw new Error('Cannot locate the Webpack output directory');\n  } else {\n    return path.relative(base, absolute);\n  }\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/adjust-sourcemap-loader/codec/output-relative.js"],"names":["path","require","fs","getOutputDirectory","module","exports","name","decode","encode","root","uri","base","call","absFile","normalize","join","isValid","existsSync","statSync","isFile","absolute","Error","relative"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;AAAA,IACIC,EAAE,GAAKD,OAAO,CAAC,IAAD,CADlB;;AAGA,IAAIE,kBAAkB,GAAGF,OAAO,CAAC,gCAAD,CAAhC;AAEA;;;;;;AAIAG,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,IAAI,EAAI,iBADO;AAEfC,EAAAA,MAAM,EAAEA,MAFO;AAGfC,EAAAA,MAAM,EAAEA,MAHO;AAIfC,EAAAA,IAAI,EAAIN;AAJO,CAAjB;AAOA;;;;;;;;AAOA,SAASI,MAAT,CAAgBG,GAAhB,EAAqB;AACnB;AACA,MAAIC,IAAI,GAAMR,kBAAkB,CAACS,IAAnB,CAAwB,IAAxB,CAAd;AAAA,MACIC,OAAO,GAAG,CAAC,CAACF,IAAF,IAAUX,IAAI,CAACc,SAAL,CAAed,IAAI,CAACe,IAAL,CAAUJ,IAAV,EAAgBD,GAAhB,CAAf,CADxB;AAAA,MAEIM,OAAO,GAAG,CAAC,CAACH,OAAF,IAAaX,EAAE,CAACe,UAAH,CAAcJ,OAAd,CAAb,IAAuCX,EAAE,CAACgB,QAAH,CAAYL,OAAZ,EAAqBM,MAArB,EAFrD;AAGA,SAAOH,OAAO,IAAIH,OAAlB;AACD;AAED;;;;;;;;AAMA,SAASL,MAAT,CAAgBY,QAAhB,EAA0B;AACxB;AACA,MAAIT,IAAI,GAAGR,kBAAkB,CAACS,IAAnB,CAAwB,IAAxB,CAAX;;AACA,MAAI,CAACD,IAAL,EAAW;AACT,UAAM,IAAIU,KAAJ,CAAU,4CAAV,CAAN;AACD,GAFD,MAGK;AACH,WAAOrB,IAAI,CAACsB,QAAL,CAAcX,IAAd,EAAoBS,QAApB,CAAP;AACD;AACF","sourcesContent":["'use strict';\n\nvar path = require('path'),\n    fs   = require('fs');\n\nvar getOutputDirectory = require('./utility/get-output-directory');\n\n/**\n * Codec for relative paths with respect to the output directory.\n * @type {{name:string, decode: function, encode: function, root: function}}\n */\nmodule.exports = {\n  name  : 'output-relative',\n  decode: decode,\n  encode: encode,\n  root  : getOutputDirectory\n};\n\n/**\n * Decode the given uri.\n * Any path with or without leading slash is tested against context directory.\n * @this {{options: object}} A loader or compilation\n * @param {string} uri A source uri to decode\n * @returns {boolean|string} False where unmatched else the decoded path\n */\nfunction decode(uri) {\n  /* jshint validthis:true */\n  var base    = getOutputDirectory.call(this),\n      absFile = !!base && path.normalize(path.join(base, uri)),\n      isValid = !!absFile && fs.existsSync(absFile) && fs.statSync(absFile).isFile();\n  return isValid && absFile;\n}\n\n/**\n * Encode the given file path.\n * @this {{options: object}} A loader or compilation\n * @param {string} absolute An absolute file path to encode\n * @returns {string} A uri\n */\nfunction encode(absolute) {\n  /* jshint validthis:true */\n  var base = getOutputDirectory.call(this);\n  if (!base) {\n    throw new Error('Cannot locate the Webpack output directory');\n  }\n  else {\n    return path.relative(base, absolute);\n  }\n}"]},"metadata":{},"sourceType":"script"}