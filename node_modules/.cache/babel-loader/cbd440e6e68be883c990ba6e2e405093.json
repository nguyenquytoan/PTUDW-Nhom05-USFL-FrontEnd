{"ast":null,"code":"var crypto = require('crypto');\n\nvar tape = require('tape');\n\nvar Sha1 = require('../').sha1;\n\nvar inputs = [['', 'ascii'], ['abc', 'ascii'], ['123', 'ascii'], ['123456789abcdef123456789abcdef123456789abcdef123456789abcdef', 'ascii'], ['123456789abcdef123456789abcdef123456789abcdef123456789abc', 'ascii'], ['123456789abcdef123456789abcdef123456789abcdef123456789ab', 'ascii'], ['0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcde', 'ascii'], ['0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef', 'ascii'], ['foobarbaz', 'ascii']];\ntape(\"hash is the same as node's crypto\", function (t) {\n  inputs.forEach(function (v) {\n    var a = new Sha1().update(v[0], v[1]).digest('hex');\n    var e = crypto.createHash('sha1').update(v[0], v[1]).digest('hex');\n    console.log(a, '==', e);\n    t.equal(a, e);\n  });\n  t.end();\n});\ntape('call update multiple times', function (t) {\n  inputs.forEach(function (v) {\n    var hash = new Sha1();\n\n    var _hash = crypto.createHash('sha1');\n\n    for (var i = 0; i < v[0].length; i = (i + 1) * 2) {\n      var s = v[0].substring(i, (i + 1) * 2);\n      hash.update(s, v[1]);\n\n      _hash.update(s, v[1]);\n    }\n\n    var a = hash.digest('hex');\n\n    var e = _hash.digest('hex');\n\n    console.log(a, '==', e);\n    t.equal(a, e);\n  });\n  t.end();\n});\ntape('call update twice', function (t) {\n  var _hash = crypto.createHash('sha1');\n\n  var hash = new Sha1();\n\n  _hash.update('foo', 'ascii');\n\n  hash.update('foo', 'ascii');\n\n  _hash.update('bar', 'ascii');\n\n  hash.update('bar', 'ascii');\n\n  _hash.update('baz', 'ascii');\n\n  hash.update('baz', 'ascii');\n  var a = hash.digest('hex');\n\n  var e = _hash.digest('hex');\n\n  t.equal(a, e);\n  t.end();\n});\ntape('hex encoding', function (t) {\n  inputs.forEach(function (v) {\n    var hash = new Sha1();\n\n    var _hash = crypto.createHash('sha1');\n\n    for (var i = 0; i < v[0].length; i = (i + 1) * 2) {\n      var s = v[0].substring(i, (i + 1) * 2);\n      hash.update(Buffer.from(s, 'ascii').toString('hex'), 'hex');\n\n      _hash.update(Buffer.from(s, 'ascii').toString('hex'), 'hex');\n    }\n\n    var a = hash.digest('hex');\n\n    var e = _hash.digest('hex');\n\n    console.log(a, '==', e);\n    t.equal(a, e);\n  });\n  t.end();\n});\ntape('call digest for more than MAX_UINT32 bits of data', function (t) {\n  var _hash = crypto.createHash('sha1');\n\n  var hash = new Sha1();\n  var bigData = Buffer.alloc(0x1ffffffff / 8);\n  hash.update(bigData);\n\n  _hash.update(bigData);\n\n  var a = hash.digest('hex');\n\n  var e = _hash.digest('hex');\n\n  t.equal(a, e);\n  t.end();\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/sha.js/test/test.js"],"names":["crypto","require","tape","Sha1","sha1","inputs","t","forEach","v","a","update","digest","e","createHash","console","log","equal","end","hash","_hash","i","length","s","substring","Buffer","from","toString","bigData","alloc"],"mappings":"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","sourcesContent":["var crypto = require('crypto')\nvar tape = require('tape')\nvar Sha1 = require('../').sha1\n\nvar inputs = [\n  ['', 'ascii'],\n  ['abc', 'ascii'],\n  ['123', 'ascii'],\n  ['123456789abcdef123456789abcdef123456789abcdef123456789abcdef', 'ascii'],\n  ['123456789abcdef123456789abcdef123456789abcdef123456789abc', 'ascii'],\n  ['123456789abcdef123456789abcdef123456789abcdef123456789ab', 'ascii'],\n  ['0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcde', 'ascii'],\n  ['0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef', 'ascii'],\n  ['foobarbaz', 'ascii']\n]\n\ntape(\"hash is the same as node's crypto\", function (t) {\n  inputs.forEach(function (v) {\n    var a = new Sha1().update(v[0], v[1]).digest('hex')\n    var e = crypto.createHash('sha1').update(v[0], v[1]).digest('hex')\n    console.log(a, '==', e)\n    t.equal(a, e)\n  })\n\n  t.end()\n})\n\ntape('call update multiple times', function (t) {\n  inputs.forEach(function (v) {\n    var hash = new Sha1()\n    var _hash = crypto.createHash('sha1')\n\n    for (var i = 0; i < v[0].length; i = (i + 1) * 2) {\n      var s = v[0].substring(i, (i + 1) * 2)\n      hash.update(s, v[1])\n      _hash.update(s, v[1])\n    }\n\n    var a = hash.digest('hex')\n    var e = _hash.digest('hex')\n    console.log(a, '==', e)\n    t.equal(a, e)\n  })\n  t.end()\n})\n\ntape('call update twice', function (t) {\n  var _hash = crypto.createHash('sha1')\n  var hash = new Sha1()\n\n  _hash.update('foo', 'ascii')\n  hash.update('foo', 'ascii')\n\n  _hash.update('bar', 'ascii')\n  hash.update('bar', 'ascii')\n\n  _hash.update('baz', 'ascii')\n  hash.update('baz', 'ascii')\n\n  var a = hash.digest('hex')\n  var e = _hash.digest('hex')\n\n  t.equal(a, e)\n  t.end()\n})\n\ntape('hex encoding', function (t) {\n  inputs.forEach(function (v) {\n    var hash = new Sha1()\n    var _hash = crypto.createHash('sha1')\n\n    for (var i = 0; i < v[0].length; i = (i + 1) * 2) {\n      var s = v[0].substring(i, (i + 1) * 2)\n      hash.update(Buffer.from(s, 'ascii').toString('hex'), 'hex')\n      _hash.update(Buffer.from(s, 'ascii').toString('hex'), 'hex')\n    }\n    var a = hash.digest('hex')\n    var e = _hash.digest('hex')\n\n    console.log(a, '==', e)\n    t.equal(a, e)\n  })\n\n  t.end()\n})\n\ntape('call digest for more than MAX_UINT32 bits of data', function (t) {\n  var _hash = crypto.createHash('sha1')\n  var hash = new Sha1()\n  var bigData = Buffer.alloc(0x1ffffffff / 8)\n\n  hash.update(bigData)\n  _hash.update(bigData)\n\n  var a = hash.digest('hex')\n  var e = _hash.digest('hex')\n\n  t.equal(a, e)\n  t.end()\n})\n"]},"metadata":{},"sourceType":"script"}