{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = commentParser;\n\nfunction commentParser(input) {\n  const tokens = [];\n  const length = input.length;\n  let pos = 0;\n  let next;\n\n  while (pos < length) {\n    next = input.indexOf('/*', pos);\n\n    if (~next) {\n      tokens.push([0, pos, next]);\n      pos = next;\n      next = input.indexOf('*/', pos + 2);\n      tokens.push([1, pos + 2, next]);\n      pos = next + 2;\n    } else {\n      tokens.push([0, pos, length]);\n      pos = length;\n    }\n  }\n\n  return tokens;\n}\n\n;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-discard-comments/dist/lib/commentParser.js"],"names":["Object","defineProperty","exports","value","default","commentParser","input","tokens","length","pos","next","indexOf","push","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,EAAAA,KAAK,EAAE;AADkC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,aAAlB;;AACA,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,MAAM,GAAGF,KAAK,CAACE,MAArB;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,IAAJ;;AAEA,SAAOD,GAAG,GAAGD,MAAb,EAAqB;AACjBE,IAAAA,IAAI,GAAGJ,KAAK,CAACK,OAAN,CAAc,IAAd,EAAoBF,GAApB,CAAP;;AAEA,QAAI,CAACC,IAAL,EAAW;AACPH,MAAAA,MAAM,CAACK,IAAP,CAAY,CAAC,CAAD,EAAIH,GAAJ,EAASC,IAAT,CAAZ;AACAD,MAAAA,GAAG,GAAGC,IAAN;AAEAA,MAAAA,IAAI,GAAGJ,KAAK,CAACK,OAAN,CAAc,IAAd,EAAoBF,GAAG,GAAG,CAA1B,CAAP;AACAF,MAAAA,MAAM,CAACK,IAAP,CAAY,CAAC,CAAD,EAAIH,GAAG,GAAG,CAAV,EAAaC,IAAb,CAAZ;AACAD,MAAAA,GAAG,GAAGC,IAAI,GAAG,CAAb;AACH,KAPD,MAOO;AACHH,MAAAA,MAAM,CAACK,IAAP,CAAY,CAAC,CAAD,EAAIH,GAAJ,EAASD,MAAT,CAAZ;AACAC,MAAAA,GAAG,GAAGD,MAAN;AACH;AACJ;;AAED,SAAOD,MAAP;AACH;;AAAA;AACDM,MAAM,CAACX,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = commentParser;\nfunction commentParser(input) {\n    const tokens = [];\n    const length = input.length;\n    let pos = 0;\n    let next;\n\n    while (pos < length) {\n        next = input.indexOf('/*', pos);\n\n        if (~next) {\n            tokens.push([0, pos, next]);\n            pos = next;\n\n            next = input.indexOf('*/', pos + 2);\n            tokens.push([1, pos + 2, next]);\n            pos = next + 2;\n        } else {\n            tokens.push([0, pos, length]);\n            pos = length;\n        }\n    }\n\n    return tokens;\n};\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}