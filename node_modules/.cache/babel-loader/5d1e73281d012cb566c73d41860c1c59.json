{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst call = require('../call');\n/**\n * A facade around {@link fs.readdirSync} that allows it to be called\n * the same way as {@link fs.readdir}.\n *\n * @param {string} dir\n * @param {function} callback\n */\n\n\nexports.readdir = function (dir, callback) {\n  // Make sure the callback is only called once\n  callback = call.once(callback);\n\n  try {\n    let items = fs.readdirSync(dir);\n    callback(null, items);\n  } catch (err) {\n    callback(err);\n  }\n};\n/**\n * A facade around {@link fs.statSync} that allows it to be called\n * the same way as {@link fs.stat}.\n *\n * @param {string} path\n * @param {function} callback\n */\n\n\nexports.stat = function (path, callback) {\n  // Make sure the callback is only called once\n  callback = call.once(callback);\n\n  try {\n    let stats = fs.statSync(path);\n    callback(null, stats);\n  } catch (err) {\n    callback(err);\n  }\n};\n/**\n * A facade around {@link fs.lstatSync} that allows it to be called\n * the same way as {@link fs.lstat}.\n *\n * @param {string} path\n * @param {function} callback\n */\n\n\nexports.lstat = function (path, callback) {\n  // Make sure the callback is only called once\n  callback = call.once(callback);\n\n  try {\n    let stats = fs.lstatSync(path);\n    callback(null, stats);\n  } catch (err) {\n    callback(err);\n  }\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/@mrmlnc/readdir-enhanced/lib/sync/fs.js"],"names":["fs","require","call","exports","readdir","dir","callback","once","items","readdirSync","err","stat","path","stats","statSync","lstat","lstatSync"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,SAAD,CAApB;AAEA;;;;;;;;;AAOAE,OAAO,CAACC,OAAR,GAAkB,UAAUC,GAAV,EAAeC,QAAf,EAAyB;AACzC;AACAA,EAAAA,QAAQ,GAAGJ,IAAI,CAACK,IAAL,CAAUD,QAAV,CAAX;;AAEA,MAAI;AACF,QAAIE,KAAK,GAAGR,EAAE,CAACS,WAAH,CAAeJ,GAAf,CAAZ;AACAC,IAAAA,QAAQ,CAAC,IAAD,EAAOE,KAAP,CAAR;AACD,GAHD,CAIA,OAAOE,GAAP,EAAY;AACVJ,IAAAA,QAAQ,CAACI,GAAD,CAAR;AACD;AACF,CAXD;AAaA;;;;;;;;;AAOAP,OAAO,CAACQ,IAAR,GAAe,UAAUC,IAAV,EAAgBN,QAAhB,EAA0B;AACvC;AACAA,EAAAA,QAAQ,GAAGJ,IAAI,CAACK,IAAL,CAAUD,QAAV,CAAX;;AAEA,MAAI;AACF,QAAIO,KAAK,GAAGb,EAAE,CAACc,QAAH,CAAYF,IAAZ,CAAZ;AACAN,IAAAA,QAAQ,CAAC,IAAD,EAAOO,KAAP,CAAR;AACD,GAHD,CAIA,OAAOH,GAAP,EAAY;AACVJ,IAAAA,QAAQ,CAACI,GAAD,CAAR;AACD;AACF,CAXD;AAaA;;;;;;;;;AAOAP,OAAO,CAACY,KAAR,GAAgB,UAAUH,IAAV,EAAgBN,QAAhB,EAA0B;AACxC;AACAA,EAAAA,QAAQ,GAAGJ,IAAI,CAACK,IAAL,CAAUD,QAAV,CAAX;;AAEA,MAAI;AACF,QAAIO,KAAK,GAAGb,EAAE,CAACgB,SAAH,CAAaJ,IAAb,CAAZ;AACAN,IAAAA,QAAQ,CAAC,IAAD,EAAOO,KAAP,CAAR;AACD,GAHD,CAIA,OAAOH,GAAP,EAAY;AACVJ,IAAAA,QAAQ,CAACI,GAAD,CAAR;AACD;AACF,CAXD","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst call = require('../call');\n\n/**\n * A facade around {@link fs.readdirSync} that allows it to be called\n * the same way as {@link fs.readdir}.\n *\n * @param {string} dir\n * @param {function} callback\n */\nexports.readdir = function (dir, callback) {\n  // Make sure the callback is only called once\n  callback = call.once(callback);\n\n  try {\n    let items = fs.readdirSync(dir);\n    callback(null, items);\n  }\n  catch (err) {\n    callback(err);\n  }\n};\n\n/**\n * A facade around {@link fs.statSync} that allows it to be called\n * the same way as {@link fs.stat}.\n *\n * @param {string} path\n * @param {function} callback\n */\nexports.stat = function (path, callback) {\n  // Make sure the callback is only called once\n  callback = call.once(callback);\n\n  try {\n    let stats = fs.statSync(path);\n    callback(null, stats);\n  }\n  catch (err) {\n    callback(err);\n  }\n};\n\n/**\n * A facade around {@link fs.lstatSync} that allows it to be called\n * the same way as {@link fs.lstat}.\n *\n * @param {string} path\n * @param {function} callback\n */\nexports.lstat = function (path, callback) {\n  // Make sure the callback is only called once\n  callback = call.once(callback);\n\n  try {\n    let stats = fs.lstatSync(path);\n    callback(null, stats);\n  }\n  catch (err) {\n    callback(err);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}