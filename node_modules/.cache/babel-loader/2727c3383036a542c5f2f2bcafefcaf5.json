{"ast":null,"code":"/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.mjs';\nimport '../_version.mjs';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof module:workbox-precaching\n */\n\nexport function* generateURLVariations(url, {\n  ignoreURLParametersMatching,\n  directoryIndex,\n  cleanURLs,\n  urlManipulation\n} = {}) {\n  const urlObject = new URL(url, location);\n  urlObject.hash = '';\n  yield urlObject.href;\n  const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n  yield urlWithoutIgnoredParams.href;\n\n  if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n    const directoryURL = new URL(urlWithoutIgnoredParams);\n    directoryURL.pathname += directoryIndex;\n    yield directoryURL.href;\n  }\n\n  if (cleanURLs) {\n    const cleanURL = new URL(urlWithoutIgnoredParams);\n    cleanURL.pathname += '.html';\n    yield cleanURL.href;\n  }\n\n  if (urlManipulation) {\n    const additionalURLs = urlManipulation({\n      url: urlObject\n    });\n\n    for (const urlToAttempt of additionalURLs) {\n      yield urlToAttempt.href;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-precaching/utils/generateURLVariations.mjs"],"names":["removeIgnoredSearchParams","generateURLVariations","url","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","urlObject","URL","location","hash","href","urlWithoutIgnoredParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt"],"mappings":"AAAA;;;;;;;AAQA,SAAQA,yBAAR,QAAwC,iCAAxC;AAEA,OAAO,iBAAP;AAEA;;;;;;;;;;;AAUA,OAAO,UAAUC,qBAAV,CAAgCC,GAAhC,EAAqC;AAC1CC,EAAAA,2BAD0C;AAE1CC,EAAAA,cAF0C;AAG1CC,EAAAA,SAH0C;AAI1CC,EAAAA;AAJ0C,IAKxC,EALG,EAKC;AACN,QAAMC,SAAS,GAAG,IAAIC,GAAJ,CAAQN,GAAR,EAAaO,QAAb,CAAlB;AACAF,EAAAA,SAAS,CAACG,IAAV,GAAiB,EAAjB;AACA,QAAMH,SAAS,CAACI,IAAhB;AAEA,QAAMC,uBAAuB,GAAGZ,yBAAyB,CACrDO,SADqD,EAC1CJ,2BAD0C,CAAzD;AAEA,QAAMS,uBAAuB,CAACD,IAA9B;;AAEA,MAAIP,cAAc,IAAIQ,uBAAuB,CAACC,QAAxB,CAAiCC,QAAjC,CAA0C,GAA1C,CAAtB,EAAsE;AACpE,UAAMC,YAAY,GAAG,IAAIP,GAAJ,CAAQI,uBAAR,CAArB;AACAG,IAAAA,YAAY,CAACF,QAAb,IAAyBT,cAAzB;AACA,UAAMW,YAAY,CAACJ,IAAnB;AACD;;AAED,MAAIN,SAAJ,EAAe;AACb,UAAMW,QAAQ,GAAG,IAAIR,GAAJ,CAAQI,uBAAR,CAAjB;AACAI,IAAAA,QAAQ,CAACH,QAAT,IAAqB,OAArB;AACA,UAAMG,QAAQ,CAACL,IAAf;AACD;;AAED,MAAIL,eAAJ,EAAqB;AACnB,UAAMW,cAAc,GAAGX,eAAe,CAAC;AAACJ,MAAAA,GAAG,EAAEK;AAAN,KAAD,CAAtC;;AACA,SAAK,MAAMW,YAAX,IAA2BD,cAA3B,EAA2C;AACzC,YAAMC,YAAY,CAACP,IAAnB;AACD;AACF;AACF","sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {removeIgnoredSearchParams} from './removeIgnoredSearchParams.mjs';\n\nimport '../_version.mjs';\n\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function* generateURLVariations(url, {\n  ignoreURLParametersMatching,\n  directoryIndex,\n  cleanURLs,\n  urlManipulation,\n} = {}) {\n  const urlObject = new URL(url, location);\n  urlObject.hash = '';\n  yield urlObject.href;\n\n  const urlWithoutIgnoredParams = removeIgnoredSearchParams(\n      urlObject, ignoreURLParametersMatching);\n  yield urlWithoutIgnoredParams.href;\n\n  if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n    const directoryURL = new URL(urlWithoutIgnoredParams);\n    directoryURL.pathname += directoryIndex;\n    yield directoryURL.href;\n  }\n\n  if (cleanURLs) {\n    const cleanURL = new URL(urlWithoutIgnoredParams);\n    cleanURL.pathname += '.html';\n    yield cleanURL.href;\n  }\n\n  if (urlManipulation) {\n    const additionalURLs = urlManipulation({url: urlObject});\n    for (const urlToAttempt of additionalURLs) {\n      yield urlToAttempt.href;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}