{"ast":null,"code":"var test = require(\"tape\");\n\nvar extend = require(\"./\");\n\nvar mutableExtend = require(\"./mutable\");\n\ntest(\"merge\", function (assert) {\n  var a = {\n    a: \"foo\"\n  };\n  var b = {\n    b: \"bar\"\n  };\n  assert.deepEqual(extend(a, b), {\n    a: \"foo\",\n    b: \"bar\"\n  });\n  assert.end();\n});\ntest(\"replace\", function (assert) {\n  var a = {\n    a: \"foo\"\n  };\n  var b = {\n    a: \"bar\"\n  };\n  assert.deepEqual(extend(a, b), {\n    a: \"bar\"\n  });\n  assert.end();\n});\ntest(\"undefined\", function (assert) {\n  var a = {\n    a: undefined\n  };\n  var b = {\n    b: \"foo\"\n  };\n  assert.deepEqual(extend(a, b), {\n    a: undefined,\n    b: \"foo\"\n  });\n  assert.deepEqual(extend(b, a), {\n    a: undefined,\n    b: \"foo\"\n  });\n  assert.end();\n});\ntest(\"handle 0\", function (assert) {\n  var a = {\n    a: \"default\"\n  };\n  var b = {\n    a: 0\n  };\n  assert.deepEqual(extend(a, b), {\n    a: 0\n  });\n  assert.deepEqual(extend(b, a), {\n    a: \"default\"\n  });\n  assert.end();\n});\ntest(\"is immutable\", function (assert) {\n  var record = {};\n  extend(record, {\n    foo: \"bar\"\n  });\n  assert.equal(record.foo, undefined);\n  assert.end();\n});\ntest(\"null as argument\", function (assert) {\n  var a = {\n    foo: \"bar\"\n  };\n  var b = null;\n  var c = void 0;\n  assert.deepEqual(extend(b, a, c), {\n    foo: \"bar\"\n  });\n  assert.end();\n});\ntest(\"mutable\", function (assert) {\n  var a = {\n    foo: \"bar\"\n  };\n  mutableExtend(a, {\n    bar: \"baz\"\n  });\n  assert.equal(a.bar, \"baz\");\n  assert.end();\n});\ntest(\"null prototype\", function (assert) {\n  var a = {\n    a: \"foo\"\n  };\n  var b = Object.create(null);\n  b.b = \"bar\";\n  assert.deepEqual(extend(a, b), {\n    a: \"foo\",\n    b: \"bar\"\n  });\n  assert.end();\n});\ntest(\"null prototype mutable\", function (assert) {\n  var a = {\n    foo: \"bar\"\n  };\n  var b = Object.create(null);\n  b.bar = \"baz\";\n  mutableExtend(a, b);\n  assert.equal(a.bar, \"baz\");\n  assert.end();\n});\ntest(\"prototype pollution\", function (assert) {\n  var a = {};\n  var maliciousPayload = '{\"__proto__\":{\"oops\":\"It works!\"}}';\n  assert.strictEqual(a.oops, undefined);\n  extend({}, maliciousPayload);\n  assert.strictEqual(a.oops, undefined);\n  assert.end();\n});\ntest(\"prototype pollution mutable\", function (assert) {\n  var a = {};\n  var maliciousPayload = '{\"__proto__\":{\"oops\":\"It works!\"}}';\n  assert.strictEqual(a.oops, undefined);\n  mutableExtend({}, maliciousPayload);\n  assert.strictEqual(a.oops, undefined);\n  assert.end();\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/xtend/test.js"],"names":["test","require","extend","mutableExtend","assert","a","b","deepEqual","end","undefined","record","foo","equal","c","bar","Object","create","maliciousPayload","strictEqual","oops"],"mappings":"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","sourcesContent":["var test = require(\"tape\")\nvar extend = require(\"./\")\nvar mutableExtend = require(\"./mutable\")\n\ntest(\"merge\", function(assert) {\n    var a = { a: \"foo\" }\n    var b = { b: \"bar\" }\n\n    assert.deepEqual(extend(a, b), { a: \"foo\", b: \"bar\" })\n    assert.end()\n})\n\ntest(\"replace\", function(assert) {\n    var a = { a: \"foo\" }\n    var b = { a: \"bar\" }\n\n    assert.deepEqual(extend(a, b), { a: \"bar\" })\n    assert.end()\n})\n\ntest(\"undefined\", function(assert) {\n    var a = { a: undefined }\n    var b = { b: \"foo\" }\n\n    assert.deepEqual(extend(a, b), { a: undefined, b: \"foo\" })\n    assert.deepEqual(extend(b, a), { a: undefined, b: \"foo\" })\n    assert.end()\n})\n\ntest(\"handle 0\", function(assert) {\n    var a = { a: \"default\" }\n    var b = { a: 0 }\n\n    assert.deepEqual(extend(a, b), { a: 0 })\n    assert.deepEqual(extend(b, a), { a: \"default\" })\n    assert.end()\n})\n\ntest(\"is immutable\", function (assert) {\n    var record = {}\n\n    extend(record, { foo: \"bar\" })\n    assert.equal(record.foo, undefined)\n    assert.end()\n})\n\ntest(\"null as argument\", function (assert) {\n    var a = { foo: \"bar\" }\n    var b = null\n    var c = void 0\n\n    assert.deepEqual(extend(b, a, c), { foo: \"bar\" })\n    assert.end()\n})\n\ntest(\"mutable\", function (assert) {\n    var a = { foo: \"bar\" }\n\n    mutableExtend(a, { bar: \"baz\" })\n\n    assert.equal(a.bar, \"baz\")\n    assert.end()\n})\n\ntest(\"null prototype\", function(assert) {\n    var a = { a: \"foo\" }\n    var b = Object.create(null)\n    b.b = \"bar\";\n\n    assert.deepEqual(extend(a, b), { a: \"foo\", b: \"bar\" })\n    assert.end()\n})\n\ntest(\"null prototype mutable\", function (assert) {\n    var a = { foo: \"bar\" }\n    var b = Object.create(null)\n    b.bar = \"baz\";\n\n    mutableExtend(a, b)\n\n    assert.equal(a.bar, \"baz\")\n    assert.end()\n})\n\ntest(\"prototype pollution\", function (assert) {\n    var a = {}\n    var maliciousPayload = '{\"__proto__\":{\"oops\":\"It works!\"}}'\n\n    assert.strictEqual(a.oops, undefined)\n    extend({}, maliciousPayload)\n    assert.strictEqual(a.oops, undefined)\n    assert.end()\n})\n\ntest(\"prototype pollution mutable\", function (assert) {\n    var a = {}\n    var maliciousPayload = '{\"__proto__\":{\"oops\":\"It works!\"}}'\n\n    assert.strictEqual(a.oops, undefined)\n    mutableExtend({}, maliciousPayload)\n    assert.strictEqual(a.oops, undefined)\n    assert.end()\n})\n"]},"metadata":{},"sourceType":"script"}