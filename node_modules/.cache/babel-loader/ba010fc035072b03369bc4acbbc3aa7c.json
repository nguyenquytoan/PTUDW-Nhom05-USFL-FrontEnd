{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.readConfig = readConfig;\nexports.readConfigs = readConfigs;\nObject.defineProperty(exports, 'getTestEnvironment', {\n  enumerable: true,\n  get: function get() {\n    return _utils.getTestEnvironment;\n  }\n});\nObject.defineProperty(exports, 'isJSONString', {\n  enumerable: true,\n  get: function get() {\n    return _utils.isJSONString;\n  }\n});\nObject.defineProperty(exports, 'replaceRootDirInPath', {\n  enumerable: true,\n  get: function get() {\n    return _utils.replaceRootDirInPath;\n  }\n});\nObject.defineProperty(exports, 'normalize', {\n  enumerable: true,\n  get: function get() {\n    return _normalize2.default;\n  }\n});\nObject.defineProperty(exports, 'deprecationEntries', {\n  enumerable: true,\n  get: function get() {\n    return _Deprecated.default;\n  }\n});\nObject.defineProperty(exports, 'defaults', {\n  enumerable: true,\n  get: function get() {\n    return _Defaults.default;\n  }\n});\nObject.defineProperty(exports, 'descriptions', {\n  enumerable: true,\n  get: function get() {\n    return _Descriptions.default;\n  }\n});\n\nfunction _fs() {\n  const data = _interopRequireDefault(require('fs'));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _utils = require('./utils');\n\nvar _normalize2 = _interopRequireDefault(require('./normalize'));\n\nvar _resolveConfigPath = _interopRequireDefault(require('./resolveConfigPath'));\n\nvar _readConfigFileAndSetRootDir = _interopRequireDefault(require('./readConfigFileAndSetRootDir'));\n\nvar _Deprecated = _interopRequireDefault(require('./Deprecated'));\n\nvar _Defaults = _interopRequireDefault(require('./Defaults'));\n\nvar _Descriptions = _interopRequireDefault(require('./Descriptions'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nfunction readConfig(argv, packageRootOrConfig, // Whether it needs to look into `--config` arg passed to CLI.\n// It only used to read initial config. If the initial config contains\n// `project` property, we don't want to read `--config` value and rather\nskipArgvConfigOption, parentConfigPath, projectIndex = Infinity) {\n  let rawOptions;\n  let configPath = null;\n\n  if (typeof packageRootOrConfig !== 'string') {\n    if (parentConfigPath) {\n      const parentConfigDirname = _path().default.dirname(parentConfigPath);\n\n      rawOptions = packageRootOrConfig;\n      rawOptions.rootDir = rawOptions.rootDir ? (0, _utils.replaceRootDirInPath)(parentConfigDirname, rawOptions.rootDir) : parentConfigDirname;\n    } else {\n      throw new Error('Jest: Cannot use configuration as an object without a file path.');\n    }\n  } else if ((0, _utils.isJSONString)(argv.config)) {\n    // A JSON string was passed to `--config` argument and we can parse it\n    // and use as is.\n    let config;\n\n    try {\n      config = JSON.parse(argv.config);\n    } catch (e) {\n      throw new Error('There was an error while parsing the `--config` argument as a JSON string.');\n    } // NOTE: we might need to resolve this dir to an absolute path in the future\n\n\n    config.rootDir = config.rootDir || packageRootOrConfig;\n    rawOptions = config; // A string passed to `--config`, which is either a direct path to the config\n    // or a path to directory containing `package.json` or `jest.config.js`\n  } else if (!skipArgvConfigOption && typeof argv.config == 'string') {\n    configPath = (0, _resolveConfigPath.default)(argv.config, process.cwd());\n    rawOptions = (0, _readConfigFileAndSetRootDir.default)(configPath);\n  } else {\n    // Otherwise just try to find config in the current rootDir.\n    configPath = (0, _resolveConfigPath.default)(packageRootOrConfig, process.cwd());\n    rawOptions = (0, _readConfigFileAndSetRootDir.default)(configPath);\n  }\n\n  const _normalize = (0, _normalize2.default)(rawOptions, argv, configPath, projectIndex),\n        options = _normalize.options,\n        hasDeprecationWarnings = _normalize.hasDeprecationWarnings;\n\n  const _groupOptions = groupOptions(options),\n        globalConfig = _groupOptions.globalConfig,\n        projectConfig = _groupOptions.projectConfig;\n\n  return {\n    configPath,\n    globalConfig,\n    hasDeprecationWarnings,\n    projectConfig\n  };\n}\n\nconst groupOptions = options => ({\n  globalConfig: Object.freeze({\n    bail: options.bail,\n    changedFilesWithAncestor: options.changedFilesWithAncestor,\n    changedSince: options.changedSince,\n    collectCoverage: options.collectCoverage,\n    collectCoverageFrom: options.collectCoverageFrom,\n    collectCoverageOnlyFrom: options.collectCoverageOnlyFrom,\n    coverageDirectory: options.coverageDirectory,\n    coverageReporters: options.coverageReporters,\n    coverageThreshold: options.coverageThreshold,\n    detectLeaks: options.detectLeaks,\n    detectOpenHandles: options.detectOpenHandles,\n    enabledTestsMap: options.enabledTestsMap,\n    errorOnDeprecated: options.errorOnDeprecated,\n    expand: options.expand,\n    extraGlobals: options.extraGlobals,\n    filter: options.filter,\n    findRelatedTests: options.findRelatedTests,\n    forceExit: options.forceExit,\n    globalSetup: options.globalSetup,\n    globalTeardown: options.globalTeardown,\n    json: options.json,\n    lastCommit: options.lastCommit,\n    listTests: options.listTests,\n    logHeapUsage: options.logHeapUsage,\n    maxConcurrency: options.maxConcurrency,\n    maxWorkers: options.maxWorkers,\n    noSCM: undefined,\n    noStackTrace: options.noStackTrace,\n    nonFlagArgs: options.nonFlagArgs,\n    notify: options.notify,\n    notifyMode: options.notifyMode,\n    onlyChanged: options.onlyChanged,\n    onlyFailures: options.onlyFailures,\n    outputFile: options.outputFile,\n    passWithNoTests: options.passWithNoTests,\n    projects: options.projects,\n    replname: options.replname,\n    reporters: options.reporters,\n    rootDir: options.rootDir,\n    runTestsByPath: options.runTestsByPath,\n    silent: options.silent,\n    skipFilter: options.skipFilter,\n    testFailureExitCode: options.testFailureExitCode,\n    testNamePattern: options.testNamePattern,\n    testPathPattern: options.testPathPattern,\n    testResultsProcessor: options.testResultsProcessor,\n    testSequencer: options.testSequencer,\n    testTimeout: options.testTimeout,\n    updateSnapshot: options.updateSnapshot,\n    useStderr: options.useStderr,\n    verbose: options.verbose,\n    watch: options.watch,\n    watchAll: options.watchAll,\n    watchPlugins: options.watchPlugins,\n    watchman: options.watchman\n  }),\n  projectConfig: Object.freeze({\n    automock: options.automock,\n    browser: options.browser,\n    cache: options.cache,\n    cacheDirectory: options.cacheDirectory,\n    clearMocks: options.clearMocks,\n    coveragePathIgnorePatterns: options.coveragePathIgnorePatterns,\n    cwd: options.cwd,\n    dependencyExtractor: options.dependencyExtractor,\n    detectLeaks: options.detectLeaks,\n    detectOpenHandles: options.detectOpenHandles,\n    displayName: options.displayName,\n    errorOnDeprecated: options.errorOnDeprecated,\n    extraGlobals: options.extraGlobals,\n    filter: options.filter,\n    forceCoverageMatch: options.forceCoverageMatch,\n    globalSetup: options.globalSetup,\n    globalTeardown: options.globalTeardown,\n    globals: options.globals,\n    haste: options.haste,\n    moduleDirectories: options.moduleDirectories,\n    moduleFileExtensions: options.moduleFileExtensions,\n    moduleLoader: options.moduleLoader,\n    moduleNameMapper: options.moduleNameMapper,\n    modulePathIgnorePatterns: options.modulePathIgnorePatterns,\n    modulePaths: options.modulePaths,\n    name: options.name,\n    prettierPath: options.prettierPath,\n    resetMocks: options.resetMocks,\n    resetModules: options.resetModules,\n    resolver: options.resolver,\n    restoreMocks: options.restoreMocks,\n    rootDir: options.rootDir,\n    roots: options.roots,\n    runner: options.runner,\n    setupFiles: options.setupFiles,\n    setupFilesAfterEnv: options.setupFilesAfterEnv,\n    skipFilter: options.skipFilter,\n    skipNodeResolution: options.skipNodeResolution,\n    snapshotResolver: options.snapshotResolver,\n    snapshotSerializers: options.snapshotSerializers,\n    testEnvironment: options.testEnvironment,\n    testEnvironmentOptions: options.testEnvironmentOptions,\n    testLocationInResults: options.testLocationInResults,\n    testMatch: options.testMatch,\n    testPathIgnorePatterns: options.testPathIgnorePatterns,\n    testRegex: options.testRegex,\n    testRunner: options.testRunner,\n    testURL: options.testURL,\n    timers: options.timers,\n    transform: options.transform,\n    transformIgnorePatterns: options.transformIgnorePatterns,\n    unmockedModulePathPatterns: options.unmockedModulePathPatterns,\n    watchPathIgnorePatterns: options.watchPathIgnorePatterns\n  })\n});\n\nconst ensureNoDuplicateConfigs = (parsedConfigs, projects) => {\n  if (projects.length <= 1) {\n    return;\n  }\n\n  const configPathMap = new Map();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = parsedConfigs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      const config = _step.value;\n      const configPath = config.configPath;\n\n      if (configPathMap.has(configPath)) {\n        const message = `Whoops! Two projects resolved to the same config path: ${_chalk().default.bold(String(configPath))}:\n\n  Project 1: ${_chalk().default.bold(projects[parsedConfigs.findIndex(x => x === config)])}\n  Project 2: ${_chalk().default.bold(projects[parsedConfigs.findIndex(x => x === configPathMap.get(configPath))])}\n\nThis usually means that your ${_chalk().default.bold('\"projects\"')} config includes a directory that doesn't have any configuration recognizable by Jest. Please fix it.\n`;\n        throw new Error(message);\n      }\n\n      if (configPath !== null) {\n        configPathMap.set(configPath, config);\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n}; // Possible scenarios:\n//  1. jest --config config.json\n//  2. jest --projects p1 p2\n//  3. jest --projects p1 p2 --config config.json\n//  4. jest --projects p1\n//  5. jest\n//\n// If no projects are specified, process.cwd() will be used as the default\n// (and only) project.\n\n\nfunction readConfigs(argv, projectPaths) {\n  let globalConfig;\n  let hasDeprecationWarnings;\n  let configs = [];\n  let projects = projectPaths;\n  let configPath;\n\n  if (projectPaths.length === 1) {\n    const parsedConfig = readConfig(argv, projects[0]);\n    configPath = parsedConfig.configPath;\n\n    if (parsedConfig.globalConfig.projects) {\n      // If this was a single project, and its config has `projects`\n      // settings, use that value instead.\n      projects = parsedConfig.globalConfig.projects;\n    }\n\n    hasDeprecationWarnings = parsedConfig.hasDeprecationWarnings;\n    globalConfig = parsedConfig.globalConfig;\n    configs = [parsedConfig.projectConfig];\n\n    if (globalConfig.projects && globalConfig.projects.length) {\n      // Even though we had one project in CLI args, there might be more\n      // projects defined in the config.\n      projects = globalConfig.projects;\n    }\n  }\n\n  if (projects.length > 1 || projects.length && typeof projects[0] === 'object') {\n    const parsedConfigs = projects.filter(root => {\n      // Ignore globbed files that cannot be `require`d.\n      if (typeof root === 'string' && _fs().default.existsSync(root) && !_fs().default.lstatSync(root).isDirectory() && !root.endsWith('.js') && !root.endsWith('.json')) {\n        return false;\n      }\n\n      return true;\n    }).map((root, projectIndex) => readConfig(argv, root, true, configPath, projectIndex));\n    ensureNoDuplicateConfigs(parsedConfigs, projects);\n    configs = parsedConfigs.map(({\n      projectConfig\n    }) => projectConfig);\n\n    if (!hasDeprecationWarnings) {\n      hasDeprecationWarnings = parsedConfigs.some(({\n        hasDeprecationWarnings\n      }) => !!hasDeprecationWarnings);\n    } // If no config was passed initially, use the one from the first project\n\n\n    if (!globalConfig) {\n      globalConfig = parsedConfigs[0].globalConfig;\n    }\n  }\n\n  if (!globalConfig || !configs.length) {\n    throw new Error('jest: No configuration found for any project.');\n  }\n\n  return {\n    configs,\n    globalConfig,\n    hasDeprecationWarnings: !!hasDeprecationWarnings\n  };\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-config/build/index.js"],"names":["Object","defineProperty","exports","value","readConfig","readConfigs","enumerable","get","_utils","getTestEnvironment","isJSONString","replaceRootDirInPath","_normalize2","default","_Deprecated","_Defaults","_Descriptions","_fs","data","_interopRequireDefault","require","_path","_chalk","_resolveConfigPath","_readConfigFileAndSetRootDir","obj","__esModule","argv","packageRootOrConfig","skipArgvConfigOption","parentConfigPath","projectIndex","Infinity","rawOptions","configPath","parentConfigDirname","dirname","rootDir","Error","config","JSON","parse","e","process","cwd","_normalize","options","hasDeprecationWarnings","_groupOptions","groupOptions","globalConfig","projectConfig","freeze","bail","changedFilesWithAncestor","changedSince","collectCoverage","collectCoverageFrom","collectCoverageOnlyFrom","coverageDirectory","coverageReporters","coverageThreshold","detectLeaks","detectOpenHandles","enabledTestsMap","errorOnDeprecated","expand","extraGlobals","filter","findRelatedTests","forceExit","globalSetup","globalTeardown","json","lastCommit","listTests","logHeapUsage","maxConcurrency","maxWorkers","noSCM","undefined","noStackTrace","nonFlagArgs","notify","notifyMode","onlyChanged","onlyFailures","outputFile","passWithNoTests","projects","replname","reporters","runTestsByPath","silent","skipFilter","testFailureExitCode","testNamePattern","testPathPattern","testResultsProcessor","testSequencer","testTimeout","updateSnapshot","useStderr","verbose","watch","watchAll","watchPlugins","watchman","automock","browser","cache","cacheDirectory","clearMocks","coveragePathIgnorePatterns","dependencyExtractor","displayName","forceCoverageMatch","globals","haste","moduleDirectories","moduleFileExtensions","moduleLoader","moduleNameMapper","modulePathIgnorePatterns","modulePaths","name","prettierPath","resetMocks","resetModules","resolver","restoreMocks","roots","runner","setupFiles","setupFilesAfterEnv","skipNodeResolution","snapshotResolver","snapshotSerializers","testEnvironment","testEnvironmentOptions","testLocationInResults","testMatch","testPathIgnorePatterns","testRegex","testRunner","testURL","timers","transform","transformIgnorePatterns","unmockedModulePathPatterns","watchPathIgnorePatterns","ensureNoDuplicateConfigs","parsedConfigs","length","configPathMap","Map","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","next","done","has","message","bold","String","findIndex","x","set","err","return","projectPaths","configs","parsedConfig","root","existsSync","lstatSync","isDirectory","endsWith","map","some"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.readConfig = readConfig;\nexports.readConfigs = readConfigs;\nObject.defineProperty(exports, 'getTestEnvironment', {\n  enumerable: true,\n  get: function get() {\n    return _utils.getTestEnvironment;\n  }\n});\nObject.defineProperty(exports, 'isJSONString', {\n  enumerable: true,\n  get: function get() {\n    return _utils.isJSONString;\n  }\n});\nObject.defineProperty(exports, 'replaceRootDirInPath', {\n  enumerable: true,\n  get: function get() {\n    return _utils.replaceRootDirInPath;\n  }\n});\nObject.defineProperty(exports, 'normalize', {\n  enumerable: true,\n  get: function get() {\n    return _normalize2.default;\n  }\n});\nObject.defineProperty(exports, 'deprecationEntries', {\n  enumerable: true,\n  get: function get() {\n    return _Deprecated.default;\n  }\n});\nObject.defineProperty(exports, 'defaults', {\n  enumerable: true,\n  get: function get() {\n    return _Defaults.default;\n  }\n});\nObject.defineProperty(exports, 'descriptions', {\n  enumerable: true,\n  get: function get() {\n    return _Descriptions.default;\n  }\n});\n\nfunction _fs() {\n  const data = _interopRequireDefault(require('fs'));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _utils = require('./utils');\n\nvar _normalize2 = _interopRequireDefault(require('./normalize'));\n\nvar _resolveConfigPath = _interopRequireDefault(require('./resolveConfigPath'));\n\nvar _readConfigFileAndSetRootDir = _interopRequireDefault(\n  require('./readConfigFileAndSetRootDir')\n);\n\nvar _Deprecated = _interopRequireDefault(require('./Deprecated'));\n\nvar _Defaults = _interopRequireDefault(require('./Defaults'));\n\nvar _Descriptions = _interopRequireDefault(require('./Descriptions'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nfunction readConfig(\n  argv,\n  packageRootOrConfig, // Whether it needs to look into `--config` arg passed to CLI.\n  // It only used to read initial config. If the initial config contains\n  // `project` property, we don't want to read `--config` value and rather\n  skipArgvConfigOption,\n  parentConfigPath,\n  projectIndex = Infinity\n) {\n  let rawOptions;\n  let configPath = null;\n\n  if (typeof packageRootOrConfig !== 'string') {\n    if (parentConfigPath) {\n      const parentConfigDirname = _path().default.dirname(parentConfigPath);\n\n      rawOptions = packageRootOrConfig;\n      rawOptions.rootDir = rawOptions.rootDir\n        ? (0, _utils.replaceRootDirInPath)(\n            parentConfigDirname,\n            rawOptions.rootDir\n          )\n        : parentConfigDirname;\n    } else {\n      throw new Error(\n        'Jest: Cannot use configuration as an object without a file path.'\n      );\n    }\n  } else if ((0, _utils.isJSONString)(argv.config)) {\n    // A JSON string was passed to `--config` argument and we can parse it\n    // and use as is.\n    let config;\n\n    try {\n      config = JSON.parse(argv.config);\n    } catch (e) {\n      throw new Error(\n        'There was an error while parsing the `--config` argument as a JSON string.'\n      );\n    } // NOTE: we might need to resolve this dir to an absolute path in the future\n\n    config.rootDir = config.rootDir || packageRootOrConfig;\n    rawOptions = config; // A string passed to `--config`, which is either a direct path to the config\n    // or a path to directory containing `package.json` or `jest.config.js`\n  } else if (!skipArgvConfigOption && typeof argv.config == 'string') {\n    configPath = (0, _resolveConfigPath.default)(argv.config, process.cwd());\n    rawOptions = (0, _readConfigFileAndSetRootDir.default)(configPath);\n  } else {\n    // Otherwise just try to find config in the current rootDir.\n    configPath = (0, _resolveConfigPath.default)(\n      packageRootOrConfig,\n      process.cwd()\n    );\n    rawOptions = (0, _readConfigFileAndSetRootDir.default)(configPath);\n  }\n\n  const _normalize = (0, _normalize2.default)(\n      rawOptions,\n      argv,\n      configPath,\n      projectIndex\n    ),\n    options = _normalize.options,\n    hasDeprecationWarnings = _normalize.hasDeprecationWarnings;\n\n  const _groupOptions = groupOptions(options),\n    globalConfig = _groupOptions.globalConfig,\n    projectConfig = _groupOptions.projectConfig;\n\n  return {\n    configPath,\n    globalConfig,\n    hasDeprecationWarnings,\n    projectConfig\n  };\n}\n\nconst groupOptions = options => ({\n  globalConfig: Object.freeze({\n    bail: options.bail,\n    changedFilesWithAncestor: options.changedFilesWithAncestor,\n    changedSince: options.changedSince,\n    collectCoverage: options.collectCoverage,\n    collectCoverageFrom: options.collectCoverageFrom,\n    collectCoverageOnlyFrom: options.collectCoverageOnlyFrom,\n    coverageDirectory: options.coverageDirectory,\n    coverageReporters: options.coverageReporters,\n    coverageThreshold: options.coverageThreshold,\n    detectLeaks: options.detectLeaks,\n    detectOpenHandles: options.detectOpenHandles,\n    enabledTestsMap: options.enabledTestsMap,\n    errorOnDeprecated: options.errorOnDeprecated,\n    expand: options.expand,\n    extraGlobals: options.extraGlobals,\n    filter: options.filter,\n    findRelatedTests: options.findRelatedTests,\n    forceExit: options.forceExit,\n    globalSetup: options.globalSetup,\n    globalTeardown: options.globalTeardown,\n    json: options.json,\n    lastCommit: options.lastCommit,\n    listTests: options.listTests,\n    logHeapUsage: options.logHeapUsage,\n    maxConcurrency: options.maxConcurrency,\n    maxWorkers: options.maxWorkers,\n    noSCM: undefined,\n    noStackTrace: options.noStackTrace,\n    nonFlagArgs: options.nonFlagArgs,\n    notify: options.notify,\n    notifyMode: options.notifyMode,\n    onlyChanged: options.onlyChanged,\n    onlyFailures: options.onlyFailures,\n    outputFile: options.outputFile,\n    passWithNoTests: options.passWithNoTests,\n    projects: options.projects,\n    replname: options.replname,\n    reporters: options.reporters,\n    rootDir: options.rootDir,\n    runTestsByPath: options.runTestsByPath,\n    silent: options.silent,\n    skipFilter: options.skipFilter,\n    testFailureExitCode: options.testFailureExitCode,\n    testNamePattern: options.testNamePattern,\n    testPathPattern: options.testPathPattern,\n    testResultsProcessor: options.testResultsProcessor,\n    testSequencer: options.testSequencer,\n    testTimeout: options.testTimeout,\n    updateSnapshot: options.updateSnapshot,\n    useStderr: options.useStderr,\n    verbose: options.verbose,\n    watch: options.watch,\n    watchAll: options.watchAll,\n    watchPlugins: options.watchPlugins,\n    watchman: options.watchman\n  }),\n  projectConfig: Object.freeze({\n    automock: options.automock,\n    browser: options.browser,\n    cache: options.cache,\n    cacheDirectory: options.cacheDirectory,\n    clearMocks: options.clearMocks,\n    coveragePathIgnorePatterns: options.coveragePathIgnorePatterns,\n    cwd: options.cwd,\n    dependencyExtractor: options.dependencyExtractor,\n    detectLeaks: options.detectLeaks,\n    detectOpenHandles: options.detectOpenHandles,\n    displayName: options.displayName,\n    errorOnDeprecated: options.errorOnDeprecated,\n    extraGlobals: options.extraGlobals,\n    filter: options.filter,\n    forceCoverageMatch: options.forceCoverageMatch,\n    globalSetup: options.globalSetup,\n    globalTeardown: options.globalTeardown,\n    globals: options.globals,\n    haste: options.haste,\n    moduleDirectories: options.moduleDirectories,\n    moduleFileExtensions: options.moduleFileExtensions,\n    moduleLoader: options.moduleLoader,\n    moduleNameMapper: options.moduleNameMapper,\n    modulePathIgnorePatterns: options.modulePathIgnorePatterns,\n    modulePaths: options.modulePaths,\n    name: options.name,\n    prettierPath: options.prettierPath,\n    resetMocks: options.resetMocks,\n    resetModules: options.resetModules,\n    resolver: options.resolver,\n    restoreMocks: options.restoreMocks,\n    rootDir: options.rootDir,\n    roots: options.roots,\n    runner: options.runner,\n    setupFiles: options.setupFiles,\n    setupFilesAfterEnv: options.setupFilesAfterEnv,\n    skipFilter: options.skipFilter,\n    skipNodeResolution: options.skipNodeResolution,\n    snapshotResolver: options.snapshotResolver,\n    snapshotSerializers: options.snapshotSerializers,\n    testEnvironment: options.testEnvironment,\n    testEnvironmentOptions: options.testEnvironmentOptions,\n    testLocationInResults: options.testLocationInResults,\n    testMatch: options.testMatch,\n    testPathIgnorePatterns: options.testPathIgnorePatterns,\n    testRegex: options.testRegex,\n    testRunner: options.testRunner,\n    testURL: options.testURL,\n    timers: options.timers,\n    transform: options.transform,\n    transformIgnorePatterns: options.transformIgnorePatterns,\n    unmockedModulePathPatterns: options.unmockedModulePathPatterns,\n    watchPathIgnorePatterns: options.watchPathIgnorePatterns\n  })\n});\n\nconst ensureNoDuplicateConfigs = (parsedConfigs, projects) => {\n  if (projects.length <= 1) {\n    return;\n  }\n\n  const configPathMap = new Map();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (\n      var _iterator = parsedConfigs[Symbol.iterator](), _step;\n      !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n      _iteratorNormalCompletion = true\n    ) {\n      const config = _step.value;\n      const configPath = config.configPath;\n\n      if (configPathMap.has(configPath)) {\n        const message = `Whoops! Two projects resolved to the same config path: ${_chalk().default.bold(\n          String(configPath)\n        )}:\n\n  Project 1: ${_chalk().default.bold(\n    projects[parsedConfigs.findIndex(x => x === config)]\n  )}\n  Project 2: ${_chalk().default.bold(\n    projects[parsedConfigs.findIndex(x => x === configPathMap.get(configPath))]\n  )}\n\nThis usually means that your ${_chalk().default.bold(\n          '\"projects\"'\n        )} config includes a directory that doesn't have any configuration recognizable by Jest. Please fix it.\n`;\n        throw new Error(message);\n      }\n\n      if (configPath !== null) {\n        configPathMap.set(configPath, config);\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n}; // Possible scenarios:\n//  1. jest --config config.json\n//  2. jest --projects p1 p2\n//  3. jest --projects p1 p2 --config config.json\n//  4. jest --projects p1\n//  5. jest\n//\n// If no projects are specified, process.cwd() will be used as the default\n// (and only) project.\n\nfunction readConfigs(argv, projectPaths) {\n  let globalConfig;\n  let hasDeprecationWarnings;\n  let configs = [];\n  let projects = projectPaths;\n  let configPath;\n\n  if (projectPaths.length === 1) {\n    const parsedConfig = readConfig(argv, projects[0]);\n    configPath = parsedConfig.configPath;\n\n    if (parsedConfig.globalConfig.projects) {\n      // If this was a single project, and its config has `projects`\n      // settings, use that value instead.\n      projects = parsedConfig.globalConfig.projects;\n    }\n\n    hasDeprecationWarnings = parsedConfig.hasDeprecationWarnings;\n    globalConfig = parsedConfig.globalConfig;\n    configs = [parsedConfig.projectConfig];\n\n    if (globalConfig.projects && globalConfig.projects.length) {\n      // Even though we had one project in CLI args, there might be more\n      // projects defined in the config.\n      projects = globalConfig.projects;\n    }\n  }\n\n  if (\n    projects.length > 1 ||\n    (projects.length && typeof projects[0] === 'object')\n  ) {\n    const parsedConfigs = projects\n      .filter(root => {\n        // Ignore globbed files that cannot be `require`d.\n        if (\n          typeof root === 'string' &&\n          _fs().default.existsSync(root) &&\n          !_fs()\n            .default.lstatSync(root)\n            .isDirectory() &&\n          !root.endsWith('.js') &&\n          !root.endsWith('.json')\n        ) {\n          return false;\n        }\n\n        return true;\n      })\n      .map((root, projectIndex) =>\n        readConfig(argv, root, true, configPath, projectIndex)\n      );\n    ensureNoDuplicateConfigs(parsedConfigs, projects);\n    configs = parsedConfigs.map(({projectConfig}) => projectConfig);\n\n    if (!hasDeprecationWarnings) {\n      hasDeprecationWarnings = parsedConfigs.some(\n        ({hasDeprecationWarnings}) => !!hasDeprecationWarnings\n      );\n    } // If no config was passed initially, use the one from the first project\n\n    if (!globalConfig) {\n      globalConfig = parsedConfigs[0].globalConfig;\n    }\n  }\n\n  if (!globalConfig || !configs.length) {\n    throw new Error('jest: No configuration found for any project.');\n  }\n\n  return {\n    configs,\n    globalConfig,\n    hasDeprecationWarnings: !!hasDeprecationWarnings\n  };\n}\n"]},"metadata":{},"sourceType":"script"}