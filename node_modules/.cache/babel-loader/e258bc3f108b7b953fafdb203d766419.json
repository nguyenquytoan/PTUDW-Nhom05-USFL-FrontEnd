{"ast":null,"code":"/* This program is free software. It comes without any warranty, to\n     * the extent permitted by applicable law. You can redistribute it\n     * and/or modify it under the terms of the Do What The Fuck You Want\n     * To Public License, Version 2, as published by Sam Hocevar. See\n     * http://www.wtfpl.net/ for more details. */\nvar leftPad = require(\"./\");\n\nvar test = require(\"tape\");\n\nvar fc = require(\"fast-check\");\n\ntest('edge cases', function (assert) {\n  assert.plan(12);\n  assert.strictEqual(leftPad('foobar', 6), 'foobar');\n  assert.strictEqual(leftPad('foobar', 5), 'foobar');\n  assert.strictEqual(leftPad('foobar', -1), 'foobar');\n  assert.strictEqual(leftPad('foobar', 6, '1'), 'foobar');\n  assert.strictEqual(leftPad('foobar', 5, '1'), 'foobar');\n  assert.strictEqual(leftPad('foobar', -1, '1'), 'foobar');\n  assert.strictEqual(leftPad('foobar', 8, ''), '  foobar');\n  assert.strictEqual(leftPad('foobar', 8, false), '  foobar', 'false default to space');\n  assert.strictEqual(leftPad('foobar', 8, 0), '00foobar', '0 is treated as 0');\n  assert.strictEqual(leftPad(0, 3, 1), '110', 'integer for str is converted to string');\n  assert.strictEqual(leftPad(true, 7), '   true', 'boolean for str is converted to string');\n  assert.strictEqual(leftPad('', 2), '  ', 'empty str for str');\n});\ntest('spaces for ch', function (assert) {\n  assert.plan(12); // default to space if not specified\n\n  assert.strictEqual(leftPad('foo', 2), 'foo');\n  assert.strictEqual(leftPad('foo', 3), 'foo');\n  assert.strictEqual(leftPad('foo', 4), ' foo');\n  assert.strictEqual(leftPad('foo', 5), '  foo');\n  assert.strictEqual(leftPad('foo', 12), '         foo');\n  assert.strictEqual(leftPad('foo', 13), '          foo'); // explicit space param\n\n  assert.strictEqual(leftPad('foo', 2, ' '), 'foo');\n  assert.strictEqual(leftPad('foo', 3, ' '), 'foo');\n  assert.strictEqual(leftPad('foo', 4, ' '), ' foo');\n  assert.strictEqual(leftPad('foo', 5, ' '), '  foo');\n  assert.strictEqual(leftPad('foo', 12, ' '), '         foo');\n  assert.strictEqual(leftPad('foo', 13, ' '), '          foo');\n});\ntest('non spaces for ch', function (assert) {\n  assert.plan(7);\n  assert.strictEqual(leftPad(1, 2, 0), '01');\n  assert.strictEqual(leftPad(1, 2, '-'), '-1');\n  assert.strictEqual(leftPad('foo', 4, '*'), '*foo', '0b1 len');\n  assert.strictEqual(leftPad('foo', 5, '*'), '**foo', '0b10 len');\n  assert.strictEqual(leftPad('foo', 6, '*'), '***foo', '0b11 len');\n  assert.strictEqual(leftPad('foo', 7, '*'), '****foo', '0b001 len');\n  assert.strictEqual(leftPad('foo', 103, '*'), '****************************************************************************************************foo', '100 pad');\n});\n\nvar runProperty = function (assert, name, checkFn) {\n  var prop = fc.property(fc.string(), fc.nat(1000), fc.char(), checkFn);\n  var result = fc.check(prop);\n  var message = '';\n\n  if (result.failed) {\n    message = 'Property \"' + name + '\" failed on counterexample ' + JSON.stringify(result.counterexample) + ' (seed: ' + result.seed + ')';\n  }\n\n  assert.strictEqual(message, '', name);\n};\n\ntest('properties', function (assert) {\n  assert.plan(4);\n  runProperty(assert, 'starts by ch', function (str, len, ch) {\n    var beg = leftPad(str, len, ch).substr(0, len - str.length);\n\n    for (var idx = 0; idx != beg.length; ++idx) if (beg[idx] !== ch) return false;\n\n    return true;\n  });\n  runProperty(assert, 'ends by str', function (str, len, ch) {\n    var out = leftPad(str, len, ch);\n\n    for (var idx = 0; idx != str.length; ++idx) if (str[str.length - idx - 1] !== out[out.length - idx - 1]) return false;\n\n    return true;\n  });\n  runProperty(assert, 'len char long if padded (unchanged otherwise)', function (str, len, ch) {\n    var out = leftPad(str, len, ch);\n    return str.length < len ? out.length === len : str === out;\n  });\n  runProperty(assert, 'no ch equivalent to space', function (str, len) {\n    return leftPad(str, len) === leftPad(str, len, ' ');\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/left-pad/test.js"],"names":["leftPad","require","test","fc","assert","plan","strictEqual","runProperty","name","checkFn","prop","property","string","nat","char","result","check","message","failed","JSON","stringify","counterexample","seed","str","len","ch","beg","substr","length","idx","out"],"mappings":"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","sourcesContent":["/* This program is free software. It comes without any warranty, to\n     * the extent permitted by applicable law. You can redistribute it\n     * and/or modify it under the terms of the Do What The Fuck You Want\n     * To Public License, Version 2, as published by Sam Hocevar. See\n     * http://www.wtfpl.net/ for more details. */\nvar leftPad = require(\"./\");\nvar test = require(\"tape\");\nvar fc = require(\"fast-check\");\n\ntest('edge cases', function (assert) {\n  assert.plan(12);\n  assert.strictEqual(leftPad('foobar', 6), 'foobar');\n  assert.strictEqual(leftPad('foobar', 5), 'foobar');\n  assert.strictEqual(leftPad('foobar', -1), 'foobar');\n  assert.strictEqual(leftPad('foobar', 6, '1'), 'foobar');\n  assert.strictEqual(leftPad('foobar', 5, '1'), 'foobar');\n  assert.strictEqual(leftPad('foobar', -1, '1'), 'foobar');\n  assert.strictEqual(leftPad('foobar', 8, ''), '  foobar');\n  assert.strictEqual(leftPad('foobar', 8, false), '  foobar', 'false default to space');\n  assert.strictEqual(leftPad('foobar', 8, 0), '00foobar', '0 is treated as 0');\n  assert.strictEqual(leftPad(0, 3, 1), '110', 'integer for str is converted to string');\n  assert.strictEqual(leftPad(true, 7), '   true', 'boolean for str is converted to string');\n  assert.strictEqual(leftPad('', 2), '  ', 'empty str for str');\n});\n\ntest('spaces for ch', function (assert) {\n  assert.plan(12);\n  // default to space if not specified\n  assert.strictEqual(leftPad('foo', 2), 'foo');\n  assert.strictEqual(leftPad('foo', 3), 'foo');\n  assert.strictEqual(leftPad('foo', 4), ' foo');\n  assert.strictEqual(leftPad('foo', 5), '  foo');\n  assert.strictEqual(leftPad('foo', 12), '         foo');\n  assert.strictEqual(leftPad('foo', 13), '          foo');\n  // explicit space param\n  assert.strictEqual(leftPad('foo', 2, ' '), 'foo');\n  assert.strictEqual(leftPad('foo', 3, ' '), 'foo');\n  assert.strictEqual(leftPad('foo', 4, ' '), ' foo');\n  assert.strictEqual(leftPad('foo', 5, ' '), '  foo');\n  assert.strictEqual(leftPad('foo', 12, ' '), '         foo');\n  assert.strictEqual(leftPad('foo', 13, ' '), '          foo');\n});\n\ntest('non spaces for ch', function (assert) {\n  assert.plan(7);\n  assert.strictEqual(leftPad(1, 2, 0), '01');\n  assert.strictEqual(leftPad(1, 2, '-'), '-1');\n  assert.strictEqual(leftPad('foo', 4, '*'), '*foo', '0b1 len');\n  assert.strictEqual(leftPad('foo', 5, '*'), '**foo', '0b10 len');\n  assert.strictEqual(leftPad('foo', 6, '*'), '***foo', '0b11 len');\n  assert.strictEqual(leftPad('foo', 7, '*'), '****foo', '0b001 len');\n  assert.strictEqual(leftPad('foo', 103, '*'), '****************************************************************************************************foo', '100 pad');\n});\n\nvar runProperty = function(assert, name, checkFn) {\n  var prop = fc.property(fc.string(), fc.nat(1000), fc.char(), checkFn);\n  var result = fc.check(prop);\n  var message = '';\n  if (result.failed) {\n    message = 'Property \"' + name + '\" failed on counterexample ' + JSON.stringify(result.counterexample) + ' (seed: ' + result.seed + ')';\n  }\n  assert.strictEqual(message, '', name);\n};\n\ntest('properties', function (assert) {\n  assert.plan(4);\n  runProperty(assert, 'starts by ch', function(str, len, ch) {\n      var beg = leftPad(str, len, ch).substr(0, len -str.length);\n      for (var idx = 0 ; idx != beg.length ; ++idx)\n        if (beg[idx] !== ch)\n          return false;\n      return true;\n  });\n  runProperty(assert, 'ends by str', function(str, len, ch) {\n      var out = leftPad(str, len, ch);\n      for (var idx = 0 ; idx != str.length ; ++idx)\n        if (str[str.length -idx -1] !== out[out.length -idx -1])\n          return false;\n      return true;\n  });\n  runProperty(assert, 'len char long if padded (unchanged otherwise)', function(str, len, ch) {\n      var out = leftPad(str, len, ch);\n      return str.length < len ? out.length === len : str === out;\n  });\n  runProperty(assert, 'no ch equivalent to space', function(str, len) {\n      return leftPad(str, len) === leftPad(str, len, ' ');\n  });\n});\n"]},"metadata":{},"sourceType":"script"}