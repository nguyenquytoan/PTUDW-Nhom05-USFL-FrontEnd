{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  const data = _interopRequireDefault(require('fs'));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _jsonlint = _interopRequireDefault(require('./vendor/jsonlint'));\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @ts-ignore: vendored\n// Read the configuration and set its `rootDir`\n// 1. If it's a `package.json` file, we look into its \"jest\" property\n// 2. For any other file, we just require it.\n\n\nvar _default = configPath => {\n  const isJSON = configPath.endsWith('.json');\n  let configObject;\n\n  try {\n    configObject = require(configPath);\n  } catch (error) {\n    if (isJSON) {\n      throw new Error(`Jest: Failed to parse config file ${configPath}\\n` + `  ${_jsonlint.default.errors(_fs().default.readFileSync(configPath, 'utf8'))}`);\n    } else {\n      throw error;\n    }\n  }\n\n  if (configPath.endsWith(_constants.PACKAGE_JSON)) {\n    // Event if there's no \"jest\" property in package.json we will still use\n    // an empty object.\n    configObject = configObject.jest || {};\n  }\n\n  if (configObject.rootDir) {\n    // We don't touch it if it has an absolute path specified\n    if (!_path().default.isAbsolute(configObject.rootDir)) {\n      // otherwise, we'll resolve it relative to the file's __dirname\n      configObject.rootDir = _path().default.resolve(_path().default.dirname(configPath), configObject.rootDir);\n    }\n  } else {\n    // If rootDir is not there, we'll set it to this file's __dirname\n    configObject.rootDir = _path().default.dirname(configPath);\n  }\n\n  return configObject;\n};\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-config/build/readConfigFileAndSetRootDir.js"],"names":["Object","defineProperty","exports","value","default","_path","data","_interopRequireDefault","require","_fs","_jsonlint","_constants","obj","__esModule","_default","configPath","isJSON","endsWith","configObject","error","Error","errors","readFileSync","PACKAGE_JSON","jest","rootDir","isAbsolute","resolve","dirname"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,SAASC,KAAT,GAAiB;AACf,QAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,MAAD,CAAR,CAAnC;;AAEAH,EAAAA,KAAK,GAAG,SAASA,KAAT,GAAiB;AACvB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASG,GAAT,GAAe;AACb,QAAMH,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,IAAD,CAAR,CAAnC;;AAEAC,EAAAA,GAAG,GAAG,SAASA,GAAT,GAAe;AACnB,WAAOH,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,IAAII,SAAS,GAAGH,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAAtC;;AAEA,IAAIG,UAAU,GAAGH,OAAO,CAAC,aAAD,CAAxB;;AAEA,SAASD,sBAAT,CAAgCK,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAACR,IAAAA,OAAO,EAAEQ;AAAV,GAArC;AACD;AAED;;;;;;AAMA;AACA;AACA;AACA;;;AACA,IAAIE,QAAQ,GAAGC,UAAU,IAAI;AAC3B,QAAMC,MAAM,GAAGD,UAAU,CAACE,QAAX,CAAoB,OAApB,CAAf;AACA,MAAIC,YAAJ;;AAEA,MAAI;AACFA,IAAAA,YAAY,GAAGV,OAAO,CAACO,UAAD,CAAtB;AACD,GAFD,CAEE,OAAOI,KAAP,EAAc;AACd,QAAIH,MAAJ,EAAY;AACV,YAAM,IAAII,KAAJ,CACH,qCAAoCL,UAAW,IAAhD,GACG,KAAIL,SAAS,CAACN,OAAV,CAAkBiB,MAAlB,CACHZ,GAAG,GAAGL,OAAN,CAAckB,YAAd,CAA2BP,UAA3B,EAAuC,MAAvC,CADG,CAEH,EAJA,CAAN;AAMD,KAPD,MAOO;AACL,YAAMI,KAAN;AACD;AACF;;AAED,MAAIJ,UAAU,CAACE,QAAX,CAAoBN,UAAU,CAACY,YAA/B,CAAJ,EAAkD;AAChD;AACA;AACAL,IAAAA,YAAY,GAAGA,YAAY,CAACM,IAAb,IAAqB,EAApC;AACD;;AAED,MAAIN,YAAY,CAACO,OAAjB,EAA0B;AACxB;AACA,QAAI,CAACpB,KAAK,GAAGD,OAAR,CAAgBsB,UAAhB,CAA2BR,YAAY,CAACO,OAAxC,CAAL,EAAuD;AACrD;AACAP,MAAAA,YAAY,CAACO,OAAb,GAAuBpB,KAAK,GAAGD,OAAR,CAAgBuB,OAAhB,CACrBtB,KAAK,GAAGD,OAAR,CAAgBwB,OAAhB,CAAwBb,UAAxB,CADqB,EAErBG,YAAY,CAACO,OAFQ,CAAvB;AAID;AACF,GATD,MASO;AACL;AACAP,IAAAA,YAAY,CAACO,OAAb,GAAuBpB,KAAK,GAAGD,OAAR,CAAgBwB,OAAhB,CAAwBb,UAAxB,CAAvB;AACD;;AAED,SAAOG,YAAP;AACD,CAxCD;;AA0CAhB,OAAO,CAACE,OAAR,GAAkBU,QAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  const data = _interopRequireDefault(require('fs'));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _jsonlint = _interopRequireDefault(require('./vendor/jsonlint'));\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @ts-ignore: vendored\n// Read the configuration and set its `rootDir`\n// 1. If it's a `package.json` file, we look into its \"jest\" property\n// 2. For any other file, we just require it.\nvar _default = configPath => {\n  const isJSON = configPath.endsWith('.json');\n  let configObject;\n\n  try {\n    configObject = require(configPath);\n  } catch (error) {\n    if (isJSON) {\n      throw new Error(\n        `Jest: Failed to parse config file ${configPath}\\n` +\n          `  ${_jsonlint.default.errors(\n            _fs().default.readFileSync(configPath, 'utf8')\n          )}`\n      );\n    } else {\n      throw error;\n    }\n  }\n\n  if (configPath.endsWith(_constants.PACKAGE_JSON)) {\n    // Event if there's no \"jest\" property in package.json we will still use\n    // an empty object.\n    configObject = configObject.jest || {};\n  }\n\n  if (configObject.rootDir) {\n    // We don't touch it if it has an absolute path specified\n    if (!_path().default.isAbsolute(configObject.rootDir)) {\n      // otherwise, we'll resolve it relative to the file's __dirname\n      configObject.rootDir = _path().default.resolve(\n        _path().default.dirname(configPath),\n        configObject.rootDir\n      );\n    }\n  } else {\n    // If rootDir is not there, we'll set it to this file's __dirname\n    configObject.rootDir = _path().default.dirname(configPath);\n  }\n\n  return configObject;\n};\n\nexports.default = _default;\n"]},"metadata":{},"sourceType":"script"}