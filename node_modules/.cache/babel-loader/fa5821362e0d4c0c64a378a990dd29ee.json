{"ast":null,"code":"var lexer = require('css-tree').lexer;\n\nvar packNumber = require('./Number').pack; // http://www.w3.org/TR/css3-color/#svg-color\n\n\nvar NAME_TO_HEX = {\n  'aliceblue': 'f0f8ff',\n  'antiquewhite': 'faebd7',\n  'aqua': '0ff',\n  'aquamarine': '7fffd4',\n  'azure': 'f0ffff',\n  'beige': 'f5f5dc',\n  'bisque': 'ffe4c4',\n  'black': '000',\n  'blanchedalmond': 'ffebcd',\n  'blue': '00f',\n  'blueviolet': '8a2be2',\n  'brown': 'a52a2a',\n  'burlywood': 'deb887',\n  'cadetblue': '5f9ea0',\n  'chartreuse': '7fff00',\n  'chocolate': 'd2691e',\n  'coral': 'ff7f50',\n  'cornflowerblue': '6495ed',\n  'cornsilk': 'fff8dc',\n  'crimson': 'dc143c',\n  'cyan': '0ff',\n  'darkblue': '00008b',\n  'darkcyan': '008b8b',\n  'darkgoldenrod': 'b8860b',\n  'darkgray': 'a9a9a9',\n  'darkgrey': 'a9a9a9',\n  'darkgreen': '006400',\n  'darkkhaki': 'bdb76b',\n  'darkmagenta': '8b008b',\n  'darkolivegreen': '556b2f',\n  'darkorange': 'ff8c00',\n  'darkorchid': '9932cc',\n  'darkred': '8b0000',\n  'darksalmon': 'e9967a',\n  'darkseagreen': '8fbc8f',\n  'darkslateblue': '483d8b',\n  'darkslategray': '2f4f4f',\n  'darkslategrey': '2f4f4f',\n  'darkturquoise': '00ced1',\n  'darkviolet': '9400d3',\n  'deeppink': 'ff1493',\n  'deepskyblue': '00bfff',\n  'dimgray': '696969',\n  'dimgrey': '696969',\n  'dodgerblue': '1e90ff',\n  'firebrick': 'b22222',\n  'floralwhite': 'fffaf0',\n  'forestgreen': '228b22',\n  'fuchsia': 'f0f',\n  'gainsboro': 'dcdcdc',\n  'ghostwhite': 'f8f8ff',\n  'gold': 'ffd700',\n  'goldenrod': 'daa520',\n  'gray': '808080',\n  'grey': '808080',\n  'green': '008000',\n  'greenyellow': 'adff2f',\n  'honeydew': 'f0fff0',\n  'hotpink': 'ff69b4',\n  'indianred': 'cd5c5c',\n  'indigo': '4b0082',\n  'ivory': 'fffff0',\n  'khaki': 'f0e68c',\n  'lavender': 'e6e6fa',\n  'lavenderblush': 'fff0f5',\n  'lawngreen': '7cfc00',\n  'lemonchiffon': 'fffacd',\n  'lightblue': 'add8e6',\n  'lightcoral': 'f08080',\n  'lightcyan': 'e0ffff',\n  'lightgoldenrodyellow': 'fafad2',\n  'lightgray': 'd3d3d3',\n  'lightgrey': 'd3d3d3',\n  'lightgreen': '90ee90',\n  'lightpink': 'ffb6c1',\n  'lightsalmon': 'ffa07a',\n  'lightseagreen': '20b2aa',\n  'lightskyblue': '87cefa',\n  'lightslategray': '789',\n  'lightslategrey': '789',\n  'lightsteelblue': 'b0c4de',\n  'lightyellow': 'ffffe0',\n  'lime': '0f0',\n  'limegreen': '32cd32',\n  'linen': 'faf0e6',\n  'magenta': 'f0f',\n  'maroon': '800000',\n  'mediumaquamarine': '66cdaa',\n  'mediumblue': '0000cd',\n  'mediumorchid': 'ba55d3',\n  'mediumpurple': '9370db',\n  'mediumseagreen': '3cb371',\n  'mediumslateblue': '7b68ee',\n  'mediumspringgreen': '00fa9a',\n  'mediumturquoise': '48d1cc',\n  'mediumvioletred': 'c71585',\n  'midnightblue': '191970',\n  'mintcream': 'f5fffa',\n  'mistyrose': 'ffe4e1',\n  'moccasin': 'ffe4b5',\n  'navajowhite': 'ffdead',\n  'navy': '000080',\n  'oldlace': 'fdf5e6',\n  'olive': '808000',\n  'olivedrab': '6b8e23',\n  'orange': 'ffa500',\n  'orangered': 'ff4500',\n  'orchid': 'da70d6',\n  'palegoldenrod': 'eee8aa',\n  'palegreen': '98fb98',\n  'paleturquoise': 'afeeee',\n  'palevioletred': 'db7093',\n  'papayawhip': 'ffefd5',\n  'peachpuff': 'ffdab9',\n  'peru': 'cd853f',\n  'pink': 'ffc0cb',\n  'plum': 'dda0dd',\n  'powderblue': 'b0e0e6',\n  'purple': '800080',\n  'rebeccapurple': '639',\n  'red': 'f00',\n  'rosybrown': 'bc8f8f',\n  'royalblue': '4169e1',\n  'saddlebrown': '8b4513',\n  'salmon': 'fa8072',\n  'sandybrown': 'f4a460',\n  'seagreen': '2e8b57',\n  'seashell': 'fff5ee',\n  'sienna': 'a0522d',\n  'silver': 'c0c0c0',\n  'skyblue': '87ceeb',\n  'slateblue': '6a5acd',\n  'slategray': '708090',\n  'slategrey': '708090',\n  'snow': 'fffafa',\n  'springgreen': '00ff7f',\n  'steelblue': '4682b4',\n  'tan': 'd2b48c',\n  'teal': '008080',\n  'thistle': 'd8bfd8',\n  'tomato': 'ff6347',\n  'turquoise': '40e0d0',\n  'violet': 'ee82ee',\n  'wheat': 'f5deb3',\n  'white': 'fff',\n  'whitesmoke': 'f5f5f5',\n  'yellow': 'ff0',\n  'yellowgreen': '9acd32'\n};\nvar HEX_TO_NAME = {\n  '800000': 'maroon',\n  '800080': 'purple',\n  '808000': 'olive',\n  '808080': 'gray',\n  '00ffff': 'cyan',\n  'f0ffff': 'azure',\n  'f5f5dc': 'beige',\n  'ffe4c4': 'bisque',\n  '000000': 'black',\n  '0000ff': 'blue',\n  'a52a2a': 'brown',\n  'ff7f50': 'coral',\n  'ffd700': 'gold',\n  '008000': 'green',\n  '4b0082': 'indigo',\n  'fffff0': 'ivory',\n  'f0e68c': 'khaki',\n  '00ff00': 'lime',\n  'faf0e6': 'linen',\n  '000080': 'navy',\n  'ffa500': 'orange',\n  'da70d6': 'orchid',\n  'cd853f': 'peru',\n  'ffc0cb': 'pink',\n  'dda0dd': 'plum',\n  'f00': 'red',\n  'ff0000': 'red',\n  'fa8072': 'salmon',\n  'a0522d': 'sienna',\n  'c0c0c0': 'silver',\n  'fffafa': 'snow',\n  'd2b48c': 'tan',\n  '008080': 'teal',\n  'ff6347': 'tomato',\n  'ee82ee': 'violet',\n  'f5deb3': 'wheat',\n  'ffffff': 'white',\n  'ffff00': 'yellow'\n};\n\nfunction hueToRgb(p, q, t) {\n  if (t < 0) {\n    t += 1;\n  }\n\n  if (t > 1) {\n    t -= 1;\n  }\n\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n\n  if (t < 1 / 2) {\n    return q;\n  }\n\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n\n  return p;\n}\n\nfunction hslToRgb(h, s, l, a) {\n  var r;\n  var g;\n  var b;\n\n  if (s === 0) {\n    r = g = b = l; // achromatic\n  } else {\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hueToRgb(p, q, h + 1 / 3);\n    g = hueToRgb(p, q, h);\n    b = hueToRgb(p, q, h - 1 / 3);\n  }\n\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a];\n}\n\nfunction toHex(value) {\n  value = value.toString(16);\n  return value.length === 1 ? '0' + value : value;\n}\n\nfunction parseFunctionArgs(functionArgs, count, rgb) {\n  var cursor = functionArgs.head;\n  var args = [];\n  var wasValue = false;\n\n  while (cursor !== null) {\n    var node = cursor.data;\n    var type = node.type;\n\n    switch (type) {\n      case 'Number':\n      case 'Percentage':\n        if (wasValue) {\n          return;\n        }\n\n        wasValue = true;\n        args.push({\n          type: type,\n          value: Number(node.value)\n        });\n        break;\n\n      case 'Operator':\n        if (node.value === ',') {\n          if (!wasValue) {\n            return;\n          }\n\n          wasValue = false;\n        } else if (wasValue || node.value !== '+') {\n          return;\n        }\n\n        break;\n\n      default:\n        // something we couldn't understand\n        return;\n    }\n\n    cursor = cursor.next;\n  }\n\n  if (args.length !== count) {\n    // invalid arguments count\n    // TODO: remove those tokens\n    return;\n  }\n\n  if (args.length === 4) {\n    if (args[3].type !== 'Number') {\n      // 4th argument should be a number\n      // TODO: remove those tokens\n      return;\n    }\n\n    args[3].type = 'Alpha';\n  }\n\n  if (rgb) {\n    if (args[0].type !== args[1].type || args[0].type !== args[2].type) {\n      // invalid color, numbers and percentage shouldn't be mixed\n      // TODO: remove those tokens\n      return;\n    }\n  } else {\n    if (args[0].type !== 'Number' || args[1].type !== 'Percentage' || args[2].type !== 'Percentage') {\n      // invalid color, for hsl values should be: number, percentage, percentage\n      // TODO: remove those tokens\n      return;\n    }\n\n    args[0].type = 'Angle';\n  }\n\n  return args.map(function (arg) {\n    var value = Math.max(0, arg.value);\n\n    switch (arg.type) {\n      case 'Number':\n        // fit value to [0..255] range\n        value = Math.min(value, 255);\n        break;\n\n      case 'Percentage':\n        // convert 0..100% to value in [0..255] range\n        value = Math.min(value, 100) / 100;\n\n        if (!rgb) {\n          return value;\n        }\n\n        value = 255 * value;\n        break;\n\n      case 'Angle':\n        // fit value to (-360..360) range\n        return (value % 360 + 360) % 360 / 360;\n\n      case 'Alpha':\n        // fit value to [0..1] range\n        return Math.min(value, 1);\n    }\n\n    return Math.round(value);\n  });\n}\n\nfunction compressFunction(node, item, list) {\n  var functionName = node.name;\n  var args;\n\n  if (functionName === 'rgba' || functionName === 'hsla') {\n    args = parseFunctionArgs(node.children, 4, functionName === 'rgba');\n\n    if (!args) {\n      // something went wrong\n      return;\n    }\n\n    if (functionName === 'hsla') {\n      args = hslToRgb.apply(null, args);\n      node.name = 'rgba';\n    }\n\n    if (args[3] === 0) {\n      // try to replace `rgba(x, x, x, 0)` to `transparent`\n      // always replace `rgba(0, 0, 0, 0)` to `transparent`\n      // otherwise avoid replacement in gradients since it may break color transition\n      // http://stackoverflow.com/questions/11829410/css3-gradient-rendering-issues-from-transparent-to-white\n      var scopeFunctionName = this.function && this.function.name;\n\n      if (args[0] === 0 && args[1] === 0 && args[2] === 0 || !/^(?:to|from|color-stop)$|gradient$/i.test(scopeFunctionName)) {\n        item.data = {\n          type: 'Identifier',\n          loc: node.loc,\n          name: 'transparent'\n        };\n        return;\n      }\n    }\n\n    if (args[3] !== 1) {\n      // replace argument values for normalized/interpolated\n      node.children.each(function (node, item, list) {\n        if (node.type === 'Operator') {\n          if (node.value !== ',') {\n            list.remove(item);\n          }\n\n          return;\n        }\n\n        item.data = {\n          type: 'Number',\n          loc: node.loc,\n          value: packNumber(args.shift(), null)\n        };\n      });\n      return;\n    } // otherwise convert to rgb, i.e. rgba(255, 0, 0, 1) -> rgb(255, 0, 0)\n\n\n    functionName = 'rgb';\n  }\n\n  if (functionName === 'hsl') {\n    args = args || parseFunctionArgs(node.children, 3, false);\n\n    if (!args) {\n      // something went wrong\n      return;\n    } // convert to rgb\n\n\n    args = hslToRgb.apply(null, args);\n    functionName = 'rgb';\n  }\n\n  if (functionName === 'rgb') {\n    args = args || parseFunctionArgs(node.children, 3, true);\n\n    if (!args) {\n      // something went wrong\n      return;\n    } // check if color is not at the end and not followed by space\n\n\n    var next = item.next;\n\n    if (next && next.data.type !== 'WhiteSpace') {\n      list.insert(list.createItem({\n        type: 'WhiteSpace',\n        value: ' '\n      }), next);\n    }\n\n    item.data = {\n      type: 'HexColor',\n      loc: node.loc,\n      value: toHex(args[0]) + toHex(args[1]) + toHex(args[2])\n    };\n    compressHex(item.data, item);\n  }\n}\n\nfunction compressIdent(node, item) {\n  if (this.declaration === null) {\n    return;\n  }\n\n  var color = node.name.toLowerCase();\n\n  if (NAME_TO_HEX.hasOwnProperty(color) && lexer.matchDeclaration(this.declaration).isType(node, 'color')) {\n    var hex = NAME_TO_HEX[color];\n\n    if (hex.length + 1 <= color.length) {\n      // replace for shorter hex value\n      item.data = {\n        type: 'HexColor',\n        loc: node.loc,\n        value: hex\n      };\n    } else {\n      // special case for consistent colors\n      if (color === 'grey') {\n        color = 'gray';\n      } // just replace value for lower cased name\n\n\n      node.name = color;\n    }\n  }\n}\n\nfunction compressHex(node, item) {\n  var color = node.value.toLowerCase(); // #112233 -> #123\n\n  if (color.length === 6 && color[0] === color[1] && color[2] === color[3] && color[4] === color[5]) {\n    color = color[0] + color[2] + color[4];\n  }\n\n  if (HEX_TO_NAME[color]) {\n    item.data = {\n      type: 'Identifier',\n      loc: node.loc,\n      name: HEX_TO_NAME[color]\n    };\n  } else {\n    node.value = color;\n  }\n}\n\nmodule.exports = {\n  compressFunction: compressFunction,\n  compressIdent: compressIdent,\n  compressHex: compressHex\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/csso/lib/replace/color.js"],"names":["lexer","require","packNumber","pack","NAME_TO_HEX","HEX_TO_NAME","hueToRgb","p","q","t","hslToRgb","h","s","l","a","r","g","b","Math","round","toHex","value","toString","length","parseFunctionArgs","functionArgs","count","rgb","cursor","head","args","wasValue","node","data","type","push","Number","next","map","arg","max","min","compressFunction","item","list","functionName","name","children","apply","scopeFunctionName","function","test","loc","each","remove","shift","insert","createItem","compressHex","compressIdent","declaration","color","toLowerCase","hasOwnProperty","matchDeclaration","isType","hex","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoBD,KAAhC;;AACA,IAAIE,UAAU,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBE,IAArC,C,CAEA;;;AACA,IAAIC,WAAW,GAAG;AACd,eAAa,QADC;AAEd,kBAAgB,QAFF;AAGd,UAAQ,KAHM;AAId,gBAAc,QAJA;AAKd,WAAS,QALK;AAMd,WAAS,QANK;AAOd,YAAU,QAPI;AAQd,WAAS,KARK;AASd,oBAAkB,QATJ;AAUd,UAAQ,KAVM;AAWd,gBAAc,QAXA;AAYd,WAAS,QAZK;AAad,eAAa,QAbC;AAcd,eAAa,QAdC;AAed,gBAAc,QAfA;AAgBd,eAAa,QAhBC;AAiBd,WAAS,QAjBK;AAkBd,oBAAkB,QAlBJ;AAmBd,cAAY,QAnBE;AAoBd,aAAW,QApBG;AAqBd,UAAQ,KArBM;AAsBd,cAAY,QAtBE;AAuBd,cAAY,QAvBE;AAwBd,mBAAiB,QAxBH;AAyBd,cAAY,QAzBE;AA0Bd,cAAY,QA1BE;AA2Bd,eAAa,QA3BC;AA4Bd,eAAa,QA5BC;AA6Bd,iBAAe,QA7BD;AA8Bd,oBAAkB,QA9BJ;AA+Bd,gBAAc,QA/BA;AAgCd,gBAAc,QAhCA;AAiCd,aAAW,QAjCG;AAkCd,gBAAc,QAlCA;AAmCd,kBAAgB,QAnCF;AAoCd,mBAAiB,QApCH;AAqCd,mBAAiB,QArCH;AAsCd,mBAAiB,QAtCH;AAuCd,mBAAiB,QAvCH;AAwCd,gBAAc,QAxCA;AAyCd,cAAY,QAzCE;AA0Cd,iBAAe,QA1CD;AA2Cd,aAAW,QA3CG;AA4Cd,aAAW,QA5CG;AA6Cd,gBAAc,QA7CA;AA8Cd,eAAa,QA9CC;AA+Cd,iBAAe,QA/CD;AAgDd,iBAAe,QAhDD;AAiDd,aAAW,KAjDG;AAkDd,eAAa,QAlDC;AAmDd,gBAAc,QAnDA;AAoDd,UAAQ,QApDM;AAqDd,eAAa,QArDC;AAsDd,UAAQ,QAtDM;AAuDd,UAAQ,QAvDM;AAwDd,WAAS,QAxDK;AAyDd,iBAAe,QAzDD;AA0Dd,cAAY,QA1DE;AA2Dd,aAAW,QA3DG;AA4Dd,eAAa,QA5DC;AA6Dd,YAAU,QA7DI;AA8Dd,WAAS,QA9DK;AA+Dd,WAAS,QA/DK;AAgEd,cAAY,QAhEE;AAiEd,mBAAiB,QAjEH;AAkEd,eAAa,QAlEC;AAmEd,kBAAgB,QAnEF;AAoEd,eAAa,QApEC;AAqEd,gBAAc,QArEA;AAsEd,eAAa,QAtEC;AAuEd,0BAAwB,QAvEV;AAwEd,eAAa,QAxEC;AAyEd,eAAa,QAzEC;AA0Ed,gBAAc,QA1EA;AA2Ed,eAAa,QA3EC;AA4Ed,iBAAe,QA5ED;AA6Ed,mBAAiB,QA7EH;AA8Ed,kBAAgB,QA9EF;AA+Ed,oBAAkB,KA/EJ;AAgFd,oBAAkB,KAhFJ;AAiFd,oBAAkB,QAjFJ;AAkFd,iBAAe,QAlFD;AAmFd,UAAQ,KAnFM;AAoFd,eAAa,QApFC;AAqFd,WAAS,QArFK;AAsFd,aAAW,KAtFG;AAuFd,YAAU,QAvFI;AAwFd,sBAAoB,QAxFN;AAyFd,gBAAc,QAzFA;AA0Fd,kBAAgB,QA1FF;AA2Fd,kBAAgB,QA3FF;AA4Fd,oBAAkB,QA5FJ;AA6Fd,qBAAmB,QA7FL;AA8Fd,uBAAqB,QA9FP;AA+Fd,qBAAmB,QA/FL;AAgGd,qBAAmB,QAhGL;AAiGd,kBAAgB,QAjGF;AAkGd,eAAa,QAlGC;AAmGd,eAAa,QAnGC;AAoGd,cAAY,QApGE;AAqGd,iBAAe,QArGD;AAsGd,UAAQ,QAtGM;AAuGd,aAAW,QAvGG;AAwGd,WAAS,QAxGK;AAyGd,eAAa,QAzGC;AA0Gd,YAAU,QA1GI;AA2Gd,eAAa,QA3GC;AA4Gd,YAAU,QA5GI;AA6Gd,mBAAiB,QA7GH;AA8Gd,eAAa,QA9GC;AA+Gd,mBAAiB,QA/GH;AAgHd,mBAAiB,QAhHH;AAiHd,gBAAc,QAjHA;AAkHd,eAAa,QAlHC;AAmHd,UAAQ,QAnHM;AAoHd,UAAQ,QApHM;AAqHd,UAAQ,QArHM;AAsHd,gBAAc,QAtHA;AAuHd,YAAU,QAvHI;AAwHd,mBAAiB,KAxHH;AAyHd,SAAO,KAzHO;AA0Hd,eAAa,QA1HC;AA2Hd,eAAa,QA3HC;AA4Hd,iBAAe,QA5HD;AA6Hd,YAAU,QA7HI;AA8Hd,gBAAc,QA9HA;AA+Hd,cAAY,QA/HE;AAgId,cAAY,QAhIE;AAiId,YAAU,QAjII;AAkId,YAAU,QAlII;AAmId,aAAW,QAnIG;AAoId,eAAa,QApIC;AAqId,eAAa,QArIC;AAsId,eAAa,QAtIC;AAuId,UAAQ,QAvIM;AAwId,iBAAe,QAxID;AAyId,eAAa,QAzIC;AA0Id,SAAO,QA1IO;AA2Id,UAAQ,QA3IM;AA4Id,aAAW,QA5IG;AA6Id,YAAU,QA7II;AA8Id,eAAa,QA9IC;AA+Id,YAAU,QA/II;AAgJd,WAAS,QAhJK;AAiJd,WAAS,KAjJK;AAkJd,gBAAc,QAlJA;AAmJd,YAAU,KAnJI;AAoJd,iBAAe;AApJD,CAAlB;AAuJA,IAAIC,WAAW,GAAG;AACd,YAAU,QADI;AAEd,YAAU,QAFI;AAGd,YAAU,OAHI;AAId,YAAU,MAJI;AAKd,YAAU,MALI;AAMd,YAAU,OANI;AAOd,YAAU,OAPI;AAQd,YAAU,QARI;AASd,YAAU,OATI;AAUd,YAAU,MAVI;AAWd,YAAU,OAXI;AAYd,YAAU,OAZI;AAad,YAAU,MAbI;AAcd,YAAU,OAdI;AAed,YAAU,QAfI;AAgBd,YAAU,OAhBI;AAiBd,YAAU,OAjBI;AAkBd,YAAU,MAlBI;AAmBd,YAAU,OAnBI;AAoBd,YAAU,MApBI;AAqBd,YAAU,QArBI;AAsBd,YAAU,QAtBI;AAuBd,YAAU,MAvBI;AAwBd,YAAU,MAxBI;AAyBd,YAAU,MAzBI;AA0Bd,SAAO,KA1BO;AA2Bd,YAAU,KA3BI;AA4Bd,YAAU,QA5BI;AA6Bd,YAAU,QA7BI;AA8Bd,YAAU,QA9BI;AA+Bd,YAAU,MA/BI;AAgCd,YAAU,KAhCI;AAiCd,YAAU,MAjCI;AAkCd,YAAU,QAlCI;AAmCd,YAAU,QAnCI;AAoCd,YAAU,OApCI;AAqCd,YAAU,OArCI;AAsCd,YAAU;AAtCI,CAAlB;;AAyCA,SAASC,QAAT,CAAkBC,CAAlB,EAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;AACvB,MAAIA,CAAC,GAAG,CAAR,EAAW;AACPA,IAAAA,CAAC,IAAI,CAAL;AACH;;AACD,MAAIA,CAAC,GAAG,CAAR,EAAW;AACPA,IAAAA,CAAC,IAAI,CAAL;AACH;;AACD,MAAIA,CAAC,GAAG,IAAI,CAAZ,EAAe;AACX,WAAOF,CAAC,GAAG,CAACC,CAAC,GAAGD,CAAL,IAAU,CAAV,GAAcE,CAAzB;AACH;;AACD,MAAIA,CAAC,GAAG,IAAI,CAAZ,EAAe;AACX,WAAOD,CAAP;AACH;;AACD,MAAIC,CAAC,GAAG,IAAI,CAAZ,EAAe;AACX,WAAOF,CAAC,GAAG,CAACC,CAAC,GAAGD,CAAL,KAAW,IAAI,CAAJ,GAAQE,CAAnB,IAAwB,CAAnC;AACH;;AACD,SAAOF,CAAP;AACH;;AAED,SAASG,QAAT,CAAkBC,CAAlB,EAAqBC,CAArB,EAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;AAC1B,MAAIC,CAAJ;AACA,MAAIC,CAAJ;AACA,MAAIC,CAAJ;;AAEA,MAAIL,CAAC,KAAK,CAAV,EAAa;AACTG,IAAAA,CAAC,GAAGC,CAAC,GAAGC,CAAC,GAAGJ,CAAZ,CADS,CACM;AAClB,GAFD,MAEO;AACH,QAAIL,CAAC,GAAGK,CAAC,GAAG,GAAJ,GAAUA,CAAC,IAAI,IAAID,CAAR,CAAX,GAAwBC,CAAC,GAAGD,CAAJ,GAAQC,CAAC,GAAGD,CAA5C;AACA,QAAIL,CAAC,GAAG,IAAIM,CAAJ,GAAQL,CAAhB;AAEAO,IAAAA,CAAC,GAAGT,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAOG,CAAC,GAAG,IAAI,CAAf,CAAZ;AACAK,IAAAA,CAAC,GAAGV,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAOG,CAAP,CAAZ;AACAM,IAAAA,CAAC,GAAGX,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAOG,CAAC,GAAG,IAAI,CAAf,CAAZ;AACH;;AAED,SAAO,CACHO,IAAI,CAACC,KAAL,CAAWJ,CAAC,GAAG,GAAf,CADG,EAEHG,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAG,GAAf,CAFG,EAGHE,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG,GAAf,CAHG,EAIHH,CAJG,CAAP;AAMH;;AAED,SAASM,KAAT,CAAeC,KAAf,EAAsB;AAClBA,EAAAA,KAAK,GAAGA,KAAK,CAACC,QAAN,CAAe,EAAf,CAAR;AACA,SAAOD,KAAK,CAACE,MAAN,KAAiB,CAAjB,GAAqB,MAAMF,KAA3B,GAAmCA,KAA1C;AACH;;AAED,SAASG,iBAAT,CAA2BC,YAA3B,EAAyCC,KAAzC,EAAgDC,GAAhD,EAAqD;AACjD,MAAIC,MAAM,GAAGH,YAAY,CAACI,IAA1B;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,QAAQ,GAAG,KAAf;;AAEA,SAAOH,MAAM,KAAK,IAAlB,EAAwB;AACpB,QAAII,IAAI,GAAGJ,MAAM,CAACK,IAAlB;AACA,QAAIC,IAAI,GAAGF,IAAI,CAACE,IAAhB;;AAEA,YAAQA,IAAR;AACI,WAAK,QAAL;AACA,WAAK,YAAL;AACI,YAAIH,QAAJ,EAAc;AACV;AACH;;AAEDA,QAAAA,QAAQ,GAAG,IAAX;AACAD,QAAAA,IAAI,CAACK,IAAL,CAAU;AACND,UAAAA,IAAI,EAAEA,IADA;AAENb,UAAAA,KAAK,EAAEe,MAAM,CAACJ,IAAI,CAACX,KAAN;AAFP,SAAV;AAIA;;AAEJ,WAAK,UAAL;AACI,YAAIW,IAAI,CAACX,KAAL,KAAe,GAAnB,EAAwB;AACpB,cAAI,CAACU,QAAL,EAAe;AACX;AACH;;AACDA,UAAAA,QAAQ,GAAG,KAAX;AACH,SALD,MAKO,IAAIA,QAAQ,IAAIC,IAAI,CAACX,KAAL,KAAe,GAA/B,EAAoC;AACvC;AACH;;AACD;;AAEJ;AACI;AACA;AA3BR;;AA8BAO,IAAAA,MAAM,GAAGA,MAAM,CAACS,IAAhB;AACH;;AAED,MAAIP,IAAI,CAACP,MAAL,KAAgBG,KAApB,EAA2B;AACvB;AACA;AACA;AACH;;AAED,MAAII,IAAI,CAACP,MAAL,KAAgB,CAApB,EAAuB;AACnB,QAAIO,IAAI,CAAC,CAAD,CAAJ,CAAQI,IAAR,KAAiB,QAArB,EAA+B;AAC3B;AACA;AACA;AACH;;AAEDJ,IAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQI,IAAR,GAAe,OAAf;AACH;;AAED,MAAIP,GAAJ,EAAS;AACL,QAAIG,IAAI,CAAC,CAAD,CAAJ,CAAQI,IAAR,KAAiBJ,IAAI,CAAC,CAAD,CAAJ,CAAQI,IAAzB,IAAiCJ,IAAI,CAAC,CAAD,CAAJ,CAAQI,IAAR,KAAiBJ,IAAI,CAAC,CAAD,CAAJ,CAAQI,IAA9D,EAAoE;AAChE;AACA;AACA;AACH;AACJ,GAND,MAMO;AACH,QAAIJ,IAAI,CAAC,CAAD,CAAJ,CAAQI,IAAR,KAAiB,QAAjB,IACAJ,IAAI,CAAC,CAAD,CAAJ,CAAQI,IAAR,KAAiB,YADjB,IAEAJ,IAAI,CAAC,CAAD,CAAJ,CAAQI,IAAR,KAAiB,YAFrB,EAEmC;AAC/B;AACA;AACA;AACH;;AAEDJ,IAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQI,IAAR,GAAe,OAAf;AACH;;AAED,SAAOJ,IAAI,CAACQ,GAAL,CAAS,UAASC,GAAT,EAAc;AAC1B,QAAIlB,KAAK,GAAGH,IAAI,CAACsB,GAAL,CAAS,CAAT,EAAYD,GAAG,CAAClB,KAAhB,CAAZ;;AAEA,YAAQkB,GAAG,CAACL,IAAZ;AACI,WAAK,QAAL;AACI;AACAb,QAAAA,KAAK,GAAGH,IAAI,CAACuB,GAAL,CAASpB,KAAT,EAAgB,GAAhB,CAAR;AACA;;AAEJ,WAAK,YAAL;AACI;AACAA,QAAAA,KAAK,GAAGH,IAAI,CAACuB,GAAL,CAASpB,KAAT,EAAgB,GAAhB,IAAuB,GAA/B;;AAEA,YAAI,CAACM,GAAL,EAAU;AACN,iBAAON,KAAP;AACH;;AAEDA,QAAAA,KAAK,GAAG,MAAMA,KAAd;AACA;;AAEJ,WAAK,OAAL;AACI;AACA,eAAQ,CAAEA,KAAK,GAAG,GAAT,GAAgB,GAAjB,IAAwB,GAAzB,GAAgC,GAAvC;;AAEJ,WAAK,OAAL;AACI;AACA,eAAOH,IAAI,CAACuB,GAAL,CAASpB,KAAT,EAAgB,CAAhB,CAAP;AAvBR;;AA0BA,WAAOH,IAAI,CAACC,KAAL,CAAWE,KAAX,CAAP;AACH,GA9BM,CAAP;AA+BH;;AAED,SAASqB,gBAAT,CAA0BV,IAA1B,EAAgCW,IAAhC,EAAsCC,IAAtC,EAA4C;AACxC,MAAIC,YAAY,GAAGb,IAAI,CAACc,IAAxB;AACA,MAAIhB,IAAJ;;AAEA,MAAIe,YAAY,KAAK,MAAjB,IAA2BA,YAAY,KAAK,MAAhD,EAAwD;AACpDf,IAAAA,IAAI,GAAGN,iBAAiB,CAACQ,IAAI,CAACe,QAAN,EAAgB,CAAhB,EAAmBF,YAAY,KAAK,MAApC,CAAxB;;AAEA,QAAI,CAACf,IAAL,EAAW;AACP;AACA;AACH;;AAED,QAAIe,YAAY,KAAK,MAArB,EAA6B;AACzBf,MAAAA,IAAI,GAAGpB,QAAQ,CAACsC,KAAT,CAAe,IAAf,EAAqBlB,IAArB,CAAP;AACAE,MAAAA,IAAI,CAACc,IAAL,GAAY,MAAZ;AACH;;AAED,QAAIhB,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAhB,EAAmB;AACf;AACA;AACA;AACA;AACA,UAAImB,iBAAiB,GAAG,KAAKC,QAAL,IAAiB,KAAKA,QAAL,CAAcJ,IAAvD;;AACA,UAAKhB,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAZ,IAAiBA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAA7B,IAAkCA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAA/C,IACA,CAAC,sCAAsCqB,IAAtC,CAA2CF,iBAA3C,CADL,EACoE;AAEhEN,QAAAA,IAAI,CAACV,IAAL,GAAY;AACRC,UAAAA,IAAI,EAAE,YADE;AAERkB,UAAAA,GAAG,EAAEpB,IAAI,CAACoB,GAFF;AAGRN,UAAAA,IAAI,EAAE;AAHE,SAAZ;AAMA;AACH;AACJ;;AAED,QAAIhB,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAhB,EAAmB;AACf;AACAE,MAAAA,IAAI,CAACe,QAAL,CAAcM,IAAd,CAAmB,UAASrB,IAAT,EAAeW,IAAf,EAAqBC,IAArB,EAA2B;AAC1C,YAAIZ,IAAI,CAACE,IAAL,KAAc,UAAlB,EAA8B;AAC1B,cAAIF,IAAI,CAACX,KAAL,KAAe,GAAnB,EAAwB;AACpBuB,YAAAA,IAAI,CAACU,MAAL,CAAYX,IAAZ;AACH;;AACD;AACH;;AAEDA,QAAAA,IAAI,CAACV,IAAL,GAAY;AACRC,UAAAA,IAAI,EAAE,QADE;AAERkB,UAAAA,GAAG,EAAEpB,IAAI,CAACoB,GAFF;AAGR/B,UAAAA,KAAK,EAAEnB,UAAU,CAAC4B,IAAI,CAACyB,KAAL,EAAD,EAAe,IAAf;AAHT,SAAZ;AAKH,OAbD;AAeA;AACH,KAlDmD,CAoDpD;;;AACAV,IAAAA,YAAY,GAAG,KAAf;AACH;;AAED,MAAIA,YAAY,KAAK,KAArB,EAA4B;AACxBf,IAAAA,IAAI,GAAGA,IAAI,IAAIN,iBAAiB,CAACQ,IAAI,CAACe,QAAN,EAAgB,CAAhB,EAAmB,KAAnB,CAAhC;;AAEA,QAAI,CAACjB,IAAL,EAAW;AACP;AACA;AACH,KANuB,CAQxB;;;AACAA,IAAAA,IAAI,GAAGpB,QAAQ,CAACsC,KAAT,CAAe,IAAf,EAAqBlB,IAArB,CAAP;AACAe,IAAAA,YAAY,GAAG,KAAf;AACH;;AAED,MAAIA,YAAY,KAAK,KAArB,EAA4B;AACxBf,IAAAA,IAAI,GAAGA,IAAI,IAAIN,iBAAiB,CAACQ,IAAI,CAACe,QAAN,EAAgB,CAAhB,EAAmB,IAAnB,CAAhC;;AAEA,QAAI,CAACjB,IAAL,EAAW;AACP;AACA;AACH,KANuB,CAQxB;;;AACA,QAAIO,IAAI,GAAGM,IAAI,CAACN,IAAhB;;AACA,QAAIA,IAAI,IAAIA,IAAI,CAACJ,IAAL,CAAUC,IAAV,KAAmB,YAA/B,EAA6C;AACzCU,MAAAA,IAAI,CAACY,MAAL,CAAYZ,IAAI,CAACa,UAAL,CAAgB;AACxBvB,QAAAA,IAAI,EAAE,YADkB;AAExBb,QAAAA,KAAK,EAAE;AAFiB,OAAhB,CAAZ,EAGIgB,IAHJ;AAIH;;AAEDM,IAAAA,IAAI,CAACV,IAAL,GAAY;AACRC,MAAAA,IAAI,EAAE,UADE;AAERkB,MAAAA,GAAG,EAAEpB,IAAI,CAACoB,GAFF;AAGR/B,MAAAA,KAAK,EAAED,KAAK,CAACU,IAAI,CAAC,CAAD,CAAL,CAAL,GAAiBV,KAAK,CAACU,IAAI,CAAC,CAAD,CAAL,CAAtB,GAAkCV,KAAK,CAACU,IAAI,CAAC,CAAD,CAAL;AAHtC,KAAZ;AAMA4B,IAAAA,WAAW,CAACf,IAAI,CAACV,IAAN,EAAYU,IAAZ,CAAX;AACH;AACJ;;AAED,SAASgB,aAAT,CAAuB3B,IAAvB,EAA6BW,IAA7B,EAAmC;AAC/B,MAAI,KAAKiB,WAAL,KAAqB,IAAzB,EAA+B;AAC3B;AACH;;AAED,MAAIC,KAAK,GAAG7B,IAAI,CAACc,IAAL,CAAUgB,WAAV,EAAZ;;AAEA,MAAI1D,WAAW,CAAC2D,cAAZ,CAA2BF,KAA3B,KACA7D,KAAK,CAACgE,gBAAN,CAAuB,KAAKJ,WAA5B,EAAyCK,MAAzC,CAAgDjC,IAAhD,EAAsD,OAAtD,CADJ,EACoE;AAChE,QAAIkC,GAAG,GAAG9D,WAAW,CAACyD,KAAD,CAArB;;AAEA,QAAIK,GAAG,CAAC3C,MAAJ,GAAa,CAAb,IAAkBsC,KAAK,CAACtC,MAA5B,EAAoC;AAChC;AACAoB,MAAAA,IAAI,CAACV,IAAL,GAAY;AACRC,QAAAA,IAAI,EAAE,UADE;AAERkB,QAAAA,GAAG,EAAEpB,IAAI,CAACoB,GAFF;AAGR/B,QAAAA,KAAK,EAAE6C;AAHC,OAAZ;AAKH,KAPD,MAOO;AACH;AACA,UAAIL,KAAK,KAAK,MAAd,EAAsB;AAClBA,QAAAA,KAAK,GAAG,MAAR;AACH,OAJE,CAMH;;;AACA7B,MAAAA,IAAI,CAACc,IAAL,GAAYe,KAAZ;AACH;AACJ;AACJ;;AAED,SAASH,WAAT,CAAqB1B,IAArB,EAA2BW,IAA3B,EAAiC;AAC7B,MAAIkB,KAAK,GAAG7B,IAAI,CAACX,KAAL,CAAWyC,WAAX,EAAZ,CAD6B,CAG7B;;AACA,MAAID,KAAK,CAACtC,MAAN,KAAiB,CAAjB,IACAsC,KAAK,CAAC,CAAD,CAAL,KAAaA,KAAK,CAAC,CAAD,CADlB,IAEAA,KAAK,CAAC,CAAD,CAAL,KAAaA,KAAK,CAAC,CAAD,CAFlB,IAGAA,KAAK,CAAC,CAAD,CAAL,KAAaA,KAAK,CAAC,CAAD,CAHtB,EAG2B;AACvBA,IAAAA,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAhB,GAAsBA,KAAK,CAAC,CAAD,CAAnC;AACH;;AAED,MAAIxD,WAAW,CAACwD,KAAD,CAAf,EAAwB;AACpBlB,IAAAA,IAAI,CAACV,IAAL,GAAY;AACRC,MAAAA,IAAI,EAAE,YADE;AAERkB,MAAAA,GAAG,EAAEpB,IAAI,CAACoB,GAFF;AAGRN,MAAAA,IAAI,EAAEzC,WAAW,CAACwD,KAAD;AAHT,KAAZ;AAKH,GAND,MAMO;AACH7B,IAAAA,IAAI,CAACX,KAAL,GAAawC,KAAb;AACH;AACJ;;AAEDM,MAAM,CAACC,OAAP,GAAiB;AACb1B,EAAAA,gBAAgB,EAAEA,gBADL;AAEbiB,EAAAA,aAAa,EAAEA,aAFF;AAGbD,EAAAA,WAAW,EAAEA;AAHA,CAAjB","sourcesContent":["var lexer = require('css-tree').lexer;\nvar packNumber = require('./Number').pack;\n\n// http://www.w3.org/TR/css3-color/#svg-color\nvar NAME_TO_HEX = {\n    'aliceblue': 'f0f8ff',\n    'antiquewhite': 'faebd7',\n    'aqua': '0ff',\n    'aquamarine': '7fffd4',\n    'azure': 'f0ffff',\n    'beige': 'f5f5dc',\n    'bisque': 'ffe4c4',\n    'black': '000',\n    'blanchedalmond': 'ffebcd',\n    'blue': '00f',\n    'blueviolet': '8a2be2',\n    'brown': 'a52a2a',\n    'burlywood': 'deb887',\n    'cadetblue': '5f9ea0',\n    'chartreuse': '7fff00',\n    'chocolate': 'd2691e',\n    'coral': 'ff7f50',\n    'cornflowerblue': '6495ed',\n    'cornsilk': 'fff8dc',\n    'crimson': 'dc143c',\n    'cyan': '0ff',\n    'darkblue': '00008b',\n    'darkcyan': '008b8b',\n    'darkgoldenrod': 'b8860b',\n    'darkgray': 'a9a9a9',\n    'darkgrey': 'a9a9a9',\n    'darkgreen': '006400',\n    'darkkhaki': 'bdb76b',\n    'darkmagenta': '8b008b',\n    'darkolivegreen': '556b2f',\n    'darkorange': 'ff8c00',\n    'darkorchid': '9932cc',\n    'darkred': '8b0000',\n    'darksalmon': 'e9967a',\n    'darkseagreen': '8fbc8f',\n    'darkslateblue': '483d8b',\n    'darkslategray': '2f4f4f',\n    'darkslategrey': '2f4f4f',\n    'darkturquoise': '00ced1',\n    'darkviolet': '9400d3',\n    'deeppink': 'ff1493',\n    'deepskyblue': '00bfff',\n    'dimgray': '696969',\n    'dimgrey': '696969',\n    'dodgerblue': '1e90ff',\n    'firebrick': 'b22222',\n    'floralwhite': 'fffaf0',\n    'forestgreen': '228b22',\n    'fuchsia': 'f0f',\n    'gainsboro': 'dcdcdc',\n    'ghostwhite': 'f8f8ff',\n    'gold': 'ffd700',\n    'goldenrod': 'daa520',\n    'gray': '808080',\n    'grey': '808080',\n    'green': '008000',\n    'greenyellow': 'adff2f',\n    'honeydew': 'f0fff0',\n    'hotpink': 'ff69b4',\n    'indianred': 'cd5c5c',\n    'indigo': '4b0082',\n    'ivory': 'fffff0',\n    'khaki': 'f0e68c',\n    'lavender': 'e6e6fa',\n    'lavenderblush': 'fff0f5',\n    'lawngreen': '7cfc00',\n    'lemonchiffon': 'fffacd',\n    'lightblue': 'add8e6',\n    'lightcoral': 'f08080',\n    'lightcyan': 'e0ffff',\n    'lightgoldenrodyellow': 'fafad2',\n    'lightgray': 'd3d3d3',\n    'lightgrey': 'd3d3d3',\n    'lightgreen': '90ee90',\n    'lightpink': 'ffb6c1',\n    'lightsalmon': 'ffa07a',\n    'lightseagreen': '20b2aa',\n    'lightskyblue': '87cefa',\n    'lightslategray': '789',\n    'lightslategrey': '789',\n    'lightsteelblue': 'b0c4de',\n    'lightyellow': 'ffffe0',\n    'lime': '0f0',\n    'limegreen': '32cd32',\n    'linen': 'faf0e6',\n    'magenta': 'f0f',\n    'maroon': '800000',\n    'mediumaquamarine': '66cdaa',\n    'mediumblue': '0000cd',\n    'mediumorchid': 'ba55d3',\n    'mediumpurple': '9370db',\n    'mediumseagreen': '3cb371',\n    'mediumslateblue': '7b68ee',\n    'mediumspringgreen': '00fa9a',\n    'mediumturquoise': '48d1cc',\n    'mediumvioletred': 'c71585',\n    'midnightblue': '191970',\n    'mintcream': 'f5fffa',\n    'mistyrose': 'ffe4e1',\n    'moccasin': 'ffe4b5',\n    'navajowhite': 'ffdead',\n    'navy': '000080',\n    'oldlace': 'fdf5e6',\n    'olive': '808000',\n    'olivedrab': '6b8e23',\n    'orange': 'ffa500',\n    'orangered': 'ff4500',\n    'orchid': 'da70d6',\n    'palegoldenrod': 'eee8aa',\n    'palegreen': '98fb98',\n    'paleturquoise': 'afeeee',\n    'palevioletred': 'db7093',\n    'papayawhip': 'ffefd5',\n    'peachpuff': 'ffdab9',\n    'peru': 'cd853f',\n    'pink': 'ffc0cb',\n    'plum': 'dda0dd',\n    'powderblue': 'b0e0e6',\n    'purple': '800080',\n    'rebeccapurple': '639',\n    'red': 'f00',\n    'rosybrown': 'bc8f8f',\n    'royalblue': '4169e1',\n    'saddlebrown': '8b4513',\n    'salmon': 'fa8072',\n    'sandybrown': 'f4a460',\n    'seagreen': '2e8b57',\n    'seashell': 'fff5ee',\n    'sienna': 'a0522d',\n    'silver': 'c0c0c0',\n    'skyblue': '87ceeb',\n    'slateblue': '6a5acd',\n    'slategray': '708090',\n    'slategrey': '708090',\n    'snow': 'fffafa',\n    'springgreen': '00ff7f',\n    'steelblue': '4682b4',\n    'tan': 'd2b48c',\n    'teal': '008080',\n    'thistle': 'd8bfd8',\n    'tomato': 'ff6347',\n    'turquoise': '40e0d0',\n    'violet': 'ee82ee',\n    'wheat': 'f5deb3',\n    'white': 'fff',\n    'whitesmoke': 'f5f5f5',\n    'yellow': 'ff0',\n    'yellowgreen': '9acd32'\n};\n\nvar HEX_TO_NAME = {\n    '800000': 'maroon',\n    '800080': 'purple',\n    '808000': 'olive',\n    '808080': 'gray',\n    '00ffff': 'cyan',\n    'f0ffff': 'azure',\n    'f5f5dc': 'beige',\n    'ffe4c4': 'bisque',\n    '000000': 'black',\n    '0000ff': 'blue',\n    'a52a2a': 'brown',\n    'ff7f50': 'coral',\n    'ffd700': 'gold',\n    '008000': 'green',\n    '4b0082': 'indigo',\n    'fffff0': 'ivory',\n    'f0e68c': 'khaki',\n    '00ff00': 'lime',\n    'faf0e6': 'linen',\n    '000080': 'navy',\n    'ffa500': 'orange',\n    'da70d6': 'orchid',\n    'cd853f': 'peru',\n    'ffc0cb': 'pink',\n    'dda0dd': 'plum',\n    'f00': 'red',\n    'ff0000': 'red',\n    'fa8072': 'salmon',\n    'a0522d': 'sienna',\n    'c0c0c0': 'silver',\n    'fffafa': 'snow',\n    'd2b48c': 'tan',\n    '008080': 'teal',\n    'ff6347': 'tomato',\n    'ee82ee': 'violet',\n    'f5deb3': 'wheat',\n    'ffffff': 'white',\n    'ffff00': 'yellow'\n};\n\nfunction hueToRgb(p, q, t) {\n    if (t < 0) {\n        t += 1;\n    }\n    if (t > 1) {\n        t -= 1;\n    }\n    if (t < 1 / 6) {\n        return p + (q - p) * 6 * t;\n    }\n    if (t < 1 / 2) {\n        return q;\n    }\n    if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n}\n\nfunction hslToRgb(h, s, l, a) {\n    var r;\n    var g;\n    var b;\n\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    } else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n\n        r = hueToRgb(p, q, h + 1 / 3);\n        g = hueToRgb(p, q, h);\n        b = hueToRgb(p, q, h - 1 / 3);\n    }\n\n    return [\n        Math.round(r * 255),\n        Math.round(g * 255),\n        Math.round(b * 255),\n        a\n    ];\n}\n\nfunction toHex(value) {\n    value = value.toString(16);\n    return value.length === 1 ? '0' + value : value;\n}\n\nfunction parseFunctionArgs(functionArgs, count, rgb) {\n    var cursor = functionArgs.head;\n    var args = [];\n    var wasValue = false;\n\n    while (cursor !== null) {\n        var node = cursor.data;\n        var type = node.type;\n\n        switch (type) {\n            case 'Number':\n            case 'Percentage':\n                if (wasValue) {\n                    return;\n                }\n\n                wasValue = true;\n                args.push({\n                    type: type,\n                    value: Number(node.value)\n                });\n                break;\n\n            case 'Operator':\n                if (node.value === ',') {\n                    if (!wasValue) {\n                        return;\n                    }\n                    wasValue = false;\n                } else if (wasValue || node.value !== '+') {\n                    return;\n                }\n                break;\n\n            default:\n                // something we couldn't understand\n                return;\n        }\n\n        cursor = cursor.next;\n    }\n\n    if (args.length !== count) {\n        // invalid arguments count\n        // TODO: remove those tokens\n        return;\n    }\n\n    if (args.length === 4) {\n        if (args[3].type !== 'Number') {\n            // 4th argument should be a number\n            // TODO: remove those tokens\n            return;\n        }\n\n        args[3].type = 'Alpha';\n    }\n\n    if (rgb) {\n        if (args[0].type !== args[1].type || args[0].type !== args[2].type) {\n            // invalid color, numbers and percentage shouldn't be mixed\n            // TODO: remove those tokens\n            return;\n        }\n    } else {\n        if (args[0].type !== 'Number' ||\n            args[1].type !== 'Percentage' ||\n            args[2].type !== 'Percentage') {\n            // invalid color, for hsl values should be: number, percentage, percentage\n            // TODO: remove those tokens\n            return;\n        }\n\n        args[0].type = 'Angle';\n    }\n\n    return args.map(function(arg) {\n        var value = Math.max(0, arg.value);\n\n        switch (arg.type) {\n            case 'Number':\n                // fit value to [0..255] range\n                value = Math.min(value, 255);\n                break;\n\n            case 'Percentage':\n                // convert 0..100% to value in [0..255] range\n                value = Math.min(value, 100) / 100;\n\n                if (!rgb) {\n                    return value;\n                }\n\n                value = 255 * value;\n                break;\n\n            case 'Angle':\n                // fit value to (-360..360) range\n                return (((value % 360) + 360) % 360) / 360;\n\n            case 'Alpha':\n                // fit value to [0..1] range\n                return Math.min(value, 1);\n        }\n\n        return Math.round(value);\n    });\n}\n\nfunction compressFunction(node, item, list) {\n    var functionName = node.name;\n    var args;\n\n    if (functionName === 'rgba' || functionName === 'hsla') {\n        args = parseFunctionArgs(node.children, 4, functionName === 'rgba');\n\n        if (!args) {\n            // something went wrong\n            return;\n        }\n\n        if (functionName === 'hsla') {\n            args = hslToRgb.apply(null, args);\n            node.name = 'rgba';\n        }\n\n        if (args[3] === 0) {\n            // try to replace `rgba(x, x, x, 0)` to `transparent`\n            // always replace `rgba(0, 0, 0, 0)` to `transparent`\n            // otherwise avoid replacement in gradients since it may break color transition\n            // http://stackoverflow.com/questions/11829410/css3-gradient-rendering-issues-from-transparent-to-white\n            var scopeFunctionName = this.function && this.function.name;\n            if ((args[0] === 0 && args[1] === 0 && args[2] === 0) ||\n                !/^(?:to|from|color-stop)$|gradient$/i.test(scopeFunctionName)) {\n\n                item.data = {\n                    type: 'Identifier',\n                    loc: node.loc,\n                    name: 'transparent'\n                };\n\n                return;\n            }\n        }\n\n        if (args[3] !== 1) {\n            // replace argument values for normalized/interpolated\n            node.children.each(function(node, item, list) {\n                if (node.type === 'Operator') {\n                    if (node.value !== ',') {\n                        list.remove(item);\n                    }\n                    return;\n                }\n\n                item.data = {\n                    type: 'Number',\n                    loc: node.loc,\n                    value: packNumber(args.shift(), null)\n                };\n            });\n\n            return;\n        }\n\n        // otherwise convert to rgb, i.e. rgba(255, 0, 0, 1) -> rgb(255, 0, 0)\n        functionName = 'rgb';\n    }\n\n    if (functionName === 'hsl') {\n        args = args || parseFunctionArgs(node.children, 3, false);\n\n        if (!args) {\n            // something went wrong\n            return;\n        }\n\n        // convert to rgb\n        args = hslToRgb.apply(null, args);\n        functionName = 'rgb';\n    }\n\n    if (functionName === 'rgb') {\n        args = args || parseFunctionArgs(node.children, 3, true);\n\n        if (!args) {\n            // something went wrong\n            return;\n        }\n\n        // check if color is not at the end and not followed by space\n        var next = item.next;\n        if (next && next.data.type !== 'WhiteSpace') {\n            list.insert(list.createItem({\n                type: 'WhiteSpace',\n                value: ' '\n            }), next);\n        }\n\n        item.data = {\n            type: 'HexColor',\n            loc: node.loc,\n            value: toHex(args[0]) + toHex(args[1]) + toHex(args[2])\n        };\n\n        compressHex(item.data, item);\n    }\n}\n\nfunction compressIdent(node, item) {\n    if (this.declaration === null) {\n        return;\n    }\n\n    var color = node.name.toLowerCase();\n\n    if (NAME_TO_HEX.hasOwnProperty(color) &&\n        lexer.matchDeclaration(this.declaration).isType(node, 'color')) {\n        var hex = NAME_TO_HEX[color];\n\n        if (hex.length + 1 <= color.length) {\n            // replace for shorter hex value\n            item.data = {\n                type: 'HexColor',\n                loc: node.loc,\n                value: hex\n            };\n        } else {\n            // special case for consistent colors\n            if (color === 'grey') {\n                color = 'gray';\n            }\n\n            // just replace value for lower cased name\n            node.name = color;\n        }\n    }\n}\n\nfunction compressHex(node, item) {\n    var color = node.value.toLowerCase();\n\n    // #112233 -> #123\n    if (color.length === 6 &&\n        color[0] === color[1] &&\n        color[2] === color[3] &&\n        color[4] === color[5]) {\n        color = color[0] + color[2] + color[4];\n    }\n\n    if (HEX_TO_NAME[color]) {\n        item.data = {\n            type: 'Identifier',\n            loc: node.loc,\n            name: HEX_TO_NAME[color]\n        };\n    } else {\n        node.value = color;\n    }\n}\n\nmodule.exports = {\n    compressFunction: compressFunction,\n    compressIdent: compressIdent,\n    compressHex: compressHex\n};\n"]},"metadata":{},"sourceType":"script"}