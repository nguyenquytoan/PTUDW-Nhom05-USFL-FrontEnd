{"ast":null,"code":"// @remove-on-eject-begin\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst paths = require('./paths');\n\nconst chalk = require('react-dev-utils/chalk');\n\nconst resolve = require('resolve');\n/**\n * Get additional module paths based on the baseUrl of a compilerOptions object.\n *\n * @param {Object} options\n */\n\n\nfunction getAdditionalModulePaths(options = {}) {\n  const baseUrl = options.baseUrl; // We need to explicitly check for null and undefined (and not a falsy value) because\n  // TypeScript treats an empty string as `.`.\n\n  if (baseUrl == null) {\n    // If there's no baseUrl set we respect NODE_PATH\n    // Note that NODE_PATH is deprecated and will be removed\n    // in the next major release of create-react-app.\n    const nodePath = process.env.NODE_PATH || '';\n    return nodePath.split(path.delimiter).filter(Boolean);\n  }\n\n  const baseUrlResolved = path.resolve(paths.appPath, baseUrl); // We don't need to do anything if `baseUrl` is set to `node_modules`. This is\n  // the default behavior.\n\n  if (path.relative(paths.appNodeModules, baseUrlResolved) === '') {\n    return null;\n  } // Allow the user set the `baseUrl` to `appSrc`.\n\n\n  if (path.relative(paths.appSrc, baseUrlResolved) === '') {\n    return [paths.appSrc];\n  } // If the path is equal to the root directory we ignore it here.\n  // We don't want to allow importing from the root directly as source files are\n  // not transpiled outside of `src`. We do allow importing them with the\n  // absolute path (e.g. `src/Components/Button.js`) but we set that up with\n  // an alias.\n\n\n  if (path.relative(paths.appPath, baseUrlResolved) === '') {\n    return null;\n  } // Otherwise, throw an error.\n\n\n  throw new Error(chalk.red.bold(\"Your project's `baseUrl` can only be set to `src` or `node_modules`.\" + ' Create React App does not support other values at this time.'));\n}\n/**\n * Get webpack aliases based on the baseUrl of a compilerOptions object.\n *\n * @param {*} options\n */\n\n\nfunction getWebpackAliases(options = {}) {\n  const baseUrl = options.baseUrl;\n\n  if (!baseUrl) {\n    return {};\n  }\n\n  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);\n\n  if (path.relative(paths.appPath, baseUrlResolved) === '') {\n    return {\n      src: paths.appSrc\n    };\n  }\n}\n/**\n * Get jest aliases based on the baseUrl of a compilerOptions object.\n *\n * @param {*} options\n */\n\n\nfunction getJestAliases(options = {}) {\n  const baseUrl = options.baseUrl;\n\n  if (!baseUrl) {\n    return {};\n  }\n\n  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);\n\n  if (path.relative(paths.appPath, baseUrlResolved) === '') {\n    return {\n      '^src/(.*)$': '<rootDir>/src/$1'\n    };\n  }\n}\n\nfunction getModules() {\n  // Check if TypeScript is setup\n  const hasTsConfig = fs.existsSync(paths.appTsConfig);\n  const hasJsConfig = fs.existsSync(paths.appJsConfig);\n\n  if (hasTsConfig && hasJsConfig) {\n    throw new Error('You have both a tsconfig.json and a jsconfig.json. If you are using TypeScript please remove your jsconfig.json file.');\n  }\n\n  let config; // If there's a tsconfig.json we assume it's a\n  // TypeScript project and set up the config\n  // based on tsconfig.json\n\n  if (hasTsConfig) {\n    const ts = require(resolve.sync('typescript', {\n      basedir: paths.appNodeModules\n    }));\n\n    config = ts.readConfigFile(paths.appTsConfig, ts.sys.readFile).config; // Otherwise we'll check if there is jsconfig.json\n    // for non TS projects.\n  } else if (hasJsConfig) {\n    config = require(paths.appJsConfig);\n  }\n\n  config = config || {};\n  const options = config.compilerOptions || {};\n  const additionalModulePaths = getAdditionalModulePaths(options);\n  return {\n    additionalModulePaths: additionalModulePaths,\n    webpackAliases: getWebpackAliases(options),\n    jestAliases: getJestAliases(options),\n    hasTsConfig\n  };\n}\n\nmodule.exports = getModules();","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-scripts/config/modules.js"],"names":["fs","require","path","paths","chalk","resolve","getAdditionalModulePaths","options","baseUrl","nodePath","process","env","NODE_PATH","split","delimiter","filter","Boolean","baseUrlResolved","appPath","relative","appNodeModules","appSrc","Error","red","bold","getWebpackAliases","src","getJestAliases","getModules","hasTsConfig","existsSync","appTsConfig","hasJsConfig","appJsConfig","config","ts","sync","basedir","readConfigFile","sys","readFile","compilerOptions","additionalModulePaths","webpackAliases","jestAliases","module","exports"],"mappings":"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","sourcesContent":["// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst paths = require('./paths');\nconst chalk = require('react-dev-utils/chalk');\nconst resolve = require('resolve');\n\n/**\n * Get additional module paths based on the baseUrl of a compilerOptions object.\n *\n * @param {Object} options\n */\nfunction getAdditionalModulePaths(options = {}) {\n  const baseUrl = options.baseUrl;\n\n  // We need to explicitly check for null and undefined (and not a falsy value) because\n  // TypeScript treats an empty string as `.`.\n  if (baseUrl == null) {\n    // If there's no baseUrl set we respect NODE_PATH\n    // Note that NODE_PATH is deprecated and will be removed\n    // in the next major release of create-react-app.\n\n    const nodePath = process.env.NODE_PATH || '';\n    return nodePath.split(path.delimiter).filter(Boolean);\n  }\n\n  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);\n\n  // We don't need to do anything if `baseUrl` is set to `node_modules`. This is\n  // the default behavior.\n  if (path.relative(paths.appNodeModules, baseUrlResolved) === '') {\n    return null;\n  }\n\n  // Allow the user set the `baseUrl` to `appSrc`.\n  if (path.relative(paths.appSrc, baseUrlResolved) === '') {\n    return [paths.appSrc];\n  }\n\n  // If the path is equal to the root directory we ignore it here.\n  // We don't want to allow importing from the root directly as source files are\n  // not transpiled outside of `src`. We do allow importing them with the\n  // absolute path (e.g. `src/Components/Button.js`) but we set that up with\n  // an alias.\n  if (path.relative(paths.appPath, baseUrlResolved) === '') {\n    return null;\n  }\n\n  // Otherwise, throw an error.\n  throw new Error(\n    chalk.red.bold(\n      \"Your project's `baseUrl` can only be set to `src` or `node_modules`.\" +\n        ' Create React App does not support other values at this time.'\n    )\n  );\n}\n\n/**\n * Get webpack aliases based on the baseUrl of a compilerOptions object.\n *\n * @param {*} options\n */\nfunction getWebpackAliases(options = {}) {\n  const baseUrl = options.baseUrl;\n\n  if (!baseUrl) {\n    return {};\n  }\n\n  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);\n\n  if (path.relative(paths.appPath, baseUrlResolved) === '') {\n    return {\n      src: paths.appSrc,\n    };\n  }\n}\n\n/**\n * Get jest aliases based on the baseUrl of a compilerOptions object.\n *\n * @param {*} options\n */\nfunction getJestAliases(options = {}) {\n  const baseUrl = options.baseUrl;\n\n  if (!baseUrl) {\n    return {};\n  }\n\n  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);\n\n  if (path.relative(paths.appPath, baseUrlResolved) === '') {\n    return {\n      '^src/(.*)$': '<rootDir>/src/$1',\n    };\n  }\n}\n\nfunction getModules() {\n  // Check if TypeScript is setup\n  const hasTsConfig = fs.existsSync(paths.appTsConfig);\n  const hasJsConfig = fs.existsSync(paths.appJsConfig);\n\n  if (hasTsConfig && hasJsConfig) {\n    throw new Error(\n      'You have both a tsconfig.json and a jsconfig.json. If you are using TypeScript please remove your jsconfig.json file.'\n    );\n  }\n\n  let config;\n\n  // If there's a tsconfig.json we assume it's a\n  // TypeScript project and set up the config\n  // based on tsconfig.json\n  if (hasTsConfig) {\n    const ts = require(resolve.sync('typescript', {\n      basedir: paths.appNodeModules,\n    }));\n    config = ts.readConfigFile(paths.appTsConfig, ts.sys.readFile).config;\n    // Otherwise we'll check if there is jsconfig.json\n    // for non TS projects.\n  } else if (hasJsConfig) {\n    config = require(paths.appJsConfig);\n  }\n\n  config = config || {};\n  const options = config.compilerOptions || {};\n\n  const additionalModulePaths = getAdditionalModulePaths(options);\n\n  return {\n    additionalModulePaths: additionalModulePaths,\n    webpackAliases: getWebpackAliases(options),\n    jestAliases: getJestAliases(options),\n    hasTsConfig,\n  };\n}\n\nmodule.exports = getModules();\n"]},"metadata":{},"sourceType":"script"}