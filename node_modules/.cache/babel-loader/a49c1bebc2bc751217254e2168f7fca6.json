{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst glob = require('glob');\n\nconst path = require('path');\n\nconst errors = require('./errors');\n\nconst getFileSize = require('./get-file-size');\n\nconst getFileHash = require('./get-file-hash');\n\nmodule.exports = globOptions => {\n  const {\n    globDirectory,\n    globFollow,\n    globIgnores,\n    globPattern,\n    globStrict\n  } = globOptions;\n  let globbedFiles;\n\n  try {\n    globbedFiles = glob.sync(globPattern, {\n      cwd: globDirectory,\n      follow: globFollow,\n      ignore: globIgnores,\n      strict: globStrict\n    });\n  } catch (err) {\n    throw new Error(errors['unable-to-glob-files'] + ` '${err.message}'`);\n  }\n\n  if (globbedFiles.length === 0) {\n    throw new Error(errors['useless-glob-pattern'] + ' ' + JSON.stringify({\n      globDirectory,\n      globPattern,\n      globIgnores\n    }, null, 2));\n  }\n\n  const fileDetails = globbedFiles.map(file => {\n    const fullPath = path.join(globDirectory, file);\n    const fileSize = getFileSize(fullPath);\n\n    if (fileSize === null) {\n      return null;\n    }\n\n    const fileHash = getFileHash(fullPath);\n    return {\n      file: `${path.relative(globDirectory, fullPath)}`,\n      hash: fileHash,\n      size: fileSize\n    };\n  }); // If !== null, means it's a valid file.\n\n  return fileDetails.filter(details => details !== null);\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-build/src/lib/get-file-details.js"],"names":["glob","require","path","errors","getFileSize","getFileHash","module","exports","globOptions","globDirectory","globFollow","globIgnores","globPattern","globStrict","globbedFiles","sync","cwd","follow","ignore","strict","err","Error","message","length","JSON","stringify","fileDetails","map","file","fullPath","join","fileSize","fileHash","relative","hash","size","filter","details"],"mappings":"AAAA;;;;;;;AAQA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,iBAAD,CAA3B;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,iBAAD,CAA3B;;AAEAK,MAAM,CAACC,OAAP,GAAkBC,WAAD,IAAiB;AAChC,QAAM;AACJC,IAAAA,aADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA;AALI,MAMFL,WANJ;AAOA,MAAIM,YAAJ;;AACA,MAAI;AACFA,IAAAA,YAAY,GAAGd,IAAI,CAACe,IAAL,CAAUH,WAAV,EAAuB;AACpCI,MAAAA,GAAG,EAAEP,aAD+B;AAEpCQ,MAAAA,MAAM,EAAEP,UAF4B;AAGpCQ,MAAAA,MAAM,EAAEP,WAH4B;AAIpCQ,MAAAA,MAAM,EAAEN;AAJ4B,KAAvB,CAAf;AAMD,GAPD,CAOE,OAAOO,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAUlB,MAAM,CAAC,sBAAD,CAAN,GAAkC,KAAIiB,GAAG,CAACE,OAAQ,GAA5D,CAAN;AACD;;AAED,MAAIR,YAAY,CAACS,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,UAAM,IAAIF,KAAJ,CAAUlB,MAAM,CAAC,sBAAD,CAAN,GAAiC,GAAjC,GACdqB,IAAI,CAACC,SAAL,CAAe;AAAChB,MAAAA,aAAD;AAAgBG,MAAAA,WAAhB;AAA6BD,MAAAA;AAA7B,KAAf,EAA0D,IAA1D,EAAgE,CAAhE,CADI,CAAN;AAED;;AAED,QAAMe,WAAW,GAAGZ,YAAY,CAACa,GAAb,CAAkBC,IAAD,IAAU;AAC7C,UAAMC,QAAQ,GAAG3B,IAAI,CAAC4B,IAAL,CAAUrB,aAAV,EAAyBmB,IAAzB,CAAjB;AACA,UAAMG,QAAQ,GAAG3B,WAAW,CAACyB,QAAD,CAA5B;;AACA,QAAIE,QAAQ,KAAK,IAAjB,EAAuB;AACrB,aAAO,IAAP;AACD;;AAED,UAAMC,QAAQ,GAAG3B,WAAW,CAACwB,QAAD,CAA5B;AACA,WAAO;AACLD,MAAAA,IAAI,EAAG,GAAE1B,IAAI,CAAC+B,QAAL,CAAcxB,aAAd,EAA6BoB,QAA7B,CAAuC,EAD3C;AAELK,MAAAA,IAAI,EAAEF,QAFD;AAGLG,MAAAA,IAAI,EAAEJ;AAHD,KAAP;AAKD,GAbmB,CAApB,CAzBgC,CAwChC;;AACA,SAAOL,WAAW,CAACU,MAAZ,CAAoBC,OAAD,IAAaA,OAAO,KAAK,IAA5C,CAAP;AACD,CA1CD","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst glob = require('glob');\nconst path = require('path');\n\nconst errors = require('./errors');\nconst getFileSize = require('./get-file-size');\nconst getFileHash = require('./get-file-hash');\n\nmodule.exports = (globOptions) => {\n  const {\n    globDirectory,\n    globFollow,\n    globIgnores,\n    globPattern,\n    globStrict,\n  } = globOptions;\n  let globbedFiles;\n  try {\n    globbedFiles = glob.sync(globPattern, {\n      cwd: globDirectory,\n      follow: globFollow,\n      ignore: globIgnores,\n      strict: globStrict,\n    });\n  } catch (err) {\n    throw new Error(errors['unable-to-glob-files'] + ` '${err.message}'`);\n  }\n\n  if (globbedFiles.length === 0) {\n    throw new Error(errors['useless-glob-pattern'] + ' ' +\n      JSON.stringify({globDirectory, globPattern, globIgnores}, null, 2));\n  }\n\n  const fileDetails = globbedFiles.map((file) => {\n    const fullPath = path.join(globDirectory, file);\n    const fileSize = getFileSize(fullPath);\n    if (fileSize === null) {\n      return null;\n    }\n\n    const fileHash = getFileHash(fullPath);\n    return {\n      file: `${path.relative(globDirectory, fullPath)}`,\n      hash: fileHash,\n      size: fileSize,\n    };\n  });\n\n  // If !== null, means it's a valid file.\n  return fileDetails.filter((details) => details !== null);\n};\n"]},"metadata":{},"sourceType":"script"}