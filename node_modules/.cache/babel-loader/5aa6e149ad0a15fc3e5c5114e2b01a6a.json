{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _jestWatcher = require(\"jest-watcher\");\n\nvar _stripAnsi = _interopRequireDefault(require(\"strip-ansi\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexpect.addSnapshotSerializer({\n  test: val => typeof val === 'string',\n  print: val => (0, _stripAnsi.default)(val)\n});\n/**\n * See https://github.com/facebook/jest/pull/7523 for more details\n */\n\nconst CLEAR = '\\x1B[2J\\x1B[3J\\x1B[H';\nexpect.addSnapshotSerializer({\n  test: val => val.includes(CLEAR),\n  print: val => (0, _stripAnsi.default)(val.replace(CLEAR, '[MOCK - clear]'))\n});\n/**\n * See https://github.com/facebook/jest/pull/7523 for more details\n */\n\nconst WINDOWS_CLEAR = '\\x1B[2J\\x1B[0f';\nexpect.addSnapshotSerializer({\n  test: val => val.includes(WINDOWS_CLEAR),\n  print: val => (0, _stripAnsi.default)(val.replace(WINDOWS_CLEAR, '[MOCK - clear]'))\n});\n\nconst pluginTester = (Plugin, options = {}) => {\n  const stdout = {\n    columns: (options.stdout || {}).columns || 80,\n    write: jest.fn()\n  };\n  const jestHooks = new _jestWatcher.JestHook();\n  const plugin = new Plugin({\n    stdout,\n    config: options.config\n  });\n  plugin.apply(jestHooks.getSubscriber());\n\n  const type = (...keys) => keys.forEach(key => plugin.onKey(key));\n\n  return {\n    stdout,\n    hookEmitter: jestHooks.getEmitter(),\n    updateConfigAndRun: jest.fn(),\n    plugin,\n    type\n  };\n};\n\nvar _default = pluginTester;\nexports.default = _default;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-watch-typeahead/build/test_utils/pluginTester.js"],"names":["Object","defineProperty","exports","value","default","_jestWatcher","require","_stripAnsi","_interopRequireDefault","obj","__esModule","expect","addSnapshotSerializer","test","val","print","CLEAR","includes","replace","WINDOWS_CLEAR","pluginTester","Plugin","options","stdout","columns","write","jest","fn","jestHooks","JestHook","plugin","config","apply","getSubscriber","type","keys","forEach","key","onKey","hookEmitter","getEmitter","updateConfigAndRun","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACF,OAAO,CAAC,YAAD,CAAR,CAAvC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEL,IAAAA,OAAO,EAAEK;AAAX,GAArC;AAAwD;;AAE/FE,MAAM,CAACC,qBAAP,CAA6B;AAC3BC,EAAAA,IAAI,EAAEC,GAAG,IAAI,OAAOA,GAAP,KAAe,QADD;AAE3BC,EAAAA,KAAK,EAAED,GAAG,IAAI,CAAC,GAAGP,UAAU,CAACH,OAAf,EAAwBU,GAAxB;AAFa,CAA7B;AAIA;;;;AAIA,MAAME,KAAK,GAAG,sBAAd;AACAL,MAAM,CAACC,qBAAP,CAA6B;AAC3BC,EAAAA,IAAI,EAAEC,GAAG,IAAIA,GAAG,CAACG,QAAJ,CAAaD,KAAb,CADc;AAE3BD,EAAAA,KAAK,EAAED,GAAG,IAAI,CAAC,GAAGP,UAAU,CAACH,OAAf,EAAwBU,GAAG,CAACI,OAAJ,CAAYF,KAAZ,EAAmB,gBAAnB,CAAxB;AAFa,CAA7B;AAIA;;;;AAIA,MAAMG,aAAa,GAAG,gBAAtB;AACAR,MAAM,CAACC,qBAAP,CAA6B;AAC3BC,EAAAA,IAAI,EAAEC,GAAG,IAAIA,GAAG,CAACG,QAAJ,CAAaE,aAAb,CADc;AAE3BJ,EAAAA,KAAK,EAAED,GAAG,IAAI,CAAC,GAAGP,UAAU,CAACH,OAAf,EAAwBU,GAAG,CAACI,OAAJ,CAAYC,aAAZ,EAA2B,gBAA3B,CAAxB;AAFa,CAA7B;;AAKA,MAAMC,YAAY,GAAG,CAACC,MAAD,EAASC,OAAO,GAAG,EAAnB,KAA0B;AAC7C,QAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE,CAACF,OAAO,CAACC,MAAR,IAAkB,EAAnB,EAAuBC,OAAvB,IAAkC,EAD9B;AAEbC,IAAAA,KAAK,EAAEC,IAAI,CAACC,EAAL;AAFM,GAAf;AAIA,QAAMC,SAAS,GAAG,IAAIvB,YAAY,CAACwB,QAAjB,EAAlB;AACA,QAAMC,MAAM,GAAG,IAAIT,MAAJ,CAAW;AACxBE,IAAAA,MADwB;AAExBQ,IAAAA,MAAM,EAAET,OAAO,CAACS;AAFQ,GAAX,CAAf;AAIAD,EAAAA,MAAM,CAACE,KAAP,CAAaJ,SAAS,CAACK,aAAV,EAAb;;AAEA,QAAMC,IAAI,GAAG,CAAC,GAAGC,IAAJ,KAAaA,IAAI,CAACC,OAAL,CAAaC,GAAG,IAAIP,MAAM,CAACQ,KAAP,CAAaD,GAAb,CAApB,CAA1B;;AAEA,SAAO;AACLd,IAAAA,MADK;AAELgB,IAAAA,WAAW,EAAEX,SAAS,CAACY,UAAV,EAFR;AAGLC,IAAAA,kBAAkB,EAAEf,IAAI,CAACC,EAAL,EAHf;AAILG,IAAAA,MAJK;AAKLI,IAAAA;AALK,GAAP;AAOD,CArBD;;AAuBA,IAAIQ,QAAQ,GAAGtB,YAAf;AACAlB,OAAO,CAACE,OAAR,GAAkBsC,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _jestWatcher = require(\"jest-watcher\");\n\nvar _stripAnsi = _interopRequireDefault(require(\"strip-ansi\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexpect.addSnapshotSerializer({\n  test: val => typeof val === 'string',\n  print: val => (0, _stripAnsi.default)(val)\n});\n/**\n * See https://github.com/facebook/jest/pull/7523 for more details\n */\n\nconst CLEAR = '\\x1B[2J\\x1B[3J\\x1B[H';\nexpect.addSnapshotSerializer({\n  test: val => val.includes(CLEAR),\n  print: val => (0, _stripAnsi.default)(val.replace(CLEAR, '[MOCK - clear]'))\n});\n/**\n * See https://github.com/facebook/jest/pull/7523 for more details\n */\n\nconst WINDOWS_CLEAR = '\\x1B[2J\\x1B[0f';\nexpect.addSnapshotSerializer({\n  test: val => val.includes(WINDOWS_CLEAR),\n  print: val => (0, _stripAnsi.default)(val.replace(WINDOWS_CLEAR, '[MOCK - clear]'))\n});\n\nconst pluginTester = (Plugin, options = {}) => {\n  const stdout = {\n    columns: (options.stdout || {}).columns || 80,\n    write: jest.fn()\n  };\n  const jestHooks = new _jestWatcher.JestHook();\n  const plugin = new Plugin({\n    stdout,\n    config: options.config\n  });\n  plugin.apply(jestHooks.getSubscriber());\n\n  const type = (...keys) => keys.forEach(key => plugin.onKey(key));\n\n  return {\n    stdout,\n    hookEmitter: jestHooks.getEmitter(),\n    updateConfigAndRun: jest.fn(),\n    plugin,\n    type\n  };\n};\n\nvar _default = pluginTester;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}