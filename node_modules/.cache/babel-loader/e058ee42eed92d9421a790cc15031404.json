{"ast":null,"code":"/**\n * @fileoverview Rule to flag when using constructor without parentheses\n * @author Ilya Volodin\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce or disallow parentheses when invoking a constructor with no arguments\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/new-parens\"\n    },\n    fixable: \"code\",\n    schema: {\n      anyOf: [{\n        type: \"array\",\n        items: [{\n          enum: [\"always\", \"never\"]\n        }],\n        minItems: 0,\n        maxItems: 1\n      }]\n    },\n    messages: {\n      missing: \"Missing '()' invoking a constructor.\",\n      unnecessary: \"Unnecessary '()' invoking a constructor with no arguments.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options;\n    const always = options[0] !== \"never\"; // Default is always\n\n    const sourceCode = context.getSourceCode();\n    return {\n      NewExpression(node) {\n        if (node.arguments.length !== 0) {\n          return; // if there are arguments, there have to be parens\n        }\n\n        const lastToken = sourceCode.getLastToken(node);\n        const hasLastParen = lastToken && astUtils.isClosingParenToken(lastToken); // `hasParens` is true only if the new expression ends with its own parens, e.g., new new foo() does not end with its own parens\n\n        const hasParens = hasLastParen && astUtils.isOpeningParenToken(sourceCode.getTokenBefore(lastToken)) && node.callee.range[1] < node.range[1];\n\n        if (always) {\n          if (!hasParens) {\n            context.report({\n              node,\n              messageId: \"missing\",\n              fix: fixer => fixer.insertTextAfter(node, \"()\")\n            });\n          }\n        } else {\n          if (hasParens) {\n            context.report({\n              node,\n              messageId: \"unnecessary\",\n              fix: fixer => [fixer.remove(sourceCode.getTokenBefore(lastToken)), fixer.remove(lastToken), fixer.insertTextBefore(node, \"(\"), fixer.insertTextAfter(node, \")\")]\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/new-parens.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","anyOf","items","enum","minItems","maxItems","messages","missing","unnecessary","create","context","options","always","sourceCode","getSourceCode","NewExpression","node","arguments","length","lastToken","getLastToken","hasLastParen","isClosingParenToken","hasParens","isOpeningParenToken","getTokenBefore","callee","range","report","messageId","fix","fixer","insertTextAfter","remove","insertTextBefore"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;AAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,QADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,+EADX;AAEFC,MAAAA,QAAQ,EAAE,kBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,OAAO,EAAE,MAVP;AAWFC,IAAAA,MAAM,EAAE;AACJC,MAAAA,KAAK,EAAE,CACH;AACIR,QAAAA,IAAI,EAAE,OADV;AAEIS,QAAAA,KAAK,EAAE,CACH;AACIC,UAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,OAAX;AADV,SADG,CAFX;AAOIC,QAAAA,QAAQ,EAAE,CAPd;AAQIC,QAAAA,QAAQ,EAAE;AARd,OADG;AADH,KAXN;AAyBFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,OAAO,EAAE,sCADH;AAENC,MAAAA,WAAW,EAAE;AAFP;AAzBR,GADO;;AAgCbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,OAAO,GAAGD,OAAO,CAACC,OAAxB;AACA,UAAMC,MAAM,GAAGD,OAAO,CAAC,CAAD,CAAP,KAAe,OAA9B,CAFY,CAE2B;;AAEvC,UAAME,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB;AAEA,WAAO;AACHC,MAAAA,aAAa,CAACC,IAAD,EAAO;AAChB,YAAIA,IAAI,CAACC,SAAL,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,iBAD6B,CACrB;AACX;;AAED,cAAMC,SAAS,GAAGN,UAAU,CAACO,YAAX,CAAwBJ,IAAxB,CAAlB;AACA,cAAMK,YAAY,GAAGF,SAAS,IAAI/B,QAAQ,CAACkC,mBAAT,CAA6BH,SAA7B,CAAlC,CANgB,CAQhB;;AACA,cAAMI,SAAS,GAAGF,YAAY,IAC1BjC,QAAQ,CAACoC,mBAAT,CAA6BX,UAAU,CAACY,cAAX,CAA0BN,SAA1B,CAA7B,CADc,IAEdH,IAAI,CAACU,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,IAAuBX,IAAI,CAACW,KAAL,CAAW,CAAX,CAF3B;;AAIA,YAAIf,MAAJ,EAAY;AACR,cAAI,CAACW,SAAL,EAAgB;AACZb,YAAAA,OAAO,CAACkB,MAAR,CAAe;AACXZ,cAAAA,IADW;AAEXa,cAAAA,SAAS,EAAE,SAFA;AAGXC,cAAAA,GAAG,EAAEC,KAAK,IAAIA,KAAK,CAACC,eAAN,CAAsBhB,IAAtB,EAA4B,IAA5B;AAHH,aAAf;AAKH;AACJ,SARD,MAQO;AACH,cAAIO,SAAJ,EAAe;AACXb,YAAAA,OAAO,CAACkB,MAAR,CAAe;AACXZ,cAAAA,IADW;AAEXa,cAAAA,SAAS,EAAE,aAFA;AAGXC,cAAAA,GAAG,EAAEC,KAAK,IAAI,CACVA,KAAK,CAACE,MAAN,CAAapB,UAAU,CAACY,cAAX,CAA0BN,SAA1B,CAAb,CADU,EAEVY,KAAK,CAACE,MAAN,CAAad,SAAb,CAFU,EAGVY,KAAK,CAACG,gBAAN,CAAuBlB,IAAvB,EAA6B,GAA7B,CAHU,EAIVe,KAAK,CAACC,eAAN,CAAsBhB,IAAtB,EAA4B,GAA5B,CAJU;AAHH,aAAf;AAUH;AACJ;AACJ;;AApCE,KAAP;AAsCH;;AA5EY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to flag when using constructor without parentheses\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce or disallow parentheses when invoking a constructor with no arguments\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/new-parens\"\n        },\n\n        fixable: \"code\",\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\", \"never\"]\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 1\n                }\n            ]\n        },\n        messages: {\n            missing: \"Missing '()' invoking a constructor.\",\n            unnecessary: \"Unnecessary '()' invoking a constructor with no arguments.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options;\n        const always = options[0] !== \"never\"; // Default is always\n\n        const sourceCode = context.getSourceCode();\n\n        return {\n            NewExpression(node) {\n                if (node.arguments.length !== 0) {\n                    return; // if there are arguments, there have to be parens\n                }\n\n                const lastToken = sourceCode.getLastToken(node);\n                const hasLastParen = lastToken && astUtils.isClosingParenToken(lastToken);\n\n                // `hasParens` is true only if the new expression ends with its own parens, e.g., new new foo() does not end with its own parens\n                const hasParens = hasLastParen &&\n                    astUtils.isOpeningParenToken(sourceCode.getTokenBefore(lastToken)) &&\n                    node.callee.range[1] < node.range[1];\n\n                if (always) {\n                    if (!hasParens) {\n                        context.report({\n                            node,\n                            messageId: \"missing\",\n                            fix: fixer => fixer.insertTextAfter(node, \"()\")\n                        });\n                    }\n                } else {\n                    if (hasParens) {\n                        context.report({\n                            node,\n                            messageId: \"unnecessary\",\n                            fix: fixer => [\n                                fixer.remove(sourceCode.getTokenBefore(lastToken)),\n                                fixer.remove(lastToken),\n                                fixer.insertTextBefore(node, \"(\"),\n                                fixer.insertTextAfter(node, \")\")\n                            ]\n                        });\n                    }\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}