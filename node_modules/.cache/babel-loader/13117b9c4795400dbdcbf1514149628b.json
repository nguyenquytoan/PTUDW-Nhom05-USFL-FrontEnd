{"ast":null,"code":"/**\n * @fileoverview Disallow renaming import, export, and destructured assignments to the same name.\n * @author Kai Cataldo\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow renaming import, export, and destructured assignments to the same name\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-useless-rename\"\n    },\n    fixable: \"code\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        ignoreDestructuring: {\n          type: \"boolean\",\n          default: false\n        },\n        ignoreImport: {\n          type: \"boolean\",\n          default: false\n        },\n        ignoreExport: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode(),\n          options = context.options[0] || {},\n          ignoreDestructuring = options.ignoreDestructuring === true,\n          ignoreImport = options.ignoreImport === true,\n          ignoreExport = options.ignoreExport === true; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Reports error for unnecessarily renamed assignments\n     * @param {ASTNode} node node to report\n     * @param {ASTNode} initial node with initial name value\n     * @param {ASTNode} result node with new name value\n     * @param {string} type the type of the offending node\n     * @returns {void}\n     */\n\n    function reportError(node, initial, result, type) {\n      const name = initial.type === \"Identifier\" ? initial.name : initial.value;\n      return context.report({\n        node,\n        message: \"{{type}} {{name}} unnecessarily renamed.\",\n        data: {\n          name,\n          type\n        },\n\n        fix(fixer) {\n          if (sourceCode.commentsExistBetween(initial, result)) {\n            return null;\n          }\n\n          const replacementText = result.type === \"AssignmentPattern\" ? sourceCode.getText(result) : name;\n          return fixer.replaceTextRange([initial.range[0], result.range[1]], replacementText);\n        }\n\n      });\n    }\n    /**\n     * Checks whether a destructured assignment is unnecessarily renamed\n     * @param {ASTNode} node node to check\n     * @returns {void}\n     */\n\n\n    function checkDestructured(node) {\n      if (ignoreDestructuring) {\n        return;\n      }\n\n      for (const property of node.properties) {\n        /*\n         * TODO: Remove after babel-eslint removes ExperimentalRestProperty\n         * https://github.com/eslint/eslint/issues/12335\n         */\n        if (property.type === \"ExperimentalRestProperty\") {\n          continue;\n        }\n        /**\n         * Properties using shorthand syntax and rest elements can not be renamed.\n         * If the property is computed, we have no idea if a rename is useless or not.\n         */\n\n\n        if (property.shorthand || property.type === \"RestElement\" || property.computed) {\n          continue;\n        }\n\n        const key = property.key.type === \"Identifier\" && property.key.name || property.key.type === \"Literal\" && property.key.value;\n        const renamedKey = property.value.type === \"AssignmentPattern\" ? property.value.left.name : property.value.name;\n\n        if (key === renamedKey) {\n          reportError(property, property.key, property.value, \"Destructuring assignment\");\n        }\n      }\n    }\n    /**\n     * Checks whether an import is unnecessarily renamed\n     * @param {ASTNode} node node to check\n     * @returns {void}\n     */\n\n\n    function checkImport(node) {\n      if (ignoreImport) {\n        return;\n      }\n\n      if (node.imported.name === node.local.name && node.imported.range[0] !== node.local.range[0]) {\n        reportError(node, node.imported, node.local, \"Import\");\n      }\n    }\n    /**\n     * Checks whether an export is unnecessarily renamed\n     * @param {ASTNode} node node to check\n     * @returns {void}\n     */\n\n\n    function checkExport(node) {\n      if (ignoreExport) {\n        return;\n      }\n\n      if (node.local.name === node.exported.name && node.local.range[0] !== node.exported.range[0]) {\n        reportError(node, node.local, node.exported, \"Export\");\n      }\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      ObjectPattern: checkDestructured,\n      ImportSpecifier: checkImport,\n      ExportSpecifier: checkExport\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-useless-rename.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","properties","ignoreDestructuring","default","ignoreImport","ignoreExport","additionalProperties","create","context","sourceCode","getSourceCode","options","reportError","node","initial","result","name","value","report","message","data","fix","fixer","commentsExistBetween","replacementText","getText","replaceTextRange","range","checkDestructured","property","shorthand","computed","key","renamedKey","left","checkImport","imported","local","checkExport","exported","ObjectPattern","ImportSpecifier","ExportSpecifier"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Disallow renaming import, export, and destructured assignments to the same name.\n * @author Kai Cataldo\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow renaming import, export, and destructured assignments to the same name\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-useless-rename\"\n        },\n\n        fixable: \"code\",\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    ignoreDestructuring: { type: \"boolean\", default: false },\n                    ignoreImport: { type: \"boolean\", default: false },\n                    ignoreExport: { type: \"boolean\", default: false }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode(),\n            options = context.options[0] || {},\n            ignoreDestructuring = options.ignoreDestructuring === true,\n            ignoreImport = options.ignoreImport === true,\n            ignoreExport = options.ignoreExport === true;\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports error for unnecessarily renamed assignments\n         * @param {ASTNode} node node to report\n         * @param {ASTNode} initial node with initial name value\n         * @param {ASTNode} result node with new name value\n         * @param {string} type the type of the offending node\n         * @returns {void}\n         */\n        function reportError(node, initial, result, type) {\n            const name = initial.type === \"Identifier\" ? initial.name : initial.value;\n\n            return context.report({\n                node,\n                message: \"{{type}} {{name}} unnecessarily renamed.\",\n                data: {\n                    name,\n                    type\n                },\n                fix(fixer) {\n                    if (sourceCode.commentsExistBetween(initial, result)) {\n                        return null;\n                    }\n\n                    const replacementText = result.type === \"AssignmentPattern\"\n                        ? sourceCode.getText(result)\n                        : name;\n\n                    return fixer.replaceTextRange([\n                        initial.range[0],\n                        result.range[1]\n                    ], replacementText);\n                }\n            });\n        }\n\n        /**\n         * Checks whether a destructured assignment is unnecessarily renamed\n         * @param {ASTNode} node node to check\n         * @returns {void}\n         */\n        function checkDestructured(node) {\n            if (ignoreDestructuring) {\n                return;\n            }\n\n            for (const property of node.properties) {\n\n                /*\n                 * TODO: Remove after babel-eslint removes ExperimentalRestProperty\n                 * https://github.com/eslint/eslint/issues/12335\n                 */\n                if (property.type === \"ExperimentalRestProperty\") {\n                    continue;\n                }\n\n                /**\n                 * Properties using shorthand syntax and rest elements can not be renamed.\n                 * If the property is computed, we have no idea if a rename is useless or not.\n                 */\n                if (property.shorthand || property.type === \"RestElement\" || property.computed) {\n                    continue;\n                }\n\n                const key = (property.key.type === \"Identifier\" && property.key.name) || (property.key.type === \"Literal\" && property.key.value);\n                const renamedKey = property.value.type === \"AssignmentPattern\" ? property.value.left.name : property.value.name;\n\n                if (key === renamedKey) {\n                    reportError(property, property.key, property.value, \"Destructuring assignment\");\n                }\n            }\n        }\n\n        /**\n         * Checks whether an import is unnecessarily renamed\n         * @param {ASTNode} node node to check\n         * @returns {void}\n         */\n        function checkImport(node) {\n            if (ignoreImport) {\n                return;\n            }\n\n            if (node.imported.name === node.local.name &&\n                    node.imported.range[0] !== node.local.range[0]) {\n                reportError(node, node.imported, node.local, \"Import\");\n            }\n        }\n\n        /**\n         * Checks whether an export is unnecessarily renamed\n         * @param {ASTNode} node node to check\n         * @returns {void}\n         */\n        function checkExport(node) {\n            if (ignoreExport) {\n                return;\n            }\n\n            if (node.local.name === node.exported.name &&\n                    node.local.range[0] !== node.exported.range[0]) {\n                reportError(node, node.local, node.exported, \"Export\");\n            }\n\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            ObjectPattern: checkDestructured,\n            ImportSpecifier: checkImport,\n            ExportSpecifier: checkExport\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}