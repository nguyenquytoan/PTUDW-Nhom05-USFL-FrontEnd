{"ast":null,"code":"/**\n * @fileoverview Rule to flag missing semicolons.\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst FixTracker = require(\"./utils/fix-tracker\");\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require or disallow semicolons instead of ASI\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/semi\"\n    },\n    fixable: \"code\",\n    schema: {\n      anyOf: [{\n        type: \"array\",\n        items: [{\n          enum: [\"never\"]\n        }, {\n          type: \"object\",\n          properties: {\n            beforeStatementContinuationChars: {\n              enum: [\"always\", \"any\", \"never\"]\n            }\n          },\n          additionalProperties: false\n        }],\n        minItems: 0,\n        maxItems: 2\n      }, {\n        type: \"array\",\n        items: [{\n          enum: [\"always\"]\n        }, {\n          type: \"object\",\n          properties: {\n            omitLastInOneLineBlock: {\n              type: \"boolean\"\n            }\n          },\n          additionalProperties: false\n        }],\n        minItems: 0,\n        maxItems: 2\n      }]\n    }\n  },\n\n  create(context) {\n    const OPT_OUT_PATTERN = /^[-[(/+`]/u; // One of [(/+-`\n\n    const options = context.options[1];\n    const never = context.options[0] === \"never\";\n    const exceptOneLine = Boolean(options && options.omitLastInOneLineBlock);\n    const beforeStatementContinuationChars = options && options.beforeStatementContinuationChars || \"any\";\n    const sourceCode = context.getSourceCode(); //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Reports a semicolon error with appropriate location and message.\n     * @param {ASTNode} node The node with an extra or missing semicolon.\n     * @param {boolean} missing True if the semicolon is missing.\n     * @returns {void}\n     */\n\n    function report(node, missing) {\n      const lastToken = sourceCode.getLastToken(node);\n      let message, fix, loc;\n\n      if (!missing) {\n        message = \"Missing semicolon.\";\n        loc = {\n          start: lastToken.loc.end,\n          end: astUtils.getNextLocation(sourceCode, lastToken.loc.end)\n        };\n\n        fix = function (fixer) {\n          return fixer.insertTextAfter(lastToken, \";\");\n        };\n      } else {\n        message = \"Extra semicolon.\";\n        loc = lastToken.loc;\n\n        fix = function (fixer) {\n          /*\n           * Expand the replacement range to include the surrounding\n           * tokens to avoid conflicting with no-extra-semi.\n           * https://github.com/eslint/eslint/issues/7928\n           */\n          return new FixTracker(fixer, sourceCode).retainSurroundingTokens(lastToken).remove(lastToken);\n        };\n      }\n\n      context.report({\n        node,\n        loc,\n        message,\n        fix\n      });\n    }\n    /**\n     * Check whether a given semicolon token is redandant.\n     * @param {Token} semiToken A semicolon token to check.\n     * @returns {boolean} `true` if the next token is `;` or `}`.\n     */\n\n\n    function isRedundantSemi(semiToken) {\n      const nextToken = sourceCode.getTokenAfter(semiToken);\n      return !nextToken || astUtils.isClosingBraceToken(nextToken) || astUtils.isSemicolonToken(nextToken);\n    }\n    /**\n     * Check whether a given token is the closing brace of an arrow function.\n     * @param {Token} lastToken A token to check.\n     * @returns {boolean} `true` if the token is the closing brace of an arrow function.\n     */\n\n\n    function isEndOfArrowBlock(lastToken) {\n      if (!astUtils.isClosingBraceToken(lastToken)) {\n        return false;\n      }\n\n      const node = sourceCode.getNodeByRangeIndex(lastToken.range[0]);\n      return node.type === \"BlockStatement\" && node.parent.type === \"ArrowFunctionExpression\";\n    }\n    /**\n     * Check whether a given node is on the same line with the next token.\n     * @param {Node} node A statement node to check.\n     * @returns {boolean} `true` if the node is on the same line with the next token.\n     */\n\n\n    function isOnSameLineWithNextToken(node) {\n      const prevToken = sourceCode.getLastToken(node, 1);\n      const nextToken = sourceCode.getTokenAfter(node);\n      return !!nextToken && astUtils.isTokenOnSameLine(prevToken, nextToken);\n    }\n    /**\n     * Check whether a given node can connect the next line if the next line is unreliable.\n     * @param {Node} node A statement node to check.\n     * @returns {boolean} `true` if the node can connect the next line.\n     */\n\n\n    function maybeAsiHazardAfter(node) {\n      const t = node.type;\n\n      if (t === \"DoWhileStatement\" || t === \"BreakStatement\" || t === \"ContinueStatement\" || t === \"DebuggerStatement\" || t === \"ImportDeclaration\" || t === \"ExportAllDeclaration\") {\n        return false;\n      }\n\n      if (t === \"ReturnStatement\") {\n        return Boolean(node.argument);\n      }\n\n      if (t === \"ExportNamedDeclaration\") {\n        return Boolean(node.declaration);\n      }\n\n      if (isEndOfArrowBlock(sourceCode.getLastToken(node, 1))) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     * Check whether a given token can connect the previous statement.\n     * @param {Token} token A token to check.\n     * @returns {boolean} `true` if the token is one of `[`, `(`, `/`, `+`, `-`, ```, `++`, and `--`.\n     */\n\n\n    function maybeAsiHazardBefore(token) {\n      return Boolean(token) && OPT_OUT_PATTERN.test(token.value) && token.value !== \"++\" && token.value !== \"--\";\n    }\n    /**\n     * Check if the semicolon of a given node is unnecessary, only true if:\n     *   - next token is a valid statement divider (`;` or `}`).\n     *   - next token is on a new line and the node is not connectable to the new line.\n     * @param {Node} node A statement node to check.\n     * @returns {boolean} whether the semicolon is unnecessary.\n     */\n\n\n    function canRemoveSemicolon(node) {\n      if (isRedundantSemi(sourceCode.getLastToken(node))) {\n        return true; // `;;` or `;}`\n      }\n\n      if (isOnSameLineWithNextToken(node)) {\n        return false; // One liner.\n      }\n\n      if (beforeStatementContinuationChars === \"never\" && !maybeAsiHazardAfter(node)) {\n        return true; // ASI works. This statement doesn't connect to the next.\n      }\n\n      if (!maybeAsiHazardBefore(sourceCode.getTokenAfter(node))) {\n        return true; // ASI works. The next token doesn't connect to this statement.\n      }\n\n      return false;\n    }\n    /**\n     * Checks a node to see if it's in a one-liner block statement.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} whether the node is in a one-liner block statement.\n     */\n\n\n    function isOneLinerBlock(node) {\n      const parent = node.parent;\n      const nextToken = sourceCode.getTokenAfter(node);\n\n      if (!nextToken || nextToken.value !== \"}\") {\n        return false;\n      }\n\n      return !!parent && parent.type === \"BlockStatement\" && parent.loc.start.line === parent.loc.end.line;\n    }\n    /**\n     * Checks a node to see if it's followed by a semicolon.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     */\n\n\n    function checkForSemicolon(node) {\n      const isSemi = astUtils.isSemicolonToken(sourceCode.getLastToken(node));\n\n      if (never) {\n        if (isSemi && canRemoveSemicolon(node)) {\n          report(node, true);\n        } else if (!isSemi && beforeStatementContinuationChars === \"always\" && maybeAsiHazardBefore(sourceCode.getTokenAfter(node))) {\n          report(node);\n        }\n      } else {\n        const oneLinerBlock = exceptOneLine && isOneLinerBlock(node);\n\n        if (isSemi && oneLinerBlock) {\n          report(node, true);\n        } else if (!isSemi && !oneLinerBlock) {\n          report(node);\n        }\n      }\n    }\n    /**\n     * Checks to see if there's a semicolon after a variable declaration.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     */\n\n\n    function checkForSemicolonForVariableDeclaration(node) {\n      const parent = node.parent;\n\n      if ((parent.type !== \"ForStatement\" || parent.init !== node) && (!/^For(?:In|Of)Statement/u.test(parent.type) || parent.left !== node)) {\n        checkForSemicolon(node);\n      }\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      VariableDeclaration: checkForSemicolonForVariableDeclaration,\n      ExpressionStatement: checkForSemicolon,\n      ReturnStatement: checkForSemicolon,\n      ThrowStatement: checkForSemicolon,\n      DoWhileStatement: checkForSemicolon,\n      DebuggerStatement: checkForSemicolon,\n      BreakStatement: checkForSemicolon,\n      ContinueStatement: checkForSemicolon,\n      ImportDeclaration: checkForSemicolon,\n      ExportAllDeclaration: checkForSemicolon,\n\n      ExportNamedDeclaration(node) {\n        if (!node.declaration) {\n          checkForSemicolon(node);\n        }\n      },\n\n      ExportDefaultDeclaration(node) {\n        if (!/(?:Class|Function)Declaration/u.test(node.declaration.type)) {\n          checkForSemicolon(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/semi.js"],"names":["FixTracker","require","astUtils","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","anyOf","items","enum","properties","beforeStatementContinuationChars","additionalProperties","minItems","maxItems","omitLastInOneLineBlock","create","context","OPT_OUT_PATTERN","options","never","exceptOneLine","Boolean","sourceCode","getSourceCode","report","node","missing","lastToken","getLastToken","message","fix","loc","start","end","getNextLocation","fixer","insertTextAfter","retainSurroundingTokens","remove","isRedundantSemi","semiToken","nextToken","getTokenAfter","isClosingBraceToken","isSemicolonToken","isEndOfArrowBlock","getNodeByRangeIndex","range","parent","isOnSameLineWithNextToken","prevToken","isTokenOnSameLine","maybeAsiHazardAfter","t","argument","declaration","maybeAsiHazardBefore","token","test","value","canRemoveSemicolon","isOneLinerBlock","line","checkForSemicolon","isSemi","oneLinerBlock","checkForSemicolonForVariableDeclaration","init","left","VariableDeclaration","ExpressionStatement","ReturnStatement","ThrowStatement","DoWhileStatement","DebuggerStatement","BreakStatement","ContinueStatement","ImportDeclaration","ExportAllDeclaration","ExportNamedDeclaration","ExportDefaultDeclaration"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to flag missing semicolons.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst FixTracker = require(\"./utils/fix-tracker\");\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require or disallow semicolons instead of ASI\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/semi\"\n        },\n\n        fixable: \"code\",\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"never\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                beforeStatementContinuationChars: {\n                                    enum: [\"always\", \"any\", \"never\"]\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                omitLastInOneLineBlock: { type: \"boolean\" }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        }\n    },\n\n    create(context) {\n\n        const OPT_OUT_PATTERN = /^[-[(/+`]/u; // One of [(/+-`\n        const options = context.options[1];\n        const never = context.options[0] === \"never\";\n        const exceptOneLine = Boolean(options && options.omitLastInOneLineBlock);\n        const beforeStatementContinuationChars = options && options.beforeStatementContinuationChars || \"any\";\n        const sourceCode = context.getSourceCode();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports a semicolon error with appropriate location and message.\n         * @param {ASTNode} node The node with an extra or missing semicolon.\n         * @param {boolean} missing True if the semicolon is missing.\n         * @returns {void}\n         */\n        function report(node, missing) {\n            const lastToken = sourceCode.getLastToken(node);\n            let message,\n                fix,\n                loc;\n\n            if (!missing) {\n                message = \"Missing semicolon.\";\n                loc = {\n                    start: lastToken.loc.end,\n                    end: astUtils.getNextLocation(sourceCode, lastToken.loc.end)\n                };\n                fix = function(fixer) {\n                    return fixer.insertTextAfter(lastToken, \";\");\n                };\n            } else {\n                message = \"Extra semicolon.\";\n                loc = lastToken.loc;\n                fix = function(fixer) {\n\n                    /*\n                     * Expand the replacement range to include the surrounding\n                     * tokens to avoid conflicting with no-extra-semi.\n                     * https://github.com/eslint/eslint/issues/7928\n                     */\n                    return new FixTracker(fixer, sourceCode)\n                        .retainSurroundingTokens(lastToken)\n                        .remove(lastToken);\n                };\n            }\n\n            context.report({\n                node,\n                loc,\n                message,\n                fix\n            });\n\n        }\n\n        /**\n         * Check whether a given semicolon token is redandant.\n         * @param {Token} semiToken A semicolon token to check.\n         * @returns {boolean} `true` if the next token is `;` or `}`.\n         */\n        function isRedundantSemi(semiToken) {\n            const nextToken = sourceCode.getTokenAfter(semiToken);\n\n            return (\n                !nextToken ||\n                astUtils.isClosingBraceToken(nextToken) ||\n                astUtils.isSemicolonToken(nextToken)\n            );\n        }\n\n        /**\n         * Check whether a given token is the closing brace of an arrow function.\n         * @param {Token} lastToken A token to check.\n         * @returns {boolean} `true` if the token is the closing brace of an arrow function.\n         */\n        function isEndOfArrowBlock(lastToken) {\n            if (!astUtils.isClosingBraceToken(lastToken)) {\n                return false;\n            }\n            const node = sourceCode.getNodeByRangeIndex(lastToken.range[0]);\n\n            return (\n                node.type === \"BlockStatement\" &&\n                node.parent.type === \"ArrowFunctionExpression\"\n            );\n        }\n\n        /**\n         * Check whether a given node is on the same line with the next token.\n         * @param {Node} node A statement node to check.\n         * @returns {boolean} `true` if the node is on the same line with the next token.\n         */\n        function isOnSameLineWithNextToken(node) {\n            const prevToken = sourceCode.getLastToken(node, 1);\n            const nextToken = sourceCode.getTokenAfter(node);\n\n            return !!nextToken && astUtils.isTokenOnSameLine(prevToken, nextToken);\n        }\n\n        /**\n         * Check whether a given node can connect the next line if the next line is unreliable.\n         * @param {Node} node A statement node to check.\n         * @returns {boolean} `true` if the node can connect the next line.\n         */\n        function maybeAsiHazardAfter(node) {\n            const t = node.type;\n\n            if (t === \"DoWhileStatement\" ||\n                t === \"BreakStatement\" ||\n                t === \"ContinueStatement\" ||\n                t === \"DebuggerStatement\" ||\n                t === \"ImportDeclaration\" ||\n                t === \"ExportAllDeclaration\"\n            ) {\n                return false;\n            }\n            if (t === \"ReturnStatement\") {\n                return Boolean(node.argument);\n            }\n            if (t === \"ExportNamedDeclaration\") {\n                return Boolean(node.declaration);\n            }\n            if (isEndOfArrowBlock(sourceCode.getLastToken(node, 1))) {\n                return false;\n            }\n\n            return true;\n        }\n\n        /**\n         * Check whether a given token can connect the previous statement.\n         * @param {Token} token A token to check.\n         * @returns {boolean} `true` if the token is one of `[`, `(`, `/`, `+`, `-`, ```, `++`, and `--`.\n         */\n        function maybeAsiHazardBefore(token) {\n            return (\n                Boolean(token) &&\n                OPT_OUT_PATTERN.test(token.value) &&\n                token.value !== \"++\" &&\n                token.value !== \"--\"\n            );\n        }\n\n        /**\n         * Check if the semicolon of a given node is unnecessary, only true if:\n         *   - next token is a valid statement divider (`;` or `}`).\n         *   - next token is on a new line and the node is not connectable to the new line.\n         * @param {Node} node A statement node to check.\n         * @returns {boolean} whether the semicolon is unnecessary.\n         */\n        function canRemoveSemicolon(node) {\n            if (isRedundantSemi(sourceCode.getLastToken(node))) {\n                return true; // `;;` or `;}`\n            }\n            if (isOnSameLineWithNextToken(node)) {\n                return false; // One liner.\n            }\n            if (beforeStatementContinuationChars === \"never\" && !maybeAsiHazardAfter(node)) {\n                return true; // ASI works. This statement doesn't connect to the next.\n            }\n            if (!maybeAsiHazardBefore(sourceCode.getTokenAfter(node))) {\n                return true; // ASI works. The next token doesn't connect to this statement.\n            }\n\n            return false;\n        }\n\n        /**\n         * Checks a node to see if it's in a one-liner block statement.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} whether the node is in a one-liner block statement.\n         */\n        function isOneLinerBlock(node) {\n            const parent = node.parent;\n            const nextToken = sourceCode.getTokenAfter(node);\n\n            if (!nextToken || nextToken.value !== \"}\") {\n                return false;\n            }\n            return (\n                !!parent &&\n                parent.type === \"BlockStatement\" &&\n                parent.loc.start.line === parent.loc.end.line\n            );\n        }\n\n        /**\n         * Checks a node to see if it's followed by a semicolon.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkForSemicolon(node) {\n            const isSemi = astUtils.isSemicolonToken(sourceCode.getLastToken(node));\n\n            if (never) {\n                if (isSemi && canRemoveSemicolon(node)) {\n                    report(node, true);\n                } else if (!isSemi && beforeStatementContinuationChars === \"always\" && maybeAsiHazardBefore(sourceCode.getTokenAfter(node))) {\n                    report(node);\n                }\n            } else {\n                const oneLinerBlock = (exceptOneLine && isOneLinerBlock(node));\n\n                if (isSemi && oneLinerBlock) {\n                    report(node, true);\n                } else if (!isSemi && !oneLinerBlock) {\n                    report(node);\n                }\n            }\n        }\n\n        /**\n         * Checks to see if there's a semicolon after a variable declaration.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkForSemicolonForVariableDeclaration(node) {\n            const parent = node.parent;\n\n            if ((parent.type !== \"ForStatement\" || parent.init !== node) &&\n                (!/^For(?:In|Of)Statement/u.test(parent.type) || parent.left !== node)\n            ) {\n                checkForSemicolon(node);\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            VariableDeclaration: checkForSemicolonForVariableDeclaration,\n            ExpressionStatement: checkForSemicolon,\n            ReturnStatement: checkForSemicolon,\n            ThrowStatement: checkForSemicolon,\n            DoWhileStatement: checkForSemicolon,\n            DebuggerStatement: checkForSemicolon,\n            BreakStatement: checkForSemicolon,\n            ContinueStatement: checkForSemicolon,\n            ImportDeclaration: checkForSemicolon,\n            ExportAllDeclaration: checkForSemicolon,\n            ExportNamedDeclaration(node) {\n                if (!node.declaration) {\n                    checkForSemicolon(node);\n                }\n            },\n            ExportDefaultDeclaration(node) {\n                if (!/(?:Class|Function)Declaration/u.test(node.declaration.type)) {\n                    checkForSemicolon(node);\n                }\n            }\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}