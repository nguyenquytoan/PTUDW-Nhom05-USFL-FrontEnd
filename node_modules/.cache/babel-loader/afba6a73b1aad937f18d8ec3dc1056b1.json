{"ast":null,"code":"var assert = require('assert');\n\nvar vows = require('vows');\n\nvar path = require('path');\n\nvar fs = require('fs');\n\nvar validate = require('../lib/validate').validate;\n\nvar revision = 'draft-03';\nvar schemaRoot = path.join(__dirname, '..', revision);\nvar schemaNames = ['schema', 'hyper-schema', 'links', 'json-ref'];\nvar schemas = {};\nschemaNames.forEach(function (name) {\n  var file = path.join(schemaRoot, name);\n  schemas[name] = loadSchema(file);\n});\nschemaNames.forEach(function (name) {\n  var s,\n      n = name + '-nsd',\n      f = path.join(schemaRoot, name);\n  schemas[n] = loadSchema(f);\n  s = schemas[n];\n  delete s['$schema'];\n});\n\nfunction loadSchema(path) {\n  var data = fs.readFileSync(path, 'utf-8');\n  var schema = JSON.parse(data);\n  return schema;\n}\n\nfunction resultIsValid() {\n  return function (result) {\n    assert.isObject(result); //assert.isBoolean(result.valid);\n\n    assert.equal(typeof result.valid, 'boolean');\n    assert.isArray(result.errors);\n\n    for (var i = 0; i < result.errors.length; i++) {\n      assert.notEqual(result.errors[i], null, 'errors[' + i + '] is null');\n    }\n  };\n}\n\nfunction assertValidates(doc, schema) {\n  var context = {};\n  context[': validate(' + doc + ', ' + schema + ')'] = {\n    topic: validate(schemas[doc], schemas[schema]),\n    'returns valid result': resultIsValid(),\n    'with valid=true': function (result) {\n      assert.equal(result.valid, true);\n    },\n    'and no errors': function (result) {\n      // XXX work-around for bug in vows: [null] chokes it\n      if (result.errors[0] == null) assert.fail('(errors contains null)');\n      assert.length(result.errors, 0);\n    }\n  };\n  return context;\n}\n\nfunction assertSelfValidates(doc) {\n  var context = {};\n  context[': validate(' + doc + ')'] = {\n    topic: validate(schemas[doc]),\n    'returns valid result': resultIsValid(),\n    'with valid=true': function (result) {\n      assert.equal(result.valid, true);\n    },\n    'and no errors': function (result) {\n      assert.length(result.errors, 0);\n    }\n  };\n  return context;\n}\n\nvar suite = vows.describe('JSON Schema').addBatch({\n  'Core-NSD self-validates': assertSelfValidates('schema-nsd'),\n  'Core-NSD/Core-NSD': assertValidates('schema-nsd', 'schema-nsd'),\n  'Core-NSD/Core': assertValidates('schema-nsd', 'schema'),\n  'Core self-validates': assertSelfValidates('schema'),\n  'Core/Core': assertValidates('schema', 'schema'),\n  'Hyper-NSD self-validates': assertSelfValidates('hyper-schema-nsd'),\n  'Hyper self-validates': assertSelfValidates('hyper-schema'),\n  'Hyper/Hyper': assertValidates('hyper-schema', 'hyper-schema'),\n  'Hyper/Core': assertValidates('hyper-schema', 'schema'),\n  'Links-NSD self-validates': assertSelfValidates('links-nsd'),\n  'Links self-validates': assertSelfValidates('links'),\n  'Links/Hyper': assertValidates('links', 'hyper-schema'),\n  'Links/Core': assertValidates('links', 'schema'),\n  'Json-Ref self-validates': assertSelfValidates('json-ref'),\n  'Json-Ref/Hyper': assertValidates('json-ref', 'hyper-schema'),\n  'Json-Ref/Core': assertValidates('json-ref', 'schema')\n}).export(module);","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/json-schema/test/tests.js"],"names":["assert","require","vows","path","fs","validate","revision","schemaRoot","join","__dirname","schemaNames","schemas","forEach","name","file","loadSchema","s","n","f","data","readFileSync","schema","JSON","parse","resultIsValid","result","isObject","equal","valid","isArray","errors","i","length","notEqual","assertValidates","doc","context","topic","fail","assertSelfValidates","suite","describe","addBatch","export","module"],"mappings":"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","sourcesContent":["var assert = require('assert');\r\nvar vows = require('vows');\r\nvar path = require('path');\r\nvar fs = require('fs');\r\n\r\nvar validate = require('../lib/validate').validate;\r\n\r\n\r\nvar revision = 'draft-03';\r\nvar schemaRoot = path.join(__dirname, '..', revision);\r\nvar schemaNames = ['schema', 'hyper-schema', 'links', 'json-ref' ];\r\nvar schemas = {};\r\n\r\nschemaNames.forEach(function(name) {\r\n    var file = path.join(schemaRoot, name);\r\n    schemas[name] = loadSchema(file);\r\n});\r\n\r\nschemaNames.forEach(function(name) {\r\n    var s, n = name+'-nsd', f = path.join(schemaRoot, name);\r\n    schemas[n] = loadSchema(f);\r\n    s = schemas[n];\r\n    delete s['$schema'];\r\n});\r\n\r\nfunction loadSchema(path) {\r\n    var data = fs.readFileSync(path, 'utf-8');\r\n    var schema = JSON.parse(data);\r\n    return schema;\r\n}\r\n\r\nfunction resultIsValid() {\r\n    return function(result) {\r\n        assert.isObject(result);\r\n        //assert.isBoolean(result.valid);\r\n        assert.equal(typeof(result.valid), 'boolean');\r\n        assert.isArray(result.errors);\r\n        for (var i = 0; i < result.errors.length; i++) {\r\n            assert.notEqual(result.errors[i], null, 'errors['+i+'] is null');\r\n        }\r\n    }\r\n}\r\n\r\nfunction assertValidates(doc, schema) {\r\n    var context = {};\r\n\r\n    context[': validate('+doc+', '+schema+')'] = {\r\n        topic: validate(schemas[doc], schemas[schema]),\r\n        'returns valid result': resultIsValid(),\r\n        'with valid=true': function(result) { assert.equal(result.valid, true); },\r\n        'and no errors':   function(result) {\r\n            // XXX work-around for bug in vows: [null] chokes it\r\n            if (result.errors[0] == null) assert.fail('(errors contains null)');\r\n            assert.length(result.errors, 0);\r\n        }\r\n    };\r\n\r\n    return context;\r\n}\r\n\r\nfunction assertSelfValidates(doc) {\r\n    var context = {};\r\n\r\n    context[': validate('+doc+')'] = {\r\n        topic: validate(schemas[doc]),\r\n        'returns valid result': resultIsValid(),\r\n        'with valid=true': function(result) { assert.equal(result.valid, true); },\r\n        'and no errors':   function(result) { assert.length(result.errors, 0); }\r\n    };\r\n\r\n    return context;\r\n}\r\n\r\nvar suite = vows.describe('JSON Schema').addBatch({\r\n    'Core-NSD self-validates': assertSelfValidates('schema-nsd'),\r\n    'Core-NSD/Core-NSD': assertValidates('schema-nsd', 'schema-nsd'),\r\n    'Core-NSD/Core': assertValidates('schema-nsd', 'schema'),\r\n\r\n    'Core self-validates': assertSelfValidates('schema'),\r\n    'Core/Core': assertValidates('schema', 'schema'),\r\n\r\n    'Hyper-NSD self-validates': assertSelfValidates('hyper-schema-nsd'),\r\n    'Hyper self-validates': assertSelfValidates('hyper-schema'),\r\n    'Hyper/Hyper': assertValidates('hyper-schema', 'hyper-schema'),\r\n    'Hyper/Core': assertValidates('hyper-schema', 'schema'),\r\n\r\n    'Links-NSD self-validates': assertSelfValidates('links-nsd'),\r\n    'Links self-validates': assertSelfValidates('links'),\r\n    'Links/Hyper': assertValidates('links', 'hyper-schema'),\r\n    'Links/Core': assertValidates('links', 'schema'),\r\n\r\n    'Json-Ref self-validates': assertSelfValidates('json-ref'),\r\n    'Json-Ref/Hyper': assertValidates('json-ref', 'hyper-schema'),\r\n    'Json-Ref/Core': assertValidates('json-ref', 'schema')\r\n}).export(module);\r\n"]},"metadata":{},"sourceType":"script"}