{"ast":null,"code":"/*! @author Toru Nagashima <https://github.com/mysticatea> */\nvar ast = /*#__PURE__*/Object.freeze({});\n\nfunction isIdStart(cp) {\n  if (cp < 0x41) return false;\n  if (cp < 0x5b) return true;\n  if (cp < 0x61) return false;\n  if (cp < 0x7b) return true;\n  return isLargeIdStart(cp);\n}\n\nfunction isIdContinue(cp) {\n  if (cp < 0x30) return false;\n  if (cp < 0x3a) return true;\n  if (cp < 0x41) return false;\n  if (cp < 0x5b) return true;\n  if (cp === 0x5f) return true;\n  if (cp < 0x61) return false;\n  if (cp < 0x7b) return true;\n  return isLargeIdStart(cp) || isLargeIdContinue(cp);\n}\n\nfunction isLargeIdStart(cp) {\n  if (cp < 0x30a1) {\n    if (cp < 0xec0) {\n      if (cp < 0xa35) {\n        if (cp < 0x6e5) {\n          if (cp < 0x37a) {\n            if (cp < 0x294) {\n              if (cp < 0xf8) {\n                if (cp === 0xaa) return true;\n                if (cp === 0xb5) return true;\n                if (cp === 0xba) return true;\n                if (cp < 0xc0) return false;\n                if (cp < 0xd7) return true;\n                if (cp < 0xd8) return false;\n                if (cp < 0xf7) return true;\n                return false;\n              }\n\n              if (cp < 0x1bb) return true;\n              if (cp === 0x1bb) return true;\n              if (cp < 0x1bc) return false;\n              if (cp < 0x1c0) return true;\n              if (cp < 0x1c0) return false;\n              if (cp < 0x1c4) return true;\n              if (cp < 0x1c4) return false;\n              if (cp < 0x294) return true;\n              return false;\n            }\n\n            if (cp < 0x2ec) {\n              if (cp === 0x294) return true;\n              if (cp < 0x295) return false;\n              if (cp < 0x2b0) return true;\n              if (cp < 0x2b0) return false;\n              if (cp < 0x2c2) return true;\n              if (cp < 0x2c6) return false;\n              if (cp < 0x2d2) return true;\n              if (cp < 0x2e0) return false;\n              if (cp < 0x2e5) return true;\n              return false;\n            }\n\n            if (cp === 0x2ec) return true;\n            if (cp === 0x2ee) return true;\n            if (cp < 0x370) return false;\n            if (cp < 0x374) return true;\n            if (cp === 0x374) return true;\n            if (cp < 0x376) return false;\n            if (cp < 0x378) return true;\n            return false;\n          }\n\n          if (cp < 0x531) {\n            if (cp < 0x38c) {\n              if (cp === 0x37a) return true;\n              if (cp < 0x37b) return false;\n              if (cp < 0x37e) return true;\n              if (cp === 0x37f) return true;\n              if (cp === 0x386) return true;\n              if (cp < 0x388) return false;\n              if (cp < 0x38b) return true;\n              return false;\n            }\n\n            if (cp === 0x38c) return true;\n            if (cp < 0x38e) return false;\n            if (cp < 0x3a2) return true;\n            if (cp < 0x3a3) return false;\n            if (cp < 0x3f6) return true;\n            if (cp < 0x3f7) return false;\n            if (cp < 0x482) return true;\n            if (cp < 0x48a) return false;\n            if (cp < 0x530) return true;\n            return false;\n          }\n\n          if (cp < 0x620) {\n            if (cp < 0x531) return false;\n            if (cp < 0x557) return true;\n            if (cp === 0x559) return true;\n            if (cp < 0x560) return false;\n            if (cp < 0x589) return true;\n            if (cp < 0x5d0) return false;\n            if (cp < 0x5eb) return true;\n            if (cp < 0x5ef) return false;\n            if (cp < 0x5f3) return true;\n            return false;\n          }\n\n          if (cp < 0x640) return true;\n          if (cp === 0x640) return true;\n          if (cp < 0x641) return false;\n          if (cp < 0x64b) return true;\n          if (cp < 0x66e) return false;\n          if (cp < 0x670) return true;\n          if (cp < 0x671) return false;\n          if (cp < 0x6d4) return true;\n          if (cp === 0x6d5) return true;\n          return false;\n        }\n\n        if (cp < 0x950) {\n          if (cp < 0x7fa) {\n            if (cp < 0x712) {\n              if (cp < 0x6e5) return false;\n              if (cp < 0x6e7) return true;\n              if (cp < 0x6ee) return false;\n              if (cp < 0x6f0) return true;\n              if (cp < 0x6fa) return false;\n              if (cp < 0x6fd) return true;\n              if (cp === 0x6ff) return true;\n              if (cp === 0x710) return true;\n              return false;\n            }\n\n            if (cp < 0x730) return true;\n            if (cp < 0x74d) return false;\n            if (cp < 0x7a6) return true;\n            if (cp === 0x7b1) return true;\n            if (cp < 0x7ca) return false;\n            if (cp < 0x7eb) return true;\n            if (cp < 0x7f4) return false;\n            if (cp < 0x7f6) return true;\n            return false;\n          }\n\n          if (cp < 0x840) {\n            if (cp === 0x7fa) return true;\n            if (cp < 0x800) return false;\n            if (cp < 0x816) return true;\n            if (cp === 0x81a) return true;\n            if (cp === 0x824) return true;\n            if (cp === 0x828) return true;\n            return false;\n          }\n\n          if (cp < 0x859) return true;\n          if (cp < 0x860) return false;\n          if (cp < 0x86b) return true;\n          if (cp < 0x8a0) return false;\n          if (cp < 0x8b5) return true;\n          if (cp < 0x8b6) return false;\n          if (cp < 0x8be) return true;\n          if (cp < 0x904) return false;\n          if (cp < 0x93a) return true;\n          if (cp === 0x93d) return true;\n          return false;\n        }\n\n        if (cp < 0x9bd) {\n          if (cp < 0x98f) {\n            if (cp === 0x950) return true;\n            if (cp < 0x958) return false;\n            if (cp < 0x962) return true;\n            if (cp === 0x971) return true;\n            if (cp < 0x972) return false;\n            if (cp < 0x981) return true;\n            if (cp < 0x985) return false;\n            if (cp < 0x98d) return true;\n            return false;\n          }\n\n          if (cp < 0x991) return true;\n          if (cp < 0x993) return false;\n          if (cp < 0x9a9) return true;\n          if (cp < 0x9aa) return false;\n          if (cp < 0x9b1) return true;\n          if (cp === 0x9b2) return true;\n          if (cp < 0x9b6) return false;\n          if (cp < 0x9ba) return true;\n          return false;\n        }\n\n        if (cp < 0x9fc) {\n          if (cp === 0x9bd) return true;\n          if (cp === 0x9ce) return true;\n          if (cp < 0x9dc) return false;\n          if (cp < 0x9de) return true;\n          if (cp < 0x9df) return false;\n          if (cp < 0x9e2) return true;\n          if (cp < 0x9f0) return false;\n          if (cp < 0x9f2) return true;\n          return false;\n        }\n\n        if (cp === 0x9fc) return true;\n        if (cp < 0xa05) return false;\n        if (cp < 0xa0b) return true;\n        if (cp < 0xa0f) return false;\n        if (cp < 0xa11) return true;\n        if (cp < 0xa13) return false;\n        if (cp < 0xa29) return true;\n        if (cp < 0xa2a) return false;\n        if (cp < 0xa31) return true;\n        if (cp < 0xa32) return false;\n        if (cp < 0xa34) return true;\n        return false;\n      }\n\n      if (cp < 0xc60) {\n        if (cp < 0xb3d) {\n          if (cp < 0xab5) {\n            if (cp < 0xa85) {\n              if (cp < 0xa35) return false;\n              if (cp < 0xa37) return true;\n              if (cp < 0xa38) return false;\n              if (cp < 0xa3a) return true;\n              if (cp < 0xa59) return false;\n              if (cp < 0xa5d) return true;\n              if (cp === 0xa5e) return true;\n              if (cp < 0xa72) return false;\n              if (cp < 0xa75) return true;\n              return false;\n            }\n\n            if (cp < 0xa8e) return true;\n            if (cp < 0xa8f) return false;\n            if (cp < 0xa92) return true;\n            if (cp < 0xa93) return false;\n            if (cp < 0xaa9) return true;\n            if (cp < 0xaaa) return false;\n            if (cp < 0xab1) return true;\n            if (cp < 0xab2) return false;\n            if (cp < 0xab4) return true;\n            return false;\n          }\n\n          if (cp < 0xb05) {\n            if (cp < 0xab5) return false;\n            if (cp < 0xaba) return true;\n            if (cp === 0xabd) return true;\n            if (cp === 0xad0) return true;\n            if (cp < 0xae0) return false;\n            if (cp < 0xae2) return true;\n            if (cp === 0xaf9) return true;\n            return false;\n          }\n\n          if (cp < 0xb0d) return true;\n          if (cp < 0xb0f) return false;\n          if (cp < 0xb11) return true;\n          if (cp < 0xb13) return false;\n          if (cp < 0xb29) return true;\n          if (cp < 0xb2a) return false;\n          if (cp < 0xb31) return true;\n          if (cp < 0xb32) return false;\n          if (cp < 0xb34) return true;\n          if (cp < 0xb35) return false;\n          if (cp < 0xb3a) return true;\n          return false;\n        }\n\n        if (cp < 0xb9e) {\n          if (cp < 0xb85) {\n            if (cp === 0xb3d) return true;\n            if (cp < 0xb5c) return false;\n            if (cp < 0xb5e) return true;\n            if (cp < 0xb5f) return false;\n            if (cp < 0xb62) return true;\n            if (cp === 0xb71) return true;\n            if (cp === 0xb83) return true;\n            return false;\n          }\n\n          if (cp < 0xb8b) return true;\n          if (cp < 0xb8e) return false;\n          if (cp < 0xb91) return true;\n          if (cp < 0xb92) return false;\n          if (cp < 0xb96) return true;\n          if (cp < 0xb99) return false;\n          if (cp < 0xb9b) return true;\n          if (cp === 0xb9c) return true;\n          return false;\n        }\n\n        if (cp < 0xc05) {\n          if (cp < 0xb9e) return false;\n          if (cp < 0xba0) return true;\n          if (cp < 0xba3) return false;\n          if (cp < 0xba5) return true;\n          if (cp < 0xba8) return false;\n          if (cp < 0xbab) return true;\n          if (cp < 0xbae) return false;\n          if (cp < 0xbba) return true;\n          if (cp === 0xbd0) return true;\n          return false;\n        }\n\n        if (cp < 0xc0d) return true;\n        if (cp < 0xc0e) return false;\n        if (cp < 0xc11) return true;\n        if (cp < 0xc12) return false;\n        if (cp < 0xc29) return true;\n        if (cp < 0xc2a) return false;\n        if (cp < 0xc3a) return true;\n        if (cp === 0xc3d) return true;\n        if (cp < 0xc58) return false;\n        if (cp < 0xc5b) return true;\n        return false;\n      }\n\n      if (cp < 0xdb3) {\n        if (cp < 0xcf1) {\n          if (cp < 0xcaa) {\n            if (cp < 0xc60) return false;\n            if (cp < 0xc62) return true;\n            if (cp === 0xc80) return true;\n            if (cp < 0xc85) return false;\n            if (cp < 0xc8d) return true;\n            if (cp < 0xc8e) return false;\n            if (cp < 0xc91) return true;\n            if (cp < 0xc92) return false;\n            if (cp < 0xca9) return true;\n            return false;\n          }\n\n          if (cp < 0xcb4) return true;\n          if (cp < 0xcb5) return false;\n          if (cp < 0xcba) return true;\n          if (cp === 0xcbd) return true;\n          if (cp === 0xcde) return true;\n          if (cp < 0xce0) return false;\n          if (cp < 0xce2) return true;\n          return false;\n        }\n\n        if (cp < 0xd4e) {\n          if (cp < 0xcf1) return false;\n          if (cp < 0xcf3) return true;\n          if (cp < 0xd05) return false;\n          if (cp < 0xd0d) return true;\n          if (cp < 0xd0e) return false;\n          if (cp < 0xd11) return true;\n          if (cp < 0xd12) return false;\n          if (cp < 0xd3b) return true;\n          if (cp === 0xd3d) return true;\n          return false;\n        }\n\n        if (cp === 0xd4e) return true;\n        if (cp < 0xd54) return false;\n        if (cp < 0xd57) return true;\n        if (cp < 0xd5f) return false;\n        if (cp < 0xd62) return true;\n        if (cp < 0xd7a) return false;\n        if (cp < 0xd80) return true;\n        if (cp < 0xd85) return false;\n        if (cp < 0xd97) return true;\n        if (cp < 0xd9a) return false;\n        if (cp < 0xdb2) return true;\n        return false;\n      }\n\n      if (cp < 0xe8a) {\n        if (cp < 0xe40) {\n          if (cp < 0xdb3) return false;\n          if (cp < 0xdbc) return true;\n          if (cp === 0xdbd) return true;\n          if (cp < 0xdc0) return false;\n          if (cp < 0xdc7) return true;\n          if (cp < 0xe01) return false;\n          if (cp < 0xe31) return true;\n          if (cp < 0xe32) return false;\n          if (cp < 0xe34) return true;\n          return false;\n        }\n\n        if (cp < 0xe46) return true;\n        if (cp === 0xe46) return true;\n        if (cp < 0xe81) return false;\n        if (cp < 0xe83) return true;\n        if (cp === 0xe84) return true;\n        if (cp < 0xe87) return false;\n        if (cp < 0xe89) return true;\n        return false;\n      }\n\n      if (cp < 0xea5) {\n        if (cp === 0xe8a) return true;\n        if (cp === 0xe8d) return true;\n        if (cp < 0xe94) return false;\n        if (cp < 0xe98) return true;\n        if (cp < 0xe99) return false;\n        if (cp < 0xea0) return true;\n        if (cp < 0xea1) return false;\n        if (cp < 0xea4) return true;\n        return false;\n      }\n\n      if (cp === 0xea5) return true;\n      if (cp === 0xea7) return true;\n      if (cp < 0xeaa) return false;\n      if (cp < 0xeac) return true;\n      if (cp < 0xead) return false;\n      if (cp < 0xeb1) return true;\n      if (cp < 0xeb2) return false;\n      if (cp < 0xeb4) return true;\n      if (cp === 0xebd) return true;\n      return false;\n    }\n\n    if (cp < 0x1ce9) {\n      if (cp < 0x166f) {\n        if (cp < 0x10fd) {\n          if (cp < 0x105a) {\n            if (cp < 0xf49) {\n              if (cp < 0xec0) return false;\n              if (cp < 0xec5) return true;\n              if (cp === 0xec6) return true;\n              if (cp < 0xedc) return false;\n              if (cp < 0xee0) return true;\n              if (cp === 0xf00) return true;\n              if (cp < 0xf40) return false;\n              if (cp < 0xf48) return true;\n              return false;\n            }\n\n            if (cp < 0xf6d) return true;\n            if (cp < 0xf88) return false;\n            if (cp < 0xf8d) return true;\n            if (cp < 0x1000) return false;\n            if (cp < 0x102b) return true;\n            if (cp === 0x103f) return true;\n            if (cp < 0x1050) return false;\n            if (cp < 0x1056) return true;\n            return false;\n          }\n\n          if (cp < 0x108e) {\n            if (cp < 0x105a) return false;\n            if (cp < 0x105e) return true;\n            if (cp === 0x1061) return true;\n            if (cp < 0x1065) return false;\n            if (cp < 0x1067) return true;\n            if (cp < 0x106e) return false;\n            if (cp < 0x1071) return true;\n            if (cp < 0x1075) return false;\n            if (cp < 0x1082) return true;\n            return false;\n          }\n\n          if (cp === 0x108e) return true;\n          if (cp < 0x10a0) return false;\n          if (cp < 0x10c6) return true;\n          if (cp === 0x10c7) return true;\n          if (cp === 0x10cd) return true;\n          if (cp < 0x10d0) return false;\n          if (cp < 0x10fb) return true;\n          if (cp === 0x10fc) return true;\n          return false;\n        }\n\n        if (cp < 0x12b8) {\n          if (cp < 0x125a) {\n            if (cp < 0x10fd) return false;\n            if (cp < 0x1100) return true;\n            if (cp < 0x1100) return false;\n            if (cp < 0x1249) return true;\n            if (cp < 0x124a) return false;\n            if (cp < 0x124e) return true;\n            if (cp < 0x1250) return false;\n            if (cp < 0x1257) return true;\n            if (cp === 0x1258) return true;\n            return false;\n          }\n\n          if (cp < 0x125e) return true;\n          if (cp < 0x1260) return false;\n          if (cp < 0x1289) return true;\n          if (cp < 0x128a) return false;\n          if (cp < 0x128e) return true;\n          if (cp < 0x1290) return false;\n          if (cp < 0x12b1) return true;\n          if (cp < 0x12b2) return false;\n          if (cp < 0x12b6) return true;\n          return false;\n        }\n\n        if (cp < 0x1312) {\n          if (cp < 0x12b8) return false;\n          if (cp < 0x12bf) return true;\n          if (cp === 0x12c0) return true;\n          if (cp < 0x12c2) return false;\n          if (cp < 0x12c6) return true;\n          if (cp < 0x12c8) return false;\n          if (cp < 0x12d7) return true;\n          if (cp < 0x12d8) return false;\n          if (cp < 0x1311) return true;\n          return false;\n        }\n\n        if (cp < 0x1316) return true;\n        if (cp < 0x1318) return false;\n        if (cp < 0x135b) return true;\n        if (cp < 0x1380) return false;\n        if (cp < 0x1390) return true;\n        if (cp < 0x13a0) return false;\n        if (cp < 0x13f6) return true;\n        if (cp < 0x13f8) return false;\n        if (cp < 0x13fe) return true;\n        if (cp < 0x1401) return false;\n        if (cp < 0x166d) return true;\n        return false;\n      }\n\n      if (cp < 0x18b0) {\n        if (cp < 0x176e) {\n          if (cp < 0x1700) {\n            if (cp < 0x166f) return false;\n            if (cp < 0x1680) return true;\n            if (cp < 0x1681) return false;\n            if (cp < 0x169b) return true;\n            if (cp < 0x16a0) return false;\n            if (cp < 0x16eb) return true;\n            if (cp < 0x16ee) return false;\n            if (cp < 0x16f1) return true;\n            if (cp < 0x16f1) return false;\n            if (cp < 0x16f9) return true;\n            return false;\n          }\n\n          if (cp < 0x170d) return true;\n          if (cp < 0x170e) return false;\n          if (cp < 0x1712) return true;\n          if (cp < 0x1720) return false;\n          if (cp < 0x1732) return true;\n          if (cp < 0x1740) return false;\n          if (cp < 0x1752) return true;\n          if (cp < 0x1760) return false;\n          if (cp < 0x176d) return true;\n          return false;\n        }\n\n        if (cp < 0x1843) {\n          if (cp < 0x176e) return false;\n          if (cp < 0x1771) return true;\n          if (cp < 0x1780) return false;\n          if (cp < 0x17b4) return true;\n          if (cp === 0x17d7) return true;\n          if (cp === 0x17dc) return true;\n          if (cp < 0x1820) return false;\n          if (cp < 0x1843) return true;\n          return false;\n        }\n\n        if (cp === 0x1843) return true;\n        if (cp < 0x1844) return false;\n        if (cp < 0x1879) return true;\n        if (cp < 0x1880) return false;\n        if (cp < 0x1885) return true;\n        if (cp < 0x1885) return false;\n        if (cp < 0x1887) return true;\n        if (cp < 0x1887) return false;\n        if (cp < 0x18a9) return true;\n        if (cp === 0x18aa) return true;\n        return false;\n      }\n\n      if (cp < 0x1b45) {\n        if (cp < 0x19b0) {\n          if (cp < 0x18b0) return false;\n          if (cp < 0x18f6) return true;\n          if (cp < 0x1900) return false;\n          if (cp < 0x191f) return true;\n          if (cp < 0x1950) return false;\n          if (cp < 0x196e) return true;\n          if (cp < 0x1970) return false;\n          if (cp < 0x1975) return true;\n          if (cp < 0x1980) return false;\n          if (cp < 0x19ac) return true;\n          return false;\n        }\n\n        if (cp < 0x19ca) return true;\n        if (cp < 0x1a00) return false;\n        if (cp < 0x1a17) return true;\n        if (cp < 0x1a20) return false;\n        if (cp < 0x1a55) return true;\n        if (cp === 0x1aa7) return true;\n        if (cp < 0x1b05) return false;\n        if (cp < 0x1b34) return true;\n        return false;\n      }\n\n      if (cp < 0x1c4d) {\n        if (cp < 0x1b45) return false;\n        if (cp < 0x1b4c) return true;\n        if (cp < 0x1b83) return false;\n        if (cp < 0x1ba1) return true;\n        if (cp < 0x1bae) return false;\n        if (cp < 0x1bb0) return true;\n        if (cp < 0x1bba) return false;\n        if (cp < 0x1be6) return true;\n        if (cp < 0x1c00) return false;\n        if (cp < 0x1c24) return true;\n        return false;\n      }\n\n      if (cp < 0x1c50) return true;\n      if (cp < 0x1c5a) return false;\n      if (cp < 0x1c78) return true;\n      if (cp < 0x1c78) return false;\n      if (cp < 0x1c7e) return true;\n      if (cp < 0x1c80) return false;\n      if (cp < 0x1c89) return true;\n      if (cp < 0x1c90) return false;\n      if (cp < 0x1cbb) return true;\n      if (cp < 0x1cbd) return false;\n      if (cp < 0x1cc0) return true;\n      return false;\n    }\n\n    if (cp < 0x212f) {\n      if (cp < 0x1fc2) {\n        if (cp < 0x1f18) {\n          if (cp < 0x1d6b) {\n            if (cp < 0x1ce9) return false;\n            if (cp < 0x1ced) return true;\n            if (cp < 0x1cee) return false;\n            if (cp < 0x1cf2) return true;\n            if (cp < 0x1cf5) return false;\n            if (cp < 0x1cf7) return true;\n            if (cp < 0x1d00) return false;\n            if (cp < 0x1d2c) return true;\n            if (cp < 0x1d2c) return false;\n            if (cp < 0x1d6b) return true;\n            return false;\n          }\n\n          if (cp < 0x1d78) return true;\n          if (cp === 0x1d78) return true;\n          if (cp < 0x1d79) return false;\n          if (cp < 0x1d9b) return true;\n          if (cp < 0x1d9b) return false;\n          if (cp < 0x1dc0) return true;\n          if (cp < 0x1e00) return false;\n          if (cp < 0x1f16) return true;\n          return false;\n        }\n\n        if (cp < 0x1f5b) {\n          if (cp < 0x1f18) return false;\n          if (cp < 0x1f1e) return true;\n          if (cp < 0x1f20) return false;\n          if (cp < 0x1f46) return true;\n          if (cp < 0x1f48) return false;\n          if (cp < 0x1f4e) return true;\n          if (cp < 0x1f50) return false;\n          if (cp < 0x1f58) return true;\n          if (cp === 0x1f59) return true;\n          return false;\n        }\n\n        if (cp === 0x1f5b) return true;\n        if (cp === 0x1f5d) return true;\n        if (cp < 0x1f5f) return false;\n        if (cp < 0x1f7e) return true;\n        if (cp < 0x1f80) return false;\n        if (cp < 0x1fb5) return true;\n        if (cp < 0x1fb6) return false;\n        if (cp < 0x1fbd) return true;\n        if (cp === 0x1fbe) return true;\n        return false;\n      }\n\n      if (cp < 0x2102) {\n        if (cp < 0x1ff2) {\n          if (cp < 0x1fc2) return false;\n          if (cp < 0x1fc5) return true;\n          if (cp < 0x1fc6) return false;\n          if (cp < 0x1fcd) return true;\n          if (cp < 0x1fd0) return false;\n          if (cp < 0x1fd4) return true;\n          if (cp < 0x1fd6) return false;\n          if (cp < 0x1fdc) return true;\n          if (cp < 0x1fe0) return false;\n          if (cp < 0x1fed) return true;\n          return false;\n        }\n\n        if (cp < 0x1ff5) return true;\n        if (cp < 0x1ff6) return false;\n        if (cp < 0x1ffd) return true;\n        if (cp === 0x2071) return true;\n        if (cp === 0x207f) return true;\n        if (cp < 0x2090) return false;\n        if (cp < 0x209d) return true;\n        return false;\n      }\n\n      if (cp < 0x2119) {\n        if (cp === 0x2102) return true;\n        if (cp === 0x2107) return true;\n        if (cp < 0x210a) return false;\n        if (cp < 0x2114) return true;\n        if (cp === 0x2115) return true;\n        if (cp === 0x2118) return true;\n        return false;\n      }\n\n      if (cp < 0x211e) return true;\n      if (cp === 0x2124) return true;\n      if (cp === 0x2126) return true;\n      if (cp === 0x2128) return true;\n      if (cp < 0x212a) return false;\n      if (cp < 0x212e) return true;\n      if (cp === 0x212e) return true;\n      return false;\n    }\n\n    if (cp < 0x2d80) {\n      if (cp < 0x2c30) {\n        if (cp < 0x214e) {\n          if (cp < 0x212f) return false;\n          if (cp < 0x2135) return true;\n          if (cp < 0x2135) return false;\n          if (cp < 0x2139) return true;\n          if (cp === 0x2139) return true;\n          if (cp < 0x213c) return false;\n          if (cp < 0x2140) return true;\n          if (cp < 0x2145) return false;\n          if (cp < 0x214a) return true;\n          return false;\n        }\n\n        if (cp === 0x214e) return true;\n        if (cp < 0x2160) return false;\n        if (cp < 0x2183) return true;\n        if (cp < 0x2183) return false;\n        if (cp < 0x2185) return true;\n        if (cp < 0x2185) return false;\n        if (cp < 0x2189) return true;\n        if (cp < 0x2c00) return false;\n        if (cp < 0x2c2f) return true;\n        return false;\n      }\n\n      if (cp < 0x2cf2) {\n        if (cp < 0x2c30) return false;\n        if (cp < 0x2c5f) return true;\n        if (cp < 0x2c60) return false;\n        if (cp < 0x2c7c) return true;\n        if (cp < 0x2c7c) return false;\n        if (cp < 0x2c7e) return true;\n        if (cp < 0x2c7e) return false;\n        if (cp < 0x2ce5) return true;\n        if (cp < 0x2ceb) return false;\n        if (cp < 0x2cef) return true;\n        return false;\n      }\n\n      if (cp < 0x2cf4) return true;\n      if (cp < 0x2d00) return false;\n      if (cp < 0x2d26) return true;\n      if (cp === 0x2d27) return true;\n      if (cp === 0x2d2d) return true;\n      if (cp < 0x2d30) return false;\n      if (cp < 0x2d68) return true;\n      if (cp === 0x2d6f) return true;\n      return false;\n    }\n\n    if (cp < 0x3006) {\n      if (cp < 0x2dc0) {\n        if (cp < 0x2d80) return false;\n        if (cp < 0x2d97) return true;\n        if (cp < 0x2da0) return false;\n        if (cp < 0x2da7) return true;\n        if (cp < 0x2da8) return false;\n        if (cp < 0x2daf) return true;\n        if (cp < 0x2db0) return false;\n        if (cp < 0x2db7) return true;\n        if (cp < 0x2db8) return false;\n        if (cp < 0x2dbf) return true;\n        return false;\n      }\n\n      if (cp < 0x2dc7) return true;\n      if (cp < 0x2dc8) return false;\n      if (cp < 0x2dcf) return true;\n      if (cp < 0x2dd0) return false;\n      if (cp < 0x2dd7) return true;\n      if (cp < 0x2dd8) return false;\n      if (cp < 0x2ddf) return true;\n      if (cp === 0x3005) return true;\n      return false;\n    }\n\n    if (cp < 0x303b) {\n      if (cp === 0x3006) return true;\n      if (cp === 0x3007) return true;\n      if (cp < 0x3021) return false;\n      if (cp < 0x302a) return true;\n      if (cp < 0x3031) return false;\n      if (cp < 0x3036) return true;\n      if (cp < 0x3038) return false;\n      if (cp < 0x303b) return true;\n      return false;\n    }\n\n    if (cp === 0x303b) return true;\n    if (cp === 0x303c) return true;\n    if (cp < 0x3041) return false;\n    if (cp < 0x3097) return true;\n    if (cp < 0x309b) return false;\n    if (cp < 0x309d) return true;\n    if (cp < 0x309d) return false;\n    if (cp < 0x309f) return true;\n    if (cp === 0x309f) return true;\n    return false;\n  }\n\n  if (cp < 0x10b60) {\n    if (cp < 0xd7b0) {\n      if (cp < 0xa882) {\n        if (cp < 0xa67f) {\n          if (cp < 0xa015) {\n            if (cp < 0x31a0) {\n              if (cp < 0x30a1) return false;\n              if (cp < 0x30fb) return true;\n              if (cp < 0x30fc) return false;\n              if (cp < 0x30ff) return true;\n              if (cp === 0x30ff) return true;\n              if (cp < 0x3105) return false;\n              if (cp < 0x3130) return true;\n              if (cp < 0x3131) return false;\n              if (cp < 0x318f) return true;\n              return false;\n            }\n\n            if (cp < 0x31bb) return true;\n            if (cp < 0x31f0) return false;\n            if (cp < 0x3200) return true;\n            if (cp < 0x3400) return false;\n            if (cp < 0x4db6) return true;\n            if (cp < 0x4e00) return false;\n            if (cp < 0x9ff0) return true;\n            if (cp < 0xa000) return false;\n            if (cp < 0xa015) return true;\n            return false;\n          }\n\n          if (cp < 0xa60c) {\n            if (cp === 0xa015) return true;\n            if (cp < 0xa016) return false;\n            if (cp < 0xa48d) return true;\n            if (cp < 0xa4d0) return false;\n            if (cp < 0xa4f8) return true;\n            if (cp < 0xa4f8) return false;\n            if (cp < 0xa4fe) return true;\n            if (cp < 0xa500) return false;\n            if (cp < 0xa60c) return true;\n            return false;\n          }\n\n          if (cp === 0xa60c) return true;\n          if (cp < 0xa610) return false;\n          if (cp < 0xa620) return true;\n          if (cp < 0xa62a) return false;\n          if (cp < 0xa62c) return true;\n          if (cp < 0xa640) return false;\n          if (cp < 0xa66e) return true;\n          if (cp === 0xa66e) return true;\n          return false;\n        }\n\n        if (cp < 0xa78b) {\n          if (cp < 0xa717) {\n            if (cp === 0xa67f) return true;\n            if (cp < 0xa680) return false;\n            if (cp < 0xa69c) return true;\n            if (cp < 0xa69c) return false;\n            if (cp < 0xa69e) return true;\n            if (cp < 0xa6a0) return false;\n            if (cp < 0xa6e6) return true;\n            if (cp < 0xa6e6) return false;\n            if (cp < 0xa6f0) return true;\n            return false;\n          }\n\n          if (cp < 0xa720) return true;\n          if (cp < 0xa722) return false;\n          if (cp < 0xa770) return true;\n          if (cp === 0xa770) return true;\n          if (cp < 0xa771) return false;\n          if (cp < 0xa788) return true;\n          if (cp === 0xa788) return true;\n          return false;\n        }\n\n        if (cp < 0xa7fa) {\n          if (cp < 0xa78b) return false;\n          if (cp < 0xa78f) return true;\n          if (cp === 0xa78f) return true;\n          if (cp < 0xa790) return false;\n          if (cp < 0xa7ba) return true;\n          if (cp === 0xa7f7) return true;\n          if (cp < 0xa7f8) return false;\n          if (cp < 0xa7fa) return true;\n          return false;\n        }\n\n        if (cp === 0xa7fa) return true;\n        if (cp < 0xa7fb) return false;\n        if (cp < 0xa802) return true;\n        if (cp < 0xa803) return false;\n        if (cp < 0xa806) return true;\n        if (cp < 0xa807) return false;\n        if (cp < 0xa80b) return true;\n        if (cp < 0xa80c) return false;\n        if (cp < 0xa823) return true;\n        if (cp < 0xa840) return false;\n        if (cp < 0xa874) return true;\n        return false;\n      }\n\n      if (cp < 0xaab1) {\n        if (cp < 0xa9e6) {\n          if (cp < 0xa930) {\n            if (cp < 0xa882) return false;\n            if (cp < 0xa8b4) return true;\n            if (cp < 0xa8f2) return false;\n            if (cp < 0xa8f8) return true;\n            if (cp === 0xa8fb) return true;\n            if (cp < 0xa8fd) return false;\n            if (cp < 0xa8ff) return true;\n            if (cp < 0xa90a) return false;\n            if (cp < 0xa926) return true;\n            return false;\n          }\n\n          if (cp < 0xa947) return true;\n          if (cp < 0xa960) return false;\n          if (cp < 0xa97d) return true;\n          if (cp < 0xa984) return false;\n          if (cp < 0xa9b3) return true;\n          if (cp === 0xa9cf) return true;\n          if (cp < 0xa9e0) return false;\n          if (cp < 0xa9e5) return true;\n          return false;\n        }\n\n        if (cp < 0xaa44) {\n          if (cp === 0xa9e6) return true;\n          if (cp < 0xa9e7) return false;\n          if (cp < 0xa9f0) return true;\n          if (cp < 0xa9fa) return false;\n          if (cp < 0xa9ff) return true;\n          if (cp < 0xaa00) return false;\n          if (cp < 0xaa29) return true;\n          if (cp < 0xaa40) return false;\n          if (cp < 0xaa43) return true;\n          return false;\n        }\n\n        if (cp < 0xaa4c) return true;\n        if (cp < 0xaa60) return false;\n        if (cp < 0xaa70) return true;\n        if (cp === 0xaa70) return true;\n        if (cp < 0xaa71) return false;\n        if (cp < 0xaa77) return true;\n        if (cp === 0xaa7a) return true;\n        if (cp < 0xaa7e) return false;\n        if (cp < 0xaab0) return true;\n        return false;\n      }\n\n      if (cp < 0xab01) {\n        if (cp < 0xaadb) {\n          if (cp === 0xaab1) return true;\n          if (cp < 0xaab5) return false;\n          if (cp < 0xaab7) return true;\n          if (cp < 0xaab9) return false;\n          if (cp < 0xaabe) return true;\n          if (cp === 0xaac0) return true;\n          if (cp === 0xaac2) return true;\n          return false;\n        }\n\n        if (cp < 0xaadd) return true;\n        if (cp === 0xaadd) return true;\n        if (cp < 0xaae0) return false;\n        if (cp < 0xaaeb) return true;\n        if (cp === 0xaaf2) return true;\n        if (cp < 0xaaf3) return false;\n        if (cp < 0xaaf5) return true;\n        return false;\n      }\n\n      if (cp < 0xab30) {\n        if (cp < 0xab01) return false;\n        if (cp < 0xab07) return true;\n        if (cp < 0xab09) return false;\n        if (cp < 0xab0f) return true;\n        if (cp < 0xab11) return false;\n        if (cp < 0xab17) return true;\n        if (cp < 0xab20) return false;\n        if (cp < 0xab27) return true;\n        if (cp < 0xab28) return false;\n        if (cp < 0xab2f) return true;\n        return false;\n      }\n\n      if (cp < 0xab5b) return true;\n      if (cp < 0xab5c) return false;\n      if (cp < 0xab60) return true;\n      if (cp < 0xab60) return false;\n      if (cp < 0xab66) return true;\n      if (cp < 0xab70) return false;\n      if (cp < 0xabc0) return true;\n      if (cp < 0xabc0) return false;\n      if (cp < 0xabe3) return true;\n      if (cp < 0xac00) return false;\n      if (cp < 0xd7a4) return true;\n      return false;\n    }\n\n    if (cp < 0x1032d) {\n      if (cp < 0xff41) {\n        if (cp < 0xfb3e) {\n          if (cp < 0xfb13) {\n            if (cp < 0xd7b0) return false;\n            if (cp < 0xd7c7) return true;\n            if (cp < 0xd7cb) return false;\n            if (cp < 0xd7fc) return true;\n            if (cp < 0xf900) return false;\n            if (cp < 0xfa6e) return true;\n            if (cp < 0xfa70) return false;\n            if (cp < 0xfada) return true;\n            if (cp < 0xfb00) return false;\n            if (cp < 0xfb07) return true;\n            return false;\n          }\n\n          if (cp < 0xfb18) return true;\n          if (cp === 0xfb1d) return true;\n          if (cp < 0xfb1f) return false;\n          if (cp < 0xfb29) return true;\n          if (cp < 0xfb2a) return false;\n          if (cp < 0xfb37) return true;\n          if (cp < 0xfb38) return false;\n          if (cp < 0xfb3d) return true;\n          return false;\n        }\n\n        if (cp < 0xfd50) {\n          if (cp === 0xfb3e) return true;\n          if (cp < 0xfb40) return false;\n          if (cp < 0xfb42) return true;\n          if (cp < 0xfb43) return false;\n          if (cp < 0xfb45) return true;\n          if (cp < 0xfb46) return false;\n          if (cp < 0xfbb2) return true;\n          if (cp < 0xfbd3) return false;\n          if (cp < 0xfd3e) return true;\n          return false;\n        }\n\n        if (cp < 0xfd90) return true;\n        if (cp < 0xfd92) return false;\n        if (cp < 0xfdc8) return true;\n        if (cp < 0xfdf0) return false;\n        if (cp < 0xfdfc) return true;\n        if (cp < 0xfe70) return false;\n        if (cp < 0xfe75) return true;\n        if (cp < 0xfe76) return false;\n        if (cp < 0xfefd) return true;\n        if (cp < 0xff21) return false;\n        if (cp < 0xff3b) return true;\n        return false;\n      }\n\n      if (cp < 0x10000) {\n        if (cp < 0xffa0) {\n          if (cp < 0xff41) return false;\n          if (cp < 0xff5b) return true;\n          if (cp < 0xff66) return false;\n          if (cp < 0xff70) return true;\n          if (cp === 0xff70) return true;\n          if (cp < 0xff71) return false;\n          if (cp < 0xff9e) return true;\n          if (cp < 0xff9e) return false;\n          if (cp < 0xffa0) return true;\n          return false;\n        }\n\n        if (cp < 0xffbf) return true;\n        if (cp < 0xffc2) return false;\n        if (cp < 0xffc8) return true;\n        if (cp < 0xffca) return false;\n        if (cp < 0xffd0) return true;\n        if (cp < 0xffd2) return false;\n        if (cp < 0xffd8) return true;\n        if (cp < 0xffda) return false;\n        if (cp < 0xffdd) return true;\n        return false;\n      }\n\n      if (cp < 0x10050) {\n        if (cp < 0x10000) return false;\n        if (cp < 0x1000c) return true;\n        if (cp < 0x1000d) return false;\n        if (cp < 0x10027) return true;\n        if (cp < 0x10028) return false;\n        if (cp < 0x1003b) return true;\n        if (cp < 0x1003c) return false;\n        if (cp < 0x1003e) return true;\n        if (cp < 0x1003f) return false;\n        if (cp < 0x1004e) return true;\n        return false;\n      }\n\n      if (cp < 0x1005e) return true;\n      if (cp < 0x10080) return false;\n      if (cp < 0x100fb) return true;\n      if (cp < 0x10140) return false;\n      if (cp < 0x10175) return true;\n      if (cp < 0x10280) return false;\n      if (cp < 0x1029d) return true;\n      if (cp < 0x102a0) return false;\n      if (cp < 0x102d1) return true;\n      if (cp < 0x10300) return false;\n      if (cp < 0x10320) return true;\n      return false;\n    }\n\n    if (cp < 0x10837) {\n      if (cp < 0x10450) {\n        if (cp < 0x10380) {\n          if (cp < 0x1032d) return false;\n          if (cp < 0x10341) return true;\n          if (cp === 0x10341) return true;\n          if (cp < 0x10342) return false;\n          if (cp < 0x1034a) return true;\n          if (cp === 0x1034a) return true;\n          if (cp < 0x10350) return false;\n          if (cp < 0x10376) return true;\n          return false;\n        }\n\n        if (cp < 0x1039e) return true;\n        if (cp < 0x103a0) return false;\n        if (cp < 0x103c4) return true;\n        if (cp < 0x103c8) return false;\n        if (cp < 0x103d0) return true;\n        if (cp < 0x103d1) return false;\n        if (cp < 0x103d6) return true;\n        if (cp < 0x10400) return false;\n        if (cp < 0x10450) return true;\n        return false;\n      }\n\n      if (cp < 0x10600) {\n        if (cp < 0x10450) return false;\n        if (cp < 0x1049e) return true;\n        if (cp < 0x104b0) return false;\n        if (cp < 0x104d4) return true;\n        if (cp < 0x104d8) return false;\n        if (cp < 0x104fc) return true;\n        if (cp < 0x10500) return false;\n        if (cp < 0x10528) return true;\n        if (cp < 0x10530) return false;\n        if (cp < 0x10564) return true;\n        return false;\n      }\n\n      if (cp < 0x10737) return true;\n      if (cp < 0x10740) return false;\n      if (cp < 0x10756) return true;\n      if (cp < 0x10760) return false;\n      if (cp < 0x10768) return true;\n      if (cp < 0x10800) return false;\n      if (cp < 0x10806) return true;\n      if (cp === 0x10808) return true;\n      if (cp < 0x1080a) return false;\n      if (cp < 0x10836) return true;\n      return false;\n    }\n\n    if (cp < 0x109be) {\n      if (cp < 0x108e0) {\n        if (cp < 0x10837) return false;\n        if (cp < 0x10839) return true;\n        if (cp === 0x1083c) return true;\n        if (cp < 0x1083f) return false;\n        if (cp < 0x10856) return true;\n        if (cp < 0x10860) return false;\n        if (cp < 0x10877) return true;\n        if (cp < 0x10880) return false;\n        if (cp < 0x1089f) return true;\n        return false;\n      }\n\n      if (cp < 0x108f3) return true;\n      if (cp < 0x108f4) return false;\n      if (cp < 0x108f6) return true;\n      if (cp < 0x10900) return false;\n      if (cp < 0x10916) return true;\n      if (cp < 0x10920) return false;\n      if (cp < 0x1093a) return true;\n      if (cp < 0x10980) return false;\n      if (cp < 0x109b8) return true;\n      return false;\n    }\n\n    if (cp < 0x10a60) {\n      if (cp < 0x109be) return false;\n      if (cp < 0x109c0) return true;\n      if (cp === 0x10a00) return true;\n      if (cp < 0x10a10) return false;\n      if (cp < 0x10a14) return true;\n      if (cp < 0x10a15) return false;\n      if (cp < 0x10a18) return true;\n      if (cp < 0x10a19) return false;\n      if (cp < 0x10a36) return true;\n      return false;\n    }\n\n    if (cp < 0x10a7d) return true;\n    if (cp < 0x10a80) return false;\n    if (cp < 0x10a9d) return true;\n    if (cp < 0x10ac0) return false;\n    if (cp < 0x10ac8) return true;\n    if (cp < 0x10ac9) return false;\n    if (cp < 0x10ae5) return true;\n    if (cp < 0x10b00) return false;\n    if (cp < 0x10b36) return true;\n    if (cp < 0x10b40) return false;\n    if (cp < 0x10b56) return true;\n    return false;\n  }\n\n  if (cp < 0x16e40) {\n    if (cp < 0x11580) {\n      if (cp < 0x11213) {\n        if (cp < 0x11083) {\n          if (cp < 0x10d00) {\n            if (cp < 0x10b60) return false;\n            if (cp < 0x10b73) return true;\n            if (cp < 0x10b80) return false;\n            if (cp < 0x10b92) return true;\n            if (cp < 0x10c00) return false;\n            if (cp < 0x10c49) return true;\n            if (cp < 0x10c80) return false;\n            if (cp < 0x10cb3) return true;\n            if (cp < 0x10cc0) return false;\n            if (cp < 0x10cf3) return true;\n            return false;\n          }\n\n          if (cp < 0x10d24) return true;\n          if (cp < 0x10f00) return false;\n          if (cp < 0x10f1d) return true;\n          if (cp === 0x10f27) return true;\n          if (cp < 0x10f30) return false;\n          if (cp < 0x10f46) return true;\n          if (cp < 0x11003) return false;\n          if (cp < 0x11038) return true;\n          return false;\n        }\n\n        if (cp < 0x11176) {\n          if (cp < 0x11083) return false;\n          if (cp < 0x110b0) return true;\n          if (cp < 0x110d0) return false;\n          if (cp < 0x110e9) return true;\n          if (cp < 0x11103) return false;\n          if (cp < 0x11127) return true;\n          if (cp === 0x11144) return true;\n          if (cp < 0x11150) return false;\n          if (cp < 0x11173) return true;\n          return false;\n        }\n\n        if (cp === 0x11176) return true;\n        if (cp < 0x11183) return false;\n        if (cp < 0x111b3) return true;\n        if (cp < 0x111c1) return false;\n        if (cp < 0x111c5) return true;\n        if (cp === 0x111da) return true;\n        if (cp === 0x111dc) return true;\n        if (cp < 0x11200) return false;\n        if (cp < 0x11212) return true;\n        return false;\n      }\n\n      if (cp < 0x1132a) {\n        if (cp < 0x1129f) {\n          if (cp < 0x11213) return false;\n          if (cp < 0x1122c) return true;\n          if (cp < 0x11280) return false;\n          if (cp < 0x11287) return true;\n          if (cp === 0x11288) return true;\n          if (cp < 0x1128a) return false;\n          if (cp < 0x1128e) return true;\n          if (cp < 0x1128f) return false;\n          if (cp < 0x1129e) return true;\n          return false;\n        }\n\n        if (cp < 0x112a9) return true;\n        if (cp < 0x112b0) return false;\n        if (cp < 0x112df) return true;\n        if (cp < 0x11305) return false;\n        if (cp < 0x1130d) return true;\n        if (cp < 0x1130f) return false;\n        if (cp < 0x11311) return true;\n        if (cp < 0x11313) return false;\n        if (cp < 0x11329) return true;\n        return false;\n      }\n\n      if (cp < 0x1135d) {\n        if (cp < 0x1132a) return false;\n        if (cp < 0x11331) return true;\n        if (cp < 0x11332) return false;\n        if (cp < 0x11334) return true;\n        if (cp < 0x11335) return false;\n        if (cp < 0x1133a) return true;\n        if (cp === 0x1133d) return true;\n        if (cp === 0x11350) return true;\n        return false;\n      }\n\n      if (cp < 0x11362) return true;\n      if (cp < 0x11400) return false;\n      if (cp < 0x11435) return true;\n      if (cp < 0x11447) return false;\n      if (cp < 0x1144b) return true;\n      if (cp < 0x11480) return false;\n      if (cp < 0x114b0) return true;\n      if (cp < 0x114c4) return false;\n      if (cp < 0x114c6) return true;\n      if (cp === 0x114c7) return true;\n      return false;\n    }\n\n    if (cp < 0x11d00) {\n      if (cp < 0x11a0b) {\n        if (cp < 0x11700) {\n          if (cp < 0x11580) return false;\n          if (cp < 0x115af) return true;\n          if (cp < 0x115d8) return false;\n          if (cp < 0x115dc) return true;\n          if (cp < 0x11600) return false;\n          if (cp < 0x11630) return true;\n          if (cp === 0x11644) return true;\n          if (cp < 0x11680) return false;\n          if (cp < 0x116ab) return true;\n          return false;\n        }\n\n        if (cp < 0x1171b) return true;\n        if (cp < 0x11800) return false;\n        if (cp < 0x1182c) return true;\n        if (cp < 0x118a0) return false;\n        if (cp < 0x118e0) return true;\n        if (cp === 0x118ff) return true;\n        if (cp === 0x11a00) return true;\n        return false;\n      }\n\n      if (cp < 0x11a9d) {\n        if (cp < 0x11a0b) return false;\n        if (cp < 0x11a33) return true;\n        if (cp === 0x11a3a) return true;\n        if (cp === 0x11a50) return true;\n        if (cp < 0x11a5c) return false;\n        if (cp < 0x11a84) return true;\n        if (cp < 0x11a86) return false;\n        if (cp < 0x11a8a) return true;\n        return false;\n      }\n\n      if (cp === 0x11a9d) return true;\n      if (cp < 0x11ac0) return false;\n      if (cp < 0x11af9) return true;\n      if (cp < 0x11c00) return false;\n      if (cp < 0x11c09) return true;\n      if (cp < 0x11c0a) return false;\n      if (cp < 0x11c2f) return true;\n      if (cp === 0x11c40) return true;\n      if (cp < 0x11c72) return false;\n      if (cp < 0x11c90) return true;\n      return false;\n    }\n\n    if (cp < 0x12400) {\n      if (cp < 0x11d67) {\n        if (cp < 0x11d00) return false;\n        if (cp < 0x11d07) return true;\n        if (cp < 0x11d08) return false;\n        if (cp < 0x11d0a) return true;\n        if (cp < 0x11d0b) return false;\n        if (cp < 0x11d31) return true;\n        if (cp === 0x11d46) return true;\n        if (cp < 0x11d60) return false;\n        if (cp < 0x11d66) return true;\n        return false;\n      }\n\n      if (cp < 0x11d69) return true;\n      if (cp < 0x11d6a) return false;\n      if (cp < 0x11d8a) return true;\n      if (cp === 0x11d98) return true;\n      if (cp < 0x11ee0) return false;\n      if (cp < 0x11ef3) return true;\n      if (cp < 0x12000) return false;\n      if (cp < 0x1239a) return true;\n      return false;\n    }\n\n    if (cp < 0x16a40) {\n      if (cp < 0x12400) return false;\n      if (cp < 0x1246f) return true;\n      if (cp < 0x12480) return false;\n      if (cp < 0x12544) return true;\n      if (cp < 0x13000) return false;\n      if (cp < 0x1342f) return true;\n      if (cp < 0x14400) return false;\n      if (cp < 0x14647) return true;\n      if (cp < 0x16800) return false;\n      if (cp < 0x16a39) return true;\n      return false;\n    }\n\n    if (cp < 0x16a5f) return true;\n    if (cp < 0x16ad0) return false;\n    if (cp < 0x16aee) return true;\n    if (cp < 0x16b00) return false;\n    if (cp < 0x16b30) return true;\n    if (cp < 0x16b40) return false;\n    if (cp < 0x16b44) return true;\n    if (cp < 0x16b63) return false;\n    if (cp < 0x16b78) return true;\n    if (cp < 0x16b7d) return false;\n    if (cp < 0x16b90) return true;\n    return false;\n  }\n\n  if (cp < 0x1d7c4) {\n    if (cp < 0x1d4bd) {\n      if (cp < 0x1bc70) {\n        if (cp < 0x17000) {\n          if (cp < 0x16e40) return false;\n          if (cp < 0x16e80) return true;\n          if (cp < 0x16f00) return false;\n          if (cp < 0x16f45) return true;\n          if (cp === 0x16f50) return true;\n          if (cp < 0x16f93) return false;\n          if (cp < 0x16fa0) return true;\n          if (cp < 0x16fe0) return false;\n          if (cp < 0x16fe2) return true;\n          return false;\n        }\n\n        if (cp < 0x187f2) return true;\n        if (cp < 0x18800) return false;\n        if (cp < 0x18af3) return true;\n        if (cp < 0x1b000) return false;\n        if (cp < 0x1b11f) return true;\n        if (cp < 0x1b170) return false;\n        if (cp < 0x1b2fc) return true;\n        if (cp < 0x1bc00) return false;\n        if (cp < 0x1bc6b) return true;\n        return false;\n      }\n\n      if (cp < 0x1d49e) {\n        if (cp < 0x1bc70) return false;\n        if (cp < 0x1bc7d) return true;\n        if (cp < 0x1bc80) return false;\n        if (cp < 0x1bc89) return true;\n        if (cp < 0x1bc90) return false;\n        if (cp < 0x1bc9a) return true;\n        if (cp < 0x1d400) return false;\n        if (cp < 0x1d455) return true;\n        if (cp < 0x1d456) return false;\n        if (cp < 0x1d49d) return true;\n        return false;\n      }\n\n      if (cp < 0x1d4a0) return true;\n      if (cp === 0x1d4a2) return true;\n      if (cp < 0x1d4a5) return false;\n      if (cp < 0x1d4a7) return true;\n      if (cp < 0x1d4a9) return false;\n      if (cp < 0x1d4ad) return true;\n      if (cp < 0x1d4ae) return false;\n      if (cp < 0x1d4ba) return true;\n      if (cp === 0x1d4bb) return true;\n      return false;\n    }\n\n    if (cp < 0x1d552) {\n      if (cp < 0x1d51e) {\n        if (cp < 0x1d4bd) return false;\n        if (cp < 0x1d4c4) return true;\n        if (cp < 0x1d4c5) return false;\n        if (cp < 0x1d506) return true;\n        if (cp < 0x1d507) return false;\n        if (cp < 0x1d50b) return true;\n        if (cp < 0x1d50d) return false;\n        if (cp < 0x1d515) return true;\n        if (cp < 0x1d516) return false;\n        if (cp < 0x1d51d) return true;\n        return false;\n      }\n\n      if (cp < 0x1d53a) return true;\n      if (cp < 0x1d53b) return false;\n      if (cp < 0x1d53f) return true;\n      if (cp < 0x1d540) return false;\n      if (cp < 0x1d545) return true;\n      if (cp === 0x1d546) return true;\n      if (cp < 0x1d54a) return false;\n      if (cp < 0x1d551) return true;\n      return false;\n    }\n\n    if (cp < 0x1d716) {\n      if (cp < 0x1d552) return false;\n      if (cp < 0x1d6a6) return true;\n      if (cp < 0x1d6a8) return false;\n      if (cp < 0x1d6c1) return true;\n      if (cp < 0x1d6c2) return false;\n      if (cp < 0x1d6db) return true;\n      if (cp < 0x1d6dc) return false;\n      if (cp < 0x1d6fb) return true;\n      if (cp < 0x1d6fc) return false;\n      if (cp < 0x1d715) return true;\n      return false;\n    }\n\n    if (cp < 0x1d735) return true;\n    if (cp < 0x1d736) return false;\n    if (cp < 0x1d74f) return true;\n    if (cp < 0x1d750) return false;\n    if (cp < 0x1d76f) return true;\n    if (cp < 0x1d770) return false;\n    if (cp < 0x1d789) return true;\n    if (cp < 0x1d78a) return false;\n    if (cp < 0x1d7a9) return true;\n    if (cp < 0x1d7aa) return false;\n    if (cp < 0x1d7c3) return true;\n    return false;\n  }\n\n  if (cp < 0x1ee5b) {\n    if (cp < 0x1ee39) {\n      if (cp < 0x1ee21) {\n        if (cp < 0x1d7c4) return false;\n        if (cp < 0x1d7cc) return true;\n        if (cp < 0x1e800) return false;\n        if (cp < 0x1e8c5) return true;\n        if (cp < 0x1e900) return false;\n        if (cp < 0x1e944) return true;\n        if (cp < 0x1ee00) return false;\n        if (cp < 0x1ee04) return true;\n        if (cp < 0x1ee05) return false;\n        if (cp < 0x1ee20) return true;\n        return false;\n      }\n\n      if (cp < 0x1ee23) return true;\n      if (cp === 0x1ee24) return true;\n      if (cp === 0x1ee27) return true;\n      if (cp < 0x1ee29) return false;\n      if (cp < 0x1ee33) return true;\n      if (cp < 0x1ee34) return false;\n      if (cp < 0x1ee38) return true;\n      return false;\n    }\n\n    if (cp < 0x1ee4b) {\n      if (cp === 0x1ee39) return true;\n      if (cp === 0x1ee3b) return true;\n      if (cp === 0x1ee42) return true;\n      if (cp === 0x1ee47) return true;\n      if (cp === 0x1ee49) return true;\n      return false;\n    }\n\n    if (cp === 0x1ee4b) return true;\n    if (cp < 0x1ee4d) return false;\n    if (cp < 0x1ee50) return true;\n    if (cp < 0x1ee51) return false;\n    if (cp < 0x1ee53) return true;\n    if (cp === 0x1ee54) return true;\n    if (cp === 0x1ee57) return true;\n    if (cp === 0x1ee59) return true;\n    return false;\n  }\n\n  if (cp < 0x1ee80) {\n    if (cp < 0x1ee67) {\n      if (cp === 0x1ee5b) return true;\n      if (cp === 0x1ee5d) return true;\n      if (cp === 0x1ee5f) return true;\n      if (cp < 0x1ee61) return false;\n      if (cp < 0x1ee63) return true;\n      if (cp === 0x1ee64) return true;\n      return false;\n    }\n\n    if (cp < 0x1ee6b) return true;\n    if (cp < 0x1ee6c) return false;\n    if (cp < 0x1ee73) return true;\n    if (cp < 0x1ee74) return false;\n    if (cp < 0x1ee78) return true;\n    if (cp < 0x1ee79) return false;\n    if (cp < 0x1ee7d) return true;\n    if (cp === 0x1ee7e) return true;\n    return false;\n  }\n\n  if (cp < 0x20000) {\n    if (cp < 0x1ee80) return false;\n    if (cp < 0x1ee8a) return true;\n    if (cp < 0x1ee8b) return false;\n    if (cp < 0x1ee9c) return true;\n    if (cp < 0x1eea1) return false;\n    if (cp < 0x1eea4) return true;\n    if (cp < 0x1eea5) return false;\n    if (cp < 0x1eeaa) return true;\n    if (cp < 0x1eeab) return false;\n    if (cp < 0x1eebc) return true;\n    return false;\n  }\n\n  if (cp < 0x2a6d7) return true;\n  if (cp < 0x2a700) return false;\n  if (cp < 0x2b735) return true;\n  if (cp < 0x2b740) return false;\n  if (cp < 0x2b81e) return true;\n  if (cp < 0x2b820) return false;\n  if (cp < 0x2cea2) return true;\n  if (cp < 0x2ceb0) return false;\n  if (cp < 0x2ebe1) return true;\n  if (cp < 0x2f800) return false;\n  if (cp < 0x2fa1e) return true;\n  return false;\n}\n\nfunction isLargeIdContinue(cp) {\n  if (cp < 0x1cd0) {\n    if (cp < 0xd82) {\n      if (cp < 0xa83) {\n        if (cp < 0x93b) {\n          if (cp < 0x6ea) {\n            if (cp < 0x5c7) {\n              if (cp === 0xb7) return true;\n              if (cp < 0x300) return false;\n              if (cp < 0x370) return true;\n              if (cp === 0x387) return true;\n              if (cp < 0x483) return false;\n              if (cp < 0x488) return true;\n              if (cp < 0x591) return false;\n              if (cp < 0x5be) return true;\n              if (cp === 0x5bf) return true;\n              if (cp < 0x5c1) return false;\n              if (cp < 0x5c3) return true;\n              if (cp < 0x5c4) return false;\n              if (cp < 0x5c6) return true;\n              return false;\n            }\n\n            if (cp === 0x5c7) return true;\n            if (cp < 0x610) return false;\n            if (cp < 0x61b) return true;\n            if (cp < 0x64b) return false;\n            if (cp < 0x660) return true;\n            if (cp < 0x660) return false;\n            if (cp < 0x66a) return true;\n            if (cp === 0x670) return true;\n            if (cp < 0x6d6) return false;\n            if (cp < 0x6dd) return true;\n            if (cp < 0x6df) return false;\n            if (cp < 0x6e5) return true;\n            if (cp < 0x6e7) return false;\n            if (cp < 0x6e9) return true;\n            return false;\n          }\n\n          if (cp < 0x816) {\n            if (cp < 0x6ea) return false;\n            if (cp < 0x6ee) return true;\n            if (cp < 0x6f0) return false;\n            if (cp < 0x6fa) return true;\n            if (cp === 0x711) return true;\n            if (cp < 0x730) return false;\n            if (cp < 0x74b) return true;\n            if (cp < 0x7a6) return false;\n            if (cp < 0x7b1) return true;\n            if (cp < 0x7c0) return false;\n            if (cp < 0x7ca) return true;\n            if (cp < 0x7eb) return false;\n            if (cp < 0x7f4) return true;\n            if (cp === 0x7fd) return true;\n            return false;\n          }\n\n          if (cp < 0x81a) return true;\n          if (cp < 0x81b) return false;\n          if (cp < 0x824) return true;\n          if (cp < 0x825) return false;\n          if (cp < 0x828) return true;\n          if (cp < 0x829) return false;\n          if (cp < 0x82e) return true;\n          if (cp < 0x859) return false;\n          if (cp < 0x85c) return true;\n          if (cp < 0x8d3) return false;\n          if (cp < 0x8e2) return true;\n          if (cp < 0x8e3) return false;\n          if (cp < 0x903) return true;\n          if (cp === 0x903) return true;\n          if (cp === 0x93a) return true;\n          return false;\n        }\n\n        if (cp < 0x9cd) {\n          if (cp < 0x962) {\n            if (cp === 0x93b) return true;\n            if (cp === 0x93c) return true;\n            if (cp < 0x93e) return false;\n            if (cp < 0x941) return true;\n            if (cp < 0x941) return false;\n            if (cp < 0x949) return true;\n            if (cp < 0x949) return false;\n            if (cp < 0x94d) return true;\n            if (cp === 0x94d) return true;\n            if (cp < 0x94e) return false;\n            if (cp < 0x950) return true;\n            if (cp < 0x951) return false;\n            if (cp < 0x958) return true;\n            return false;\n          }\n\n          if (cp < 0x964) return true;\n          if (cp < 0x966) return false;\n          if (cp < 0x970) return true;\n          if (cp === 0x981) return true;\n          if (cp < 0x982) return false;\n          if (cp < 0x984) return true;\n          if (cp === 0x9bc) return true;\n          if (cp < 0x9be) return false;\n          if (cp < 0x9c1) return true;\n          if (cp < 0x9c1) return false;\n          if (cp < 0x9c5) return true;\n          if (cp < 0x9c7) return false;\n          if (cp < 0x9c9) return true;\n          if (cp < 0x9cb) return false;\n          if (cp < 0x9cd) return true;\n          return false;\n        }\n\n        if (cp < 0xa3e) {\n          if (cp === 0x9cd) return true;\n          if (cp === 0x9d7) return true;\n          if (cp < 0x9e2) return false;\n          if (cp < 0x9e4) return true;\n          if (cp < 0x9e6) return false;\n          if (cp < 0x9f0) return true;\n          if (cp === 0x9fe) return true;\n          if (cp < 0xa01) return false;\n          if (cp < 0xa03) return true;\n          if (cp === 0xa03) return true;\n          if (cp === 0xa3c) return true;\n          return false;\n        }\n\n        if (cp < 0xa41) return true;\n        if (cp < 0xa41) return false;\n        if (cp < 0xa43) return true;\n        if (cp < 0xa47) return false;\n        if (cp < 0xa49) return true;\n        if (cp < 0xa4b) return false;\n        if (cp < 0xa4e) return true;\n        if (cp === 0xa51) return true;\n        if (cp < 0xa66) return false;\n        if (cp < 0xa70) return true;\n        if (cp < 0xa70) return false;\n        if (cp < 0xa72) return true;\n        if (cp === 0xa75) return true;\n        if (cp < 0xa81) return false;\n        if (cp < 0xa83) return true;\n        return false;\n      }\n\n      if (cp < 0xc00) {\n        if (cp < 0xb41) {\n          if (cp < 0xae2) {\n            if (cp === 0xa83) return true;\n            if (cp === 0xabc) return true;\n            if (cp < 0xabe) return false;\n            if (cp < 0xac1) return true;\n            if (cp < 0xac1) return false;\n            if (cp < 0xac6) return true;\n            if (cp < 0xac7) return false;\n            if (cp < 0xac9) return true;\n            if (cp === 0xac9) return true;\n            if (cp < 0xacb) return false;\n            if (cp < 0xacd) return true;\n            if (cp === 0xacd) return true;\n            return false;\n          }\n\n          if (cp < 0xae4) return true;\n          if (cp < 0xae6) return false;\n          if (cp < 0xaf0) return true;\n          if (cp < 0xafa) return false;\n          if (cp < 0xb00) return true;\n          if (cp === 0xb01) return true;\n          if (cp < 0xb02) return false;\n          if (cp < 0xb04) return true;\n          if (cp === 0xb3c) return true;\n          if (cp === 0xb3e) return true;\n          if (cp === 0xb3f) return true;\n          if (cp === 0xb40) return true;\n          return false;\n        }\n\n        if (cp < 0xb82) {\n          if (cp < 0xb41) return false;\n          if (cp < 0xb45) return true;\n          if (cp < 0xb47) return false;\n          if (cp < 0xb49) return true;\n          if (cp < 0xb4b) return false;\n          if (cp < 0xb4d) return true;\n          if (cp === 0xb4d) return true;\n          if (cp === 0xb56) return true;\n          if (cp === 0xb57) return true;\n          if (cp < 0xb62) return false;\n          if (cp < 0xb64) return true;\n          if (cp < 0xb66) return false;\n          if (cp < 0xb70) return true;\n          return false;\n        }\n\n        if (cp === 0xb82) return true;\n        if (cp < 0xbbe) return false;\n        if (cp < 0xbc0) return true;\n        if (cp === 0xbc0) return true;\n        if (cp < 0xbc1) return false;\n        if (cp < 0xbc3) return true;\n        if (cp < 0xbc6) return false;\n        if (cp < 0xbc9) return true;\n        if (cp < 0xbca) return false;\n        if (cp < 0xbcd) return true;\n        if (cp === 0xbcd) return true;\n        if (cp === 0xbd7) return true;\n        if (cp < 0xbe6) return false;\n        if (cp < 0xbf0) return true;\n        return false;\n      }\n\n      if (cp < 0xcc7) {\n        if (cp < 0xc62) {\n          if (cp === 0xc00) return true;\n          if (cp < 0xc01) return false;\n          if (cp < 0xc04) return true;\n          if (cp === 0xc04) return true;\n          if (cp < 0xc3e) return false;\n          if (cp < 0xc41) return true;\n          if (cp < 0xc41) return false;\n          if (cp < 0xc45) return true;\n          if (cp < 0xc46) return false;\n          if (cp < 0xc49) return true;\n          if (cp < 0xc4a) return false;\n          if (cp < 0xc4e) return true;\n          if (cp < 0xc55) return false;\n          if (cp < 0xc57) return true;\n          return false;\n        }\n\n        if (cp < 0xc64) return true;\n        if (cp < 0xc66) return false;\n        if (cp < 0xc70) return true;\n        if (cp === 0xc81) return true;\n        if (cp < 0xc82) return false;\n        if (cp < 0xc84) return true;\n        if (cp === 0xcbc) return true;\n        if (cp === 0xcbe) return true;\n        if (cp === 0xcbf) return true;\n        if (cp < 0xcc0) return false;\n        if (cp < 0xcc5) return true;\n        if (cp === 0xcc6) return true;\n        return false;\n      }\n\n      if (cp < 0xd3b) {\n        if (cp < 0xcc7) return false;\n        if (cp < 0xcc9) return true;\n        if (cp < 0xcca) return false;\n        if (cp < 0xccc) return true;\n        if (cp < 0xccc) return false;\n        if (cp < 0xcce) return true;\n        if (cp < 0xcd5) return false;\n        if (cp < 0xcd7) return true;\n        if (cp < 0xce2) return false;\n        if (cp < 0xce4) return true;\n        if (cp < 0xce6) return false;\n        if (cp < 0xcf0) return true;\n        if (cp < 0xd00) return false;\n        if (cp < 0xd02) return true;\n        if (cp < 0xd02) return false;\n        if (cp < 0xd04) return true;\n        return false;\n      }\n\n      if (cp < 0xd3d) return true;\n      if (cp < 0xd3e) return false;\n      if (cp < 0xd41) return true;\n      if (cp < 0xd41) return false;\n      if (cp < 0xd45) return true;\n      if (cp < 0xd46) return false;\n      if (cp < 0xd49) return true;\n      if (cp < 0xd4a) return false;\n      if (cp < 0xd4d) return true;\n      if (cp === 0xd4d) return true;\n      if (cp === 0xd57) return true;\n      if (cp < 0xd62) return false;\n      if (cp < 0xd64) return true;\n      if (cp < 0xd66) return false;\n      if (cp < 0xd70) return true;\n      return false;\n    }\n\n    if (cp < 0x17e0) {\n      if (cp < 0x1038) {\n        if (cp < 0xf18) {\n          if (cp < 0xe31) {\n            if (cp < 0xd82) return false;\n            if (cp < 0xd84) return true;\n            if (cp === 0xdca) return true;\n            if (cp < 0xdcf) return false;\n            if (cp < 0xdd2) return true;\n            if (cp < 0xdd2) return false;\n            if (cp < 0xdd5) return true;\n            if (cp === 0xdd6) return true;\n            if (cp < 0xdd8) return false;\n            if (cp < 0xde0) return true;\n            if (cp < 0xde6) return false;\n            if (cp < 0xdf0) return true;\n            if (cp < 0xdf2) return false;\n            if (cp < 0xdf4) return true;\n            return false;\n          }\n\n          if (cp === 0xe31) return true;\n          if (cp < 0xe34) return false;\n          if (cp < 0xe3b) return true;\n          if (cp < 0xe47) return false;\n          if (cp < 0xe4f) return true;\n          if (cp < 0xe50) return false;\n          if (cp < 0xe5a) return true;\n          if (cp === 0xeb1) return true;\n          if (cp < 0xeb4) return false;\n          if (cp < 0xeba) return true;\n          if (cp < 0xebb) return false;\n          if (cp < 0xebd) return true;\n          if (cp < 0xec8) return false;\n          if (cp < 0xece) return true;\n          if (cp < 0xed0) return false;\n          if (cp < 0xeda) return true;\n          return false;\n        }\n\n        if (cp < 0xf80) {\n          if (cp < 0xf18) return false;\n          if (cp < 0xf1a) return true;\n          if (cp < 0xf20) return false;\n          if (cp < 0xf2a) return true;\n          if (cp === 0xf35) return true;\n          if (cp === 0xf37) return true;\n          if (cp === 0xf39) return true;\n          if (cp < 0xf3e) return false;\n          if (cp < 0xf40) return true;\n          if (cp < 0xf71) return false;\n          if (cp < 0xf7f) return true;\n          if (cp === 0xf7f) return true;\n          return false;\n        }\n\n        if (cp < 0xf85) return true;\n        if (cp < 0xf86) return false;\n        if (cp < 0xf88) return true;\n        if (cp < 0xf8d) return false;\n        if (cp < 0xf98) return true;\n        if (cp < 0xf99) return false;\n        if (cp < 0xfbd) return true;\n        if (cp === 0xfc6) return true;\n        if (cp < 0x102b) return false;\n        if (cp < 0x102d) return true;\n        if (cp < 0x102d) return false;\n        if (cp < 0x1031) return true;\n        if (cp === 0x1031) return true;\n        if (cp < 0x1032) return false;\n        if (cp < 0x1038) return true;\n        return false;\n      }\n\n      if (cp < 0x1090) {\n        if (cp < 0x1062) {\n          if (cp === 0x1038) return true;\n          if (cp < 0x1039) return false;\n          if (cp < 0x103b) return true;\n          if (cp < 0x103b) return false;\n          if (cp < 0x103d) return true;\n          if (cp < 0x103d) return false;\n          if (cp < 0x103f) return true;\n          if (cp < 0x1040) return false;\n          if (cp < 0x104a) return true;\n          if (cp < 0x1056) return false;\n          if (cp < 0x1058) return true;\n          if (cp < 0x1058) return false;\n          if (cp < 0x105a) return true;\n          if (cp < 0x105e) return false;\n          if (cp < 0x1061) return true;\n          return false;\n        }\n\n        if (cp < 0x1065) return true;\n        if (cp < 0x1067) return false;\n        if (cp < 0x106e) return true;\n        if (cp < 0x1071) return false;\n        if (cp < 0x1075) return true;\n        if (cp === 0x1082) return true;\n        if (cp < 0x1083) return false;\n        if (cp < 0x1085) return true;\n        if (cp < 0x1085) return false;\n        if (cp < 0x1087) return true;\n        if (cp < 0x1087) return false;\n        if (cp < 0x108d) return true;\n        if (cp === 0x108d) return true;\n        if (cp === 0x108f) return true;\n        return false;\n      }\n\n      if (cp < 0x1772) {\n        if (cp < 0x1090) return false;\n        if (cp < 0x109a) return true;\n        if (cp < 0x109a) return false;\n        if (cp < 0x109d) return true;\n        if (cp === 0x109d) return true;\n        if (cp < 0x135d) return false;\n        if (cp < 0x1360) return true;\n        if (cp < 0x1369) return false;\n        if (cp < 0x1372) return true;\n        if (cp < 0x1712) return false;\n        if (cp < 0x1715) return true;\n        if (cp < 0x1732) return false;\n        if (cp < 0x1735) return true;\n        if (cp < 0x1752) return false;\n        if (cp < 0x1754) return true;\n        return false;\n      }\n\n      if (cp < 0x1774) return true;\n      if (cp < 0x17b4) return false;\n      if (cp < 0x17b6) return true;\n      if (cp === 0x17b6) return true;\n      if (cp < 0x17b7) return false;\n      if (cp < 0x17be) return true;\n      if (cp < 0x17be) return false;\n      if (cp < 0x17c6) return true;\n      if (cp === 0x17c6) return true;\n      if (cp < 0x17c7) return false;\n      if (cp < 0x17c9) return true;\n      if (cp < 0x17c9) return false;\n      if (cp < 0x17d4) return true;\n      if (cp === 0x17dd) return true;\n      return false;\n    }\n\n    if (cp < 0x1b04) {\n      if (cp < 0x1a1b) {\n        if (cp < 0x1930) {\n          if (cp < 0x17e0) return false;\n          if (cp < 0x17ea) return true;\n          if (cp < 0x180b) return false;\n          if (cp < 0x180e) return true;\n          if (cp < 0x1810) return false;\n          if (cp < 0x181a) return true;\n          if (cp === 0x18a9) return true;\n          if (cp < 0x1920) return false;\n          if (cp < 0x1923) return true;\n          if (cp < 0x1923) return false;\n          if (cp < 0x1927) return true;\n          if (cp < 0x1927) return false;\n          if (cp < 0x1929) return true;\n          if (cp < 0x1929) return false;\n          if (cp < 0x192c) return true;\n          return false;\n        }\n\n        if (cp < 0x1932) return true;\n        if (cp === 0x1932) return true;\n        if (cp < 0x1933) return false;\n        if (cp < 0x1939) return true;\n        if (cp < 0x1939) return false;\n        if (cp < 0x193c) return true;\n        if (cp < 0x1946) return false;\n        if (cp < 0x1950) return true;\n        if (cp < 0x19d0) return false;\n        if (cp < 0x19da) return true;\n        if (cp === 0x19da) return true;\n        if (cp < 0x1a17) return false;\n        if (cp < 0x1a19) return true;\n        if (cp < 0x1a19) return false;\n        if (cp < 0x1a1b) return true;\n        return false;\n      }\n\n      if (cp < 0x1a63) {\n        if (cp === 0x1a1b) return true;\n        if (cp === 0x1a55) return true;\n        if (cp === 0x1a56) return true;\n        if (cp === 0x1a57) return true;\n        if (cp < 0x1a58) return false;\n        if (cp < 0x1a5f) return true;\n        if (cp === 0x1a60) return true;\n        if (cp === 0x1a61) return true;\n        if (cp === 0x1a62) return true;\n        return false;\n      }\n\n      if (cp < 0x1a65) return true;\n      if (cp < 0x1a65) return false;\n      if (cp < 0x1a6d) return true;\n      if (cp < 0x1a6d) return false;\n      if (cp < 0x1a73) return true;\n      if (cp < 0x1a73) return false;\n      if (cp < 0x1a7d) return true;\n      if (cp === 0x1a7f) return true;\n      if (cp < 0x1a80) return false;\n      if (cp < 0x1a8a) return true;\n      if (cp < 0x1a90) return false;\n      if (cp < 0x1a9a) return true;\n      if (cp < 0x1ab0) return false;\n      if (cp < 0x1abe) return true;\n      if (cp < 0x1b00) return false;\n      if (cp < 0x1b04) return true;\n      return false;\n    }\n\n    if (cp < 0x1baa) {\n      if (cp < 0x1b43) {\n        if (cp === 0x1b04) return true;\n        if (cp === 0x1b34) return true;\n        if (cp === 0x1b35) return true;\n        if (cp < 0x1b36) return false;\n        if (cp < 0x1b3b) return true;\n        if (cp === 0x1b3b) return true;\n        if (cp === 0x1b3c) return true;\n        if (cp < 0x1b3d) return false;\n        if (cp < 0x1b42) return true;\n        if (cp === 0x1b42) return true;\n        return false;\n      }\n\n      if (cp < 0x1b45) return true;\n      if (cp < 0x1b50) return false;\n      if (cp < 0x1b5a) return true;\n      if (cp < 0x1b6b) return false;\n      if (cp < 0x1b74) return true;\n      if (cp < 0x1b80) return false;\n      if (cp < 0x1b82) return true;\n      if (cp === 0x1b82) return true;\n      if (cp === 0x1ba1) return true;\n      if (cp < 0x1ba2) return false;\n      if (cp < 0x1ba6) return true;\n      if (cp < 0x1ba6) return false;\n      if (cp < 0x1ba8) return true;\n      if (cp < 0x1ba8) return false;\n      if (cp < 0x1baa) return true;\n      return false;\n    }\n\n    if (cp < 0x1bee) {\n      if (cp === 0x1baa) return true;\n      if (cp < 0x1bab) return false;\n      if (cp < 0x1bae) return true;\n      if (cp < 0x1bb0) return false;\n      if (cp < 0x1bba) return true;\n      if (cp === 0x1be6) return true;\n      if (cp === 0x1be7) return true;\n      if (cp < 0x1be8) return false;\n      if (cp < 0x1bea) return true;\n      if (cp < 0x1bea) return false;\n      if (cp < 0x1bed) return true;\n      if (cp === 0x1bed) return true;\n      return false;\n    }\n\n    if (cp === 0x1bee) return true;\n    if (cp < 0x1bef) return false;\n    if (cp < 0x1bf2) return true;\n    if (cp < 0x1bf2) return false;\n    if (cp < 0x1bf4) return true;\n    if (cp < 0x1c24) return false;\n    if (cp < 0x1c2c) return true;\n    if (cp < 0x1c2c) return false;\n    if (cp < 0x1c34) return true;\n    if (cp < 0x1c34) return false;\n    if (cp < 0x1c36) return true;\n    if (cp < 0x1c36) return false;\n    if (cp < 0x1c38) return true;\n    if (cp < 0x1c40) return false;\n    if (cp < 0x1c4a) return true;\n    if (cp < 0x1c50) return false;\n    if (cp < 0x1c5a) return true;\n    return false;\n  }\n\n  if (cp < 0x1123e) {\n    if (cp < 0xaab7) {\n      if (cp < 0xa8b4) {\n        if (cp < 0x2d7f) {\n          if (cp < 0x1cf8) {\n            if (cp < 0x1cd0) return false;\n            if (cp < 0x1cd3) return true;\n            if (cp < 0x1cd4) return false;\n            if (cp < 0x1ce1) return true;\n            if (cp === 0x1ce1) return true;\n            if (cp < 0x1ce2) return false;\n            if (cp < 0x1ce9) return true;\n            if (cp === 0x1ced) return true;\n            if (cp < 0x1cf2) return false;\n            if (cp < 0x1cf4) return true;\n            if (cp === 0x1cf4) return true;\n            if (cp === 0x1cf7) return true;\n            return false;\n          }\n\n          if (cp < 0x1cfa) return true;\n          if (cp < 0x1dc0) return false;\n          if (cp < 0x1dfa) return true;\n          if (cp < 0x1dfb) return false;\n          if (cp < 0x1e00) return true;\n          if (cp < 0x203f) return false;\n          if (cp < 0x2041) return true;\n          if (cp === 0x2054) return true;\n          if (cp < 0x20d0) return false;\n          if (cp < 0x20dd) return true;\n          if (cp === 0x20e1) return true;\n          if (cp < 0x20e5) return false;\n          if (cp < 0x20f1) return true;\n          if (cp < 0x2cef) return false;\n          if (cp < 0x2cf2) return true;\n          return false;\n        }\n\n        if (cp < 0xa69e) {\n          if (cp === 0x2d7f) return true;\n          if (cp < 0x2de0) return false;\n          if (cp < 0x2e00) return true;\n          if (cp < 0x302a) return false;\n          if (cp < 0x302e) return true;\n          if (cp < 0x302e) return false;\n          if (cp < 0x3030) return true;\n          if (cp < 0x3099) return false;\n          if (cp < 0x309b) return true;\n          if (cp < 0xa620) return false;\n          if (cp < 0xa62a) return true;\n          if (cp === 0xa66f) return true;\n          if (cp < 0xa674) return false;\n          if (cp < 0xa67e) return true;\n          return false;\n        }\n\n        if (cp < 0xa6a0) return true;\n        if (cp < 0xa6f0) return false;\n        if (cp < 0xa6f2) return true;\n        if (cp === 0xa802) return true;\n        if (cp === 0xa806) return true;\n        if (cp === 0xa80b) return true;\n        if (cp < 0xa823) return false;\n        if (cp < 0xa825) return true;\n        if (cp < 0xa825) return false;\n        if (cp < 0xa827) return true;\n        if (cp === 0xa827) return true;\n        if (cp < 0xa880) return false;\n        if (cp < 0xa882) return true;\n        return false;\n      }\n\n      if (cp < 0xa9d0) {\n        if (cp < 0xa952) {\n          if (cp < 0xa8b4) return false;\n          if (cp < 0xa8c4) return true;\n          if (cp < 0xa8c4) return false;\n          if (cp < 0xa8c6) return true;\n          if (cp < 0xa8d0) return false;\n          if (cp < 0xa8da) return true;\n          if (cp < 0xa8e0) return false;\n          if (cp < 0xa8f2) return true;\n          if (cp === 0xa8ff) return true;\n          if (cp < 0xa900) return false;\n          if (cp < 0xa90a) return true;\n          if (cp < 0xa926) return false;\n          if (cp < 0xa92e) return true;\n          if (cp < 0xa947) return false;\n          if (cp < 0xa952) return true;\n          return false;\n        }\n\n        if (cp < 0xa954) return true;\n        if (cp < 0xa980) return false;\n        if (cp < 0xa983) return true;\n        if (cp === 0xa983) return true;\n        if (cp === 0xa9b3) return true;\n        if (cp < 0xa9b4) return false;\n        if (cp < 0xa9b6) return true;\n        if (cp < 0xa9b6) return false;\n        if (cp < 0xa9ba) return true;\n        if (cp < 0xa9ba) return false;\n        if (cp < 0xa9bc) return true;\n        if (cp === 0xa9bc) return true;\n        if (cp < 0xa9bd) return false;\n        if (cp < 0xa9c1) return true;\n        return false;\n      }\n\n      if (cp < 0xaa43) {\n        if (cp < 0xa9d0) return false;\n        if (cp < 0xa9da) return true;\n        if (cp === 0xa9e5) return true;\n        if (cp < 0xa9f0) return false;\n        if (cp < 0xa9fa) return true;\n        if (cp < 0xaa29) return false;\n        if (cp < 0xaa2f) return true;\n        if (cp < 0xaa2f) return false;\n        if (cp < 0xaa31) return true;\n        if (cp < 0xaa31) return false;\n        if (cp < 0xaa33) return true;\n        if (cp < 0xaa33) return false;\n        if (cp < 0xaa35) return true;\n        if (cp < 0xaa35) return false;\n        if (cp < 0xaa37) return true;\n        return false;\n      }\n\n      if (cp === 0xaa43) return true;\n      if (cp === 0xaa4c) return true;\n      if (cp === 0xaa4d) return true;\n      if (cp < 0xaa50) return false;\n      if (cp < 0xaa5a) return true;\n      if (cp === 0xaa7b) return true;\n      if (cp === 0xaa7c) return true;\n      if (cp === 0xaa7d) return true;\n      if (cp === 0xaab0) return true;\n      if (cp < 0xaab2) return false;\n      if (cp < 0xaab5) return true;\n      return false;\n    }\n\n    if (cp < 0x10d30) {\n      if (cp < 0xfe00) {\n        if (cp < 0xabe3) {\n          if (cp < 0xaab7) return false;\n          if (cp < 0xaab9) return true;\n          if (cp < 0xaabe) return false;\n          if (cp < 0xaac0) return true;\n          if (cp === 0xaac1) return true;\n          if (cp === 0xaaeb) return true;\n          if (cp < 0xaaec) return false;\n          if (cp < 0xaaee) return true;\n          if (cp < 0xaaee) return false;\n          if (cp < 0xaaf0) return true;\n          if (cp === 0xaaf5) return true;\n          if (cp === 0xaaf6) return true;\n          return false;\n        }\n\n        if (cp < 0xabe5) return true;\n        if (cp === 0xabe5) return true;\n        if (cp < 0xabe6) return false;\n        if (cp < 0xabe8) return true;\n        if (cp === 0xabe8) return true;\n        if (cp < 0xabe9) return false;\n        if (cp < 0xabeb) return true;\n        if (cp === 0xabec) return true;\n        if (cp === 0xabed) return true;\n        if (cp < 0xabf0) return false;\n        if (cp < 0xabfa) return true;\n        if (cp === 0xfb1e) return true;\n        return false;\n      }\n\n      if (cp < 0x10376) {\n        if (cp < 0xfe00) return false;\n        if (cp < 0xfe10) return true;\n        if (cp < 0xfe20) return false;\n        if (cp < 0xfe30) return true;\n        if (cp < 0xfe33) return false;\n        if (cp < 0xfe35) return true;\n        if (cp < 0xfe4d) return false;\n        if (cp < 0xfe50) return true;\n        if (cp < 0xff10) return false;\n        if (cp < 0xff1a) return true;\n        if (cp === 0xff3f) return true;\n        if (cp === 0x101fd) return true;\n        if (cp === 0x102e0) return true;\n        return false;\n      }\n\n      if (cp < 0x1037b) return true;\n      if (cp < 0x104a0) return false;\n      if (cp < 0x104aa) return true;\n      if (cp < 0x10a01) return false;\n      if (cp < 0x10a04) return true;\n      if (cp < 0x10a05) return false;\n      if (cp < 0x10a07) return true;\n      if (cp < 0x10a0c) return false;\n      if (cp < 0x10a10) return true;\n      if (cp < 0x10a38) return false;\n      if (cp < 0x10a3b) return true;\n      if (cp === 0x10a3f) return true;\n      if (cp < 0x10ae5) return false;\n      if (cp < 0x10ae7) return true;\n      if (cp < 0x10d24) return false;\n      if (cp < 0x10d28) return true;\n      return false;\n    }\n\n    if (cp < 0x1112d) {\n      if (cp < 0x11082) {\n        if (cp < 0x10d30) return false;\n        if (cp < 0x10d3a) return true;\n        if (cp < 0x10f46) return false;\n        if (cp < 0x10f51) return true;\n        if (cp === 0x11000) return true;\n        if (cp === 0x11001) return true;\n        if (cp === 0x11002) return true;\n        if (cp < 0x11038) return false;\n        if (cp < 0x11047) return true;\n        if (cp < 0x11066) return false;\n        if (cp < 0x11070) return true;\n        if (cp < 0x1107f) return false;\n        if (cp < 0x11082) return true;\n        return false;\n      }\n\n      if (cp === 0x11082) return true;\n      if (cp < 0x110b0) return false;\n      if (cp < 0x110b3) return true;\n      if (cp < 0x110b3) return false;\n      if (cp < 0x110b7) return true;\n      if (cp < 0x110b7) return false;\n      if (cp < 0x110b9) return true;\n      if (cp < 0x110b9) return false;\n      if (cp < 0x110bb) return true;\n      if (cp < 0x110f0) return false;\n      if (cp < 0x110fa) return true;\n      if (cp < 0x11100) return false;\n      if (cp < 0x11103) return true;\n      if (cp < 0x11127) return false;\n      if (cp < 0x1112c) return true;\n      if (cp === 0x1112c) return true;\n      return false;\n    }\n\n    if (cp < 0x111bf) {\n      if (cp < 0x1112d) return false;\n      if (cp < 0x11135) return true;\n      if (cp < 0x11136) return false;\n      if (cp < 0x11140) return true;\n      if (cp < 0x11145) return false;\n      if (cp < 0x11147) return true;\n      if (cp === 0x11173) return true;\n      if (cp < 0x11180) return false;\n      if (cp < 0x11182) return true;\n      if (cp === 0x11182) return true;\n      if (cp < 0x111b3) return false;\n      if (cp < 0x111b6) return true;\n      if (cp < 0x111b6) return false;\n      if (cp < 0x111bf) return true;\n      return false;\n    }\n\n    if (cp < 0x111c1) return true;\n    if (cp < 0x111c9) return false;\n    if (cp < 0x111cd) return true;\n    if (cp < 0x111d0) return false;\n    if (cp < 0x111da) return true;\n    if (cp < 0x1122c) return false;\n    if (cp < 0x1122f) return true;\n    if (cp < 0x1122f) return false;\n    if (cp < 0x11232) return true;\n    if (cp < 0x11232) return false;\n    if (cp < 0x11234) return true;\n    if (cp === 0x11234) return true;\n    if (cp === 0x11235) return true;\n    if (cp < 0x11236) return false;\n    if (cp < 0x11238) return true;\n    return false;\n  }\n\n  if (cp < 0x11a33) {\n    if (cp < 0x115af) {\n      if (cp < 0x11435) {\n        if (cp < 0x1133e) {\n          if (cp === 0x1123e) return true;\n          if (cp === 0x112df) return true;\n          if (cp < 0x112e0) return false;\n          if (cp < 0x112e3) return true;\n          if (cp < 0x112e3) return false;\n          if (cp < 0x112eb) return true;\n          if (cp < 0x112f0) return false;\n          if (cp < 0x112fa) return true;\n          if (cp < 0x11300) return false;\n          if (cp < 0x11302) return true;\n          if (cp < 0x11302) return false;\n          if (cp < 0x11304) return true;\n          if (cp < 0x1133b) return false;\n          if (cp < 0x1133d) return true;\n          return false;\n        }\n\n        if (cp < 0x11340) return true;\n        if (cp === 0x11340) return true;\n        if (cp < 0x11341) return false;\n        if (cp < 0x11345) return true;\n        if (cp < 0x11347) return false;\n        if (cp < 0x11349) return true;\n        if (cp < 0x1134b) return false;\n        if (cp < 0x1134e) return true;\n        if (cp === 0x11357) return true;\n        if (cp < 0x11362) return false;\n        if (cp < 0x11364) return true;\n        if (cp < 0x11366) return false;\n        if (cp < 0x1136d) return true;\n        if (cp < 0x11370) return false;\n        if (cp < 0x11375) return true;\n        return false;\n      }\n\n      if (cp < 0x114b0) {\n        if (cp < 0x11435) return false;\n        if (cp < 0x11438) return true;\n        if (cp < 0x11438) return false;\n        if (cp < 0x11440) return true;\n        if (cp < 0x11440) return false;\n        if (cp < 0x11442) return true;\n        if (cp < 0x11442) return false;\n        if (cp < 0x11445) return true;\n        if (cp === 0x11445) return true;\n        if (cp === 0x11446) return true;\n        if (cp < 0x11450) return false;\n        if (cp < 0x1145a) return true;\n        if (cp === 0x1145e) return true;\n        return false;\n      }\n\n      if (cp < 0x114b3) return true;\n      if (cp < 0x114b3) return false;\n      if (cp < 0x114b9) return true;\n      if (cp === 0x114b9) return true;\n      if (cp === 0x114ba) return true;\n      if (cp < 0x114bb) return false;\n      if (cp < 0x114bf) return true;\n      if (cp < 0x114bf) return false;\n      if (cp < 0x114c1) return true;\n      if (cp === 0x114c1) return true;\n      if (cp < 0x114c2) return false;\n      if (cp < 0x114c4) return true;\n      if (cp < 0x114d0) return false;\n      if (cp < 0x114da) return true;\n      return false;\n    }\n\n    if (cp < 0x116ae) {\n      if (cp < 0x11633) {\n        if (cp < 0x115af) return false;\n        if (cp < 0x115b2) return true;\n        if (cp < 0x115b2) return false;\n        if (cp < 0x115b6) return true;\n        if (cp < 0x115b8) return false;\n        if (cp < 0x115bc) return true;\n        if (cp < 0x115bc) return false;\n        if (cp < 0x115be) return true;\n        if (cp === 0x115be) return true;\n        if (cp < 0x115bf) return false;\n        if (cp < 0x115c1) return true;\n        if (cp < 0x115dc) return false;\n        if (cp < 0x115de) return true;\n        if (cp < 0x11630) return false;\n        if (cp < 0x11633) return true;\n        return false;\n      }\n\n      if (cp < 0x1163b) return true;\n      if (cp < 0x1163b) return false;\n      if (cp < 0x1163d) return true;\n      if (cp === 0x1163d) return true;\n      if (cp === 0x1163e) return true;\n      if (cp < 0x1163f) return false;\n      if (cp < 0x11641) return true;\n      if (cp < 0x11650) return false;\n      if (cp < 0x1165a) return true;\n      if (cp === 0x116ab) return true;\n      if (cp === 0x116ac) return true;\n      if (cp === 0x116ad) return true;\n      return false;\n    }\n\n    if (cp < 0x11726) {\n      if (cp < 0x116ae) return false;\n      if (cp < 0x116b0) return true;\n      if (cp < 0x116b0) return false;\n      if (cp < 0x116b6) return true;\n      if (cp === 0x116b6) return true;\n      if (cp === 0x116b7) return true;\n      if (cp < 0x116c0) return false;\n      if (cp < 0x116ca) return true;\n      if (cp < 0x1171d) return false;\n      if (cp < 0x11720) return true;\n      if (cp < 0x11720) return false;\n      if (cp < 0x11722) return true;\n      if (cp < 0x11722) return false;\n      if (cp < 0x11726) return true;\n      return false;\n    }\n\n    if (cp === 0x11726) return true;\n    if (cp < 0x11727) return false;\n    if (cp < 0x1172c) return true;\n    if (cp < 0x11730) return false;\n    if (cp < 0x1173a) return true;\n    if (cp < 0x1182c) return false;\n    if (cp < 0x1182f) return true;\n    if (cp < 0x1182f) return false;\n    if (cp < 0x11838) return true;\n    if (cp === 0x11838) return true;\n    if (cp < 0x11839) return false;\n    if (cp < 0x1183b) return true;\n    if (cp < 0x118e0) return false;\n    if (cp < 0x118ea) return true;\n    if (cp < 0x11a01) return false;\n    if (cp < 0x11a0b) return true;\n    return false;\n  }\n\n  if (cp < 0x11d97) {\n    if (cp < 0x11ca9) {\n      if (cp < 0x11a97) {\n        if (cp < 0x11a33) return false;\n        if (cp < 0x11a39) return true;\n        if (cp === 0x11a39) return true;\n        if (cp < 0x11a3b) return false;\n        if (cp < 0x11a3f) return true;\n        if (cp === 0x11a47) return true;\n        if (cp < 0x11a51) return false;\n        if (cp < 0x11a57) return true;\n        if (cp < 0x11a57) return false;\n        if (cp < 0x11a59) return true;\n        if (cp < 0x11a59) return false;\n        if (cp < 0x11a5c) return true;\n        if (cp < 0x11a8a) return false;\n        if (cp < 0x11a97) return true;\n        return false;\n      }\n\n      if (cp === 0x11a97) return true;\n      if (cp < 0x11a98) return false;\n      if (cp < 0x11a9a) return true;\n      if (cp === 0x11c2f) return true;\n      if (cp < 0x11c30) return false;\n      if (cp < 0x11c37) return true;\n      if (cp < 0x11c38) return false;\n      if (cp < 0x11c3e) return true;\n      if (cp === 0x11c3e) return true;\n      if (cp === 0x11c3f) return true;\n      if (cp < 0x11c50) return false;\n      if (cp < 0x11c5a) return true;\n      if (cp < 0x11c92) return false;\n      if (cp < 0x11ca8) return true;\n      return false;\n    }\n\n    if (cp < 0x11d3c) {\n      if (cp === 0x11ca9) return true;\n      if (cp < 0x11caa) return false;\n      if (cp < 0x11cb1) return true;\n      if (cp === 0x11cb1) return true;\n      if (cp < 0x11cb2) return false;\n      if (cp < 0x11cb4) return true;\n      if (cp === 0x11cb4) return true;\n      if (cp < 0x11cb5) return false;\n      if (cp < 0x11cb7) return true;\n      if (cp < 0x11d31) return false;\n      if (cp < 0x11d37) return true;\n      if (cp === 0x11d3a) return true;\n      return false;\n    }\n\n    if (cp < 0x11d3e) return true;\n    if (cp < 0x11d3f) return false;\n    if (cp < 0x11d46) return true;\n    if (cp === 0x11d47) return true;\n    if (cp < 0x11d50) return false;\n    if (cp < 0x11d5a) return true;\n    if (cp < 0x11d8a) return false;\n    if (cp < 0x11d8f) return true;\n    if (cp < 0x11d90) return false;\n    if (cp < 0x11d92) return true;\n    if (cp < 0x11d93) return false;\n    if (cp < 0x11d95) return true;\n    if (cp === 0x11d95) return true;\n    if (cp === 0x11d96) return true;\n    return false;\n  }\n\n  if (cp < 0x1d242) {\n    if (cp < 0x16f51) {\n      if (cp === 0x11d97) return true;\n      if (cp < 0x11da0) return false;\n      if (cp < 0x11daa) return true;\n      if (cp < 0x11ef3) return false;\n      if (cp < 0x11ef5) return true;\n      if (cp < 0x11ef5) return false;\n      if (cp < 0x11ef7) return true;\n      if (cp < 0x16a60) return false;\n      if (cp < 0x16a6a) return true;\n      if (cp < 0x16af0) return false;\n      if (cp < 0x16af5) return true;\n      if (cp < 0x16b30) return false;\n      if (cp < 0x16b37) return true;\n      if (cp < 0x16b50) return false;\n      if (cp < 0x16b5a) return true;\n      return false;\n    }\n\n    if (cp < 0x16f7f) return true;\n    if (cp < 0x16f8f) return false;\n    if (cp < 0x16f93) return true;\n    if (cp < 0x1bc9d) return false;\n    if (cp < 0x1bc9f) return true;\n    if (cp < 0x1d165) return false;\n    if (cp < 0x1d167) return true;\n    if (cp < 0x1d167) return false;\n    if (cp < 0x1d16a) return true;\n    if (cp < 0x1d16d) return false;\n    if (cp < 0x1d173) return true;\n    if (cp < 0x1d17b) return false;\n    if (cp < 0x1d183) return true;\n    if (cp < 0x1d185) return false;\n    if (cp < 0x1d18c) return true;\n    if (cp < 0x1d1aa) return false;\n    if (cp < 0x1d1ae) return true;\n    return false;\n  }\n\n  if (cp < 0x1e000) {\n    if (cp < 0x1d242) return false;\n    if (cp < 0x1d245) return true;\n    if (cp < 0x1d7ce) return false;\n    if (cp < 0x1d800) return true;\n    if (cp < 0x1da00) return false;\n    if (cp < 0x1da37) return true;\n    if (cp < 0x1da3b) return false;\n    if (cp < 0x1da6d) return true;\n    if (cp === 0x1da75) return true;\n    if (cp === 0x1da84) return true;\n    if (cp < 0x1da9b) return false;\n    if (cp < 0x1daa0) return true;\n    if (cp < 0x1daa1) return false;\n    if (cp < 0x1dab0) return true;\n    return false;\n  }\n\n  if (cp < 0x1e007) return true;\n  if (cp < 0x1e008) return false;\n  if (cp < 0x1e019) return true;\n  if (cp < 0x1e01b) return false;\n  if (cp < 0x1e022) return true;\n  if (cp < 0x1e023) return false;\n  if (cp < 0x1e025) return true;\n  if (cp < 0x1e026) return false;\n  if (cp < 0x1e02b) return true;\n  if (cp < 0x1e8d0) return false;\n  if (cp < 0x1e8d7) return true;\n  if (cp < 0x1e944) return false;\n  if (cp < 0x1e94b) return true;\n  if (cp < 0x1e950) return false;\n  if (cp < 0x1e95a) return true;\n  if (cp < 0xe0100) return false;\n  if (cp < 0xe01f0) return true;\n  return false;\n}\n\nconst PropertyData = {\n  $LONE: new Set([\"ASCII\", \"ASCII_Hex_Digit\", \"AHex\", \"Alphabetic\", \"Alpha\", \"Any\", \"Assigned\", \"Bidi_Control\", \"Bidi_C\", \"Bidi_Mirrored\", \"Bidi_M\", \"Case_Ignorable\", \"CI\", \"Cased\", \"Changes_When_Casefolded\", \"CWCF\", \"Changes_When_Casemapped\", \"CWCM\", \"Changes_When_Lowercased\", \"CWL\", \"Changes_When_NFKC_Casefolded\", \"CWKCF\", \"Changes_When_Titlecased\", \"CWT\", \"Changes_When_Uppercased\", \"CWU\", \"Dash\", \"Default_Ignorable_Code_Point\", \"DI\", \"Deprecated\", \"Dep\", \"Diacritic\", \"Dia\", \"Emoji\", \"Emoji_Component\", \"Emoji_Modifier\", \"Emoji_Modifier_Base\", \"Emoji_Presentation\", \"Extender\", \"Ext\", \"Grapheme_Base\", \"Gr_Base\", \"Grapheme_Extend\", \"Gr_Ext\", \"Hex_Digit\", \"Hex\", \"IDS_Binary_Operator\", \"IDSB\", \"IDS_Trinary_Operator\", \"IDST\", \"ID_Continue\", \"IDC\", \"ID_Start\", \"IDS\", \"Ideographic\", \"Ideo\", \"Join_Control\", \"Join_C\", \"Logical_Order_Exception\", \"LOE\", \"Lowercase\", \"Lower\", \"Math\", \"Noncharacter_Code_Point\", \"NChar\", \"Pattern_Syntax\", \"Pat_Syn\", \"Pattern_White_Space\", \"Pat_WS\", \"Quotation_Mark\", \"QMark\", \"Radical\", \"Regional_Indicator\", \"RI\", \"Sentence_Terminal\", \"STerm\", \"Soft_Dotted\", \"SD\", \"Terminal_Punctuation\", \"Term\", \"Unified_Ideograph\", \"UIdeo\", \"Uppercase\", \"Upper\", \"Variation_Selector\", \"VS\", \"White_Space\", \"space\", \"XID_Continue\", \"XIDC\", \"XID_Start\", \"XIDS\"]),\n  General_Category: new Set([\"Cased_Letter\", \"LC\", \"Close_Punctuation\", \"Pe\", \"Connector_Punctuation\", \"Pc\", \"Control\", \"Cc\", \"cntrl\", \"Currency_Symbol\", \"Sc\", \"Dash_Punctuation\", \"Pd\", \"Decimal_Number\", \"Nd\", \"digit\", \"Enclosing_Mark\", \"Me\", \"Final_Punctuation\", \"Pf\", \"Format\", \"Cf\", \"Initial_Punctuation\", \"Pi\", \"Letter\", \"L\", \"Letter_Number\", \"Nl\", \"Line_Separator\", \"Zl\", \"Lowercase_Letter\", \"Ll\", \"Mark\", \"M\", \"Combining_Mark\", \"Math_Symbol\", \"Sm\", \"Modifier_Letter\", \"Lm\", \"Modifier_Symbol\", \"Sk\", \"Nonspacing_Mark\", \"Mn\", \"Number\", \"N\", \"Open_Punctuation\", \"Ps\", \"Other\", \"C\", \"Other_Letter\", \"Lo\", \"Other_Number\", \"No\", \"Other_Punctuation\", \"Po\", \"Other_Symbol\", \"So\", \"Paragraph_Separator\", \"Zp\", \"Private_Use\", \"Co\", \"Punctuation\", \"P\", \"punct\", \"Separator\", \"Z\", \"Space_Separator\", \"Zs\", \"Spacing_Mark\", \"Mc\", \"Surrogate\", \"Cs\", \"Symbol\", \"S\", \"Titlecase_Letter\", \"Lt\", \"Unassigned\", \"Cn\", \"Uppercase_Letter\", \"Lu\"]),\n  Script: new Set([\"Adlam\", \"Adlm\", \"Ahom\", \"Anatolian_Hieroglyphs\", \"Hluw\", \"Arabic\", \"Arab\", \"Armenian\", \"Armn\", \"Avestan\", \"Avst\", \"Balinese\", \"Bali\", \"Bamum\", \"Bamu\", \"Bassa_Vah\", \"Bass\", \"Batak\", \"Batk\", \"Bengali\", \"Beng\", \"Bhaiksuki\", \"Bhks\", \"Bopomofo\", \"Bopo\", \"Brahmi\", \"Brah\", \"Braille\", \"Brai\", \"Buginese\", \"Bugi\", \"Buhid\", \"Buhd\", \"Canadian_Aboriginal\", \"Cans\", \"Carian\", \"Cari\", \"Caucasian_Albanian\", \"Aghb\", \"Chakma\", \"Cakm\", \"Cham\", \"Cherokee\", \"Cher\", \"Common\", \"Zyyy\", \"Coptic\", \"Copt\", \"Qaac\", \"Cuneiform\", \"Xsux\", \"Cypriot\", \"Cprt\", \"Cyrillic\", \"Cyrl\", \"Deseret\", \"Dsrt\", \"Devanagari\", \"Deva\", \"Duployan\", \"Dupl\", \"Egyptian_Hieroglyphs\", \"Egyp\", \"Elbasan\", \"Elba\", \"Ethiopic\", \"Ethi\", \"Georgian\", \"Geor\", \"Glagolitic\", \"Glag\", \"Gothic\", \"Goth\", \"Grantha\", \"Gran\", \"Greek\", \"Grek\", \"Gujarati\", \"Gujr\", \"Gurmukhi\", \"Guru\", \"Han\", \"Hani\", \"Hangul\", \"Hang\", \"Hanunoo\", \"Hano\", \"Hatran\", \"Hatr\", \"Hebrew\", \"Hebr\", \"Hiragana\", \"Hira\", \"Imperial_Aramaic\", \"Armi\", \"Inherited\", \"Zinh\", \"Qaai\", \"Inscriptional_Pahlavi\", \"Phli\", \"Inscriptional_Parthian\", \"Prti\", \"Javanese\", \"Java\", \"Kaithi\", \"Kthi\", \"Kannada\", \"Knda\", \"Katakana\", \"Kana\", \"Kayah_Li\", \"Kali\", \"Kharoshthi\", \"Khar\", \"Khmer\", \"Khmr\", \"Khojki\", \"Khoj\", \"Khudawadi\", \"Sind\", \"Lao\", \"Laoo\", \"Latin\", \"Latn\", \"Lepcha\", \"Lepc\", \"Limbu\", \"Limb\", \"Linear_A\", \"Lina\", \"Linear_B\", \"Linb\", \"Lisu\", \"Lycian\", \"Lyci\", \"Lydian\", \"Lydi\", \"Mahajani\", \"Mahj\", \"Malayalam\", \"Mlym\", \"Mandaic\", \"Mand\", \"Manichaean\", \"Mani\", \"Marchen\", \"Marc\", \"Masaram_Gondi\", \"Gonm\", \"Meetei_Mayek\", \"Mtei\", \"Mende_Kikakui\", \"Mend\", \"Meroitic_Cursive\", \"Merc\", \"Meroitic_Hieroglyphs\", \"Mero\", \"Miao\", \"Plrd\", \"Modi\", \"Mongolian\", \"Mong\", \"Mro\", \"Mroo\", \"Multani\", \"Mult\", \"Myanmar\", \"Mymr\", \"Nabataean\", \"Nbat\", \"New_Tai_Lue\", \"Talu\", \"Newa\", \"Nko\", \"Nkoo\", \"Nushu\", \"Nshu\", \"Ogham\", \"Ogam\", \"Ol_Chiki\", \"Olck\", \"Old_Hungarian\", \"Hung\", \"Old_Italic\", \"Ital\", \"Old_North_Arabian\", \"Narb\", \"Old_Permic\", \"Perm\", \"Old_Persian\", \"Xpeo\", \"Old_South_Arabian\", \"Sarb\", \"Old_Turkic\", \"Orkh\", \"Oriya\", \"Orya\", \"Osage\", \"Osge\", \"Osmanya\", \"Osma\", \"Pahawh_Hmong\", \"Hmng\", \"Palmyrene\", \"Palm\", \"Pau_Cin_Hau\", \"Pauc\", \"Phags_Pa\", \"Phag\", \"Phoenician\", \"Phnx\", \"Psalter_Pahlavi\", \"Phlp\", \"Rejang\", \"Rjng\", \"Runic\", \"Runr\", \"Samaritan\", \"Samr\", \"Saurashtra\", \"Saur\", \"Sharada\", \"Shrd\", \"Shavian\", \"Shaw\", \"Siddham\", \"Sidd\", \"SignWriting\", \"Sgnw\", \"Sinhala\", \"Sinh\", \"Sora_Sompeng\", \"Sora\", \"Soyombo\", \"Soyo\", \"Sundanese\", \"Sund\", \"Syloti_Nagri\", \"Sylo\", \"Syriac\", \"Syrc\", \"Tagalog\", \"Tglg\", \"Tagbanwa\", \"Tagb\", \"Tai_Le\", \"Tale\", \"Tai_Tham\", \"Lana\", \"Tai_Viet\", \"Tavt\", \"Takri\", \"Takr\", \"Tamil\", \"Taml\", \"Tangut\", \"Tang\", \"Telugu\", \"Telu\", \"Thaana\", \"Thaa\", \"Thai\", \"Tibetan\", \"Tibt\", \"Tifinagh\", \"Tfng\", \"Tirhuta\", \"Tirh\", \"Ugaritic\", \"Ugar\", \"Vai\", \"Vaii\", \"Warang_Citi\", \"Wara\", \"Yi\", \"Yiii\", \"Zanabazar_Square\", \"Zanb\"])\n};\nPropertyData.gc = PropertyData.General_Category;\nPropertyData.sc = PropertyData.Script_Extensions = PropertyData.scx = PropertyData.Script;\nconst Backspace = 0x08;\nconst CharacterTabulation = 0x09;\nconst LineFeed = 0x0a;\nconst LineTabulation = 0x0b;\nconst FormFeed = 0x0c;\nconst CarriageReturn = 0x0d;\nconst ExclamationMark = 0x21;\nconst DollarSign = 0x24;\nconst LeftParenthesis = 0x28;\nconst RightParenthesis = 0x29;\nconst Asterisk = 0x2a;\nconst PlusSign = 0x2b;\nconst Comma = 0x2c;\nconst HyphenMinus = 0x2d;\nconst FullStop = 0x2e;\nconst Solidus = 0x2f;\nconst DigitZero = 0x30;\nconst DigitOne = 0x31;\nconst DigitSeven = 0x37;\nconst DigitNine = 0x39;\nconst Colon = 0x3a;\nconst LessThanSign = 0x3c;\nconst EqualsSign = 0x3d;\nconst GreaterThanSign = 0x3e;\nconst QuestionMark = 0x3f;\nconst LatinCapitalLetterA = 0x41;\nconst LatinCapitalLetterB = 0x42;\nconst LatinCapitalLetterD = 0x44;\nconst LatinCapitalLetterF = 0x46;\nconst LatinCapitalLetterP = 0x50;\nconst LatinCapitalLetterS = 0x53;\nconst LatinCapitalLetterW = 0x57;\nconst LatinCapitalLetterZ = 0x5a;\nconst LowLine = 0x5f;\nconst LatinSmallLetterA = 0x61;\nconst LatinSmallLetterB = 0x62;\nconst LatinSmallLetterC = 0x63;\nconst LatinSmallLetterD = 0x64;\nconst LatinSmallLetterF = 0x66;\nconst LatinSmallLetterG = 0x67;\nconst LatinSmallLetterI = 0x69;\nconst LatinSmallLetterK = 0x6b;\nconst LatinSmallLetterM = 0x6d;\nconst LatinSmallLetterN = 0x6e;\nconst LatinSmallLetterP = 0x70;\nconst LatinSmallLetterR = 0x72;\nconst LatinSmallLetterS = 0x73;\nconst LatinSmallLetterT = 0x74;\nconst LatinSmallLetterU = 0x75;\nconst LatinSmallLetterV = 0x76;\nconst LatinSmallLetterW = 0x77;\nconst LatinSmallLetterX = 0x78;\nconst LatinSmallLetterY = 0x79;\nconst LatinSmallLetterZ = 0x7a;\nconst LeftSquareBracket = 0x5b;\nconst ReverseSolidus = 0x5c;\nconst RightSquareBracket = 0x5d;\nconst CircumflexAccent = 0x5e;\nconst LeftCurlyBracket = 0x7b;\nconst VerticalLine = 0x7c;\nconst RightCurlyBracket = 0x7d;\nconst ZeroWidthNonJoiner = 0x200c;\nconst ZeroWidthJoiner = 0x200d;\nconst LineSeparator = 0x2028;\nconst ParagraphSeparator = 0x2029;\nconst MinCodePoint = 0x00;\nconst MaxCodePoint = 0x10ffff;\n\nfunction isLatinLetter(code) {\n  return code >= LatinCapitalLetterA && code <= LatinCapitalLetterZ || code >= LatinSmallLetterA && code <= LatinSmallLetterZ;\n}\n\nfunction isDecimalDigit(code) {\n  return code >= DigitZero && code <= DigitNine;\n}\n\nfunction isOctalDigit(code) {\n  return code >= DigitZero && code <= DigitSeven;\n}\n\nfunction isHexDigit(code) {\n  return code >= DigitZero && code <= DigitNine || code >= LatinCapitalLetterA && code <= LatinCapitalLetterF || code >= LatinSmallLetterA && code <= LatinSmallLetterF;\n}\n\nfunction isLineTerminator(code) {\n  return code === LineFeed || code === CarriageReturn || code === LineSeparator || code === ParagraphSeparator;\n}\n\nfunction isValidUnicode(code) {\n  return code >= MinCodePoint && code <= MaxCodePoint;\n}\n\nfunction digitToInt(code) {\n  if (code >= LatinSmallLetterA && code <= LatinSmallLetterF) {\n    return code - LatinSmallLetterA + 10;\n  }\n\n  if (code >= LatinCapitalLetterA && code <= LatinCapitalLetterF) {\n    return code - LatinCapitalLetterA + 10;\n  }\n\n  return code - DigitZero;\n}\n\nconst legacyImpl = {\n  at(s, end, i) {\n    return i < end ? s.charCodeAt(i) : -1;\n  },\n\n  width(c) {\n    return 1;\n  }\n\n};\nconst unicodeImpl = {\n  at(s, end, i) {\n    return i < end ? s.codePointAt(i) : -1;\n  },\n\n  width(c) {\n    return c > 0xffff ? 2 : 1;\n  }\n\n};\n\nclass Reader {\n  constructor() {\n    this._impl = legacyImpl;\n    this._s = \"\";\n    this._i = 0;\n    this._end = 0;\n    this._cp1 = -1;\n    this._w1 = 1;\n    this._cp2 = -1;\n    this._w2 = 1;\n    this._cp3 = -1;\n    this._w3 = 1;\n    this._cp4 = -1;\n  }\n\n  get source() {\n    return this._s;\n  }\n\n  get index() {\n    return this._i;\n  }\n\n  get currentCodePoint() {\n    return this._cp1;\n  }\n\n  get nextCodePoint() {\n    return this._cp2;\n  }\n\n  get nextCodePoint2() {\n    return this._cp3;\n  }\n\n  get nextCodePoint3() {\n    return this._cp4;\n  }\n\n  reset(source, start, end, uFlag) {\n    this._impl = uFlag ? unicodeImpl : legacyImpl;\n    this._s = source;\n    this._end = end;\n    this.rewind(start);\n  }\n\n  rewind(index) {\n    const impl = this._impl;\n    this._i = index;\n    this._cp1 = impl.at(this._s, this._end, index);\n    this._w1 = impl.width(this._cp1);\n    this._cp2 = impl.at(this._s, this._end, index + this._w1);\n    this._w2 = impl.width(this._cp2);\n    this._cp3 = impl.at(this._s, this._end, index + this._w1 + this._w2);\n    this._w3 = impl.width(this._cp3);\n    this._cp4 = impl.at(this._s, this._end, index + this._w1 + this._w2 + this._w3);\n  }\n\n  advance() {\n    if (this._cp1 !== -1) {\n      const impl = this._impl;\n      this._i += this._w1;\n      this._cp1 = this._cp2;\n      this._w1 = this._w2;\n      this._cp2 = this._cp3;\n      this._w2 = impl.width(this._cp2);\n      this._cp3 = this._cp4;\n      this._w3 = impl.width(this._cp3);\n      this._cp4 = impl.at(this._s, this._end, this._i + this._w1 + this._w2 + this._w3);\n    }\n  }\n\n  eat(cp) {\n    if (this._cp1 === cp) {\n      this.advance();\n      return true;\n    }\n\n    return false;\n  }\n\n  eat2(cp1, cp2) {\n    if (this._cp1 === cp1 && this._cp2 === cp2) {\n      this.advance();\n      this.advance();\n      return true;\n    }\n\n    return false;\n  }\n\n  eat3(cp1, cp2, cp3) {\n    if (this._cp1 === cp1 && this._cp2 === cp2 && this._cp3 === cp3) {\n      this.advance();\n      this.advance();\n      this.advance();\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nclass RegExpSyntaxError extends SyntaxError {\n  constructor(source, uFlag, index, message) {\n    if (source) {\n      if (source[0] !== \"/\") {\n        source = `/${source}/${uFlag ? \"u\" : \"\"}`;\n      }\n\n      source = `: ${source}`;\n    }\n\n    super(`Invalid regular expression${source}: ${message}`);\n    this.index = index;\n  }\n\n}\n\nfunction isSyntaxCharacter(cp) {\n  return cp === CircumflexAccent || cp === DollarSign || cp === ReverseSolidus || cp === FullStop || cp === Asterisk || cp === PlusSign || cp === QuestionMark || cp === LeftParenthesis || cp === RightParenthesis || cp === LeftSquareBracket || cp === RightSquareBracket || cp === LeftCurlyBracket || cp === RightCurlyBracket || cp === VerticalLine;\n}\n\nfunction isRegExpIdentifierStart(cp) {\n  return isIdStart(cp) || cp === DollarSign || cp === LowLine;\n}\n\nfunction isRegExpIdentifierPart(cp) {\n  return isIdContinue(cp) || cp === DollarSign || cp === LowLine || cp === ZeroWidthNonJoiner || cp === ZeroWidthJoiner;\n}\n\nfunction isUnicodePropertyNameCharacter(cp) {\n  return isLatinLetter(cp) || cp === LowLine;\n}\n\nfunction isUnicodePropertyValueCharacter(cp) {\n  return isUnicodePropertyNameCharacter(cp) || isDecimalDigit(cp);\n}\n\nfunction isValidUnicodeProperty(name, value) {\n  return PropertyData.hasOwnProperty(name) && PropertyData[name].has(value);\n}\n\nfunction isValidUnicodePropertyName(name) {\n  return PropertyData.$LONE.has(name);\n}\n\nclass RegExpValidator {\n  constructor(options) {\n    this._reader = new Reader();\n    this._uFlag = false;\n    this._nFlag = false;\n    this._lastIntValue = 0;\n    this._lastMinValue = 0;\n    this._lastMaxValue = 0;\n    this._lastStrValue = \"\";\n    this._lastKeyValue = \"\";\n    this._lastValValue = \"\";\n    this._lastAssertionIsQuantifiable = false;\n    this._numCapturingParens = 0;\n    this._groupNames = new Set();\n    this._backreferenceNames = new Set();\n    this._options = options || {};\n  }\n\n  validateLiteral(source, start = 0, end = source.length) {\n    this._uFlag = this._nFlag = false;\n    this.reset(source, start, end);\n    this.onLiteralEnter(start);\n\n    if (this.eat(Solidus) && this.eatRegExpBody() && this.eat(Solidus)) {\n      const flagStart = this.index;\n      const uFlag = source.indexOf(\"u\", flagStart) !== -1;\n      this.validateFlags(source, flagStart, end);\n      this.validatePattern(source, start + 1, flagStart - 1, uFlag);\n    } else if (start >= end) {\n      this.raise(\"Empty\");\n    } else {\n      const c = String.fromCodePoint(this.currentCodePoint);\n      this.raise(`Unexpected character '${c}'`);\n    }\n\n    this.onLiteralLeave(start, end);\n  }\n\n  validateFlags(source, start = 0, end = source.length) {\n    const existingFlags = new Set();\n    let global = false;\n    let ignoreCase = false;\n    let multiline = false;\n    let sticky = false;\n    let unicode = false;\n    let dotAll = false;\n\n    for (let i = start; i < end; ++i) {\n      const flag = source.charCodeAt(i);\n\n      if (existingFlags.has(flag)) {\n        this.raise(`Duplicated flag '${source[i]}'`);\n      }\n\n      existingFlags.add(flag);\n\n      if (flag === LatinSmallLetterG) {\n        global = true;\n      } else if (flag === LatinSmallLetterI) {\n        ignoreCase = true;\n      } else if (flag === LatinSmallLetterM) {\n        multiline = true;\n      } else if (flag === LatinSmallLetterU && this.ecmaVersion >= 2015) {\n        unicode = true;\n      } else if (flag === LatinSmallLetterY && this.ecmaVersion >= 2015) {\n        sticky = true;\n      } else if (flag === LatinSmallLetterS && this.ecmaVersion >= 2018) {\n        dotAll = true;\n      } else {\n        this.raise(`Invalid flag '${source[i]}'`);\n      }\n    }\n\n    this.onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll);\n  }\n\n  validatePattern(source, start = 0, end = source.length, uFlag = false) {\n    this._uFlag = uFlag && this.ecmaVersion >= 2015;\n    this._nFlag = uFlag && this.ecmaVersion >= 2018;\n    this.reset(source, start, end);\n    this.pattern();\n\n    if (!this._nFlag && this.ecmaVersion >= 2018 && this._groupNames.size > 0) {\n      this._nFlag = true;\n      this.rewind(start);\n      this.pattern();\n    }\n  }\n\n  get strict() {\n    return Boolean(this._options.strict || this._uFlag);\n  }\n\n  get ecmaVersion() {\n    return this._options.ecmaVersion || 2018;\n  }\n\n  onLiteralEnter(start) {\n    if (this._options.onLiteralEnter) {\n      this._options.onLiteralEnter(start);\n    }\n  }\n\n  onLiteralLeave(start, end) {\n    if (this._options.onLiteralLeave) {\n      this._options.onLiteralLeave(start, end);\n    }\n  }\n\n  onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll) {\n    if (this._options.onFlags) {\n      this._options.onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll);\n    }\n  }\n\n  onPatternEnter(start) {\n    if (this._options.onPatternEnter) {\n      this._options.onPatternEnter(start);\n    }\n  }\n\n  onPatternLeave(start, end) {\n    if (this._options.onPatternLeave) {\n      this._options.onPatternLeave(start, end);\n    }\n  }\n\n  onDisjunctionEnter(start) {\n    if (this._options.onDisjunctionEnter) {\n      this._options.onDisjunctionEnter(start);\n    }\n  }\n\n  onDisjunctionLeave(start, end) {\n    if (this._options.onDisjunctionLeave) {\n      this._options.onDisjunctionLeave(start, end);\n    }\n  }\n\n  onAlternativeEnter(start, index) {\n    if (this._options.onAlternativeEnter) {\n      this._options.onAlternativeEnter(start, index);\n    }\n  }\n\n  onAlternativeLeave(start, end, index) {\n    if (this._options.onAlternativeLeave) {\n      this._options.onAlternativeLeave(start, end, index);\n    }\n  }\n\n  onGroupEnter(start) {\n    if (this._options.onGroupEnter) {\n      this._options.onGroupEnter(start);\n    }\n  }\n\n  onGroupLeave(start, end) {\n    if (this._options.onGroupLeave) {\n      this._options.onGroupLeave(start, end);\n    }\n  }\n\n  onCapturingGroupEnter(start, name) {\n    if (this._options.onCapturingGroupEnter) {\n      this._options.onCapturingGroupEnter(start, name);\n    }\n  }\n\n  onCapturingGroupLeave(start, end, name) {\n    if (this._options.onCapturingGroupLeave) {\n      this._options.onCapturingGroupLeave(start, end, name);\n    }\n  }\n\n  onQuantifier(start, end, min, max, greedy) {\n    if (this._options.onQuantifier) {\n      this._options.onQuantifier(start, end, min, max, greedy);\n    }\n  }\n\n  onLookaroundAssertionEnter(start, kind, negate) {\n    if (this._options.onLookaroundAssertionEnter) {\n      this._options.onLookaroundAssertionEnter(start, kind, negate);\n    }\n  }\n\n  onLookaroundAssertionLeave(start, end, kind, negate) {\n    if (this._options.onLookaroundAssertionLeave) {\n      this._options.onLookaroundAssertionLeave(start, end, kind, negate);\n    }\n  }\n\n  onEdgeAssertion(start, end, kind) {\n    if (this._options.onEdgeAssertion) {\n      this._options.onEdgeAssertion(start, end, kind);\n    }\n  }\n\n  onWordBoundaryAssertion(start, end, kind, negate) {\n    if (this._options.onWordBoundaryAssertion) {\n      this._options.onWordBoundaryAssertion(start, end, kind, negate);\n    }\n  }\n\n  onAnyCharacterSet(start, end, kind) {\n    if (this._options.onAnyCharacterSet) {\n      this._options.onAnyCharacterSet(start, end, kind);\n    }\n  }\n\n  onEscapeCharacterSet(start, end, kind, negate) {\n    if (this._options.onEscapeCharacterSet) {\n      this._options.onEscapeCharacterSet(start, end, kind, negate);\n    }\n  }\n\n  onUnicodePropertyCharacterSet(start, end, kind, key, value, negate) {\n    if (this._options.onUnicodePropertyCharacterSet) {\n      this._options.onUnicodePropertyCharacterSet(start, end, kind, key, value, negate);\n    }\n  }\n\n  onCharacter(start, end, value) {\n    if (this._options.onCharacter) {\n      this._options.onCharacter(start, end, value);\n    }\n  }\n\n  onBackreference(start, end, ref) {\n    if (this._options.onBackreference) {\n      this._options.onBackreference(start, end, ref);\n    }\n  }\n\n  onCharacterClassEnter(start, negate) {\n    if (this._options.onCharacterClassEnter) {\n      this._options.onCharacterClassEnter(start, negate);\n    }\n  }\n\n  onCharacterClassLeave(start, end, negate) {\n    if (this._options.onCharacterClassLeave) {\n      this._options.onCharacterClassLeave(start, end, negate);\n    }\n  }\n\n  onCharacterClassRange(start, end, min, max) {\n    if (this._options.onCharacterClassRange) {\n      this._options.onCharacterClassRange(start, end, min, max);\n    }\n  }\n\n  get source() {\n    return this._reader.source;\n  }\n\n  get index() {\n    return this._reader.index;\n  }\n\n  get currentCodePoint() {\n    return this._reader.currentCodePoint;\n  }\n\n  get nextCodePoint() {\n    return this._reader.nextCodePoint;\n  }\n\n  get nextCodePoint2() {\n    return this._reader.nextCodePoint2;\n  }\n\n  get nextCodePoint3() {\n    return this._reader.nextCodePoint3;\n  }\n\n  reset(source, start, end) {\n    this._reader.reset(source, start, end, this._uFlag);\n  }\n\n  rewind(index) {\n    this._reader.rewind(index);\n  }\n\n  advance() {\n    this._reader.advance();\n  }\n\n  eat(cp) {\n    return this._reader.eat(cp);\n  }\n\n  eat2(cp1, cp2) {\n    return this._reader.eat2(cp1, cp2);\n  }\n\n  eat3(cp1, cp2, cp3) {\n    return this._reader.eat3(cp1, cp2, cp3);\n  }\n\n  raise(message) {\n    throw new RegExpSyntaxError(this.source, this._uFlag, this.index, message);\n  }\n\n  eatRegExpBody() {\n    const start = this.index;\n    let inClass = false;\n    let escaped = false;\n\n    for (;;) {\n      const cp = this.currentCodePoint;\n\n      if (cp === -1 || isLineTerminator(cp)) {\n        const kind = inClass ? \"character class\" : \"regular expression\";\n        this.raise(`Unterminated ${kind}`);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else if (cp === ReverseSolidus) {\n        escaped = true;\n      } else if (cp === LeftSquareBracket) {\n        inClass = true;\n      } else if (cp === RightSquareBracket) {\n        inClass = false;\n      } else if (cp === Solidus && !inClass || cp === Asterisk && this.index === start) {\n        break;\n      }\n\n      this.advance();\n    }\n\n    return this.index !== start;\n  }\n\n  pattern() {\n    const start = this.index;\n    this._numCapturingParens = this.countCapturingParens();\n\n    this._groupNames.clear();\n\n    this._backreferenceNames.clear();\n\n    this.onPatternEnter(start);\n    this.disjunction();\n    const cp = this.currentCodePoint;\n\n    if (this.currentCodePoint !== -1) {\n      if (cp === RightParenthesis) {\n        this.raise(\"Unmatched ')'\");\n      }\n\n      if (cp === ReverseSolidus) {\n        this.raise(\"\\\\ at end of pattern\");\n      }\n\n      if (cp === RightSquareBracket || cp === RightCurlyBracket) {\n        this.raise(\"Lone quantifier brackets\");\n      }\n\n      const c = String.fromCodePoint(cp);\n      this.raise(`Unexpected character '${c}'`);\n    }\n\n    for (const name of this._backreferenceNames) {\n      if (!this._groupNames.has(name)) {\n        this.raise(\"Invalid named capture referenced\");\n      }\n    }\n\n    this.onPatternLeave(start, this.index);\n  }\n\n  countCapturingParens() {\n    const start = this.index;\n    let inClass = false;\n    let escaped = false;\n    let count = 0;\n    let cp = 0;\n\n    while ((cp = this.currentCodePoint) !== -1) {\n      if (escaped) {\n        escaped = false;\n      } else if (cp === ReverseSolidus) {\n        escaped = true;\n      } else if (cp === LeftSquareBracket) {\n        inClass = true;\n      } else if (cp === RightSquareBracket) {\n        inClass = false;\n      } else if (cp === LeftParenthesis && !inClass && (this.nextCodePoint !== QuestionMark || this.nextCodePoint2 === LessThanSign && this.nextCodePoint3 !== EqualsSign && this.nextCodePoint3 !== ExclamationMark)) {\n        count += 1;\n      }\n\n      this.advance();\n    }\n\n    this.rewind(start);\n    return count;\n  }\n\n  disjunction() {\n    const start = this.index;\n    let i = 0;\n    this.onDisjunctionEnter(start);\n    this.alternative(i++);\n\n    while (this.eat(VerticalLine)) {\n      this.alternative(i++);\n    }\n\n    if (this.eatQuantifier(true)) {\n      this.raise(\"Nothing to repeat\");\n    }\n\n    if (this.eat(LeftCurlyBracket)) {\n      this.raise(\"Lone quantifier brackets\");\n    }\n\n    this.onDisjunctionLeave(start, this.index);\n  }\n\n  alternative(i) {\n    const start = this.index;\n    this.onAlternativeEnter(start, i);\n\n    while (this.currentCodePoint !== -1 && this.eatTerm()) {}\n\n    this.onAlternativeLeave(start, this.index, i);\n  }\n\n  eatTerm() {\n    if (this.eatAssertion()) {\n      if (this._lastAssertionIsQuantifiable) {\n        this.eatQuantifier();\n      }\n\n      return true;\n    }\n\n    if (this.strict ? this.eatAtom() : this.eatExtendedAtom()) {\n      this.eatQuantifier();\n      return true;\n    }\n\n    return false;\n  }\n\n  eatAssertion() {\n    const start = this.index;\n    this._lastAssertionIsQuantifiable = false;\n\n    if (this.eat(CircumflexAccent)) {\n      this.onEdgeAssertion(start, this.index, \"start\");\n      return true;\n    }\n\n    if (this.eat(DollarSign)) {\n      this.onEdgeAssertion(start, this.index, \"end\");\n      return true;\n    }\n\n    if (this.eat2(ReverseSolidus, LatinCapitalLetterB)) {\n      this.onWordBoundaryAssertion(start, this.index, \"word\", true);\n      return true;\n    }\n\n    if (this.eat2(ReverseSolidus, LatinSmallLetterB)) {\n      this.onWordBoundaryAssertion(start, this.index, \"word\", false);\n      return true;\n    }\n\n    if (this.eat2(LeftParenthesis, QuestionMark)) {\n      const lookbehind = this.ecmaVersion >= 2018 && this.eat(LessThanSign);\n      let negate = false;\n\n      if (this.eat(EqualsSign) || (negate = this.eat(ExclamationMark))) {\n        const kind = lookbehind ? \"lookbehind\" : \"lookahead\";\n        this.onLookaroundAssertionEnter(start, kind, negate);\n        this.disjunction();\n\n        if (!this.eat(RightParenthesis)) {\n          this.raise(\"Unterminated group\");\n        }\n\n        this._lastAssertionIsQuantifiable = !lookbehind && !this.strict;\n        this.onLookaroundAssertionLeave(start, this.index, kind, negate);\n        return true;\n      }\n\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  eatQuantifier(noError = false) {\n    const start = this.index;\n    let min = 0;\n    let max = 0;\n    let greedy = false;\n\n    if (this.eat(Asterisk)) {\n      min = 0;\n      max = Number.POSITIVE_INFINITY;\n    } else if (this.eat(PlusSign)) {\n      min = 1;\n      max = Number.POSITIVE_INFINITY;\n    } else if (this.eat(QuestionMark)) {\n      min = 0;\n      max = 1;\n    } else if (this.eatBracedQuantifier(noError)) {\n      min = this._lastMinValue;\n      max = this._lastMaxValue;\n    } else {\n      return false;\n    }\n\n    greedy = !this.eat(QuestionMark);\n\n    if (!noError) {\n      this.onQuantifier(start, this.index, min, max, greedy);\n    }\n\n    return true;\n  }\n\n  eatBracedQuantifier(noError) {\n    const start = this.index;\n\n    if (this.eat(LeftCurlyBracket)) {\n      this._lastMinValue = 0;\n      this._lastMaxValue = Number.POSITIVE_INFINITY;\n\n      if (this.eatDecimalDigits()) {\n        this._lastMinValue = this._lastMaxValue = this._lastIntValue;\n\n        if (this.eat(Comma)) {\n          this._lastMaxValue = this.eatDecimalDigits() ? this._lastIntValue : Number.POSITIVE_INFINITY;\n        }\n\n        if (this.eat(RightCurlyBracket)) {\n          if (!noError && this._lastMaxValue < this._lastMinValue) {\n            this.raise(\"numbers out of order in {} quantifier\");\n          }\n\n          return true;\n        }\n      }\n\n      if (!noError && this.strict) {\n        this.raise(\"Incomplete quantifier\");\n      }\n\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  eatAtom() {\n    return this.eatPatternCharacter() || this.eatDot() || this.eatReverseSolidusAtomEscape() || this.eatCharacterClass() || this.eatUncapturingGroup() || this.eatCapturingGroup();\n  }\n\n  eatDot() {\n    if (this.eat(FullStop)) {\n      this.onAnyCharacterSet(this.index - 1, this.index, \"any\");\n      return true;\n    }\n\n    return false;\n  }\n\n  eatReverseSolidusAtomEscape() {\n    const start = this.index;\n\n    if (this.eat(ReverseSolidus)) {\n      if (this.eatAtomEscape()) {\n        return true;\n      }\n\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  eatUncapturingGroup() {\n    const start = this.index;\n\n    if (this.eat3(LeftParenthesis, QuestionMark, Colon)) {\n      this.onGroupEnter(start);\n      this.disjunction();\n\n      if (!this.eat(RightParenthesis)) {\n        this.raise(\"Unterminated group\");\n      }\n\n      this.onGroupLeave(start, this.index);\n      return true;\n    }\n\n    return false;\n  }\n\n  eatCapturingGroup() {\n    const start = this.index;\n\n    if (this.eat(LeftParenthesis)) {\n      this._lastStrValue = \"\";\n\n      if (this.ecmaVersion >= 2018) {\n        this.groupSpecifier();\n      } else if (this.currentCodePoint === QuestionMark) {\n        this.raise(\"Invalid group\");\n      }\n\n      const name = this._lastStrValue || null;\n      this.onCapturingGroupEnter(start, name);\n      this.disjunction();\n\n      if (!this.eat(RightParenthesis)) {\n        this.raise(\"Unterminated group\");\n      }\n\n      this.onCapturingGroupLeave(start, this.index, name);\n      return true;\n    }\n\n    return false;\n  }\n\n  eatExtendedAtom() {\n    return this.eatDot() || this.eatReverseSolidusAtomEscape() || this.eatReverseSolidusFollowedByC() || this.eatCharacterClass() || this.eatUncapturingGroup() || this.eatCapturingGroup() || this.eatInvalidBracedQuantifier() || this.eatExtendedPatternCharacter();\n  }\n\n  eatReverseSolidusFollowedByC() {\n    if (this.currentCodePoint === ReverseSolidus && this.nextCodePoint === LatinSmallLetterC) {\n      this._lastIntValue = this.currentCodePoint;\n      this.advance();\n      this.onCharacter(this.index - 1, this.index, ReverseSolidus);\n      return true;\n    }\n\n    return false;\n  }\n\n  eatInvalidBracedQuantifier() {\n    if (this.eatBracedQuantifier(true)) {\n      this.raise(\"Nothing to repeat\");\n    }\n\n    return false;\n  }\n\n  eatSyntaxCharacter() {\n    if (isSyntaxCharacter(this.currentCodePoint)) {\n      this._lastIntValue = this.currentCodePoint;\n      this.advance();\n      return true;\n    }\n\n    return false;\n  }\n\n  eatPatternCharacter() {\n    const start = this.index;\n    const cp = this.currentCodePoint;\n\n    if (cp !== -1 && !isSyntaxCharacter(cp)) {\n      this.advance();\n      this.onCharacter(start, this.index, cp);\n      return true;\n    }\n\n    return false;\n  }\n\n  eatExtendedPatternCharacter() {\n    const start = this.index;\n    const cp = this.currentCodePoint;\n\n    if (cp !== -1 && cp !== CircumflexAccent && cp !== DollarSign && cp !== ReverseSolidus && cp !== FullStop && cp !== Asterisk && cp !== PlusSign && cp !== QuestionMark && cp !== LeftParenthesis && cp !== RightParenthesis && cp !== LeftSquareBracket && cp !== VerticalLine) {\n      this.advance();\n      this.onCharacter(start, this.index, cp);\n      return true;\n    }\n\n    return false;\n  }\n\n  groupSpecifier() {\n    this._lastStrValue = \"\";\n\n    if (this.eat(QuestionMark)) {\n      if (this.eatGroupName()) {\n        if (!this._groupNames.has(this._lastStrValue)) {\n          this._groupNames.add(this._lastStrValue);\n\n          return;\n        }\n\n        this.raise(\"Duplicate capture group name\");\n      }\n\n      this.raise(\"Invalid group\");\n    }\n  }\n\n  eatGroupName() {\n    this._lastStrValue = \"\";\n\n    if (this.eat(LessThanSign)) {\n      if (this.eatRegExpIdentifierName() && this.eat(GreaterThanSign)) {\n        return true;\n      }\n\n      this.raise(\"Invalid capture group name\");\n    }\n\n    return false;\n  }\n\n  eatRegExpIdentifierName() {\n    this._lastStrValue = \"\";\n\n    if (this.eatRegExpIdentifierStart()) {\n      this._lastStrValue += String.fromCodePoint(this._lastIntValue);\n\n      while (this.eatRegExpIdentifierPart()) {\n        this._lastStrValue += String.fromCodePoint(this._lastIntValue);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  eatRegExpIdentifierStart() {\n    const start = this.index;\n    let cp = this.currentCodePoint;\n    this.advance();\n\n    if (cp === ReverseSolidus && this.eatRegExpUnicodeEscapeSequence()) {\n      cp = this._lastIntValue;\n    }\n\n    if (isRegExpIdentifierStart(cp)) {\n      this._lastIntValue = cp;\n      return true;\n    }\n\n    if (this.index !== start) {\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  eatRegExpIdentifierPart() {\n    const start = this.index;\n    let cp = this.currentCodePoint;\n    this.advance();\n\n    if (cp === ReverseSolidus && this.eatRegExpUnicodeEscapeSequence()) {\n      cp = this._lastIntValue;\n    }\n\n    if (isRegExpIdentifierPart(cp)) {\n      this._lastIntValue = cp;\n      return true;\n    }\n\n    if (this.index !== start) {\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  eatAtomEscape() {\n    if (this.eatBackreference() || this.eatCharacterClassEscape() || this.eatCharacterEscape() || this._nFlag && this.eatKGroupName()) {\n      return true;\n    }\n\n    if (this.strict || this._uFlag) {\n      this.raise(\"Invalid escape\");\n    }\n\n    return false;\n  }\n\n  eatBackreference() {\n    const start = this.index;\n\n    if (this.eatDecimalEscape()) {\n      const n = this._lastIntValue;\n\n      if (n <= this._numCapturingParens) {\n        this.onBackreference(start - 1, this.index, n);\n        return true;\n      }\n\n      if (this.strict) {\n        this.raise(\"Invalid escape\");\n      }\n\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  eatKGroupName() {\n    const start = this.index;\n\n    if (this.eat(LatinSmallLetterK)) {\n      if (this.eatGroupName()) {\n        const groupName = this._lastStrValue;\n\n        this._backreferenceNames.add(groupName);\n\n        this.onBackreference(start - 1, this.index, groupName);\n        return true;\n      }\n\n      this.raise(\"Invalid named reference\");\n    }\n\n    return false;\n  }\n\n  eatCharacterEscape() {\n    const start = this.index;\n\n    if (this.eatControlEscape() || this.eatCControlLetter() || this.eatZero() || this.eatHexEscapeSequence() || this.eatRegExpUnicodeEscapeSequence() || !this.strict && this.eatLegacyOctalEscapeSequence() || this.eatIdentityEscape()) {\n      this.onCharacter(start - 1, this.index, this._lastIntValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  eatCControlLetter() {\n    const start = this.index;\n\n    if (this.eat(LatinSmallLetterC)) {\n      if (this.eatControlLetter()) {\n        return true;\n      }\n\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  eatZero() {\n    if (this.currentCodePoint === DigitZero && !isDecimalDigit(this.nextCodePoint)) {\n      this._lastIntValue = 0;\n      this.advance();\n      return true;\n    }\n\n    return false;\n  }\n\n  eatControlEscape() {\n    if (this.eat(LatinSmallLetterT)) {\n      this._lastIntValue = CharacterTabulation;\n      return true;\n    }\n\n    if (this.eat(LatinSmallLetterN)) {\n      this._lastIntValue = LineFeed;\n      return true;\n    }\n\n    if (this.eat(LatinSmallLetterV)) {\n      this._lastIntValue = LineTabulation;\n      return true;\n    }\n\n    if (this.eat(LatinSmallLetterF)) {\n      this._lastIntValue = FormFeed;\n      return true;\n    }\n\n    if (this.eat(LatinSmallLetterR)) {\n      this._lastIntValue = CarriageReturn;\n      return true;\n    }\n\n    return false;\n  }\n\n  eatControlLetter() {\n    const cp = this.currentCodePoint;\n\n    if (isLatinLetter(cp)) {\n      this.advance();\n      this._lastIntValue = cp % 0x20;\n      return true;\n    }\n\n    return false;\n  }\n\n  eatRegExpUnicodeEscapeSequence() {\n    const start = this.index;\n\n    if (this.eat(LatinSmallLetterU)) {\n      if (this.eatFixedHexDigits(4)) {\n        const lead = this._lastIntValue;\n\n        if (this._uFlag && lead >= 0xd800 && lead <= 0xdbff) {\n          const leadSurrogateEnd = this.index;\n\n          if (this.eat(ReverseSolidus) && this.eat(LatinSmallLetterU) && this.eatFixedHexDigits(4)) {\n            const trail = this._lastIntValue;\n\n            if (trail >= 0xdc00 && trail <= 0xdfff) {\n              this._lastIntValue = (lead - 0xd800) * 0x400 + (trail - 0xdc00) + 0x10000;\n              return true;\n            }\n          }\n\n          this.rewind(leadSurrogateEnd);\n          this._lastIntValue = lead;\n        }\n\n        return true;\n      }\n\n      if (this._uFlag && this.eat(LeftCurlyBracket) && this.eatHexDigits() && this.eat(RightCurlyBracket) && isValidUnicode(this._lastIntValue)) {\n        return true;\n      }\n\n      if (this.strict || this._uFlag) {\n        this.raise(\"Invalid unicode escape\");\n      }\n\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  eatIdentityEscape() {\n    if (this._uFlag) {\n      if (this.eatSyntaxCharacter()) {\n        return true;\n      }\n\n      if (this.eat(Solidus)) {\n        this._lastIntValue = Solidus;\n        return true;\n      }\n\n      return false;\n    }\n\n    if (this.isValidIdentityEscape(this.currentCodePoint)) {\n      this._lastIntValue = this.currentCodePoint;\n      this.advance();\n      return true;\n    }\n\n    return false;\n  }\n\n  isValidIdentityEscape(cp) {\n    if (cp === -1) {\n      return false;\n    }\n\n    if (this.strict) {\n      return !isIdContinue(cp);\n    }\n\n    return cp !== LatinSmallLetterC && (!this._nFlag || cp !== LatinSmallLetterK);\n  }\n\n  eatDecimalEscape() {\n    this._lastIntValue = 0;\n    let cp = this.currentCodePoint;\n\n    if (cp >= DigitOne && cp <= DigitNine) {\n      do {\n        this._lastIntValue = 10 * this._lastIntValue + (cp - DigitZero);\n        this.advance();\n      } while ((cp = this.currentCodePoint) >= DigitZero && cp <= DigitNine);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  eatCharacterClassEscape() {\n    const start = this.index;\n\n    if (this.eat(LatinSmallLetterD)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"digit\", false);\n      return true;\n    }\n\n    if (this.eat(LatinCapitalLetterD)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"digit\", true);\n      return true;\n    }\n\n    if (this.eat(LatinSmallLetterS)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"space\", false);\n      return true;\n    }\n\n    if (this.eat(LatinCapitalLetterS)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"space\", true);\n      return true;\n    }\n\n    if (this.eat(LatinSmallLetterW)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"word\", false);\n      return true;\n    }\n\n    if (this.eat(LatinCapitalLetterW)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"word\", true);\n      return true;\n    }\n\n    let negate = false;\n\n    if (this._uFlag && this.ecmaVersion >= 2018 && (this.eat(LatinSmallLetterP) || (negate = this.eat(LatinCapitalLetterP)))) {\n      this._lastIntValue = -1;\n\n      if (this.eat(LeftCurlyBracket) && this.eatUnicodePropertyValueExpression() && this.eat(RightCurlyBracket)) {\n        this.onUnicodePropertyCharacterSet(start - 1, this.index, \"property\", this._lastKeyValue, this._lastValValue || null, negate);\n        return true;\n      }\n\n      this.raise(\"Invalid property name\");\n    }\n\n    return false;\n  }\n\n  eatUnicodePropertyValueExpression() {\n    const start = this.index;\n\n    if (this.eatUnicodePropertyName() && this.eat(EqualsSign)) {\n      this._lastKeyValue = this._lastStrValue;\n\n      if (this.eatUnicodePropertyValue()) {\n        this._lastValValue = this._lastStrValue;\n\n        if (isValidUnicodeProperty(this._lastKeyValue, this._lastValValue)) {\n          return true;\n        }\n\n        this.raise(\"Invalid property name\");\n      }\n    }\n\n    this.rewind(start);\n\n    if (this.eatLoneUnicodePropertyNameOrValue()) {\n      const nameOrValue = this._lastStrValue;\n\n      if (isValidUnicodeProperty(\"General_Category\", nameOrValue)) {\n        this._lastKeyValue = \"General_Category\";\n        this._lastValValue = nameOrValue;\n        return true;\n      }\n\n      if (isValidUnicodePropertyName(nameOrValue)) {\n        this._lastKeyValue = nameOrValue;\n        this._lastValValue = \"\";\n        return true;\n      }\n\n      this.raise(\"Invalid property name\");\n    }\n\n    return false;\n  }\n\n  eatUnicodePropertyName() {\n    this._lastStrValue = \"\";\n\n    while (isUnicodePropertyNameCharacter(this.currentCodePoint)) {\n      this._lastStrValue += String.fromCodePoint(this.currentCodePoint);\n      this.advance();\n    }\n\n    return this._lastStrValue !== \"\";\n  }\n\n  eatUnicodePropertyValue() {\n    this._lastStrValue = \"\";\n\n    while (isUnicodePropertyValueCharacter(this.currentCodePoint)) {\n      this._lastStrValue += String.fromCodePoint(this.currentCodePoint);\n      this.advance();\n    }\n\n    return this._lastStrValue !== \"\";\n  }\n\n  eatLoneUnicodePropertyNameOrValue() {\n    return this.eatUnicodePropertyValue();\n  }\n\n  eatCharacterClass() {\n    const start = this.index;\n\n    if (this.eat(LeftSquareBracket)) {\n      const negate = this.eat(CircumflexAccent);\n      this.onCharacterClassEnter(start, negate);\n      this.classRanges();\n\n      if (!this.eat(RightSquareBracket)) {\n        this.raise(\"Unterminated character class\");\n      }\n\n      this.onCharacterClassLeave(start, this.index, negate);\n      return true;\n    }\n\n    return false;\n  }\n\n  classRanges() {\n    let start = this.index;\n\n    while (this.eatClassAtom()) {\n      const left = this._lastIntValue;\n      const hyphenStart = this.index;\n\n      if (this.eat(HyphenMinus)) {\n        this.onCharacter(hyphenStart, this.index, HyphenMinus);\n\n        if (this.eatClassAtom()) {\n          const right = this._lastIntValue;\n\n          if (left === -1 || right === -1) {\n            if (this.strict) {\n              this.raise(\"Invalid character class\");\n            }\n          } else if (left > right) {\n            this.raise(\"Range out of order in character class\");\n          } else {\n            this.onCharacterClassRange(start, this.index, left, right);\n          }\n        }\n      }\n\n      start = this.index;\n    }\n  }\n\n  eatClassAtom() {\n    const start = this.index;\n\n    if (this.eat(ReverseSolidus)) {\n      if (this.eatClassEscape()) {\n        return true;\n      }\n\n      if (this._uFlag) {\n        this.raise(\"Invalid escape\");\n      }\n\n      this.rewind(start);\n    }\n\n    const cp = this.currentCodePoint;\n\n    if (cp !== -1 && cp !== RightSquareBracket) {\n      this.advance();\n      this._lastIntValue = cp;\n      this.onCharacter(start, this.index, cp);\n      return true;\n    }\n\n    return false;\n  }\n\n  eatClassEscape() {\n    const start = this.index;\n\n    if (this.eat(LatinSmallLetterB)) {\n      this._lastIntValue = Backspace;\n      this.onCharacter(start - 1, this.index, Backspace);\n      return true;\n    }\n\n    if (this._uFlag && this.eat(HyphenMinus)) {\n      this._lastIntValue = HyphenMinus;\n      this.onCharacter(start - 1, this.index, HyphenMinus);\n      return true;\n    }\n\n    if (!this._uFlag && this.eat(LatinSmallLetterC)) {\n      if (this.eatClassControlLetter()) {\n        this.onCharacter(start - 1, this.index, this._lastIntValue);\n        return true;\n      }\n\n      this.rewind(start);\n    }\n\n    return this.eatCharacterClassEscape() || this.eatCharacterEscape();\n  }\n\n  eatClassControlLetter() {\n    const cp = this.currentCodePoint;\n\n    if (isDecimalDigit(cp) || cp === LowLine) {\n      this.advance();\n      this._lastIntValue = cp % 0x20;\n      return true;\n    }\n\n    return false;\n  }\n\n  eatHexEscapeSequence() {\n    const start = this.index;\n\n    if (this.eat(LatinSmallLetterX)) {\n      if (this.eatFixedHexDigits(2)) {\n        return true;\n      }\n\n      if (this._uFlag) {\n        this.raise(\"Invalid escape\");\n      }\n\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  eatDecimalDigits() {\n    const start = this.index;\n    this._lastIntValue = 0;\n\n    while (isDecimalDigit(this.currentCodePoint)) {\n      this._lastIntValue = 10 * this._lastIntValue + digitToInt(this.currentCodePoint);\n      this.advance();\n    }\n\n    return this.index !== start;\n  }\n\n  eatHexDigits() {\n    const start = this.index;\n    this._lastIntValue = 0;\n\n    while (isHexDigit(this.currentCodePoint)) {\n      this._lastIntValue = 16 * this._lastIntValue + digitToInt(this.currentCodePoint);\n      this.advance();\n    }\n\n    return this.index !== start;\n  }\n\n  eatLegacyOctalEscapeSequence() {\n    if (this.eatOctalDigit()) {\n      const n1 = this._lastIntValue;\n\n      if (this.eatOctalDigit()) {\n        const n2 = this._lastIntValue;\n\n        if (n1 <= 3 && this.eatOctalDigit()) {\n          this._lastIntValue = n1 * 64 + n2 * 8 + this._lastIntValue;\n        } else {\n          this._lastIntValue = n1 * 8 + n2;\n        }\n      } else {\n        this._lastIntValue = n1;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  eatOctalDigit() {\n    const cp = this.currentCodePoint;\n\n    if (isOctalDigit(cp)) {\n      this.advance();\n      this._lastIntValue = cp - DigitZero;\n      return true;\n    }\n\n    this._lastIntValue = 0;\n    return false;\n  }\n\n  eatFixedHexDigits(length) {\n    const start = this.index;\n    this._lastIntValue = 0;\n\n    for (let i = 0; i < length; ++i) {\n      const cp = this.currentCodePoint;\n\n      if (!isHexDigit(cp)) {\n        this.rewind(start);\n        return false;\n      }\n\n      this._lastIntValue = 16 * this._lastIntValue + digitToInt(cp);\n      this.advance();\n    }\n\n    return true;\n  }\n\n}\n\nconst DummyPattern = {};\nconst DummyFlags = {};\nconst DummyCapturingGroup = {};\n\nclass RegExpParserState {\n  constructor(options) {\n    this._node = DummyPattern;\n    this._flags = DummyFlags;\n    this._backreferences = [];\n    this._capturingGroups = [];\n    this.source = \"\";\n    this.strict = Boolean(options && options.strict);\n    this.ecmaVersion = options && options.ecmaVersion || 2018;\n  }\n\n  get pattern() {\n    if (this._node.type !== \"Pattern\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    return this._node;\n  }\n\n  get flags() {\n    if (this._flags.type !== \"Flags\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    return this._flags;\n  }\n\n  onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll) {\n    this._flags = {\n      type: \"Flags\",\n      parent: null,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      global,\n      ignoreCase,\n      multiline,\n      unicode,\n      sticky,\n      dotAll\n    };\n  }\n\n  onPatternEnter(start) {\n    this._node = {\n      type: \"Pattern\",\n      parent: null,\n      start,\n      end: start,\n      raw: \"\",\n      alternatives: []\n    };\n    this._backreferences.length = 0;\n    this._capturingGroups.length = 0;\n  }\n\n  onPatternLeave(start, end) {\n    this._node.end = end;\n    this._node.raw = this.source.slice(start, end);\n\n    for (const reference of this._backreferences) {\n      const ref = reference.ref;\n      const group = typeof ref === \"number\" ? this._capturingGroups[ref - 1] : this._capturingGroups.find(g => g.name === ref);\n      reference.resolved = group;\n      group.references.push(reference);\n    }\n  }\n\n  onAlternativeEnter(start) {\n    const parent = this._node;\n\n    if (parent.type !== \"Assertion\" && parent.type !== \"CapturingGroup\" && parent.type !== \"Group\" && parent.type !== \"Pattern\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    this._node = {\n      type: \"Alternative\",\n      parent,\n      start,\n      end: start,\n      raw: \"\",\n      elements: []\n    };\n    parent.alternatives.push(this._node);\n  }\n\n  onAlternativeLeave(start, end) {\n    const node = this._node;\n\n    if (node.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    node.end = end;\n    node.raw = this.source.slice(start, end);\n    this._node = node.parent;\n  }\n\n  onGroupEnter(start) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    this._node = {\n      type: \"Group\",\n      parent,\n      start,\n      end: start,\n      raw: \"\",\n      alternatives: []\n    };\n    parent.elements.push(this._node);\n  }\n\n  onGroupLeave(start, end) {\n    const node = this._node;\n\n    if (node.type !== \"Group\" || node.parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    node.end = end;\n    node.raw = this.source.slice(start, end);\n    this._node = node.parent;\n  }\n\n  onCapturingGroupEnter(start, name) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    this._node = {\n      type: \"CapturingGroup\",\n      parent,\n      start,\n      end: start,\n      raw: \"\",\n      name,\n      alternatives: [],\n      references: []\n    };\n    parent.elements.push(this._node);\n\n    this._capturingGroups.push(this._node);\n  }\n\n  onCapturingGroupLeave(start, end) {\n    const node = this._node;\n\n    if (node.type !== \"CapturingGroup\" || node.parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    node.end = end;\n    node.raw = this.source.slice(start, end);\n    this._node = node.parent;\n  }\n\n  onQuantifier(start, end, min, max, greedy) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    const element = parent.elements.pop();\n\n    if (element == null || element.type === \"Quantifier\" || element.type === \"Assertion\" && element.kind !== \"lookahead\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    const node = {\n      type: \"Quantifier\",\n      parent,\n      start: element.start,\n      end,\n      raw: this.source.slice(element.start, end),\n      min,\n      max,\n      greedy,\n      element\n    };\n    parent.elements.push(node);\n    element.parent = node;\n  }\n\n  onLookaroundAssertionEnter(start, kind, negate) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    this._node = {\n      type: \"Assertion\",\n      parent,\n      start,\n      end: start,\n      raw: \"\",\n      kind,\n      negate,\n      alternatives: []\n    };\n    parent.elements.push(this._node);\n  }\n\n  onLookaroundAssertionLeave(start, end) {\n    const node = this._node;\n\n    if (node.type !== \"Assertion\" || node.parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    node.end = end;\n    node.raw = this.source.slice(start, end);\n    this._node = node.parent;\n  }\n\n  onEdgeAssertion(start, end, kind) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    parent.elements.push({\n      type: \"Assertion\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      kind\n    });\n  }\n\n  onWordBoundaryAssertion(start, end, kind, negate) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    parent.elements.push({\n      type: \"Assertion\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      kind,\n      negate\n    });\n  }\n\n  onAnyCharacterSet(start, end, kind) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    parent.elements.push({\n      type: \"CharacterSet\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      kind\n    });\n  }\n\n  onEscapeCharacterSet(start, end, kind, negate) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\" && parent.type !== \"CharacterClass\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    parent.elements.push({\n      type: \"CharacterSet\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      kind,\n      negate\n    });\n  }\n\n  onUnicodePropertyCharacterSet(start, end, kind, key, value, negate) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\" && parent.type !== \"CharacterClass\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    parent.elements.push({\n      type: \"CharacterSet\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      kind,\n      key,\n      value,\n      negate\n    });\n  }\n\n  onCharacter(start, end, value) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\" && parent.type !== \"CharacterClass\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    parent.elements.push({\n      type: \"Character\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      value\n    });\n  }\n\n  onBackreference(start, end, ref) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    const node = {\n      type: \"Backreference\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      ref,\n      resolved: DummyCapturingGroup\n    };\n    parent.elements.push(node);\n\n    this._backreferences.push(node);\n  }\n\n  onCharacterClassEnter(start, negate) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    this._node = {\n      type: \"CharacterClass\",\n      parent,\n      start,\n      end: start,\n      raw: \"\",\n      negate,\n      elements: []\n    };\n    parent.elements.push(this._node);\n  }\n\n  onCharacterClassLeave(start, end) {\n    const node = this._node;\n\n    if (node.type !== \"CharacterClass\" || node.parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    node.end = end;\n    node.raw = this.source.slice(start, end);\n    this._node = node.parent;\n  }\n\n  onCharacterClassRange(start, end) {\n    const parent = this._node;\n\n    if (parent.type !== \"CharacterClass\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    const elements = parent.elements;\n    const max = elements.pop();\n    const hyphen = elements.pop();\n    const min = elements.pop();\n\n    if (!min || !max || !hyphen || min.type !== \"Character\" || max.type !== \"Character\" || hyphen.type !== \"Character\" || hyphen.value !== HyphenMinus) {\n      throw new Error(\"UnknownError\");\n    }\n\n    const node = {\n      type: \"CharacterClassRange\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      min,\n      max\n    };\n    min.parent = node;\n    max.parent = node;\n    elements.push(node);\n  }\n\n}\n\nclass RegExpParser {\n  constructor(options) {\n    this._state = new RegExpParserState(options);\n    this._validator = new RegExpValidator(this._state);\n  }\n\n  parseLiteral(source, start = 0, end = source.length) {\n    this._state.source = source;\n\n    this._validator.validateLiteral(source, start, end);\n\n    const pattern = this._state.pattern;\n    const flags = this._state.flags;\n    const literal = {\n      type: \"RegExpLiteral\",\n      parent: null,\n      start,\n      end,\n      raw: source,\n      pattern,\n      flags\n    };\n    pattern.parent = literal;\n    flags.parent = literal;\n    return literal;\n  }\n\n  parseFlags(source, start = 0, end = source.length) {\n    this._state.source = source;\n\n    this._validator.validateFlags(source, start, end);\n\n    return this._state.flags;\n  }\n\n  parsePattern(source, start = 0, end = source.length, uFlag = false) {\n    this._state.source = source;\n\n    this._validator.validatePattern(source, start, end, uFlag);\n\n    return this._state.pattern;\n  }\n\n}\n\nclass RegExpVisitor {\n  constructor(handlers) {\n    this._handlers = handlers;\n  }\n\n  visit(node) {\n    switch (node.type) {\n      case \"Alternative\":\n        this.visitAlternative(node);\n        break;\n\n      case \"Assertion\":\n        this.visitAssertion(node);\n        break;\n\n      case \"Backreference\":\n        this.visitBackreference(node);\n        break;\n\n      case \"CapturingGroup\":\n        this.visitCapturingGroup(node);\n        break;\n\n      case \"Character\":\n        this.visitCharacter(node);\n        break;\n\n      case \"CharacterClass\":\n        this.visitCharacterClass(node);\n        break;\n\n      case \"CharacterClassRange\":\n        this.visitCharacterClassRange(node);\n        break;\n\n      case \"CharacterSet\":\n        this.visitCharacterSet(node);\n        break;\n\n      case \"Flags\":\n        this.visitFlags(node);\n        break;\n\n      case \"Group\":\n        this.visitGroup(node);\n        break;\n\n      case \"Pattern\":\n        this.visitPattern(node);\n        break;\n\n      case \"Quantifier\":\n        this.visitQuantifier(node);\n        break;\n\n      case \"RegExpLiteral\":\n        this.visitRegExpLiteral(node);\n        break;\n\n      default:\n        throw new Error(`Unknown type: ${node.type}`);\n    }\n  }\n\n  visitAlternative(node) {\n    if (this._handlers.onAlternativeEnter) {\n      this._handlers.onAlternativeEnter(node);\n    }\n\n    node.elements.forEach(this.visit, this);\n\n    if (this._handlers.onAlternativeLeave) {\n      this._handlers.onAlternativeLeave(node);\n    }\n  }\n\n  visitAssertion(node) {\n    if (this._handlers.onAssertionEnter) {\n      this._handlers.onAssertionEnter(node);\n    }\n\n    if (node.kind === \"lookahead\" || node.kind === \"lookbehind\") {\n      node.alternatives.forEach(this.visit, this);\n    }\n\n    if (this._handlers.onAssertionLeave) {\n      this._handlers.onAssertionLeave(node);\n    }\n  }\n\n  visitBackreference(node) {\n    if (this._handlers.onBackreferenceEnter) {\n      this._handlers.onBackreferenceEnter(node);\n    }\n\n    if (this._handlers.onBackreferenceLeave) {\n      this._handlers.onBackreferenceLeave(node);\n    }\n  }\n\n  visitCapturingGroup(node) {\n    if (this._handlers.onCapturingGroupEnter) {\n      this._handlers.onCapturingGroupEnter(node);\n    }\n\n    node.alternatives.forEach(this.visit, this);\n\n    if (this._handlers.onCapturingGroupLeave) {\n      this._handlers.onCapturingGroupLeave(node);\n    }\n  }\n\n  visitCharacter(node) {\n    if (this._handlers.onCharacterEnter) {\n      this._handlers.onCharacterEnter(node);\n    }\n\n    if (this._handlers.onCharacterLeave) {\n      this._handlers.onCharacterLeave(node);\n    }\n  }\n\n  visitCharacterClass(node) {\n    if (this._handlers.onCharacterClassEnter) {\n      this._handlers.onCharacterClassEnter(node);\n    }\n\n    node.elements.forEach(this.visit, this);\n\n    if (this._handlers.onCharacterClassLeave) {\n      this._handlers.onCharacterClassLeave(node);\n    }\n  }\n\n  visitCharacterClassRange(node) {\n    if (this._handlers.onCharacterClassRangeEnter) {\n      this._handlers.onCharacterClassRangeEnter(node);\n    }\n\n    this.visitCharacter(node.min);\n    this.visitCharacter(node.max);\n\n    if (this._handlers.onCharacterClassRangeLeave) {\n      this._handlers.onCharacterClassRangeLeave(node);\n    }\n  }\n\n  visitCharacterSet(node) {\n    if (this._handlers.onCharacterSetEnter) {\n      this._handlers.onCharacterSetEnter(node);\n    }\n\n    if (this._handlers.onCharacterSetLeave) {\n      this._handlers.onCharacterSetLeave(node);\n    }\n  }\n\n  visitFlags(node) {\n    if (this._handlers.onFlagsEnter) {\n      this._handlers.onFlagsEnter(node);\n    }\n\n    if (this._handlers.onFlagsLeave) {\n      this._handlers.onFlagsLeave(node);\n    }\n  }\n\n  visitGroup(node) {\n    if (this._handlers.onGroupEnter) {\n      this._handlers.onGroupEnter(node);\n    }\n\n    node.alternatives.forEach(this.visit, this);\n\n    if (this._handlers.onGroupLeave) {\n      this._handlers.onGroupLeave(node);\n    }\n  }\n\n  visitPattern(node) {\n    if (this._handlers.onPatternEnter) {\n      this._handlers.onPatternEnter(node);\n    }\n\n    node.alternatives.forEach(this.visit, this);\n\n    if (this._handlers.onPatternLeave) {\n      this._handlers.onPatternLeave(node);\n    }\n  }\n\n  visitQuantifier(node) {\n    if (this._handlers.onQuantifierEnter) {\n      this._handlers.onQuantifierEnter(node);\n    }\n\n    this.visit(node.element);\n\n    if (this._handlers.onQuantifierLeave) {\n      this._handlers.onQuantifierLeave(node);\n    }\n  }\n\n  visitRegExpLiteral(node) {\n    if (this._handlers.onRegExpLiteralEnter) {\n      this._handlers.onRegExpLiteralEnter(node);\n    }\n\n    this.visitPattern(node.pattern);\n    this.visitFlags(node.flags);\n\n    if (this._handlers.onRegExpLiteralLeave) {\n      this._handlers.onRegExpLiteralLeave(node);\n    }\n  }\n\n}\n\nfunction parseRegExpLiteral(source, options) {\n  return new RegExpParser(options).parseLiteral(String(source));\n}\n\nfunction validateRegExpLiteral(source, options) {\n  return new RegExpValidator(options).validateLiteral(source);\n}\n\nfunction visitRegExpAST(node, handlers) {\n  new RegExpVisitor(handlers).visit(node);\n}\n\nexport { ast as AST, RegExpParser, RegExpValidator, parseRegExpLiteral, validateRegExpLiteral, visitRegExpAST };","map":{"version":3,"sources":["src/unicode/ids.ts","src/unicode/property-data.ts","src/unicode/index.ts","src/reader.ts","src/regexp-syntax-error.ts","src/validator.ts","src/parser.ts","src/visitor.ts","src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/* Generated from DerivedCoreProperties-11.0.0.txt */\nexport function isIdStart(cp: number): boolean {\n    if (cp < 0x41) return false\n    if (cp < 0x5b) return true\n    if (cp < 0x61) return false\n    if (cp < 0x7b) return true\n    return isLargeIdStart(cp)\n}\nexport function isIdContinue(cp: number): boolean {\n    if (cp < 0x30) return false\n    if (cp < 0x3a) return true\n    if (cp < 0x41) return false\n    if (cp < 0x5b) return true\n    if (cp === 0x5f) return true\n    if (cp < 0x61) return false\n    if (cp < 0x7b) return true\n    return isLargeIdStart(cp) || isLargeIdContinue(cp)\n}\n\nfunction isLargeIdStart(cp: number): boolean {\n    if (cp < 0x30a1) {\n        if (cp < 0xec0) {\n            if (cp < 0xa35) {\n                if (cp < 0x6e5) {\n                    if (cp < 0x37a) {\n                        if (cp < 0x294) {\n                            if (cp < 0xf8) {\n                                if (cp === 0xaa) return true\n                                if (cp === 0xb5) return true\n                                if (cp === 0xba) return true\n                                if (cp < 0xc0) return false\n                                if (cp < 0xd7) return true\n                                if (cp < 0xd8) return false\n                                if (cp < 0xf7) return true\n                                return false\n                            }\n                            if (cp < 0x1bb) return true\n                            if (cp === 0x1bb) return true\n                            if (cp < 0x1bc) return false\n                            if (cp < 0x1c0) return true\n                            if (cp < 0x1c0) return false\n                            if (cp < 0x1c4) return true\n                            if (cp < 0x1c4) return false\n                            if (cp < 0x294) return true\n                            return false\n                        }\n                        if (cp < 0x2ec) {\n                            if (cp === 0x294) return true\n                            if (cp < 0x295) return false\n                            if (cp < 0x2b0) return true\n                            if (cp < 0x2b0) return false\n                            if (cp < 0x2c2) return true\n                            if (cp < 0x2c6) return false\n                            if (cp < 0x2d2) return true\n                            if (cp < 0x2e0) return false\n                            if (cp < 0x2e5) return true\n                            return false\n                        }\n                        if (cp === 0x2ec) return true\n                        if (cp === 0x2ee) return true\n                        if (cp < 0x370) return false\n                        if (cp < 0x374) return true\n                        if (cp === 0x374) return true\n                        if (cp < 0x376) return false\n                        if (cp < 0x378) return true\n                        return false\n                    }\n                    if (cp < 0x531) {\n                        if (cp < 0x38c) {\n                            if (cp === 0x37a) return true\n                            if (cp < 0x37b) return false\n                            if (cp < 0x37e) return true\n                            if (cp === 0x37f) return true\n                            if (cp === 0x386) return true\n                            if (cp < 0x388) return false\n                            if (cp < 0x38b) return true\n                            return false\n                        }\n                        if (cp === 0x38c) return true\n                        if (cp < 0x38e) return false\n                        if (cp < 0x3a2) return true\n                        if (cp < 0x3a3) return false\n                        if (cp < 0x3f6) return true\n                        if (cp < 0x3f7) return false\n                        if (cp < 0x482) return true\n                        if (cp < 0x48a) return false\n                        if (cp < 0x530) return true\n                        return false\n                    }\n                    if (cp < 0x620) {\n                        if (cp < 0x531) return false\n                        if (cp < 0x557) return true\n                        if (cp === 0x559) return true\n                        if (cp < 0x560) return false\n                        if (cp < 0x589) return true\n                        if (cp < 0x5d0) return false\n                        if (cp < 0x5eb) return true\n                        if (cp < 0x5ef) return false\n                        if (cp < 0x5f3) return true\n                        return false\n                    }\n                    if (cp < 0x640) return true\n                    if (cp === 0x640) return true\n                    if (cp < 0x641) return false\n                    if (cp < 0x64b) return true\n                    if (cp < 0x66e) return false\n                    if (cp < 0x670) return true\n                    if (cp < 0x671) return false\n                    if (cp < 0x6d4) return true\n                    if (cp === 0x6d5) return true\n                    return false\n                }\n                if (cp < 0x950) {\n                    if (cp < 0x7fa) {\n                        if (cp < 0x712) {\n                            if (cp < 0x6e5) return false\n                            if (cp < 0x6e7) return true\n                            if (cp < 0x6ee) return false\n                            if (cp < 0x6f0) return true\n                            if (cp < 0x6fa) return false\n                            if (cp < 0x6fd) return true\n                            if (cp === 0x6ff) return true\n                            if (cp === 0x710) return true\n                            return false\n                        }\n                        if (cp < 0x730) return true\n                        if (cp < 0x74d) return false\n                        if (cp < 0x7a6) return true\n                        if (cp === 0x7b1) return true\n                        if (cp < 0x7ca) return false\n                        if (cp < 0x7eb) return true\n                        if (cp < 0x7f4) return false\n                        if (cp < 0x7f6) return true\n                        return false\n                    }\n                    if (cp < 0x840) {\n                        if (cp === 0x7fa) return true\n                        if (cp < 0x800) return false\n                        if (cp < 0x816) return true\n                        if (cp === 0x81a) return true\n                        if (cp === 0x824) return true\n                        if (cp === 0x828) return true\n                        return false\n                    }\n                    if (cp < 0x859) return true\n                    if (cp < 0x860) return false\n                    if (cp < 0x86b) return true\n                    if (cp < 0x8a0) return false\n                    if (cp < 0x8b5) return true\n                    if (cp < 0x8b6) return false\n                    if (cp < 0x8be) return true\n                    if (cp < 0x904) return false\n                    if (cp < 0x93a) return true\n                    if (cp === 0x93d) return true\n                    return false\n                }\n                if (cp < 0x9bd) {\n                    if (cp < 0x98f) {\n                        if (cp === 0x950) return true\n                        if (cp < 0x958) return false\n                        if (cp < 0x962) return true\n                        if (cp === 0x971) return true\n                        if (cp < 0x972) return false\n                        if (cp < 0x981) return true\n                        if (cp < 0x985) return false\n                        if (cp < 0x98d) return true\n                        return false\n                    }\n                    if (cp < 0x991) return true\n                    if (cp < 0x993) return false\n                    if (cp < 0x9a9) return true\n                    if (cp < 0x9aa) return false\n                    if (cp < 0x9b1) return true\n                    if (cp === 0x9b2) return true\n                    if (cp < 0x9b6) return false\n                    if (cp < 0x9ba) return true\n                    return false\n                }\n                if (cp < 0x9fc) {\n                    if (cp === 0x9bd) return true\n                    if (cp === 0x9ce) return true\n                    if (cp < 0x9dc) return false\n                    if (cp < 0x9de) return true\n                    if (cp < 0x9df) return false\n                    if (cp < 0x9e2) return true\n                    if (cp < 0x9f0) return false\n                    if (cp < 0x9f2) return true\n                    return false\n                }\n                if (cp === 0x9fc) return true\n                if (cp < 0xa05) return false\n                if (cp < 0xa0b) return true\n                if (cp < 0xa0f) return false\n                if (cp < 0xa11) return true\n                if (cp < 0xa13) return false\n                if (cp < 0xa29) return true\n                if (cp < 0xa2a) return false\n                if (cp < 0xa31) return true\n                if (cp < 0xa32) return false\n                if (cp < 0xa34) return true\n                return false\n            }\n            if (cp < 0xc60) {\n                if (cp < 0xb3d) {\n                    if (cp < 0xab5) {\n                        if (cp < 0xa85) {\n                            if (cp < 0xa35) return false\n                            if (cp < 0xa37) return true\n                            if (cp < 0xa38) return false\n                            if (cp < 0xa3a) return true\n                            if (cp < 0xa59) return false\n                            if (cp < 0xa5d) return true\n                            if (cp === 0xa5e) return true\n                            if (cp < 0xa72) return false\n                            if (cp < 0xa75) return true\n                            return false\n                        }\n                        if (cp < 0xa8e) return true\n                        if (cp < 0xa8f) return false\n                        if (cp < 0xa92) return true\n                        if (cp < 0xa93) return false\n                        if (cp < 0xaa9) return true\n                        if (cp < 0xaaa) return false\n                        if (cp < 0xab1) return true\n                        if (cp < 0xab2) return false\n                        if (cp < 0xab4) return true\n                        return false\n                    }\n                    if (cp < 0xb05) {\n                        if (cp < 0xab5) return false\n                        if (cp < 0xaba) return true\n                        if (cp === 0xabd) return true\n                        if (cp === 0xad0) return true\n                        if (cp < 0xae0) return false\n                        if (cp < 0xae2) return true\n                        if (cp === 0xaf9) return true\n                        return false\n                    }\n                    if (cp < 0xb0d) return true\n                    if (cp < 0xb0f) return false\n                    if (cp < 0xb11) return true\n                    if (cp < 0xb13) return false\n                    if (cp < 0xb29) return true\n                    if (cp < 0xb2a) return false\n                    if (cp < 0xb31) return true\n                    if (cp < 0xb32) return false\n                    if (cp < 0xb34) return true\n                    if (cp < 0xb35) return false\n                    if (cp < 0xb3a) return true\n                    return false\n                }\n                if (cp < 0xb9e) {\n                    if (cp < 0xb85) {\n                        if (cp === 0xb3d) return true\n                        if (cp < 0xb5c) return false\n                        if (cp < 0xb5e) return true\n                        if (cp < 0xb5f) return false\n                        if (cp < 0xb62) return true\n                        if (cp === 0xb71) return true\n                        if (cp === 0xb83) return true\n                        return false\n                    }\n                    if (cp < 0xb8b) return true\n                    if (cp < 0xb8e) return false\n                    if (cp < 0xb91) return true\n                    if (cp < 0xb92) return false\n                    if (cp < 0xb96) return true\n                    if (cp < 0xb99) return false\n                    if (cp < 0xb9b) return true\n                    if (cp === 0xb9c) return true\n                    return false\n                }\n                if (cp < 0xc05) {\n                    if (cp < 0xb9e) return false\n                    if (cp < 0xba0) return true\n                    if (cp < 0xba3) return false\n                    if (cp < 0xba5) return true\n                    if (cp < 0xba8) return false\n                    if (cp < 0xbab) return true\n                    if (cp < 0xbae) return false\n                    if (cp < 0xbba) return true\n                    if (cp === 0xbd0) return true\n                    return false\n                }\n                if (cp < 0xc0d) return true\n                if (cp < 0xc0e) return false\n                if (cp < 0xc11) return true\n                if (cp < 0xc12) return false\n                if (cp < 0xc29) return true\n                if (cp < 0xc2a) return false\n                if (cp < 0xc3a) return true\n                if (cp === 0xc3d) return true\n                if (cp < 0xc58) return false\n                if (cp < 0xc5b) return true\n                return false\n            }\n            if (cp < 0xdb3) {\n                if (cp < 0xcf1) {\n                    if (cp < 0xcaa) {\n                        if (cp < 0xc60) return false\n                        if (cp < 0xc62) return true\n                        if (cp === 0xc80) return true\n                        if (cp < 0xc85) return false\n                        if (cp < 0xc8d) return true\n                        if (cp < 0xc8e) return false\n                        if (cp < 0xc91) return true\n                        if (cp < 0xc92) return false\n                        if (cp < 0xca9) return true\n                        return false\n                    }\n                    if (cp < 0xcb4) return true\n                    if (cp < 0xcb5) return false\n                    if (cp < 0xcba) return true\n                    if (cp === 0xcbd) return true\n                    if (cp === 0xcde) return true\n                    if (cp < 0xce0) return false\n                    if (cp < 0xce2) return true\n                    return false\n                }\n                if (cp < 0xd4e) {\n                    if (cp < 0xcf1) return false\n                    if (cp < 0xcf3) return true\n                    if (cp < 0xd05) return false\n                    if (cp < 0xd0d) return true\n                    if (cp < 0xd0e) return false\n                    if (cp < 0xd11) return true\n                    if (cp < 0xd12) return false\n                    if (cp < 0xd3b) return true\n                    if (cp === 0xd3d) return true\n                    return false\n                }\n                if (cp === 0xd4e) return true\n                if (cp < 0xd54) return false\n                if (cp < 0xd57) return true\n                if (cp < 0xd5f) return false\n                if (cp < 0xd62) return true\n                if (cp < 0xd7a) return false\n                if (cp < 0xd80) return true\n                if (cp < 0xd85) return false\n                if (cp < 0xd97) return true\n                if (cp < 0xd9a) return false\n                if (cp < 0xdb2) return true\n                return false\n            }\n            if (cp < 0xe8a) {\n                if (cp < 0xe40) {\n                    if (cp < 0xdb3) return false\n                    if (cp < 0xdbc) return true\n                    if (cp === 0xdbd) return true\n                    if (cp < 0xdc0) return false\n                    if (cp < 0xdc7) return true\n                    if (cp < 0xe01) return false\n                    if (cp < 0xe31) return true\n                    if (cp < 0xe32) return false\n                    if (cp < 0xe34) return true\n                    return false\n                }\n                if (cp < 0xe46) return true\n                if (cp === 0xe46) return true\n                if (cp < 0xe81) return false\n                if (cp < 0xe83) return true\n                if (cp === 0xe84) return true\n                if (cp < 0xe87) return false\n                if (cp < 0xe89) return true\n                return false\n            }\n            if (cp < 0xea5) {\n                if (cp === 0xe8a) return true\n                if (cp === 0xe8d) return true\n                if (cp < 0xe94) return false\n                if (cp < 0xe98) return true\n                if (cp < 0xe99) return false\n                if (cp < 0xea0) return true\n                if (cp < 0xea1) return false\n                if (cp < 0xea4) return true\n                return false\n            }\n            if (cp === 0xea5) return true\n            if (cp === 0xea7) return true\n            if (cp < 0xeaa) return false\n            if (cp < 0xeac) return true\n            if (cp < 0xead) return false\n            if (cp < 0xeb1) return true\n            if (cp < 0xeb2) return false\n            if (cp < 0xeb4) return true\n            if (cp === 0xebd) return true\n            return false\n        }\n        if (cp < 0x1ce9) {\n            if (cp < 0x166f) {\n                if (cp < 0x10fd) {\n                    if (cp < 0x105a) {\n                        if (cp < 0xf49) {\n                            if (cp < 0xec0) return false\n                            if (cp < 0xec5) return true\n                            if (cp === 0xec6) return true\n                            if (cp < 0xedc) return false\n                            if (cp < 0xee0) return true\n                            if (cp === 0xf00) return true\n                            if (cp < 0xf40) return false\n                            if (cp < 0xf48) return true\n                            return false\n                        }\n                        if (cp < 0xf6d) return true\n                        if (cp < 0xf88) return false\n                        if (cp < 0xf8d) return true\n                        if (cp < 0x1000) return false\n                        if (cp < 0x102b) return true\n                        if (cp === 0x103f) return true\n                        if (cp < 0x1050) return false\n                        if (cp < 0x1056) return true\n                        return false\n                    }\n                    if (cp < 0x108e) {\n                        if (cp < 0x105a) return false\n                        if (cp < 0x105e) return true\n                        if (cp === 0x1061) return true\n                        if (cp < 0x1065) return false\n                        if (cp < 0x1067) return true\n                        if (cp < 0x106e) return false\n                        if (cp < 0x1071) return true\n                        if (cp < 0x1075) return false\n                        if (cp < 0x1082) return true\n                        return false\n                    }\n                    if (cp === 0x108e) return true\n                    if (cp < 0x10a0) return false\n                    if (cp < 0x10c6) return true\n                    if (cp === 0x10c7) return true\n                    if (cp === 0x10cd) return true\n                    if (cp < 0x10d0) return false\n                    if (cp < 0x10fb) return true\n                    if (cp === 0x10fc) return true\n                    return false\n                }\n                if (cp < 0x12b8) {\n                    if (cp < 0x125a) {\n                        if (cp < 0x10fd) return false\n                        if (cp < 0x1100) return true\n                        if (cp < 0x1100) return false\n                        if (cp < 0x1249) return true\n                        if (cp < 0x124a) return false\n                        if (cp < 0x124e) return true\n                        if (cp < 0x1250) return false\n                        if (cp < 0x1257) return true\n                        if (cp === 0x1258) return true\n                        return false\n                    }\n                    if (cp < 0x125e) return true\n                    if (cp < 0x1260) return false\n                    if (cp < 0x1289) return true\n                    if (cp < 0x128a) return false\n                    if (cp < 0x128e) return true\n                    if (cp < 0x1290) return false\n                    if (cp < 0x12b1) return true\n                    if (cp < 0x12b2) return false\n                    if (cp < 0x12b6) return true\n                    return false\n                }\n                if (cp < 0x1312) {\n                    if (cp < 0x12b8) return false\n                    if (cp < 0x12bf) return true\n                    if (cp === 0x12c0) return true\n                    if (cp < 0x12c2) return false\n                    if (cp < 0x12c6) return true\n                    if (cp < 0x12c8) return false\n                    if (cp < 0x12d7) return true\n                    if (cp < 0x12d8) return false\n                    if (cp < 0x1311) return true\n                    return false\n                }\n                if (cp < 0x1316) return true\n                if (cp < 0x1318) return false\n                if (cp < 0x135b) return true\n                if (cp < 0x1380) return false\n                if (cp < 0x1390) return true\n                if (cp < 0x13a0) return false\n                if (cp < 0x13f6) return true\n                if (cp < 0x13f8) return false\n                if (cp < 0x13fe) return true\n                if (cp < 0x1401) return false\n                if (cp < 0x166d) return true\n                return false\n            }\n            if (cp < 0x18b0) {\n                if (cp < 0x176e) {\n                    if (cp < 0x1700) {\n                        if (cp < 0x166f) return false\n                        if (cp < 0x1680) return true\n                        if (cp < 0x1681) return false\n                        if (cp < 0x169b) return true\n                        if (cp < 0x16a0) return false\n                        if (cp < 0x16eb) return true\n                        if (cp < 0x16ee) return false\n                        if (cp < 0x16f1) return true\n                        if (cp < 0x16f1) return false\n                        if (cp < 0x16f9) return true\n                        return false\n                    }\n                    if (cp < 0x170d) return true\n                    if (cp < 0x170e) return false\n                    if (cp < 0x1712) return true\n                    if (cp < 0x1720) return false\n                    if (cp < 0x1732) return true\n                    if (cp < 0x1740) return false\n                    if (cp < 0x1752) return true\n                    if (cp < 0x1760) return false\n                    if (cp < 0x176d) return true\n                    return false\n                }\n                if (cp < 0x1843) {\n                    if (cp < 0x176e) return false\n                    if (cp < 0x1771) return true\n                    if (cp < 0x1780) return false\n                    if (cp < 0x17b4) return true\n                    if (cp === 0x17d7) return true\n                    if (cp === 0x17dc) return true\n                    if (cp < 0x1820) return false\n                    if (cp < 0x1843) return true\n                    return false\n                }\n                if (cp === 0x1843) return true\n                if (cp < 0x1844) return false\n                if (cp < 0x1879) return true\n                if (cp < 0x1880) return false\n                if (cp < 0x1885) return true\n                if (cp < 0x1885) return false\n                if (cp < 0x1887) return true\n                if (cp < 0x1887) return false\n                if (cp < 0x18a9) return true\n                if (cp === 0x18aa) return true\n                return false\n            }\n            if (cp < 0x1b45) {\n                if (cp < 0x19b0) {\n                    if (cp < 0x18b0) return false\n                    if (cp < 0x18f6) return true\n                    if (cp < 0x1900) return false\n                    if (cp < 0x191f) return true\n                    if (cp < 0x1950) return false\n                    if (cp < 0x196e) return true\n                    if (cp < 0x1970) return false\n                    if (cp < 0x1975) return true\n                    if (cp < 0x1980) return false\n                    if (cp < 0x19ac) return true\n                    return false\n                }\n                if (cp < 0x19ca) return true\n                if (cp < 0x1a00) return false\n                if (cp < 0x1a17) return true\n                if (cp < 0x1a20) return false\n                if (cp < 0x1a55) return true\n                if (cp === 0x1aa7) return true\n                if (cp < 0x1b05) return false\n                if (cp < 0x1b34) return true\n                return false\n            }\n            if (cp < 0x1c4d) {\n                if (cp < 0x1b45) return false\n                if (cp < 0x1b4c) return true\n                if (cp < 0x1b83) return false\n                if (cp < 0x1ba1) return true\n                if (cp < 0x1bae) return false\n                if (cp < 0x1bb0) return true\n                if (cp < 0x1bba) return false\n                if (cp < 0x1be6) return true\n                if (cp < 0x1c00) return false\n                if (cp < 0x1c24) return true\n                return false\n            }\n            if (cp < 0x1c50) return true\n            if (cp < 0x1c5a) return false\n            if (cp < 0x1c78) return true\n            if (cp < 0x1c78) return false\n            if (cp < 0x1c7e) return true\n            if (cp < 0x1c80) return false\n            if (cp < 0x1c89) return true\n            if (cp < 0x1c90) return false\n            if (cp < 0x1cbb) return true\n            if (cp < 0x1cbd) return false\n            if (cp < 0x1cc0) return true\n            return false\n        }\n        if (cp < 0x212f) {\n            if (cp < 0x1fc2) {\n                if (cp < 0x1f18) {\n                    if (cp < 0x1d6b) {\n                        if (cp < 0x1ce9) return false\n                        if (cp < 0x1ced) return true\n                        if (cp < 0x1cee) return false\n                        if (cp < 0x1cf2) return true\n                        if (cp < 0x1cf5) return false\n                        if (cp < 0x1cf7) return true\n                        if (cp < 0x1d00) return false\n                        if (cp < 0x1d2c) return true\n                        if (cp < 0x1d2c) return false\n                        if (cp < 0x1d6b) return true\n                        return false\n                    }\n                    if (cp < 0x1d78) return true\n                    if (cp === 0x1d78) return true\n                    if (cp < 0x1d79) return false\n                    if (cp < 0x1d9b) return true\n                    if (cp < 0x1d9b) return false\n                    if (cp < 0x1dc0) return true\n                    if (cp < 0x1e00) return false\n                    if (cp < 0x1f16) return true\n                    return false\n                }\n                if (cp < 0x1f5b) {\n                    if (cp < 0x1f18) return false\n                    if (cp < 0x1f1e) return true\n                    if (cp < 0x1f20) return false\n                    if (cp < 0x1f46) return true\n                    if (cp < 0x1f48) return false\n                    if (cp < 0x1f4e) return true\n                    if (cp < 0x1f50) return false\n                    if (cp < 0x1f58) return true\n                    if (cp === 0x1f59) return true\n                    return false\n                }\n                if (cp === 0x1f5b) return true\n                if (cp === 0x1f5d) return true\n                if (cp < 0x1f5f) return false\n                if (cp < 0x1f7e) return true\n                if (cp < 0x1f80) return false\n                if (cp < 0x1fb5) return true\n                if (cp < 0x1fb6) return false\n                if (cp < 0x1fbd) return true\n                if (cp === 0x1fbe) return true\n                return false\n            }\n            if (cp < 0x2102) {\n                if (cp < 0x1ff2) {\n                    if (cp < 0x1fc2) return false\n                    if (cp < 0x1fc5) return true\n                    if (cp < 0x1fc6) return false\n                    if (cp < 0x1fcd) return true\n                    if (cp < 0x1fd0) return false\n                    if (cp < 0x1fd4) return true\n                    if (cp < 0x1fd6) return false\n                    if (cp < 0x1fdc) return true\n                    if (cp < 0x1fe0) return false\n                    if (cp < 0x1fed) return true\n                    return false\n                }\n                if (cp < 0x1ff5) return true\n                if (cp < 0x1ff6) return false\n                if (cp < 0x1ffd) return true\n                if (cp === 0x2071) return true\n                if (cp === 0x207f) return true\n                if (cp < 0x2090) return false\n                if (cp < 0x209d) return true\n                return false\n            }\n            if (cp < 0x2119) {\n                if (cp === 0x2102) return true\n                if (cp === 0x2107) return true\n                if (cp < 0x210a) return false\n                if (cp < 0x2114) return true\n                if (cp === 0x2115) return true\n                if (cp === 0x2118) return true\n                return false\n            }\n            if (cp < 0x211e) return true\n            if (cp === 0x2124) return true\n            if (cp === 0x2126) return true\n            if (cp === 0x2128) return true\n            if (cp < 0x212a) return false\n            if (cp < 0x212e) return true\n            if (cp === 0x212e) return true\n            return false\n        }\n        if (cp < 0x2d80) {\n            if (cp < 0x2c30) {\n                if (cp < 0x214e) {\n                    if (cp < 0x212f) return false\n                    if (cp < 0x2135) return true\n                    if (cp < 0x2135) return false\n                    if (cp < 0x2139) return true\n                    if (cp === 0x2139) return true\n                    if (cp < 0x213c) return false\n                    if (cp < 0x2140) return true\n                    if (cp < 0x2145) return false\n                    if (cp < 0x214a) return true\n                    return false\n                }\n                if (cp === 0x214e) return true\n                if (cp < 0x2160) return false\n                if (cp < 0x2183) return true\n                if (cp < 0x2183) return false\n                if (cp < 0x2185) return true\n                if (cp < 0x2185) return false\n                if (cp < 0x2189) return true\n                if (cp < 0x2c00) return false\n                if (cp < 0x2c2f) return true\n                return false\n            }\n            if (cp < 0x2cf2) {\n                if (cp < 0x2c30) return false\n                if (cp < 0x2c5f) return true\n                if (cp < 0x2c60) return false\n                if (cp < 0x2c7c) return true\n                if (cp < 0x2c7c) return false\n                if (cp < 0x2c7e) return true\n                if (cp < 0x2c7e) return false\n                if (cp < 0x2ce5) return true\n                if (cp < 0x2ceb) return false\n                if (cp < 0x2cef) return true\n                return false\n            }\n            if (cp < 0x2cf4) return true\n            if (cp < 0x2d00) return false\n            if (cp < 0x2d26) return true\n            if (cp === 0x2d27) return true\n            if (cp === 0x2d2d) return true\n            if (cp < 0x2d30) return false\n            if (cp < 0x2d68) return true\n            if (cp === 0x2d6f) return true\n            return false\n        }\n        if (cp < 0x3006) {\n            if (cp < 0x2dc0) {\n                if (cp < 0x2d80) return false\n                if (cp < 0x2d97) return true\n                if (cp < 0x2da0) return false\n                if (cp < 0x2da7) return true\n                if (cp < 0x2da8) return false\n                if (cp < 0x2daf) return true\n                if (cp < 0x2db0) return false\n                if (cp < 0x2db7) return true\n                if (cp < 0x2db8) return false\n                if (cp < 0x2dbf) return true\n                return false\n            }\n            if (cp < 0x2dc7) return true\n            if (cp < 0x2dc8) return false\n            if (cp < 0x2dcf) return true\n            if (cp < 0x2dd0) return false\n            if (cp < 0x2dd7) return true\n            if (cp < 0x2dd8) return false\n            if (cp < 0x2ddf) return true\n            if (cp === 0x3005) return true\n            return false\n        }\n        if (cp < 0x303b) {\n            if (cp === 0x3006) return true\n            if (cp === 0x3007) return true\n            if (cp < 0x3021) return false\n            if (cp < 0x302a) return true\n            if (cp < 0x3031) return false\n            if (cp < 0x3036) return true\n            if (cp < 0x3038) return false\n            if (cp < 0x303b) return true\n            return false\n        }\n        if (cp === 0x303b) return true\n        if (cp === 0x303c) return true\n        if (cp < 0x3041) return false\n        if (cp < 0x3097) return true\n        if (cp < 0x309b) return false\n        if (cp < 0x309d) return true\n        if (cp < 0x309d) return false\n        if (cp < 0x309f) return true\n        if (cp === 0x309f) return true\n        return false\n    }\n    if (cp < 0x10b60) {\n        if (cp < 0xd7b0) {\n            if (cp < 0xa882) {\n                if (cp < 0xa67f) {\n                    if (cp < 0xa015) {\n                        if (cp < 0x31a0) {\n                            if (cp < 0x30a1) return false\n                            if (cp < 0x30fb) return true\n                            if (cp < 0x30fc) return false\n                            if (cp < 0x30ff) return true\n                            if (cp === 0x30ff) return true\n                            if (cp < 0x3105) return false\n                            if (cp < 0x3130) return true\n                            if (cp < 0x3131) return false\n                            if (cp < 0x318f) return true\n                            return false\n                        }\n                        if (cp < 0x31bb) return true\n                        if (cp < 0x31f0) return false\n                        if (cp < 0x3200) return true\n                        if (cp < 0x3400) return false\n                        if (cp < 0x4db6) return true\n                        if (cp < 0x4e00) return false\n                        if (cp < 0x9ff0) return true\n                        if (cp < 0xa000) return false\n                        if (cp < 0xa015) return true\n                        return false\n                    }\n                    if (cp < 0xa60c) {\n                        if (cp === 0xa015) return true\n                        if (cp < 0xa016) return false\n                        if (cp < 0xa48d) return true\n                        if (cp < 0xa4d0) return false\n                        if (cp < 0xa4f8) return true\n                        if (cp < 0xa4f8) return false\n                        if (cp < 0xa4fe) return true\n                        if (cp < 0xa500) return false\n                        if (cp < 0xa60c) return true\n                        return false\n                    }\n                    if (cp === 0xa60c) return true\n                    if (cp < 0xa610) return false\n                    if (cp < 0xa620) return true\n                    if (cp < 0xa62a) return false\n                    if (cp < 0xa62c) return true\n                    if (cp < 0xa640) return false\n                    if (cp < 0xa66e) return true\n                    if (cp === 0xa66e) return true\n                    return false\n                }\n                if (cp < 0xa78b) {\n                    if (cp < 0xa717) {\n                        if (cp === 0xa67f) return true\n                        if (cp < 0xa680) return false\n                        if (cp < 0xa69c) return true\n                        if (cp < 0xa69c) return false\n                        if (cp < 0xa69e) return true\n                        if (cp < 0xa6a0) return false\n                        if (cp < 0xa6e6) return true\n                        if (cp < 0xa6e6) return false\n                        if (cp < 0xa6f0) return true\n                        return false\n                    }\n                    if (cp < 0xa720) return true\n                    if (cp < 0xa722) return false\n                    if (cp < 0xa770) return true\n                    if (cp === 0xa770) return true\n                    if (cp < 0xa771) return false\n                    if (cp < 0xa788) return true\n                    if (cp === 0xa788) return true\n                    return false\n                }\n                if (cp < 0xa7fa) {\n                    if (cp < 0xa78b) return false\n                    if (cp < 0xa78f) return true\n                    if (cp === 0xa78f) return true\n                    if (cp < 0xa790) return false\n                    if (cp < 0xa7ba) return true\n                    if (cp === 0xa7f7) return true\n                    if (cp < 0xa7f8) return false\n                    if (cp < 0xa7fa) return true\n                    return false\n                }\n                if (cp === 0xa7fa) return true\n                if (cp < 0xa7fb) return false\n                if (cp < 0xa802) return true\n                if (cp < 0xa803) return false\n                if (cp < 0xa806) return true\n                if (cp < 0xa807) return false\n                if (cp < 0xa80b) return true\n                if (cp < 0xa80c) return false\n                if (cp < 0xa823) return true\n                if (cp < 0xa840) return false\n                if (cp < 0xa874) return true\n                return false\n            }\n            if (cp < 0xaab1) {\n                if (cp < 0xa9e6) {\n                    if (cp < 0xa930) {\n                        if (cp < 0xa882) return false\n                        if (cp < 0xa8b4) return true\n                        if (cp < 0xa8f2) return false\n                        if (cp < 0xa8f8) return true\n                        if (cp === 0xa8fb) return true\n                        if (cp < 0xa8fd) return false\n                        if (cp < 0xa8ff) return true\n                        if (cp < 0xa90a) return false\n                        if (cp < 0xa926) return true\n                        return false\n                    }\n                    if (cp < 0xa947) return true\n                    if (cp < 0xa960) return false\n                    if (cp < 0xa97d) return true\n                    if (cp < 0xa984) return false\n                    if (cp < 0xa9b3) return true\n                    if (cp === 0xa9cf) return true\n                    if (cp < 0xa9e0) return false\n                    if (cp < 0xa9e5) return true\n                    return false\n                }\n                if (cp < 0xaa44) {\n                    if (cp === 0xa9e6) return true\n                    if (cp < 0xa9e7) return false\n                    if (cp < 0xa9f0) return true\n                    if (cp < 0xa9fa) return false\n                    if (cp < 0xa9ff) return true\n                    if (cp < 0xaa00) return false\n                    if (cp < 0xaa29) return true\n                    if (cp < 0xaa40) return false\n                    if (cp < 0xaa43) return true\n                    return false\n                }\n                if (cp < 0xaa4c) return true\n                if (cp < 0xaa60) return false\n                if (cp < 0xaa70) return true\n                if (cp === 0xaa70) return true\n                if (cp < 0xaa71) return false\n                if (cp < 0xaa77) return true\n                if (cp === 0xaa7a) return true\n                if (cp < 0xaa7e) return false\n                if (cp < 0xaab0) return true\n                return false\n            }\n            if (cp < 0xab01) {\n                if (cp < 0xaadb) {\n                    if (cp === 0xaab1) return true\n                    if (cp < 0xaab5) return false\n                    if (cp < 0xaab7) return true\n                    if (cp < 0xaab9) return false\n                    if (cp < 0xaabe) return true\n                    if (cp === 0xaac0) return true\n                    if (cp === 0xaac2) return true\n                    return false\n                }\n                if (cp < 0xaadd) return true\n                if (cp === 0xaadd) return true\n                if (cp < 0xaae0) return false\n                if (cp < 0xaaeb) return true\n                if (cp === 0xaaf2) return true\n                if (cp < 0xaaf3) return false\n                if (cp < 0xaaf5) return true\n                return false\n            }\n            if (cp < 0xab30) {\n                if (cp < 0xab01) return false\n                if (cp < 0xab07) return true\n                if (cp < 0xab09) return false\n                if (cp < 0xab0f) return true\n                if (cp < 0xab11) return false\n                if (cp < 0xab17) return true\n                if (cp < 0xab20) return false\n                if (cp < 0xab27) return true\n                if (cp < 0xab28) return false\n                if (cp < 0xab2f) return true\n                return false\n            }\n            if (cp < 0xab5b) return true\n            if (cp < 0xab5c) return false\n            if (cp < 0xab60) return true\n            if (cp < 0xab60) return false\n            if (cp < 0xab66) return true\n            if (cp < 0xab70) return false\n            if (cp < 0xabc0) return true\n            if (cp < 0xabc0) return false\n            if (cp < 0xabe3) return true\n            if (cp < 0xac00) return false\n            if (cp < 0xd7a4) return true\n            return false\n        }\n        if (cp < 0x1032d) {\n            if (cp < 0xff41) {\n                if (cp < 0xfb3e) {\n                    if (cp < 0xfb13) {\n                        if (cp < 0xd7b0) return false\n                        if (cp < 0xd7c7) return true\n                        if (cp < 0xd7cb) return false\n                        if (cp < 0xd7fc) return true\n                        if (cp < 0xf900) return false\n                        if (cp < 0xfa6e) return true\n                        if (cp < 0xfa70) return false\n                        if (cp < 0xfada) return true\n                        if (cp < 0xfb00) return false\n                        if (cp < 0xfb07) return true\n                        return false\n                    }\n                    if (cp < 0xfb18) return true\n                    if (cp === 0xfb1d) return true\n                    if (cp < 0xfb1f) return false\n                    if (cp < 0xfb29) return true\n                    if (cp < 0xfb2a) return false\n                    if (cp < 0xfb37) return true\n                    if (cp < 0xfb38) return false\n                    if (cp < 0xfb3d) return true\n                    return false\n                }\n                if (cp < 0xfd50) {\n                    if (cp === 0xfb3e) return true\n                    if (cp < 0xfb40) return false\n                    if (cp < 0xfb42) return true\n                    if (cp < 0xfb43) return false\n                    if (cp < 0xfb45) return true\n                    if (cp < 0xfb46) return false\n                    if (cp < 0xfbb2) return true\n                    if (cp < 0xfbd3) return false\n                    if (cp < 0xfd3e) return true\n                    return false\n                }\n                if (cp < 0xfd90) return true\n                if (cp < 0xfd92) return false\n                if (cp < 0xfdc8) return true\n                if (cp < 0xfdf0) return false\n                if (cp < 0xfdfc) return true\n                if (cp < 0xfe70) return false\n                if (cp < 0xfe75) return true\n                if (cp < 0xfe76) return false\n                if (cp < 0xfefd) return true\n                if (cp < 0xff21) return false\n                if (cp < 0xff3b) return true\n                return false\n            }\n            if (cp < 0x10000) {\n                if (cp < 0xffa0) {\n                    if (cp < 0xff41) return false\n                    if (cp < 0xff5b) return true\n                    if (cp < 0xff66) return false\n                    if (cp < 0xff70) return true\n                    if (cp === 0xff70) return true\n                    if (cp < 0xff71) return false\n                    if (cp < 0xff9e) return true\n                    if (cp < 0xff9e) return false\n                    if (cp < 0xffa0) return true\n                    return false\n                }\n                if (cp < 0xffbf) return true\n                if (cp < 0xffc2) return false\n                if (cp < 0xffc8) return true\n                if (cp < 0xffca) return false\n                if (cp < 0xffd0) return true\n                if (cp < 0xffd2) return false\n                if (cp < 0xffd8) return true\n                if (cp < 0xffda) return false\n                if (cp < 0xffdd) return true\n                return false\n            }\n            if (cp < 0x10050) {\n                if (cp < 0x10000) return false\n                if (cp < 0x1000c) return true\n                if (cp < 0x1000d) return false\n                if (cp < 0x10027) return true\n                if (cp < 0x10028) return false\n                if (cp < 0x1003b) return true\n                if (cp < 0x1003c) return false\n                if (cp < 0x1003e) return true\n                if (cp < 0x1003f) return false\n                if (cp < 0x1004e) return true\n                return false\n            }\n            if (cp < 0x1005e) return true\n            if (cp < 0x10080) return false\n            if (cp < 0x100fb) return true\n            if (cp < 0x10140) return false\n            if (cp < 0x10175) return true\n            if (cp < 0x10280) return false\n            if (cp < 0x1029d) return true\n            if (cp < 0x102a0) return false\n            if (cp < 0x102d1) return true\n            if (cp < 0x10300) return false\n            if (cp < 0x10320) return true\n            return false\n        }\n        if (cp < 0x10837) {\n            if (cp < 0x10450) {\n                if (cp < 0x10380) {\n                    if (cp < 0x1032d) return false\n                    if (cp < 0x10341) return true\n                    if (cp === 0x10341) return true\n                    if (cp < 0x10342) return false\n                    if (cp < 0x1034a) return true\n                    if (cp === 0x1034a) return true\n                    if (cp < 0x10350) return false\n                    if (cp < 0x10376) return true\n                    return false\n                }\n                if (cp < 0x1039e) return true\n                if (cp < 0x103a0) return false\n                if (cp < 0x103c4) return true\n                if (cp < 0x103c8) return false\n                if (cp < 0x103d0) return true\n                if (cp < 0x103d1) return false\n                if (cp < 0x103d6) return true\n                if (cp < 0x10400) return false\n                if (cp < 0x10450) return true\n                return false\n            }\n            if (cp < 0x10600) {\n                if (cp < 0x10450) return false\n                if (cp < 0x1049e) return true\n                if (cp < 0x104b0) return false\n                if (cp < 0x104d4) return true\n                if (cp < 0x104d8) return false\n                if (cp < 0x104fc) return true\n                if (cp < 0x10500) return false\n                if (cp < 0x10528) return true\n                if (cp < 0x10530) return false\n                if (cp < 0x10564) return true\n                return false\n            }\n            if (cp < 0x10737) return true\n            if (cp < 0x10740) return false\n            if (cp < 0x10756) return true\n            if (cp < 0x10760) return false\n            if (cp < 0x10768) return true\n            if (cp < 0x10800) return false\n            if (cp < 0x10806) return true\n            if (cp === 0x10808) return true\n            if (cp < 0x1080a) return false\n            if (cp < 0x10836) return true\n            return false\n        }\n        if (cp < 0x109be) {\n            if (cp < 0x108e0) {\n                if (cp < 0x10837) return false\n                if (cp < 0x10839) return true\n                if (cp === 0x1083c) return true\n                if (cp < 0x1083f) return false\n                if (cp < 0x10856) return true\n                if (cp < 0x10860) return false\n                if (cp < 0x10877) return true\n                if (cp < 0x10880) return false\n                if (cp < 0x1089f) return true\n                return false\n            }\n            if (cp < 0x108f3) return true\n            if (cp < 0x108f4) return false\n            if (cp < 0x108f6) return true\n            if (cp < 0x10900) return false\n            if (cp < 0x10916) return true\n            if (cp < 0x10920) return false\n            if (cp < 0x1093a) return true\n            if (cp < 0x10980) return false\n            if (cp < 0x109b8) return true\n            return false\n        }\n        if (cp < 0x10a60) {\n            if (cp < 0x109be) return false\n            if (cp < 0x109c0) return true\n            if (cp === 0x10a00) return true\n            if (cp < 0x10a10) return false\n            if (cp < 0x10a14) return true\n            if (cp < 0x10a15) return false\n            if (cp < 0x10a18) return true\n            if (cp < 0x10a19) return false\n            if (cp < 0x10a36) return true\n            return false\n        }\n        if (cp < 0x10a7d) return true\n        if (cp < 0x10a80) return false\n        if (cp < 0x10a9d) return true\n        if (cp < 0x10ac0) return false\n        if (cp < 0x10ac8) return true\n        if (cp < 0x10ac9) return false\n        if (cp < 0x10ae5) return true\n        if (cp < 0x10b00) return false\n        if (cp < 0x10b36) return true\n        if (cp < 0x10b40) return false\n        if (cp < 0x10b56) return true\n        return false\n    }\n    if (cp < 0x16e40) {\n        if (cp < 0x11580) {\n            if (cp < 0x11213) {\n                if (cp < 0x11083) {\n                    if (cp < 0x10d00) {\n                        if (cp < 0x10b60) return false\n                        if (cp < 0x10b73) return true\n                        if (cp < 0x10b80) return false\n                        if (cp < 0x10b92) return true\n                        if (cp < 0x10c00) return false\n                        if (cp < 0x10c49) return true\n                        if (cp < 0x10c80) return false\n                        if (cp < 0x10cb3) return true\n                        if (cp < 0x10cc0) return false\n                        if (cp < 0x10cf3) return true\n                        return false\n                    }\n                    if (cp < 0x10d24) return true\n                    if (cp < 0x10f00) return false\n                    if (cp < 0x10f1d) return true\n                    if (cp === 0x10f27) return true\n                    if (cp < 0x10f30) return false\n                    if (cp < 0x10f46) return true\n                    if (cp < 0x11003) return false\n                    if (cp < 0x11038) return true\n                    return false\n                }\n                if (cp < 0x11176) {\n                    if (cp < 0x11083) return false\n                    if (cp < 0x110b0) return true\n                    if (cp < 0x110d0) return false\n                    if (cp < 0x110e9) return true\n                    if (cp < 0x11103) return false\n                    if (cp < 0x11127) return true\n                    if (cp === 0x11144) return true\n                    if (cp < 0x11150) return false\n                    if (cp < 0x11173) return true\n                    return false\n                }\n                if (cp === 0x11176) return true\n                if (cp < 0x11183) return false\n                if (cp < 0x111b3) return true\n                if (cp < 0x111c1) return false\n                if (cp < 0x111c5) return true\n                if (cp === 0x111da) return true\n                if (cp === 0x111dc) return true\n                if (cp < 0x11200) return false\n                if (cp < 0x11212) return true\n                return false\n            }\n            if (cp < 0x1132a) {\n                if (cp < 0x1129f) {\n                    if (cp < 0x11213) return false\n                    if (cp < 0x1122c) return true\n                    if (cp < 0x11280) return false\n                    if (cp < 0x11287) return true\n                    if (cp === 0x11288) return true\n                    if (cp < 0x1128a) return false\n                    if (cp < 0x1128e) return true\n                    if (cp < 0x1128f) return false\n                    if (cp < 0x1129e) return true\n                    return false\n                }\n                if (cp < 0x112a9) return true\n                if (cp < 0x112b0) return false\n                if (cp < 0x112df) return true\n                if (cp < 0x11305) return false\n                if (cp < 0x1130d) return true\n                if (cp < 0x1130f) return false\n                if (cp < 0x11311) return true\n                if (cp < 0x11313) return false\n                if (cp < 0x11329) return true\n                return false\n            }\n            if (cp < 0x1135d) {\n                if (cp < 0x1132a) return false\n                if (cp < 0x11331) return true\n                if (cp < 0x11332) return false\n                if (cp < 0x11334) return true\n                if (cp < 0x11335) return false\n                if (cp < 0x1133a) return true\n                if (cp === 0x1133d) return true\n                if (cp === 0x11350) return true\n                return false\n            }\n            if (cp < 0x11362) return true\n            if (cp < 0x11400) return false\n            if (cp < 0x11435) return true\n            if (cp < 0x11447) return false\n            if (cp < 0x1144b) return true\n            if (cp < 0x11480) return false\n            if (cp < 0x114b0) return true\n            if (cp < 0x114c4) return false\n            if (cp < 0x114c6) return true\n            if (cp === 0x114c7) return true\n            return false\n        }\n        if (cp < 0x11d00) {\n            if (cp < 0x11a0b) {\n                if (cp < 0x11700) {\n                    if (cp < 0x11580) return false\n                    if (cp < 0x115af) return true\n                    if (cp < 0x115d8) return false\n                    if (cp < 0x115dc) return true\n                    if (cp < 0x11600) return false\n                    if (cp < 0x11630) return true\n                    if (cp === 0x11644) return true\n                    if (cp < 0x11680) return false\n                    if (cp < 0x116ab) return true\n                    return false\n                }\n                if (cp < 0x1171b) return true\n                if (cp < 0x11800) return false\n                if (cp < 0x1182c) return true\n                if (cp < 0x118a0) return false\n                if (cp < 0x118e0) return true\n                if (cp === 0x118ff) return true\n                if (cp === 0x11a00) return true\n                return false\n            }\n            if (cp < 0x11a9d) {\n                if (cp < 0x11a0b) return false\n                if (cp < 0x11a33) return true\n                if (cp === 0x11a3a) return true\n                if (cp === 0x11a50) return true\n                if (cp < 0x11a5c) return false\n                if (cp < 0x11a84) return true\n                if (cp < 0x11a86) return false\n                if (cp < 0x11a8a) return true\n                return false\n            }\n            if (cp === 0x11a9d) return true\n            if (cp < 0x11ac0) return false\n            if (cp < 0x11af9) return true\n            if (cp < 0x11c00) return false\n            if (cp < 0x11c09) return true\n            if (cp < 0x11c0a) return false\n            if (cp < 0x11c2f) return true\n            if (cp === 0x11c40) return true\n            if (cp < 0x11c72) return false\n            if (cp < 0x11c90) return true\n            return false\n        }\n        if (cp < 0x12400) {\n            if (cp < 0x11d67) {\n                if (cp < 0x11d00) return false\n                if (cp < 0x11d07) return true\n                if (cp < 0x11d08) return false\n                if (cp < 0x11d0a) return true\n                if (cp < 0x11d0b) return false\n                if (cp < 0x11d31) return true\n                if (cp === 0x11d46) return true\n                if (cp < 0x11d60) return false\n                if (cp < 0x11d66) return true\n                return false\n            }\n            if (cp < 0x11d69) return true\n            if (cp < 0x11d6a) return false\n            if (cp < 0x11d8a) return true\n            if (cp === 0x11d98) return true\n            if (cp < 0x11ee0) return false\n            if (cp < 0x11ef3) return true\n            if (cp < 0x12000) return false\n            if (cp < 0x1239a) return true\n            return false\n        }\n        if (cp < 0x16a40) {\n            if (cp < 0x12400) return false\n            if (cp < 0x1246f) return true\n            if (cp < 0x12480) return false\n            if (cp < 0x12544) return true\n            if (cp < 0x13000) return false\n            if (cp < 0x1342f) return true\n            if (cp < 0x14400) return false\n            if (cp < 0x14647) return true\n            if (cp < 0x16800) return false\n            if (cp < 0x16a39) return true\n            return false\n        }\n        if (cp < 0x16a5f) return true\n        if (cp < 0x16ad0) return false\n        if (cp < 0x16aee) return true\n        if (cp < 0x16b00) return false\n        if (cp < 0x16b30) return true\n        if (cp < 0x16b40) return false\n        if (cp < 0x16b44) return true\n        if (cp < 0x16b63) return false\n        if (cp < 0x16b78) return true\n        if (cp < 0x16b7d) return false\n        if (cp < 0x16b90) return true\n        return false\n    }\n    if (cp < 0x1d7c4) {\n        if (cp < 0x1d4bd) {\n            if (cp < 0x1bc70) {\n                if (cp < 0x17000) {\n                    if (cp < 0x16e40) return false\n                    if (cp < 0x16e80) return true\n                    if (cp < 0x16f00) return false\n                    if (cp < 0x16f45) return true\n                    if (cp === 0x16f50) return true\n                    if (cp < 0x16f93) return false\n                    if (cp < 0x16fa0) return true\n                    if (cp < 0x16fe0) return false\n                    if (cp < 0x16fe2) return true\n                    return false\n                }\n                if (cp < 0x187f2) return true\n                if (cp < 0x18800) return false\n                if (cp < 0x18af3) return true\n                if (cp < 0x1b000) return false\n                if (cp < 0x1b11f) return true\n                if (cp < 0x1b170) return false\n                if (cp < 0x1b2fc) return true\n                if (cp < 0x1bc00) return false\n                if (cp < 0x1bc6b) return true\n                return false\n            }\n            if (cp < 0x1d49e) {\n                if (cp < 0x1bc70) return false\n                if (cp < 0x1bc7d) return true\n                if (cp < 0x1bc80) return false\n                if (cp < 0x1bc89) return true\n                if (cp < 0x1bc90) return false\n                if (cp < 0x1bc9a) return true\n                if (cp < 0x1d400) return false\n                if (cp < 0x1d455) return true\n                if (cp < 0x1d456) return false\n                if (cp < 0x1d49d) return true\n                return false\n            }\n            if (cp < 0x1d4a0) return true\n            if (cp === 0x1d4a2) return true\n            if (cp < 0x1d4a5) return false\n            if (cp < 0x1d4a7) return true\n            if (cp < 0x1d4a9) return false\n            if (cp < 0x1d4ad) return true\n            if (cp < 0x1d4ae) return false\n            if (cp < 0x1d4ba) return true\n            if (cp === 0x1d4bb) return true\n            return false\n        }\n        if (cp < 0x1d552) {\n            if (cp < 0x1d51e) {\n                if (cp < 0x1d4bd) return false\n                if (cp < 0x1d4c4) return true\n                if (cp < 0x1d4c5) return false\n                if (cp < 0x1d506) return true\n                if (cp < 0x1d507) return false\n                if (cp < 0x1d50b) return true\n                if (cp < 0x1d50d) return false\n                if (cp < 0x1d515) return true\n                if (cp < 0x1d516) return false\n                if (cp < 0x1d51d) return true\n                return false\n            }\n            if (cp < 0x1d53a) return true\n            if (cp < 0x1d53b) return false\n            if (cp < 0x1d53f) return true\n            if (cp < 0x1d540) return false\n            if (cp < 0x1d545) return true\n            if (cp === 0x1d546) return true\n            if (cp < 0x1d54a) return false\n            if (cp < 0x1d551) return true\n            return false\n        }\n        if (cp < 0x1d716) {\n            if (cp < 0x1d552) return false\n            if (cp < 0x1d6a6) return true\n            if (cp < 0x1d6a8) return false\n            if (cp < 0x1d6c1) return true\n            if (cp < 0x1d6c2) return false\n            if (cp < 0x1d6db) return true\n            if (cp < 0x1d6dc) return false\n            if (cp < 0x1d6fb) return true\n            if (cp < 0x1d6fc) return false\n            if (cp < 0x1d715) return true\n            return false\n        }\n        if (cp < 0x1d735) return true\n        if (cp < 0x1d736) return false\n        if (cp < 0x1d74f) return true\n        if (cp < 0x1d750) return false\n        if (cp < 0x1d76f) return true\n        if (cp < 0x1d770) return false\n        if (cp < 0x1d789) return true\n        if (cp < 0x1d78a) return false\n        if (cp < 0x1d7a9) return true\n        if (cp < 0x1d7aa) return false\n        if (cp < 0x1d7c3) return true\n        return false\n    }\n    if (cp < 0x1ee5b) {\n        if (cp < 0x1ee39) {\n            if (cp < 0x1ee21) {\n                if (cp < 0x1d7c4) return false\n                if (cp < 0x1d7cc) return true\n                if (cp < 0x1e800) return false\n                if (cp < 0x1e8c5) return true\n                if (cp < 0x1e900) return false\n                if (cp < 0x1e944) return true\n                if (cp < 0x1ee00) return false\n                if (cp < 0x1ee04) return true\n                if (cp < 0x1ee05) return false\n                if (cp < 0x1ee20) return true\n                return false\n            }\n            if (cp < 0x1ee23) return true\n            if (cp === 0x1ee24) return true\n            if (cp === 0x1ee27) return true\n            if (cp < 0x1ee29) return false\n            if (cp < 0x1ee33) return true\n            if (cp < 0x1ee34) return false\n            if (cp < 0x1ee38) return true\n            return false\n        }\n        if (cp < 0x1ee4b) {\n            if (cp === 0x1ee39) return true\n            if (cp === 0x1ee3b) return true\n            if (cp === 0x1ee42) return true\n            if (cp === 0x1ee47) return true\n            if (cp === 0x1ee49) return true\n            return false\n        }\n        if (cp === 0x1ee4b) return true\n        if (cp < 0x1ee4d) return false\n        if (cp < 0x1ee50) return true\n        if (cp < 0x1ee51) return false\n        if (cp < 0x1ee53) return true\n        if (cp === 0x1ee54) return true\n        if (cp === 0x1ee57) return true\n        if (cp === 0x1ee59) return true\n        return false\n    }\n    if (cp < 0x1ee80) {\n        if (cp < 0x1ee67) {\n            if (cp === 0x1ee5b) return true\n            if (cp === 0x1ee5d) return true\n            if (cp === 0x1ee5f) return true\n            if (cp < 0x1ee61) return false\n            if (cp < 0x1ee63) return true\n            if (cp === 0x1ee64) return true\n            return false\n        }\n        if (cp < 0x1ee6b) return true\n        if (cp < 0x1ee6c) return false\n        if (cp < 0x1ee73) return true\n        if (cp < 0x1ee74) return false\n        if (cp < 0x1ee78) return true\n        if (cp < 0x1ee79) return false\n        if (cp < 0x1ee7d) return true\n        if (cp === 0x1ee7e) return true\n        return false\n    }\n    if (cp < 0x20000) {\n        if (cp < 0x1ee80) return false\n        if (cp < 0x1ee8a) return true\n        if (cp < 0x1ee8b) return false\n        if (cp < 0x1ee9c) return true\n        if (cp < 0x1eea1) return false\n        if (cp < 0x1eea4) return true\n        if (cp < 0x1eea5) return false\n        if (cp < 0x1eeaa) return true\n        if (cp < 0x1eeab) return false\n        if (cp < 0x1eebc) return true\n        return false\n    }\n    if (cp < 0x2a6d7) return true\n    if (cp < 0x2a700) return false\n    if (cp < 0x2b735) return true\n    if (cp < 0x2b740) return false\n    if (cp < 0x2b81e) return true\n    if (cp < 0x2b820) return false\n    if (cp < 0x2cea2) return true\n    if (cp < 0x2ceb0) return false\n    if (cp < 0x2ebe1) return true\n    if (cp < 0x2f800) return false\n    if (cp < 0x2fa1e) return true\n    return false\n}\n\nfunction isLargeIdContinue(cp: number): boolean {\n    if (cp < 0x1cd0) {\n        if (cp < 0xd82) {\n            if (cp < 0xa83) {\n                if (cp < 0x93b) {\n                    if (cp < 0x6ea) {\n                        if (cp < 0x5c7) {\n                            if (cp === 0xb7) return true\n                            if (cp < 0x300) return false\n                            if (cp < 0x370) return true\n                            if (cp === 0x387) return true\n                            if (cp < 0x483) return false\n                            if (cp < 0x488) return true\n                            if (cp < 0x591) return false\n                            if (cp < 0x5be) return true\n                            if (cp === 0x5bf) return true\n                            if (cp < 0x5c1) return false\n                            if (cp < 0x5c3) return true\n                            if (cp < 0x5c4) return false\n                            if (cp < 0x5c6) return true\n                            return false\n                        }\n                        if (cp === 0x5c7) return true\n                        if (cp < 0x610) return false\n                        if (cp < 0x61b) return true\n                        if (cp < 0x64b) return false\n                        if (cp < 0x660) return true\n                        if (cp < 0x660) return false\n                        if (cp < 0x66a) return true\n                        if (cp === 0x670) return true\n                        if (cp < 0x6d6) return false\n                        if (cp < 0x6dd) return true\n                        if (cp < 0x6df) return false\n                        if (cp < 0x6e5) return true\n                        if (cp < 0x6e7) return false\n                        if (cp < 0x6e9) return true\n                        return false\n                    }\n                    if (cp < 0x816) {\n                        if (cp < 0x6ea) return false\n                        if (cp < 0x6ee) return true\n                        if (cp < 0x6f0) return false\n                        if (cp < 0x6fa) return true\n                        if (cp === 0x711) return true\n                        if (cp < 0x730) return false\n                        if (cp < 0x74b) return true\n                        if (cp < 0x7a6) return false\n                        if (cp < 0x7b1) return true\n                        if (cp < 0x7c0) return false\n                        if (cp < 0x7ca) return true\n                        if (cp < 0x7eb) return false\n                        if (cp < 0x7f4) return true\n                        if (cp === 0x7fd) return true\n                        return false\n                    }\n                    if (cp < 0x81a) return true\n                    if (cp < 0x81b) return false\n                    if (cp < 0x824) return true\n                    if (cp < 0x825) return false\n                    if (cp < 0x828) return true\n                    if (cp < 0x829) return false\n                    if (cp < 0x82e) return true\n                    if (cp < 0x859) return false\n                    if (cp < 0x85c) return true\n                    if (cp < 0x8d3) return false\n                    if (cp < 0x8e2) return true\n                    if (cp < 0x8e3) return false\n                    if (cp < 0x903) return true\n                    if (cp === 0x903) return true\n                    if (cp === 0x93a) return true\n                    return false\n                }\n                if (cp < 0x9cd) {\n                    if (cp < 0x962) {\n                        if (cp === 0x93b) return true\n                        if (cp === 0x93c) return true\n                        if (cp < 0x93e) return false\n                        if (cp < 0x941) return true\n                        if (cp < 0x941) return false\n                        if (cp < 0x949) return true\n                        if (cp < 0x949) return false\n                        if (cp < 0x94d) return true\n                        if (cp === 0x94d) return true\n                        if (cp < 0x94e) return false\n                        if (cp < 0x950) return true\n                        if (cp < 0x951) return false\n                        if (cp < 0x958) return true\n                        return false\n                    }\n                    if (cp < 0x964) return true\n                    if (cp < 0x966) return false\n                    if (cp < 0x970) return true\n                    if (cp === 0x981) return true\n                    if (cp < 0x982) return false\n                    if (cp < 0x984) return true\n                    if (cp === 0x9bc) return true\n                    if (cp < 0x9be) return false\n                    if (cp < 0x9c1) return true\n                    if (cp < 0x9c1) return false\n                    if (cp < 0x9c5) return true\n                    if (cp < 0x9c7) return false\n                    if (cp < 0x9c9) return true\n                    if (cp < 0x9cb) return false\n                    if (cp < 0x9cd) return true\n                    return false\n                }\n                if (cp < 0xa3e) {\n                    if (cp === 0x9cd) return true\n                    if (cp === 0x9d7) return true\n                    if (cp < 0x9e2) return false\n                    if (cp < 0x9e4) return true\n                    if (cp < 0x9e6) return false\n                    if (cp < 0x9f0) return true\n                    if (cp === 0x9fe) return true\n                    if (cp < 0xa01) return false\n                    if (cp < 0xa03) return true\n                    if (cp === 0xa03) return true\n                    if (cp === 0xa3c) return true\n                    return false\n                }\n                if (cp < 0xa41) return true\n                if (cp < 0xa41) return false\n                if (cp < 0xa43) return true\n                if (cp < 0xa47) return false\n                if (cp < 0xa49) return true\n                if (cp < 0xa4b) return false\n                if (cp < 0xa4e) return true\n                if (cp === 0xa51) return true\n                if (cp < 0xa66) return false\n                if (cp < 0xa70) return true\n                if (cp < 0xa70) return false\n                if (cp < 0xa72) return true\n                if (cp === 0xa75) return true\n                if (cp < 0xa81) return false\n                if (cp < 0xa83) return true\n                return false\n            }\n            if (cp < 0xc00) {\n                if (cp < 0xb41) {\n                    if (cp < 0xae2) {\n                        if (cp === 0xa83) return true\n                        if (cp === 0xabc) return true\n                        if (cp < 0xabe) return false\n                        if (cp < 0xac1) return true\n                        if (cp < 0xac1) return false\n                        if (cp < 0xac6) return true\n                        if (cp < 0xac7) return false\n                        if (cp < 0xac9) return true\n                        if (cp === 0xac9) return true\n                        if (cp < 0xacb) return false\n                        if (cp < 0xacd) return true\n                        if (cp === 0xacd) return true\n                        return false\n                    }\n                    if (cp < 0xae4) return true\n                    if (cp < 0xae6) return false\n                    if (cp < 0xaf0) return true\n                    if (cp < 0xafa) return false\n                    if (cp < 0xb00) return true\n                    if (cp === 0xb01) return true\n                    if (cp < 0xb02) return false\n                    if (cp < 0xb04) return true\n                    if (cp === 0xb3c) return true\n                    if (cp === 0xb3e) return true\n                    if (cp === 0xb3f) return true\n                    if (cp === 0xb40) return true\n                    return false\n                }\n                if (cp < 0xb82) {\n                    if (cp < 0xb41) return false\n                    if (cp < 0xb45) return true\n                    if (cp < 0xb47) return false\n                    if (cp < 0xb49) return true\n                    if (cp < 0xb4b) return false\n                    if (cp < 0xb4d) return true\n                    if (cp === 0xb4d) return true\n                    if (cp === 0xb56) return true\n                    if (cp === 0xb57) return true\n                    if (cp < 0xb62) return false\n                    if (cp < 0xb64) return true\n                    if (cp < 0xb66) return false\n                    if (cp < 0xb70) return true\n                    return false\n                }\n                if (cp === 0xb82) return true\n                if (cp < 0xbbe) return false\n                if (cp < 0xbc0) return true\n                if (cp === 0xbc0) return true\n                if (cp < 0xbc1) return false\n                if (cp < 0xbc3) return true\n                if (cp < 0xbc6) return false\n                if (cp < 0xbc9) return true\n                if (cp < 0xbca) return false\n                if (cp < 0xbcd) return true\n                if (cp === 0xbcd) return true\n                if (cp === 0xbd7) return true\n                if (cp < 0xbe6) return false\n                if (cp < 0xbf0) return true\n                return false\n            }\n            if (cp < 0xcc7) {\n                if (cp < 0xc62) {\n                    if (cp === 0xc00) return true\n                    if (cp < 0xc01) return false\n                    if (cp < 0xc04) return true\n                    if (cp === 0xc04) return true\n                    if (cp < 0xc3e) return false\n                    if (cp < 0xc41) return true\n                    if (cp < 0xc41) return false\n                    if (cp < 0xc45) return true\n                    if (cp < 0xc46) return false\n                    if (cp < 0xc49) return true\n                    if (cp < 0xc4a) return false\n                    if (cp < 0xc4e) return true\n                    if (cp < 0xc55) return false\n                    if (cp < 0xc57) return true\n                    return false\n                }\n                if (cp < 0xc64) return true\n                if (cp < 0xc66) return false\n                if (cp < 0xc70) return true\n                if (cp === 0xc81) return true\n                if (cp < 0xc82) return false\n                if (cp < 0xc84) return true\n                if (cp === 0xcbc) return true\n                if (cp === 0xcbe) return true\n                if (cp === 0xcbf) return true\n                if (cp < 0xcc0) return false\n                if (cp < 0xcc5) return true\n                if (cp === 0xcc6) return true\n                return false\n            }\n            if (cp < 0xd3b) {\n                if (cp < 0xcc7) return false\n                if (cp < 0xcc9) return true\n                if (cp < 0xcca) return false\n                if (cp < 0xccc) return true\n                if (cp < 0xccc) return false\n                if (cp < 0xcce) return true\n                if (cp < 0xcd5) return false\n                if (cp < 0xcd7) return true\n                if (cp < 0xce2) return false\n                if (cp < 0xce4) return true\n                if (cp < 0xce6) return false\n                if (cp < 0xcf0) return true\n                if (cp < 0xd00) return false\n                if (cp < 0xd02) return true\n                if (cp < 0xd02) return false\n                if (cp < 0xd04) return true\n                return false\n            }\n            if (cp < 0xd3d) return true\n            if (cp < 0xd3e) return false\n            if (cp < 0xd41) return true\n            if (cp < 0xd41) return false\n            if (cp < 0xd45) return true\n            if (cp < 0xd46) return false\n            if (cp < 0xd49) return true\n            if (cp < 0xd4a) return false\n            if (cp < 0xd4d) return true\n            if (cp === 0xd4d) return true\n            if (cp === 0xd57) return true\n            if (cp < 0xd62) return false\n            if (cp < 0xd64) return true\n            if (cp < 0xd66) return false\n            if (cp < 0xd70) return true\n            return false\n        }\n        if (cp < 0x17e0) {\n            if (cp < 0x1038) {\n                if (cp < 0xf18) {\n                    if (cp < 0xe31) {\n                        if (cp < 0xd82) return false\n                        if (cp < 0xd84) return true\n                        if (cp === 0xdca) return true\n                        if (cp < 0xdcf) return false\n                        if (cp < 0xdd2) return true\n                        if (cp < 0xdd2) return false\n                        if (cp < 0xdd5) return true\n                        if (cp === 0xdd6) return true\n                        if (cp < 0xdd8) return false\n                        if (cp < 0xde0) return true\n                        if (cp < 0xde6) return false\n                        if (cp < 0xdf0) return true\n                        if (cp < 0xdf2) return false\n                        if (cp < 0xdf4) return true\n                        return false\n                    }\n                    if (cp === 0xe31) return true\n                    if (cp < 0xe34) return false\n                    if (cp < 0xe3b) return true\n                    if (cp < 0xe47) return false\n                    if (cp < 0xe4f) return true\n                    if (cp < 0xe50) return false\n                    if (cp < 0xe5a) return true\n                    if (cp === 0xeb1) return true\n                    if (cp < 0xeb4) return false\n                    if (cp < 0xeba) return true\n                    if (cp < 0xebb) return false\n                    if (cp < 0xebd) return true\n                    if (cp < 0xec8) return false\n                    if (cp < 0xece) return true\n                    if (cp < 0xed0) return false\n                    if (cp < 0xeda) return true\n                    return false\n                }\n                if (cp < 0xf80) {\n                    if (cp < 0xf18) return false\n                    if (cp < 0xf1a) return true\n                    if (cp < 0xf20) return false\n                    if (cp < 0xf2a) return true\n                    if (cp === 0xf35) return true\n                    if (cp === 0xf37) return true\n                    if (cp === 0xf39) return true\n                    if (cp < 0xf3e) return false\n                    if (cp < 0xf40) return true\n                    if (cp < 0xf71) return false\n                    if (cp < 0xf7f) return true\n                    if (cp === 0xf7f) return true\n                    return false\n                }\n                if (cp < 0xf85) return true\n                if (cp < 0xf86) return false\n                if (cp < 0xf88) return true\n                if (cp < 0xf8d) return false\n                if (cp < 0xf98) return true\n                if (cp < 0xf99) return false\n                if (cp < 0xfbd) return true\n                if (cp === 0xfc6) return true\n                if (cp < 0x102b) return false\n                if (cp < 0x102d) return true\n                if (cp < 0x102d) return false\n                if (cp < 0x1031) return true\n                if (cp === 0x1031) return true\n                if (cp < 0x1032) return false\n                if (cp < 0x1038) return true\n                return false\n            }\n            if (cp < 0x1090) {\n                if (cp < 0x1062) {\n                    if (cp === 0x1038) return true\n                    if (cp < 0x1039) return false\n                    if (cp < 0x103b) return true\n                    if (cp < 0x103b) return false\n                    if (cp < 0x103d) return true\n                    if (cp < 0x103d) return false\n                    if (cp < 0x103f) return true\n                    if (cp < 0x1040) return false\n                    if (cp < 0x104a) return true\n                    if (cp < 0x1056) return false\n                    if (cp < 0x1058) return true\n                    if (cp < 0x1058) return false\n                    if (cp < 0x105a) return true\n                    if (cp < 0x105e) return false\n                    if (cp < 0x1061) return true\n                    return false\n                }\n                if (cp < 0x1065) return true\n                if (cp < 0x1067) return false\n                if (cp < 0x106e) return true\n                if (cp < 0x1071) return false\n                if (cp < 0x1075) return true\n                if (cp === 0x1082) return true\n                if (cp < 0x1083) return false\n                if (cp < 0x1085) return true\n                if (cp < 0x1085) return false\n                if (cp < 0x1087) return true\n                if (cp < 0x1087) return false\n                if (cp < 0x108d) return true\n                if (cp === 0x108d) return true\n                if (cp === 0x108f) return true\n                return false\n            }\n            if (cp < 0x1772) {\n                if (cp < 0x1090) return false\n                if (cp < 0x109a) return true\n                if (cp < 0x109a) return false\n                if (cp < 0x109d) return true\n                if (cp === 0x109d) return true\n                if (cp < 0x135d) return false\n                if (cp < 0x1360) return true\n                if (cp < 0x1369) return false\n                if (cp < 0x1372) return true\n                if (cp < 0x1712) return false\n                if (cp < 0x1715) return true\n                if (cp < 0x1732) return false\n                if (cp < 0x1735) return true\n                if (cp < 0x1752) return false\n                if (cp < 0x1754) return true\n                return false\n            }\n            if (cp < 0x1774) return true\n            if (cp < 0x17b4) return false\n            if (cp < 0x17b6) return true\n            if (cp === 0x17b6) return true\n            if (cp < 0x17b7) return false\n            if (cp < 0x17be) return true\n            if (cp < 0x17be) return false\n            if (cp < 0x17c6) return true\n            if (cp === 0x17c6) return true\n            if (cp < 0x17c7) return false\n            if (cp < 0x17c9) return true\n            if (cp < 0x17c9) return false\n            if (cp < 0x17d4) return true\n            if (cp === 0x17dd) return true\n            return false\n        }\n        if (cp < 0x1b04) {\n            if (cp < 0x1a1b) {\n                if (cp < 0x1930) {\n                    if (cp < 0x17e0) return false\n                    if (cp < 0x17ea) return true\n                    if (cp < 0x180b) return false\n                    if (cp < 0x180e) return true\n                    if (cp < 0x1810) return false\n                    if (cp < 0x181a) return true\n                    if (cp === 0x18a9) return true\n                    if (cp < 0x1920) return false\n                    if (cp < 0x1923) return true\n                    if (cp < 0x1923) return false\n                    if (cp < 0x1927) return true\n                    if (cp < 0x1927) return false\n                    if (cp < 0x1929) return true\n                    if (cp < 0x1929) return false\n                    if (cp < 0x192c) return true\n                    return false\n                }\n                if (cp < 0x1932) return true\n                if (cp === 0x1932) return true\n                if (cp < 0x1933) return false\n                if (cp < 0x1939) return true\n                if (cp < 0x1939) return false\n                if (cp < 0x193c) return true\n                if (cp < 0x1946) return false\n                if (cp < 0x1950) return true\n                if (cp < 0x19d0) return false\n                if (cp < 0x19da) return true\n                if (cp === 0x19da) return true\n                if (cp < 0x1a17) return false\n                if (cp < 0x1a19) return true\n                if (cp < 0x1a19) return false\n                if (cp < 0x1a1b) return true\n                return false\n            }\n            if (cp < 0x1a63) {\n                if (cp === 0x1a1b) return true\n                if (cp === 0x1a55) return true\n                if (cp === 0x1a56) return true\n                if (cp === 0x1a57) return true\n                if (cp < 0x1a58) return false\n                if (cp < 0x1a5f) return true\n                if (cp === 0x1a60) return true\n                if (cp === 0x1a61) return true\n                if (cp === 0x1a62) return true\n                return false\n            }\n            if (cp < 0x1a65) return true\n            if (cp < 0x1a65) return false\n            if (cp < 0x1a6d) return true\n            if (cp < 0x1a6d) return false\n            if (cp < 0x1a73) return true\n            if (cp < 0x1a73) return false\n            if (cp < 0x1a7d) return true\n            if (cp === 0x1a7f) return true\n            if (cp < 0x1a80) return false\n            if (cp < 0x1a8a) return true\n            if (cp < 0x1a90) return false\n            if (cp < 0x1a9a) return true\n            if (cp < 0x1ab0) return false\n            if (cp < 0x1abe) return true\n            if (cp < 0x1b00) return false\n            if (cp < 0x1b04) return true\n            return false\n        }\n        if (cp < 0x1baa) {\n            if (cp < 0x1b43) {\n                if (cp === 0x1b04) return true\n                if (cp === 0x1b34) return true\n                if (cp === 0x1b35) return true\n                if (cp < 0x1b36) return false\n                if (cp < 0x1b3b) return true\n                if (cp === 0x1b3b) return true\n                if (cp === 0x1b3c) return true\n                if (cp < 0x1b3d) return false\n                if (cp < 0x1b42) return true\n                if (cp === 0x1b42) return true\n                return false\n            }\n            if (cp < 0x1b45) return true\n            if (cp < 0x1b50) return false\n            if (cp < 0x1b5a) return true\n            if (cp < 0x1b6b) return false\n            if (cp < 0x1b74) return true\n            if (cp < 0x1b80) return false\n            if (cp < 0x1b82) return true\n            if (cp === 0x1b82) return true\n            if (cp === 0x1ba1) return true\n            if (cp < 0x1ba2) return false\n            if (cp < 0x1ba6) return true\n            if (cp < 0x1ba6) return false\n            if (cp < 0x1ba8) return true\n            if (cp < 0x1ba8) return false\n            if (cp < 0x1baa) return true\n            return false\n        }\n        if (cp < 0x1bee) {\n            if (cp === 0x1baa) return true\n            if (cp < 0x1bab) return false\n            if (cp < 0x1bae) return true\n            if (cp < 0x1bb0) return false\n            if (cp < 0x1bba) return true\n            if (cp === 0x1be6) return true\n            if (cp === 0x1be7) return true\n            if (cp < 0x1be8) return false\n            if (cp < 0x1bea) return true\n            if (cp < 0x1bea) return false\n            if (cp < 0x1bed) return true\n            if (cp === 0x1bed) return true\n            return false\n        }\n        if (cp === 0x1bee) return true\n        if (cp < 0x1bef) return false\n        if (cp < 0x1bf2) return true\n        if (cp < 0x1bf2) return false\n        if (cp < 0x1bf4) return true\n        if (cp < 0x1c24) return false\n        if (cp < 0x1c2c) return true\n        if (cp < 0x1c2c) return false\n        if (cp < 0x1c34) return true\n        if (cp < 0x1c34) return false\n        if (cp < 0x1c36) return true\n        if (cp < 0x1c36) return false\n        if (cp < 0x1c38) return true\n        if (cp < 0x1c40) return false\n        if (cp < 0x1c4a) return true\n        if (cp < 0x1c50) return false\n        if (cp < 0x1c5a) return true\n        return false\n    }\n    if (cp < 0x1123e) {\n        if (cp < 0xaab7) {\n            if (cp < 0xa8b4) {\n                if (cp < 0x2d7f) {\n                    if (cp < 0x1cf8) {\n                        if (cp < 0x1cd0) return false\n                        if (cp < 0x1cd3) return true\n                        if (cp < 0x1cd4) return false\n                        if (cp < 0x1ce1) return true\n                        if (cp === 0x1ce1) return true\n                        if (cp < 0x1ce2) return false\n                        if (cp < 0x1ce9) return true\n                        if (cp === 0x1ced) return true\n                        if (cp < 0x1cf2) return false\n                        if (cp < 0x1cf4) return true\n                        if (cp === 0x1cf4) return true\n                        if (cp === 0x1cf7) return true\n                        return false\n                    }\n                    if (cp < 0x1cfa) return true\n                    if (cp < 0x1dc0) return false\n                    if (cp < 0x1dfa) return true\n                    if (cp < 0x1dfb) return false\n                    if (cp < 0x1e00) return true\n                    if (cp < 0x203f) return false\n                    if (cp < 0x2041) return true\n                    if (cp === 0x2054) return true\n                    if (cp < 0x20d0) return false\n                    if (cp < 0x20dd) return true\n                    if (cp === 0x20e1) return true\n                    if (cp < 0x20e5) return false\n                    if (cp < 0x20f1) return true\n                    if (cp < 0x2cef) return false\n                    if (cp < 0x2cf2) return true\n                    return false\n                }\n                if (cp < 0xa69e) {\n                    if (cp === 0x2d7f) return true\n                    if (cp < 0x2de0) return false\n                    if (cp < 0x2e00) return true\n                    if (cp < 0x302a) return false\n                    if (cp < 0x302e) return true\n                    if (cp < 0x302e) return false\n                    if (cp < 0x3030) return true\n                    if (cp < 0x3099) return false\n                    if (cp < 0x309b) return true\n                    if (cp < 0xa620) return false\n                    if (cp < 0xa62a) return true\n                    if (cp === 0xa66f) return true\n                    if (cp < 0xa674) return false\n                    if (cp < 0xa67e) return true\n                    return false\n                }\n                if (cp < 0xa6a0) return true\n                if (cp < 0xa6f0) return false\n                if (cp < 0xa6f2) return true\n                if (cp === 0xa802) return true\n                if (cp === 0xa806) return true\n                if (cp === 0xa80b) return true\n                if (cp < 0xa823) return false\n                if (cp < 0xa825) return true\n                if (cp < 0xa825) return false\n                if (cp < 0xa827) return true\n                if (cp === 0xa827) return true\n                if (cp < 0xa880) return false\n                if (cp < 0xa882) return true\n                return false\n            }\n            if (cp < 0xa9d0) {\n                if (cp < 0xa952) {\n                    if (cp < 0xa8b4) return false\n                    if (cp < 0xa8c4) return true\n                    if (cp < 0xa8c4) return false\n                    if (cp < 0xa8c6) return true\n                    if (cp < 0xa8d0) return false\n                    if (cp < 0xa8da) return true\n                    if (cp < 0xa8e0) return false\n                    if (cp < 0xa8f2) return true\n                    if (cp === 0xa8ff) return true\n                    if (cp < 0xa900) return false\n                    if (cp < 0xa90a) return true\n                    if (cp < 0xa926) return false\n                    if (cp < 0xa92e) return true\n                    if (cp < 0xa947) return false\n                    if (cp < 0xa952) return true\n                    return false\n                }\n                if (cp < 0xa954) return true\n                if (cp < 0xa980) return false\n                if (cp < 0xa983) return true\n                if (cp === 0xa983) return true\n                if (cp === 0xa9b3) return true\n                if (cp < 0xa9b4) return false\n                if (cp < 0xa9b6) return true\n                if (cp < 0xa9b6) return false\n                if (cp < 0xa9ba) return true\n                if (cp < 0xa9ba) return false\n                if (cp < 0xa9bc) return true\n                if (cp === 0xa9bc) return true\n                if (cp < 0xa9bd) return false\n                if (cp < 0xa9c1) return true\n                return false\n            }\n            if (cp < 0xaa43) {\n                if (cp < 0xa9d0) return false\n                if (cp < 0xa9da) return true\n                if (cp === 0xa9e5) return true\n                if (cp < 0xa9f0) return false\n                if (cp < 0xa9fa) return true\n                if (cp < 0xaa29) return false\n                if (cp < 0xaa2f) return true\n                if (cp < 0xaa2f) return false\n                if (cp < 0xaa31) return true\n                if (cp < 0xaa31) return false\n                if (cp < 0xaa33) return true\n                if (cp < 0xaa33) return false\n                if (cp < 0xaa35) return true\n                if (cp < 0xaa35) return false\n                if (cp < 0xaa37) return true\n                return false\n            }\n            if (cp === 0xaa43) return true\n            if (cp === 0xaa4c) return true\n            if (cp === 0xaa4d) return true\n            if (cp < 0xaa50) return false\n            if (cp < 0xaa5a) return true\n            if (cp === 0xaa7b) return true\n            if (cp === 0xaa7c) return true\n            if (cp === 0xaa7d) return true\n            if (cp === 0xaab0) return true\n            if (cp < 0xaab2) return false\n            if (cp < 0xaab5) return true\n            return false\n        }\n        if (cp < 0x10d30) {\n            if (cp < 0xfe00) {\n                if (cp < 0xabe3) {\n                    if (cp < 0xaab7) return false\n                    if (cp < 0xaab9) return true\n                    if (cp < 0xaabe) return false\n                    if (cp < 0xaac0) return true\n                    if (cp === 0xaac1) return true\n                    if (cp === 0xaaeb) return true\n                    if (cp < 0xaaec) return false\n                    if (cp < 0xaaee) return true\n                    if (cp < 0xaaee) return false\n                    if (cp < 0xaaf0) return true\n                    if (cp === 0xaaf5) return true\n                    if (cp === 0xaaf6) return true\n                    return false\n                }\n                if (cp < 0xabe5) return true\n                if (cp === 0xabe5) return true\n                if (cp < 0xabe6) return false\n                if (cp < 0xabe8) return true\n                if (cp === 0xabe8) return true\n                if (cp < 0xabe9) return false\n                if (cp < 0xabeb) return true\n                if (cp === 0xabec) return true\n                if (cp === 0xabed) return true\n                if (cp < 0xabf0) return false\n                if (cp < 0xabfa) return true\n                if (cp === 0xfb1e) return true\n                return false\n            }\n            if (cp < 0x10376) {\n                if (cp < 0xfe00) return false\n                if (cp < 0xfe10) return true\n                if (cp < 0xfe20) return false\n                if (cp < 0xfe30) return true\n                if (cp < 0xfe33) return false\n                if (cp < 0xfe35) return true\n                if (cp < 0xfe4d) return false\n                if (cp < 0xfe50) return true\n                if (cp < 0xff10) return false\n                if (cp < 0xff1a) return true\n                if (cp === 0xff3f) return true\n                if (cp === 0x101fd) return true\n                if (cp === 0x102e0) return true\n                return false\n            }\n            if (cp < 0x1037b) return true\n            if (cp < 0x104a0) return false\n            if (cp < 0x104aa) return true\n            if (cp < 0x10a01) return false\n            if (cp < 0x10a04) return true\n            if (cp < 0x10a05) return false\n            if (cp < 0x10a07) return true\n            if (cp < 0x10a0c) return false\n            if (cp < 0x10a10) return true\n            if (cp < 0x10a38) return false\n            if (cp < 0x10a3b) return true\n            if (cp === 0x10a3f) return true\n            if (cp < 0x10ae5) return false\n            if (cp < 0x10ae7) return true\n            if (cp < 0x10d24) return false\n            if (cp < 0x10d28) return true\n            return false\n        }\n        if (cp < 0x1112d) {\n            if (cp < 0x11082) {\n                if (cp < 0x10d30) return false\n                if (cp < 0x10d3a) return true\n                if (cp < 0x10f46) return false\n                if (cp < 0x10f51) return true\n                if (cp === 0x11000) return true\n                if (cp === 0x11001) return true\n                if (cp === 0x11002) return true\n                if (cp < 0x11038) return false\n                if (cp < 0x11047) return true\n                if (cp < 0x11066) return false\n                if (cp < 0x11070) return true\n                if (cp < 0x1107f) return false\n                if (cp < 0x11082) return true\n                return false\n            }\n            if (cp === 0x11082) return true\n            if (cp < 0x110b0) return false\n            if (cp < 0x110b3) return true\n            if (cp < 0x110b3) return false\n            if (cp < 0x110b7) return true\n            if (cp < 0x110b7) return false\n            if (cp < 0x110b9) return true\n            if (cp < 0x110b9) return false\n            if (cp < 0x110bb) return true\n            if (cp < 0x110f0) return false\n            if (cp < 0x110fa) return true\n            if (cp < 0x11100) return false\n            if (cp < 0x11103) return true\n            if (cp < 0x11127) return false\n            if (cp < 0x1112c) return true\n            if (cp === 0x1112c) return true\n            return false\n        }\n        if (cp < 0x111bf) {\n            if (cp < 0x1112d) return false\n            if (cp < 0x11135) return true\n            if (cp < 0x11136) return false\n            if (cp < 0x11140) return true\n            if (cp < 0x11145) return false\n            if (cp < 0x11147) return true\n            if (cp === 0x11173) return true\n            if (cp < 0x11180) return false\n            if (cp < 0x11182) return true\n            if (cp === 0x11182) return true\n            if (cp < 0x111b3) return false\n            if (cp < 0x111b6) return true\n            if (cp < 0x111b6) return false\n            if (cp < 0x111bf) return true\n            return false\n        }\n        if (cp < 0x111c1) return true\n        if (cp < 0x111c9) return false\n        if (cp < 0x111cd) return true\n        if (cp < 0x111d0) return false\n        if (cp < 0x111da) return true\n        if (cp < 0x1122c) return false\n        if (cp < 0x1122f) return true\n        if (cp < 0x1122f) return false\n        if (cp < 0x11232) return true\n        if (cp < 0x11232) return false\n        if (cp < 0x11234) return true\n        if (cp === 0x11234) return true\n        if (cp === 0x11235) return true\n        if (cp < 0x11236) return false\n        if (cp < 0x11238) return true\n        return false\n    }\n    if (cp < 0x11a33) {\n        if (cp < 0x115af) {\n            if (cp < 0x11435) {\n                if (cp < 0x1133e) {\n                    if (cp === 0x1123e) return true\n                    if (cp === 0x112df) return true\n                    if (cp < 0x112e0) return false\n                    if (cp < 0x112e3) return true\n                    if (cp < 0x112e3) return false\n                    if (cp < 0x112eb) return true\n                    if (cp < 0x112f0) return false\n                    if (cp < 0x112fa) return true\n                    if (cp < 0x11300) return false\n                    if (cp < 0x11302) return true\n                    if (cp < 0x11302) return false\n                    if (cp < 0x11304) return true\n                    if (cp < 0x1133b) return false\n                    if (cp < 0x1133d) return true\n                    return false\n                }\n                if (cp < 0x11340) return true\n                if (cp === 0x11340) return true\n                if (cp < 0x11341) return false\n                if (cp < 0x11345) return true\n                if (cp < 0x11347) return false\n                if (cp < 0x11349) return true\n                if (cp < 0x1134b) return false\n                if (cp < 0x1134e) return true\n                if (cp === 0x11357) return true\n                if (cp < 0x11362) return false\n                if (cp < 0x11364) return true\n                if (cp < 0x11366) return false\n                if (cp < 0x1136d) return true\n                if (cp < 0x11370) return false\n                if (cp < 0x11375) return true\n                return false\n            }\n            if (cp < 0x114b0) {\n                if (cp < 0x11435) return false\n                if (cp < 0x11438) return true\n                if (cp < 0x11438) return false\n                if (cp < 0x11440) return true\n                if (cp < 0x11440) return false\n                if (cp < 0x11442) return true\n                if (cp < 0x11442) return false\n                if (cp < 0x11445) return true\n                if (cp === 0x11445) return true\n                if (cp === 0x11446) return true\n                if (cp < 0x11450) return false\n                if (cp < 0x1145a) return true\n                if (cp === 0x1145e) return true\n                return false\n            }\n            if (cp < 0x114b3) return true\n            if (cp < 0x114b3) return false\n            if (cp < 0x114b9) return true\n            if (cp === 0x114b9) return true\n            if (cp === 0x114ba) return true\n            if (cp < 0x114bb) return false\n            if (cp < 0x114bf) return true\n            if (cp < 0x114bf) return false\n            if (cp < 0x114c1) return true\n            if (cp === 0x114c1) return true\n            if (cp < 0x114c2) return false\n            if (cp < 0x114c4) return true\n            if (cp < 0x114d0) return false\n            if (cp < 0x114da) return true\n            return false\n        }\n        if (cp < 0x116ae) {\n            if (cp < 0x11633) {\n                if (cp < 0x115af) return false\n                if (cp < 0x115b2) return true\n                if (cp < 0x115b2) return false\n                if (cp < 0x115b6) return true\n                if (cp < 0x115b8) return false\n                if (cp < 0x115bc) return true\n                if (cp < 0x115bc) return false\n                if (cp < 0x115be) return true\n                if (cp === 0x115be) return true\n                if (cp < 0x115bf) return false\n                if (cp < 0x115c1) return true\n                if (cp < 0x115dc) return false\n                if (cp < 0x115de) return true\n                if (cp < 0x11630) return false\n                if (cp < 0x11633) return true\n                return false\n            }\n            if (cp < 0x1163b) return true\n            if (cp < 0x1163b) return false\n            if (cp < 0x1163d) return true\n            if (cp === 0x1163d) return true\n            if (cp === 0x1163e) return true\n            if (cp < 0x1163f) return false\n            if (cp < 0x11641) return true\n            if (cp < 0x11650) return false\n            if (cp < 0x1165a) return true\n            if (cp === 0x116ab) return true\n            if (cp === 0x116ac) return true\n            if (cp === 0x116ad) return true\n            return false\n        }\n        if (cp < 0x11726) {\n            if (cp < 0x116ae) return false\n            if (cp < 0x116b0) return true\n            if (cp < 0x116b0) return false\n            if (cp < 0x116b6) return true\n            if (cp === 0x116b6) return true\n            if (cp === 0x116b7) return true\n            if (cp < 0x116c0) return false\n            if (cp < 0x116ca) return true\n            if (cp < 0x1171d) return false\n            if (cp < 0x11720) return true\n            if (cp < 0x11720) return false\n            if (cp < 0x11722) return true\n            if (cp < 0x11722) return false\n            if (cp < 0x11726) return true\n            return false\n        }\n        if (cp === 0x11726) return true\n        if (cp < 0x11727) return false\n        if (cp < 0x1172c) return true\n        if (cp < 0x11730) return false\n        if (cp < 0x1173a) return true\n        if (cp < 0x1182c) return false\n        if (cp < 0x1182f) return true\n        if (cp < 0x1182f) return false\n        if (cp < 0x11838) return true\n        if (cp === 0x11838) return true\n        if (cp < 0x11839) return false\n        if (cp < 0x1183b) return true\n        if (cp < 0x118e0) return false\n        if (cp < 0x118ea) return true\n        if (cp < 0x11a01) return false\n        if (cp < 0x11a0b) return true\n        return false\n    }\n    if (cp < 0x11d97) {\n        if (cp < 0x11ca9) {\n            if (cp < 0x11a97) {\n                if (cp < 0x11a33) return false\n                if (cp < 0x11a39) return true\n                if (cp === 0x11a39) return true\n                if (cp < 0x11a3b) return false\n                if (cp < 0x11a3f) return true\n                if (cp === 0x11a47) return true\n                if (cp < 0x11a51) return false\n                if (cp < 0x11a57) return true\n                if (cp < 0x11a57) return false\n                if (cp < 0x11a59) return true\n                if (cp < 0x11a59) return false\n                if (cp < 0x11a5c) return true\n                if (cp < 0x11a8a) return false\n                if (cp < 0x11a97) return true\n                return false\n            }\n            if (cp === 0x11a97) return true\n            if (cp < 0x11a98) return false\n            if (cp < 0x11a9a) return true\n            if (cp === 0x11c2f) return true\n            if (cp < 0x11c30) return false\n            if (cp < 0x11c37) return true\n            if (cp < 0x11c38) return false\n            if (cp < 0x11c3e) return true\n            if (cp === 0x11c3e) return true\n            if (cp === 0x11c3f) return true\n            if (cp < 0x11c50) return false\n            if (cp < 0x11c5a) return true\n            if (cp < 0x11c92) return false\n            if (cp < 0x11ca8) return true\n            return false\n        }\n        if (cp < 0x11d3c) {\n            if (cp === 0x11ca9) return true\n            if (cp < 0x11caa) return false\n            if (cp < 0x11cb1) return true\n            if (cp === 0x11cb1) return true\n            if (cp < 0x11cb2) return false\n            if (cp < 0x11cb4) return true\n            if (cp === 0x11cb4) return true\n            if (cp < 0x11cb5) return false\n            if (cp < 0x11cb7) return true\n            if (cp < 0x11d31) return false\n            if (cp < 0x11d37) return true\n            if (cp === 0x11d3a) return true\n            return false\n        }\n        if (cp < 0x11d3e) return true\n        if (cp < 0x11d3f) return false\n        if (cp < 0x11d46) return true\n        if (cp === 0x11d47) return true\n        if (cp < 0x11d50) return false\n        if (cp < 0x11d5a) return true\n        if (cp < 0x11d8a) return false\n        if (cp < 0x11d8f) return true\n        if (cp < 0x11d90) return false\n        if (cp < 0x11d92) return true\n        if (cp < 0x11d93) return false\n        if (cp < 0x11d95) return true\n        if (cp === 0x11d95) return true\n        if (cp === 0x11d96) return true\n        return false\n    }\n    if (cp < 0x1d242) {\n        if (cp < 0x16f51) {\n            if (cp === 0x11d97) return true\n            if (cp < 0x11da0) return false\n            if (cp < 0x11daa) return true\n            if (cp < 0x11ef3) return false\n            if (cp < 0x11ef5) return true\n            if (cp < 0x11ef5) return false\n            if (cp < 0x11ef7) return true\n            if (cp < 0x16a60) return false\n            if (cp < 0x16a6a) return true\n            if (cp < 0x16af0) return false\n            if (cp < 0x16af5) return true\n            if (cp < 0x16b30) return false\n            if (cp < 0x16b37) return true\n            if (cp < 0x16b50) return false\n            if (cp < 0x16b5a) return true\n            return false\n        }\n        if (cp < 0x16f7f) return true\n        if (cp < 0x16f8f) return false\n        if (cp < 0x16f93) return true\n        if (cp < 0x1bc9d) return false\n        if (cp < 0x1bc9f) return true\n        if (cp < 0x1d165) return false\n        if (cp < 0x1d167) return true\n        if (cp < 0x1d167) return false\n        if (cp < 0x1d16a) return true\n        if (cp < 0x1d16d) return false\n        if (cp < 0x1d173) return true\n        if (cp < 0x1d17b) return false\n        if (cp < 0x1d183) return true\n        if (cp < 0x1d185) return false\n        if (cp < 0x1d18c) return true\n        if (cp < 0x1d1aa) return false\n        if (cp < 0x1d1ae) return true\n        return false\n    }\n    if (cp < 0x1e000) {\n        if (cp < 0x1d242) return false\n        if (cp < 0x1d245) return true\n        if (cp < 0x1d7ce) return false\n        if (cp < 0x1d800) return true\n        if (cp < 0x1da00) return false\n        if (cp < 0x1da37) return true\n        if (cp < 0x1da3b) return false\n        if (cp < 0x1da6d) return true\n        if (cp === 0x1da75) return true\n        if (cp === 0x1da84) return true\n        if (cp < 0x1da9b) return false\n        if (cp < 0x1daa0) return true\n        if (cp < 0x1daa1) return false\n        if (cp < 0x1dab0) return true\n        return false\n    }\n    if (cp < 0x1e007) return true\n    if (cp < 0x1e008) return false\n    if (cp < 0x1e019) return true\n    if (cp < 0x1e01b) return false\n    if (cp < 0x1e022) return true\n    if (cp < 0x1e023) return false\n    if (cp < 0x1e025) return true\n    if (cp < 0x1e026) return false\n    if (cp < 0x1e02b) return true\n    if (cp < 0x1e8d0) return false\n    if (cp < 0x1e8d7) return true\n    if (cp < 0x1e944) return false\n    if (cp < 0x1e94b) return true\n    if (cp < 0x1e950) return false\n    if (cp < 0x1e95a) return true\n    if (cp < 0xe0100) return false\n    if (cp < 0xe01f0) return true\n    return false\n}\n","const PropertyData: Object & { [key: string]: Set<string> } = {\n    $LONE: new Set([\n        \"ASCII\",\n        \"ASCII_Hex_Digit\",\n        \"AHex\",\n        \"Alphabetic\",\n        \"Alpha\",\n        \"Any\",\n        \"Assigned\",\n        \"Bidi_Control\",\n        \"Bidi_C\",\n        \"Bidi_Mirrored\",\n        \"Bidi_M\",\n        \"Case_Ignorable\",\n        \"CI\",\n        \"Cased\",\n        \"Changes_When_Casefolded\",\n        \"CWCF\",\n        \"Changes_When_Casemapped\",\n        \"CWCM\",\n        \"Changes_When_Lowercased\",\n        \"CWL\",\n        \"Changes_When_NFKC_Casefolded\",\n        \"CWKCF\",\n        \"Changes_When_Titlecased\",\n        \"CWT\",\n        \"Changes_When_Uppercased\",\n        \"CWU\",\n        \"Dash\",\n        \"Default_Ignorable_Code_Point\",\n        \"DI\",\n        \"Deprecated\",\n        \"Dep\",\n        \"Diacritic\",\n        \"Dia\",\n        \"Emoji\",\n        \"Emoji_Component\",\n        \"Emoji_Modifier\",\n        \"Emoji_Modifier_Base\",\n        \"Emoji_Presentation\",\n        \"Extender\",\n        \"Ext\",\n        \"Grapheme_Base\",\n        \"Gr_Base\",\n        \"Grapheme_Extend\",\n        \"Gr_Ext\",\n        \"Hex_Digit\",\n        \"Hex\",\n        \"IDS_Binary_Operator\",\n        \"IDSB\",\n        \"IDS_Trinary_Operator\",\n        \"IDST\",\n        \"ID_Continue\",\n        \"IDC\",\n        \"ID_Start\",\n        \"IDS\",\n        \"Ideographic\",\n        \"Ideo\",\n        \"Join_Control\",\n        \"Join_C\",\n        \"Logical_Order_Exception\",\n        \"LOE\",\n        \"Lowercase\",\n        \"Lower\",\n        \"Math\",\n        \"Noncharacter_Code_Point\",\n        \"NChar\",\n        \"Pattern_Syntax\",\n        \"Pat_Syn\",\n        \"Pattern_White_Space\",\n        \"Pat_WS\",\n        \"Quotation_Mark\",\n        \"QMark\",\n        \"Radical\",\n        \"Regional_Indicator\",\n        \"RI\",\n        \"Sentence_Terminal\",\n        \"STerm\",\n        \"Soft_Dotted\",\n        \"SD\",\n        \"Terminal_Punctuation\",\n        \"Term\",\n        \"Unified_Ideograph\",\n        \"UIdeo\",\n        \"Uppercase\",\n        \"Upper\",\n        \"Variation_Selector\",\n        \"VS\",\n        \"White_Space\",\n        \"space\",\n        \"XID_Continue\",\n        \"XIDC\",\n        \"XID_Start\",\n        \"XIDS\",\n    ]),\n    General_Category: new Set([\n        \"Cased_Letter\",\n        \"LC\",\n        \"Close_Punctuation\",\n        \"Pe\",\n        \"Connector_Punctuation\",\n        \"Pc\",\n        \"Control\",\n        \"Cc\",\n        \"cntrl\",\n        \"Currency_Symbol\",\n        \"Sc\",\n        \"Dash_Punctuation\",\n        \"Pd\",\n        \"Decimal_Number\",\n        \"Nd\",\n        \"digit\",\n        \"Enclosing_Mark\",\n        \"Me\",\n        \"Final_Punctuation\",\n        \"Pf\",\n        \"Format\",\n        \"Cf\",\n        \"Initial_Punctuation\",\n        \"Pi\",\n        \"Letter\",\n        \"L\",\n        \"Letter_Number\",\n        \"Nl\",\n        \"Line_Separator\",\n        \"Zl\",\n        \"Lowercase_Letter\",\n        \"Ll\",\n        \"Mark\",\n        \"M\",\n        \"Combining_Mark\",\n        \"Math_Symbol\",\n        \"Sm\",\n        \"Modifier_Letter\",\n        \"Lm\",\n        \"Modifier_Symbol\",\n        \"Sk\",\n        \"Nonspacing_Mark\",\n        \"Mn\",\n        \"Number\",\n        \"N\",\n        \"Open_Punctuation\",\n        \"Ps\",\n        \"Other\",\n        \"C\",\n        \"Other_Letter\",\n        \"Lo\",\n        \"Other_Number\",\n        \"No\",\n        \"Other_Punctuation\",\n        \"Po\",\n        \"Other_Symbol\",\n        \"So\",\n        \"Paragraph_Separator\",\n        \"Zp\",\n        \"Private_Use\",\n        \"Co\",\n        \"Punctuation\",\n        \"P\",\n        \"punct\",\n        \"Separator\",\n        \"Z\",\n        \"Space_Separator\",\n        \"Zs\",\n        \"Spacing_Mark\",\n        \"Mc\",\n        \"Surrogate\",\n        \"Cs\",\n        \"Symbol\",\n        \"S\",\n        \"Titlecase_Letter\",\n        \"Lt\",\n        \"Unassigned\",\n        \"Cn\",\n        \"Uppercase_Letter\",\n        \"Lu\",\n    ]),\n    Script: new Set([\n        \"Adlam\",\n        \"Adlm\",\n        \"Ahom\",\n        \"Anatolian_Hieroglyphs\",\n        \"Hluw\",\n        \"Arabic\",\n        \"Arab\",\n        \"Armenian\",\n        \"Armn\",\n        \"Avestan\",\n        \"Avst\",\n        \"Balinese\",\n        \"Bali\",\n        \"Bamum\",\n        \"Bamu\",\n        \"Bassa_Vah\",\n        \"Bass\",\n        \"Batak\",\n        \"Batk\",\n        \"Bengali\",\n        \"Beng\",\n        \"Bhaiksuki\",\n        \"Bhks\",\n        \"Bopomofo\",\n        \"Bopo\",\n        \"Brahmi\",\n        \"Brah\",\n        \"Braille\",\n        \"Brai\",\n        \"Buginese\",\n        \"Bugi\",\n        \"Buhid\",\n        \"Buhd\",\n        \"Canadian_Aboriginal\",\n        \"Cans\",\n        \"Carian\",\n        \"Cari\",\n        \"Caucasian_Albanian\",\n        \"Aghb\",\n        \"Chakma\",\n        \"Cakm\",\n        \"Cham\",\n        \"Cherokee\",\n        \"Cher\",\n        \"Common\",\n        \"Zyyy\",\n        \"Coptic\",\n        \"Copt\",\n        \"Qaac\",\n        \"Cuneiform\",\n        \"Xsux\",\n        \"Cypriot\",\n        \"Cprt\",\n        \"Cyrillic\",\n        \"Cyrl\",\n        \"Deseret\",\n        \"Dsrt\",\n        \"Devanagari\",\n        \"Deva\",\n        \"Duployan\",\n        \"Dupl\",\n        \"Egyptian_Hieroglyphs\",\n        \"Egyp\",\n        \"Elbasan\",\n        \"Elba\",\n        \"Ethiopic\",\n        \"Ethi\",\n        \"Georgian\",\n        \"Geor\",\n        \"Glagolitic\",\n        \"Glag\",\n        \"Gothic\",\n        \"Goth\",\n        \"Grantha\",\n        \"Gran\",\n        \"Greek\",\n        \"Grek\",\n        \"Gujarati\",\n        \"Gujr\",\n        \"Gurmukhi\",\n        \"Guru\",\n        \"Han\",\n        \"Hani\",\n        \"Hangul\",\n        \"Hang\",\n        \"Hanunoo\",\n        \"Hano\",\n        \"Hatran\",\n        \"Hatr\",\n        \"Hebrew\",\n        \"Hebr\",\n        \"Hiragana\",\n        \"Hira\",\n        \"Imperial_Aramaic\",\n        \"Armi\",\n        \"Inherited\",\n        \"Zinh\",\n        \"Qaai\",\n        \"Inscriptional_Pahlavi\",\n        \"Phli\",\n        \"Inscriptional_Parthian\",\n        \"Prti\",\n        \"Javanese\",\n        \"Java\",\n        \"Kaithi\",\n        \"Kthi\",\n        \"Kannada\",\n        \"Knda\",\n        \"Katakana\",\n        \"Kana\",\n        \"Kayah_Li\",\n        \"Kali\",\n        \"Kharoshthi\",\n        \"Khar\",\n        \"Khmer\",\n        \"Khmr\",\n        \"Khojki\",\n        \"Khoj\",\n        \"Khudawadi\",\n        \"Sind\",\n        \"Lao\",\n        \"Laoo\",\n        \"Latin\",\n        \"Latn\",\n        \"Lepcha\",\n        \"Lepc\",\n        \"Limbu\",\n        \"Limb\",\n        \"Linear_A\",\n        \"Lina\",\n        \"Linear_B\",\n        \"Linb\",\n        \"Lisu\",\n        \"Lycian\",\n        \"Lyci\",\n        \"Lydian\",\n        \"Lydi\",\n        \"Mahajani\",\n        \"Mahj\",\n        \"Malayalam\",\n        \"Mlym\",\n        \"Mandaic\",\n        \"Mand\",\n        \"Manichaean\",\n        \"Mani\",\n        \"Marchen\",\n        \"Marc\",\n        \"Masaram_Gondi\",\n        \"Gonm\",\n        \"Meetei_Mayek\",\n        \"Mtei\",\n        \"Mende_Kikakui\",\n        \"Mend\",\n        \"Meroitic_Cursive\",\n        \"Merc\",\n        \"Meroitic_Hieroglyphs\",\n        \"Mero\",\n        \"Miao\",\n        \"Plrd\",\n        \"Modi\",\n        \"Mongolian\",\n        \"Mong\",\n        \"Mro\",\n        \"Mroo\",\n        \"Multani\",\n        \"Mult\",\n        \"Myanmar\",\n        \"Mymr\",\n        \"Nabataean\",\n        \"Nbat\",\n        \"New_Tai_Lue\",\n        \"Talu\",\n        \"Newa\",\n        \"Nko\",\n        \"Nkoo\",\n        \"Nushu\",\n        \"Nshu\",\n        \"Ogham\",\n        \"Ogam\",\n        \"Ol_Chiki\",\n        \"Olck\",\n        \"Old_Hungarian\",\n        \"Hung\",\n        \"Old_Italic\",\n        \"Ital\",\n        \"Old_North_Arabian\",\n        \"Narb\",\n        \"Old_Permic\",\n        \"Perm\",\n        \"Old_Persian\",\n        \"Xpeo\",\n        \"Old_South_Arabian\",\n        \"Sarb\",\n        \"Old_Turkic\",\n        \"Orkh\",\n        \"Oriya\",\n        \"Orya\",\n        \"Osage\",\n        \"Osge\",\n        \"Osmanya\",\n        \"Osma\",\n        \"Pahawh_Hmong\",\n        \"Hmng\",\n        \"Palmyrene\",\n        \"Palm\",\n        \"Pau_Cin_Hau\",\n        \"Pauc\",\n        \"Phags_Pa\",\n        \"Phag\",\n        \"Phoenician\",\n        \"Phnx\",\n        \"Psalter_Pahlavi\",\n        \"Phlp\",\n        \"Rejang\",\n        \"Rjng\",\n        \"Runic\",\n        \"Runr\",\n        \"Samaritan\",\n        \"Samr\",\n        \"Saurashtra\",\n        \"Saur\",\n        \"Sharada\",\n        \"Shrd\",\n        \"Shavian\",\n        \"Shaw\",\n        \"Siddham\",\n        \"Sidd\",\n        \"SignWriting\",\n        \"Sgnw\",\n        \"Sinhala\",\n        \"Sinh\",\n        \"Sora_Sompeng\",\n        \"Sora\",\n        \"Soyombo\",\n        \"Soyo\",\n        \"Sundanese\",\n        \"Sund\",\n        \"Syloti_Nagri\",\n        \"Sylo\",\n        \"Syriac\",\n        \"Syrc\",\n        \"Tagalog\",\n        \"Tglg\",\n        \"Tagbanwa\",\n        \"Tagb\",\n        \"Tai_Le\",\n        \"Tale\",\n        \"Tai_Tham\",\n        \"Lana\",\n        \"Tai_Viet\",\n        \"Tavt\",\n        \"Takri\",\n        \"Takr\",\n        \"Tamil\",\n        \"Taml\",\n        \"Tangut\",\n        \"Tang\",\n        \"Telugu\",\n        \"Telu\",\n        \"Thaana\",\n        \"Thaa\",\n        \"Thai\",\n        \"Tibetan\",\n        \"Tibt\",\n        \"Tifinagh\",\n        \"Tfng\",\n        \"Tirhuta\",\n        \"Tirh\",\n        \"Ugaritic\",\n        \"Ugar\",\n        \"Vai\",\n        \"Vaii\",\n        \"Warang_Citi\",\n        \"Wara\",\n        \"Yi\",\n        \"Yiii\",\n        \"Zanabazar_Square\",\n        \"Zanb\",\n    ]),\n}\n\nPropertyData.gc = PropertyData.General_Category\nPropertyData.sc = PropertyData.Script_Extensions = PropertyData.scx =\n    PropertyData.Script\n\nexport { PropertyData }\n","export { isIdContinue, isIdStart } from \"./ids\"\nexport { PropertyData } from \"./property-data\"\n\nexport const Null = 0x00\nexport const Backspace = 0x08\nexport const CharacterTabulation = 0x09\nexport const LineFeed = 0x0a\nexport const LineTabulation = 0x0b\nexport const FormFeed = 0x0c\nexport const CarriageReturn = 0x0d\nexport const ExclamationMark = 0x21\nexport const DollarSign = 0x24\nexport const LeftParenthesis = 0x28\nexport const RightParenthesis = 0x29\nexport const Asterisk = 0x2a\nexport const PlusSign = 0x2b\nexport const Comma = 0x2c\nexport const HyphenMinus = 0x2d\nexport const FullStop = 0x2e\nexport const Solidus = 0x2f\nexport const DigitZero = 0x30\nexport const DigitOne = 0x31\nexport const DigitSeven = 0x37\nexport const DigitNine = 0x39\nexport const Colon = 0x3a\nexport const LessThanSign = 0x3c\nexport const EqualsSign = 0x3d\nexport const GreaterThanSign = 0x3e\nexport const QuestionMark = 0x3f\nexport const LatinCapitalLetterA = 0x41\nexport const LatinCapitalLetterB = 0x42\nexport const LatinCapitalLetterD = 0x44\nexport const LatinCapitalLetterF = 0x46\nexport const LatinCapitalLetterP = 0x50\nexport const LatinCapitalLetterS = 0x53\nexport const LatinCapitalLetterW = 0x57\nexport const LatinCapitalLetterZ = 0x5a\nexport const LowLine = 0x5f\nexport const LatinSmallLetterA = 0x61\nexport const LatinSmallLetterB = 0x62\nexport const LatinSmallLetterC = 0x63\nexport const LatinSmallLetterD = 0x64\nexport const LatinSmallLetterF = 0x66\nexport const LatinSmallLetterG = 0x67\nexport const LatinSmallLetterI = 0x69\nexport const LatinSmallLetterK = 0x6b\nexport const LatinSmallLetterM = 0x6d\nexport const LatinSmallLetterN = 0x6e\nexport const LatinSmallLetterP = 0x70\nexport const LatinSmallLetterR = 0x72\nexport const LatinSmallLetterS = 0x73\nexport const LatinSmallLetterT = 0x74\nexport const LatinSmallLetterU = 0x75\nexport const LatinSmallLetterV = 0x76\nexport const LatinSmallLetterW = 0x77\nexport const LatinSmallLetterX = 0x78\nexport const LatinSmallLetterY = 0x79\nexport const LatinSmallLetterZ = 0x7a\nexport const LeftSquareBracket = 0x5b\nexport const ReverseSolidus = 0x5c\nexport const RightSquareBracket = 0x5d\nexport const CircumflexAccent = 0x5e\nexport const LeftCurlyBracket = 0x7b\nexport const VerticalLine = 0x7c\nexport const RightCurlyBracket = 0x7d\nexport const ZeroWidthNonJoiner = 0x200c\nexport const ZeroWidthJoiner = 0x200d\nexport const LineSeparator = 0x2028\nexport const ParagraphSeparator = 0x2029\n\nexport const MinCodePoint = 0x00\nexport const MaxCodePoint = 0x10ffff\n\nexport function isLatinLetter(code: number): boolean {\n    return (\n        (code >= LatinCapitalLetterA && code <= LatinCapitalLetterZ) ||\n        (code >= LatinSmallLetterA && code <= LatinSmallLetterZ)\n    )\n}\n\nexport function isDecimalDigit(code: number): boolean {\n    return code >= DigitZero && code <= DigitNine\n}\n\nexport function isOctalDigit(code: number): boolean {\n    return code >= DigitZero && code <= DigitSeven\n}\n\nexport function isHexDigit(code: number): boolean {\n    return (\n        (code >= DigitZero && code <= DigitNine) ||\n        (code >= LatinCapitalLetterA && code <= LatinCapitalLetterF) ||\n        (code >= LatinSmallLetterA && code <= LatinSmallLetterF)\n    )\n}\n\nexport function isLineTerminator(code: number): boolean {\n    return (\n        code === LineFeed ||\n        code === CarriageReturn ||\n        code === LineSeparator ||\n        code === ParagraphSeparator\n    )\n}\n\nexport function isValidUnicode(code: number): boolean {\n    return code >= MinCodePoint && code <= MaxCodePoint\n}\n\nexport function digitToInt(code: number): number {\n    if (code >= LatinSmallLetterA && code <= LatinSmallLetterF) {\n        return code - LatinSmallLetterA + 10\n    }\n    if (code >= LatinCapitalLetterA && code <= LatinCapitalLetterF) {\n        return code - LatinCapitalLetterA + 10\n    }\n    return code - DigitZero\n}\n","const legacyImpl = {\n    at(s: string, end: number, i: number): number {\n        return i < end ? s.charCodeAt(i) : -1\n    },\n    width(c: number): number {\n        return 1\n    },\n}\nconst unicodeImpl = {\n    at(s: string, end: number, i: number): number {\n        return i < end ? s.codePointAt(i)! : -1\n    },\n    width(c: number): number {\n        return c > 0xffff ? 2 : 1\n    },\n}\n\nexport class Reader {\n    private _impl = legacyImpl\n    private _s = \"\"\n    private _i = 0\n    private _end = 0\n    private _cp1: number = -1\n    private _w1 = 1\n    private _cp2: number = -1\n    private _w2 = 1\n    private _cp3: number = -1\n    private _w3 = 1\n    private _cp4: number = -1\n\n    public get source(): string {\n        return this._s\n    }\n\n    public get index(): number {\n        return this._i\n    }\n\n    public get currentCodePoint(): number {\n        return this._cp1\n    }\n\n    public get nextCodePoint(): number {\n        return this._cp2\n    }\n\n    public get nextCodePoint2(): number {\n        return this._cp3\n    }\n\n    public get nextCodePoint3(): number {\n        return this._cp4\n    }\n\n    public reset(\n        source: string,\n        start: number,\n        end: number,\n        uFlag: boolean,\n    ): void {\n        this._impl = uFlag ? unicodeImpl : legacyImpl\n        this._s = source\n        this._end = end\n        this.rewind(start)\n    }\n\n    public rewind(index: number): void {\n        const impl = this._impl\n        this._i = index\n        this._cp1 = impl.at(this._s, this._end, index)\n        this._w1 = impl.width(this._cp1)\n        this._cp2 = impl.at(this._s, this._end, index + this._w1)\n        this._w2 = impl.width(this._cp2)\n        this._cp3 = impl.at(this._s, this._end, index + this._w1 + this._w2)\n        this._w3 = impl.width(this._cp3)\n        this._cp4 = impl.at(\n            this._s,\n            this._end,\n            index + this._w1 + this._w2 + this._w3,\n        )\n    }\n\n    public advance(): void {\n        if (this._cp1 !== -1) {\n            const impl = this._impl\n            this._i += this._w1\n            this._cp1 = this._cp2\n            this._w1 = this._w2\n            this._cp2 = this._cp3\n            this._w2 = impl.width(this._cp2)\n            this._cp3 = this._cp4\n            this._w3 = impl.width(this._cp3)\n            this._cp4 = impl.at(\n                this._s,\n                this._end,\n                this._i + this._w1 + this._w2 + this._w3,\n            )\n        }\n    }\n\n    public eat(cp: number): boolean {\n        if (this._cp1 === cp) {\n            this.advance()\n            return true\n        }\n        return false\n    }\n\n    public eat2(cp1: number, cp2: number): boolean {\n        if (this._cp1 === cp1 && this._cp2 === cp2) {\n            this.advance()\n            this.advance()\n            return true\n        }\n        return false\n    }\n\n    public eat3(cp1: number, cp2: number, cp3: number): boolean {\n        if (this._cp1 === cp1 && this._cp2 === cp2 && this._cp3 === cp3) {\n            this.advance()\n            this.advance()\n            this.advance()\n            return true\n        }\n        return false\n    }\n}\n","export class RegExpSyntaxError extends SyntaxError {\n    public index: number\n    public constructor(\n        source: string,\n        uFlag: boolean,\n        index: number,\n        message: string,\n    ) {\n        /*eslint-disable no-param-reassign */\n        if (source) {\n            if (source[0] !== \"/\") {\n                source = `/${source}/${uFlag ? \"u\" : \"\"}`\n            }\n            source = `: ${source}`\n        }\n        /*eslint-enable no-param-reassign */\n\n        super(`Invalid regular expression${source}: ${message}`)\n        this.index = index\n    }\n}\n","import { Reader } from \"./reader\"\nimport { RegExpSyntaxError } from \"./regexp-syntax-error\"\nimport {\n    Asterisk,\n    Backspace,\n    CarriageReturn,\n    CharacterTabulation,\n    CircumflexAccent,\n    Colon,\n    Comma,\n    DigitNine,\n    DigitOne,\n    digitToInt,\n    DigitZero,\n    DollarSign,\n    EqualsSign,\n    ExclamationMark,\n    FormFeed,\n    FullStop,\n    GreaterThanSign,\n    HyphenMinus,\n    isDecimalDigit,\n    isHexDigit,\n    isIdContinue,\n    isIdStart,\n    isLatinLetter,\n    isLineTerminator,\n    isOctalDigit,\n    isValidUnicode,\n    LatinCapitalLetterB,\n    LatinCapitalLetterD,\n    LatinCapitalLetterP,\n    LatinCapitalLetterS,\n    LatinCapitalLetterW,\n    LatinSmallLetterB,\n    LatinSmallLetterC,\n    LatinSmallLetterD,\n    LatinSmallLetterF,\n    LatinSmallLetterG,\n    LatinSmallLetterI,\n    LatinSmallLetterK,\n    LatinSmallLetterM,\n    LatinSmallLetterN,\n    LatinSmallLetterP,\n    LatinSmallLetterR,\n    LatinSmallLetterS,\n    LatinSmallLetterT,\n    LatinSmallLetterU,\n    LatinSmallLetterV,\n    LatinSmallLetterW,\n    LatinSmallLetterX,\n    LatinSmallLetterY,\n    LeftCurlyBracket,\n    LeftParenthesis,\n    LeftSquareBracket,\n    LessThanSign,\n    LineFeed,\n    LineTabulation,\n    LowLine,\n    PlusSign,\n    PropertyData,\n    QuestionMark,\n    ReverseSolidus,\n    RightCurlyBracket,\n    RightParenthesis,\n    RightSquareBracket,\n    Solidus,\n    VerticalLine,\n    ZeroWidthJoiner,\n    ZeroWidthNonJoiner,\n} from \"./unicode\"\n\nfunction isSyntaxCharacter(cp: number): boolean {\n    return (\n        cp === CircumflexAccent ||\n        cp === DollarSign ||\n        cp === ReverseSolidus ||\n        cp === FullStop ||\n        cp === Asterisk ||\n        cp === PlusSign ||\n        cp === QuestionMark ||\n        cp === LeftParenthesis ||\n        cp === RightParenthesis ||\n        cp === LeftSquareBracket ||\n        cp === RightSquareBracket ||\n        cp === LeftCurlyBracket ||\n        cp === RightCurlyBracket ||\n        cp === VerticalLine\n    )\n}\n\nfunction isRegExpIdentifierStart(cp: number): boolean {\n    return isIdStart(cp) || cp === DollarSign || cp === LowLine\n}\n\nfunction isRegExpIdentifierPart(cp: number): boolean {\n    return (\n        isIdContinue(cp) ||\n        cp === DollarSign ||\n        cp === LowLine ||\n        cp === ZeroWidthNonJoiner ||\n        cp === ZeroWidthJoiner\n    )\n}\n\nfunction isUnicodePropertyNameCharacter(cp: number): boolean {\n    return isLatinLetter(cp) || cp === LowLine\n}\n\nfunction isUnicodePropertyValueCharacter(cp: number): boolean {\n    return isUnicodePropertyNameCharacter(cp) || isDecimalDigit(cp)\n}\n\nfunction isValidUnicodeProperty(name: string, value: string): boolean {\n    //eslint-disable-next-line no-prototype-builtins\n    return PropertyData.hasOwnProperty(name) && PropertyData[name].has(value)\n}\n\nfunction isValidUnicodePropertyName(name: string): boolean {\n    return PropertyData.$LONE.has(name)\n}\n\nexport namespace RegExpValidator {\n    /**\n     * The options for RegExpValidator construction.\n     */\n    export interface Options {\n        /**\n         * The flag to disable Annex B syntax. Default is `false`.\n         */\n        strict?: boolean\n\n        /**\n         * ECMAScript version. Default is `2018`.\n         * - `2015` added `u` and `y` flags.\n         * - `2018` added `s` flag, Named Capturing Group, Lookbehind Assertion,\n         *   and Unicode Property Escape.\n         */\n        ecmaVersion?: 5 | 2015 | 2016 | 2017 | 2018\n\n        /**\n         * A function that is called when the validator entered a RegExp literal.\n         * @param start The 0-based index of the first character.\n         */\n        onLiteralEnter?(start: number): void\n\n        /**\n         * A function that is called when the validator left a RegExp literal.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         */\n        onLiteralLeave?(start: number, end: number): void\n\n        /**\n         * A function that is called when the validator found flags.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param global `g` flag.\n         * @param ignoreCase `i` flag.\n         * @param multiline `m` flag.\n         * @param unicode `u` flag.\n         * @param sticky `y` flag.\n         * @param dotAll `s` flag.\n         */\n        onFlags?(\n            start: number,\n            end: number,\n            global: boolean,\n            ignoreCase: boolean,\n            multiline: boolean,\n            unicode: boolean,\n            sticky: boolean,\n            dotAll: boolean,\n        ): void\n\n        /**\n         * A function that is called when the validator entered a pattern.\n         * @param start The 0-based index of the first character.\n         */\n        onPatternEnter?(start: number): void\n\n        /**\n         * A function that is called when the validator left a pattern.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         */\n        onPatternLeave?(start: number, end: number): void\n\n        /**\n         * A function that is called when the validator entered a disjunction.\n         * @param start The 0-based index of the first character.\n         */\n        onDisjunctionEnter?(start: number): void\n\n        /**\n         * A function that is called when the validator left a disjunction.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         */\n        onDisjunctionLeave?(start: number, end: number): void\n\n        /**\n         * A function that is called when the validator entered an alternative.\n         * @param start The 0-based index of the first character.\n         * @param index The 0-based index of alternatives in a disjunction.\n         */\n        onAlternativeEnter?(start: number, index: number): void\n\n        /**\n         * A function that is called when the validator left an alternative.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param index The 0-based index of alternatives in a disjunction.\n         */\n        onAlternativeLeave?(start: number, end: number, index: number): void\n\n        /**\n         * A function that is called when the validator entered an uncapturing group.\n         * @param start The 0-based index of the first character.\n         */\n        onGroupEnter?(start: number): void\n\n        /**\n         * A function that is called when the validator left an uncapturing group.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         */\n        onGroupLeave?(start: number, end: number): void\n\n        /**\n         * A function that is called when the validator entered a capturing group.\n         * @param start The 0-based index of the first character.\n         * @param name The group name.\n         */\n        onCapturingGroupEnter?(start: number, name: string | null): void\n\n        /**\n         * A function that is called when the validator left a capturing group.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param name The group name.\n         */\n        onCapturingGroupLeave?(\n            start: number,\n            end: number,\n            name: string | null,\n        ): void\n\n        /**\n         * A function that is called when the validator found a quantifier.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param min The minimum number of repeating.\n         * @param max The maximum number of repeating.\n         * @param greedy The flag to choose the longest matching.\n         */\n        onQuantifier?(\n            start: number,\n            end: number,\n            min: number,\n            max: number,\n            greedy: boolean,\n        ): void\n\n        /**\n         * A function that is called when the validator entered a lookahead/lookbehind assertion.\n         * @param start The 0-based index of the first character.\n         * @param kind The kind of the assertion.\n         * @param negate The flag which represents that the assertion is negative.\n         */\n        onLookaroundAssertionEnter?(\n            start: number,\n            kind: \"lookahead\" | \"lookbehind\",\n            negate: boolean,\n        ): void\n\n        /**\n         * A function that is called when the validator left a lookahead/lookbehind assertion.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param kind The kind of the assertion.\n         * @param negate The flag which represents that the assertion is negative.\n         */\n        onLookaroundAssertionLeave?(\n            start: number,\n            end: number,\n            kind: \"lookahead\" | \"lookbehind\",\n            negate: boolean,\n        ): void\n\n        /**\n         * A function that is called when the validator found an edge boundary assertion.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param kind The kind of the assertion.\n         */\n        onEdgeAssertion?(\n            start: number,\n            end: number,\n            kind: \"start\" | \"end\",\n        ): void\n\n        /**\n         * A function that is called when the validator found a word boundary assertion.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param kind The kind of the assertion.\n         * @param negate The flag which represents that the assertion is negative.\n         */\n        onWordBoundaryAssertion?(\n            start: number,\n            end: number,\n            kind: \"word\",\n            negate: boolean,\n        ): void\n\n        /**\n         * A function that is called when the validator found a dot.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param kind The kind of the character set.\n         */\n        onAnyCharacterSet?(start: number, end: number, kind: \"any\"): void\n\n        /**\n         * A function that is called when the validator found a character set escape.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param kind The kind of the character set.\n         * @param negate The flag which represents that the character set is negative.\n         */\n        onEscapeCharacterSet?(\n            start: number,\n            end: number,\n            kind: \"digit\" | \"space\" | \"word\",\n            negate: boolean,\n        ): void\n\n        /**\n         * A function that is called when the validator found a Unicode proerty escape.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param kind The kind of the character set.\n         * @param key The property name.\n         * @param value The property value.\n         * @param negate The flag which represents that the character set is negative.\n         */\n        onUnicodePropertyCharacterSet?(\n            start: number,\n            end: number,\n            kind: \"property\",\n            key: string,\n            value: string | null,\n            negate: boolean,\n        ): void\n\n        /**\n         * A function that is called when the validator found a character.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param value The code point of the character.\n         */\n        onCharacter?(start: number, end: number, value: number): void\n\n        /**\n         * A function that is called when the validator found a backreference.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param ref The key of the referred capturing group.\n         */\n        onBackreference?(start: number, end: number, ref: number | string): void\n\n        /**\n         * A function that is called when the validator entered a character class.\n         * @param start The 0-based index of the first character.\n         * @param negate The flag which represents that the character class is negative.\n         */\n        onCharacterClassEnter?(start: number, negate: boolean): void\n\n        /**\n         * A function that is called when the validator left a character class.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param negate The flag which represents that the character class is negative.\n         */\n        onCharacterClassLeave?(\n            start: number,\n            end: number,\n            negate: boolean,\n        ): void\n\n        /**\n         * A function that is called when the validator found a character class range.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param min The minimum code point of the range.\n         * @param max The maximum code point of the range.\n         */\n        onCharacterClassRange?(\n            start: number,\n            end: number,\n            min: number,\n            max: number,\n        ): void\n    }\n}\n\n/**\n * The regular expression validator.\n */\nexport class RegExpValidator {\n    private readonly _options: RegExpValidator.Options\n    private readonly _reader = new Reader()\n    private _uFlag = false\n    private _nFlag = false\n    private _lastIntValue = 0\n    private _lastMinValue = 0\n    private _lastMaxValue = 0\n    private _lastStrValue = \"\"\n    private _lastKeyValue = \"\"\n    private _lastValValue = \"\"\n    private _lastAssertionIsQuantifiable = false\n    private _numCapturingParens = 0\n    private _groupNames = new Set<string>()\n    private _backreferenceNames = new Set<string>()\n\n    /**\n     * Initialize this validator.\n     * @param options The options of validator.\n     */\n    public constructor(options?: RegExpValidator.Options) {\n        this._options = options || {}\n    }\n\n    /**\n     * Validate a regular expression literal. E.g. \"/abc/g\"\n     * @param source The source code to validate.\n     * @param start The start index in the source code.\n     * @param end The end index in the source code.\n     */\n    public validateLiteral(\n        source: string,\n        start = 0,\n        end: number = source.length,\n    ): void {\n        this._uFlag = this._nFlag = false\n        this.reset(source, start, end)\n\n        this.onLiteralEnter(start)\n        if (this.eat(Solidus) && this.eatRegExpBody() && this.eat(Solidus)) {\n            const flagStart = this.index\n            const uFlag = source.indexOf(\"u\", flagStart) !== -1\n            this.validateFlags(source, flagStart, end)\n            this.validatePattern(source, start + 1, flagStart - 1, uFlag)\n        } else if (start >= end) {\n            this.raise(\"Empty\")\n        } else {\n            const c = String.fromCodePoint(this.currentCodePoint)\n            this.raise(`Unexpected character '${c}'`)\n        }\n        this.onLiteralLeave(start, end)\n    }\n\n    /**\n     * Validate a regular expression flags. E.g. \"gim\"\n     * @param source The source code to validate.\n     * @param start The start index in the source code.\n     * @param end The end index in the source code.\n     */\n    public validateFlags(\n        source: string,\n        start = 0,\n        end: number = source.length,\n    ): void {\n        const existingFlags = new Set<number>()\n        let global = false\n        let ignoreCase = false\n        let multiline = false\n        let sticky = false\n        let unicode = false\n        let dotAll = false\n        for (let i = start; i < end; ++i) {\n            const flag = source.charCodeAt(i)\n\n            if (existingFlags.has(flag)) {\n                this.raise(`Duplicated flag '${source[i]}'`)\n            }\n            existingFlags.add(flag)\n\n            if (flag === LatinSmallLetterG) {\n                global = true\n            } else if (flag === LatinSmallLetterI) {\n                ignoreCase = true\n            } else if (flag === LatinSmallLetterM) {\n                multiline = true\n            } else if (flag === LatinSmallLetterU && this.ecmaVersion >= 2015) {\n                unicode = true\n            } else if (flag === LatinSmallLetterY && this.ecmaVersion >= 2015) {\n                sticky = true\n            } else if (flag === LatinSmallLetterS && this.ecmaVersion >= 2018) {\n                dotAll = true\n            } else {\n                this.raise(`Invalid flag '${source[i]}'`)\n            }\n        }\n        this.onFlags(\n            start,\n            end,\n            global,\n            ignoreCase,\n            multiline,\n            unicode,\n            sticky,\n            dotAll,\n        )\n    }\n\n    /**\n     * Validate a regular expression pattern. E.g. \"abc\"\n     * @param source The source code to validate.\n     * @param start The start index in the source code.\n     * @param end The end index in the source code.\n     * @param uFlag The flag to set unicode mode.\n     */\n    public validatePattern(\n        source: string,\n        start = 0,\n        end: number = source.length,\n        uFlag = false,\n    ): void {\n        this._uFlag = uFlag && this.ecmaVersion >= 2015\n        this._nFlag = uFlag && this.ecmaVersion >= 2018\n        this.reset(source, start, end)\n        this.pattern()\n\n        if (\n            !this._nFlag &&\n            this.ecmaVersion >= 2018 &&\n            this._groupNames.size > 0\n        ) {\n            this._nFlag = true\n            this.rewind(start)\n            this.pattern()\n        }\n    }\n\n    // #region Delegate for Options\n\n    private get strict() {\n        return Boolean(this._options.strict || this._uFlag)\n    }\n\n    private get ecmaVersion() {\n        return this._options.ecmaVersion || 2018\n    }\n\n    private onLiteralEnter(start: number): void {\n        if (this._options.onLiteralEnter) {\n            this._options.onLiteralEnter(start)\n        }\n    }\n\n    private onLiteralLeave(start: number, end: number): void {\n        if (this._options.onLiteralLeave) {\n            this._options.onLiteralLeave(start, end)\n        }\n    }\n\n    private onFlags(\n        start: number,\n        end: number,\n        global: boolean,\n        ignoreCase: boolean,\n        multiline: boolean,\n        unicode: boolean,\n        sticky: boolean,\n        dotAll: boolean,\n    ): void {\n        if (this._options.onFlags) {\n            this._options.onFlags(\n                start,\n                end,\n                global,\n                ignoreCase,\n                multiline,\n                unicode,\n                sticky,\n                dotAll,\n            )\n        }\n    }\n\n    private onPatternEnter(start: number): void {\n        if (this._options.onPatternEnter) {\n            this._options.onPatternEnter(start)\n        }\n    }\n\n    private onPatternLeave(start: number, end: number): void {\n        if (this._options.onPatternLeave) {\n            this._options.onPatternLeave(start, end)\n        }\n    }\n\n    private onDisjunctionEnter(start: number): void {\n        if (this._options.onDisjunctionEnter) {\n            this._options.onDisjunctionEnter(start)\n        }\n    }\n\n    private onDisjunctionLeave(start: number, end: number): void {\n        if (this._options.onDisjunctionLeave) {\n            this._options.onDisjunctionLeave(start, end)\n        }\n    }\n\n    private onAlternativeEnter(start: number, index: number): void {\n        if (this._options.onAlternativeEnter) {\n            this._options.onAlternativeEnter(start, index)\n        }\n    }\n\n    private onAlternativeLeave(\n        start: number,\n        end: number,\n        index: number,\n    ): void {\n        if (this._options.onAlternativeLeave) {\n            this._options.onAlternativeLeave(start, end, index)\n        }\n    }\n\n    private onGroupEnter(start: number): void {\n        if (this._options.onGroupEnter) {\n            this._options.onGroupEnter(start)\n        }\n    }\n\n    private onGroupLeave(start: number, end: number): void {\n        if (this._options.onGroupLeave) {\n            this._options.onGroupLeave(start, end)\n        }\n    }\n\n    private onCapturingGroupEnter(start: number, name: string | null): void {\n        if (this._options.onCapturingGroupEnter) {\n            this._options.onCapturingGroupEnter(start, name)\n        }\n    }\n\n    private onCapturingGroupLeave(\n        start: number,\n        end: number,\n        name: string | null,\n    ): void {\n        if (this._options.onCapturingGroupLeave) {\n            this._options.onCapturingGroupLeave(start, end, name)\n        }\n    }\n\n    private onQuantifier(\n        start: number,\n        end: number,\n        min: number,\n        max: number,\n        greedy: boolean,\n    ): void {\n        if (this._options.onQuantifier) {\n            this._options.onQuantifier(start, end, min, max, greedy)\n        }\n    }\n\n    private onLookaroundAssertionEnter(\n        start: number,\n        kind: \"lookahead\" | \"lookbehind\",\n        negate: boolean,\n    ): void {\n        if (this._options.onLookaroundAssertionEnter) {\n            this._options.onLookaroundAssertionEnter(start, kind, negate)\n        }\n    }\n\n    private onLookaroundAssertionLeave(\n        start: number,\n        end: number,\n        kind: \"lookahead\" | \"lookbehind\",\n        negate: boolean,\n    ): void {\n        if (this._options.onLookaroundAssertionLeave) {\n            this._options.onLookaroundAssertionLeave(start, end, kind, negate)\n        }\n    }\n\n    private onEdgeAssertion(\n        start: number,\n        end: number,\n        kind: \"start\" | \"end\",\n    ): void {\n        if (this._options.onEdgeAssertion) {\n            this._options.onEdgeAssertion(start, end, kind)\n        }\n    }\n\n    private onWordBoundaryAssertion(\n        start: number,\n        end: number,\n        kind: \"word\",\n        negate: boolean,\n    ): void {\n        if (this._options.onWordBoundaryAssertion) {\n            this._options.onWordBoundaryAssertion(start, end, kind, negate)\n        }\n    }\n\n    private onAnyCharacterSet(start: number, end: number, kind: \"any\"): void {\n        if (this._options.onAnyCharacterSet) {\n            this._options.onAnyCharacterSet(start, end, kind)\n        }\n    }\n\n    private onEscapeCharacterSet(\n        start: number,\n        end: number,\n        kind: \"digit\" | \"space\" | \"word\",\n        negate: boolean,\n    ): void {\n        if (this._options.onEscapeCharacterSet) {\n            this._options.onEscapeCharacterSet(start, end, kind, negate)\n        }\n    }\n\n    private onUnicodePropertyCharacterSet(\n        start: number,\n        end: number,\n        kind: \"property\",\n        key: string,\n        value: string | null,\n        negate: boolean,\n    ): void {\n        if (this._options.onUnicodePropertyCharacterSet) {\n            this._options.onUnicodePropertyCharacterSet(\n                start,\n                end,\n                kind,\n                key,\n                value,\n                negate,\n            )\n        }\n    }\n\n    private onCharacter(start: number, end: number, value: number): void {\n        if (this._options.onCharacter) {\n            this._options.onCharacter(start, end, value)\n        }\n    }\n\n    private onBackreference(\n        start: number,\n        end: number,\n        ref: number | string,\n    ): void {\n        if (this._options.onBackreference) {\n            this._options.onBackreference(start, end, ref)\n        }\n    }\n\n    private onCharacterClassEnter(start: number, negate: boolean): void {\n        if (this._options.onCharacterClassEnter) {\n            this._options.onCharacterClassEnter(start, negate)\n        }\n    }\n\n    private onCharacterClassLeave(\n        start: number,\n        end: number,\n        negate: boolean,\n    ): void {\n        if (this._options.onCharacterClassLeave) {\n            this._options.onCharacterClassLeave(start, end, negate)\n        }\n    }\n\n    private onCharacterClassRange(\n        start: number,\n        end: number,\n        min: number,\n        max: number,\n    ): void {\n        if (this._options.onCharacterClassRange) {\n            this._options.onCharacterClassRange(start, end, min, max)\n        }\n    }\n\n    // #endregion\n\n    // #region Delegate for Reader\n\n    private get source(): string {\n        return this._reader.source\n    }\n\n    private get index(): number {\n        return this._reader.index\n    }\n\n    private get currentCodePoint(): number {\n        return this._reader.currentCodePoint\n    }\n\n    private get nextCodePoint(): number {\n        return this._reader.nextCodePoint\n    }\n\n    private get nextCodePoint2(): number {\n        return this._reader.nextCodePoint2\n    }\n\n    private get nextCodePoint3(): number {\n        return this._reader.nextCodePoint3\n    }\n\n    private reset(source: string, start: number, end: number): void {\n        this._reader.reset(source, start, end, this._uFlag)\n    }\n\n    private rewind(index: number): void {\n        this._reader.rewind(index)\n    }\n\n    private advance(): void {\n        this._reader.advance()\n    }\n\n    private eat(cp: number): boolean {\n        return this._reader.eat(cp)\n    }\n\n    private eat2(cp1: number, cp2: number): boolean {\n        return this._reader.eat2(cp1, cp2)\n    }\n\n    private eat3(cp1: number, cp2: number, cp3: number): boolean {\n        return this._reader.eat3(cp1, cp2, cp3)\n    }\n\n    // #endregion\n\n    private raise(message: string): never {\n        throw new RegExpSyntaxError(\n            this.source,\n            this._uFlag,\n            this.index,\n            message,\n        )\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-RegularExpressionBody\n    private eatRegExpBody(): boolean {\n        const start = this.index\n        let inClass = false\n        let escaped = false\n\n        for (;;) {\n            const cp = this.currentCodePoint\n            if (cp === -1 || isLineTerminator(cp)) {\n                const kind = inClass ? \"character class\" : \"regular expression\"\n                this.raise(`Unterminated ${kind}`)\n            }\n            if (escaped) {\n                escaped = false\n            } else if (cp === ReverseSolidus) {\n                escaped = true\n            } else if (cp === LeftSquareBracket) {\n                inClass = true\n            } else if (cp === RightSquareBracket) {\n                inClass = false\n            } else if (\n                (cp === Solidus && !inClass) ||\n                (cp === Asterisk && this.index === start)\n            ) {\n                break\n            }\n            this.advance()\n        }\n\n        return this.index !== start\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\n    private pattern(): void {\n        const start = this.index\n        this._numCapturingParens = this.countCapturingParens()\n        this._groupNames.clear()\n        this._backreferenceNames.clear()\n\n        this.onPatternEnter(start)\n        this.disjunction()\n\n        const cp = this.currentCodePoint\n        if (this.currentCodePoint !== -1) {\n            if (cp === RightParenthesis) {\n                this.raise(\"Unmatched ')'\")\n            }\n            if (cp === ReverseSolidus) {\n                this.raise(\"\\\\ at end of pattern\")\n            }\n            if (cp === RightSquareBracket || cp === RightCurlyBracket) {\n                this.raise(\"Lone quantifier brackets\")\n            }\n            const c = String.fromCodePoint(cp)\n            this.raise(`Unexpected character '${c}'`)\n        }\n        for (const name of this._backreferenceNames) {\n            if (!this._groupNames.has(name)) {\n                this.raise(\"Invalid named capture referenced\")\n            }\n        }\n        this.onPatternLeave(start, this.index)\n    }\n\n    private countCapturingParens(): number {\n        const start = this.index\n        let inClass = false\n        let escaped = false\n        let count = 0\n        let cp = 0\n\n        while ((cp = this.currentCodePoint) !== -1) {\n            if (escaped) {\n                escaped = false\n            } else if (cp === ReverseSolidus) {\n                escaped = true\n            } else if (cp === LeftSquareBracket) {\n                inClass = true\n            } else if (cp === RightSquareBracket) {\n                inClass = false\n            } else if (\n                cp === LeftParenthesis &&\n                !inClass &&\n                (this.nextCodePoint !== QuestionMark ||\n                    (this.nextCodePoint2 === LessThanSign &&\n                        this.nextCodePoint3 !== EqualsSign &&\n                        this.nextCodePoint3 !== ExclamationMark))\n            ) {\n                count += 1\n            }\n            this.advance()\n        }\n\n        this.rewind(start)\n        return count\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\n    private disjunction(): void {\n        const start = this.index\n        let i = 0\n\n        this.onDisjunctionEnter(start)\n        this.alternative(i++)\n        while (this.eat(VerticalLine)) {\n            this.alternative(i++)\n        }\n\n        if (this.eatQuantifier(true)) {\n            this.raise(\"Nothing to repeat\")\n        }\n        if (this.eat(LeftCurlyBracket)) {\n            this.raise(\"Lone quantifier brackets\")\n        }\n        this.onDisjunctionLeave(start, this.index)\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\n    private alternative(i: number): void {\n        const start = this.index\n\n        this.onAlternativeEnter(start, i)\n        while (this.currentCodePoint !== -1 && this.eatTerm()) {\n            // do nothing.\n        }\n        this.onAlternativeLeave(start, this.index, i)\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-Term\n    private eatTerm(): boolean {\n        if (this.eatAssertion()) {\n            // Handle `QuantifiableAssertion Quantifier` alternative.\n            // `this.lastAssertionIsQuantifiable` is true if the last eaten\n            // Assertion is a QuantifiableAssertion.\n            if (this._lastAssertionIsQuantifiable) {\n                this.eatQuantifier()\n            }\n            return true\n        }\n\n        if (this.strict ? this.eatAtom() : this.eatExtendedAtom()) {\n            this.eatQuantifier()\n            return true\n        }\n\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-Assertion\n    private eatAssertion(): boolean {\n        const start = this.index\n        this._lastAssertionIsQuantifiable = false\n\n        // ^, $, \\B \\b\n        if (this.eat(CircumflexAccent)) {\n            this.onEdgeAssertion(start, this.index, \"start\")\n            return true\n        }\n        if (this.eat(DollarSign)) {\n            this.onEdgeAssertion(start, this.index, \"end\")\n            return true\n        }\n        if (this.eat2(ReverseSolidus, LatinCapitalLetterB)) {\n            this.onWordBoundaryAssertion(start, this.index, \"word\", true)\n            return true\n        }\n        if (this.eat2(ReverseSolidus, LatinSmallLetterB)) {\n            this.onWordBoundaryAssertion(start, this.index, \"word\", false)\n            return true\n        }\n\n        // Lookahead / Lookbehind\n        if (this.eat2(LeftParenthesis, QuestionMark)) {\n            const lookbehind =\n                this.ecmaVersion >= 2018 && this.eat(LessThanSign)\n            let negate = false\n            if (this.eat(EqualsSign) || (negate = this.eat(ExclamationMark))) {\n                const kind = lookbehind ? \"lookbehind\" : \"lookahead\"\n                this.onLookaroundAssertionEnter(start, kind, negate)\n                this.disjunction()\n                if (!this.eat(RightParenthesis)) {\n                    this.raise(\"Unterminated group\")\n                }\n                this._lastAssertionIsQuantifiable = !lookbehind && !this.strict\n                this.onLookaroundAssertionLeave(start, this.index, kind, negate)\n                return true\n            }\n            this.rewind(start)\n        }\n\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\n    private eatQuantifier(noError = false): boolean {\n        const start = this.index\n        let min = 0\n        let max = 0\n        let greedy = false\n\n        if (this.eat(Asterisk)) {\n            min = 0\n            max = Number.POSITIVE_INFINITY\n        } else if (this.eat(PlusSign)) {\n            min = 1\n            max = Number.POSITIVE_INFINITY\n        } else if (this.eat(QuestionMark)) {\n            min = 0\n            max = 1\n        } else if (this.eatBracedQuantifier(noError)) {\n            min = this._lastMinValue\n            max = this._lastMaxValue\n        } else {\n            return false\n        }\n        greedy = !this.eat(QuestionMark)\n\n        if (!noError) {\n            this.onQuantifier(start, this.index, min, max, greedy)\n        }\n        return true\n    }\n\n    private eatBracedQuantifier(noError: boolean): boolean {\n        const start = this.index\n        if (this.eat(LeftCurlyBracket)) {\n            this._lastMinValue = 0\n            this._lastMaxValue = Number.POSITIVE_INFINITY\n            if (this.eatDecimalDigits()) {\n                this._lastMinValue = this._lastMaxValue = this._lastIntValue\n                if (this.eat(Comma)) {\n                    this._lastMaxValue = this.eatDecimalDigits()\n                        ? this._lastIntValue\n                        : Number.POSITIVE_INFINITY\n                }\n                if (this.eat(RightCurlyBracket)) {\n                    if (!noError && this._lastMaxValue < this._lastMinValue) {\n                        this.raise(\"numbers out of order in {} quantifier\")\n                    }\n                    return true\n                }\n            }\n            if (!noError && this.strict) {\n                this.raise(\"Incomplete quantifier\")\n            }\n            this.rewind(start)\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\n    private eatAtom(): boolean {\n        return (\n            this.eatPatternCharacter() ||\n            this.eatDot() ||\n            this.eatReverseSolidusAtomEscape() ||\n            this.eatCharacterClass() ||\n            this.eatUncapturingGroup() ||\n            this.eatCapturingGroup()\n        )\n    }\n\n    private eatDot(): boolean {\n        if (this.eat(FullStop)) {\n            this.onAnyCharacterSet(this.index - 1, this.index, \"any\")\n            return true\n        }\n        return false\n    }\n\n    private eatReverseSolidusAtomEscape(): boolean {\n        const start = this.index\n        if (this.eat(ReverseSolidus)) {\n            if (this.eatAtomEscape()) {\n                return true\n            }\n            this.rewind(start)\n        }\n        return false\n    }\n\n    private eatUncapturingGroup(): boolean {\n        const start = this.index\n        if (this.eat3(LeftParenthesis, QuestionMark, Colon)) {\n            this.onGroupEnter(start)\n            this.disjunction()\n            if (!this.eat(RightParenthesis)) {\n                this.raise(\"Unterminated group\")\n            }\n            this.onGroupLeave(start, this.index)\n            return true\n        }\n        return false\n    }\n\n    private eatCapturingGroup(): boolean {\n        const start = this.index\n        if (this.eat(LeftParenthesis)) {\n            this._lastStrValue = \"\"\n            if (this.ecmaVersion >= 2018) {\n                this.groupSpecifier()\n            } else if (this.currentCodePoint === QuestionMark) {\n                this.raise(\"Invalid group\")\n            }\n            const name = this._lastStrValue || null\n\n            this.onCapturingGroupEnter(start, name)\n            this.disjunction()\n            if (!this.eat(RightParenthesis)) {\n                this.raise(\"Unterminated group\")\n            }\n            this.onCapturingGroupLeave(start, this.index, name)\n\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-ExtendedAtom\n    private eatExtendedAtom(): boolean {\n        return (\n            this.eatDot() ||\n            this.eatReverseSolidusAtomEscape() ||\n            this.eatReverseSolidusFollowedByC() ||\n            this.eatCharacterClass() ||\n            this.eatUncapturingGroup() ||\n            this.eatCapturingGroup() ||\n            this.eatInvalidBracedQuantifier() ||\n            this.eatExtendedPatternCharacter()\n        )\n    }\n\n    // \\ [lookahead = c]\n    private eatReverseSolidusFollowedByC(): boolean {\n        if (\n            this.currentCodePoint === ReverseSolidus &&\n            this.nextCodePoint === LatinSmallLetterC\n        ) {\n            this._lastIntValue = this.currentCodePoint\n            this.advance()\n            this.onCharacter(this.index - 1, this.index, ReverseSolidus)\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-InvalidBracedQuantifier\n    private eatInvalidBracedQuantifier(): boolean {\n        if (this.eatBracedQuantifier(true)) {\n            this.raise(\"Nothing to repeat\")\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\n    private eatSyntaxCharacter(): boolean {\n        if (isSyntaxCharacter(this.currentCodePoint)) {\n            this._lastIntValue = this.currentCodePoint\n            this.advance()\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n    private eatPatternCharacter(): boolean {\n        const start = this.index\n        const cp = this.currentCodePoint\n        if (cp !== -1 && !isSyntaxCharacter(cp)) {\n            this.advance()\n            this.onCharacter(start, this.index, cp)\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-ExtendedPatternCharacter\n    private eatExtendedPatternCharacter(): boolean {\n        const start = this.index\n        const cp = this.currentCodePoint\n        if (\n            cp !== -1 &&\n            cp !== CircumflexAccent &&\n            cp !== DollarSign &&\n            cp !== ReverseSolidus &&\n            cp !== FullStop &&\n            cp !== Asterisk &&\n            cp !== PlusSign &&\n            cp !== QuestionMark &&\n            cp !== LeftParenthesis &&\n            cp !== RightParenthesis &&\n            cp !== LeftSquareBracket &&\n            cp !== VerticalLine\n        ) {\n            this.advance()\n            this.onCharacter(start, this.index, cp)\n            return true\n        }\n        return false\n    }\n\n    // GroupSpecifier[U] ::\n    //   [empty]\n    //   `?` GroupName[?U]\n    private groupSpecifier(): void {\n        this._lastStrValue = \"\"\n        if (this.eat(QuestionMark)) {\n            if (this.eatGroupName()) {\n                if (!this._groupNames.has(this._lastStrValue)) {\n                    this._groupNames.add(this._lastStrValue)\n                    return\n                }\n                this.raise(\"Duplicate capture group name\")\n            }\n            this.raise(\"Invalid group\")\n        }\n    }\n\n    // GroupName[U] ::\n    //   `<` RegExpIdentifierName[?U] `>`\n    private eatGroupName(): boolean {\n        this._lastStrValue = \"\"\n        if (this.eat(LessThanSign)) {\n            if (this.eatRegExpIdentifierName() && this.eat(GreaterThanSign)) {\n                return true\n            }\n            this.raise(\"Invalid capture group name\")\n        }\n        return false\n    }\n\n    // RegExpIdentifierName[U] ::\n    //   RegExpIdentifierStart[?U]\n    //   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]\n    private eatRegExpIdentifierName(): boolean {\n        this._lastStrValue = \"\"\n        if (this.eatRegExpIdentifierStart()) {\n            this._lastStrValue += String.fromCodePoint(this._lastIntValue)\n            while (this.eatRegExpIdentifierPart()) {\n                this._lastStrValue += String.fromCodePoint(this._lastIntValue)\n            }\n            return true\n        }\n        return false\n    }\n\n    // RegExpIdentifierStart[U] ::\n    //   UnicodeIDStart\n    //   `$`\n    //   `_`\n    //   `\\` RegExpUnicodeEscapeSequence[?U]\n    private eatRegExpIdentifierStart(): boolean {\n        const start = this.index\n        let cp = this.currentCodePoint\n        this.advance()\n\n        if (cp === ReverseSolidus && this.eatRegExpUnicodeEscapeSequence()) {\n            cp = this._lastIntValue\n        }\n        if (isRegExpIdentifierStart(cp)) {\n            this._lastIntValue = cp\n            return true\n        }\n\n        if (this.index !== start) {\n            this.rewind(start)\n        }\n        return false\n    }\n\n    // RegExpIdentifierPart[U] ::\n    //   UnicodeIDContinue\n    //   `$`\n    //   `_`\n    //   `\\` RegExpUnicodeEscapeSequence[?U]\n    //   <Zwnj>\n    //   <Zwj>\n    private eatRegExpIdentifierPart(): boolean {\n        const start = this.index\n        let cp = this.currentCodePoint\n        this.advance()\n\n        if (cp === ReverseSolidus && this.eatRegExpUnicodeEscapeSequence()) {\n            cp = this._lastIntValue\n        }\n        if (isRegExpIdentifierPart(cp)) {\n            this._lastIntValue = cp\n            return true\n        }\n\n        if (this.index !== start) {\n            this.rewind(start)\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-AtomEscape\n    private eatAtomEscape(): boolean {\n        if (\n            this.eatBackreference() ||\n            this.eatCharacterClassEscape() ||\n            this.eatCharacterEscape() ||\n            (this._nFlag && this.eatKGroupName())\n        ) {\n            return true\n        }\n        if (this.strict || this._uFlag) {\n            this.raise(\"Invalid escape\")\n        }\n        return false\n    }\n\n    private eatBackreference(): boolean {\n        const start = this.index\n        if (this.eatDecimalEscape()) {\n            const n = this._lastIntValue\n            if (n <= this._numCapturingParens) {\n                this.onBackreference(start - 1, this.index, n)\n                return true\n            }\n            if (this.strict) {\n                this.raise(\"Invalid escape\")\n            }\n            this.rewind(start)\n        }\n        return false\n    }\n\n    private eatKGroupName(): boolean {\n        const start = this.index\n        if (this.eat(LatinSmallLetterK)) {\n            if (this.eatGroupName()) {\n                const groupName = this._lastStrValue\n                this._backreferenceNames.add(groupName)\n                this.onBackreference(start - 1, this.index, groupName)\n                return true\n            }\n            this.raise(\"Invalid named reference\")\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-CharacterEscape\n    private eatCharacterEscape(): boolean {\n        const start = this.index\n        if (\n            this.eatControlEscape() ||\n            this.eatCControlLetter() ||\n            this.eatZero() ||\n            this.eatHexEscapeSequence() ||\n            this.eatRegExpUnicodeEscapeSequence() ||\n            (!this.strict && this.eatLegacyOctalEscapeSequence()) ||\n            this.eatIdentityEscape()\n        ) {\n            this.onCharacter(start - 1, this.index, this._lastIntValue)\n            return true\n        }\n        return false\n    }\n\n    private eatCControlLetter(): boolean {\n        const start = this.index\n        if (this.eat(LatinSmallLetterC)) {\n            if (this.eatControlLetter()) {\n                return true\n            }\n            this.rewind(start)\n        }\n        return false\n    }\n\n    private eatZero(): boolean {\n        if (\n            this.currentCodePoint === DigitZero &&\n            !isDecimalDigit(this.nextCodePoint)\n        ) {\n            this._lastIntValue = 0\n            this.advance()\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\n    private eatControlEscape(): boolean {\n        if (this.eat(LatinSmallLetterT)) {\n            this._lastIntValue = CharacterTabulation\n            return true\n        }\n        if (this.eat(LatinSmallLetterN)) {\n            this._lastIntValue = LineFeed\n            return true\n        }\n        if (this.eat(LatinSmallLetterV)) {\n            this._lastIntValue = LineTabulation\n            return true\n        }\n        if (this.eat(LatinSmallLetterF)) {\n            this._lastIntValue = FormFeed\n            return true\n        }\n        if (this.eat(LatinSmallLetterR)) {\n            this._lastIntValue = CarriageReturn\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\n    private eatControlLetter(): boolean {\n        const cp = this.currentCodePoint\n        if (isLatinLetter(cp)) {\n            this.advance()\n            this._lastIntValue = cp % 0x20\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\n    //eslint-disable-next-line complexity\n    private eatRegExpUnicodeEscapeSequence(): boolean {\n        const start = this.index\n\n        if (this.eat(LatinSmallLetterU)) {\n            if (this.eatFixedHexDigits(4)) {\n                const lead = this._lastIntValue\n                if (this._uFlag && lead >= 0xd800 && lead <= 0xdbff) {\n                    const leadSurrogateEnd = this.index\n                    if (\n                        this.eat(ReverseSolidus) &&\n                        this.eat(LatinSmallLetterU) &&\n                        this.eatFixedHexDigits(4)\n                    ) {\n                        const trail = this._lastIntValue\n                        if (trail >= 0xdc00 && trail <= 0xdfff) {\n                            this._lastIntValue =\n                                (lead - 0xd800) * 0x400 +\n                                (trail - 0xdc00) +\n                                0x10000\n                            return true\n                        }\n                    }\n                    this.rewind(leadSurrogateEnd)\n                    this._lastIntValue = lead\n                }\n                return true\n            }\n            if (\n                this._uFlag &&\n                this.eat(LeftCurlyBracket) &&\n                this.eatHexDigits() &&\n                this.eat(RightCurlyBracket) &&\n                isValidUnicode(this._lastIntValue)\n            ) {\n                return true\n            }\n            if (this.strict || this._uFlag) {\n                this.raise(\"Invalid unicode escape\")\n            }\n            this.rewind(start)\n        }\n\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-IdentityEscape\n    private eatIdentityEscape(): boolean {\n        if (this._uFlag) {\n            if (this.eatSyntaxCharacter()) {\n                return true\n            }\n            if (this.eat(Solidus)) {\n                this._lastIntValue = Solidus\n                return true\n            }\n            return false\n        }\n\n        if (this.isValidIdentityEscape(this.currentCodePoint)) {\n            this._lastIntValue = this.currentCodePoint\n            this.advance()\n            return true\n        }\n\n        return false\n    }\n    private isValidIdentityEscape(cp: number): boolean {\n        if (cp === -1) {\n            return false\n        }\n        if (this.strict) {\n            return !isIdContinue(cp)\n        }\n        return (\n            cp !== LatinSmallLetterC &&\n            (!this._nFlag || cp !== LatinSmallLetterK)\n        )\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\n    private eatDecimalEscape(): boolean {\n        this._lastIntValue = 0\n        let cp = this.currentCodePoint\n        if (cp >= DigitOne && cp <= DigitNine) {\n            do {\n                this._lastIntValue = 10 * this._lastIntValue + (cp - DigitZero)\n                this.advance()\n            } while (\n                (cp = this.currentCodePoint) >= DigitZero &&\n                cp <= DigitNine\n            )\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\n    private eatCharacterClassEscape(): boolean {\n        const start = this.index\n\n        if (this.eat(LatinSmallLetterD)) {\n            this._lastIntValue = -1\n            this.onEscapeCharacterSet(start - 1, this.index, \"digit\", false)\n            return true\n        }\n        if (this.eat(LatinCapitalLetterD)) {\n            this._lastIntValue = -1\n            this.onEscapeCharacterSet(start - 1, this.index, \"digit\", true)\n            return true\n        }\n        if (this.eat(LatinSmallLetterS)) {\n            this._lastIntValue = -1\n            this.onEscapeCharacterSet(start - 1, this.index, \"space\", false)\n            return true\n        }\n        if (this.eat(LatinCapitalLetterS)) {\n            this._lastIntValue = -1\n            this.onEscapeCharacterSet(start - 1, this.index, \"space\", true)\n            return true\n        }\n        if (this.eat(LatinSmallLetterW)) {\n            this._lastIntValue = -1\n            this.onEscapeCharacterSet(start - 1, this.index, \"word\", false)\n            return true\n        }\n        if (this.eat(LatinCapitalLetterW)) {\n            this._lastIntValue = -1\n            this.onEscapeCharacterSet(start - 1, this.index, \"word\", true)\n            return true\n        }\n\n        let negate = false\n        if (\n            this._uFlag &&\n            this.ecmaVersion >= 2018 &&\n            (this.eat(LatinSmallLetterP) ||\n                (negate = this.eat(LatinCapitalLetterP)))\n        ) {\n            this._lastIntValue = -1\n            if (\n                this.eat(LeftCurlyBracket) &&\n                this.eatUnicodePropertyValueExpression() &&\n                this.eat(RightCurlyBracket)\n            ) {\n                this.onUnicodePropertyCharacterSet(\n                    start - 1,\n                    this.index,\n                    \"property\",\n                    this._lastKeyValue,\n                    this._lastValValue || null,\n                    negate,\n                )\n                return true\n            }\n            this.raise(\"Invalid property name\")\n        }\n\n        return false\n    }\n\n    // UnicodePropertyValueExpression ::\n    //   UnicodePropertyName `=` UnicodePropertyValue\n    //   LoneUnicodePropertyNameOrValue\n    private eatUnicodePropertyValueExpression(): boolean {\n        const start = this.index\n\n        // UnicodePropertyName `=` UnicodePropertyValue\n        if (this.eatUnicodePropertyName() && this.eat(EqualsSign)) {\n            this._lastKeyValue = this._lastStrValue\n            if (this.eatUnicodePropertyValue()) {\n                this._lastValValue = this._lastStrValue\n                if (\n                    isValidUnicodeProperty(\n                        this._lastKeyValue,\n                        this._lastValValue,\n                    )\n                ) {\n                    return true\n                }\n                this.raise(\"Invalid property name\")\n            }\n        }\n        this.rewind(start)\n\n        // LoneUnicodePropertyNameOrValue\n        if (this.eatLoneUnicodePropertyNameOrValue()) {\n            const nameOrValue = this._lastStrValue\n            if (isValidUnicodeProperty(\"General_Category\", nameOrValue)) {\n                this._lastKeyValue = \"General_Category\"\n                this._lastValValue = nameOrValue\n                return true\n            }\n            if (isValidUnicodePropertyName(nameOrValue)) {\n                this._lastKeyValue = nameOrValue\n                this._lastValValue = \"\"\n                return true\n            }\n            this.raise(\"Invalid property name\")\n        }\n        return false\n    }\n\n    // UnicodePropertyName ::\n    //   UnicodePropertyNameCharacters\n    private eatUnicodePropertyName(): boolean {\n        this._lastStrValue = \"\"\n        while (isUnicodePropertyNameCharacter(this.currentCodePoint)) {\n            this._lastStrValue += String.fromCodePoint(this.currentCodePoint)\n            this.advance()\n        }\n        return this._lastStrValue !== \"\"\n    }\n\n    // UnicodePropertyValue ::\n    //   UnicodePropertyValueCharacters\n    private eatUnicodePropertyValue(): boolean {\n        this._lastStrValue = \"\"\n        while (isUnicodePropertyValueCharacter(this.currentCodePoint)) {\n            this._lastStrValue += String.fromCodePoint(this.currentCodePoint)\n            this.advance()\n        }\n        return this._lastStrValue !== \"\"\n    }\n\n    // LoneUnicodePropertyNameOrValue ::\n    //   UnicodePropertyValueCharacters\n    private eatLoneUnicodePropertyNameOrValue(): boolean {\n        return this.eatUnicodePropertyValue()\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\n    private eatCharacterClass(): boolean {\n        const start = this.index\n        if (this.eat(LeftSquareBracket)) {\n            const negate = this.eat(CircumflexAccent)\n            this.onCharacterClassEnter(start, negate)\n            this.classRanges()\n            if (!this.eat(RightSquareBracket)) {\n                this.raise(\"Unterminated character class\")\n            }\n            this.onCharacterClassLeave(start, this.index, negate)\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\n    private classRanges(): void {\n        let start = this.index\n        while (this.eatClassAtom()) {\n            const left = this._lastIntValue\n            const hyphenStart = this.index\n            if (this.eat(HyphenMinus)) {\n                this.onCharacter(hyphenStart, this.index, HyphenMinus)\n\n                if (this.eatClassAtom()) {\n                    const right = this._lastIntValue\n\n                    if (left === -1 || right === -1) {\n                        if (this.strict) {\n                            this.raise(\"Invalid character class\")\n                        }\n                    } else if (left > right) {\n                        this.raise(\"Range out of order in character class\")\n                    } else {\n                        this.onCharacterClassRange(\n                            start,\n                            this.index,\n                            left,\n                            right,\n                        )\n                    }\n                }\n            }\n\n            start = this.index\n        }\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\n    private eatClassAtom(): boolean {\n        const start = this.index\n\n        if (this.eat(ReverseSolidus)) {\n            if (this.eatClassEscape()) {\n                return true\n            }\n            if (this._uFlag) {\n                this.raise(\"Invalid escape\")\n            }\n            this.rewind(start)\n        }\n\n        const cp = this.currentCodePoint\n        if (cp !== -1 && cp !== RightSquareBracket) {\n            this.advance()\n            this._lastIntValue = cp\n            this.onCharacter(start, this.index, cp)\n            return true\n        }\n\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-ClassEscape\n    private eatClassEscape(): boolean {\n        const start = this.index\n\n        if (this.eat(LatinSmallLetterB)) {\n            this._lastIntValue = Backspace\n            this.onCharacter(start - 1, this.index, Backspace)\n            return true\n        }\n\n        if (this._uFlag && this.eat(HyphenMinus)) {\n            this._lastIntValue = HyphenMinus\n            this.onCharacter(start - 1, this.index, HyphenMinus)\n            return true\n        }\n\n        if (!this._uFlag && this.eat(LatinSmallLetterC)) {\n            if (this.eatClassControlLetter()) {\n                this.onCharacter(start - 1, this.index, this._lastIntValue)\n                return true\n            }\n            this.rewind(start)\n        }\n\n        return this.eatCharacterClassEscape() || this.eatCharacterEscape()\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-ClassControlLetter\n    private eatClassControlLetter(): boolean {\n        const cp = this.currentCodePoint\n        if (isDecimalDigit(cp) || cp === LowLine) {\n            this.advance()\n            this._lastIntValue = cp % 0x20\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n    private eatHexEscapeSequence(): boolean {\n        const start = this.index\n        if (this.eat(LatinSmallLetterX)) {\n            if (this.eatFixedHexDigits(2)) {\n                return true\n            }\n            if (this._uFlag) {\n                this.raise(\"Invalid escape\")\n            }\n            this.rewind(start)\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\n    private eatDecimalDigits(): boolean {\n        const start = this.index\n\n        this._lastIntValue = 0\n        while (isDecimalDigit(this.currentCodePoint)) {\n            this._lastIntValue =\n                10 * this._lastIntValue + digitToInt(this.currentCodePoint)\n            this.advance()\n        }\n\n        return this.index !== start\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\n    private eatHexDigits(): boolean {\n        const start = this.index\n        this._lastIntValue = 0\n        while (isHexDigit(this.currentCodePoint)) {\n            this._lastIntValue =\n                16 * this._lastIntValue + digitToInt(this.currentCodePoint)\n            this.advance()\n        }\n        return this.index !== start\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-LegacyOctalEscapeSequence\n    // Allows only 0-377(octal) i.e. 0-255(decimal).\n    private eatLegacyOctalEscapeSequence(): boolean {\n        if (this.eatOctalDigit()) {\n            const n1 = this._lastIntValue\n            if (this.eatOctalDigit()) {\n                const n2 = this._lastIntValue\n                if (n1 <= 3 && this.eatOctalDigit()) {\n                    this._lastIntValue = n1 * 64 + n2 * 8 + this._lastIntValue\n                } else {\n                    this._lastIntValue = n1 * 8 + n2\n                }\n            } else {\n                this._lastIntValue = n1\n            }\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\n    private eatOctalDigit(): boolean {\n        const cp = this.currentCodePoint\n        if (isOctalDigit(cp)) {\n            this.advance()\n            this._lastIntValue = cp - DigitZero\n            return true\n        }\n        this._lastIntValue = 0\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n    // And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n    private eatFixedHexDigits(length: number): boolean {\n        const start = this.index\n        this._lastIntValue = 0\n        for (let i = 0; i < length; ++i) {\n            const cp = this.currentCodePoint\n            if (!isHexDigit(cp)) {\n                this.rewind(start)\n                return false\n            }\n            this._lastIntValue = 16 * this._lastIntValue + digitToInt(cp)\n            this.advance()\n        }\n        return true\n    }\n}\n","import {\n    Alternative,\n    Backreference,\n    CapturingGroup,\n    CharacterClass,\n    CharacterClassElement,\n    CharacterClassRange,\n    Flags,\n    Group,\n    RegExpLiteral,\n    LookaroundAssertion,\n    Pattern,\n    Quantifier,\n} from \"./ast\"\nimport { HyphenMinus } from \"./unicode\"\nimport { RegExpValidator } from \"./validator\"\n\ntype AppendableNode =\n    | Pattern\n    | Alternative\n    | Group\n    | CapturingGroup\n    | CharacterClass\n    | LookaroundAssertion\n\nconst DummyPattern = {} as Pattern\nconst DummyFlags = {} as Flags\nconst DummyCapturingGroup = {} as CapturingGroup\n\nclass RegExpParserState {\n    public readonly strict: boolean\n    public readonly ecmaVersion: 5 | 2015 | 2016 | 2017 | 2018\n    private _node: AppendableNode = DummyPattern\n    private _flags: Flags = DummyFlags\n    private _backreferences: Backreference[] = []\n    private _capturingGroups: CapturingGroup[] = []\n\n    public source = \"\"\n\n    public constructor(options?: RegExpParser.Options) {\n        this.strict = Boolean(options && options.strict)\n        this.ecmaVersion = (options && options.ecmaVersion) || 2018\n    }\n\n    public get pattern(): Pattern {\n        if (this._node.type !== \"Pattern\") {\n            throw new Error(\"UnknownError\")\n        }\n        return this._node\n    }\n\n    public get flags(): Flags {\n        if (this._flags.type !== \"Flags\") {\n            throw new Error(\"UnknownError\")\n        }\n        return this._flags\n    }\n\n    public onFlags(\n        start: number,\n        end: number,\n        global: boolean,\n        ignoreCase: boolean,\n        multiline: boolean,\n        unicode: boolean,\n        sticky: boolean,\n        dotAll: boolean,\n    ): void {\n        this._flags = {\n            type: \"Flags\",\n            parent: null,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            global,\n            ignoreCase,\n            multiline,\n            unicode,\n            sticky,\n            dotAll,\n        }\n    }\n\n    public onPatternEnter(start: number): void {\n        this._node = {\n            type: \"Pattern\",\n            parent: null,\n            start,\n            end: start,\n            raw: \"\",\n            alternatives: [],\n        }\n        this._backreferences.length = 0\n        this._capturingGroups.length = 0\n    }\n\n    public onPatternLeave(start: number, end: number): void {\n        this._node.end = end\n        this._node.raw = this.source.slice(start, end)\n\n        for (const reference of this._backreferences) {\n            const ref = reference.ref\n            const group =\n                typeof ref === \"number\"\n                    ? this._capturingGroups[ref - 1]\n                    : this._capturingGroups.find(g => g.name === ref)!\n            reference.resolved = group\n            group.references.push(reference)\n        }\n    }\n\n    public onAlternativeEnter(start: number): void {\n        const parent = this._node\n        if (\n            parent.type !== \"Assertion\" &&\n            parent.type !== \"CapturingGroup\" &&\n            parent.type !== \"Group\" &&\n            parent.type !== \"Pattern\"\n        ) {\n            throw new Error(\"UnknownError\")\n        }\n\n        this._node = {\n            type: \"Alternative\",\n            parent,\n            start,\n            end: start,\n            raw: \"\",\n            elements: [],\n        }\n        parent.alternatives.push(this._node)\n    }\n\n    public onAlternativeLeave(start: number, end: number): void {\n        const node = this._node\n        if (node.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\")\n        }\n\n        node.end = end\n        node.raw = this.source.slice(start, end)\n        this._node = node.parent\n    }\n\n    public onGroupEnter(start: number): void {\n        const parent = this._node\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\")\n        }\n\n        this._node = {\n            type: \"Group\",\n            parent,\n            start,\n            end: start,\n            raw: \"\",\n            alternatives: [],\n        }\n        parent.elements.push(this._node)\n    }\n\n    public onGroupLeave(start: number, end: number): void {\n        const node = this._node\n        if (node.type !== \"Group\" || node.parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\")\n        }\n\n        node.end = end\n        node.raw = this.source.slice(start, end)\n        this._node = node.parent\n    }\n\n    public onCapturingGroupEnter(start: number, name: string | null): void {\n        const parent = this._node\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\")\n        }\n\n        this._node = {\n            type: \"CapturingGroup\",\n            parent,\n            start,\n            end: start,\n            raw: \"\",\n            name,\n            alternatives: [],\n            references: [],\n        }\n        parent.elements.push(this._node)\n        this._capturingGroups.push(this._node)\n    }\n\n    public onCapturingGroupLeave(start: number, end: number): void {\n        const node = this._node\n        if (\n            node.type !== \"CapturingGroup\" ||\n            node.parent.type !== \"Alternative\"\n        ) {\n            throw new Error(\"UnknownError\")\n        }\n\n        node.end = end\n        node.raw = this.source.slice(start, end)\n        this._node = node.parent\n    }\n\n    public onQuantifier(\n        start: number,\n        end: number,\n        min: number,\n        max: number,\n        greedy: boolean,\n    ): void {\n        const parent = this._node\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\")\n        }\n\n        // Replace the last element.\n        const element = parent.elements.pop()\n        if (\n            element == null ||\n            element.type === \"Quantifier\" ||\n            (element.type === \"Assertion\" && element.kind !== \"lookahead\")\n        ) {\n            throw new Error(\"UnknownError\")\n        }\n\n        const node: Quantifier = {\n            type: \"Quantifier\",\n            parent,\n            start: element.start,\n            end,\n            raw: this.source.slice(element.start, end),\n            min,\n            max,\n            greedy,\n            element,\n        }\n        parent.elements.push(node)\n        element.parent = node\n    }\n\n    public onLookaroundAssertionEnter(\n        start: number,\n        kind: \"lookahead\" | \"lookbehind\",\n        negate: boolean,\n    ): void {\n        const parent = this._node\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\")\n        }\n\n        this._node = {\n            type: \"Assertion\",\n            parent,\n            start,\n            end: start,\n            raw: \"\",\n            kind,\n            negate,\n            alternatives: [],\n        } as LookaroundAssertion\n        parent.elements.push(this._node)\n    }\n\n    public onLookaroundAssertionLeave(start: number, end: number): void {\n        const node = this._node\n        if (node.type !== \"Assertion\" || node.parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\")\n        }\n\n        node.end = end\n        node.raw = this.source.slice(start, end)\n        this._node = node.parent\n    }\n\n    public onEdgeAssertion(\n        start: number,\n        end: number,\n        kind: \"start\" | \"end\",\n    ): void {\n        const parent = this._node\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\")\n        }\n\n        parent.elements.push({\n            type: \"Assertion\",\n            parent,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            kind,\n        })\n    }\n\n    public onWordBoundaryAssertion(\n        start: number,\n        end: number,\n        kind: \"word\",\n        negate: boolean,\n    ): void {\n        const parent = this._node\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\")\n        }\n\n        parent.elements.push({\n            type: \"Assertion\",\n            parent,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            kind,\n            negate,\n        })\n    }\n\n    public onAnyCharacterSet(start: number, end: number, kind: \"any\"): void {\n        const parent = this._node\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\")\n        }\n\n        parent.elements.push({\n            type: \"CharacterSet\",\n            parent,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            kind,\n        })\n    }\n\n    public onEscapeCharacterSet(\n        start: number,\n        end: number,\n        kind: \"digit\" | \"space\" | \"word\",\n        negate: boolean,\n    ): void {\n        const parent = this._node\n        if (parent.type !== \"Alternative\" && parent.type !== \"CharacterClass\") {\n            throw new Error(\"UnknownError\")\n        }\n\n        ;(parent.elements as CharacterClassElement[]).push({\n            type: \"CharacterSet\",\n            parent,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            kind,\n            negate,\n        })\n    }\n\n    public onUnicodePropertyCharacterSet(\n        start: number,\n        end: number,\n        kind: \"property\",\n        key: string,\n        value: string | null,\n        negate: boolean,\n    ): void {\n        const parent = this._node\n        if (parent.type !== \"Alternative\" && parent.type !== \"CharacterClass\") {\n            throw new Error(\"UnknownError\")\n        }\n\n        ;(parent.elements as CharacterClassElement[]).push({\n            type: \"CharacterSet\",\n            parent,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            kind,\n            key,\n            value,\n            negate,\n        })\n    }\n\n    public onCharacter(start: number, end: number, value: number): void {\n        const parent = this._node\n        if (parent.type !== \"Alternative\" && parent.type !== \"CharacterClass\") {\n            throw new Error(\"UnknownError\")\n        }\n\n        ;(parent.elements as CharacterClassElement[]).push({\n            type: \"Character\",\n            parent,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            value,\n        })\n    }\n\n    public onBackreference(\n        start: number,\n        end: number,\n        ref: number | string,\n    ): void {\n        const parent = this._node\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\")\n        }\n\n        const node: Backreference = {\n            type: \"Backreference\",\n            parent,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            ref,\n            resolved: DummyCapturingGroup,\n        }\n        parent.elements.push(node)\n        this._backreferences.push(node)\n    }\n\n    public onCharacterClassEnter(start: number, negate: boolean): void {\n        const parent = this._node\n        if (parent.type !== \"Alternative\") {\n            throw new Error(\"UnknownError\")\n        }\n\n        this._node = {\n            type: \"CharacterClass\",\n            parent,\n            start,\n            end: start,\n            raw: \"\",\n            negate,\n            elements: [],\n        }\n        parent.elements.push(this._node)\n    }\n\n    public onCharacterClassLeave(start: number, end: number): void {\n        const node = this._node\n        if (\n            node.type !== \"CharacterClass\" ||\n            node.parent.type !== \"Alternative\"\n        ) {\n            throw new Error(\"UnknownError\")\n        }\n\n        node.end = end\n        node.raw = this.source.slice(start, end)\n        this._node = node.parent\n    }\n\n    public onCharacterClassRange(start: number, end: number): void {\n        const parent = this._node\n        if (parent.type !== \"CharacterClass\") {\n            throw new Error(\"UnknownError\")\n        }\n\n        // Replace the last three elements.\n        const elements = parent.elements\n        const max = elements.pop()\n        const hyphen = elements.pop()\n        const min = elements.pop()\n        if (\n            !min ||\n            !max ||\n            !hyphen ||\n            min.type !== \"Character\" ||\n            max.type !== \"Character\" ||\n            hyphen.type !== \"Character\" ||\n            hyphen.value !== HyphenMinus\n        ) {\n            throw new Error(\"UnknownError\")\n        }\n\n        const node: CharacterClassRange = {\n            type: \"CharacterClassRange\",\n            parent,\n            start,\n            end,\n            raw: this.source.slice(start, end),\n            min,\n            max,\n        }\n        min.parent = node\n        max.parent = node\n        elements.push(node)\n    }\n}\n\nexport namespace RegExpParser {\n    /**\n     * The options for RegExpParser construction.\n     */\n    export interface Options {\n        /**\n         * The flag to disable Annex B syntax. Default is `false`.\n         */\n        strict?: boolean\n\n        /**\n         * ECMAScript version. Default is `2018`.\n         * - `2015` added `u` and `y` flags.\n         * - `2018` added `s` flag, Named Capturing Group, Lookbehind Assertion,\n         *   and Unicode Property Escape.\n         */\n        ecmaVersion?: 5 | 2015 | 2016 | 2017 | 2018\n    }\n}\n\nexport class RegExpParser {\n    private _state: RegExpParserState\n    private _validator: RegExpValidator\n\n    /**\n     * Initialize this parser.\n     * @param options The options of parser.\n     */\n    public constructor(options?: RegExpParser.Options) {\n        this._state = new RegExpParserState(options)\n        this._validator = new RegExpValidator(this._state)\n    }\n\n    /**\n     * Parse a regular expression literal. E.g. \"/abc/g\"\n     * @param source The source code to parse.\n     * @param start The start index in the source code.\n     * @param end The end index in the source code.\n     * @returns The AST of the given regular expression.\n     */\n    public parseLiteral(\n        source: string,\n        start = 0,\n        end: number = source.length,\n    ): RegExpLiteral {\n        this._state.source = source\n        this._validator.validateLiteral(source, start, end)\n        const pattern = this._state.pattern\n        const flags = this._state.flags\n        const literal: RegExpLiteral = {\n            type: \"RegExpLiteral\",\n            parent: null,\n            start,\n            end,\n            raw: source,\n            pattern,\n            flags,\n        }\n        pattern.parent = literal\n        flags.parent = literal\n        return literal\n    }\n\n    /**\n     * Parse a regular expression flags. E.g. \"gim\"\n     * @param source The source code to parse.\n     * @param start The start index in the source code.\n     * @param end The end index in the source code.\n     * @returns The AST of the given flags.\n     */\n    public parseFlags(\n        source: string,\n        start = 0,\n        end: number = source.length,\n    ): Flags {\n        this._state.source = source\n        this._validator.validateFlags(source, start, end)\n        return this._state.flags\n    }\n\n    /**\n     * Parse a regular expression pattern. E.g. \"abc\"\n     * @param source The source code to parse.\n     * @param start The start index in the source code.\n     * @param end The end index in the source code.\n     * @param uFlag The flag to set unicode mode.\n     * @returns The AST of the given pattern.\n     */\n    public parsePattern(\n        source: string,\n        start = 0,\n        end: number = source.length,\n        uFlag = false,\n    ): Pattern {\n        this._state.source = source\n        this._validator.validatePattern(source, start, end, uFlag)\n        return this._state.pattern\n    }\n}\n","import {\n    Alternative,\n    Assertion,\n    Backreference,\n    CapturingGroup,\n    Character,\n    CharacterClass,\n    CharacterClassRange,\n    CharacterSet,\n    Flags,\n    Group,\n    Node,\n    Pattern,\n    Quantifier,\n    RegExpLiteral,\n} from \"./ast\"\n\n/**\n * The visitor to walk on AST.\n */\nexport class RegExpVisitor {\n    private readonly _handlers: RegExpVisitor.Handlers\n\n    /**\n     * Initialize this visitor.\n     * @param handlers Callbacks for each node.\n     */\n    public constructor(handlers: RegExpVisitor.Handlers) {\n        this._handlers = handlers\n    }\n\n    /**\n     * Visit a given node and descendant nodes.\n     * @param node The root node to visit tree.\n     */\n    public visit(node: Node): void {\n        switch (node.type) {\n            case \"Alternative\":\n                this.visitAlternative(node)\n                break\n            case \"Assertion\":\n                this.visitAssertion(node)\n                break\n            case \"Backreference\":\n                this.visitBackreference(node)\n                break\n            case \"CapturingGroup\":\n                this.visitCapturingGroup(node)\n                break\n            case \"Character\":\n                this.visitCharacter(node)\n                break\n            case \"CharacterClass\":\n                this.visitCharacterClass(node)\n                break\n            case \"CharacterClassRange\":\n                this.visitCharacterClassRange(node)\n                break\n            case \"CharacterSet\":\n                this.visitCharacterSet(node)\n                break\n            case \"Flags\":\n                this.visitFlags(node)\n                break\n            case \"Group\":\n                this.visitGroup(node)\n                break\n            case \"Pattern\":\n                this.visitPattern(node)\n                break\n            case \"Quantifier\":\n                this.visitQuantifier(node)\n                break\n            case \"RegExpLiteral\":\n                this.visitRegExpLiteral(node)\n                break\n            default:\n                throw new Error(`Unknown type: ${(node as any).type}`)\n        }\n    }\n\n    private visitAlternative(node: Alternative): void {\n        if (this._handlers.onAlternativeEnter) {\n            this._handlers.onAlternativeEnter(node)\n        }\n        node.elements.forEach(this.visit, this)\n        if (this._handlers.onAlternativeLeave) {\n            this._handlers.onAlternativeLeave(node)\n        }\n    }\n    private visitAssertion(node: Assertion): void {\n        if (this._handlers.onAssertionEnter) {\n            this._handlers.onAssertionEnter(node)\n        }\n        if (node.kind === \"lookahead\" || node.kind === \"lookbehind\") {\n            node.alternatives.forEach(this.visit, this)\n        }\n        if (this._handlers.onAssertionLeave) {\n            this._handlers.onAssertionLeave(node)\n        }\n    }\n    private visitBackreference(node: Backreference): void {\n        if (this._handlers.onBackreferenceEnter) {\n            this._handlers.onBackreferenceEnter(node)\n        }\n        if (this._handlers.onBackreferenceLeave) {\n            this._handlers.onBackreferenceLeave(node)\n        }\n    }\n    private visitCapturingGroup(node: CapturingGroup): void {\n        if (this._handlers.onCapturingGroupEnter) {\n            this._handlers.onCapturingGroupEnter(node)\n        }\n        node.alternatives.forEach(this.visit, this)\n        if (this._handlers.onCapturingGroupLeave) {\n            this._handlers.onCapturingGroupLeave(node)\n        }\n    }\n    private visitCharacter(node: Character): void {\n        if (this._handlers.onCharacterEnter) {\n            this._handlers.onCharacterEnter(node)\n        }\n        if (this._handlers.onCharacterLeave) {\n            this._handlers.onCharacterLeave(node)\n        }\n    }\n    private visitCharacterClass(node: CharacterClass): void {\n        if (this._handlers.onCharacterClassEnter) {\n            this._handlers.onCharacterClassEnter(node)\n        }\n        node.elements.forEach(this.visit, this)\n        if (this._handlers.onCharacterClassLeave) {\n            this._handlers.onCharacterClassLeave(node)\n        }\n    }\n    private visitCharacterClassRange(node: CharacterClassRange): void {\n        if (this._handlers.onCharacterClassRangeEnter) {\n            this._handlers.onCharacterClassRangeEnter(node)\n        }\n        this.visitCharacter(node.min)\n        this.visitCharacter(node.max)\n        if (this._handlers.onCharacterClassRangeLeave) {\n            this._handlers.onCharacterClassRangeLeave(node)\n        }\n    }\n    private visitCharacterSet(node: CharacterSet): void {\n        if (this._handlers.onCharacterSetEnter) {\n            this._handlers.onCharacterSetEnter(node)\n        }\n        if (this._handlers.onCharacterSetLeave) {\n            this._handlers.onCharacterSetLeave(node)\n        }\n    }\n    private visitFlags(node: Flags): void {\n        if (this._handlers.onFlagsEnter) {\n            this._handlers.onFlagsEnter(node)\n        }\n        if (this._handlers.onFlagsLeave) {\n            this._handlers.onFlagsLeave(node)\n        }\n    }\n    private visitGroup(node: Group): void {\n        if (this._handlers.onGroupEnter) {\n            this._handlers.onGroupEnter(node)\n        }\n        node.alternatives.forEach(this.visit, this)\n        if (this._handlers.onGroupLeave) {\n            this._handlers.onGroupLeave(node)\n        }\n    }\n    private visitPattern(node: Pattern): void {\n        if (this._handlers.onPatternEnter) {\n            this._handlers.onPatternEnter(node)\n        }\n        node.alternatives.forEach(this.visit, this)\n        if (this._handlers.onPatternLeave) {\n            this._handlers.onPatternLeave(node)\n        }\n    }\n    private visitQuantifier(node: Quantifier): void {\n        if (this._handlers.onQuantifierEnter) {\n            this._handlers.onQuantifierEnter(node)\n        }\n        this.visit(node.element)\n        if (this._handlers.onQuantifierLeave) {\n            this._handlers.onQuantifierLeave(node)\n        }\n    }\n    private visitRegExpLiteral(node: RegExpLiteral): void {\n        if (this._handlers.onRegExpLiteralEnter) {\n            this._handlers.onRegExpLiteralEnter(node)\n        }\n        this.visitPattern(node.pattern)\n        this.visitFlags(node.flags)\n        if (this._handlers.onRegExpLiteralLeave) {\n            this._handlers.onRegExpLiteralLeave(node)\n        }\n    }\n}\n\nexport namespace RegExpVisitor {\n    export interface Handlers {\n        onAlternativeEnter?(node: Alternative): void\n        onAlternativeLeave?(node: Alternative): void\n        onAssertionEnter?(node: Assertion): void\n        onAssertionLeave?(node: Assertion): void\n        onBackreferenceEnter?(node: Backreference): void\n        onBackreferenceLeave?(node: Backreference): void\n        onCapturingGroupEnter?(node: CapturingGroup): void\n        onCapturingGroupLeave?(node: CapturingGroup): void\n        onCharacterEnter?(node: Character): void\n        onCharacterLeave?(node: Character): void\n        onCharacterClassEnter?(node: CharacterClass): void\n        onCharacterClassLeave?(node: CharacterClass): void\n        onCharacterClassRangeEnter?(node: CharacterClassRange): void\n        onCharacterClassRangeLeave?(node: CharacterClassRange): void\n        onCharacterSetEnter?(node: CharacterSet): void\n        onCharacterSetLeave?(node: CharacterSet): void\n        onFlagsEnter?(node: Flags): void\n        onFlagsLeave?(node: Flags): void\n        onGroupEnter?(node: Group): void\n        onGroupLeave?(node: Group): void\n        onPatternEnter?(node: Pattern): void\n        onPatternLeave?(node: Pattern): void\n        onQuantifierEnter?(node: Quantifier): void\n        onQuantifierLeave?(node: Quantifier): void\n        onRegExpLiteralEnter?(node: RegExpLiteral): void\n        onRegExpLiteralLeave?(node: RegExpLiteral): void\n    }\n}\n","import * as AST from \"./ast\"\nimport { RegExpParser } from \"./parser\"\nimport { RegExpValidator } from \"./validator\"\nimport { RegExpVisitor } from \"./visitor\"\n\nexport { AST, RegExpParser, RegExpValidator }\n\n/**\n * Parse a given regular expression literal then make AST object.\n * @param source The source code to parse.\n * @param options The options to parse.\n * @returns The AST of the regular expression.\n */\nexport function parseRegExpLiteral(\n    source: string | RegExp,\n    options?: RegExpParser.Options,\n): AST.RegExpLiteral {\n    return new RegExpParser(options).parseLiteral(String(source))\n}\n\n/**\n * Validate a given regular expression literal.\n * @param source The source code to validate.\n * @param options The options to validate.\n */\nexport function validateRegExpLiteral(\n    source: string,\n    options?: RegExpValidator.Options,\n): void {\n    return new RegExpValidator(options).validateLiteral(source)\n}\n\nexport function visitRegExpAST(\n    node: AST.Node,\n    handlers: RegExpVisitor.Handlers,\n): void {\n    new RegExpVisitor(handlers).visit(node)\n}\n"]},"metadata":{},"sourceType":"module"}