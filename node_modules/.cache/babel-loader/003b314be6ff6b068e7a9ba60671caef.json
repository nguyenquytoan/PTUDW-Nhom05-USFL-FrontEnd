{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.mjs';\nimport { logger } from 'workbox-core/_private/logger.mjs';\nimport { Route } from './Route.mjs';\nimport './_version.mjs';\n/**\n * NavigationRoute makes it easy to create a [Route]{@link\n * workbox.routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * [`mode`]{@link https://fetch.spec.whatwg.org/#concept-request-mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `blacklist` and `whitelist` parameters.\n *\n * @memberof workbox.routing\n * @extends workbox.routing.Route\n */\n\nclass NavigationRoute extends Route {\n  /**\n   * If both `blacklist` and `whiltelist` are provided, the `blacklist` will\n   * take precedence and the request will not match this route.\n   *\n   * The regular expressions in `whitelist` and `blacklist`\n   * are matched against the concatenated\n   * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n   * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n   * portions of the requested URL.\n   *\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   * @param {Object} options\n   * @param {Array<RegExp>} [options.blacklist] If any of these patterns match,\n   * the route will not handle the request (even if a whitelist RegExp matches).\n   * @param {Array<RegExp>} [options.whitelist=[/./]] If any of these patterns\n   * match the URL's pathname and search parameter, the route will handle the\n   * request (assuming the blacklist doesn't match).\n   */\n  constructor(handler, {\n    whitelist = [/./],\n    blacklist = []\n  } = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isArrayOfClass(whitelist, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'NavigationRoute',\n        funcName: 'constructor',\n        paramName: 'options.whitelist'\n      });\n      assert.isArrayOfClass(blacklist, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'NavigationRoute',\n        funcName: 'constructor',\n        paramName: 'options.blacklist'\n      });\n    }\n\n    super(options => this._match(options), handler);\n    this._whitelist = whitelist;\n    this._blacklist = blacklist;\n  }\n  /**\n   * Routes match handler.\n   *\n   * @param {Object} options\n   * @param {URL} options.url\n   * @param {Request} options.request\n   * @return {boolean}\n   *\n   * @private\n   */\n\n\n  _match({\n    url,\n    request\n  }) {\n    if (request.mode !== 'navigate') {\n      return false;\n    }\n\n    const pathnameAndSearch = url.pathname + url.search;\n\n    for (const regExp of this._blacklist) {\n      if (regExp.test(pathnameAndSearch)) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.log(`The navigation route is not being used, since the ` + `URL matches this blacklist pattern: ${regExp}`);\n        }\n\n        return false;\n      }\n    }\n\n    if (this._whitelist.some(regExp => regExp.test(pathnameAndSearch))) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(`The navigation route is being used.`);\n      }\n\n      return true;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log(`The navigation route is not being used, since the URL ` + `being navigated to doesn't match the whitelist.`);\n    }\n\n    return false;\n  }\n\n}\n\nexport { NavigationRoute };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-routing/NavigationRoute.mjs"],"names":["assert","logger","Route","NavigationRoute","constructor","handler","whitelist","blacklist","process","env","NODE_ENV","isArrayOfClass","RegExp","moduleName","className","funcName","paramName","options","_match","_whitelist","_blacklist","url","request","mode","pathnameAndSearch","pathname","search","regExp","test","log","some","debug"],"mappings":"AAAA;;;;;;;AAQA,SAAQA,MAAR,QAAqB,kCAArB;AACA,SAAQC,MAAR,QAAqB,kCAArB;AACA,SAAQC,KAAR,QAAoB,aAApB;AACA,OAAO,gBAAP;AAEA;;;;;;;;;;;;;;;;AAeA,MAAMC,eAAN,SAA8BD,KAA9B,CAAoC;AAClC;;;;;;;;;;;;;;;;;;;AAmBAE,EAAAA,WAAW,CAACC,OAAD,EAAU;AAACC,IAAAA,SAAS,GAAG,CAAC,GAAD,CAAb;AAAoBC,IAAAA,SAAS,GAAG;AAAhC,MAAsC,EAAhD,EAAoD;AAC7D,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCV,MAAAA,MAAM,CAACW,cAAP,CAAsBL,SAAtB,EAAiCM,MAAjC,EAAyC;AACvCC,QAAAA,UAAU,EAAE,iBAD2B;AAEvCC,QAAAA,SAAS,EAAE,iBAF4B;AAGvCC,QAAAA,QAAQ,EAAE,aAH6B;AAIvCC,QAAAA,SAAS,EAAE;AAJ4B,OAAzC;AAMAhB,MAAAA,MAAM,CAACW,cAAP,CAAsBJ,SAAtB,EAAiCK,MAAjC,EAAyC;AACvCC,QAAAA,UAAU,EAAE,iBAD2B;AAEvCC,QAAAA,SAAS,EAAE,iBAF4B;AAGvCC,QAAAA,QAAQ,EAAE,aAH6B;AAIvCC,QAAAA,SAAS,EAAE;AAJ4B,OAAzC;AAMD;;AAED,UAAOC,OAAD,IAAa,KAAKC,MAAL,CAAYD,OAAZ,CAAnB,EAAyCZ,OAAzC;AAEA,SAAKc,UAAL,GAAkBb,SAAlB;AACA,SAAKc,UAAL,GAAkBb,SAAlB;AACD;AAED;;;;;;;;;;;;AAUAW,EAAAA,MAAM,CAAC;AAACG,IAAAA,GAAD;AAAMC,IAAAA;AAAN,GAAD,EAAiB;AACrB,QAAIA,OAAO,CAACC,IAAR,KAAiB,UAArB,EAAiC;AAC/B,aAAO,KAAP;AACD;;AAED,UAAMC,iBAAiB,GAAGH,GAAG,CAACI,QAAJ,GAAeJ,GAAG,CAACK,MAA7C;;AAEA,SAAK,MAAMC,MAAX,IAAqB,KAAKP,UAA1B,EAAsC;AACpC,UAAIO,MAAM,CAACC,IAAP,CAAYJ,iBAAZ,CAAJ,EAAoC;AAClC,YAAIhB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCT,UAAAA,MAAM,CAAC4B,GAAP,CAAY,oDAAD,GACN,uCAAsCF,MAAO,EADlD;AAED;;AACD,eAAO,KAAP;AACD;AACF;;AAED,QAAI,KAAKR,UAAL,CAAgBW,IAAhB,CAAsBH,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAYJ,iBAAZ,CAAjC,CAAJ,EAAsE;AACpE,UAAIhB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCT,QAAAA,MAAM,CAAC8B,KAAP,CAAc,qCAAd;AACD;;AACD,aAAO,IAAP;AACD;;AAED,QAAIvB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCT,MAAAA,MAAM,CAAC4B,GAAP,CAAY,wDAAD,GACN,iDADL;AAED;;AACD,WAAO,KAAP;AACD;;AAjFiC;;AAoFpC,SAAQ1B,eAAR","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {Route} from './Route.mjs';\nimport './_version.mjs';\n\n/**\n * NavigationRoute makes it easy to create a [Route]{@link\n * workbox.routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * [`mode`]{@link https://fetch.spec.whatwg.org/#concept-request-mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `blacklist` and `whitelist` parameters.\n *\n * @memberof workbox.routing\n * @extends workbox.routing.Route\n */\nclass NavigationRoute extends Route {\n  /**\n   * If both `blacklist` and `whiltelist` are provided, the `blacklist` will\n   * take precedence and the request will not match this route.\n   *\n   * The regular expressions in `whitelist` and `blacklist`\n   * are matched against the concatenated\n   * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n   * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n   * portions of the requested URL.\n   *\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   * @param {Object} options\n   * @param {Array<RegExp>} [options.blacklist] If any of these patterns match,\n   * the route will not handle the request (even if a whitelist RegExp matches).\n   * @param {Array<RegExp>} [options.whitelist=[/./]] If any of these patterns\n   * match the URL's pathname and search parameter, the route will handle the\n   * request (assuming the blacklist doesn't match).\n   */\n  constructor(handler, {whitelist = [/./], blacklist = []} = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isArrayOfClass(whitelist, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'NavigationRoute',\n        funcName: 'constructor',\n        paramName: 'options.whitelist',\n      });\n      assert.isArrayOfClass(blacklist, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'NavigationRoute',\n        funcName: 'constructor',\n        paramName: 'options.blacklist',\n      });\n    }\n\n    super((options) => this._match(options), handler);\n\n    this._whitelist = whitelist;\n    this._blacklist = blacklist;\n  }\n\n  /**\n   * Routes match handler.\n   *\n   * @param {Object} options\n   * @param {URL} options.url\n   * @param {Request} options.request\n   * @return {boolean}\n   *\n   * @private\n   */\n  _match({url, request}) {\n    if (request.mode !== 'navigate') {\n      return false;\n    }\n\n    const pathnameAndSearch = url.pathname + url.search;\n\n    for (const regExp of this._blacklist) {\n      if (regExp.test(pathnameAndSearch)) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.log(`The navigation route is not being used, since the ` +\n              `URL matches this blacklist pattern: ${regExp}`);\n        }\n        return false;\n      }\n    }\n\n    if (this._whitelist.some((regExp) => regExp.test(pathnameAndSearch))) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(`The navigation route is being used.`);\n      }\n      return true;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log(`The navigation route is not being used, since the URL ` +\n          `being navigated to doesn't match the whitelist.`);\n    }\n    return false;\n  }\n}\n\nexport {NavigationRoute};\n"]},"metadata":{},"sourceType":"module"}