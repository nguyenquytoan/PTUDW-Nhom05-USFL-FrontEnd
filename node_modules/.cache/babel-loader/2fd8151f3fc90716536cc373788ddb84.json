{"ast":null,"code":"#!/usr/bin/env node\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst minimist = require('minimist');\n\nconst pkg = require('../package.json');\n\nconst JSON5 = require('./');\n\nconst argv = minimist(process.argv.slice(2), {\n  alias: {\n    'convert': 'c',\n    'space': 's',\n    'validate': 'v',\n    'out-file': 'o',\n    'version': 'V',\n    'help': 'h'\n  },\n  boolean: ['convert', 'validate', 'version', 'help'],\n  string: ['space', 'out-file']\n});\n\nif (argv.version) {\n  version();\n} else if (argv.help) {\n  usage();\n} else {\n  const inFilename = argv._[0];\n  let readStream;\n\n  if (inFilename) {\n    readStream = fs.createReadStream(inFilename);\n  } else {\n    readStream = process.stdin;\n  }\n\n  let json5 = '';\n  readStream.on('data', data => {\n    json5 += data;\n  });\n  readStream.on('end', () => {\n    let space;\n\n    if (argv.space === 't' || argv.space === 'tab') {\n      space = '\\t';\n    } else {\n      space = Number(argv.space);\n    }\n\n    let value;\n\n    try {\n      value = JSON5.parse(json5);\n\n      if (!argv.validate) {\n        const json = JSON.stringify(value, null, space);\n        let writeStream; // --convert is for backward compatibility with v0.5.1. If\n        // specified with <file> and not --out-file, then a file with\n        // the same name but with a .json extension will be written.\n\n        if (argv.convert && inFilename && !argv.o) {\n          const parsedFilename = path.parse(inFilename);\n          const outFilename = path.format(Object.assign(parsedFilename, {\n            base: path.basename(parsedFilename.base, parsedFilename.ext) + '.json'\n          }));\n          writeStream = fs.createWriteStream(outFilename);\n        } else if (argv.o) {\n          writeStream = fs.createWriteStream(argv.o);\n        } else {\n          writeStream = process.stdout;\n        }\n\n        writeStream.write(json);\n      }\n    } catch (err) {\n      console.error(err.message);\n      process.exit(1);\n    }\n  });\n}\n\nfunction version() {\n  console.log(pkg.version);\n}\n\nfunction usage() {\n  console.log(`\n  Usage: json5 [options] <file>\n\n  If <file> is not provided, then STDIN is used.\n\n  Options:\n\n    -s, --space              The number of spaces to indent or 't' for tabs\n    -o, --out-file [file]    Output to the specified file, otherwise STDOUT\n    -v, --validate           Validate JSON5 but do not output JSON\n    -V, --version            Output the version number\n    -h, --help               Output usage information`);\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/json5/lib/cli.js"],"names":["fs","require","path","minimist","pkg","JSON5","argv","process","slice","alias","boolean","string","version","help","usage","inFilename","_","readStream","createReadStream","stdin","json5","on","data","space","Number","value","parse","validate","json","JSON","stringify","writeStream","convert","o","parsedFilename","outFilename","format","Object","assign","base","basename","ext","createWriteStream","stdout","write","err","console","error","message","exit","log"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nconst fs = require('fs')\nconst path = require('path')\nconst minimist = require('minimist')\nconst pkg = require('../package.json')\nconst JSON5 = require('./')\n\nconst argv = minimist(process.argv.slice(2), {\n    alias: {\n        'convert': 'c',\n        'space': 's',\n        'validate': 'v',\n        'out-file': 'o',\n        'version': 'V',\n        'help': 'h',\n    },\n    boolean: [\n        'convert',\n        'validate',\n        'version',\n        'help',\n    ],\n    string: [\n        'space',\n        'out-file',\n    ],\n})\n\nif (argv.version) {\n    version()\n} else if (argv.help) {\n    usage()\n} else {\n    const inFilename = argv._[0]\n\n    let readStream\n    if (inFilename) {\n        readStream = fs.createReadStream(inFilename)\n    } else {\n        readStream = process.stdin\n    }\n\n    let json5 = ''\n    readStream.on('data', data => {\n        json5 += data\n    })\n\n    readStream.on('end', () => {\n        let space\n        if (argv.space === 't' || argv.space === 'tab') {\n            space = '\\t'\n        } else {\n            space = Number(argv.space)\n        }\n\n        let value\n        try {\n            value = JSON5.parse(json5)\n            if (!argv.validate) {\n                const json = JSON.stringify(value, null, space)\n\n                let writeStream\n\n                // --convert is for backward compatibility with v0.5.1. If\n                // specified with <file> and not --out-file, then a file with\n                // the same name but with a .json extension will be written.\n                if (argv.convert && inFilename && !argv.o) {\n                    const parsedFilename = path.parse(inFilename)\n                    const outFilename = path.format(\n                        Object.assign(\n                            parsedFilename,\n                            {base: path.basename(parsedFilename.base, parsedFilename.ext) + '.json'}\n                        )\n                    )\n\n                    writeStream = fs.createWriteStream(outFilename)\n                } else if (argv.o) {\n                    writeStream = fs.createWriteStream(argv.o)\n                } else {\n                    writeStream = process.stdout\n                }\n\n                writeStream.write(json)\n            }\n        } catch (err) {\n            console.error(err.message)\n            process.exit(1)\n        }\n    })\n}\n\nfunction version () {\n    console.log(pkg.version)\n}\n\nfunction usage () {\n    console.log(\n        `\n  Usage: json5 [options] <file>\n\n  If <file> is not provided, then STDIN is used.\n\n  Options:\n\n    -s, --space              The number of spaces to indent or 't' for tabs\n    -o, --out-file [file]    Output to the specified file, otherwise STDOUT\n    -v, --validate           Validate JSON5 but do not output JSON\n    -V, --version            Output the version number\n    -h, --help               Output usage information`\n    )\n}\n"]},"metadata":{},"sourceType":"script"}