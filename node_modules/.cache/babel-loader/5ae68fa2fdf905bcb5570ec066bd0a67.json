{"ast":null,"code":"'use strict';\n\nconst req = require('import-cwd');\n/**\n * Plugin Loader\n *\n * @private\n * @method load\n *\n * @param  {String} plugin PostCSS Plugin Name\n * @param  {Object} options PostCSS Plugin Options\n *\n * @return {Function} PostCSS Plugin\n */\n\n\nconst load = (plugin, options, file) => {\n  try {\n    if (options === null || options === undefined || Object.keys(options).length === 0) {\n      return req(plugin);\n    } else {\n      return req(plugin)(options);\n    }\n  } catch (err) {\n    throw new Error(`Loading PostCSS Plugin failed: ${err.message}\\n\\n(@${file})`);\n  }\n};\n/**\n * Load Plugins\n *\n * @private\n * @method plugins\n *\n * @param {Object} config PostCSS Config Plugins\n *\n * @return {Array} plugins PostCSS Plugins\n */\n\n\nconst plugins = (config, file) => {\n  let plugins = [];\n\n  if (Array.isArray(config.plugins)) {\n    plugins = config.plugins.filter(Boolean);\n  } else {\n    plugins = Object.keys(config.plugins).filter(plugin => {\n      return config.plugins[plugin] !== false ? plugin : '';\n    }).map(plugin => {\n      return load(plugin, config.plugins[plugin], file);\n    });\n  }\n\n  if (plugins.length && plugins.length > 0) {\n    plugins.forEach((plugin, i) => {\n      if (plugin.postcss) {\n        plugin = plugin.postcss;\n      }\n\n      if (plugin.default) {\n        plugin = plugin.default;\n      }\n\n      if ( // eslint-disable-next-line\n      !(typeof plugin === 'object' && Array.isArray(plugin.plugins) || typeof plugin === 'function')) {\n        throw new TypeError(`Invalid PostCSS Plugin found at: plugins[${i}]\\n\\n(@${file})`);\n      }\n    });\n  }\n\n  return plugins;\n};\n\nmodule.exports = plugins;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-load-config/src/plugins.js"],"names":["req","require","load","plugin","options","file","undefined","Object","keys","length","err","Error","message","plugins","config","Array","isArray","filter","Boolean","map","forEach","i","postcss","default","TypeError","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAnB;AAEA;;;;;;;;;;;;;AAWA,MAAMC,IAAI,GAAG,CAACC,MAAD,EAASC,OAAT,EAAkBC,IAAlB,KAA2B;AACtC,MAAI;AACF,QACED,OAAO,KAAK,IAAZ,IACAA,OAAO,KAAKE,SADZ,IAEAC,MAAM,CAACC,IAAP,CAAYJ,OAAZ,EAAqBK,MAArB,KAAgC,CAHlC,EAIE;AACA,aAAOT,GAAG,CAACG,MAAD,CAAV;AACD,KAND,MAMO;AACL,aAAOH,GAAG,CAACG,MAAD,CAAH,CAAYC,OAAZ,CAAP;AACD;AACF,GAVD,CAUE,OAAOM,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAW,kCAAiCD,GAAG,CAACE,OAAQ,SAAQP,IAAK,GAArE,CAAN;AACD;AACF,CAdD;AAgBA;;;;;;;;;;;;AAUA,MAAMQ,OAAO,GAAG,CAACC,MAAD,EAAST,IAAT,KAAkB;AAChC,MAAIQ,OAAO,GAAG,EAAd;;AAEA,MAAIE,KAAK,CAACC,OAAN,CAAcF,MAAM,CAACD,OAArB,CAAJ,EAAmC;AACjCA,IAAAA,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeI,MAAf,CAAsBC,OAAtB,CAAV;AACD,GAFD,MAEO;AACLL,IAAAA,OAAO,GAAGN,MAAM,CAACC,IAAP,CAAYM,MAAM,CAACD,OAAnB,EACPI,MADO,CACCd,MAAD,IAAY;AAClB,aAAOW,MAAM,CAACD,OAAP,CAAeV,MAAf,MAA2B,KAA3B,GAAmCA,MAAnC,GAA4C,EAAnD;AACD,KAHO,EAIPgB,GAJO,CAIFhB,MAAD,IAAY;AACf,aAAOD,IAAI,CAACC,MAAD,EAASW,MAAM,CAACD,OAAP,CAAeV,MAAf,CAAT,EAAiCE,IAAjC,CAAX;AACD,KANO,CAAV;AAOD;;AAED,MAAIQ,OAAO,CAACJ,MAAR,IAAkBI,OAAO,CAACJ,MAAR,GAAiB,CAAvC,EAA0C;AACxCI,IAAAA,OAAO,CAACO,OAAR,CAAgB,CAACjB,MAAD,EAASkB,CAAT,KAAe;AAC7B,UAAIlB,MAAM,CAACmB,OAAX,EAAoB;AAClBnB,QAAAA,MAAM,GAAGA,MAAM,CAACmB,OAAhB;AACD;;AAED,UAAInB,MAAM,CAACoB,OAAX,EAAoB;AAClBpB,QAAAA,MAAM,GAAGA,MAAM,CAACoB,OAAhB;AACD;;AAED,WACE;AACA,QAAE,OAAOpB,MAAP,KAAkB,QAAlB,IAA8BY,KAAK,CAACC,OAAN,CAAcb,MAAM,CAACU,OAArB,CAA9B,IACF,OAAOV,MAAP,KAAkB,UADlB,CAFF,EAIE;AACA,cAAM,IAAIqB,SAAJ,CAAe,4CAA2CH,CAAE,UAAShB,IAAK,GAA1E,CAAN;AACD;AACF,KAhBD;AAiBD;;AAED,SAAOQ,OAAP;AACD,CApCD;;AAsCAY,MAAM,CAACC,OAAP,GAAiBb,OAAjB","sourcesContent":["'use strict'\n\nconst req = require('import-cwd')\n\n/**\n * Plugin Loader\n *\n * @private\n * @method load\n *\n * @param  {String} plugin PostCSS Plugin Name\n * @param  {Object} options PostCSS Plugin Options\n *\n * @return {Function} PostCSS Plugin\n */\nconst load = (plugin, options, file) => {\n  try {\n    if (\n      options === null ||\n      options === undefined ||\n      Object.keys(options).length === 0\n    ) {\n      return req(plugin)\n    } else {\n      return req(plugin)(options)\n    }\n  } catch (err) {\n    throw new Error(`Loading PostCSS Plugin failed: ${err.message}\\n\\n(@${file})`)\n  }\n}\n\n/**\n * Load Plugins\n *\n * @private\n * @method plugins\n *\n * @param {Object} config PostCSS Config Plugins\n *\n * @return {Array} plugins PostCSS Plugins\n */\nconst plugins = (config, file) => {\n  let plugins = []\n\n  if (Array.isArray(config.plugins)) {\n    plugins = config.plugins.filter(Boolean)\n  } else {\n    plugins = Object.keys(config.plugins)\n      .filter((plugin) => {\n        return config.plugins[plugin] !== false ? plugin : ''\n      })\n      .map((plugin) => {\n        return load(plugin, config.plugins[plugin], file)\n      })\n  }\n\n  if (plugins.length && plugins.length > 0) {\n    plugins.forEach((plugin, i) => {\n      if (plugin.postcss) {\n        plugin = plugin.postcss\n      }\n\n      if (plugin.default) {\n        plugin = plugin.default\n      }\n\n      if (\n        // eslint-disable-next-line\n        !(typeof plugin === 'object' && Array.isArray(plugin.plugins) ||\n        typeof plugin === 'function')\n      ) {\n        throw new TypeError(`Invalid PostCSS Plugin found at: plugins[${i}]\\n\\n(@${file})`)\n      }\n    })\n  }\n\n  return plugins\n}\n\nmodule.exports = plugins\n"]},"metadata":{},"sourceType":"script"}