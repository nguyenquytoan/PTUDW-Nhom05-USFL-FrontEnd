{"ast":null,"code":"import { noop, resolve as _resolve } from '../-internal';\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  import Promise from 'rsvp';\n\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  import Promise from 'rsvp';\n\n  let promise = RSVP.Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @for Promise\n  @static\n  @param {*} object value that the returned promise will be resolved with\n  @param {String} [label] optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\n\nexport default function resolve(object, label) {\n  /*jshint validthis:true */\n  let Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  let promise = new Constructor(noop, label);\n\n  _resolve(promise, object);\n\n  return promise;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/rsvp/lib/rsvp/promise/resolve.js"],"names":["noop","resolve","_resolve","object","label","Constructor","constructor","promise"],"mappings":"AAAA,SACEA,IADF,EAEEC,OAAO,IAAIC,QAFb,QAGO,cAHP;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,eAAe,SAASD,OAAT,CAAiBE,MAAjB,EAAyBC,KAAzB,EAAgC;AAC7C;AACA,MAAIC,WAAW,GAAG,IAAlB;;AAEA,MAAIF,MAAM,IAAI,OAAOA,MAAP,KAAkB,QAA5B,IAAwCA,MAAM,CAACG,WAAP,KAAuBD,WAAnE,EAAgF;AAC9E,WAAOF,MAAP;AACD;;AAED,MAAII,OAAO,GAAG,IAAIF,WAAJ,CAAgBL,IAAhB,EAAsBI,KAAtB,CAAd;;AACAF,EAAAA,QAAQ,CAACK,OAAD,EAAUJ,MAAV,CAAR;;AACA,SAAOI,OAAP;AACD","sourcesContent":["import {\n  noop,\n  resolve as _resolve\n} from '../-internal';\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  import Promise from 'rsvp';\n\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  import Promise from 'rsvp';\n\n  let promise = RSVP.Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @for Promise\n  @static\n  @param {*} object value that the returned promise will be resolved with\n  @param {String} [label] optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nexport default function resolve(object, label) {\n  /*jshint validthis:true */\n  let Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  let promise = new Constructor(noop, label);\n  _resolve(promise, object);\n  return promise;\n}\n"]},"metadata":{},"sourceType":"module"}