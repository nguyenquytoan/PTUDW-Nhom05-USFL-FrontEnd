{"ast":null,"code":"var assert = require('assert');\n\nvar WriteBuffer = require('../');\n\ndescribe('WriteBuffer', function () {\n  var w;\n  beforeEach(function () {\n    w = new WriteBuffer();\n  });\n\n  function join(arr) {\n    return arr.map(function (buf) {\n      return buf.toString('hex');\n    }).join('');\n  }\n\n  describe('.writeUInt8', function () {\n    it('should write bytes', function () {\n      w.writeUInt8(1);\n      w.writeUInt8(2);\n      w.writeUInt8(3);\n      w.writeUInt8(4);\n      assert.equal(join(w.render()), '01020304');\n    });\n    it('should correctly handle overflow', function () {\n      w.reserve(3);\n      w.writeUInt8(1);\n      w.writeUInt8(2);\n      w.writeUInt8(3);\n      w.writeUInt8(4);\n      assert.equal(join(w.render()), '01020304');\n    });\n  });\n  describe('.writeInt8', function () {\n    it('should write bytes', function () {\n      w.writeInt8(-1);\n      w.writeInt8(2);\n      assert.equal(join(w.render()), 'ff02');\n    });\n  });\n  describe('.writeUInt16BE', function () {\n    it('should write bytes', function () {\n      w.writeUInt16BE(0x0102);\n      w.writeUInt16BE(0x0304);\n      assert.equal(join(w.render()), '01020304');\n    });\n    it('should correctly handle overflow', function () {\n      w.reserve(2);\n      w.reserve(3);\n      w.writeUInt16BE(0x0102);\n      w.writeUInt16BE(0x0304);\n      w.writeUInt16BE(0x0506);\n      assert.equal(join(w.render()), '010203040506');\n    });\n  });\n  describe('.writeInt16BE', function () {\n    it('should write bytes', function () {\n      w.writeInt16BE(-0x0102);\n      w.writeInt16BE(0x0304);\n      assert.equal(join(w.render()), 'fefe0304');\n    });\n  });\n  describe('.writeUInt16LE', function () {\n    it('should write bytes', function () {\n      w.writeUInt16LE(0x0102);\n      w.writeUInt16LE(0x0304);\n      assert.equal(join(w.render()), '02010403');\n    });\n    it('should correctly handle overflow', function () {\n      w.reserve(2);\n      w.reserve(3);\n      w.writeUInt16LE(0x0102);\n      w.writeUInt16LE(0x0304);\n      w.writeUInt16LE(0x0506);\n      assert.equal(join(w.render()), '020104030605');\n    });\n  });\n  describe('.writeInt16LE', function () {\n    it('should write bytes', function () {\n      w.writeInt16LE(-0x0201);\n      w.writeInt16LE(0x0304);\n      assert.equal(join(w.render()), 'fffd0403');\n    });\n  });\n  describe('.writeUInt24BE', function () {\n    it('should write bytes', function () {\n      w.writeUInt24BE(0x010203);\n      w.writeUInt24BE(0x040506);\n      assert.equal(join(w.render()), '010203040506');\n    });\n    it('should correctly set avail on boundary', function () {\n      w = new WriteBuffer();\n      w.reserveRate = 4;\n      w.writeUInt16BE(1);\n      w.writeUInt24BE(1);\n      assert.equal(w.avail, 3);\n    });\n  });\n  describe('.writeInt24BE', function () {\n    it('should write bytes', function () {\n      w.writeInt24BE(-0x010203);\n      w.writeInt24BE(0x040506);\n      assert.equal(join(w.render()), 'fefdfd040506');\n    });\n  });\n  describe('.writeUInt24LE', function () {\n    it('should write bytes', function () {\n      w.writeUInt24LE(0x010203);\n      w.writeUInt24LE(0x040506);\n      assert.equal(join(w.render()), '030201060504');\n    });\n  });\n  describe('.writeInt24LE', function () {\n    it('should write bytes', function () {\n      w.writeInt24LE(-0x010203);\n      w.writeInt24LE(0x040506);\n      assert.equal(join(w.render()), 'fdfdfe060504');\n    });\n  });\n  describe('.writeUInt32BE', function () {\n    it('should write bytes', function () {\n      w.writeUInt32BE(0x01020304);\n      w.writeUInt32BE(0x05060708);\n      assert.equal(join(w.render()), '0102030405060708');\n    });\n    it('should write bytes on the boundary', function () {\n      w.reserve(4);\n      w.writeUInt8(0x00);\n      w.writeUInt32BE(0x01020304);\n      assert.equal(join(w.render()), '0001020304');\n    });\n  });\n  describe('.writeInt32BE', function () {\n    it('should write bytes', function () {\n      w.writeInt32BE(-0x01020304);\n      w.writeInt32BE(0x05060708);\n      assert.equal(join(w.render()), 'fefdfcfc05060708');\n    });\n  });\n  describe('.writeUInt32LE', function () {\n    it('should write bytes', function () {\n      w.writeUInt32LE(0x01020304);\n      w.writeUInt32LE(0x05060708);\n      assert.equal(join(w.render()), '0403020108070605');\n    });\n    it('should write max uint32 value', function () {\n      w.writeUInt32LE(0xffffffff);\n      assert.equal(join(w.render()), 'ffffffff');\n    });\n  });\n  describe('.combWrite', function () {\n    it('should write bytes', function () {\n      w.writeComb(1, 'le', 0x01);\n      w.writeComb(1, 'be', 0x02);\n      w.writeComb(2, 'le', 0x0102);\n      w.writeComb(2, 'be', 0x0304);\n      w.writeComb(3, 'le', 0x010203);\n      w.writeComb(3, 'be', 0x040506);\n      w.writeComb(4, 'le', 0x01020304);\n      w.writeComb(4, 'be', 0x05060708);\n      assert.equal(join(w.render()), '0102020103040302010405060403020105060708');\n    });\n    it('should write max uint32 value', function () {\n      w.writeUInt32LE(0xffffffff);\n      assert.equal(join(w.render()), 'ffffffff');\n    });\n  });\n  describe('.writeInt32LE', function () {\n    it('should write bytes', function () {\n      w.writeInt32LE(-0x01020304);\n      w.writeInt32LE(0x05060708);\n      assert.equal(join(w.render()), 'fcfcfdfe08070605');\n    });\n  });\n  describe('.skip', function () {\n    it('should skip bytes', function () {\n      w.skip(4);\n      w.writeUInt32BE(0xdeadbeef);\n      assert(/^.{8}deadbeef$/.test(join(w.render())));\n    });\n    it('should skip 0 bytes', function () {\n      var skip = w.skip(0);\n      assert.equal(skip.size, 0);\n      w.writeUInt32BE(0xdeadbeef);\n      assert(/^deadbeef$/.test(join(w.render())));\n    });\n    it('should skip bytes on the boundary', function () {\n      w.reserve(4);\n      w.writeUInt8(0x01);\n      var skip = w.skip(4);\n      w.writeUInt32BE(0xdeadbeef);\n      skip.writeUInt32BE(0xabbabaab);\n      assert(/^01abbabaabdeadbeef$/.test(join(w.render())));\n    });\n    it('should skip bytes on the boundary in two chunks', function () {\n      w.reserve(4);\n      var skip1 = w.skip(2);\n      var skip2 = w.skip(2);\n      w.writeUInt32BE(0xdeadbeef);\n      skip1.writeUInt16BE(0xabba);\n      skip2.writeUInt16BE(0xbaba);\n      assert(/^abbababadeadbeef$/.test(join(w.render())));\n    });\n  });\n  describe('.slice', function () {\n    it('should return empty slice', function () {\n      w.writeUInt32BE(0xabbadead);\n      assert.equal(join(w.slice(4, 4).render()), '');\n      assert.equal(join(w.render()), 'abbadead');\n    });\n    it('should return full slice', function () {\n      w.writeUInt32BE(0xabbadead);\n      var slice = w.slice(0, 4);\n      slice.writeUInt32BE(0xdeadbeef);\n      assert.equal(join(slice.render()), 'deadbeef');\n      assert.equal(join(w.render()), 'deadbeef');\n    });\n    it('should return partial slice', function () {\n      w.writeUInt32BE(0xabbadead);\n      var slice = w.slice(0, 3);\n      slice.writeUInt24BE(0xdeadbe);\n      assert.equal(join(slice.render()), 'deadbe');\n      assert.equal(join(w.render()), 'deadbead');\n    });\n    it('should return over-the-boundary slice', function () {\n      for (var i = 0; i < 16; i++) {\n        w.reserve(3);\n        w.writeUInt24BE(i);\n      }\n\n      assert.equal(join(w.render()), '000000000001000002000003000004000005000006000007' + '00000800000900000a00000b00000c00000d00000e00000f');\n      var slice = w.slice(5, 12);\n      slice.writeUInt24BE(0xaaabac);\n      slice.writeUInt24BE(0xbabbbc);\n      slice.writeUInt8(0xcc);\n      assert.equal(join(slice.render()), 'aaabacbabbbccc');\n      assert.equal(join(w.render()), '0000000000aaabacbabbbccc000004000005000006000007' + '00000800000900000a00000b00000c00000d00000e00000f');\n    });\n  });\n  describe('.copyFrom', function () {\n    it('should copy bytes', function () {\n      var tmp = new Buffer(128);\n\n      for (var i = 0; i < tmp.length; i++) tmp[i] = i;\n\n      w.writeUInt32BE(0xdeadbeef);\n      w.copyFrom(tmp);\n      w.writeUInt32BE(0xabbadead);\n      assert.equal(join(w.render()), 'deadbeef000102030405060708090a0b0c0d0e0f101112131415161718191a1b' + '1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b' + '3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b' + '5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b' + '7c7d7e7fabbadead');\n    });\n    it('should copy bytes using offset', function () {\n      var tmp = new Buffer(128);\n\n      for (var i = 0; i < tmp.length; i++) tmp[i] = i;\n\n      w.writeUInt32BE(0xdeadbeef);\n      w.copyFrom(tmp, 10, 12);\n      w.writeUInt32BE(0xabbadead);\n      assert.equal(join(w.render()), 'deadbeef0a0babbadead');\n    });\n  });\n  describe('.write', function () {\n    it('should write utf8 string', function () {\n      w.writeUInt32BE(0xdeadbeef);\n      w.write('ohai\\u1023');\n      w.writeUInt32BE(0xabbadead);\n      assert.equal(join(w.render()), 'deadbeef' + '6f6861691023' + 'abbadead');\n    });\n    it('should copy bytes using offset', function () {\n      var tmp = new Buffer(128);\n\n      for (var i = 0; i < tmp.length; i++) tmp[i] = i;\n\n      w.writeUInt32BE(0xdeadbeef);\n      w.copyFrom(tmp, 10, 12);\n      w.writeUInt32BE(0xabbadead);\n      assert.equal(join(w.render()), 'deadbeef0a0babbadead');\n    });\n  });\n  describe('.skip', function () {\n    it('should copy bytes', function () {\n      w.reserve(5);\n      var h = w.skip(4);\n      w.writeUInt32BE(0xabbadead);\n      h.writeUInt32BE(0xdeadbeef);\n      assert.equal(join(w.render()), 'deadbeefabbadead');\n    });\n  });\n  describe('.forceReserve = true', function () {\n    it('should allocate more bytes', function () {\n      w.forceReserve = true;\n      w.reserve(4);\n      w.writeUInt32BE(0xabbadead);\n      w.writeUInt32BE(0xabbadead);\n      assert.equal(w.render().length, 1);\n    });\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/wbuf/test/wbuf-test.js"],"names":["assert","require","WriteBuffer","describe","w","beforeEach","join","arr","map","buf","toString","it","writeUInt8","equal","render","reserve","writeInt8","writeUInt16BE","writeInt16BE","writeUInt16LE","writeInt16LE","writeUInt24BE","reserveRate","avail","writeInt24BE","writeUInt24LE","writeInt24LE","writeUInt32BE","writeInt32BE","writeUInt32LE","writeComb","writeInt32LE","skip","test","size","skip1","skip2","slice","i","tmp","Buffer","length","copyFrom","write","h","forceReserve"],"mappings":"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","sourcesContent":["var assert = require('assert');\nvar WriteBuffer = require('../');\n\ndescribe('WriteBuffer', function() {\n  var w;\n  beforeEach(function() {\n    w = new WriteBuffer();\n  });\n\n  function join(arr) {\n    return arr.map(function(buf) {\n      return buf.toString('hex');\n    }).join('');\n  }\n\n  describe('.writeUInt8', function() {\n    it('should write bytes', function() {\n      w.writeUInt8(1);\n      w.writeUInt8(2);\n      w.writeUInt8(3);\n      w.writeUInt8(4);\n      assert.equal(join(w.render()), '01020304');\n    });\n\n    it('should correctly handle overflow', function() {\n      w.reserve(3);\n      w.writeUInt8(1);\n      w.writeUInt8(2);\n      w.writeUInt8(3);\n      w.writeUInt8(4);\n      assert.equal(join(w.render()), '01020304');\n    });\n  });\n\n  describe('.writeInt8', function() {\n    it('should write bytes', function() {\n      w.writeInt8(-1);\n      w.writeInt8(2);\n      assert.equal(join(w.render()), 'ff02');\n    });\n  });\n\n  describe('.writeUInt16BE', function() {\n    it('should write bytes', function() {\n      w.writeUInt16BE(0x0102);\n      w.writeUInt16BE(0x0304);\n      assert.equal(join(w.render()), '01020304');\n    });\n\n    it('should correctly handle overflow', function() {\n      w.reserve(2);\n      w.reserve(3);\n      w.writeUInt16BE(0x0102);\n      w.writeUInt16BE(0x0304);\n      w.writeUInt16BE(0x0506);\n      assert.equal(join(w.render()), '010203040506');\n    });\n  });\n\n  describe('.writeInt16BE', function() {\n    it('should write bytes', function() {\n      w.writeInt16BE(-0x0102);\n      w.writeInt16BE(0x0304);\n      assert.equal(join(w.render()), 'fefe0304');\n    });\n  });\n\n  describe('.writeUInt16LE', function() {\n    it('should write bytes', function() {\n      w.writeUInt16LE(0x0102);\n      w.writeUInt16LE(0x0304);\n      assert.equal(join(w.render()), '02010403');\n    });\n\n    it('should correctly handle overflow', function() {\n      w.reserve(2);\n      w.reserve(3);\n      w.writeUInt16LE(0x0102);\n      w.writeUInt16LE(0x0304);\n      w.writeUInt16LE(0x0506);\n      assert.equal(join(w.render()), '020104030605');\n    });\n  });\n\n  describe('.writeInt16LE', function() {\n    it('should write bytes', function() {\n      w.writeInt16LE(-0x0201);\n      w.writeInt16LE(0x0304);\n      assert.equal(join(w.render()), 'fffd0403');\n    });\n  });\n\n  describe('.writeUInt24BE', function() {\n    it('should write bytes', function() {\n      w.writeUInt24BE(0x010203);\n      w.writeUInt24BE(0x040506);\n      assert.equal(join(w.render()), '010203040506');\n    });\n\n    it('should correctly set avail on boundary', function() {\n      w = new WriteBuffer();\n      w.reserveRate = 4;\n      w.writeUInt16BE(1);\n      w.writeUInt24BE(1);\n      assert.equal(w.avail, 3);\n    });\n  });\n\n  describe('.writeInt24BE', function() {\n    it('should write bytes', function() {\n      w.writeInt24BE(-0x010203);\n      w.writeInt24BE(0x040506);\n      assert.equal(join(w.render()), 'fefdfd040506');\n    });\n  });\n\n  describe('.writeUInt24LE', function() {\n    it('should write bytes', function() {\n      w.writeUInt24LE(0x010203);\n      w.writeUInt24LE(0x040506);\n      assert.equal(join(w.render()), '030201060504');\n    });\n  });\n\n  describe('.writeInt24LE', function() {\n    it('should write bytes', function() {\n      w.writeInt24LE(-0x010203);\n      w.writeInt24LE(0x040506);\n      assert.equal(join(w.render()), 'fdfdfe060504');\n    });\n  });\n\n  describe('.writeUInt32BE', function() {\n    it('should write bytes', function() {\n      w.writeUInt32BE(0x01020304);\n      w.writeUInt32BE(0x05060708);\n      assert.equal(join(w.render()), '0102030405060708');\n    });\n\n    it('should write bytes on the boundary', function() {\n      w.reserve(4);\n      w.writeUInt8(0x00);\n      w.writeUInt32BE(0x01020304);\n      assert.equal(join(w.render()), '0001020304');\n    });\n  });\n\n  describe('.writeInt32BE', function() {\n    it('should write bytes', function() {\n      w.writeInt32BE(-0x01020304);\n      w.writeInt32BE(0x05060708);\n      assert.equal(join(w.render()), 'fefdfcfc05060708');\n    });\n  });\n\n  describe('.writeUInt32LE', function() {\n    it('should write bytes', function() {\n      w.writeUInt32LE(0x01020304);\n      w.writeUInt32LE(0x05060708);\n      assert.equal(join(w.render()), '0403020108070605');\n    });\n\n    it('should write max uint32 value', function() {\n      w.writeUInt32LE(0xffffffff);\n      assert.equal(join(w.render()), 'ffffffff');\n    });\n  });\n\n  describe('.combWrite', function() {\n    it('should write bytes', function() {\n      w.writeComb(1, 'le', 0x01);\n      w.writeComb(1, 'be', 0x02);\n      w.writeComb(2, 'le', 0x0102);\n      w.writeComb(2, 'be', 0x0304);\n      w.writeComb(3, 'le', 0x010203);\n      w.writeComb(3, 'be', 0x040506);\n      w.writeComb(4, 'le', 0x01020304);\n      w.writeComb(4, 'be', 0x05060708);\n      assert.equal(join(w.render()),\n                   '0102020103040302010405060403020105060708');\n    });\n\n    it('should write max uint32 value', function() {\n      w.writeUInt32LE(0xffffffff);\n      assert.equal(join(w.render()), 'ffffffff');\n    });\n  });\n\n  describe('.writeInt32LE', function() {\n    it('should write bytes', function() {\n      w.writeInt32LE(-0x01020304);\n      w.writeInt32LE(0x05060708);\n      assert.equal(join(w.render()), 'fcfcfdfe08070605');\n    });\n  });\n\n  describe('.skip', function() {\n    it('should skip bytes', function() {\n      w.skip(4);\n      w.writeUInt32BE(0xdeadbeef);\n      assert(/^.{8}deadbeef$/.test(join(w.render())));\n    });\n\n    it('should skip 0 bytes', function() {\n      var skip = w.skip(0);\n      assert.equal(skip.size, 0);\n      w.writeUInt32BE(0xdeadbeef);\n      assert(/^deadbeef$/.test(join(w.render())));\n    });\n\n    it('should skip bytes on the boundary', function() {\n      w.reserve(4);\n      w.writeUInt8(0x01);\n      var skip = w.skip(4);\n      w.writeUInt32BE(0xdeadbeef);\n      skip.writeUInt32BE(0xabbabaab);\n      assert(/^01abbabaabdeadbeef$/.test(join(w.render())));\n    });\n\n    it('should skip bytes on the boundary in two chunks', function() {\n      w.reserve(4);\n      var skip1 = w.skip(2);\n      var skip2 = w.skip(2);\n      w.writeUInt32BE(0xdeadbeef);\n      skip1.writeUInt16BE(0xabba);\n      skip2.writeUInt16BE(0xbaba);\n      assert(/^abbababadeadbeef$/.test(join(w.render())));\n    });\n  });\n\n  describe('.slice', function() {\n    it('should return empty slice', function() {\n      w.writeUInt32BE(0xabbadead);\n      assert.equal(join(w.slice(4, 4).render()), '');\n      assert.equal(join(w.render()), 'abbadead');\n    });\n\n    it('should return full slice', function() {\n      w.writeUInt32BE(0xabbadead);\n      var slice = w.slice(0, 4);\n      slice.writeUInt32BE(0xdeadbeef);\n      assert.equal(join(slice.render()), 'deadbeef');\n      assert.equal(join(w.render()), 'deadbeef');\n    });\n\n    it('should return partial slice', function() {\n      w.writeUInt32BE(0xabbadead);\n      var slice = w.slice(0, 3);\n      slice.writeUInt24BE(0xdeadbe);\n      assert.equal(join(slice.render()), 'deadbe');\n      assert.equal(join(w.render()), 'deadbead');\n    });\n\n    it('should return over-the-boundary slice', function() {\n      for (var i = 0; i < 16; i++) {\n        w.reserve(3);\n        w.writeUInt24BE(i);\n      }\n      assert.equal(join(w.render()),\n                   '000000000001000002000003000004000005000006000007' +\n                       '00000800000900000a00000b00000c00000d00000e00000f');\n\n      var slice = w.slice(5, 12);\n      slice.writeUInt24BE(0xaaabac);\n      slice.writeUInt24BE(0xbabbbc);\n      slice.writeUInt8(0xcc);\n\n      assert.equal(join(slice.render()), 'aaabacbabbbccc');\n      assert.equal(join(w.render()),\n                   '0000000000aaabacbabbbccc000004000005000006000007' +\n                       '00000800000900000a00000b00000c00000d00000e00000f');\n    });\n  });\n\n  describe('.copyFrom', function() {\n    it('should copy bytes', function() {\n      var tmp = new Buffer(128);\n      for (var i = 0; i < tmp.length; i++)\n        tmp[i] = i;\n      w.writeUInt32BE(0xdeadbeef);\n      w.copyFrom(tmp);\n      w.writeUInt32BE(0xabbadead);\n\n      assert.equal(\n        join(w.render()),\n        'deadbeef000102030405060708090a0b0c0d0e0f101112131415161718191a1b' +\n        '1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b' +\n        '3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b' +\n        '5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b' +\n        '7c7d7e7fabbadead');\n    });\n\n    it('should copy bytes using offset', function() {\n      var tmp = new Buffer(128);\n      for (var i = 0; i < tmp.length; i++)\n        tmp[i] = i;\n      w.writeUInt32BE(0xdeadbeef);\n      w.copyFrom(tmp, 10, 12);\n      w.writeUInt32BE(0xabbadead);\n\n      assert.equal(\n        join(w.render()),\n        'deadbeef0a0babbadead');\n    });\n  });\n\n  describe('.write', function() {\n    it('should write utf8 string', function() {\n      w.writeUInt32BE(0xdeadbeef);\n      w.write('ohai\\u1023');\n      w.writeUInt32BE(0xabbadead);\n\n      assert.equal(\n        join(w.render()),\n        'deadbeef' +\n            '6f6861691023' +\n            'abbadead');\n    });\n\n    it('should copy bytes using offset', function() {\n      var tmp = new Buffer(128);\n      for (var i = 0; i < tmp.length; i++)\n        tmp[i] = i;\n      w.writeUInt32BE(0xdeadbeef);\n      w.copyFrom(tmp, 10, 12);\n      w.writeUInt32BE(0xabbadead);\n\n      assert.equal(\n        join(w.render()),\n        'deadbeef0a0babbadead');\n    });\n  });\n\n  describe('.skip', function() {\n    it('should copy bytes', function() {\n      w.reserve(5);\n      var h = w.skip(4);\n      w.writeUInt32BE(0xabbadead);\n      h.writeUInt32BE(0xdeadbeef);\n\n      assert.equal(\n        join(w.render()),\n        'deadbeefabbadead');\n    });\n  });\n\n  describe('.forceReserve = true', function() {\n    it('should allocate more bytes', function() {\n      w.forceReserve = true;\n      w.reserve(4);\n      w.writeUInt32BE(0xabbadead);\n      w.writeUInt32BE(0xabbadead);\n\n      assert.equal(w.render().length, 1);\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"script"}