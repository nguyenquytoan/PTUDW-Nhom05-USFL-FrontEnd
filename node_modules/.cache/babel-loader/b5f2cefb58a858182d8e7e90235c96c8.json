{"ast":null,"code":"var assert = require('assert');\n\nvar pathParse = require('./index');\n\nvar winParseTests = [[{\n  root: 'C:\\\\',\n  dir: 'C:\\\\path\\\\dir',\n  base: 'index.html',\n  ext: '.html',\n  name: 'index'\n}, 'C:\\\\path\\\\dir\\\\index.html'], [{\n  root: 'C:\\\\',\n  dir: 'C:\\\\another_path\\\\DIR\\\\1\\\\2\\\\33',\n  base: 'index',\n  ext: '',\n  name: 'index'\n}, 'C:\\\\another_path\\\\DIR\\\\1\\\\2\\\\33\\\\index'], [{\n  root: '',\n  dir: 'another_path\\\\DIR with spaces\\\\1\\\\2\\\\33',\n  base: 'index',\n  ext: '',\n  name: 'index'\n}, 'another_path\\\\DIR with spaces\\\\1\\\\2\\\\33\\\\index'], [{\n  root: '\\\\',\n  dir: '\\\\foo',\n  base: 'C:',\n  ext: '',\n  name: 'C:'\n}, '\\\\foo\\\\C:'], [{\n  root: '',\n  dir: '',\n  base: 'file',\n  ext: '',\n  name: 'file'\n}, 'file'], [{\n  root: '',\n  dir: '.',\n  base: 'file',\n  ext: '',\n  name: 'file'\n}, '.\\\\file'], // unc\n[{\n  root: '\\\\\\\\server\\\\share\\\\',\n  dir: '\\\\\\\\server\\\\share\\\\',\n  base: 'file_path',\n  ext: '',\n  name: 'file_path'\n}, '\\\\\\\\server\\\\share\\\\file_path'], [{\n  root: '\\\\\\\\server two\\\\shared folder\\\\',\n  dir: '\\\\\\\\server two\\\\shared folder\\\\',\n  base: 'file path.zip',\n  ext: '.zip',\n  name: 'file path'\n}, '\\\\\\\\server two\\\\shared folder\\\\file path.zip'], [{\n  root: '\\\\\\\\teela\\\\admin$\\\\',\n  dir: '\\\\\\\\teela\\\\admin$\\\\',\n  base: 'system32',\n  ext: '',\n  name: 'system32'\n}, '\\\\\\\\teela\\\\admin$\\\\system32'], [{\n  root: '\\\\\\\\?\\\\UNC\\\\',\n  dir: '\\\\\\\\?\\\\UNC\\\\server',\n  base: 'share',\n  ext: '',\n  name: 'share'\n}, '\\\\\\\\?\\\\UNC\\\\server\\\\share']];\nvar winSpecialCaseFormatTests = [[{\n  dir: 'some\\\\dir'\n}, 'some\\\\dir\\\\'], [{\n  base: 'index.html'\n}, 'index.html'], [{}, '']];\nvar unixParseTests = [[{\n  root: '/',\n  dir: '/home/user/dir',\n  base: 'file.txt',\n  ext: '.txt',\n  name: 'file'\n}, '/home/user/dir/file.txt'], [{\n  root: '/',\n  dir: '/home/user/a dir',\n  base: 'another File.zip',\n  ext: '.zip',\n  name: 'another File'\n}, '/home/user/a dir/another File.zip'], [{\n  root: '/',\n  dir: '/home/user/a dir/',\n  base: 'another&File.',\n  ext: '.',\n  name: 'another&File'\n}, '/home/user/a dir//another&File.'], [{\n  root: '/',\n  dir: '/home/user/a$$$dir/',\n  base: 'another File.zip',\n  ext: '.zip',\n  name: 'another File'\n}, '/home/user/a$$$dir//another File.zip'], [{\n  root: '',\n  dir: 'user/dir',\n  base: 'another File.zip',\n  ext: '.zip',\n  name: 'another File'\n}, 'user/dir/another File.zip'], [{\n  root: '',\n  dir: '',\n  base: 'file',\n  ext: '',\n  name: 'file'\n}, 'file'], [{\n  root: '',\n  dir: '',\n  base: '.\\\\file',\n  ext: '',\n  name: '.\\\\file'\n}, '.\\\\file'], [{\n  root: '',\n  dir: '.',\n  base: 'file',\n  ext: '',\n  name: 'file'\n}, './file'], [{\n  root: '',\n  dir: '',\n  base: 'C:\\\\foo',\n  ext: '',\n  name: 'C:\\\\foo'\n}, 'C:\\\\foo']];\nvar unixSpecialCaseFormatTests = [[{\n  dir: 'some/dir'\n}, 'some/dir/'], [{\n  base: 'index.html'\n}, 'index.html'], [{}, '']];\nvar errors = [{\n  input: null,\n  message: /Parameter 'pathString' must be a string, not/\n}, {\n  input: {},\n  message: /Parameter 'pathString' must be a string, not object/\n}, {\n  input: true,\n  message: /Parameter 'pathString' must be a string, not boolean/\n}, {\n  input: 1,\n  message: /Parameter 'pathString' must be a string, not number/\n}, {\n  input: undefined,\n  message: /Parameter 'pathString' must be a string, not undefined/\n}];\ncheckParseFormat(pathParse.win32, winParseTests);\ncheckParseFormat(pathParse.posix, unixParseTests);\ncheckErrors(pathParse.win32);\ncheckErrors(pathParse.posix);\n\nfunction checkErrors(parse) {\n  errors.forEach(function (errorCase) {\n    try {\n      parse(errorCase.input);\n    } catch (err) {\n      assert.ok(err instanceof TypeError);\n      assert.ok(errorCase.message.test(err.message), 'expected ' + errorCase.message + ' to match ' + err.message);\n      return;\n    }\n\n    assert.fail('should have thrown');\n  });\n}\n\nfunction checkParseFormat(parse, testCases) {\n  testCases.forEach(function (testCase) {\n    assert.deepEqual(parse(testCase[1]), testCase[0]);\n  });\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/path-parse/test.js"],"names":["assert","require","pathParse","winParseTests","root","dir","base","ext","name","winSpecialCaseFormatTests","unixParseTests","unixSpecialCaseFormatTests","errors","input","message","undefined","checkParseFormat","win32","posix","checkErrors","parse","forEach","errorCase","err","ok","TypeError","test","fail","testCases","testCase","deepEqual"],"mappings":"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","sourcesContent":["var assert = require('assert');\nvar pathParse = require('./index');\n\nvar winParseTests = [\n  [{ root: 'C:\\\\', dir: 'C:\\\\path\\\\dir', base: 'index.html', ext: '.html', name: 'index' }, 'C:\\\\path\\\\dir\\\\index.html'],\n  [{ root: 'C:\\\\', dir: 'C:\\\\another_path\\\\DIR\\\\1\\\\2\\\\33', base: 'index', ext: '', name: 'index' }, 'C:\\\\another_path\\\\DIR\\\\1\\\\2\\\\33\\\\index'],\n  [{ root: '', dir: 'another_path\\\\DIR with spaces\\\\1\\\\2\\\\33', base: 'index', ext: '', name: 'index' }, 'another_path\\\\DIR with spaces\\\\1\\\\2\\\\33\\\\index'],\n  [{ root: '\\\\', dir: '\\\\foo', base: 'C:', ext: '', name: 'C:' }, '\\\\foo\\\\C:'],\n  [{ root: '', dir: '', base: 'file', ext: '', name: 'file' }, 'file'],\n  [{ root: '', dir: '.', base: 'file', ext: '', name: 'file' }, '.\\\\file'],\n\n  // unc\n  [{ root: '\\\\\\\\server\\\\share\\\\', dir: '\\\\\\\\server\\\\share\\\\', base: 'file_path', ext: '', name: 'file_path' }, '\\\\\\\\server\\\\share\\\\file_path'],\n  [{ root: '\\\\\\\\server two\\\\shared folder\\\\', dir: '\\\\\\\\server two\\\\shared folder\\\\', base: 'file path.zip', ext: '.zip', name: 'file path' }, '\\\\\\\\server two\\\\shared folder\\\\file path.zip'],\n  [{ root: '\\\\\\\\teela\\\\admin$\\\\', dir: '\\\\\\\\teela\\\\admin$\\\\', base: 'system32', ext: '', name: 'system32' }, '\\\\\\\\teela\\\\admin$\\\\system32'],\n  [{ root: '\\\\\\\\?\\\\UNC\\\\', dir: '\\\\\\\\?\\\\UNC\\\\server', base: 'share', ext: '', name: 'share' }, '\\\\\\\\?\\\\UNC\\\\server\\\\share']\n];\n\nvar winSpecialCaseFormatTests = [\n  [{dir: 'some\\\\dir'}, 'some\\\\dir\\\\'],\n  [{base: 'index.html'}, 'index.html'],\n  [{}, '']\n];\n\nvar unixParseTests = [\n  [{ root: '/', dir: '/home/user/dir', base: 'file.txt', ext: '.txt', name: 'file' }, '/home/user/dir/file.txt'],\n  [{ root: '/', dir: '/home/user/a dir', base: 'another File.zip', ext: '.zip', name: 'another File' }, '/home/user/a dir/another File.zip'],\n  [{ root: '/', dir: '/home/user/a dir/', base: 'another&File.', ext: '.', name: 'another&File' }, '/home/user/a dir//another&File.'],\n  [{ root: '/', dir: '/home/user/a$$$dir/', base: 'another File.zip', ext: '.zip', name: 'another File' }, '/home/user/a$$$dir//another File.zip'],\n  [{ root: '', dir: 'user/dir', base: 'another File.zip', ext: '.zip', name: 'another File' }, 'user/dir/another File.zip'],\n  [{ root: '', dir: '', base: 'file', ext: '', name: 'file' }, 'file'],\n  [{ root: '', dir: '', base: '.\\\\file', ext: '', name: '.\\\\file' }, '.\\\\file'],\n  [{ root: '', dir: '.', base: 'file', ext: '', name: 'file' }, './file'],\n  [{ root: '', dir: '', base: 'C:\\\\foo', ext: '', name: 'C:\\\\foo' }, 'C:\\\\foo']\n];\n\nvar unixSpecialCaseFormatTests = [\n  [{dir: 'some/dir'}, 'some/dir/'],\n  [{base: 'index.html'}, 'index.html'],\n  [{}, '']\n];\n\nvar errors = [\n  {input: null, message: /Parameter 'pathString' must be a string, not/},\n  {input: {}, message: /Parameter 'pathString' must be a string, not object/},\n  {input: true, message: /Parameter 'pathString' must be a string, not boolean/},\n  {input: 1, message: /Parameter 'pathString' must be a string, not number/},\n  {input: undefined, message: /Parameter 'pathString' must be a string, not undefined/},\n];\n\ncheckParseFormat(pathParse.win32, winParseTests);\ncheckParseFormat(pathParse.posix, unixParseTests);\ncheckErrors(pathParse.win32);\ncheckErrors(pathParse.posix);\n\nfunction checkErrors(parse) {\n  errors.forEach(function(errorCase) {\n    try {\n      parse(errorCase.input);\n    } catch(err) {\n      assert.ok(err instanceof TypeError);\n      assert.ok(\n        errorCase.message.test(err.message),\n        'expected ' + errorCase.message + ' to match ' + err.message\n      );\n      return;\n    }\n\n    assert.fail('should have thrown');\n  });\n}\n\nfunction checkParseFormat(parse, testCases) {\n  testCases.forEach(function(testCase) {\n    assert.deepEqual(parse(testCase[1]), testCase[0]);\n  });\n}\n"]},"metadata":{},"sourceType":"script"}