{"ast":null,"code":"/**\n * @fileoverview An object that creates fix commands for rules.\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n// none!\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Creates a fix command that inserts text at the specified index in the source text.\n * @param {int} index The 0-based index at which to insert the new text.\n * @param {string} text The text to insert.\n * @returns {Object} The fix command.\n * @private\n */\n\nfunction insertTextAt(index, text) {\n  return {\n    range: [index, index],\n    text\n  };\n} //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Creates code fixing commands for rules.\n */\n\n\nconst ruleFixer = Object.freeze({\n  /**\n   * Creates a fix command that inserts text after the given node or token.\n   * The fix is not applied until applyFixes() is called.\n   * @param {ASTNode|Token} nodeOrToken The node or token to insert after.\n   * @param {string} text The text to insert.\n   * @returns {Object} The fix command.\n   */\n  insertTextAfter(nodeOrToken, text) {\n    return this.insertTextAfterRange(nodeOrToken.range, text);\n  },\n\n  /**\n   * Creates a fix command that inserts text after the specified range in the source text.\n   * The fix is not applied until applyFixes() is called.\n   * @param {int[]} range The range to replace, first item is start of range, second\n   *      is end of range.\n   * @param {string} text The text to insert.\n   * @returns {Object} The fix command.\n   */\n  insertTextAfterRange(range, text) {\n    return insertTextAt(range[1], text);\n  },\n\n  /**\n   * Creates a fix command that inserts text before the given node or token.\n   * The fix is not applied until applyFixes() is called.\n   * @param {ASTNode|Token} nodeOrToken The node or token to insert before.\n   * @param {string} text The text to insert.\n   * @returns {Object} The fix command.\n   */\n  insertTextBefore(nodeOrToken, text) {\n    return this.insertTextBeforeRange(nodeOrToken.range, text);\n  },\n\n  /**\n   * Creates a fix command that inserts text before the specified range in the source text.\n   * The fix is not applied until applyFixes() is called.\n   * @param {int[]} range The range to replace, first item is start of range, second\n   *      is end of range.\n   * @param {string} text The text to insert.\n   * @returns {Object} The fix command.\n   */\n  insertTextBeforeRange(range, text) {\n    return insertTextAt(range[0], text);\n  },\n\n  /**\n   * Creates a fix command that replaces text at the node or token.\n   * The fix is not applied until applyFixes() is called.\n   * @param {ASTNode|Token} nodeOrToken The node or token to remove.\n   * @param {string} text The text to insert.\n   * @returns {Object} The fix command.\n   */\n  replaceText(nodeOrToken, text) {\n    return this.replaceTextRange(nodeOrToken.range, text);\n  },\n\n  /**\n   * Creates a fix command that replaces text at the specified range in the source text.\n   * The fix is not applied until applyFixes() is called.\n   * @param {int[]} range The range to replace, first item is start of range, second\n   *      is end of range.\n   * @param {string} text The text to insert.\n   * @returns {Object} The fix command.\n   */\n  replaceTextRange(range, text) {\n    return {\n      range,\n      text\n    };\n  },\n\n  /**\n   * Creates a fix command that removes the node or token from the source.\n   * The fix is not applied until applyFixes() is called.\n   * @param {ASTNode|Token} nodeOrToken The node or token to remove.\n   * @returns {Object} The fix command.\n   */\n  remove(nodeOrToken) {\n    return this.removeRange(nodeOrToken.range);\n  },\n\n  /**\n   * Creates a fix command that removes the specified range of text from the source.\n   * The fix is not applied until applyFixes() is called.\n   * @param {int[]} range The range to remove, first item is start of range, second\n   *      is end of range.\n   * @returns {Object} The fix command.\n   */\n  removeRange(range) {\n    return {\n      range,\n      text: \"\"\n    };\n  }\n\n});\nmodule.exports = ruleFixer;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/linter/rule-fixer.js"],"names":["insertTextAt","index","text","range","ruleFixer","Object","freeze","insertTextAfter","nodeOrToken","insertTextAfterRange","insertTextBefore","insertTextBeforeRange","replaceText","replaceTextRange","remove","removeRange","module","exports"],"mappings":"AAAA;;;;AAIA,a,CAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEA;;;;;;;;AAOA,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,IAA7B,EAAmC;AAC/B,SAAO;AACHC,IAAAA,KAAK,EAAE,CAACF,KAAD,EAAQA,KAAR,CADJ;AAEHC,IAAAA;AAFG,GAAP;AAIH,C,CAED;AACA;AACA;;AAEA;;;;;AAIA,MAAME,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc;AAE5B;;;;;;;AAOAC,EAAAA,eAAe,CAACC,WAAD,EAAcN,IAAd,EAAoB;AAC/B,WAAO,KAAKO,oBAAL,CAA0BD,WAAW,CAACL,KAAtC,EAA6CD,IAA7C,CAAP;AACH,GAX2B;;AAa5B;;;;;;;;AAQAO,EAAAA,oBAAoB,CAACN,KAAD,EAAQD,IAAR,EAAc;AAC9B,WAAOF,YAAY,CAACG,KAAK,CAAC,CAAD,CAAN,EAAWD,IAAX,CAAnB;AACH,GAvB2B;;AAyB5B;;;;;;;AAOAQ,EAAAA,gBAAgB,CAACF,WAAD,EAAcN,IAAd,EAAoB;AAChC,WAAO,KAAKS,qBAAL,CAA2BH,WAAW,CAACL,KAAvC,EAA8CD,IAA9C,CAAP;AACH,GAlC2B;;AAoC5B;;;;;;;;AAQAS,EAAAA,qBAAqB,CAACR,KAAD,EAAQD,IAAR,EAAc;AAC/B,WAAOF,YAAY,CAACG,KAAK,CAAC,CAAD,CAAN,EAAWD,IAAX,CAAnB;AACH,GA9C2B;;AAgD5B;;;;;;;AAOAU,EAAAA,WAAW,CAACJ,WAAD,EAAcN,IAAd,EAAoB;AAC3B,WAAO,KAAKW,gBAAL,CAAsBL,WAAW,CAACL,KAAlC,EAAyCD,IAAzC,CAAP;AACH,GAzD2B;;AA2D5B;;;;;;;;AAQAW,EAAAA,gBAAgB,CAACV,KAAD,EAAQD,IAAR,EAAc;AAC1B,WAAO;AACHC,MAAAA,KADG;AAEHD,MAAAA;AAFG,KAAP;AAIH,GAxE2B;;AA0E5B;;;;;;AAMAY,EAAAA,MAAM,CAACN,WAAD,EAAc;AAChB,WAAO,KAAKO,WAAL,CAAiBP,WAAW,CAACL,KAA7B,CAAP;AACH,GAlF2B;;AAoF5B;;;;;;;AAOAY,EAAAA,WAAW,CAACZ,KAAD,EAAQ;AACf,WAAO;AACHA,MAAAA,KADG;AAEHD,MAAAA,IAAI,EAAE;AAFH,KAAP;AAIH;;AAhG2B,CAAd,CAAlB;AAqGAc,MAAM,CAACC,OAAP,GAAiBb,SAAjB","sourcesContent":["/**\n * @fileoverview An object that creates fix commands for rules.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\n// none!\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Creates a fix command that inserts text at the specified index in the source text.\n * @param {int} index The 0-based index at which to insert the new text.\n * @param {string} text The text to insert.\n * @returns {Object} The fix command.\n * @private\n */\nfunction insertTextAt(index, text) {\n    return {\n        range: [index, index],\n        text\n    };\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Creates code fixing commands for rules.\n */\n\nconst ruleFixer = Object.freeze({\n\n    /**\n     * Creates a fix command that inserts text after the given node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {ASTNode|Token} nodeOrToken The node or token to insert after.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    insertTextAfter(nodeOrToken, text) {\n        return this.insertTextAfterRange(nodeOrToken.range, text);\n    },\n\n    /**\n     * Creates a fix command that inserts text after the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    insertTextAfterRange(range, text) {\n        return insertTextAt(range[1], text);\n    },\n\n    /**\n     * Creates a fix command that inserts text before the given node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {ASTNode|Token} nodeOrToken The node or token to insert before.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    insertTextBefore(nodeOrToken, text) {\n        return this.insertTextBeforeRange(nodeOrToken.range, text);\n    },\n\n    /**\n     * Creates a fix command that inserts text before the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    insertTextBeforeRange(range, text) {\n        return insertTextAt(range[0], text);\n    },\n\n    /**\n     * Creates a fix command that replaces text at the node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {ASTNode|Token} nodeOrToken The node or token to remove.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    replaceText(nodeOrToken, text) {\n        return this.replaceTextRange(nodeOrToken.range, text);\n    },\n\n    /**\n     * Creates a fix command that replaces text at the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    replaceTextRange(range, text) {\n        return {\n            range,\n            text\n        };\n    },\n\n    /**\n     * Creates a fix command that removes the node or token from the source.\n     * The fix is not applied until applyFixes() is called.\n     * @param {ASTNode|Token} nodeOrToken The node or token to remove.\n     * @returns {Object} The fix command.\n     */\n    remove(nodeOrToken) {\n        return this.removeRange(nodeOrToken.range);\n    },\n\n    /**\n     * Creates a fix command that removes the specified range of text from the source.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to remove, first item is start of range, second\n     *      is end of range.\n     * @returns {Object} The fix command.\n     */\n    removeRange(range) {\n        return {\n            range,\n            text: \"\"\n        };\n    }\n\n});\n\n\nmodule.exports = ruleFixer;\n"]},"metadata":{},"sourceType":"script"}