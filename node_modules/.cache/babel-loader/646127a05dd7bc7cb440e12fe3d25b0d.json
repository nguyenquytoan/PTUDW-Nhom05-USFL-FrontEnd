{"ast":null,"code":"var Spaces = require('../../options/format').Spaces;\n\nvar Marker = require('../../tokenizer/marker');\n\nvar formatPosition = require('../../utils/format-position');\n\nvar CASE_ATTRIBUTE_PATTERN = /[\\s\"'][iI]\\s*\\]/;\nvar CASE_RESTORE_PATTERN = /([\\d\\w])([iI])\\]/g;\nvar DOUBLE_QUOTE_CASE_PATTERN = /=\"([a-zA-Z][a-zA-Z\\d\\-_]+)\"([iI])/g;\nvar DOUBLE_QUOTE_PATTERN = /=\"([a-zA-Z][a-zA-Z\\d\\-_]+)\"(\\s|\\])/g;\nvar HTML_COMMENT_PATTERN = /^(?:(?:<!--|-->)\\s*)+/;\nvar SINGLE_QUOTE_CASE_PATTERN = /='([a-zA-Z][a-zA-Z\\d\\-_]+)'([iI])/g;\nvar SINGLE_QUOTE_PATTERN = /='([a-zA-Z][a-zA-Z\\d\\-_]+)'(\\s|\\])/g;\nvar RELATION_PATTERN = /[>\\+~]/;\nvar WHITESPACE_PATTERN = /\\s/;\nvar ASTERISK_PLUS_HTML_HACK = '*+html ';\nvar ASTERISK_FIRST_CHILD_PLUS_HTML_HACK = '*:first-child+html ';\nvar LESS_THAN = '<';\n\nfunction hasInvalidCharacters(value) {\n  var isEscaped;\n  var isInvalid = false;\n  var character;\n  var isQuote = false;\n  var i, l;\n\n  for (i = 0, l = value.length; i < l; i++) {\n    character = value[i];\n\n    if (isEscaped) {// continue as always\n    } else if (character == Marker.SINGLE_QUOTE || character == Marker.DOUBLE_QUOTE) {\n      isQuote = !isQuote;\n    } else if (!isQuote && (character == Marker.CLOSE_CURLY_BRACKET || character == Marker.EXCLAMATION || character == LESS_THAN || character == Marker.SEMICOLON)) {\n      isInvalid = true;\n      break;\n    } else if (!isQuote && i === 0 && RELATION_PATTERN.test(character)) {\n      isInvalid = true;\n      break;\n    }\n\n    isEscaped = character == Marker.BACK_SLASH;\n  }\n\n  return isInvalid;\n}\n\nfunction removeWhitespace(value, format) {\n  var stripped = [];\n  var character;\n  var isNewLineNix;\n  var isNewLineWin;\n  var isEscaped;\n  var wasEscaped;\n  var isQuoted;\n  var isSingleQuoted;\n  var isDoubleQuoted;\n  var isAttribute;\n  var isRelation;\n  var isWhitespace;\n  var roundBracketLevel = 0;\n  var wasRelation = false;\n  var wasWhitespace = false;\n  var withCaseAttribute = CASE_ATTRIBUTE_PATTERN.test(value);\n  var spaceAroundRelation = format && format.spaces[Spaces.AroundSelectorRelation];\n  var i, l;\n\n  for (i = 0, l = value.length; i < l; i++) {\n    character = value[i];\n    isNewLineNix = character == Marker.NEW_LINE_NIX;\n    isNewLineWin = character == Marker.NEW_LINE_NIX && value[i - 1] == Marker.CARRIAGE_RETURN;\n    isQuoted = isSingleQuoted || isDoubleQuoted;\n    isRelation = !isAttribute && !isEscaped && roundBracketLevel === 0 && RELATION_PATTERN.test(character);\n    isWhitespace = WHITESPACE_PATTERN.test(character);\n\n    if (wasEscaped && isQuoted && isNewLineWin) {\n      // swallow escaped new windows lines in comments\n      stripped.pop();\n      stripped.pop();\n    } else if (isEscaped && isQuoted && isNewLineNix) {\n      // swallow escaped new *nix lines in comments\n      stripped.pop();\n    } else if (isEscaped) {\n      stripped.push(character);\n    } else if (character == Marker.OPEN_SQUARE_BRACKET && !isQuoted) {\n      stripped.push(character);\n      isAttribute = true;\n    } else if (character == Marker.CLOSE_SQUARE_BRACKET && !isQuoted) {\n      stripped.push(character);\n      isAttribute = false;\n    } else if (character == Marker.OPEN_ROUND_BRACKET && !isQuoted) {\n      stripped.push(character);\n      roundBracketLevel++;\n    } else if (character == Marker.CLOSE_ROUND_BRACKET && !isQuoted) {\n      stripped.push(character);\n      roundBracketLevel--;\n    } else if (character == Marker.SINGLE_QUOTE && !isQuoted) {\n      stripped.push(character);\n      isSingleQuoted = true;\n    } else if (character == Marker.DOUBLE_QUOTE && !isQuoted) {\n      stripped.push(character);\n      isDoubleQuoted = true;\n    } else if (character == Marker.SINGLE_QUOTE && isQuoted) {\n      stripped.push(character);\n      isSingleQuoted = false;\n    } else if (character == Marker.DOUBLE_QUOTE && isQuoted) {\n      stripped.push(character);\n      isDoubleQuoted = false;\n    } else if (isWhitespace && wasRelation && !spaceAroundRelation) {\n      continue;\n    } else if (!isWhitespace && wasRelation && spaceAroundRelation) {\n      stripped.push(Marker.SPACE);\n      stripped.push(character);\n    } else if (isWhitespace && (isAttribute || roundBracketLevel > 0) && !isQuoted) {// skip space\n    } else if (isWhitespace && wasWhitespace && !isQuoted) {// skip extra space\n    } else if ((isNewLineWin || isNewLineNix) && (isAttribute || roundBracketLevel > 0) && isQuoted) {// skip newline\n    } else if (isRelation && wasWhitespace && !spaceAroundRelation) {\n      stripped.pop();\n      stripped.push(character);\n    } else if (isRelation && !wasWhitespace && spaceAroundRelation) {\n      stripped.push(Marker.SPACE);\n      stripped.push(character);\n    } else if (isWhitespace) {\n      stripped.push(Marker.SPACE);\n    } else {\n      stripped.push(character);\n    }\n\n    wasEscaped = isEscaped;\n    isEscaped = character == Marker.BACK_SLASH;\n    wasRelation = isRelation;\n    wasWhitespace = isWhitespace;\n  }\n\n  return withCaseAttribute ? stripped.join('').replace(CASE_RESTORE_PATTERN, '$1 $2]') : stripped.join('');\n}\n\nfunction removeQuotes(value) {\n  if (value.indexOf('\\'') == -1 && value.indexOf('\"') == -1) {\n    return value;\n  }\n\n  return value.replace(SINGLE_QUOTE_CASE_PATTERN, '=$1 $2').replace(SINGLE_QUOTE_PATTERN, '=$1$2').replace(DOUBLE_QUOTE_CASE_PATTERN, '=$1 $2').replace(DOUBLE_QUOTE_PATTERN, '=$1$2');\n}\n\nfunction tidyRules(rules, removeUnsupported, adjacentSpace, format, warnings) {\n  var list = [];\n  var repeated = [];\n\n  function removeHTMLComment(rule, match) {\n    warnings.push('HTML comment \\'' + match + '\\' at ' + formatPosition(rule[2][0]) + '. Removing.');\n    return '';\n  }\n\n  for (var i = 0, l = rules.length; i < l; i++) {\n    var rule = rules[i];\n    var reduced = rule[1];\n    reduced = reduced.replace(HTML_COMMENT_PATTERN, removeHTMLComment.bind(null, rule));\n\n    if (hasInvalidCharacters(reduced)) {\n      warnings.push('Invalid selector \\'' + rule[1] + '\\' at ' + formatPosition(rule[2][0]) + '. Ignoring.');\n      continue;\n    }\n\n    reduced = removeWhitespace(reduced, format);\n    reduced = removeQuotes(reduced);\n\n    if (adjacentSpace && reduced.indexOf('nav') > 0) {\n      reduced = reduced.replace(/\\+nav(\\S|$)/, '+ nav$1');\n    }\n\n    if (removeUnsupported && reduced.indexOf(ASTERISK_PLUS_HTML_HACK) > -1) {\n      continue;\n    }\n\n    if (removeUnsupported && reduced.indexOf(ASTERISK_FIRST_CHILD_PLUS_HTML_HACK) > -1) {\n      continue;\n    }\n\n    if (reduced.indexOf('*') > -1) {\n      reduced = reduced.replace(/\\*([:#\\.\\[])/g, '$1').replace(/^(\\:first\\-child)?\\+html/, '*$1+html');\n    }\n\n    if (repeated.indexOf(reduced) > -1) {\n      continue;\n    }\n\n    rule[1] = reduced;\n    repeated.push(reduced);\n    list.push(rule);\n  }\n\n  if (list.length == 1 && list[0][1].length === 0) {\n    warnings.push('Empty selector \\'' + list[0][1] + '\\' at ' + formatPosition(list[0][2][0]) + '. Ignoring.');\n    list = [];\n  }\n\n  return list;\n}\n\nmodule.exports = tidyRules;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/clean-css/lib/optimizer/level-1/tidy-rules.js"],"names":["Spaces","require","Marker","formatPosition","CASE_ATTRIBUTE_PATTERN","CASE_RESTORE_PATTERN","DOUBLE_QUOTE_CASE_PATTERN","DOUBLE_QUOTE_PATTERN","HTML_COMMENT_PATTERN","SINGLE_QUOTE_CASE_PATTERN","SINGLE_QUOTE_PATTERN","RELATION_PATTERN","WHITESPACE_PATTERN","ASTERISK_PLUS_HTML_HACK","ASTERISK_FIRST_CHILD_PLUS_HTML_HACK","LESS_THAN","hasInvalidCharacters","value","isEscaped","isInvalid","character","isQuote","i","l","length","SINGLE_QUOTE","DOUBLE_QUOTE","CLOSE_CURLY_BRACKET","EXCLAMATION","SEMICOLON","test","BACK_SLASH","removeWhitespace","format","stripped","isNewLineNix","isNewLineWin","wasEscaped","isQuoted","isSingleQuoted","isDoubleQuoted","isAttribute","isRelation","isWhitespace","roundBracketLevel","wasRelation","wasWhitespace","withCaseAttribute","spaceAroundRelation","spaces","AroundSelectorRelation","NEW_LINE_NIX","CARRIAGE_RETURN","pop","push","OPEN_SQUARE_BRACKET","CLOSE_SQUARE_BRACKET","OPEN_ROUND_BRACKET","CLOSE_ROUND_BRACKET","SPACE","join","replace","removeQuotes","indexOf","tidyRules","rules","removeUnsupported","adjacentSpace","warnings","list","repeated","removeHTMLComment","rule","match","reduced","bind","module","exports"],"mappings":"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","sourcesContent":["var Spaces = require('../../options/format').Spaces;\nvar Marker = require('../../tokenizer/marker');\nvar formatPosition = require('../../utils/format-position');\n\nvar CASE_ATTRIBUTE_PATTERN = /[\\s\"'][iI]\\s*\\]/;\nvar CASE_RESTORE_PATTERN = /([\\d\\w])([iI])\\]/g;\nvar DOUBLE_QUOTE_CASE_PATTERN = /=\"([a-zA-Z][a-zA-Z\\d\\-_]+)\"([iI])/g;\nvar DOUBLE_QUOTE_PATTERN = /=\"([a-zA-Z][a-zA-Z\\d\\-_]+)\"(\\s|\\])/g;\nvar HTML_COMMENT_PATTERN = /^(?:(?:<!--|-->)\\s*)+/;\nvar SINGLE_QUOTE_CASE_PATTERN = /='([a-zA-Z][a-zA-Z\\d\\-_]+)'([iI])/g;\nvar SINGLE_QUOTE_PATTERN = /='([a-zA-Z][a-zA-Z\\d\\-_]+)'(\\s|\\])/g;\nvar RELATION_PATTERN = /[>\\+~]/;\nvar WHITESPACE_PATTERN = /\\s/;\n\nvar ASTERISK_PLUS_HTML_HACK = '*+html ';\nvar ASTERISK_FIRST_CHILD_PLUS_HTML_HACK = '*:first-child+html ';\nvar LESS_THAN = '<';\n\nfunction hasInvalidCharacters(value) {\n  var isEscaped;\n  var isInvalid = false;\n  var character;\n  var isQuote = false;\n  var i, l;\n\n  for (i = 0, l = value.length; i < l; i++) {\n    character = value[i];\n\n    if (isEscaped) {\n      // continue as always\n    } else if (character == Marker.SINGLE_QUOTE || character == Marker.DOUBLE_QUOTE) {\n      isQuote = !isQuote;\n    } else if (!isQuote && (character == Marker.CLOSE_CURLY_BRACKET || character == Marker.EXCLAMATION || character == LESS_THAN || character == Marker.SEMICOLON)) {\n      isInvalid = true;\n      break;\n    } else if (!isQuote && i === 0 && RELATION_PATTERN.test(character)) {\n      isInvalid = true;\n      break;\n    }\n\n    isEscaped = character == Marker.BACK_SLASH;\n  }\n\n  return isInvalid;\n}\n\nfunction removeWhitespace(value, format) {\n  var stripped = [];\n  var character;\n  var isNewLineNix;\n  var isNewLineWin;\n  var isEscaped;\n  var wasEscaped;\n  var isQuoted;\n  var isSingleQuoted;\n  var isDoubleQuoted;\n  var isAttribute;\n  var isRelation;\n  var isWhitespace;\n  var roundBracketLevel = 0;\n  var wasRelation = false;\n  var wasWhitespace = false;\n  var withCaseAttribute = CASE_ATTRIBUTE_PATTERN.test(value);\n  var spaceAroundRelation = format && format.spaces[Spaces.AroundSelectorRelation];\n  var i, l;\n\n  for (i = 0, l = value.length; i < l; i++) {\n    character = value[i];\n\n    isNewLineNix = character == Marker.NEW_LINE_NIX;\n    isNewLineWin = character == Marker.NEW_LINE_NIX && value[i - 1] == Marker.CARRIAGE_RETURN;\n    isQuoted = isSingleQuoted || isDoubleQuoted;\n    isRelation = !isAttribute && !isEscaped && roundBracketLevel === 0 && RELATION_PATTERN.test(character);\n    isWhitespace = WHITESPACE_PATTERN.test(character);\n\n    if (wasEscaped && isQuoted && isNewLineWin) {\n      // swallow escaped new windows lines in comments\n      stripped.pop();\n      stripped.pop();\n    } else if (isEscaped && isQuoted && isNewLineNix) {\n      // swallow escaped new *nix lines in comments\n      stripped.pop();\n    } else if (isEscaped) {\n      stripped.push(character);\n    } else if (character == Marker.OPEN_SQUARE_BRACKET && !isQuoted) {\n      stripped.push(character);\n      isAttribute = true;\n    } else if (character == Marker.CLOSE_SQUARE_BRACKET && !isQuoted) {\n      stripped.push(character);\n      isAttribute = false;\n    } else if (character == Marker.OPEN_ROUND_BRACKET && !isQuoted) {\n      stripped.push(character);\n      roundBracketLevel++;\n    } else if (character == Marker.CLOSE_ROUND_BRACKET && !isQuoted) {\n      stripped.push(character);\n      roundBracketLevel--;\n    } else if (character == Marker.SINGLE_QUOTE && !isQuoted) {\n      stripped.push(character);\n      isSingleQuoted = true;\n    } else if (character == Marker.DOUBLE_QUOTE && !isQuoted) {\n      stripped.push(character);\n      isDoubleQuoted = true;\n    } else if (character == Marker.SINGLE_QUOTE && isQuoted) {\n      stripped.push(character);\n      isSingleQuoted = false;\n    } else if (character == Marker.DOUBLE_QUOTE && isQuoted) {\n      stripped.push(character);\n      isDoubleQuoted = false;\n    } else if (isWhitespace && wasRelation && !spaceAroundRelation) {\n      continue;\n    } else if (!isWhitespace && wasRelation && spaceAroundRelation) {\n      stripped.push(Marker.SPACE);\n      stripped.push(character);\n    } else if (isWhitespace && (isAttribute || roundBracketLevel > 0) && !isQuoted) {\n      // skip space\n    } else if (isWhitespace && wasWhitespace && !isQuoted) {\n      // skip extra space\n    } else if ((isNewLineWin || isNewLineNix) && (isAttribute || roundBracketLevel > 0) && isQuoted) {\n      // skip newline\n    } else if (isRelation && wasWhitespace && !spaceAroundRelation) {\n      stripped.pop();\n      stripped.push(character);\n    } else if (isRelation && !wasWhitespace && spaceAroundRelation) {\n      stripped.push(Marker.SPACE);\n      stripped.push(character);\n    } else if (isWhitespace) {\n      stripped.push(Marker.SPACE);\n    } else {\n      stripped.push(character);\n    }\n\n    wasEscaped = isEscaped;\n    isEscaped = character == Marker.BACK_SLASH;\n    wasRelation = isRelation;\n    wasWhitespace = isWhitespace;\n  }\n\n  return withCaseAttribute ?\n    stripped.join('').replace(CASE_RESTORE_PATTERN, '$1 $2]') :\n    stripped.join('');\n}\n\nfunction removeQuotes(value) {\n  if (value.indexOf('\\'') == -1 && value.indexOf('\"') == -1) {\n    return value;\n  }\n\n  return value\n    .replace(SINGLE_QUOTE_CASE_PATTERN, '=$1 $2')\n    .replace(SINGLE_QUOTE_PATTERN, '=$1$2')\n    .replace(DOUBLE_QUOTE_CASE_PATTERN, '=$1 $2')\n    .replace(DOUBLE_QUOTE_PATTERN, '=$1$2');\n}\n\nfunction tidyRules(rules, removeUnsupported, adjacentSpace, format, warnings) {\n  var list = [];\n  var repeated = [];\n\n  function removeHTMLComment(rule, match) {\n    warnings.push('HTML comment \\'' + match + '\\' at ' + formatPosition(rule[2][0]) + '. Removing.');\n    return '';\n  }\n\n  for (var i = 0, l = rules.length; i < l; i++) {\n    var rule = rules[i];\n    var reduced = rule[1];\n\n    reduced = reduced.replace(HTML_COMMENT_PATTERN, removeHTMLComment.bind(null, rule));\n\n    if (hasInvalidCharacters(reduced)) {\n      warnings.push('Invalid selector \\'' + rule[1] + '\\' at ' + formatPosition(rule[2][0]) + '. Ignoring.');\n      continue;\n    }\n\n    reduced = removeWhitespace(reduced, format);\n    reduced = removeQuotes(reduced);\n\n    if (adjacentSpace && reduced.indexOf('nav') > 0) {\n      reduced = reduced.replace(/\\+nav(\\S|$)/, '+ nav$1');\n    }\n\n    if (removeUnsupported && reduced.indexOf(ASTERISK_PLUS_HTML_HACK) > -1) {\n      continue;\n    }\n\n    if (removeUnsupported && reduced.indexOf(ASTERISK_FIRST_CHILD_PLUS_HTML_HACK) > -1) {\n      continue;\n    }\n\n    if (reduced.indexOf('*') > -1) {\n      reduced = reduced\n        .replace(/\\*([:#\\.\\[])/g, '$1')\n        .replace(/^(\\:first\\-child)?\\+html/, '*$1+html');\n    }\n\n    if (repeated.indexOf(reduced) > -1) {\n      continue;\n    }\n\n    rule[1] = reduced;\n    repeated.push(reduced);\n    list.push(rule);\n  }\n\n  if (list.length == 1 && list[0][1].length === 0) {\n    warnings.push('Empty selector \\'' + list[0][1] + '\\' at ' + formatPosition(list[0][2][0]) + '. Ignoring.');\n    list = [];\n  }\n\n  return list;\n}\n\nmodule.exports = tidyRules;\n"]},"metadata":{},"sourceType":"script"}