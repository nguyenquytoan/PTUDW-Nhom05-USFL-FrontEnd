{"ast":null,"code":"/**\n * @fileoverview Traverser to traverse AST trees.\n * @author Nicholas C. Zakas\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst vk = require(\"eslint-visitor-keys\");\n\nconst debug = require(\"debug\")(\"eslint:traverser\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Do nothing.\n * @returns {void}\n */\n\n\nfunction noop() {} // do nothing.\n\n/**\n * Check whether the given value is an ASTNode or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an ASTNode.\n */\n\n\nfunction isNode(x) {\n  return x !== null && typeof x === \"object\" && typeof x.type === \"string\";\n}\n/**\n * Get the visitor keys of a given node.\n * @param {Object} visitorKeys The map of visitor keys.\n * @param {ASTNode} node The node to get their visitor keys.\n * @returns {string[]} The visitor keys of the node.\n */\n\n\nfunction getVisitorKeys(visitorKeys, node) {\n  let keys = visitorKeys[node.type];\n\n  if (!keys) {\n    keys = vk.getKeys(node);\n    debug(\"Unknown node type \\\"%s\\\": Estimated visitor keys %j\", node.type, keys);\n  }\n\n  return keys;\n}\n/**\n * The traverser class to traverse AST trees.\n */\n\n\nclass Traverser {\n  constructor() {\n    this._current = null;\n    this._parents = [];\n    this._skipped = false;\n    this._broken = false;\n    this._visitorKeys = null;\n    this._enter = null;\n    this._leave = null;\n  } // eslint-disable-next-line jsdoc/require-description\n\n  /**\n   * @returns {ASTNode} The current node.\n   */\n\n\n  current() {\n    return this._current;\n  } // eslint-disable-next-line jsdoc/require-description\n\n  /**\n   * @returns {ASTNode[]} The ancestor nodes.\n   */\n\n\n  parents() {\n    return this._parents.slice(0);\n  }\n  /**\n   * Break the current traversal.\n   * @returns {void}\n   */\n\n\n  break() {\n    this._broken = true;\n  }\n  /**\n   * Skip child nodes for the current traversal.\n   * @returns {void}\n   */\n\n\n  skip() {\n    this._skipped = true;\n  }\n  /**\n   * Traverse the given AST tree.\n   * @param {ASTNode} node The root node to traverse.\n   * @param {Object} options The option object.\n   * @param {Object} [options.visitorKeys=DEFAULT_VISITOR_KEYS] The keys of each node types to traverse child nodes. Default is `./default-visitor-keys.json`.\n   * @param {Function} [options.enter=noop] The callback function which is called on entering each node.\n   * @param {Function} [options.leave=noop] The callback function which is called on leaving each node.\n   * @returns {void}\n   */\n\n\n  traverse(node, options) {\n    this._current = null;\n    this._parents = [];\n    this._skipped = false;\n    this._broken = false;\n    this._visitorKeys = options.visitorKeys || vk.KEYS;\n    this._enter = options.enter || noop;\n    this._leave = options.leave || noop;\n\n    this._traverse(node, null);\n  }\n  /**\n   * Traverse the given AST tree recursively.\n   * @param {ASTNode} node The current node.\n   * @param {ASTNode|null} parent The parent node.\n   * @returns {void}\n   * @private\n   */\n\n\n  _traverse(node, parent) {\n    if (!isNode(node)) {\n      return;\n    }\n\n    this._current = node;\n    this._skipped = false;\n\n    this._enter(node, parent);\n\n    if (!this._skipped && !this._broken) {\n      const keys = getVisitorKeys(this._visitorKeys, node);\n\n      if (keys.length >= 1) {\n        this._parents.push(node);\n\n        for (let i = 0; i < keys.length && !this._broken; ++i) {\n          const child = node[keys[i]];\n\n          if (Array.isArray(child)) {\n            for (let j = 0; j < child.length && !this._broken; ++j) {\n              this._traverse(child[j], node);\n            }\n          } else {\n            this._traverse(child, node);\n          }\n        }\n\n        this._parents.pop();\n      }\n    }\n\n    if (!this._broken) {\n      this._leave(node, parent);\n    }\n\n    this._current = parent;\n  }\n  /**\n   * Calculates the keys to use for traversal.\n   * @param {ASTNode} node The node to read keys from.\n   * @returns {string[]} An array of keys to visit on the node.\n   * @private\n   */\n\n\n  static getKeys(node) {\n    return vk.getKeys(node);\n  }\n  /**\n   * Traverse the given AST tree.\n   * @param {ASTNode} node The root node to traverse.\n   * @param {Object} options The option object.\n   * @param {Object} [options.visitorKeys=DEFAULT_VISITOR_KEYS] The keys of each node types to traverse child nodes. Default is `./default-visitor-keys.json`.\n   * @param {Function} [options.enter=noop] The callback function which is called on entering each node.\n   * @param {Function} [options.leave=noop] The callback function which is called on leaving each node.\n   * @returns {void}\n   */\n\n\n  static traverse(node, options) {\n    new Traverser().traverse(node, options);\n  }\n  /**\n   * The default visitor keys.\n   * @type {Object}\n   */\n\n\n  static get DEFAULT_VISITOR_KEYS() {\n    return vk.KEYS;\n  }\n\n}\n\nmodule.exports = Traverser;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/shared/traverser.js"],"names":["vk","require","debug","noop","isNode","x","type","getVisitorKeys","visitorKeys","node","keys","getKeys","Traverser","constructor","_current","_parents","_skipped","_broken","_visitorKeys","_enter","_leave","current","parents","slice","break","skip","traverse","options","KEYS","enter","leave","_traverse","parent","length","push","i","child","Array","isArray","j","pop","DEFAULT_VISITOR_KEYS","module","exports"],"mappings":"AAAA;;;;;AAKA,a,CAEA;AACA;AACA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,qBAAD,CAAlB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,kBAAjB,CAAd,C,CAEA;AACA;AACA;;AAEA;;;;;;AAIA,SAASE,IAAT,GAAgB,CAGf,CAHD,CAEI;;AAGJ;;;;;;;AAKA,SAASC,MAAT,CAAgBC,CAAhB,EAAmB;AACf,SAAOA,CAAC,KAAK,IAAN,IAAc,OAAOA,CAAP,KAAa,QAA3B,IAAuC,OAAOA,CAAC,CAACC,IAAT,KAAkB,QAAhE;AACH;AAED;;;;;;;;AAMA,SAASC,cAAT,CAAwBC,WAAxB,EAAqCC,IAArC,EAA2C;AACvC,MAAIC,IAAI,GAAGF,WAAW,CAACC,IAAI,CAACH,IAAN,CAAtB;;AAEA,MAAI,CAACI,IAAL,EAAW;AACPA,IAAAA,IAAI,GAAGV,EAAE,CAACW,OAAH,CAAWF,IAAX,CAAP;AACAP,IAAAA,KAAK,CAAC,qDAAD,EAAwDO,IAAI,CAACH,IAA7D,EAAmEI,IAAnE,CAAL;AACH;;AAED,SAAOA,IAAP;AACH;AAED;;;;;AAGA,MAAME,SAAN,CAAgB;AACZC,EAAAA,WAAW,GAAG;AACV,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,MAAL,GAAc,IAAd;AACH,GATW,CAWZ;;AACA;;;;;AAGAC,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKP,QAAZ;AACH,GAjBW,CAmBZ;;AACA;;;;;AAGAQ,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKP,QAAL,CAAcQ,KAAd,CAAoB,CAApB,CAAP;AACH;AAED;;;;;;AAIAC,EAAAA,KAAK,GAAG;AACJ,SAAKP,OAAL,GAAe,IAAf;AACH;AAED;;;;;;AAIAQ,EAAAA,IAAI,GAAG;AACH,SAAKT,QAAL,GAAgB,IAAhB;AACH;AAED;;;;;;;;;;;AASAU,EAAAA,QAAQ,CAACjB,IAAD,EAAOkB,OAAP,EAAgB;AACpB,SAAKb,QAAL,GAAgB,IAAhB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKC,YAAL,GAAoBS,OAAO,CAACnB,WAAR,IAAuBR,EAAE,CAAC4B,IAA9C;AACA,SAAKT,MAAL,GAAcQ,OAAO,CAACE,KAAR,IAAiB1B,IAA/B;AACA,SAAKiB,MAAL,GAAcO,OAAO,CAACG,KAAR,IAAiB3B,IAA/B;;AACA,SAAK4B,SAAL,CAAetB,IAAf,EAAqB,IAArB;AACH;AAED;;;;;;;;;AAOAsB,EAAAA,SAAS,CAACtB,IAAD,EAAOuB,MAAP,EAAe;AACpB,QAAI,CAAC5B,MAAM,CAACK,IAAD,CAAX,EAAmB;AACf;AACH;;AAED,SAAKK,QAAL,GAAgBL,IAAhB;AACA,SAAKO,QAAL,GAAgB,KAAhB;;AACA,SAAKG,MAAL,CAAYV,IAAZ,EAAkBuB,MAAlB;;AAEA,QAAI,CAAC,KAAKhB,QAAN,IAAkB,CAAC,KAAKC,OAA5B,EAAqC;AACjC,YAAMP,IAAI,GAAGH,cAAc,CAAC,KAAKW,YAAN,EAAoBT,IAApB,CAA3B;;AAEA,UAAIC,IAAI,CAACuB,MAAL,IAAe,CAAnB,EAAsB;AAClB,aAAKlB,QAAL,CAAcmB,IAAd,CAAmBzB,IAAnB;;AACA,aAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,IAAI,CAACuB,MAAT,IAAmB,CAAC,KAAKhB,OAAzC,EAAkD,EAAEkB,CAApD,EAAuD;AACnD,gBAAMC,KAAK,GAAG3B,IAAI,CAACC,IAAI,CAACyB,CAAD,CAAL,CAAlB;;AAEA,cAAIE,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACtB,iBAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACH,MAAV,IAAoB,CAAC,KAAKhB,OAA1C,EAAmD,EAAEsB,CAArD,EAAwD;AACpD,mBAAKR,SAAL,CAAeK,KAAK,CAACG,CAAD,CAApB,EAAyB9B,IAAzB;AACH;AACJ,WAJD,MAIO;AACH,iBAAKsB,SAAL,CAAeK,KAAf,EAAsB3B,IAAtB;AACH;AACJ;;AACD,aAAKM,QAAL,CAAcyB,GAAd;AACH;AACJ;;AAED,QAAI,CAAC,KAAKvB,OAAV,EAAmB;AACf,WAAKG,MAAL,CAAYX,IAAZ,EAAkBuB,MAAlB;AACH;;AAED,SAAKlB,QAAL,GAAgBkB,MAAhB;AACH;AAED;;;;;;;;AAMA,SAAOrB,OAAP,CAAeF,IAAf,EAAqB;AACjB,WAAOT,EAAE,CAACW,OAAH,CAAWF,IAAX,CAAP;AACH;AAED;;;;;;;;;;;AASA,SAAOiB,QAAP,CAAgBjB,IAAhB,EAAsBkB,OAAtB,EAA+B;AAC3B,QAAIf,SAAJ,GAAgBc,QAAhB,CAAyBjB,IAAzB,EAA+BkB,OAA/B;AACH;AAED;;;;;;AAIA,aAAWc,oBAAX,GAAkC;AAC9B,WAAOzC,EAAE,CAAC4B,IAAV;AACH;;AAvIW;;AA0IhBc,MAAM,CAACC,OAAP,GAAiB/B,SAAjB","sourcesContent":["/**\n * @fileoverview Traverser to traverse AST trees.\n * @author Nicholas C. Zakas\n * @author Toru Nagashima\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst vk = require(\"eslint-visitor-keys\");\nconst debug = require(\"debug\")(\"eslint:traverser\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Do nothing.\n * @returns {void}\n */\nfunction noop() {\n\n    // do nothing.\n}\n\n/**\n * Check whether the given value is an ASTNode or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an ASTNode.\n */\nfunction isNode(x) {\n    return x !== null && typeof x === \"object\" && typeof x.type === \"string\";\n}\n\n/**\n * Get the visitor keys of a given node.\n * @param {Object} visitorKeys The map of visitor keys.\n * @param {ASTNode} node The node to get their visitor keys.\n * @returns {string[]} The visitor keys of the node.\n */\nfunction getVisitorKeys(visitorKeys, node) {\n    let keys = visitorKeys[node.type];\n\n    if (!keys) {\n        keys = vk.getKeys(node);\n        debug(\"Unknown node type \\\"%s\\\": Estimated visitor keys %j\", node.type, keys);\n    }\n\n    return keys;\n}\n\n/**\n * The traverser class to traverse AST trees.\n */\nclass Traverser {\n    constructor() {\n        this._current = null;\n        this._parents = [];\n        this._skipped = false;\n        this._broken = false;\n        this._visitorKeys = null;\n        this._enter = null;\n        this._leave = null;\n    }\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @returns {ASTNode} The current node.\n     */\n    current() {\n        return this._current;\n    }\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @returns {ASTNode[]} The ancestor nodes.\n     */\n    parents() {\n        return this._parents.slice(0);\n    }\n\n    /**\n     * Break the current traversal.\n     * @returns {void}\n     */\n    break() {\n        this._broken = true;\n    }\n\n    /**\n     * Skip child nodes for the current traversal.\n     * @returns {void}\n     */\n    skip() {\n        this._skipped = true;\n    }\n\n    /**\n     * Traverse the given AST tree.\n     * @param {ASTNode} node The root node to traverse.\n     * @param {Object} options The option object.\n     * @param {Object} [options.visitorKeys=DEFAULT_VISITOR_KEYS] The keys of each node types to traverse child nodes. Default is `./default-visitor-keys.json`.\n     * @param {Function} [options.enter=noop] The callback function which is called on entering each node.\n     * @param {Function} [options.leave=noop] The callback function which is called on leaving each node.\n     * @returns {void}\n     */\n    traverse(node, options) {\n        this._current = null;\n        this._parents = [];\n        this._skipped = false;\n        this._broken = false;\n        this._visitorKeys = options.visitorKeys || vk.KEYS;\n        this._enter = options.enter || noop;\n        this._leave = options.leave || noop;\n        this._traverse(node, null);\n    }\n\n    /**\n     * Traverse the given AST tree recursively.\n     * @param {ASTNode} node The current node.\n     * @param {ASTNode|null} parent The parent node.\n     * @returns {void}\n     * @private\n     */\n    _traverse(node, parent) {\n        if (!isNode(node)) {\n            return;\n        }\n\n        this._current = node;\n        this._skipped = false;\n        this._enter(node, parent);\n\n        if (!this._skipped && !this._broken) {\n            const keys = getVisitorKeys(this._visitorKeys, node);\n\n            if (keys.length >= 1) {\n                this._parents.push(node);\n                for (let i = 0; i < keys.length && !this._broken; ++i) {\n                    const child = node[keys[i]];\n\n                    if (Array.isArray(child)) {\n                        for (let j = 0; j < child.length && !this._broken; ++j) {\n                            this._traverse(child[j], node);\n                        }\n                    } else {\n                        this._traverse(child, node);\n                    }\n                }\n                this._parents.pop();\n            }\n        }\n\n        if (!this._broken) {\n            this._leave(node, parent);\n        }\n\n        this._current = parent;\n    }\n\n    /**\n     * Calculates the keys to use for traversal.\n     * @param {ASTNode} node The node to read keys from.\n     * @returns {string[]} An array of keys to visit on the node.\n     * @private\n     */\n    static getKeys(node) {\n        return vk.getKeys(node);\n    }\n\n    /**\n     * Traverse the given AST tree.\n     * @param {ASTNode} node The root node to traverse.\n     * @param {Object} options The option object.\n     * @param {Object} [options.visitorKeys=DEFAULT_VISITOR_KEYS] The keys of each node types to traverse child nodes. Default is `./default-visitor-keys.json`.\n     * @param {Function} [options.enter=noop] The callback function which is called on entering each node.\n     * @param {Function} [options.leave=noop] The callback function which is called on leaving each node.\n     * @returns {void}\n     */\n    static traverse(node, options) {\n        new Traverser().traverse(node, options);\n    }\n\n    /**\n     * The default visitor keys.\n     * @type {Object}\n     */\n    static get DEFAULT_VISITOR_KEYS() {\n        return vk.KEYS;\n    }\n}\n\nmodule.exports = Traverser;\n"]},"metadata":{},"sourceType":"script"}