{"ast":null,"code":"/**\n * Usage: node test.js\n */\nvar mime = require('../mime');\n\nvar assert = require('assert');\n\nvar path = require('path'); //\n// Test mime lookups\n//\n\n\nassert.equal('text/plain', mime.lookup('text.txt')); // normal file\n\nassert.equal('text/plain', mime.lookup('TEXT.TXT')); // uppercase\n\nassert.equal('text/plain', mime.lookup('dir/text.txt')); // dir + file\n\nassert.equal('text/plain', mime.lookup('.text.txt')); // hidden file\n\nassert.equal('text/plain', mime.lookup('.txt')); // nameless\n\nassert.equal('text/plain', mime.lookup('txt')); // extension-only\n\nassert.equal('text/plain', mime.lookup('/txt')); // extension-less ()\n\nassert.equal('text/plain', mime.lookup('\\\\txt')); // Windows, extension-less\n\nassert.equal('application/octet-stream', mime.lookup('text.nope')); // unrecognized\n\nassert.equal('fallback', mime.lookup('text.fallback', 'fallback')); // alternate default\n//\n// Test extensions\n//\n\nassert.equal('txt', mime.extension(mime.types.text));\nassert.equal('html', mime.extension(mime.types.htm));\nassert.equal('bin', mime.extension('application/octet-stream'));\nassert.equal('bin', mime.extension('application/octet-stream '));\nassert.equal('html', mime.extension(' text/html; charset=UTF-8'));\nassert.equal('html', mime.extension('text/html; charset=UTF-8 '));\nassert.equal('html', mime.extension('text/html; charset=UTF-8'));\nassert.equal('html', mime.extension('text/html ; charset=UTF-8'));\nassert.equal('html', mime.extension('text/html;charset=UTF-8'));\nassert.equal('html', mime.extension('text/Html;charset=UTF-8'));\nassert.equal(undefined, mime.extension('unrecognized')); //\n// Test node.types lookups\n//\n\nassert.equal('font/woff', mime.lookup('file.woff'));\nassert.equal('application/octet-stream', mime.lookup('file.buffer')); // TODO: Uncomment once #157 is resolved\n// assert.equal('audio/mp4', mime.lookup('file.m4a'));\n\nassert.equal('font/otf', mime.lookup('file.otf')); //\n// Test charsets\n//\n\nassert.equal('UTF-8', mime.charsets.lookup('text/plain'));\nassert.equal('UTF-8', mime.charsets.lookup(mime.types.js));\nassert.equal('UTF-8', mime.charsets.lookup(mime.types.json));\nassert.equal(undefined, mime.charsets.lookup(mime.types.bin));\nassert.equal('fallback', mime.charsets.lookup('application/octet-stream', 'fallback'));\nconsole.log('\\nAll tests passed');","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/send/node_modules/mime/src/test.js"],"names":["mime","require","assert","path","equal","lookup","extension","types","text","htm","undefined","charsets","js","json","bin","console","log"],"mappings":"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","sourcesContent":["/**\n * Usage: node test.js\n */\n\nvar mime = require('../mime');\nvar assert = require('assert');\nvar path = require('path');\n\n//\n// Test mime lookups\n//\n\nassert.equal('text/plain', mime.lookup('text.txt'));     // normal file\nassert.equal('text/plain', mime.lookup('TEXT.TXT'));     // uppercase\nassert.equal('text/plain', mime.lookup('dir/text.txt')); // dir + file\nassert.equal('text/plain', mime.lookup('.text.txt'));    // hidden file\nassert.equal('text/plain', mime.lookup('.txt'));         // nameless\nassert.equal('text/plain', mime.lookup('txt'));          // extension-only\nassert.equal('text/plain', mime.lookup('/txt'));         // extension-less ()\nassert.equal('text/plain', mime.lookup('\\\\txt'));        // Windows, extension-less\nassert.equal('application/octet-stream', mime.lookup('text.nope')); // unrecognized\nassert.equal('fallback', mime.lookup('text.fallback', 'fallback')); // alternate default\n\n//\n// Test extensions\n//\n\nassert.equal('txt', mime.extension(mime.types.text));\nassert.equal('html', mime.extension(mime.types.htm));\nassert.equal('bin', mime.extension('application/octet-stream'));\nassert.equal('bin', mime.extension('application/octet-stream '));\nassert.equal('html', mime.extension(' text/html; charset=UTF-8'));\nassert.equal('html', mime.extension('text/html; charset=UTF-8 '));\nassert.equal('html', mime.extension('text/html; charset=UTF-8'));\nassert.equal('html', mime.extension('text/html ; charset=UTF-8'));\nassert.equal('html', mime.extension('text/html;charset=UTF-8'));\nassert.equal('html', mime.extension('text/Html;charset=UTF-8'));\nassert.equal(undefined, mime.extension('unrecognized'));\n\n//\n// Test node.types lookups\n//\n\nassert.equal('font/woff', mime.lookup('file.woff'));\nassert.equal('application/octet-stream', mime.lookup('file.buffer'));\n// TODO: Uncomment once #157 is resolved\n// assert.equal('audio/mp4', mime.lookup('file.m4a'));\nassert.equal('font/otf', mime.lookup('file.otf'));\n\n//\n// Test charsets\n//\n\nassert.equal('UTF-8', mime.charsets.lookup('text/plain'));\nassert.equal('UTF-8', mime.charsets.lookup(mime.types.js));\nassert.equal('UTF-8', mime.charsets.lookup(mime.types.json));\nassert.equal(undefined, mime.charsets.lookup(mime.types.bin));\nassert.equal('fallback', mime.charsets.lookup('application/octet-stream', 'fallback'));\n\nconsole.log('\\nAll tests passed');\n"]},"metadata":{},"sourceType":"script"}