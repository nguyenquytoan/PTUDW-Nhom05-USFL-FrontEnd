{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Observable_1 = require(\"../Observable\");\n\nvar Notification_1 = require(\"../Notification\");\n\nvar ColdObservable_1 = require(\"./ColdObservable\");\n\nvar HotObservable_1 = require(\"./HotObservable\");\n\nvar SubscriptionLog_1 = require(\"./SubscriptionLog\");\n\nvar VirtualTimeScheduler_1 = require(\"../scheduler/VirtualTimeScheduler\");\n\nvar AsyncScheduler_1 = require(\"../scheduler/AsyncScheduler\");\n\nvar defaultMaxFrame = 750;\n\nvar TestScheduler = function (_super) {\n  __extends(TestScheduler, _super);\n\n  function TestScheduler(assertDeepEqual) {\n    var _this = _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame) || this;\n\n    _this.assertDeepEqual = assertDeepEqual;\n    _this.hotObservables = [];\n    _this.coldObservables = [];\n    _this.flushTests = [];\n    _this.runMode = false;\n    return _this;\n  }\n\n  TestScheduler.prototype.createTime = function (marbles) {\n    var indexOf = marbles.indexOf('|');\n\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n\n    return indexOf * TestScheduler.frameTimeFactor;\n  };\n\n  TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n\n    var messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);\n    var cold = new ColdObservable_1.ColdObservable(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  };\n\n  TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n\n    var messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);\n    var subject = new HotObservable_1.HotObservable(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  };\n\n  TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n    var _this = this;\n\n    var messages = [];\n    observable.subscribe(function (value) {\n      messages.push({\n        frame: _this.frame - outerFrame,\n        notification: Notification_1.Notification.createNext(value)\n      });\n    }, function (err) {\n      messages.push({\n        frame: _this.frame - outerFrame,\n        notification: Notification_1.Notification.createError(err)\n      });\n    }, function () {\n      messages.push({\n        frame: _this.frame - outerFrame,\n        notification: Notification_1.Notification.createComplete()\n      });\n    });\n    return messages;\n  };\n\n  TestScheduler.prototype.expectObservable = function (observable, subscriptionMarbles) {\n    var _this = this;\n\n    if (subscriptionMarbles === void 0) {\n      subscriptionMarbles = null;\n    }\n\n    var actual = [];\n    var flushTest = {\n      actual: actual,\n      ready: false\n    };\n    var subscriptionParsed = TestScheduler.parseMarblesAsSubscriptions(subscriptionMarbles, this.runMode);\n    var subscriptionFrame = subscriptionParsed.subscribedFrame === Number.POSITIVE_INFINITY ? 0 : subscriptionParsed.subscribedFrame;\n    var unsubscriptionFrame = subscriptionParsed.unsubscribedFrame;\n    var subscription;\n    this.schedule(function () {\n      subscription = observable.subscribe(function (x) {\n        var value = x;\n\n        if (x instanceof Observable_1.Observable) {\n          value = _this.materializeInnerObservable(value, _this.frame);\n        }\n\n        actual.push({\n          frame: _this.frame,\n          notification: Notification_1.Notification.createNext(value)\n        });\n      }, function (err) {\n        actual.push({\n          frame: _this.frame,\n          notification: Notification_1.Notification.createError(err)\n        });\n      }, function () {\n        actual.push({\n          frame: _this.frame,\n          notification: Notification_1.Notification.createComplete()\n        });\n      });\n    }, subscriptionFrame);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(function () {\n        return subscription.unsubscribe();\n      }, unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n    var runMode = this.runMode;\n    return {\n      toBe: function (marbles, values, errorValue) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true, runMode);\n      }\n    };\n  };\n\n  TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n    var flushTest = {\n      actual: actualSubscriptionLogs,\n      ready: false\n    };\n    this.flushTests.push(flushTest);\n    var runMode = this.runMode;\n    return {\n      toBe: function (marbles) {\n        var marblesArray = typeof marbles === 'string' ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(function (marbles) {\n          return TestScheduler.parseMarblesAsSubscriptions(marbles, runMode);\n        });\n      }\n    };\n  };\n\n  TestScheduler.prototype.flush = function () {\n    var _this = this;\n\n    var hotObservables = this.hotObservables;\n\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    _super.prototype.flush.call(this);\n\n    this.flushTests = this.flushTests.filter(function (test) {\n      if (test.ready) {\n        _this.assertDeepEqual(test.actual, test.expected);\n\n        return false;\n      }\n\n      return true;\n    });\n  };\n\n  TestScheduler.parseMarblesAsSubscriptions = function (marbles, runMode) {\n    var _this = this;\n\n    if (runMode === void 0) {\n      runMode = false;\n    }\n\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n\n    var len = marbles.length;\n    var groupStart = -1;\n    var subscriptionFrame = Number.POSITIVE_INFINITY;\n    var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n    var frame = 0;\n\n    var _loop_1 = function (i) {\n      var nextFrame = frame;\n\n      var advanceFrameBy = function (count) {\n        nextFrame += count * _this.frameTimeFactor;\n      };\n\n      var c = marbles[i];\n\n      switch (c) {\n        case ' ':\n          if (!runMode) {\n            advanceFrameBy(1);\n          }\n\n          break;\n\n        case '-':\n          advanceFrameBy(1);\n          break;\n\n        case '(':\n          groupStart = frame;\n          advanceFrameBy(1);\n          break;\n\n        case ')':\n          groupStart = -1;\n          advanceFrameBy(1);\n          break;\n\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' + 'subscription marble diagram. There can only be one.');\n          }\n\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          advanceFrameBy(1);\n          break;\n\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' + 'subscription marble diagram. There can only be one.');\n          }\n\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n\n        default:\n          if (runMode && c.match(/^[0-9]$/)) {\n            if (i === 0 || marbles[i - 1] === ' ') {\n              var buffer = marbles.slice(i);\n              var match = buffer.match(/^([0-9]+(?:\\.[0-9]+)?)(ms|s|m) /);\n\n              if (match) {\n                i += match[0].length - 1;\n                var duration = parseFloat(match[1]);\n                var unit = match[2];\n                var durationInMs = void 0;\n\n                switch (unit) {\n                  case 'ms':\n                    durationInMs = duration;\n                    break;\n\n                  case 's':\n                    durationInMs = duration * 1000;\n                    break;\n\n                  case 'm':\n                    durationInMs = duration * 1000 * 60;\n                    break;\n\n                  default:\n                    break;\n                }\n\n                advanceFrameBy(durationInMs / this_1.frameTimeFactor);\n                break;\n              }\n            }\n          }\n\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' + 'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n\n      frame = nextFrame;\n      out_i_1 = i;\n    };\n\n    var this_1 = this,\n        out_i_1;\n\n    for (var i = 0; i < len; i++) {\n      _loop_1(i);\n\n      i = out_i_1;\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  };\n\n  TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables, runMode) {\n    var _this = this;\n\n    if (materializeInnerObservables === void 0) {\n      materializeInnerObservables = false;\n    }\n\n    if (runMode === void 0) {\n      runMode = false;\n    }\n\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' + 'unsubscription marker \"!\"');\n    }\n\n    var len = marbles.length;\n    var testMessages = [];\n    var subIndex = runMode ? marbles.replace(/^[ ]+/, '').indexOf('^') : marbles.indexOf('^');\n    var frame = subIndex === -1 ? 0 : subIndex * -this.frameTimeFactor;\n    var getValue = typeof values !== 'object' ? function (x) {\n      return x;\n    } : function (x) {\n      if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {\n        return values[x].messages;\n      }\n\n      return values[x];\n    };\n    var groupStart = -1;\n\n    var _loop_2 = function (i) {\n      var nextFrame = frame;\n\n      var advanceFrameBy = function (count) {\n        nextFrame += count * _this.frameTimeFactor;\n      };\n\n      var notification = void 0;\n      var c = marbles[i];\n\n      switch (c) {\n        case ' ':\n          if (!runMode) {\n            advanceFrameBy(1);\n          }\n\n          break;\n\n        case '-':\n          advanceFrameBy(1);\n          break;\n\n        case '(':\n          groupStart = frame;\n          advanceFrameBy(1);\n          break;\n\n        case ')':\n          groupStart = -1;\n          advanceFrameBy(1);\n          break;\n\n        case '|':\n          notification = Notification_1.Notification.createComplete();\n          advanceFrameBy(1);\n          break;\n\n        case '^':\n          advanceFrameBy(1);\n          break;\n\n        case '#':\n          notification = Notification_1.Notification.createError(errorValue || 'error');\n          advanceFrameBy(1);\n          break;\n\n        default:\n          if (runMode && c.match(/^[0-9]$/)) {\n            if (i === 0 || marbles[i - 1] === ' ') {\n              var buffer = marbles.slice(i);\n              var match = buffer.match(/^([0-9]+(?:\\.[0-9]+)?)(ms|s|m) /);\n\n              if (match) {\n                i += match[0].length - 1;\n                var duration = parseFloat(match[1]);\n                var unit = match[2];\n                var durationInMs = void 0;\n\n                switch (unit) {\n                  case 'ms':\n                    durationInMs = duration;\n                    break;\n\n                  case 's':\n                    durationInMs = duration * 1000;\n                    break;\n\n                  case 'm':\n                    durationInMs = duration * 1000 * 60;\n                    break;\n\n                  default:\n                    break;\n                }\n\n                advanceFrameBy(durationInMs / this_2.frameTimeFactor);\n                break;\n              }\n            }\n          }\n\n          notification = Notification_1.Notification.createNext(getValue(c));\n          advanceFrameBy(1);\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({\n          frame: groupStart > -1 ? groupStart : frame,\n          notification: notification\n        });\n      }\n\n      frame = nextFrame;\n      out_i_2 = i;\n    };\n\n    var this_2 = this,\n        out_i_2;\n\n    for (var i = 0; i < len; i++) {\n      _loop_2(i);\n\n      i = out_i_2;\n    }\n\n    return testMessages;\n  };\n\n  TestScheduler.prototype.run = function (callback) {\n    var prevFrameTimeFactor = TestScheduler.frameTimeFactor;\n    var prevMaxFrames = this.maxFrames;\n    TestScheduler.frameTimeFactor = 1;\n    this.maxFrames = Number.POSITIVE_INFINITY;\n    this.runMode = true;\n    AsyncScheduler_1.AsyncScheduler.delegate = this;\n    var helpers = {\n      cold: this.createColdObservable.bind(this),\n      hot: this.createHotObservable.bind(this),\n      flush: this.flush.bind(this),\n      expectObservable: this.expectObservable.bind(this),\n      expectSubscriptions: this.expectSubscriptions.bind(this)\n    };\n\n    try {\n      var ret = callback(helpers);\n      this.flush();\n      return ret;\n    } finally {\n      TestScheduler.frameTimeFactor = prevFrameTimeFactor;\n      this.maxFrames = prevMaxFrames;\n      this.runMode = false;\n      AsyncScheduler_1.AsyncScheduler.delegate = undefined;\n    }\n  };\n\n  return TestScheduler;\n}(VirtualTimeScheduler_1.VirtualTimeScheduler);\n\nexports.TestScheduler = TestScheduler;","map":{"version":3,"sources":["../../src/internal/testing/TestScheduler.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"../Observable\");\nvar Notification_1 = require(\"../Notification\");\nvar ColdObservable_1 = require(\"./ColdObservable\");\nvar HotObservable_1 = require(\"./HotObservable\");\nvar SubscriptionLog_1 = require(\"./SubscriptionLog\");\nvar VirtualTimeScheduler_1 = require(\"../scheduler/VirtualTimeScheduler\");\nvar AsyncScheduler_1 = require(\"../scheduler/AsyncScheduler\");\nvar defaultMaxFrame = 750;\nvar TestScheduler = (function (_super) {\n    __extends(TestScheduler, _super);\n    function TestScheduler(assertDeepEqual) {\n        var _this = _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame) || this;\n        _this.assertDeepEqual = assertDeepEqual;\n        _this.hotObservables = [];\n        _this.coldObservables = [];\n        _this.flushTests = [];\n        _this.runMode = false;\n        return _this;\n    }\n    TestScheduler.prototype.createTime = function (marbles) {\n        var indexOf = marbles.indexOf('|');\n        if (indexOf === -1) {\n            throw new Error('marble diagram for time should have a completion marker \"|\"');\n        }\n        return indexOf * TestScheduler.frameTimeFactor;\n    };\n    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n        if (marbles.indexOf('^') !== -1) {\n            throw new Error('cold observable cannot have subscription offset \"^\"');\n        }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('cold observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);\n        var cold = new ColdObservable_1.ColdObservable(messages, this);\n        this.coldObservables.push(cold);\n        return cold;\n    };\n    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('hot observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);\n        var subject = new HotObservable_1.HotObservable(messages, this);\n        this.hotObservables.push(subject);\n        return subject;\n    };\n    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n        var _this = this;\n        var messages = [];\n        observable.subscribe(function (value) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });\n        }, function (err) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });\n        }, function () {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });\n        });\n        return messages;\n    };\n    TestScheduler.prototype.expectObservable = function (observable, subscriptionMarbles) {\n        var _this = this;\n        if (subscriptionMarbles === void 0) { subscriptionMarbles = null; }\n        var actual = [];\n        var flushTest = { actual: actual, ready: false };\n        var subscriptionParsed = TestScheduler.parseMarblesAsSubscriptions(subscriptionMarbles, this.runMode);\n        var subscriptionFrame = subscriptionParsed.subscribedFrame === Number.POSITIVE_INFINITY ?\n            0 : subscriptionParsed.subscribedFrame;\n        var unsubscriptionFrame = subscriptionParsed.unsubscribedFrame;\n        var subscription;\n        this.schedule(function () {\n            subscription = observable.subscribe(function (x) {\n                var value = x;\n                if (x instanceof Observable_1.Observable) {\n                    value = _this.materializeInnerObservable(value, _this.frame);\n                }\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });\n            }, function (err) {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });\n            }, function () {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });\n            });\n        }, subscriptionFrame);\n        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);\n        }\n        this.flushTests.push(flushTest);\n        var runMode = this.runMode;\n        return {\n            toBe: function (marbles, values, errorValue) {\n                flushTest.ready = true;\n                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true, runMode);\n            }\n        };\n    };\n    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n        var flushTest = { actual: actualSubscriptionLogs, ready: false };\n        this.flushTests.push(flushTest);\n        var runMode = this.runMode;\n        return {\n            toBe: function (marbles) {\n                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n                flushTest.ready = true;\n                flushTest.expected = marblesArray.map(function (marbles) {\n                    return TestScheduler.parseMarblesAsSubscriptions(marbles, runMode);\n                });\n            }\n        };\n    };\n    TestScheduler.prototype.flush = function () {\n        var _this = this;\n        var hotObservables = this.hotObservables;\n        while (hotObservables.length > 0) {\n            hotObservables.shift().setup();\n        }\n        _super.prototype.flush.call(this);\n        this.flushTests = this.flushTests.filter(function (test) {\n            if (test.ready) {\n                _this.assertDeepEqual(test.actual, test.expected);\n                return false;\n            }\n            return true;\n        });\n    };\n    TestScheduler.parseMarblesAsSubscriptions = function (marbles, runMode) {\n        var _this = this;\n        if (runMode === void 0) { runMode = false; }\n        if (typeof marbles !== 'string') {\n            return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);\n        }\n        var len = marbles.length;\n        var groupStart = -1;\n        var subscriptionFrame = Number.POSITIVE_INFINITY;\n        var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n        var frame = 0;\n        var _loop_1 = function (i) {\n            var nextFrame = frame;\n            var advanceFrameBy = function (count) {\n                nextFrame += count * _this.frameTimeFactor;\n            };\n            var c = marbles[i];\n            switch (c) {\n                case ' ':\n                    if (!runMode) {\n                        advanceFrameBy(1);\n                    }\n                    break;\n                case '-':\n                    advanceFrameBy(1);\n                    break;\n                case '(':\n                    groupStart = frame;\n                    advanceFrameBy(1);\n                    break;\n                case ')':\n                    groupStart = -1;\n                    advanceFrameBy(1);\n                    break;\n                case '^':\n                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    advanceFrameBy(1);\n                    break;\n                case '!':\n                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                default:\n                    if (runMode && c.match(/^[0-9]$/)) {\n                        if (i === 0 || marbles[i - 1] === ' ') {\n                            var buffer = marbles.slice(i);\n                            var match = buffer.match(/^([0-9]+(?:\\.[0-9]+)?)(ms|s|m) /);\n                            if (match) {\n                                i += match[0].length - 1;\n                                var duration = parseFloat(match[1]);\n                                var unit = match[2];\n                                var durationInMs = void 0;\n                                switch (unit) {\n                                    case 'ms':\n                                        durationInMs = duration;\n                                        break;\n                                    case 's':\n                                        durationInMs = duration * 1000;\n                                        break;\n                                    case 'm':\n                                        durationInMs = duration * 1000 * 60;\n                                        break;\n                                    default:\n                                        break;\n                                }\n                                advanceFrameBy(durationInMs / this_1.frameTimeFactor);\n                                break;\n                            }\n                        }\n                    }\n                    throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n            }\n            frame = nextFrame;\n            out_i_1 = i;\n        };\n        var this_1 = this, out_i_1;\n        for (var i = 0; i < len; i++) {\n            _loop_1(i);\n            i = out_i_1;\n        }\n        if (unsubscriptionFrame < 0) {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);\n        }\n        else {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n        }\n    };\n    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables, runMode) {\n        var _this = this;\n        if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }\n        if (runMode === void 0) { runMode = false; }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('conventional marble diagrams cannot have the ' +\n                'unsubscription marker \"!\"');\n        }\n        var len = marbles.length;\n        var testMessages = [];\n        var subIndex = runMode ? marbles.replace(/^[ ]+/, '').indexOf('^') : marbles.indexOf('^');\n        var frame = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n        var getValue = typeof values !== 'object' ?\n            function (x) { return x; } :\n            function (x) {\n                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {\n                    return values[x].messages;\n                }\n                return values[x];\n            };\n        var groupStart = -1;\n        var _loop_2 = function (i) {\n            var nextFrame = frame;\n            var advanceFrameBy = function (count) {\n                nextFrame += count * _this.frameTimeFactor;\n            };\n            var notification = void 0;\n            var c = marbles[i];\n            switch (c) {\n                case ' ':\n                    if (!runMode) {\n                        advanceFrameBy(1);\n                    }\n                    break;\n                case '-':\n                    advanceFrameBy(1);\n                    break;\n                case '(':\n                    groupStart = frame;\n                    advanceFrameBy(1);\n                    break;\n                case ')':\n                    groupStart = -1;\n                    advanceFrameBy(1);\n                    break;\n                case '|':\n                    notification = Notification_1.Notification.createComplete();\n                    advanceFrameBy(1);\n                    break;\n                case '^':\n                    advanceFrameBy(1);\n                    break;\n                case '#':\n                    notification = Notification_1.Notification.createError(errorValue || 'error');\n                    advanceFrameBy(1);\n                    break;\n                default:\n                    if (runMode && c.match(/^[0-9]$/)) {\n                        if (i === 0 || marbles[i - 1] === ' ') {\n                            var buffer = marbles.slice(i);\n                            var match = buffer.match(/^([0-9]+(?:\\.[0-9]+)?)(ms|s|m) /);\n                            if (match) {\n                                i += match[0].length - 1;\n                                var duration = parseFloat(match[1]);\n                                var unit = match[2];\n                                var durationInMs = void 0;\n                                switch (unit) {\n                                    case 'ms':\n                                        durationInMs = duration;\n                                        break;\n                                    case 's':\n                                        durationInMs = duration * 1000;\n                                        break;\n                                    case 'm':\n                                        durationInMs = duration * 1000 * 60;\n                                        break;\n                                    default:\n                                        break;\n                                }\n                                advanceFrameBy(durationInMs / this_2.frameTimeFactor);\n                                break;\n                            }\n                        }\n                    }\n                    notification = Notification_1.Notification.createNext(getValue(c));\n                    advanceFrameBy(1);\n                    break;\n            }\n            if (notification) {\n                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });\n            }\n            frame = nextFrame;\n            out_i_2 = i;\n        };\n        var this_2 = this, out_i_2;\n        for (var i = 0; i < len; i++) {\n            _loop_2(i);\n            i = out_i_2;\n        }\n        return testMessages;\n    };\n    TestScheduler.prototype.run = function (callback) {\n        var prevFrameTimeFactor = TestScheduler.frameTimeFactor;\n        var prevMaxFrames = this.maxFrames;\n        TestScheduler.frameTimeFactor = 1;\n        this.maxFrames = Number.POSITIVE_INFINITY;\n        this.runMode = true;\n        AsyncScheduler_1.AsyncScheduler.delegate = this;\n        var helpers = {\n            cold: this.createColdObservable.bind(this),\n            hot: this.createHotObservable.bind(this),\n            flush: this.flush.bind(this),\n            expectObservable: this.expectObservable.bind(this),\n            expectSubscriptions: this.expectSubscriptions.bind(this),\n        };\n        try {\n            var ret = callback(helpers);\n            this.flush();\n            return ret;\n        }\n        finally {\n            TestScheduler.frameTimeFactor = prevFrameTimeFactor;\n            this.maxFrames = prevMaxFrames;\n            this.runMode = false;\n            AsyncScheduler_1.AsyncScheduler.delegate = undefined;\n        }\n    };\n    return TestScheduler;\n}(VirtualTimeScheduler_1.VirtualTimeScheduler));\nexports.TestScheduler = TestScheduler;\n//# sourceMappingURL=TestScheduler.js.map"]},"metadata":{},"sourceType":"script"}