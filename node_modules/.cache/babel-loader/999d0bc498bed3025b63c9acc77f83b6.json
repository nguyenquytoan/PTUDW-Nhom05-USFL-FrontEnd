{"ast":null,"code":"'use strict';\n\nmodule.exports = function (trimEnd, t) {\n  t.test('normal cases', function (st) {\n    st.equal(trimEnd(' \\t\\na \\t\\n'), ' \\t\\na', 'strips whitespace off the left side');\n    st.equal(trimEnd('a'), 'a', 'noop when no whitespace');\n    var allWhitespaceChars = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n    st.equal(trimEnd(allWhitespaceChars + 'a' + allWhitespaceChars), allWhitespaceChars + 'a', 'all expected whitespace chars are trimmed');\n    st.end();\n  }); // see https://codeblog.jonskeet.uk/2014/12/01/when-is-an-identifier-not-an-identifier-attack-of-the-mongolian-vowel-separator/\n\n  var mongolianVowelSeparator = '\\u180E';\n  t.test('unicode >= 4 && < 6.3', {\n    skip: !/^\\s$/.test(mongolianVowelSeparator)\n  }, function (st) {\n    st.equal(trimEnd(mongolianVowelSeparator + 'a' + mongolianVowelSeparator), mongolianVowelSeparator + 'a', 'mongolian vowel separator is whitespace');\n    st.end();\n  });\n  t.test('zero-width spaces', function (st) {\n    var zeroWidth = '\\u200b';\n    st.equal(trimEnd(zeroWidth), zeroWidth, 'zero width space does not trim');\n    st.end();\n  });\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/string.prototype.trimend/test/tests.js"],"names":["module","exports","trimEnd","t","test","st","equal","allWhitespaceChars","end","mongolianVowelSeparator","skip","zeroWidth"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmBC,CAAnB,EAAsB;AACtCA,EAAAA,CAAC,CAACC,IAAF,CAAO,cAAP,EAAuB,UAAUC,EAAV,EAAc;AACpCA,IAAAA,EAAE,CAACC,KAAH,CAASJ,OAAO,CAAC,aAAD,CAAhB,EAAiC,QAAjC,EAA2C,qCAA3C;AACAG,IAAAA,EAAE,CAACC,KAAH,CAASJ,OAAO,CAAC,GAAD,CAAhB,EAAuB,GAAvB,EAA4B,yBAA5B;AAEA,QAAIK,kBAAkB,GAAG,0IAAzB;AACAF,IAAAA,EAAE,CAACC,KAAH,CAASJ,OAAO,CAACK,kBAAkB,GAAG,GAArB,GAA2BA,kBAA5B,CAAhB,EAAiEA,kBAAkB,GAAG,GAAtF,EAA2F,2CAA3F;AAEAF,IAAAA,EAAE,CAACG,GAAH;AACA,GARD,EADsC,CAWtC;;AACA,MAAIC,uBAAuB,GAAG,QAA9B;AACAN,EAAAA,CAAC,CAACC,IAAF,CAAO,uBAAP,EAAgC;AAAEM,IAAAA,IAAI,EAAE,CAAE,MAAD,CAASN,IAAT,CAAcK,uBAAd;AAAT,GAAhC,EAAmF,UAAUJ,EAAV,EAAc;AAChGA,IAAAA,EAAE,CAACC,KAAH,CAASJ,OAAO,CAACO,uBAAuB,GAAG,GAA1B,GAAgCA,uBAAjC,CAAhB,EAA2EA,uBAAuB,GAAG,GAArG,EAA0G,yCAA1G;AACAJ,IAAAA,EAAE,CAACG,GAAH;AACA,GAHD;AAKAL,EAAAA,CAAC,CAACC,IAAF,CAAO,mBAAP,EAA4B,UAAUC,EAAV,EAAc;AACzC,QAAIM,SAAS,GAAG,QAAhB;AACAN,IAAAA,EAAE,CAACC,KAAH,CAASJ,OAAO,CAACS,SAAD,CAAhB,EAA6BA,SAA7B,EAAwC,gCAAxC;AACAN,IAAAA,EAAE,CAACG,GAAH;AACA,GAJD;AAKA,CAvBD","sourcesContent":["'use strict';\n\nmodule.exports = function (trimEnd, t) {\n\tt.test('normal cases', function (st) {\n\t\tst.equal(trimEnd(' \\t\\na \\t\\n'), ' \\t\\na', 'strips whitespace off the left side');\n\t\tst.equal(trimEnd('a'), 'a', 'noop when no whitespace');\n\n\t\tvar allWhitespaceChars = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n\t\tst.equal(trimEnd(allWhitespaceChars + 'a' + allWhitespaceChars), allWhitespaceChars + 'a', 'all expected whitespace chars are trimmed');\n\n\t\tst.end();\n\t});\n\n\t// see https://codeblog.jonskeet.uk/2014/12/01/when-is-an-identifier-not-an-identifier-attack-of-the-mongolian-vowel-separator/\n\tvar mongolianVowelSeparator = '\\u180E';\n\tt.test('unicode >= 4 && < 6.3', { skip: !(/^\\s$/).test(mongolianVowelSeparator) }, function (st) {\n\t\tst.equal(trimEnd(mongolianVowelSeparator + 'a' + mongolianVowelSeparator), mongolianVowelSeparator + 'a', 'mongolian vowel separator is whitespace');\n\t\tst.end();\n\t});\n\n\tt.test('zero-width spaces', function (st) {\n\t\tvar zeroWidth = '\\u200b';\n\t\tst.equal(trimEnd(zeroWidth), zeroWidth, 'zero width space does not trim');\n\t\tst.end();\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}