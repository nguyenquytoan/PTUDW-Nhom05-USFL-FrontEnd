{"ast":null,"code":"'use strict'; // TODO: Use the `URL` global when targeting Node.js 10\n\nconst URLParser = typeof URL === 'undefined' ? require('url').URL : URL;\n\nconst testParameter = (name, filters) => {\n  return filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);\n};\n\nmodule.exports = (urlString, opts) => {\n  opts = Object.assign({\n    defaultProtocol: 'http:',\n    normalizeProtocol: true,\n    forceHttp: false,\n    forceHttps: false,\n    stripHash: true,\n    stripWWW: true,\n    removeQueryParameters: [/^utm_\\w+/i],\n    removeTrailingSlash: true,\n    removeDirectoryIndex: false,\n    sortQueryParameters: true\n  }, opts); // Backwards compatibility\n\n  if (Reflect.has(opts, 'normalizeHttps')) {\n    opts.forceHttp = opts.normalizeHttps;\n  }\n\n  if (Reflect.has(opts, 'normalizeHttp')) {\n    opts.forceHttps = opts.normalizeHttp;\n  }\n\n  if (Reflect.has(opts, 'stripFragment')) {\n    opts.stripHash = opts.stripFragment;\n  }\n\n  urlString = urlString.trim();\n  const hasRelativeProtocol = urlString.startsWith('//');\n  const isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString); // Prepend protocol\n\n  if (!isRelativeUrl) {\n    urlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, opts.defaultProtocol);\n  }\n\n  const urlObj = new URLParser(urlString);\n\n  if (opts.forceHttp && opts.forceHttps) {\n    throw new Error('The `forceHttp` and `forceHttps` options cannot be used together');\n  }\n\n  if (opts.forceHttp && urlObj.protocol === 'https:') {\n    urlObj.protocol = 'http:';\n  }\n\n  if (opts.forceHttps && urlObj.protocol === 'http:') {\n    urlObj.protocol = 'https:';\n  } // Remove hash\n\n\n  if (opts.stripHash) {\n    urlObj.hash = '';\n  } // Remove duplicate slashes if not preceded by a protocol\n\n\n  if (urlObj.pathname) {\n    // TODO: Use the following instead when targeting Node.js 10\n    // `urlObj.pathname = urlObj.pathname.replace(/(?<!https?:)\\/{2,}/g, '/');`\n    urlObj.pathname = urlObj.pathname.replace(/((?![https?:]).)\\/{2,}/g, (_, p1) => {\n      if (/^(?!\\/)/g.test(p1)) {\n        return `${p1}/`;\n      }\n\n      return '/';\n    });\n  } // Decode URI octets\n\n\n  if (urlObj.pathname) {\n    urlObj.pathname = decodeURI(urlObj.pathname);\n  } // Remove directory index\n\n\n  if (opts.removeDirectoryIndex === true) {\n    opts.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n  }\n\n  if (Array.isArray(opts.removeDirectoryIndex) && opts.removeDirectoryIndex.length > 0) {\n    let pathComponents = urlObj.pathname.split('/');\n    const lastComponent = pathComponents[pathComponents.length - 1];\n\n    if (testParameter(lastComponent, opts.removeDirectoryIndex)) {\n      pathComponents = pathComponents.slice(0, pathComponents.length - 1);\n      urlObj.pathname = pathComponents.slice(1).join('/') + '/';\n    }\n  }\n\n  if (urlObj.hostname) {\n    // Remove trailing dot\n    urlObj.hostname = urlObj.hostname.replace(/\\.$/, ''); // Remove `www.`\n    // eslint-disable-next-line no-useless-escape\n\n    if (opts.stripWWW && /^www\\.([a-z\\-\\d]{2,63})\\.([a-z\\.]{2,5})$/.test(urlObj.hostname)) {\n      // Each label should be max 63 at length (min: 2).\n      // The extension should be max 5 at length (min: 2).\n      // Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names\n      urlObj.hostname = urlObj.hostname.replace(/^www\\./, '');\n    }\n  } // Remove query unwanted parameters\n\n\n  if (Array.isArray(opts.removeQueryParameters)) {\n    for (const key of [...urlObj.searchParams.keys()]) {\n      if (testParameter(key, opts.removeQueryParameters)) {\n        urlObj.searchParams.delete(key);\n      }\n    }\n  } // Sort query parameters\n\n\n  if (opts.sortQueryParameters) {\n    urlObj.searchParams.sort();\n  } // Take advantage of many of the Node `url` normalizations\n\n\n  urlString = urlObj.toString(); // Remove ending `/`\n\n  if (opts.removeTrailingSlash || urlObj.pathname === '/') {\n    urlString = urlString.replace(/\\/$/, '');\n  } // Restore relative protocol, if applicable\n\n\n  if (hasRelativeProtocol && !opts.normalizeProtocol) {\n    urlString = urlString.replace(/^http:\\/\\//, '//');\n  }\n\n  return urlString;\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-normalize-url/node_modules/normalize-url/index.js"],"names":["URLParser","URL","require","testParameter","name","filters","some","filter","RegExp","test","module","exports","urlString","opts","Object","assign","defaultProtocol","normalizeProtocol","forceHttp","forceHttps","stripHash","stripWWW","removeQueryParameters","removeTrailingSlash","removeDirectoryIndex","sortQueryParameters","Reflect","has","normalizeHttps","normalizeHttp","stripFragment","trim","hasRelativeProtocol","startsWith","isRelativeUrl","replace","urlObj","Error","protocol","hash","pathname","_","p1","decodeURI","Array","isArray","length","pathComponents","split","lastComponent","slice","join","hostname","key","searchParams","keys","delete","sort","toString"],"mappings":"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","sourcesContent":["'use strict';\n// TODO: Use the `URL` global when targeting Node.js 10\nconst URLParser = typeof URL === 'undefined' ? require('url').URL : URL;\n\nconst testParameter = (name, filters) => {\n\treturn filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);\n};\n\nmodule.exports = (urlString, opts) => {\n\topts = Object.assign({\n\t\tdefaultProtocol: 'http:',\n\t\tnormalizeProtocol: true,\n\t\tforceHttp: false,\n\t\tforceHttps: false,\n\t\tstripHash: true,\n\t\tstripWWW: true,\n\t\tremoveQueryParameters: [/^utm_\\w+/i],\n\t\tremoveTrailingSlash: true,\n\t\tremoveDirectoryIndex: false,\n\t\tsortQueryParameters: true\n\t}, opts);\n\n\t// Backwards compatibility\n\tif (Reflect.has(opts, 'normalizeHttps')) {\n\t\topts.forceHttp = opts.normalizeHttps;\n\t}\n\n\tif (Reflect.has(opts, 'normalizeHttp')) {\n\t\topts.forceHttps = opts.normalizeHttp;\n\t}\n\n\tif (Reflect.has(opts, 'stripFragment')) {\n\t\topts.stripHash = opts.stripFragment;\n\t}\n\n\turlString = urlString.trim();\n\n\tconst hasRelativeProtocol = urlString.startsWith('//');\n\tconst isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString);\n\n\t// Prepend protocol\n\tif (!isRelativeUrl) {\n\t\turlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, opts.defaultProtocol);\n\t}\n\n\tconst urlObj = new URLParser(urlString);\n\n\tif (opts.forceHttp && opts.forceHttps) {\n\t\tthrow new Error('The `forceHttp` and `forceHttps` options cannot be used together');\n\t}\n\n\tif (opts.forceHttp && urlObj.protocol === 'https:') {\n\t\turlObj.protocol = 'http:';\n\t}\n\n\tif (opts.forceHttps && urlObj.protocol === 'http:') {\n\t\turlObj.protocol = 'https:';\n\t}\n\n\t// Remove hash\n\tif (opts.stripHash) {\n\t\turlObj.hash = '';\n\t}\n\n\t// Remove duplicate slashes if not preceded by a protocol\n\tif (urlObj.pathname) {\n\t\t// TODO: Use the following instead when targeting Node.js 10\n\t\t// `urlObj.pathname = urlObj.pathname.replace(/(?<!https?:)\\/{2,}/g, '/');`\n\t\turlObj.pathname = urlObj.pathname.replace(/((?![https?:]).)\\/{2,}/g, (_, p1) => {\n\t\t\tif (/^(?!\\/)/g.test(p1)) {\n\t\t\t\treturn `${p1}/`;\n\t\t\t}\n\t\t\treturn '/';\n\t\t});\n\t}\n\n\t// Decode URI octets\n\tif (urlObj.pathname) {\n\t\turlObj.pathname = decodeURI(urlObj.pathname);\n\t}\n\n\t// Remove directory index\n\tif (opts.removeDirectoryIndex === true) {\n\t\topts.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n\t}\n\n\tif (Array.isArray(opts.removeDirectoryIndex) && opts.removeDirectoryIndex.length > 0) {\n\t\tlet pathComponents = urlObj.pathname.split('/');\n\t\tconst lastComponent = pathComponents[pathComponents.length - 1];\n\n\t\tif (testParameter(lastComponent, opts.removeDirectoryIndex)) {\n\t\t\tpathComponents = pathComponents.slice(0, pathComponents.length - 1);\n\t\t\turlObj.pathname = pathComponents.slice(1).join('/') + '/';\n\t\t}\n\t}\n\n\tif (urlObj.hostname) {\n\t\t// Remove trailing dot\n\t\turlObj.hostname = urlObj.hostname.replace(/\\.$/, '');\n\n\t\t// Remove `www.`\n\t\t// eslint-disable-next-line no-useless-escape\n\t\tif (opts.stripWWW && /^www\\.([a-z\\-\\d]{2,63})\\.([a-z\\.]{2,5})$/.test(urlObj.hostname)) {\n\t\t\t// Each label should be max 63 at length (min: 2).\n\t\t\t// The extension should be max 5 at length (min: 2).\n\t\t\t// Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names\n\t\t\turlObj.hostname = urlObj.hostname.replace(/^www\\./, '');\n\t\t}\n\t}\n\n\t// Remove query unwanted parameters\n\tif (Array.isArray(opts.removeQueryParameters)) {\n\t\tfor (const key of [...urlObj.searchParams.keys()]) {\n\t\t\tif (testParameter(key, opts.removeQueryParameters)) {\n\t\t\t\turlObj.searchParams.delete(key);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Sort query parameters\n\tif (opts.sortQueryParameters) {\n\t\turlObj.searchParams.sort();\n\t}\n\n\t// Take advantage of many of the Node `url` normalizations\n\turlString = urlObj.toString();\n\n\t// Remove ending `/`\n\tif (opts.removeTrailingSlash || urlObj.pathname === '/') {\n\t\turlString = urlString.replace(/\\/$/, '');\n\t}\n\n\t// Restore relative protocol, if applicable\n\tif (hasRelativeProtocol && !opts.normalizeProtocol) {\n\t\turlString = urlString.replace(/^http:\\/\\//, '//');\n\t}\n\n\treturn urlString;\n};\n"]},"metadata":{},"sourceType":"script"}