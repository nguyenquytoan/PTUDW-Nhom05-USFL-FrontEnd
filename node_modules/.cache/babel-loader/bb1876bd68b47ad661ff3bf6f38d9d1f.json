{"ast":null,"code":"var Buffer = require('buffer').Buffer;\n\nvar fs = require('fs');\n\nvar test = require('tape');\n\nvar UAParser = require('ua-parser-js');\n\nvar http = require('../..');\n\ntest('headers', function (t) {\n  http.get({\n    path: '/testHeaders?Response-Header=bar&Response-Header-2=BAR2',\n    headers: {\n      'Test-Request-Header': 'foo',\n      'Test-Request-Header-2': 'FOO2'\n    }\n  }, function (res) {\n    var rawHeaders = [];\n\n    for (var i = 0; i < res.rawHeaders.length; i += 2) {\n      var lowerKey = res.rawHeaders[i].toLowerCase();\n      if (lowerKey.indexOf('test-') === 0) rawHeaders.push(lowerKey, res.rawHeaders[i + 1]);\n    }\n\n    var header1Pos = rawHeaders.indexOf('test-response-header');\n    t.ok(header1Pos >= 0, 'raw response header 1 present');\n    t.equal(rawHeaders[header1Pos + 1], 'bar', 'raw response header value 1');\n    var header2Pos = rawHeaders.indexOf('test-response-header-2');\n    t.ok(header2Pos >= 0, 'raw response header 2 present');\n    t.equal(rawHeaders[header2Pos + 1], 'BAR2', 'raw response header value 2');\n    t.equal(rawHeaders.length, 4, 'correct number of raw headers');\n    t.equal(res.headers['test-response-header'], 'bar', 'response header 1');\n    t.equal(res.headers['test-response-header-2'], 'BAR2', 'response header 2');\n    var buffers = [];\n    res.on('end', function () {\n      var body = JSON.parse(Buffer.concat(buffers).toString());\n      t.equal(body['test-request-header'], 'foo', 'request header 1');\n      t.equal(body['test-request-header-2'], 'FOO2', 'request header 2');\n      t.equal(Object.keys(body).length, 2, 'correct number of request headers');\n      t.end();\n    });\n    res.on('data', function (data) {\n      buffers.push(data);\n    });\n  });\n});\ntest('arrays of headers', function (t) {\n  http.get({\n    path: '/testHeaders?Response-Header=bar&Response-Header=BAR2',\n    headers: {\n      'Test-Request-Header': ['foo', 'FOO2']\n    }\n  }, function (res) {\n    var rawHeaders = [];\n\n    for (var i = 0; i < res.rawHeaders.length; i += 2) {\n      var lowerKey = res.rawHeaders[i].toLowerCase();\n      if (lowerKey.indexOf('test-') === 0) rawHeaders.push(lowerKey, res.rawHeaders[i + 1]);\n    }\n\n    t.equal(rawHeaders[0], 'test-response-header', 'raw response header present');\n    t.equal(rawHeaders[1], 'bar, BAR2', 'raw response header value');\n    t.equal(rawHeaders.length, 2, 'correct number of raw headers');\n    t.equal(res.headers['test-response-header'], 'bar, BAR2', 'response header');\n    var buffers = [];\n    res.on('end', function () {\n      var body = JSON.parse(Buffer.concat(buffers).toString());\n      t.equal(body['test-request-header'], 'foo,FOO2', 'request headers');\n      t.equal(Object.keys(body).length, 1, 'correct number of request headers');\n      t.end();\n    });\n    res.on('data', function (data) {\n      buffers.push(data);\n    });\n  });\n});\ntest('content-type response header', function (t) {\n  http.get('/testHeaders', function (res) {\n    t.equal(res.headers['content-type'], 'application/json', 'content-type preserved');\n    t.end();\n  });\n});\nvar browser = new UAParser().setUA(navigator.userAgent).getBrowser();\nvar browserName = browser.name;\nvar browserVersion = browser.major;\nvar browserMinorVersion = browser.minor || 0; // The content-type header is broken when 'prefer-streaming' or 'allow-wrong-content-type'\n// is passed in browsers that rely on xhr.overrideMimeType(), namely older chrome, safari 6-10.0, and the stock Android browser\n// Note that Safari 10.0 on iOS 10.3 doesn't need to override the mime type, so the content-type is preserved.\n\nvar wrongMimeType = browserName === 'Chrome' && browserVersion <= 42 || (browserName === 'Safari' || browserName === 'Mobile Safari') && browserVersion >= 6 && (browserVersion < 10 || browserVersion == 10 && browserMinorVersion == 0) || browserName === 'Android Browser';\ntest('content-type response header with forced streaming', function (t) {\n  http.get({\n    path: '/testHeaders',\n    mode: 'prefer-streaming'\n  }, function (res) {\n    if (wrongMimeType) {\n      // allow both the 'wrong' and correct mime type, since sometimes it's impossible to tell which to expect\n      // from the browser version alone (e.g. Safari 10.0 on iOS 10.2 vs iOS 10.3)\n      var contentType = res.headers['content-type'];\n      var correct = contentType === 'text/plain; charset=x-user-defined' || contentType === 'application/json';\n      t.ok(correct, 'content-type either preserved or overridden');\n    } else t.equal(res.headers['content-type'], 'application/json', 'content-type preserved');\n\n    t.end();\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/stream-http/test/browser/headers.js"],"names":["Buffer","require","fs","test","UAParser","http","t","get","path","headers","res","rawHeaders","i","length","lowerKey","toLowerCase","indexOf","push","header1Pos","ok","equal","header2Pos","buffers","on","body","JSON","parse","concat","toString","Object","keys","end","data","browser","setUA","navigator","userAgent","getBrowser","browserName","name","browserVersion","major","browserMinorVersion","minor","wrongMimeType","mode","contentType","correct"],"mappings":"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","sourcesContent":["var Buffer = require('buffer').Buffer\nvar fs = require('fs')\nvar test = require('tape')\nvar UAParser = require('ua-parser-js')\n\nvar http = require('../..')\n\ntest('headers', function (t) {\n\thttp.get({\n\t\tpath: '/testHeaders?Response-Header=bar&Response-Header-2=BAR2',\n\t\theaders: {\n\t\t\t'Test-Request-Header': 'foo',\n\t\t\t'Test-Request-Header-2': 'FOO2'\n\t\t}\n\t}, function (res) {\n\t\tvar rawHeaders = []\n\t\tfor (var i = 0; i < res.rawHeaders.length; i += 2) {\n\t\t\tvar lowerKey = res.rawHeaders[i].toLowerCase()\n\t\t\tif (lowerKey.indexOf('test-') === 0)\n\t\t\t\trawHeaders.push(lowerKey, res.rawHeaders[i + 1])\n\t\t}\n\t\tvar header1Pos = rawHeaders.indexOf('test-response-header')\n\t\tt.ok(header1Pos >= 0, 'raw response header 1 present')\n\t\tt.equal(rawHeaders[header1Pos + 1], 'bar', 'raw response header value 1')\n\t\tvar header2Pos = rawHeaders.indexOf('test-response-header-2')\n\t\tt.ok(header2Pos >= 0, 'raw response header 2 present')\n\t\tt.equal(rawHeaders[header2Pos + 1], 'BAR2', 'raw response header value 2')\n\t\tt.equal(rawHeaders.length, 4, 'correct number of raw headers')\n\n\t\tt.equal(res.headers['test-response-header'], 'bar', 'response header 1')\n\t\tt.equal(res.headers['test-response-header-2'], 'BAR2', 'response header 2')\n\n\t\tvar buffers = []\n\n\t\tres.on('end', function () {\n\t\t\tvar body = JSON.parse(Buffer.concat(buffers).toString())\n\t\t\tt.equal(body['test-request-header'], 'foo', 'request header 1')\n\t\t\tt.equal(body['test-request-header-2'], 'FOO2', 'request header 2')\n\t\t\tt.equal(Object.keys(body).length, 2, 'correct number of request headers')\n\t\t\tt.end()\n\t\t})\n\n\t\tres.on('data', function (data) {\n\t\t\tbuffers.push(data)\n\t\t})\n\t})\n})\n\ntest('arrays of headers', function (t) {\n\thttp.get({\n\t\tpath: '/testHeaders?Response-Header=bar&Response-Header=BAR2',\n\t\theaders: {\n\t\t\t'Test-Request-Header': ['foo', 'FOO2']\n\t\t}\n\t}, function (res) {\n\t\tvar rawHeaders = []\n\t\tfor (var i = 0; i < res.rawHeaders.length; i += 2) {\n\t\t\tvar lowerKey = res.rawHeaders[i].toLowerCase()\n\t\t\tif (lowerKey.indexOf('test-') === 0)\n\t\t\t\trawHeaders.push(lowerKey, res.rawHeaders[i + 1])\n\t\t}\n\t\tt.equal(rawHeaders[0], 'test-response-header', 'raw response header present')\n\t\tt.equal(rawHeaders[1], 'bar, BAR2', 'raw response header value')\n\t\tt.equal(rawHeaders.length, 2, 'correct number of raw headers')\n\n\t\tt.equal(res.headers['test-response-header'], 'bar, BAR2', 'response header')\n\n\t\tvar buffers = []\n\n\t\tres.on('end', function () {\n\t\t\tvar body = JSON.parse(Buffer.concat(buffers).toString())\n\t\t\tt.equal(body['test-request-header'], 'foo,FOO2', 'request headers')\n\t\t\tt.equal(Object.keys(body).length, 1, 'correct number of request headers')\n\t\t\tt.end()\n\t\t})\n\n\t\tres.on('data', function (data) {\n\t\t\tbuffers.push(data)\n\t\t})\n\t})\n})\n\ntest('content-type response header', function (t) {\n\thttp.get('/testHeaders', function (res) {\n\t\tt.equal(res.headers['content-type'], 'application/json', 'content-type preserved')\n\t\tt.end()\n\t})\n})\n\nvar browser = (new UAParser()).setUA(navigator.userAgent).getBrowser()\nvar browserName = browser.name\nvar browserVersion = browser.major\nvar browserMinorVersion = browser.minor || 0\n// The content-type header is broken when 'prefer-streaming' or 'allow-wrong-content-type'\n// is passed in browsers that rely on xhr.overrideMimeType(), namely older chrome, safari 6-10.0, and the stock Android browser\n// Note that Safari 10.0 on iOS 10.3 doesn't need to override the mime type, so the content-type is preserved.\nvar wrongMimeType = ((browserName === 'Chrome' && browserVersion <= 42) ||\n\t((browserName === 'Safari' || browserName === 'Mobile Safari') && browserVersion >= 6 && (browserVersion < 10 || (browserVersion == 10 && browserMinorVersion == 0)))\n\t|| (browserName === 'Android Browser'))\n\ntest('content-type response header with forced streaming', function (t) {\n\thttp.get({\n\t\tpath: '/testHeaders',\n\t\tmode: 'prefer-streaming'\n\t}, function (res) {\n\t\tif (wrongMimeType) {\n\t\t\t// allow both the 'wrong' and correct mime type, since sometimes it's impossible to tell which to expect\n\t\t\t// from the browser version alone (e.g. Safari 10.0 on iOS 10.2 vs iOS 10.3)\n\t\t\tvar contentType = res.headers['content-type']\n\t\t\tvar correct = (contentType === 'text/plain; charset=x-user-defined') || (contentType === 'application/json')\n\t\t\tt.ok(correct, 'content-type either preserved or overridden')\n\t\t} else\n\t\t\tt.equal(res.headers['content-type'], 'application/json', 'content-type preserved')\n\t\tt.end()\n\t})\n})"]},"metadata":{},"sourceType":"script"}