{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _expect = require('expect');\n\nvar _jestSnapshot = require('jest-snapshot');\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Get suppressed errors form  jest-matchers that weren't throw during\n// test execution and add them to the test result, potentially failing\n// a passing test.\n\n\nconst addSuppressedErrors = result => {\n  const _getState = (0, _expect.getState)(),\n        suppressedErrors = _getState.suppressedErrors;\n\n  (0, _expect.setState)({\n    suppressedErrors: []\n  });\n\n  if (suppressedErrors.length) {\n    result.status = 'failed';\n    result.failedExpectations = suppressedErrors.map(error => ({\n      actual: '',\n      // passing error for custom test reporters\n      error,\n      expected: '',\n      matcherName: '',\n      message: error.message,\n      passed: false,\n      stack: error.stack\n    }));\n  }\n};\n\nconst addAssertionErrors = result => {\n  const assertionErrors = (0, _expect.extractExpectedAssertionsErrors)();\n\n  if (assertionErrors.length) {\n    const jasmineErrors = assertionErrors.map(({\n      actual,\n      error,\n      expected\n    }) => ({\n      actual,\n      expected,\n      message: error.stack,\n      passed: false\n    }));\n    result.status = 'failed';\n    result.failedExpectations = result.failedExpectations.concat(jasmineErrors);\n  }\n};\n\nconst patchJasmine = () => {\n  global.jasmine.Spec = (realSpec => {\n    class Spec extends realSpec {\n      constructor(attr) {\n        const resultCallback = attr.resultCallback;\n\n        attr.resultCallback = function (result) {\n          addSuppressedErrors(result);\n          addAssertionErrors(result);\n          resultCallback.call(attr, result);\n        };\n\n        const onStart = attr.onStart;\n\n        attr.onStart = context => {\n          (0, _expect.setState)({\n            currentTestName: context.getFullName()\n          });\n          onStart && onStart.call(attr, context);\n        };\n\n        super(attr);\n      }\n\n    }\n\n    return Spec;\n  })(global.jasmine.Spec);\n};\n\nvar _default = ({\n  config,\n  globalConfig,\n  localRequire,\n  testPath\n}) => {\n  // Jest tests snapshotSerializers in order preceding built-in serializers.\n  // Therefore, add in reverse because the last added is the first tested.\n  config.snapshotSerializers.concat().reverse().forEach(path => {\n    (0, _jestSnapshot.addSerializer)(localRequire(path));\n  });\n  patchJasmine();\n  const expand = globalConfig.expand,\n        updateSnapshot = globalConfig.updateSnapshot;\n  const snapshotResolver = (0, _jestSnapshot.buildSnapshotResolver)(config);\n  const snapshotPath = snapshotResolver.resolveSnapshotPath(testPath);\n  const snapshotState = new _jestSnapshot.SnapshotState(snapshotPath, {\n    expand,\n    getBabelTraverse: () => require('@babel/traverse').default,\n    getPrettier: () => config.prettierPath ? require(config.prettierPath) : null,\n    updateSnapshot\n  });\n  (0, _expect.setState)({\n    snapshotState,\n    testPath\n  }); // Return it back to the outer scope (test runner outside the VM).\n\n  return snapshotState;\n};\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-jasmine2/build/setup_jest_globals.js"],"names":["Object","defineProperty","exports","value","default","_expect","require","_jestSnapshot","addSuppressedErrors","result","_getState","getState","suppressedErrors","setState","length","status","failedExpectations","map","error","actual","expected","matcherName","message","passed","stack","addAssertionErrors","assertionErrors","extractExpectedAssertionsErrors","jasmineErrors","concat","patchJasmine","global","jasmine","Spec","realSpec","constructor","attr","resultCallback","call","onStart","context","currentTestName","getFullName","_default","config","globalConfig","localRequire","testPath","snapshotSerializers","reverse","forEach","path","addSerializer","expand","updateSnapshot","snapshotResolver","buildSnapshotResolver","snapshotPath","resolveSnapshotPath","snapshotState","SnapshotState","getBabelTraverse","getPrettier","prettierPath"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _expect = require('expect');\n\nvar _jestSnapshot = require('jest-snapshot');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Get suppressed errors form  jest-matchers that weren't throw during\n// test execution and add them to the test result, potentially failing\n// a passing test.\nconst addSuppressedErrors = result => {\n  const _getState = (0, _expect.getState)(),\n    suppressedErrors = _getState.suppressedErrors;\n\n  (0, _expect.setState)({\n    suppressedErrors: []\n  });\n\n  if (suppressedErrors.length) {\n    result.status = 'failed';\n    result.failedExpectations = suppressedErrors.map(error => ({\n      actual: '',\n      // passing error for custom test reporters\n      error,\n      expected: '',\n      matcherName: '',\n      message: error.message,\n      passed: false,\n      stack: error.stack\n    }));\n  }\n};\n\nconst addAssertionErrors = result => {\n  const assertionErrors = (0, _expect.extractExpectedAssertionsErrors)();\n\n  if (assertionErrors.length) {\n    const jasmineErrors = assertionErrors.map(({actual, error, expected}) => ({\n      actual,\n      expected,\n      message: error.stack,\n      passed: false\n    }));\n    result.status = 'failed';\n    result.failedExpectations = result.failedExpectations.concat(jasmineErrors);\n  }\n};\n\nconst patchJasmine = () => {\n  global.jasmine.Spec = (realSpec => {\n    class Spec extends realSpec {\n      constructor(attr) {\n        const resultCallback = attr.resultCallback;\n\n        attr.resultCallback = function(result) {\n          addSuppressedErrors(result);\n          addAssertionErrors(result);\n          resultCallback.call(attr, result);\n        };\n\n        const onStart = attr.onStart;\n\n        attr.onStart = context => {\n          (0, _expect.setState)({\n            currentTestName: context.getFullName()\n          });\n          onStart && onStart.call(attr, context);\n        };\n\n        super(attr);\n      }\n    }\n\n    return Spec;\n  })(global.jasmine.Spec);\n};\n\nvar _default = ({config, globalConfig, localRequire, testPath}) => {\n  // Jest tests snapshotSerializers in order preceding built-in serializers.\n  // Therefore, add in reverse because the last added is the first tested.\n  config.snapshotSerializers\n    .concat()\n    .reverse()\n    .forEach(path => {\n      (0, _jestSnapshot.addSerializer)(localRequire(path));\n    });\n  patchJasmine();\n  const expand = globalConfig.expand,\n    updateSnapshot = globalConfig.updateSnapshot;\n  const snapshotResolver = (0, _jestSnapshot.buildSnapshotResolver)(config);\n  const snapshotPath = snapshotResolver.resolveSnapshotPath(testPath);\n  const snapshotState = new _jestSnapshot.SnapshotState(snapshotPath, {\n    expand,\n    getBabelTraverse: () => require('@babel/traverse').default,\n    getPrettier: () =>\n      config.prettierPath ? require(config.prettierPath) : null,\n    updateSnapshot\n  });\n  (0, _expect.setState)({\n    snapshotState,\n    testPath\n  }); // Return it back to the outer scope (test runner outside the VM).\n\n  return snapshotState;\n};\n\nexports.default = _default;\n"]},"metadata":{},"sourceType":"script"}