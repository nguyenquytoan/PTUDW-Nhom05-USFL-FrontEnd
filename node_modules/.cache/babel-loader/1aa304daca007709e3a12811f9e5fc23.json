{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = function () {\n  return new IgnoreBase();\n}; // A simple implementation of make-array\n\n\nfunction make_array(subject) {\n  return Array.isArray(subject) ? subject : [subject];\n}\n\nvar REGEX_BLANK_LINE = /^\\s+$/;\nvar REGEX_LEADING_EXCAPED_EXCLAMATION = /^\\\\\\!/;\nvar REGEX_LEADING_EXCAPED_HASH = /^\\\\#/;\nvar SLASH = '/';\nvar KEY_IGNORE = typeof Symbol !== 'undefined' ? Symbol.for('node-ignore')\n/* istanbul ignore next */\n: 'node-ignore';\n\nvar IgnoreBase = function () {\n  function IgnoreBase() {\n    _classCallCheck(this, IgnoreBase);\n\n    this._rules = [];\n    this[KEY_IGNORE] = true;\n\n    this._initCache();\n  }\n\n  _createClass(IgnoreBase, [{\n    key: '_initCache',\n    value: function _initCache() {\n      this._cache = {};\n    } // @param {Array.<string>|string|Ignore} pattern\n\n  }, {\n    key: 'add',\n    value: function add(pattern) {\n      this._added = false;\n\n      if (typeof pattern === 'string') {\n        pattern = pattern.split(/\\r?\\n/g);\n      }\n\n      make_array(pattern).forEach(this._addPattern, this); // Some rules have just added to the ignore,\n      // making the behavior changed.\n\n      if (this._added) {\n        this._initCache();\n      }\n\n      return this;\n    } // legacy\n\n  }, {\n    key: 'addPattern',\n    value: function addPattern(pattern) {\n      return this.add(pattern);\n    }\n  }, {\n    key: '_addPattern',\n    value: function _addPattern(pattern) {\n      // #32\n      if (pattern && pattern[KEY_IGNORE]) {\n        this._rules = this._rules.concat(pattern._rules);\n        this._added = true;\n        return;\n      }\n\n      if (this._checkPattern(pattern)) {\n        var rule = this._createRule(pattern);\n\n        this._added = true;\n\n        this._rules.push(rule);\n      }\n    }\n  }, {\n    key: '_checkPattern',\n    value: function _checkPattern(pattern) {\n      // > A blank line matches no files, so it can serve as a separator for readability.\n      return pattern && typeof pattern === 'string' && !REGEX_BLANK_LINE.test(pattern) // > A line starting with # serves as a comment.\n      && pattern.indexOf('#') !== 0;\n    }\n  }, {\n    key: 'filter',\n    value: function filter(paths) {\n      var _this = this;\n\n      return make_array(paths).filter(function (path) {\n        return _this._filter(path);\n      });\n    }\n  }, {\n    key: 'createFilter',\n    value: function createFilter() {\n      var _this2 = this;\n\n      return function (path) {\n        return _this2._filter(path);\n      };\n    }\n  }, {\n    key: 'ignores',\n    value: function ignores(path) {\n      return !this._filter(path);\n    }\n  }, {\n    key: '_createRule',\n    value: function _createRule(pattern) {\n      var origin = pattern;\n      var negative = false; // > An optional prefix \"!\" which negates the pattern;\n\n      if (pattern.indexOf('!') === 0) {\n        negative = true;\n        pattern = pattern.substr(1);\n      }\n\n      pattern = pattern // > Put a backslash (\"\\\") in front of the first \"!\" for patterns that begin with a literal \"!\", for example, `\"\\!important!.txt\"`.\n      .replace(REGEX_LEADING_EXCAPED_EXCLAMATION, '!') // > Put a backslash (\"\\\") in front of the first hash for patterns that begin with a hash.\n      .replace(REGEX_LEADING_EXCAPED_HASH, '#');\n      var regex = make_regex(pattern, negative);\n      return {\n        origin: origin,\n        pattern: pattern,\n        negative: negative,\n        regex: regex\n      };\n    } // @returns `Boolean` true if the `path` is NOT ignored\n\n  }, {\n    key: '_filter',\n    value: function _filter(path, slices) {\n      if (!path) {\n        return false;\n      }\n\n      if (path in this._cache) {\n        return this._cache[path];\n      }\n\n      if (!slices) {\n        // path/to/a.js\n        // ['path', 'to', 'a.js']\n        slices = path.split(SLASH);\n      }\n\n      slices.pop();\n      return this._cache[path] = slices.length // > It is not possible to re-include a file if a parent directory of that file is excluded.\n      // If the path contains a parent directory, check the parent first\n      ? this._filter(slices.join(SLASH) + SLASH, slices) && this._test(path) // Or only test the path\n      : this._test(path);\n    } // @returns {Boolean} true if a file is NOT ignored\n\n  }, {\n    key: '_test',\n    value: function _test(path) {\n      // Explicitly define variable type by setting matched to `0`\n      var matched = 0;\n\n      this._rules.forEach(function (rule) {\n        // if matched = true, then we only test negative rules\n        // if matched = false, then we test non-negative rules\n        if (!(matched ^ rule.negative)) {\n          matched = rule.negative ^ rule.regex.test(path);\n        }\n      });\n\n      return !matched;\n    }\n  }]);\n\n  return IgnoreBase;\n}(); // > If the pattern ends with a slash,\n// > it is removed for the purpose of the following description,\n// > but it would only find a match with a directory.\n// > In other words, foo/ will match a directory foo and paths underneath it,\n// > but will not match a regular file or a symbolic link foo\n// >  (this is consistent with the way how pathspec works in general in Git).\n// '`foo/`' will not match regular file '`foo`' or symbolic link '`foo`'\n// -> ignore-rules will not deal with it, because it costs extra `fs.stat` call\n//      you could use option `mark: true` with `glob`\n// '`foo/`' should not continue with the '`..`'\n\n\nvar DEFAULT_REPLACER_PREFIX = [// > Trailing spaces are ignored unless they are quoted with backslash (\"\\\")\n[// (a\\ ) -> (a )\n// (a  ) -> (a)\n// (a \\ ) -> (a  )\n/\\\\?\\s+$/, function (match) {\n  return match.indexOf('\\\\') === 0 ? ' ' : '';\n}], // replace (\\ ) with ' '\n[/\\\\\\s/g, function () {\n  return ' ';\n}], // Escape metacharacters\n// which is written down by users but means special for regular expressions.\n// > There are 12 characters with special meanings:\n// > - the backslash \\,\n// > - the caret ^,\n// > - the dollar sign $,\n// > - the period or dot .,\n// > - the vertical bar or pipe symbol |,\n// > - the question mark ?,\n// > - the asterisk or star *,\n// > - the plus sign +,\n// > - the opening parenthesis (,\n// > - the closing parenthesis ),\n// > - and the opening square bracket [,\n// > - the opening curly brace {,\n// > These special characters are often called \"metacharacters\".\n[/[\\\\\\^$.|?*+()\\[{]/g, function (match) {\n  return '\\\\' + match;\n}], // leading slash\n[// > A leading slash matches the beginning of the pathname.\n// > For example, \"/*.c\" matches \"cat-file.c\" but not \"mozilla-sha1/sha1.c\".\n// A leading slash matches the beginning of the pathname\n/^\\//, function () {\n  return '^';\n}], // replace special metacharacter slash after the leading slash\n[/\\//g, function () {\n  return '\\\\/';\n}], [// > A leading \"**\" followed by a slash means match in all directories.\n// > For example, \"**/foo\" matches file or directory \"foo\" anywhere,\n// > the same as pattern \"foo\".\n// > \"**/foo/bar\" matches file or directory \"bar\" anywhere that is directly under directory \"foo\".\n// Notice that the '*'s have been replaced as '\\\\*'\n/^\\^*\\\\\\*\\\\\\*\\\\\\//, // '**/foo' <-> 'foo'\nfunction () {\n  return '^(?:.*\\\\/)?';\n}]];\nvar DEFAULT_REPLACER_SUFFIX = [// starting\n[// there will be no leading '/' (which has been replaced by section \"leading slash\")\n// If starts with '**', adding a '^' to the regular expression also works\n/^(?=[^\\^])/, function () {\n  return !/\\/(?!$)/.test(this) // > If the pattern does not contain a slash /, Git treats it as a shell glob pattern\n  // Actually, if there is only a trailing slash, git also treats it as a shell glob pattern\n  ? '(?:^|\\\\/)' // > Otherwise, Git treats the pattern as a shell glob suitable for consumption by fnmatch(3)\n  : '^';\n}], // two globstars\n[// Use lookahead assertions so that we could match more than one `'/**'`\n/\\\\\\/\\\\\\*\\\\\\*(?=\\\\\\/|$)/g, // Zero, one or several directories\n// should not use '*', or it will be replaced by the next replacer\n// Check if it is not the last `'/**'`\nfunction (match, index, str) {\n  return index + 6 < str.length // case: /**/\n  // > A slash followed by two consecutive asterisks then a slash matches zero or more directories.\n  // > For example, \"a/**/b\" matches \"a/b\", \"a/x/b\", \"a/x/y/b\" and so on.\n  // '/**/'\n  ? '(?:\\\\/[^\\\\/]+)*' // case: /**\n  // > A trailing `\"/**\"` matches everything inside.\n  // #21: everything inside but it should not include the current folder\n  : '\\\\/.+';\n}], // intermediate wildcards\n[// Never replace escaped '*'\n// ignore rule '\\*' will match the path '*'\n// 'abc.*/' -> go\n// 'abc.*'  -> skip this rule\n/(^|[^\\\\]+)\\\\\\*(?=.+)/g, // '*.js' matches '.js'\n// '*.js' doesn't match 'abc'\nfunction (match, p1) {\n  return p1 + '[^\\\\/]*';\n}], // trailing wildcard\n[/(\\^|\\\\\\/)?\\\\\\*$/, function (match, p1) {\n  return (p1 // '\\^':\n  // '/*' does not match ''\n  // '/*' does not match everything\n  // '\\\\\\/':\n  // 'abc/*' does not match 'abc/'\n  ? p1 + '[^/]+' // 'a*' matches 'a'\n  // 'a*' matches 'aa'\n  : '[^/]*') + '(?=$|\\\\/$)';\n}], [// unescape\n/\\\\\\\\\\\\/g, function () {\n  return '\\\\';\n}]];\nvar POSITIVE_REPLACERS = [].concat(DEFAULT_REPLACER_PREFIX, [// 'f'\n// matches\n// - /f(end)\n// - /f/\n// - (start)f(end)\n// - (start)f/\n// doesn't match\n// - oof\n// - foo\n// pseudo:\n// -> (^|/)f(/|$)\n// ending\n[// 'js' will not match 'js.'\n// 'ab' will not match 'abc'\n/(?:[^*\\/])$/, // 'js*' will not match 'a.js'\n// 'js/' will not match 'a.js'\n// 'js' will match 'a.js' and 'a.js/'\nfunction (match) {\n  return match + '(?=$|\\\\/)';\n}]], DEFAULT_REPLACER_SUFFIX);\nvar NEGATIVE_REPLACERS = [].concat(DEFAULT_REPLACER_PREFIX, [// #24, #38\n// The MISSING rule of [gitignore docs](https://git-scm.com/docs/gitignore)\n// A negative pattern without a trailing wildcard should not\n// re-include the things inside that directory.\n// eg:\n// ['node_modules/*', '!node_modules']\n// should ignore `node_modules/a.js`\n[/(?:[^*])$/, function (match) {\n  return match + '(?=$|\\\\/$)';\n}]], DEFAULT_REPLACER_SUFFIX); // A simple cache, because an ignore rule only has only one certain meaning\n\nvar cache = {}; // @param {pattern}\n\nfunction make_regex(pattern, negative) {\n  var r = cache[pattern];\n\n  if (r) {\n    return r;\n  }\n\n  var replacers = negative ? NEGATIVE_REPLACERS : POSITIVE_REPLACERS;\n  var source = replacers.reduce(function (prev, current) {\n    return prev.replace(current[0], current[1].bind(pattern));\n  }, pattern);\n  return cache[pattern] = new RegExp(source, 'i');\n} // Windows\n// --------------------------------------------------------------\n\n/* istanbul ignore if  */\n\n\nif ( // Detect `process` so that it can run in browsers.\ntypeof process !== 'undefined' && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === 'win32')) {\n  var filter = IgnoreBase.prototype._filter;\n\n  var make_posix = function make_posix(str) {\n    return /^\\\\\\\\\\?\\\\/.test(str) || /[^\\x00-\\x80]+/.test(str) ? str : str.replace(/\\\\/g, '/');\n  };\n\n  IgnoreBase.prototype._filter = function (path, slices) {\n    path = make_posix(path);\n    return filter.call(this, path, slices);\n  };\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/globby/node_modules/ignore/ignore.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","module","exports","IgnoreBase","make_array","subject","Array","isArray","REGEX_BLANK_LINE","REGEX_LEADING_EXCAPED_EXCLAMATION","REGEX_LEADING_EXCAPED_HASH","SLASH","KEY_IGNORE","Symbol","for","_rules","_initCache","value","_cache","add","pattern","_added","split","forEach","_addPattern","addPattern","concat","_checkPattern","rule","_createRule","push","test","indexOf","filter","paths","_this","path","_filter","createFilter","_this2","ignores","origin","negative","substr","replace","regex","make_regex","slices","pop","join","_test","matched","DEFAULT_REPLACER_PREFIX","match","DEFAULT_REPLACER_SUFFIX","index","str","p1","POSITIVE_REPLACERS","NEGATIVE_REPLACERS","cache","r","replacers","source","reduce","prev","current","bind","RegExp","process","env","IGNORE_TEST_WIN32","platform","make_posix","call"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nmodule.exports = function () {\n  return new IgnoreBase();\n};\n\n// A simple implementation of make-array\nfunction make_array(subject) {\n  return Array.isArray(subject) ? subject : [subject];\n}\n\nvar REGEX_BLANK_LINE = /^\\s+$/;\nvar REGEX_LEADING_EXCAPED_EXCLAMATION = /^\\\\\\!/;\nvar REGEX_LEADING_EXCAPED_HASH = /^\\\\#/;\nvar SLASH = '/';\nvar KEY_IGNORE = typeof Symbol !== 'undefined' ? Symbol.for('node-ignore')\n/* istanbul ignore next */\n: 'node-ignore';\n\nvar IgnoreBase = function () {\n  function IgnoreBase() {\n    _classCallCheck(this, IgnoreBase);\n\n    this._rules = [];\n    this[KEY_IGNORE] = true;\n    this._initCache();\n  }\n\n  _createClass(IgnoreBase, [{\n    key: '_initCache',\n    value: function _initCache() {\n      this._cache = {};\n    }\n\n    // @param {Array.<string>|string|Ignore} pattern\n\n  }, {\n    key: 'add',\n    value: function add(pattern) {\n      this._added = false;\n\n      if (typeof pattern === 'string') {\n        pattern = pattern.split(/\\r?\\n/g);\n      }\n\n      make_array(pattern).forEach(this._addPattern, this);\n\n      // Some rules have just added to the ignore,\n      // making the behavior changed.\n      if (this._added) {\n        this._initCache();\n      }\n\n      return this;\n    }\n\n    // legacy\n\n  }, {\n    key: 'addPattern',\n    value: function addPattern(pattern) {\n      return this.add(pattern);\n    }\n  }, {\n    key: '_addPattern',\n    value: function _addPattern(pattern) {\n      // #32\n      if (pattern && pattern[KEY_IGNORE]) {\n        this._rules = this._rules.concat(pattern._rules);\n        this._added = true;\n        return;\n      }\n\n      if (this._checkPattern(pattern)) {\n        var rule = this._createRule(pattern);\n        this._added = true;\n        this._rules.push(rule);\n      }\n    }\n  }, {\n    key: '_checkPattern',\n    value: function _checkPattern(pattern) {\n      // > A blank line matches no files, so it can serve as a separator for readability.\n      return pattern && typeof pattern === 'string' && !REGEX_BLANK_LINE.test(pattern)\n\n      // > A line starting with # serves as a comment.\n      && pattern.indexOf('#') !== 0;\n    }\n  }, {\n    key: 'filter',\n    value: function filter(paths) {\n      var _this = this;\n\n      return make_array(paths).filter(function (path) {\n        return _this._filter(path);\n      });\n    }\n  }, {\n    key: 'createFilter',\n    value: function createFilter() {\n      var _this2 = this;\n\n      return function (path) {\n        return _this2._filter(path);\n      };\n    }\n  }, {\n    key: 'ignores',\n    value: function ignores(path) {\n      return !this._filter(path);\n    }\n  }, {\n    key: '_createRule',\n    value: function _createRule(pattern) {\n      var origin = pattern;\n      var negative = false;\n\n      // > An optional prefix \"!\" which negates the pattern;\n      if (pattern.indexOf('!') === 0) {\n        negative = true;\n        pattern = pattern.substr(1);\n      }\n\n      pattern = pattern\n      // > Put a backslash (\"\\\") in front of the first \"!\" for patterns that begin with a literal \"!\", for example, `\"\\!important!.txt\"`.\n      .replace(REGEX_LEADING_EXCAPED_EXCLAMATION, '!')\n      // > Put a backslash (\"\\\") in front of the first hash for patterns that begin with a hash.\n      .replace(REGEX_LEADING_EXCAPED_HASH, '#');\n\n      var regex = make_regex(pattern, negative);\n\n      return {\n        origin: origin,\n        pattern: pattern,\n        negative: negative,\n        regex: regex\n      };\n    }\n\n    // @returns `Boolean` true if the `path` is NOT ignored\n\n  }, {\n    key: '_filter',\n    value: function _filter(path, slices) {\n      if (!path) {\n        return false;\n      }\n\n      if (path in this._cache) {\n        return this._cache[path];\n      }\n\n      if (!slices) {\n        // path/to/a.js\n        // ['path', 'to', 'a.js']\n        slices = path.split(SLASH);\n      }\n\n      slices.pop();\n\n      return this._cache[path] = slices.length\n      // > It is not possible to re-include a file if a parent directory of that file is excluded.\n      // If the path contains a parent directory, check the parent first\n      ? this._filter(slices.join(SLASH) + SLASH, slices) && this._test(path)\n\n      // Or only test the path\n      : this._test(path);\n    }\n\n    // @returns {Boolean} true if a file is NOT ignored\n\n  }, {\n    key: '_test',\n    value: function _test(path) {\n      // Explicitly define variable type by setting matched to `0`\n      var matched = 0;\n\n      this._rules.forEach(function (rule) {\n        // if matched = true, then we only test negative rules\n        // if matched = false, then we test non-negative rules\n        if (!(matched ^ rule.negative)) {\n          matched = rule.negative ^ rule.regex.test(path);\n        }\n      });\n\n      return !matched;\n    }\n  }]);\n\n  return IgnoreBase;\n}();\n\n// > If the pattern ends with a slash,\n// > it is removed for the purpose of the following description,\n// > but it would only find a match with a directory.\n// > In other words, foo/ will match a directory foo and paths underneath it,\n// > but will not match a regular file or a symbolic link foo\n// >  (this is consistent with the way how pathspec works in general in Git).\n// '`foo/`' will not match regular file '`foo`' or symbolic link '`foo`'\n// -> ignore-rules will not deal with it, because it costs extra `fs.stat` call\n//      you could use option `mark: true` with `glob`\n\n// '`foo/`' should not continue with the '`..`'\n\n\nvar DEFAULT_REPLACER_PREFIX = [\n\n// > Trailing spaces are ignored unless they are quoted with backslash (\"\\\")\n[\n// (a\\ ) -> (a )\n// (a  ) -> (a)\n// (a \\ ) -> (a  )\n/\\\\?\\s+$/, function (match) {\n  return match.indexOf('\\\\') === 0 ? ' ' : '';\n}],\n\n// replace (\\ ) with ' '\n[/\\\\\\s/g, function () {\n  return ' ';\n}],\n\n// Escape metacharacters\n// which is written down by users but means special for regular expressions.\n\n// > There are 12 characters with special meanings:\n// > - the backslash \\,\n// > - the caret ^,\n// > - the dollar sign $,\n// > - the period or dot .,\n// > - the vertical bar or pipe symbol |,\n// > - the question mark ?,\n// > - the asterisk or star *,\n// > - the plus sign +,\n// > - the opening parenthesis (,\n// > - the closing parenthesis ),\n// > - and the opening square bracket [,\n// > - the opening curly brace {,\n// > These special characters are often called \"metacharacters\".\n[/[\\\\\\^$.|?*+()\\[{]/g, function (match) {\n  return '\\\\' + match;\n}],\n\n// leading slash\n[\n\n// > A leading slash matches the beginning of the pathname.\n// > For example, \"/*.c\" matches \"cat-file.c\" but not \"mozilla-sha1/sha1.c\".\n// A leading slash matches the beginning of the pathname\n/^\\//, function () {\n  return '^';\n}],\n\n// replace special metacharacter slash after the leading slash\n[/\\//g, function () {\n  return '\\\\/';\n}], [\n// > A leading \"**\" followed by a slash means match in all directories.\n// > For example, \"**/foo\" matches file or directory \"foo\" anywhere,\n// > the same as pattern \"foo\".\n// > \"**/foo/bar\" matches file or directory \"bar\" anywhere that is directly under directory \"foo\".\n// Notice that the '*'s have been replaced as '\\\\*'\n/^\\^*\\\\\\*\\\\\\*\\\\\\//,\n\n// '**/foo' <-> 'foo'\nfunction () {\n  return '^(?:.*\\\\/)?';\n}]];\n\nvar DEFAULT_REPLACER_SUFFIX = [\n// starting\n[\n// there will be no leading '/' (which has been replaced by section \"leading slash\")\n// If starts with '**', adding a '^' to the regular expression also works\n/^(?=[^\\^])/, function () {\n  return !/\\/(?!$)/.test(this)\n  // > If the pattern does not contain a slash /, Git treats it as a shell glob pattern\n  // Actually, if there is only a trailing slash, git also treats it as a shell glob pattern\n  ? '(?:^|\\\\/)'\n\n  // > Otherwise, Git treats the pattern as a shell glob suitable for consumption by fnmatch(3)\n  : '^';\n}],\n\n// two globstars\n[\n// Use lookahead assertions so that we could match more than one `'/**'`\n/\\\\\\/\\\\\\*\\\\\\*(?=\\\\\\/|$)/g,\n\n// Zero, one or several directories\n// should not use '*', or it will be replaced by the next replacer\n\n// Check if it is not the last `'/**'`\nfunction (match, index, str) {\n  return index + 6 < str.length\n\n  // case: /**/\n  // > A slash followed by two consecutive asterisks then a slash matches zero or more directories.\n  // > For example, \"a/**/b\" matches \"a/b\", \"a/x/b\", \"a/x/y/b\" and so on.\n  // '/**/'\n  ? '(?:\\\\/[^\\\\/]+)*'\n\n  // case: /**\n  // > A trailing `\"/**\"` matches everything inside.\n\n  // #21: everything inside but it should not include the current folder\n  : '\\\\/.+';\n}],\n\n// intermediate wildcards\n[\n// Never replace escaped '*'\n// ignore rule '\\*' will match the path '*'\n\n// 'abc.*/' -> go\n// 'abc.*'  -> skip this rule\n/(^|[^\\\\]+)\\\\\\*(?=.+)/g,\n\n// '*.js' matches '.js'\n// '*.js' doesn't match 'abc'\nfunction (match, p1) {\n  return p1 + '[^\\\\/]*';\n}],\n\n// trailing wildcard\n[/(\\^|\\\\\\/)?\\\\\\*$/, function (match, p1) {\n  return (p1\n  // '\\^':\n  // '/*' does not match ''\n  // '/*' does not match everything\n\n  // '\\\\\\/':\n  // 'abc/*' does not match 'abc/'\n  ? p1 + '[^/]+'\n\n  // 'a*' matches 'a'\n  // 'a*' matches 'aa'\n  : '[^/]*') + '(?=$|\\\\/$)';\n}], [\n// unescape\n/\\\\\\\\\\\\/g, function () {\n  return '\\\\';\n}]];\n\nvar POSITIVE_REPLACERS = [].concat(DEFAULT_REPLACER_PREFIX, [\n\n// 'f'\n// matches\n// - /f(end)\n// - /f/\n// - (start)f(end)\n// - (start)f/\n// doesn't match\n// - oof\n// - foo\n// pseudo:\n// -> (^|/)f(/|$)\n\n// ending\n[\n// 'js' will not match 'js.'\n// 'ab' will not match 'abc'\n/(?:[^*\\/])$/,\n\n// 'js*' will not match 'a.js'\n// 'js/' will not match 'a.js'\n// 'js' will match 'a.js' and 'a.js/'\nfunction (match) {\n  return match + '(?=$|\\\\/)';\n}]], DEFAULT_REPLACER_SUFFIX);\n\nvar NEGATIVE_REPLACERS = [].concat(DEFAULT_REPLACER_PREFIX, [\n\n// #24, #38\n// The MISSING rule of [gitignore docs](https://git-scm.com/docs/gitignore)\n// A negative pattern without a trailing wildcard should not\n// re-include the things inside that directory.\n\n// eg:\n// ['node_modules/*', '!node_modules']\n// should ignore `node_modules/a.js`\n[/(?:[^*])$/, function (match) {\n  return match + '(?=$|\\\\/$)';\n}]], DEFAULT_REPLACER_SUFFIX);\n\n// A simple cache, because an ignore rule only has only one certain meaning\nvar cache = {};\n\n// @param {pattern}\nfunction make_regex(pattern, negative) {\n  var r = cache[pattern];\n  if (r) {\n    return r;\n  }\n\n  var replacers = negative ? NEGATIVE_REPLACERS : POSITIVE_REPLACERS;\n\n  var source = replacers.reduce(function (prev, current) {\n    return prev.replace(current[0], current[1].bind(pattern));\n  }, pattern);\n\n  return cache[pattern] = new RegExp(source, 'i');\n}\n\n// Windows\n// --------------------------------------------------------------\n/* istanbul ignore if  */\nif (\n// Detect `process` so that it can run in browsers.\ntypeof process !== 'undefined' && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === 'win32')) {\n\n  var filter = IgnoreBase.prototype._filter;\n  var make_posix = function make_posix(str) {\n    return (/^\\\\\\\\\\?\\\\/.test(str) || /[^\\x00-\\x80]+/.test(str) ? str : str.replace(/\\\\/g, '/')\n    );\n  };\n\n  IgnoreBase.prototype._filter = function (path, slices) {\n    path = make_posix(path);\n    return filter.call(this, path, slices);\n  };\n}\n"]},"metadata":{},"sourceType":"script"}