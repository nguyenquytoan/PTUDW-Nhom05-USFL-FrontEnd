{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addHook = addHook;\n\nvar _module = _interopRequireDefault(require(\"module\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _nodeModulesRegexp = _interopRequireDefault(require(\"node-modules-regexp\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* (c) 2015 Ari Porad (@ariporad) <http://ariporad.com>. License: ariporad.mit-license.org */\n// Guard against poorly mocked module constructors.\n\n\nconst Module = module.constructor.length > 1 ? module.constructor : _module.default;\nconst HOOK_RETURNED_NOTHING_ERROR_MESSAGE = '[Pirates] A hook returned a non-string, or nothing at all! This is a' + ' violation of intergalactic law!\\n' + '--------------------\\n' + 'If you have no idea what this means or what Pirates is, let me explain: ' + 'Pirates is a module that makes is easy to implement require hooks. One of' + \" the require hooks you're using uses it. One of these require hooks\" + \" didn't return anything from it's handler, so we don't know what to\" + ' do. You might want to debug this.';\n\nfunction shouldCompile(filename, exts, matcher, ignoreNodeModules) {\n  if (typeof filename !== 'string') {\n    return false;\n  }\n\n  if (exts.indexOf(_path.default.extname(filename)) === -1) {\n    return false;\n  }\n\n  const resolvedFilename = _path.default.resolve(filename);\n\n  if (ignoreNodeModules && _nodeModulesRegexp.default.test(resolvedFilename)) {\n    return false;\n  }\n\n  if (matcher && typeof matcher === 'function') {\n    return !!matcher(resolvedFilename);\n  }\n\n  return true;\n}\n/**\n * Add a require hook.\n *\n * @param {Function} hook - The hook. Accepts the code of the module and the filename. Required.\n * @param {Object} [opts] - Options\n * @param {String[]} [opts.exts=['.js']] - The extensions to hook. Should start with '.' (ex. ['.js']).\n * @param {Function(path)} [opts.matcher] - A matcher function, will be called with path to a file. Should return truthy if the file should be hooked, falsy otherwise.\n * @param {Boolean} [opts.ignoreNodeModules=true] - Auto-ignore node_modules. Independent of any matcher.\n * @returns {Function} revert - Reverts the hooks.\n */\n\n\nfunction addHook(hook, opts = {}) {\n  let reverted = false;\n  const loaders = [];\n  const oldLoaders = [];\n  let exts; // We need to do this to fix #15. Basically, if you use a non-standard extension (ie. .jsx), then\n  // We modify the .js loader, then use the modified .js loader for as the base for .jsx.\n  // This prevents that.\n\n  const originalJSLoader = Module._extensions['.js'];\n  const matcher = opts.matcher || null;\n  const ignoreNodeModules = opts.ignoreNodeModules !== false;\n  exts = opts.extensions || opts.exts || opts.extension || opts.ext || ['.js'];\n\n  if (!Array.isArray(exts)) {\n    exts = [exts];\n  }\n\n  exts.forEach(ext => {\n    if (typeof ext !== 'string') {\n      throw new TypeError(`Invalid Extension: ${ext}`);\n    }\n\n    const oldLoader = Module._extensions[ext] || originalJSLoader;\n    oldLoaders[ext] = oldLoader;\n\n    loaders[ext] = Module._extensions[ext] = function newLoader(mod, filename) {\n      let compile;\n\n      if (!reverted) {\n        if (shouldCompile(filename, exts, matcher, ignoreNodeModules)) {\n          compile = mod._compile;\n\n          mod._compile = function _compile(code) {\n            // reset the compile immediately as otherwise we end up having the\n            // compile function being changed even though this loader might be reverted\n            // Not reverting it here leads to long useless compile chains when doing\n            // addHook -> revert -> addHook -> revert -> ...\n            // The compile function is also anyway created new when the loader is called a second time.\n            mod._compile = compile;\n            const newCode = hook(code, filename);\n\n            if (typeof newCode !== 'string') {\n              throw new Error(HOOK_RETURNED_NOTHING_ERROR_MESSAGE);\n            }\n\n            return mod._compile(newCode, filename);\n          };\n        }\n      }\n\n      oldLoader(mod, filename);\n    };\n  });\n  return function revert() {\n    if (reverted) return;\n    reverted = true;\n    exts.forEach(ext => {\n      // if the current loader for the extension is our loader then unregister it and set the oldLoader again\n      // if not we can not do anything as we cannot remove a loader from within the loader-chain\n      if (Module._extensions[ext] === loaders[ext]) {\n        Module._extensions[ext] = oldLoaders[ext];\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/pirates/lib/index.js"],"names":["Object","defineProperty","exports","value","addHook","_module","_interopRequireDefault","require","_path","_nodeModulesRegexp","obj","__esModule","default","Module","module","constructor","length","HOOK_RETURNED_NOTHING_ERROR_MESSAGE","shouldCompile","filename","exts","matcher","ignoreNodeModules","indexOf","extname","resolvedFilename","resolve","test","hook","opts","reverted","loaders","oldLoaders","originalJSLoader","_extensions","extensions","extension","ext","Array","isArray","forEach","TypeError","oldLoader","newLoader","mod","compile","_compile","code","newCode","Error","revert"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addHook = addHook;\n\nvar _module = _interopRequireDefault(require(\"module\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _nodeModulesRegexp = _interopRequireDefault(require(\"node-modules-regexp\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* (c) 2015 Ari Porad (@ariporad) <http://ariporad.com>. License: ariporad.mit-license.org */\n// Guard against poorly mocked module constructors.\nconst Module = module.constructor.length > 1 ? module.constructor : _module.default;\nconst HOOK_RETURNED_NOTHING_ERROR_MESSAGE = '[Pirates] A hook returned a non-string, or nothing at all! This is a' + ' violation of intergalactic law!\\n' + '--------------------\\n' + 'If you have no idea what this means or what Pirates is, let me explain: ' + 'Pirates is a module that makes is easy to implement require hooks. One of' + \" the require hooks you're using uses it. One of these require hooks\" + \" didn't return anything from it's handler, so we don't know what to\" + ' do. You might want to debug this.';\n\nfunction shouldCompile(filename, exts, matcher, ignoreNodeModules) {\n  if (typeof filename !== 'string') {\n    return false;\n  }\n\n  if (exts.indexOf(_path.default.extname(filename)) === -1) {\n    return false;\n  }\n\n  const resolvedFilename = _path.default.resolve(filename);\n\n  if (ignoreNodeModules && _nodeModulesRegexp.default.test(resolvedFilename)) {\n    return false;\n  }\n\n  if (matcher && typeof matcher === 'function') {\n    return !!matcher(resolvedFilename);\n  }\n\n  return true;\n}\n/**\n * Add a require hook.\n *\n * @param {Function} hook - The hook. Accepts the code of the module and the filename. Required.\n * @param {Object} [opts] - Options\n * @param {String[]} [opts.exts=['.js']] - The extensions to hook. Should start with '.' (ex. ['.js']).\n * @param {Function(path)} [opts.matcher] - A matcher function, will be called with path to a file. Should return truthy if the file should be hooked, falsy otherwise.\n * @param {Boolean} [opts.ignoreNodeModules=true] - Auto-ignore node_modules. Independent of any matcher.\n * @returns {Function} revert - Reverts the hooks.\n */\n\n\nfunction addHook(hook, opts = {}) {\n  let reverted = false;\n  const loaders = [];\n  const oldLoaders = [];\n  let exts; // We need to do this to fix #15. Basically, if you use a non-standard extension (ie. .jsx), then\n  // We modify the .js loader, then use the modified .js loader for as the base for .jsx.\n  // This prevents that.\n\n  const originalJSLoader = Module._extensions['.js'];\n  const matcher = opts.matcher || null;\n  const ignoreNodeModules = opts.ignoreNodeModules !== false;\n  exts = opts.extensions || opts.exts || opts.extension || opts.ext || ['.js'];\n\n  if (!Array.isArray(exts)) {\n    exts = [exts];\n  }\n\n  exts.forEach(ext => {\n    if (typeof ext !== 'string') {\n      throw new TypeError(`Invalid Extension: ${ext}`);\n    }\n\n    const oldLoader = Module._extensions[ext] || originalJSLoader;\n    oldLoaders[ext] = oldLoader;\n\n    loaders[ext] = Module._extensions[ext] = function newLoader(mod, filename) {\n      let compile;\n\n      if (!reverted) {\n        if (shouldCompile(filename, exts, matcher, ignoreNodeModules)) {\n          compile = mod._compile;\n\n          mod._compile = function _compile(code) {\n            // reset the compile immediately as otherwise we end up having the\n            // compile function being changed even though this loader might be reverted\n            // Not reverting it here leads to long useless compile chains when doing\n            // addHook -> revert -> addHook -> revert -> ...\n            // The compile function is also anyway created new when the loader is called a second time.\n            mod._compile = compile;\n            const newCode = hook(code, filename);\n\n            if (typeof newCode !== 'string') {\n              throw new Error(HOOK_RETURNED_NOTHING_ERROR_MESSAGE);\n            }\n\n            return mod._compile(newCode, filename);\n          };\n        }\n      }\n\n      oldLoader(mod, filename);\n    };\n  });\n  return function revert() {\n    if (reverted) return;\n    reverted = true;\n    exts.forEach(ext => {\n      // if the current loader for the extension is our loader then unregister it and set the oldLoader again\n      // if not we can not do anything as we cannot remove a loader from within the loader-chain\n      if (Module._extensions[ext] === loaders[ext]) {\n        Module._extensions[ext] = oldLoaders[ext];\n      }\n    });\n  };\n}"]},"metadata":{},"sourceType":"script"}