{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = exports.serialize = exports.test = void 0;\n\nvar _markup = require('./lib/markup');\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst ELEMENT_NODE = 1;\nconst TEXT_NODE = 3;\nconst COMMENT_NODE = 8;\nconst FRAGMENT_NODE = 11;\nconst ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\n\nconst testNode = (nodeType, name) => nodeType === ELEMENT_NODE && ELEMENT_REGEXP.test(name) || nodeType === TEXT_NODE && name === 'Text' || nodeType === COMMENT_NODE && name === 'Comment' || nodeType === FRAGMENT_NODE && name === 'DocumentFragment';\n\nconst test = val => val && val.constructor && val.constructor.name && testNode(val.nodeType, val.constructor.name);\n\nexports.test = test;\n\nfunction nodeIsText(node) {\n  return node.nodeType === TEXT_NODE;\n}\n\nfunction nodeIsComment(node) {\n  return node.nodeType === COMMENT_NODE;\n}\n\nfunction nodeIsFragment(node) {\n  return node.nodeType === FRAGMENT_NODE;\n}\n\nconst serialize = (node, config, indentation, depth, refs, printer) => {\n  if (nodeIsText(node)) {\n    return (0, _markup.printText)(node.data, config);\n  }\n\n  if (nodeIsComment(node)) {\n    return (0, _markup.printComment)(node.data, config);\n  }\n\n  const type = nodeIsFragment(node) ? `DocumentFragment` : node.tagName.toLowerCase();\n\n  if (++depth > config.maxDepth) {\n    return (0, _markup.printElementAsLeaf)(type, config);\n  }\n\n  return (0, _markup.printElement)(type, (0, _markup.printProps)(nodeIsFragment(node) ? [] : Array.from(node.attributes).map(attr => attr.name).sort(), nodeIsFragment(node) ? [] : Array.from(node.attributes).reduce((props, attribute) => {\n    props[attribute.name] = attribute.value;\n    return props;\n  }, {}), config, indentation + config.indent, depth, refs, printer), (0, _markup.printChildren)(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs, printer), config, indentation);\n};\n\nexports.serialize = serialize;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/pretty-format/build/plugins/DOMElement.js"],"names":["Object","defineProperty","exports","value","default","serialize","test","_markup","require","ELEMENT_NODE","TEXT_NODE","COMMENT_NODE","FRAGMENT_NODE","ELEMENT_REGEXP","testNode","nodeType","name","val","constructor","nodeIsText","node","nodeIsComment","nodeIsFragment","config","indentation","depth","refs","printer","printText","data","printComment","type","tagName","toLowerCase","maxDepth","printElementAsLeaf","printElement","printProps","Array","from","attributes","map","attr","sort","reduce","props","attribute","indent","printChildren","prototype","slice","call","childNodes","children","plugin","_default"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = exports.serialize = exports.test = void 0;\n\nvar _markup = require('./lib/markup');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst ELEMENT_NODE = 1;\nconst TEXT_NODE = 3;\nconst COMMENT_NODE = 8;\nconst FRAGMENT_NODE = 11;\nconst ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\n\nconst testNode = (nodeType, name) =>\n  (nodeType === ELEMENT_NODE && ELEMENT_REGEXP.test(name)) ||\n  (nodeType === TEXT_NODE && name === 'Text') ||\n  (nodeType === COMMENT_NODE && name === 'Comment') ||\n  (nodeType === FRAGMENT_NODE && name === 'DocumentFragment');\n\nconst test = val =>\n  val &&\n  val.constructor &&\n  val.constructor.name &&\n  testNode(val.nodeType, val.constructor.name);\n\nexports.test = test;\n\nfunction nodeIsText(node) {\n  return node.nodeType === TEXT_NODE;\n}\n\nfunction nodeIsComment(node) {\n  return node.nodeType === COMMENT_NODE;\n}\n\nfunction nodeIsFragment(node) {\n  return node.nodeType === FRAGMENT_NODE;\n}\n\nconst serialize = (node, config, indentation, depth, refs, printer) => {\n  if (nodeIsText(node)) {\n    return (0, _markup.printText)(node.data, config);\n  }\n\n  if (nodeIsComment(node)) {\n    return (0, _markup.printComment)(node.data, config);\n  }\n\n  const type = nodeIsFragment(node)\n    ? `DocumentFragment`\n    : node.tagName.toLowerCase();\n\n  if (++depth > config.maxDepth) {\n    return (0, _markup.printElementAsLeaf)(type, config);\n  }\n\n  return (0, _markup.printElement)(\n    type,\n    (0, _markup.printProps)(\n      nodeIsFragment(node)\n        ? []\n        : Array.from(node.attributes)\n            .map(attr => attr.name)\n            .sort(),\n      nodeIsFragment(node)\n        ? []\n        : Array.from(node.attributes).reduce((props, attribute) => {\n            props[attribute.name] = attribute.value;\n            return props;\n          }, {}),\n      config,\n      indentation + config.indent,\n      depth,\n      refs,\n      printer\n    ),\n    (0, _markup.printChildren)(\n      Array.prototype.slice.call(node.childNodes || node.children),\n      config,\n      indentation + config.indent,\n      depth,\n      refs,\n      printer\n    ),\n    config,\n    indentation\n  );\n};\n\nexports.serialize = serialize;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;\n"]},"metadata":{},"sourceType":"script"}