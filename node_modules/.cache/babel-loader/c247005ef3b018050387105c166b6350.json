{"ast":null,"code":"/**\n * @fileoverview Rule to require object keys to be sorted\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"),\n      naturalCompare = require(\"natural-compare\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets the property name of the given `Property` node.\n *\n * - If the property's key is an `Identifier` node, this returns the key's name\n *   whether it's a computed property or not.\n * - If the property has a static name, this returns the static name.\n * - Otherwise, this returns null.\n * @param {ASTNode} node The `Property` node to get.\n * @returns {string|null} The property name or null.\n * @private\n */\n\n\nfunction getPropertyName(node) {\n  const staticName = astUtils.getStaticPropertyName(node);\n\n  if (staticName !== null) {\n    return staticName;\n  }\n\n  return node.key.name || null;\n}\n/**\n * Functions which check that the given 2 names are in specific order.\n *\n * Postfix `I` is meant insensitive.\n * Postfix `N` is meant natual.\n * @private\n */\n\n\nconst isValidOrders = {\n  asc(a, b) {\n    return a <= b;\n  },\n\n  ascI(a, b) {\n    return a.toLowerCase() <= b.toLowerCase();\n  },\n\n  ascN(a, b) {\n    return naturalCompare(a, b) <= 0;\n  },\n\n  ascIN(a, b) {\n    return naturalCompare(a.toLowerCase(), b.toLowerCase()) <= 0;\n  },\n\n  desc(a, b) {\n    return isValidOrders.asc(b, a);\n  },\n\n  descI(a, b) {\n    return isValidOrders.ascI(b, a);\n  },\n\n  descN(a, b) {\n    return isValidOrders.ascN(b, a);\n  },\n\n  descIN(a, b) {\n    return isValidOrders.ascIN(b, a);\n  }\n\n}; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require object keys to be sorted\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/sort-keys\"\n    },\n    schema: [{\n      enum: [\"asc\", \"desc\"]\n    }, {\n      type: \"object\",\n      properties: {\n        caseSensitive: {\n          type: \"boolean\",\n          default: true\n        },\n        natural: {\n          type: \"boolean\",\n          default: false\n        },\n        minKeys: {\n          type: \"integer\",\n          minimum: 2,\n          default: 2\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    // Parse options.\n    const order = context.options[0] || \"asc\";\n    const options = context.options[1];\n    const insensitive = options && options.caseSensitive === false;\n    const natual = options && options.natural;\n    const minKeys = options && options.minKeys;\n    const isValidOrder = isValidOrders[order + (insensitive ? \"I\" : \"\") + (natual ? \"N\" : \"\")]; // The stack to save the previous property's name for each object literals.\n\n    let stack = null;\n    return {\n      ObjectExpression(node) {\n        stack = {\n          upper: stack,\n          prevName: null,\n          numKeys: node.properties.length\n        };\n      },\n\n      \"ObjectExpression:exit\"() {\n        stack = stack.upper;\n      },\n\n      SpreadElement(node) {\n        if (node.parent.type === \"ObjectExpression\") {\n          stack.prevName = null;\n        }\n      },\n\n      Property(node) {\n        if (node.parent.type === \"ObjectPattern\") {\n          return;\n        }\n\n        const prevName = stack.prevName;\n        const numKeys = stack.numKeys;\n        const thisName = getPropertyName(node);\n\n        if (thisName !== null) {\n          stack.prevName = thisName;\n        }\n\n        if (prevName === null || thisName === null || numKeys < minKeys) {\n          return;\n        }\n\n        if (!isValidOrder(prevName, thisName)) {\n          context.report({\n            node,\n            loc: node.key.loc,\n            message: \"Expected object keys to be in {{natual}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'.\",\n            data: {\n              thisName,\n              prevName,\n              order,\n              insensitive: insensitive ? \"insensitive \" : \"\",\n              natual: natual ? \"natural \" : \"\"\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/sort-keys.js"],"names":["astUtils","require","naturalCompare","getPropertyName","node","staticName","getStaticPropertyName","key","name","isValidOrders","asc","a","b","ascI","toLowerCase","ascN","ascIN","desc","descI","descN","descIN","module","exports","meta","type","docs","description","category","recommended","url","schema","enum","properties","caseSensitive","default","natural","minKeys","minimum","additionalProperties","create","context","order","options","insensitive","natual","isValidOrder","stack","ObjectExpression","upper","prevName","numKeys","length","SpreadElement","parent","Property","thisName","report","loc","message","data"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to require object keys to be sorted\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"),\n    naturalCompare = require(\"natural-compare\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets the property name of the given `Property` node.\n *\n * - If the property's key is an `Identifier` node, this returns the key's name\n *   whether it's a computed property or not.\n * - If the property has a static name, this returns the static name.\n * - Otherwise, this returns null.\n * @param {ASTNode} node The `Property` node to get.\n * @returns {string|null} The property name or null.\n * @private\n */\nfunction getPropertyName(node) {\n    const staticName = astUtils.getStaticPropertyName(node);\n\n    if (staticName !== null) {\n        return staticName;\n    }\n\n    return node.key.name || null;\n}\n\n/**\n * Functions which check that the given 2 names are in specific order.\n *\n * Postfix `I` is meant insensitive.\n * Postfix `N` is meant natual.\n * @private\n */\nconst isValidOrders = {\n    asc(a, b) {\n        return a <= b;\n    },\n    ascI(a, b) {\n        return a.toLowerCase() <= b.toLowerCase();\n    },\n    ascN(a, b) {\n        return naturalCompare(a, b) <= 0;\n    },\n    ascIN(a, b) {\n        return naturalCompare(a.toLowerCase(), b.toLowerCase()) <= 0;\n    },\n    desc(a, b) {\n        return isValidOrders.asc(b, a);\n    },\n    descI(a, b) {\n        return isValidOrders.ascI(b, a);\n    },\n    descN(a, b) {\n        return isValidOrders.ascN(b, a);\n    },\n    descIN(a, b) {\n        return isValidOrders.ascIN(b, a);\n    }\n};\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require object keys to be sorted\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/sort-keys\"\n        },\n\n        schema: [\n            {\n                enum: [\"asc\", \"desc\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    caseSensitive: {\n                        type: \"boolean\",\n                        default: true\n                    },\n                    natural: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    minKeys: {\n                        type: \"integer\",\n                        minimum: 2,\n                        default: 2\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create(context) {\n\n        // Parse options.\n        const order = context.options[0] || \"asc\";\n        const options = context.options[1];\n        const insensitive = options && options.caseSensitive === false;\n        const natual = options && options.natural;\n        const minKeys = options && options.minKeys;\n        const isValidOrder = isValidOrders[\n            order + (insensitive ? \"I\" : \"\") + (natual ? \"N\" : \"\")\n        ];\n\n        // The stack to save the previous property's name for each object literals.\n        let stack = null;\n\n        return {\n            ObjectExpression(node) {\n                stack = {\n                    upper: stack,\n                    prevName: null,\n                    numKeys: node.properties.length\n                };\n            },\n\n            \"ObjectExpression:exit\"() {\n                stack = stack.upper;\n            },\n\n            SpreadElement(node) {\n                if (node.parent.type === \"ObjectExpression\") {\n                    stack.prevName = null;\n                }\n            },\n\n            Property(node) {\n                if (node.parent.type === \"ObjectPattern\") {\n                    return;\n                }\n\n                const prevName = stack.prevName;\n                const numKeys = stack.numKeys;\n                const thisName = getPropertyName(node);\n\n                if (thisName !== null) {\n                    stack.prevName = thisName;\n                }\n\n                if (prevName === null || thisName === null || numKeys < minKeys) {\n                    return;\n                }\n\n                if (!isValidOrder(prevName, thisName)) {\n                    context.report({\n                        node,\n                        loc: node.key.loc,\n                        message: \"Expected object keys to be in {{natual}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'.\",\n                        data: {\n                            thisName,\n                            prevName,\n                            order,\n                            insensitive: insensitive ? \"insensitive \" : \"\",\n                            natual: natual ? \"natural \" : \"\"\n                        }\n                    });\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}