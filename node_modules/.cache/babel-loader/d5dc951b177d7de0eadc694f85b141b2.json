{"ast":null,"code":"'use strict';\n\nmodule.exports.disposer = disposer;\n\nfunction disposer(creatorFn, disposerFn, fn) {\n  const runDisposer = (resource, result, shouldThrow = false) => {\n    return disposerFn(resource).then( // disposer resolved, do something with original fn's promise\n    () => {\n      if (shouldThrow) {\n        throw result;\n      }\n\n      return result;\n    }, // Disposer fn failed, crash process\n    err => {\n      throw err; // Or process.exit?\n    });\n  };\n\n  return creatorFn.then(resource => {\n    // fn(resource) can throw, so wrap in a promise here\n    return Promise.resolve().then(() => fn(resource)).then(result => runDisposer(resource, result)).catch(err => runDisposer(resource, err, true));\n  });\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/cacache/lib/util/disposer.js"],"names":["module","exports","disposer","creatorFn","disposerFn","fn","runDisposer","resource","result","shouldThrow","then","err","Promise","resolve","catch"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,CAAeC,QAAf,GAA0BA,QAA1B;;AAEA,SAASA,QAAT,CAAmBC,SAAnB,EAA8BC,UAA9B,EAA0CC,EAA1C,EAA8C;AAC5C,QAAMC,WAAW,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmBC,WAAW,GAAG,KAAjC,KAA2C;AAC7D,WAAOL,UAAU,CAACG,QAAD,CAAV,CACJG,IADI,EAEH;AACA,UAAM;AACJ,UAAID,WAAJ,EAAiB;AACf,cAAMD,MAAN;AACD;;AACD,aAAOA,MAAP;AACD,KARE,EASH;AACCG,IAAAA,GAAD,IAAS;AACP,YAAMA,GAAN,CADO,CAEP;AACD,KAbE,CAAP;AAcD,GAfD;;AAiBA,SAAOR,SAAS,CACbO,IADI,CACEH,QAAD,IAAc;AAClB;AACA,WAAOK,OAAO,CAACC,OAAR,GAAkBH,IAAlB,CAAuB,MAAML,EAAE,CAACE,QAAD,CAA/B,EACJG,IADI,CACEF,MAAD,IAAYF,WAAW,CAACC,QAAD,EAAWC,MAAX,CADxB,EAEJM,KAFI,CAEGH,GAAD,IAASL,WAAW,CAACC,QAAD,EAAWI,GAAX,EAAgB,IAAhB,CAFtB,CAAP;AAGD,GANI,CAAP;AAOD","sourcesContent":["'use strict'\n\nmodule.exports.disposer = disposer\n\nfunction disposer (creatorFn, disposerFn, fn) {\n  const runDisposer = (resource, result, shouldThrow = false) => {\n    return disposerFn(resource)\n      .then(\n        // disposer resolved, do something with original fn's promise\n        () => {\n          if (shouldThrow) {\n            throw result\n          }\n          return result\n        },\n        // Disposer fn failed, crash process\n        (err) => {\n          throw err\n          // Or process.exit?\n        })\n  }\n\n  return creatorFn\n    .then((resource) => {\n      // fn(resource) can throw, so wrap in a promise here\n      return Promise.resolve().then(() => fn(resource))\n        .then((result) => runDisposer(resource, result))\n        .catch((err) => runDisposer(resource, err, true))\n    })\n}\n"]},"metadata":{},"sourceType":"script"}