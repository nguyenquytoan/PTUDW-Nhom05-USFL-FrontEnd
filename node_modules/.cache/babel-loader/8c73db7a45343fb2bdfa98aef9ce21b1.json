{"ast":null,"code":"// @remove-on-eject-begin\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict'; // Do this as the first thing so that any code reading it knows the right env.\n\nprocess.env.BABEL_ENV = 'production';\nprocess.env.NODE_ENV = 'production'; // Makes the script crash on unhandled rejections instead of silently\n// ignoring them. In the future, promise rejections that are not handled will\n// terminate the Node.js process with a non-zero exit code.\n\nprocess.on('unhandledRejection', err => {\n  throw err;\n}); // Ensure environment variables are read.\n\nrequire('../config/env'); // @remove-on-eject-begin\n// Do the preflight checks (only happens before eject).\n\n\nconst verifyPackageTree = require('./utils/verifyPackageTree');\n\nif (process.env.SKIP_PREFLIGHT_CHECK !== 'true') {\n  verifyPackageTree();\n}\n\nconst verifyTypeScriptSetup = require('./utils/verifyTypeScriptSetup');\n\nverifyTypeScriptSetup(); // @remove-on-eject-end\n\nconst path = require('path');\n\nconst chalk = require('react-dev-utils/chalk');\n\nconst fs = require('fs-extra');\n\nconst webpack = require('webpack');\n\nconst configFactory = require('../config/webpack.config');\n\nconst paths = require('../config/paths');\n\nconst checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');\n\nconst formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');\n\nconst printHostingInstructions = require('react-dev-utils/printHostingInstructions');\n\nconst FileSizeReporter = require('react-dev-utils/FileSizeReporter');\n\nconst printBuildError = require('react-dev-utils/printBuildError');\n\nconst measureFileSizesBeforeBuild = FileSizeReporter.measureFileSizesBeforeBuild;\nconst printFileSizesAfterBuild = FileSizeReporter.printFileSizesAfterBuild;\nconst useYarn = fs.existsSync(paths.yarnLockFile); // These sizes are pretty large. We'll warn for bundles exceeding them.\n\nconst WARN_AFTER_BUNDLE_GZIP_SIZE = 512 * 1024;\nconst WARN_AFTER_CHUNK_GZIP_SIZE = 1024 * 1024;\nconst isInteractive = process.stdout.isTTY; // Warn and crash if required files are missing\n\nif (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {\n  process.exit(1);\n} // Generate configuration\n\n\nconst config = configFactory('production'); // We require that you explicitly set browsers and do not fall back to\n// browserslist defaults.\n\nconst {\n  checkBrowsers\n} = require('react-dev-utils/browsersHelper');\n\ncheckBrowsers(paths.appPath, isInteractive).then(() => {\n  // First, read the current file sizes in build directory.\n  // This lets us display how much they changed later.\n  return measureFileSizesBeforeBuild(paths.appBuild);\n}).then(previousFileSizes => {\n  // Remove all content but keep the directory so that\n  // if you're in it, you don't end up in Trash\n  fs.emptyDirSync(paths.appBuild); // Merge with the public folder\n\n  copyPublicFolder(); // Start the webpack build\n\n  return build(previousFileSizes);\n}).then(({\n  stats,\n  previousFileSizes,\n  warnings\n}) => {\n  if (warnings.length) {\n    console.log(chalk.yellow('Compiled with warnings.\\n'));\n    console.log(warnings.join('\\n\\n'));\n    console.log('\\nSearch for the ' + chalk.underline(chalk.yellow('keywords')) + ' to learn more about each warning.');\n    console.log('To ignore, add ' + chalk.cyan('// eslint-disable-next-line') + ' to the line before.\\n');\n  } else {\n    console.log(chalk.green('Compiled successfully.\\n'));\n  }\n\n  console.log('File sizes after gzip:\\n');\n  printFileSizesAfterBuild(stats, previousFileSizes, paths.appBuild, WARN_AFTER_BUNDLE_GZIP_SIZE, WARN_AFTER_CHUNK_GZIP_SIZE);\n  console.log();\n\n  const appPackage = require(paths.appPackageJson);\n\n  const publicUrl = paths.publicUrlOrPath;\n  const publicPath = config.output.publicPath;\n  const buildFolder = path.relative(process.cwd(), paths.appBuild);\n  printHostingInstructions(appPackage, publicUrl, publicPath, buildFolder, useYarn);\n}, err => {\n  const tscCompileOnError = process.env.TSC_COMPILE_ON_ERROR === 'true';\n\n  if (tscCompileOnError) {\n    console.log(chalk.yellow('Compiled with the following type errors (you may want to check these before deploying your app):\\n'));\n    printBuildError(err);\n  } else {\n    console.log(chalk.red('Failed to compile.\\n'));\n    printBuildError(err);\n    process.exit(1);\n  }\n}).catch(err => {\n  if (err && err.message) {\n    console.log(err.message);\n  }\n\n  process.exit(1);\n}); // Create the production build and print the deployment instructions.\n\nfunction build(previousFileSizes) {\n  // We used to support resolving modules according to `NODE_PATH`.\n  // This now has been deprecated in favor of jsconfig/tsconfig.json\n  // This lets you use absolute paths in imports inside large monorepos:\n  if (process.env.NODE_PATH) {\n    console.log(chalk.yellow('Setting NODE_PATH to resolve modules absolutely has been deprecated in favor of setting baseUrl in jsconfig.json (or tsconfig.json if you are using TypeScript) and will be removed in a future major release of create-react-app.'));\n    console.log();\n  }\n\n  console.log('Creating an optimized production build...');\n  const compiler = webpack(config);\n  return new Promise((resolve, reject) => {\n    compiler.run((err, stats) => {\n      let messages;\n\n      if (err) {\n        if (!err.message) {\n          return reject(err);\n        }\n\n        let errMessage = err.message; // Add additional information for postcss errors\n\n        if (Object.prototype.hasOwnProperty.call(err, 'postcssNode')) {\n          errMessage += '\\nCompileError: Begins at CSS selector ' + err['postcssNode'].selector;\n        }\n\n        messages = formatWebpackMessages({\n          errors: [errMessage],\n          warnings: []\n        });\n      } else {\n        messages = formatWebpackMessages(stats.toJson({\n          all: false,\n          warnings: true,\n          errors: true\n        }));\n      }\n\n      if (messages.errors.length) {\n        // Only keep the first error. Others are often indicative\n        // of the same problem, but confuse the reader with noise.\n        if (messages.errors.length > 1) {\n          messages.errors.length = 1;\n        }\n\n        return reject(new Error(messages.errors.join('\\n\\n')));\n      }\n\n      if (process.env.CI && (typeof process.env.CI !== 'string' || process.env.CI.toLowerCase() !== 'false') && messages.warnings.length) {\n        console.log(chalk.yellow('\\nTreating warnings as errors because process.env.CI = true.\\n' + 'Most CI servers set it automatically.\\n'));\n        return reject(new Error(messages.warnings.join('\\n\\n')));\n      }\n\n      return resolve({\n        stats,\n        previousFileSizes,\n        warnings: messages.warnings\n      });\n    });\n  });\n}\n\nfunction copyPublicFolder() {\n  fs.copySync(paths.appPublic, paths.appBuild, {\n    dereference: true,\n    filter: file => file !== paths.appHtml\n  });\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-scripts/scripts/build.js"],"names":["process","env","BABEL_ENV","NODE_ENV","on","err","require","verifyPackageTree","SKIP_PREFLIGHT_CHECK","verifyTypeScriptSetup","path","chalk","fs","webpack","configFactory","paths","checkRequiredFiles","formatWebpackMessages","printHostingInstructions","FileSizeReporter","printBuildError","measureFileSizesBeforeBuild","printFileSizesAfterBuild","useYarn","existsSync","yarnLockFile","WARN_AFTER_BUNDLE_GZIP_SIZE","WARN_AFTER_CHUNK_GZIP_SIZE","isInteractive","stdout","isTTY","appHtml","appIndexJs","exit","config","checkBrowsers","appPath","then","appBuild","previousFileSizes","emptyDirSync","copyPublicFolder","build","stats","warnings","length","console","log","yellow","join","underline","cyan","green","appPackage","appPackageJson","publicUrl","publicUrlOrPath","publicPath","output","buildFolder","relative","cwd","tscCompileOnError","TSC_COMPILE_ON_ERROR","red","catch","message","NODE_PATH","compiler","Promise","resolve","reject","run","messages","errMessage","Object","prototype","hasOwnProperty","call","selector","errors","toJson","all","Error","CI","toLowerCase","copySync","appPublic","dereference","filter","file"],"mappings":"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","sourcesContent":["// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\n// Do this as the first thing so that any code reading it knows the right env.\nprocess.env.BABEL_ENV = 'production';\nprocess.env.NODE_ENV = 'production';\n\n// Makes the script crash on unhandled rejections instead of silently\n// ignoring them. In the future, promise rejections that are not handled will\n// terminate the Node.js process with a non-zero exit code.\nprocess.on('unhandledRejection', err => {\n  throw err;\n});\n\n// Ensure environment variables are read.\nrequire('../config/env');\n// @remove-on-eject-begin\n// Do the preflight checks (only happens before eject).\nconst verifyPackageTree = require('./utils/verifyPackageTree');\nif (process.env.SKIP_PREFLIGHT_CHECK !== 'true') {\n  verifyPackageTree();\n}\nconst verifyTypeScriptSetup = require('./utils/verifyTypeScriptSetup');\nverifyTypeScriptSetup();\n// @remove-on-eject-end\n\nconst path = require('path');\nconst chalk = require('react-dev-utils/chalk');\nconst fs = require('fs-extra');\nconst webpack = require('webpack');\nconst configFactory = require('../config/webpack.config');\nconst paths = require('../config/paths');\nconst checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');\nconst formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');\nconst printHostingInstructions = require('react-dev-utils/printHostingInstructions');\nconst FileSizeReporter = require('react-dev-utils/FileSizeReporter');\nconst printBuildError = require('react-dev-utils/printBuildError');\n\nconst measureFileSizesBeforeBuild =\n  FileSizeReporter.measureFileSizesBeforeBuild;\nconst printFileSizesAfterBuild = FileSizeReporter.printFileSizesAfterBuild;\nconst useYarn = fs.existsSync(paths.yarnLockFile);\n\n// These sizes are pretty large. We'll warn for bundles exceeding them.\nconst WARN_AFTER_BUNDLE_GZIP_SIZE = 512 * 1024;\nconst WARN_AFTER_CHUNK_GZIP_SIZE = 1024 * 1024;\n\nconst isInteractive = process.stdout.isTTY;\n\n// Warn and crash if required files are missing\nif (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {\n  process.exit(1);\n}\n\n// Generate configuration\nconst config = configFactory('production');\n\n// We require that you explicitly set browsers and do not fall back to\n// browserslist defaults.\nconst { checkBrowsers } = require('react-dev-utils/browsersHelper');\ncheckBrowsers(paths.appPath, isInteractive)\n  .then(() => {\n    // First, read the current file sizes in build directory.\n    // This lets us display how much they changed later.\n    return measureFileSizesBeforeBuild(paths.appBuild);\n  })\n  .then(previousFileSizes => {\n    // Remove all content but keep the directory so that\n    // if you're in it, you don't end up in Trash\n    fs.emptyDirSync(paths.appBuild);\n    // Merge with the public folder\n    copyPublicFolder();\n    // Start the webpack build\n    return build(previousFileSizes);\n  })\n  .then(\n    ({ stats, previousFileSizes, warnings }) => {\n      if (warnings.length) {\n        console.log(chalk.yellow('Compiled with warnings.\\n'));\n        console.log(warnings.join('\\n\\n'));\n        console.log(\n          '\\nSearch for the ' +\n            chalk.underline(chalk.yellow('keywords')) +\n            ' to learn more about each warning.'\n        );\n        console.log(\n          'To ignore, add ' +\n            chalk.cyan('// eslint-disable-next-line') +\n            ' to the line before.\\n'\n        );\n      } else {\n        console.log(chalk.green('Compiled successfully.\\n'));\n      }\n\n      console.log('File sizes after gzip:\\n');\n      printFileSizesAfterBuild(\n        stats,\n        previousFileSizes,\n        paths.appBuild,\n        WARN_AFTER_BUNDLE_GZIP_SIZE,\n        WARN_AFTER_CHUNK_GZIP_SIZE\n      );\n      console.log();\n\n      const appPackage = require(paths.appPackageJson);\n      const publicUrl = paths.publicUrlOrPath;\n      const publicPath = config.output.publicPath;\n      const buildFolder = path.relative(process.cwd(), paths.appBuild);\n      printHostingInstructions(\n        appPackage,\n        publicUrl,\n        publicPath,\n        buildFolder,\n        useYarn\n      );\n    },\n    err => {\n      const tscCompileOnError = process.env.TSC_COMPILE_ON_ERROR === 'true';\n      if (tscCompileOnError) {\n        console.log(\n          chalk.yellow(\n            'Compiled with the following type errors (you may want to check these before deploying your app):\\n'\n          )\n        );\n        printBuildError(err);\n      } else {\n        console.log(chalk.red('Failed to compile.\\n'));\n        printBuildError(err);\n        process.exit(1);\n      }\n    }\n  )\n  .catch(err => {\n    if (err && err.message) {\n      console.log(err.message);\n    }\n    process.exit(1);\n  });\n\n// Create the production build and print the deployment instructions.\nfunction build(previousFileSizes) {\n  // We used to support resolving modules according to `NODE_PATH`.\n  // This now has been deprecated in favor of jsconfig/tsconfig.json\n  // This lets you use absolute paths in imports inside large monorepos:\n  if (process.env.NODE_PATH) {\n    console.log(\n      chalk.yellow(\n        'Setting NODE_PATH to resolve modules absolutely has been deprecated in favor of setting baseUrl in jsconfig.json (or tsconfig.json if you are using TypeScript) and will be removed in a future major release of create-react-app.'\n      )\n    );\n    console.log();\n  }\n\n  console.log('Creating an optimized production build...');\n\n  const compiler = webpack(config);\n  return new Promise((resolve, reject) => {\n    compiler.run((err, stats) => {\n      let messages;\n      if (err) {\n        if (!err.message) {\n          return reject(err);\n        }\n\n        let errMessage = err.message;\n\n        // Add additional information for postcss errors\n        if (Object.prototype.hasOwnProperty.call(err, 'postcssNode')) {\n          errMessage +=\n            '\\nCompileError: Begins at CSS selector ' +\n            err['postcssNode'].selector;\n        }\n\n        messages = formatWebpackMessages({\n          errors: [errMessage],\n          warnings: [],\n        });\n      } else {\n        messages = formatWebpackMessages(\n          stats.toJson({ all: false, warnings: true, errors: true })\n        );\n      }\n      if (messages.errors.length) {\n        // Only keep the first error. Others are often indicative\n        // of the same problem, but confuse the reader with noise.\n        if (messages.errors.length > 1) {\n          messages.errors.length = 1;\n        }\n        return reject(new Error(messages.errors.join('\\n\\n')));\n      }\n      if (\n        process.env.CI &&\n        (typeof process.env.CI !== 'string' ||\n          process.env.CI.toLowerCase() !== 'false') &&\n        messages.warnings.length\n      ) {\n        console.log(\n          chalk.yellow(\n            '\\nTreating warnings as errors because process.env.CI = true.\\n' +\n              'Most CI servers set it automatically.\\n'\n          )\n        );\n        return reject(new Error(messages.warnings.join('\\n\\n')));\n      }\n\n      return resolve({\n        stats,\n        previousFileSizes,\n        warnings: messages.warnings,\n      });\n    });\n  });\n}\n\nfunction copyPublicFolder() {\n  fs.copySync(paths.appPublic, paths.appBuild, {\n    dereference: true,\n    filter: file => file !== paths.appHtml,\n  });\n}\n"]},"metadata":{},"sourceType":"script"}