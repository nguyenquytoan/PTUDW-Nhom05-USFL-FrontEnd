{"ast":null,"code":"'use strict';\n\nvar PlainValue = require('./PlainValue-ec8e588e.js');\n\nvar resolveSeq = require('./resolveSeq-4a68b39b.js');\n/* global atob, btoa, Buffer */\n\n\nconst binary = {\n  identify: value => value instanceof Uint8Array,\n  // Buffer inherits from Uint8Array\n  default: false,\n  tag: 'tag:yaml.org,2002:binary',\n\n  /**\n   * Returns a Buffer in node and an Uint8Array in browsers\n   *\n   * To use the resulting buffer as an image, you'll want to do something like:\n   *\n   *   const blob = new Blob([buffer], { type: 'image/jpeg' })\n   *   document.querySelector('#photo').src = URL.createObjectURL(blob)\n   */\n  resolve: (doc, node) => {\n    const src = resolveSeq.resolveString(doc, node);\n\n    if (typeof Buffer === 'function') {\n      return Buffer.from(src, 'base64');\n    } else if (typeof atob === 'function') {\n      // On IE 11, atob() can't handle newlines\n      const str = atob(src.replace(/[\\n\\r]/g, ''));\n      const buffer = new Uint8Array(str.length);\n\n      for (let i = 0; i < str.length; ++i) buffer[i] = str.charCodeAt(i);\n\n      return buffer;\n    } else {\n      const msg = 'This environment does not support reading binary tags; either Buffer or atob is required';\n      doc.errors.push(new PlainValue.YAMLReferenceError(node, msg));\n      return null;\n    }\n  },\n  options: resolveSeq.binaryOptions,\n  stringify: ({\n    comment,\n    type,\n    value\n  }, ctx, onComment, onChompKeep) => {\n    let src;\n\n    if (typeof Buffer === 'function') {\n      src = value instanceof Buffer ? value.toString('base64') : Buffer.from(value.buffer).toString('base64');\n    } else if (typeof btoa === 'function') {\n      let s = '';\n\n      for (let i = 0; i < value.length; ++i) s += String.fromCharCode(value[i]);\n\n      src = btoa(s);\n    } else {\n      throw new Error('This environment does not support writing binary tags; either Buffer or btoa is required');\n    }\n\n    if (!type) type = resolveSeq.binaryOptions.defaultType;\n\n    if (type === PlainValue.Type.QUOTE_DOUBLE) {\n      value = src;\n    } else {\n      const {\n        lineWidth\n      } = resolveSeq.binaryOptions;\n      const n = Math.ceil(src.length / lineWidth);\n      const lines = new Array(n);\n\n      for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {\n        lines[i] = src.substr(o, lineWidth);\n      }\n\n      value = lines.join(type === PlainValue.Type.BLOCK_LITERAL ? '\\n' : ' ');\n    }\n\n    return resolveSeq.stringifyString({\n      comment,\n      type,\n      value\n    }, ctx, onComment, onChompKeep);\n  }\n};\n\nfunction parsePairs(doc, cst) {\n  const seq = resolveSeq.resolveSeq(doc, cst);\n\n  for (let i = 0; i < seq.items.length; ++i) {\n    let item = seq.items[i];\n    if (item instanceof resolveSeq.Pair) continue;else if (item instanceof resolveSeq.YAMLMap) {\n      if (item.items.length > 1) {\n        const msg = 'Each pair must have its own sequence indicator';\n        throw new PlainValue.YAMLSemanticError(cst, msg);\n      }\n\n      const pair = item.items[0] || new resolveSeq.Pair();\n      if (item.commentBefore) pair.commentBefore = pair.commentBefore ? `${item.commentBefore}\\n${pair.commentBefore}` : item.commentBefore;\n      if (item.comment) pair.comment = pair.comment ? `${item.comment}\\n${pair.comment}` : item.comment;\n      item = pair;\n    }\n    seq.items[i] = item instanceof resolveSeq.Pair ? item : new resolveSeq.Pair(item);\n  }\n\n  return seq;\n}\n\nfunction createPairs(schema, iterable, ctx) {\n  const pairs = new resolveSeq.YAMLSeq(schema);\n  pairs.tag = 'tag:yaml.org,2002:pairs';\n\n  for (const it of iterable) {\n    let key, value;\n\n    if (Array.isArray(it)) {\n      if (it.length === 2) {\n        key = it[0];\n        value = it[1];\n      } else throw new TypeError(`Expected [key, value] tuple: ${it}`);\n    } else if (it && it instanceof Object) {\n      const keys = Object.keys(it);\n\n      if (keys.length === 1) {\n        key = keys[0];\n        value = it[key];\n      } else throw new TypeError(`Expected { key: value } tuple: ${it}`);\n    } else {\n      key = it;\n    }\n\n    const pair = schema.createPair(key, value, ctx);\n    pairs.items.push(pair);\n  }\n\n  return pairs;\n}\n\nconst pairs = {\n  default: false,\n  tag: 'tag:yaml.org,2002:pairs',\n  resolve: parsePairs,\n  createNode: createPairs\n};\n\nclass YAMLOMap extends resolveSeq.YAMLSeq {\n  constructor() {\n    super();\n\n    PlainValue._defineProperty(this, \"add\", resolveSeq.YAMLMap.prototype.add.bind(this));\n\n    PlainValue._defineProperty(this, \"delete\", resolveSeq.YAMLMap.prototype.delete.bind(this));\n\n    PlainValue._defineProperty(this, \"get\", resolveSeq.YAMLMap.prototype.get.bind(this));\n\n    PlainValue._defineProperty(this, \"has\", resolveSeq.YAMLMap.prototype.has.bind(this));\n\n    PlainValue._defineProperty(this, \"set\", resolveSeq.YAMLMap.prototype.set.bind(this));\n\n    this.tag = YAMLOMap.tag;\n  }\n\n  toJSON(_, ctx) {\n    const map = new Map();\n    if (ctx && ctx.onCreate) ctx.onCreate(map);\n\n    for (const pair of this.items) {\n      let key, value;\n\n      if (pair instanceof resolveSeq.Pair) {\n        key = resolveSeq.toJSON(pair.key, '', ctx);\n        value = resolveSeq.toJSON(pair.value, key, ctx);\n      } else {\n        key = resolveSeq.toJSON(pair, '', ctx);\n      }\n\n      if (map.has(key)) throw new Error('Ordered maps must not include duplicate keys');\n      map.set(key, value);\n    }\n\n    return map;\n  }\n\n}\n\nPlainValue._defineProperty(YAMLOMap, \"tag\", 'tag:yaml.org,2002:omap');\n\nfunction parseOMap(doc, cst) {\n  const pairs = parsePairs(doc, cst);\n  const seenKeys = [];\n\n  for (const {\n    key\n  } of pairs.items) {\n    if (key instanceof resolveSeq.Scalar) {\n      if (seenKeys.includes(key.value)) {\n        const msg = 'Ordered maps must not include duplicate keys';\n        throw new PlainValue.YAMLSemanticError(cst, msg);\n      } else {\n        seenKeys.push(key.value);\n      }\n    }\n  }\n\n  return Object.assign(new YAMLOMap(), pairs);\n}\n\nfunction createOMap(schema, iterable, ctx) {\n  const pairs = createPairs(schema, iterable, ctx);\n  const omap = new YAMLOMap();\n  omap.items = pairs.items;\n  return omap;\n}\n\nconst omap = {\n  identify: value => value instanceof Map,\n  nodeClass: YAMLOMap,\n  default: false,\n  tag: 'tag:yaml.org,2002:omap',\n  resolve: parseOMap,\n  createNode: createOMap\n};\n\nclass YAMLSet extends resolveSeq.YAMLMap {\n  constructor() {\n    super();\n    this.tag = YAMLSet.tag;\n  }\n\n  add(key) {\n    const pair = key instanceof resolveSeq.Pair ? key : new resolveSeq.Pair(key);\n    const prev = resolveSeq.findPair(this.items, pair.key);\n    if (!prev) this.items.push(pair);\n  }\n\n  get(key, keepPair) {\n    const pair = resolveSeq.findPair(this.items, key);\n    return !keepPair && pair instanceof resolveSeq.Pair ? pair.key instanceof resolveSeq.Scalar ? pair.key.value : pair.key : pair;\n  }\n\n  set(key, value) {\n    if (typeof value !== 'boolean') throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);\n    const prev = resolveSeq.findPair(this.items, key);\n\n    if (prev && !value) {\n      this.items.splice(this.items.indexOf(prev), 1);\n    } else if (!prev && value) {\n      this.items.push(new resolveSeq.Pair(key));\n    }\n  }\n\n  toJSON(_, ctx) {\n    return super.toJSON(_, ctx, Set);\n  }\n\n  toString(ctx, onComment, onChompKeep) {\n    if (!ctx) return JSON.stringify(this);\n    if (this.hasAllNullValues()) return super.toString(ctx, onComment, onChompKeep);else throw new Error('Set items must all have null values');\n  }\n\n}\n\nPlainValue._defineProperty(YAMLSet, \"tag\", 'tag:yaml.org,2002:set');\n\nfunction parseSet(doc, cst) {\n  const map = resolveSeq.resolveMap(doc, cst);\n  if (!map.hasAllNullValues()) throw new PlainValue.YAMLSemanticError(cst, 'Set items must all have null values');\n  return Object.assign(new YAMLSet(), map);\n}\n\nfunction createSet(schema, iterable, ctx) {\n  const set = new YAMLSet();\n\n  for (const value of iterable) set.items.push(schema.createPair(value, null, ctx));\n\n  return set;\n}\n\nconst set = {\n  identify: value => value instanceof Set,\n  nodeClass: YAMLSet,\n  default: false,\n  tag: 'tag:yaml.org,2002:set',\n  resolve: parseSet,\n  createNode: createSet\n};\n\nconst parseSexagesimal = (sign, parts) => {\n  const n = parts.split(':').reduce((n, p) => n * 60 + Number(p), 0);\n  return sign === '-' ? -n : n;\n}; // hhhh:mm:ss.sss\n\n\nconst stringifySexagesimal = ({\n  value\n}) => {\n  if (isNaN(value) || !isFinite(value)) return resolveSeq.stringifyNumber(value);\n  let sign = '';\n\n  if (value < 0) {\n    sign = '-';\n    value = Math.abs(value);\n  }\n\n  const parts = [value % 60]; // seconds, including ms\n\n  if (value < 60) {\n    parts.unshift(0); // at least one : is required\n  } else {\n    value = Math.round((value - parts[0]) / 60);\n    parts.unshift(value % 60); // minutes\n\n    if (value >= 60) {\n      value = Math.round((value - parts[0]) / 60);\n      parts.unshift(value); // hours\n    }\n  }\n\n  return sign + parts.map(n => n < 10 ? '0' + String(n) : String(n)).join(':').replace(/000000\\d*$/, '') // % 60 may introduce error\n  ;\n};\n\nconst intTime = {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'TIME',\n  test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+)$/,\n  resolve: (str, sign, parts) => parseSexagesimal(sign, parts.replace(/_/g, '')),\n  stringify: stringifySexagesimal\n};\nconst floatTime = {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  format: 'TIME',\n  test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*)$/,\n  resolve: (str, sign, parts) => parseSexagesimal(sign, parts.replace(/_/g, '')),\n  stringify: stringifySexagesimal\n};\nconst timestamp = {\n  identify: value => value instanceof Date,\n  default: true,\n  tag: 'tag:yaml.org,2002:timestamp',\n  // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part\n  // may be omitted altogether, resulting in a date format. In such a case, the time part is\n  // assumed to be 00:00:00Z (start of day, UTC).\n  test: RegExp('^(?:' + '([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' + // YYYY-Mm-Dd\n  '(?:(?:t|T|[ \\\\t]+)' + // t | T | whitespace\n  '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\\\.[0-9]+)?)' + // Hh:Mm:Ss(.ss)?\n  '(?:[ \\\\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' + // Z | +5 | -03:30\n  ')?' + ')$'),\n  resolve: (str, year, month, day, hour, minute, second, millisec, tz) => {\n    if (millisec) millisec = (millisec + '00').substr(1, 3);\n    let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec || 0);\n\n    if (tz && tz !== 'Z') {\n      let d = parseSexagesimal(tz[0], tz.slice(1));\n      if (Math.abs(d) < 30) d *= 60;\n      date -= 60000 * d;\n    }\n\n    return new Date(date);\n  },\n  stringify: ({\n    value\n  }) => value.toISOString().replace(/((T00:00)?:00)?\\.000Z$/, '')\n};\n/* global console, process, YAML_SILENCE_DEPRECATION_WARNINGS, YAML_SILENCE_WARNINGS */\n\nfunction shouldWarn(deprecation) {\n  const env = typeof process !== 'undefined' && process.env || {};\n\n  if (deprecation) {\n    if (typeof YAML_SILENCE_DEPRECATION_WARNINGS !== 'undefined') return !YAML_SILENCE_DEPRECATION_WARNINGS;\n    return !env.YAML_SILENCE_DEPRECATION_WARNINGS;\n  }\n\n  if (typeof YAML_SILENCE_WARNINGS !== 'undefined') return !YAML_SILENCE_WARNINGS;\n  return !env.YAML_SILENCE_WARNINGS;\n}\n\nfunction warn(warning, type) {\n  if (shouldWarn(false)) {\n    const emit = typeof process !== 'undefined' && process.emitWarning; // This will throw in Jest if `warning` is an Error instance due to\n    // https://github.com/facebook/jest/issues/2549\n\n    if (emit) emit(warning, type);else {\n      // eslint-disable-next-line no-console\n      console.warn(type ? `${type}: ${warning}` : warning);\n    }\n  }\n}\n\nfunction warnFileDeprecation(filename) {\n  if (shouldWarn(true)) {\n    const path = filename.replace(/.*yaml[/\\\\]/i, '').replace(/\\.js$/, '').replace(/\\\\/g, '/');\n    warn(`The endpoint 'yaml/${path}' will be removed in a future release.`, 'DeprecationWarning');\n  }\n}\n\nconst warned = {};\n\nfunction warnOptionDeprecation(name, alternative) {\n  if (!warned[name] && shouldWarn(true)) {\n    warned[name] = true;\n    let msg = `The option '${name}' will be removed in a future release`;\n    msg += alternative ? `, use '${alternative}' instead.` : '.';\n    warn(msg, 'DeprecationWarning');\n  }\n}\n\nexports.binary = binary;\nexports.floatTime = floatTime;\nexports.intTime = intTime;\nexports.omap = omap;\nexports.pairs = pairs;\nexports.set = set;\nexports.timestamp = timestamp;\nexports.warn = warn;\nexports.warnFileDeprecation = warnFileDeprecation;\nexports.warnOptionDeprecation = warnOptionDeprecation;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/yaml/dist/warnings-39684f17.js"],"names":["PlainValue","require","resolveSeq","binary","identify","value","Uint8Array","default","tag","resolve","doc","node","src","resolveString","Buffer","from","atob","str","replace","buffer","length","i","charCodeAt","msg","errors","push","YAMLReferenceError","options","binaryOptions","stringify","comment","type","ctx","onComment","onChompKeep","toString","btoa","s","String","fromCharCode","Error","defaultType","Type","QUOTE_DOUBLE","lineWidth","n","Math","ceil","lines","Array","o","substr","join","BLOCK_LITERAL","stringifyString","parsePairs","cst","seq","items","item","Pair","YAMLMap","YAMLSemanticError","pair","commentBefore","createPairs","schema","iterable","pairs","YAMLSeq","it","key","isArray","TypeError","Object","keys","createPair","createNode","YAMLOMap","constructor","_defineProperty","prototype","add","bind","delete","get","has","set","toJSON","_","map","Map","onCreate","parseOMap","seenKeys","Scalar","includes","assign","createOMap","omap","nodeClass","YAMLSet","prev","findPair","keepPair","splice","indexOf","Set","JSON","hasAllNullValues","parseSet","resolveMap","createSet","parseSexagesimal","sign","parts","split","reduce","p","Number","stringifySexagesimal","isNaN","isFinite","stringifyNumber","abs","unshift","round","intTime","format","test","floatTime","timestamp","Date","RegExp","year","month","day","hour","minute","second","millisec","tz","date","UTC","d","slice","toISOString","shouldWarn","deprecation","env","process","YAML_SILENCE_DEPRECATION_WARNINGS","YAML_SILENCE_WARNINGS","warn","warning","emit","emitWarning","console","warnFileDeprecation","filename","path","warned","warnOptionDeprecation","name","alternative","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar PlainValue = require('./PlainValue-ec8e588e.js');\nvar resolveSeq = require('./resolveSeq-4a68b39b.js');\n\n/* global atob, btoa, Buffer */\nconst binary = {\n  identify: value => value instanceof Uint8Array,\n  // Buffer inherits from Uint8Array\n  default: false,\n  tag: 'tag:yaml.org,2002:binary',\n\n  /**\n   * Returns a Buffer in node and an Uint8Array in browsers\n   *\n   * To use the resulting buffer as an image, you'll want to do something like:\n   *\n   *   const blob = new Blob([buffer], { type: 'image/jpeg' })\n   *   document.querySelector('#photo').src = URL.createObjectURL(blob)\n   */\n  resolve: (doc, node) => {\n    const src = resolveSeq.resolveString(doc, node);\n\n    if (typeof Buffer === 'function') {\n      return Buffer.from(src, 'base64');\n    } else if (typeof atob === 'function') {\n      // On IE 11, atob() can't handle newlines\n      const str = atob(src.replace(/[\\n\\r]/g, ''));\n      const buffer = new Uint8Array(str.length);\n\n      for (let i = 0; i < str.length; ++i) buffer[i] = str.charCodeAt(i);\n\n      return buffer;\n    } else {\n      const msg = 'This environment does not support reading binary tags; either Buffer or atob is required';\n      doc.errors.push(new PlainValue.YAMLReferenceError(node, msg));\n      return null;\n    }\n  },\n  options: resolveSeq.binaryOptions,\n  stringify: ({\n    comment,\n    type,\n    value\n  }, ctx, onComment, onChompKeep) => {\n    let src;\n\n    if (typeof Buffer === 'function') {\n      src = value instanceof Buffer ? value.toString('base64') : Buffer.from(value.buffer).toString('base64');\n    } else if (typeof btoa === 'function') {\n      let s = '';\n\n      for (let i = 0; i < value.length; ++i) s += String.fromCharCode(value[i]);\n\n      src = btoa(s);\n    } else {\n      throw new Error('This environment does not support writing binary tags; either Buffer or btoa is required');\n    }\n\n    if (!type) type = resolveSeq.binaryOptions.defaultType;\n\n    if (type === PlainValue.Type.QUOTE_DOUBLE) {\n      value = src;\n    } else {\n      const {\n        lineWidth\n      } = resolveSeq.binaryOptions;\n      const n = Math.ceil(src.length / lineWidth);\n      const lines = new Array(n);\n\n      for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {\n        lines[i] = src.substr(o, lineWidth);\n      }\n\n      value = lines.join(type === PlainValue.Type.BLOCK_LITERAL ? '\\n' : ' ');\n    }\n\n    return resolveSeq.stringifyString({\n      comment,\n      type,\n      value\n    }, ctx, onComment, onChompKeep);\n  }\n};\n\nfunction parsePairs(doc, cst) {\n  const seq = resolveSeq.resolveSeq(doc, cst);\n\n  for (let i = 0; i < seq.items.length; ++i) {\n    let item = seq.items[i];\n    if (item instanceof resolveSeq.Pair) continue;else if (item instanceof resolveSeq.YAMLMap) {\n      if (item.items.length > 1) {\n        const msg = 'Each pair must have its own sequence indicator';\n        throw new PlainValue.YAMLSemanticError(cst, msg);\n      }\n\n      const pair = item.items[0] || new resolveSeq.Pair();\n      if (item.commentBefore) pair.commentBefore = pair.commentBefore ? `${item.commentBefore}\\n${pair.commentBefore}` : item.commentBefore;\n      if (item.comment) pair.comment = pair.comment ? `${item.comment}\\n${pair.comment}` : item.comment;\n      item = pair;\n    }\n    seq.items[i] = item instanceof resolveSeq.Pair ? item : new resolveSeq.Pair(item);\n  }\n\n  return seq;\n}\nfunction createPairs(schema, iterable, ctx) {\n  const pairs = new resolveSeq.YAMLSeq(schema);\n  pairs.tag = 'tag:yaml.org,2002:pairs';\n\n  for (const it of iterable) {\n    let key, value;\n\n    if (Array.isArray(it)) {\n      if (it.length === 2) {\n        key = it[0];\n        value = it[1];\n      } else throw new TypeError(`Expected [key, value] tuple: ${it}`);\n    } else if (it && it instanceof Object) {\n      const keys = Object.keys(it);\n\n      if (keys.length === 1) {\n        key = keys[0];\n        value = it[key];\n      } else throw new TypeError(`Expected { key: value } tuple: ${it}`);\n    } else {\n      key = it;\n    }\n\n    const pair = schema.createPair(key, value, ctx);\n    pairs.items.push(pair);\n  }\n\n  return pairs;\n}\nconst pairs = {\n  default: false,\n  tag: 'tag:yaml.org,2002:pairs',\n  resolve: parsePairs,\n  createNode: createPairs\n};\n\nclass YAMLOMap extends resolveSeq.YAMLSeq {\n  constructor() {\n    super();\n\n    PlainValue._defineProperty(this, \"add\", resolveSeq.YAMLMap.prototype.add.bind(this));\n\n    PlainValue._defineProperty(this, \"delete\", resolveSeq.YAMLMap.prototype.delete.bind(this));\n\n    PlainValue._defineProperty(this, \"get\", resolveSeq.YAMLMap.prototype.get.bind(this));\n\n    PlainValue._defineProperty(this, \"has\", resolveSeq.YAMLMap.prototype.has.bind(this));\n\n    PlainValue._defineProperty(this, \"set\", resolveSeq.YAMLMap.prototype.set.bind(this));\n\n    this.tag = YAMLOMap.tag;\n  }\n\n  toJSON(_, ctx) {\n    const map = new Map();\n    if (ctx && ctx.onCreate) ctx.onCreate(map);\n\n    for (const pair of this.items) {\n      let key, value;\n\n      if (pair instanceof resolveSeq.Pair) {\n        key = resolveSeq.toJSON(pair.key, '', ctx);\n        value = resolveSeq.toJSON(pair.value, key, ctx);\n      } else {\n        key = resolveSeq.toJSON(pair, '', ctx);\n      }\n\n      if (map.has(key)) throw new Error('Ordered maps must not include duplicate keys');\n      map.set(key, value);\n    }\n\n    return map;\n  }\n\n}\n\nPlainValue._defineProperty(YAMLOMap, \"tag\", 'tag:yaml.org,2002:omap');\n\nfunction parseOMap(doc, cst) {\n  const pairs = parsePairs(doc, cst);\n  const seenKeys = [];\n\n  for (const {\n    key\n  } of pairs.items) {\n    if (key instanceof resolveSeq.Scalar) {\n      if (seenKeys.includes(key.value)) {\n        const msg = 'Ordered maps must not include duplicate keys';\n        throw new PlainValue.YAMLSemanticError(cst, msg);\n      } else {\n        seenKeys.push(key.value);\n      }\n    }\n  }\n\n  return Object.assign(new YAMLOMap(), pairs);\n}\n\nfunction createOMap(schema, iterable, ctx) {\n  const pairs = createPairs(schema, iterable, ctx);\n  const omap = new YAMLOMap();\n  omap.items = pairs.items;\n  return omap;\n}\n\nconst omap = {\n  identify: value => value instanceof Map,\n  nodeClass: YAMLOMap,\n  default: false,\n  tag: 'tag:yaml.org,2002:omap',\n  resolve: parseOMap,\n  createNode: createOMap\n};\n\nclass YAMLSet extends resolveSeq.YAMLMap {\n  constructor() {\n    super();\n    this.tag = YAMLSet.tag;\n  }\n\n  add(key) {\n    const pair = key instanceof resolveSeq.Pair ? key : new resolveSeq.Pair(key);\n    const prev = resolveSeq.findPair(this.items, pair.key);\n    if (!prev) this.items.push(pair);\n  }\n\n  get(key, keepPair) {\n    const pair = resolveSeq.findPair(this.items, key);\n    return !keepPair && pair instanceof resolveSeq.Pair ? pair.key instanceof resolveSeq.Scalar ? pair.key.value : pair.key : pair;\n  }\n\n  set(key, value) {\n    if (typeof value !== 'boolean') throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);\n    const prev = resolveSeq.findPair(this.items, key);\n\n    if (prev && !value) {\n      this.items.splice(this.items.indexOf(prev), 1);\n    } else if (!prev && value) {\n      this.items.push(new resolveSeq.Pair(key));\n    }\n  }\n\n  toJSON(_, ctx) {\n    return super.toJSON(_, ctx, Set);\n  }\n\n  toString(ctx, onComment, onChompKeep) {\n    if (!ctx) return JSON.stringify(this);\n    if (this.hasAllNullValues()) return super.toString(ctx, onComment, onChompKeep);else throw new Error('Set items must all have null values');\n  }\n\n}\n\nPlainValue._defineProperty(YAMLSet, \"tag\", 'tag:yaml.org,2002:set');\n\nfunction parseSet(doc, cst) {\n  const map = resolveSeq.resolveMap(doc, cst);\n  if (!map.hasAllNullValues()) throw new PlainValue.YAMLSemanticError(cst, 'Set items must all have null values');\n  return Object.assign(new YAMLSet(), map);\n}\n\nfunction createSet(schema, iterable, ctx) {\n  const set = new YAMLSet();\n\n  for (const value of iterable) set.items.push(schema.createPair(value, null, ctx));\n\n  return set;\n}\n\nconst set = {\n  identify: value => value instanceof Set,\n  nodeClass: YAMLSet,\n  default: false,\n  tag: 'tag:yaml.org,2002:set',\n  resolve: parseSet,\n  createNode: createSet\n};\n\nconst parseSexagesimal = (sign, parts) => {\n  const n = parts.split(':').reduce((n, p) => n * 60 + Number(p), 0);\n  return sign === '-' ? -n : n;\n}; // hhhh:mm:ss.sss\n\n\nconst stringifySexagesimal = ({\n  value\n}) => {\n  if (isNaN(value) || !isFinite(value)) return resolveSeq.stringifyNumber(value);\n  let sign = '';\n\n  if (value < 0) {\n    sign = '-';\n    value = Math.abs(value);\n  }\n\n  const parts = [value % 60]; // seconds, including ms\n\n  if (value < 60) {\n    parts.unshift(0); // at least one : is required\n  } else {\n    value = Math.round((value - parts[0]) / 60);\n    parts.unshift(value % 60); // minutes\n\n    if (value >= 60) {\n      value = Math.round((value - parts[0]) / 60);\n      parts.unshift(value); // hours\n    }\n  }\n\n  return sign + parts.map(n => n < 10 ? '0' + String(n) : String(n)).join(':').replace(/000000\\d*$/, '') // % 60 may introduce error\n  ;\n};\n\nconst intTime = {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'TIME',\n  test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+)$/,\n  resolve: (str, sign, parts) => parseSexagesimal(sign, parts.replace(/_/g, '')),\n  stringify: stringifySexagesimal\n};\nconst floatTime = {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  format: 'TIME',\n  test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*)$/,\n  resolve: (str, sign, parts) => parseSexagesimal(sign, parts.replace(/_/g, '')),\n  stringify: stringifySexagesimal\n};\nconst timestamp = {\n  identify: value => value instanceof Date,\n  default: true,\n  tag: 'tag:yaml.org,2002:timestamp',\n  // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part\n  // may be omitted altogether, resulting in a date format. In such a case, the time part is\n  // assumed to be 00:00:00Z (start of day, UTC).\n  test: RegExp('^(?:' + '([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' + // YYYY-Mm-Dd\n  '(?:(?:t|T|[ \\\\t]+)' + // t | T | whitespace\n  '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\\\.[0-9]+)?)' + // Hh:Mm:Ss(.ss)?\n  '(?:[ \\\\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' + // Z | +5 | -03:30\n  ')?' + ')$'),\n  resolve: (str, year, month, day, hour, minute, second, millisec, tz) => {\n    if (millisec) millisec = (millisec + '00').substr(1, 3);\n    let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec || 0);\n\n    if (tz && tz !== 'Z') {\n      let d = parseSexagesimal(tz[0], tz.slice(1));\n      if (Math.abs(d) < 30) d *= 60;\n      date -= 60000 * d;\n    }\n\n    return new Date(date);\n  },\n  stringify: ({\n    value\n  }) => value.toISOString().replace(/((T00:00)?:00)?\\.000Z$/, '')\n};\n\n/* global console, process, YAML_SILENCE_DEPRECATION_WARNINGS, YAML_SILENCE_WARNINGS */\nfunction shouldWarn(deprecation) {\n  const env = typeof process !== 'undefined' && process.env || {};\n\n  if (deprecation) {\n    if (typeof YAML_SILENCE_DEPRECATION_WARNINGS !== 'undefined') return !YAML_SILENCE_DEPRECATION_WARNINGS;\n    return !env.YAML_SILENCE_DEPRECATION_WARNINGS;\n  }\n\n  if (typeof YAML_SILENCE_WARNINGS !== 'undefined') return !YAML_SILENCE_WARNINGS;\n  return !env.YAML_SILENCE_WARNINGS;\n}\n\nfunction warn(warning, type) {\n  if (shouldWarn(false)) {\n    const emit = typeof process !== 'undefined' && process.emitWarning; // This will throw in Jest if `warning` is an Error instance due to\n    // https://github.com/facebook/jest/issues/2549\n\n    if (emit) emit(warning, type);else {\n      // eslint-disable-next-line no-console\n      console.warn(type ? `${type}: ${warning}` : warning);\n    }\n  }\n}\nfunction warnFileDeprecation(filename) {\n  if (shouldWarn(true)) {\n    const path = filename.replace(/.*yaml[/\\\\]/i, '').replace(/\\.js$/, '').replace(/\\\\/g, '/');\n    warn(`The endpoint 'yaml/${path}' will be removed in a future release.`, 'DeprecationWarning');\n  }\n}\nconst warned = {};\nfunction warnOptionDeprecation(name, alternative) {\n  if (!warned[name] && shouldWarn(true)) {\n    warned[name] = true;\n    let msg = `The option '${name}' will be removed in a future release`;\n    msg += alternative ? `, use '${alternative}' instead.` : '.';\n    warn(msg, 'DeprecationWarning');\n  }\n}\n\nexports.binary = binary;\nexports.floatTime = floatTime;\nexports.intTime = intTime;\nexports.omap = omap;\nexports.pairs = pairs;\nexports.set = set;\nexports.timestamp = timestamp;\nexports.warn = warn;\nexports.warnFileDeprecation = warnFileDeprecation;\nexports.warnOptionDeprecation = warnOptionDeprecation;\n"]},"metadata":{},"sourceType":"script"}