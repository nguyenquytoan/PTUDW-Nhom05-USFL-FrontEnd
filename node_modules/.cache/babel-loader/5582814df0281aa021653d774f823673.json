{"ast":null,"code":"/**\n * @fileoverview Rule to disallow returning values from setters\n * @author Milos Djermanovic\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\nconst {\n  findVariable\n} = require(\"eslint-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines whether the given identifier node is a reference to a global variable.\n * @param {ASTNode} node `Identifier` node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} True if the identifier is a reference to a global variable.\n */\n\n\nfunction isGlobalReference(node, scope) {\n  const variable = findVariable(scope, node);\n  return variable !== null && variable.scope.type === \"global\" && variable.defs.length === 0;\n}\n/**\n * Determines whether the given node is an argument of the specified global method call, at the given `index` position.\n * E.g., for given `index === 1`, this function checks for `objectName.methodName(foo, node)`, where objectName is a global variable.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @param {string} objectName Name of the global object.\n * @param {string} methodName Name of the method.\n * @param {number} index The given position.\n * @returns {boolean} `true` if the node is argument at the given position.\n */\n\n\nfunction isArgumentOfGlobalMethodCall(node, scope, objectName, methodName, index) {\n  const parent = node.parent;\n  return parent.type === \"CallExpression\" && parent.arguments[index] === node && parent.callee.type === \"MemberExpression\" && astUtils.getStaticPropertyName(parent.callee) === methodName && parent.callee.object.type === \"Identifier\" && parent.callee.object.name === objectName && isGlobalReference(parent.callee.object, scope);\n}\n/**\n * Determines whether the given node is used as a property descriptor.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} `true` if the node is a property descriptor.\n */\n\n\nfunction isPropertyDescriptor(node, scope) {\n  if (isArgumentOfGlobalMethodCall(node, scope, \"Object\", \"defineProperty\", 2) || isArgumentOfGlobalMethodCall(node, scope, \"Reflect\", \"defineProperty\", 2)) {\n    return true;\n  }\n\n  const parent = node.parent;\n\n  if (parent.type === \"Property\" && parent.value === node) {\n    const grandparent = parent.parent;\n\n    if (grandparent.type === \"ObjectExpression\" && (isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"create\", 1) || isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"defineProperties\", 1))) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Determines whether the given function node is used as a setter function.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} `true` if the node is a setter.\n */\n\n\nfunction isSetter(node, scope) {\n  const parent = node.parent;\n\n  if (parent.kind === \"set\" && parent.value === node) {\n    // Setter in an object literal or in a class\n    return true;\n  }\n\n  if (parent.type === \"Property\" && parent.value === node && astUtils.getStaticPropertyName(parent) === \"set\" && parent.parent.type === \"ObjectExpression\" && isPropertyDescriptor(parent.parent, scope)) {\n    // Setter in a property descriptor\n    return true;\n  }\n\n  return false;\n}\n/**\n * Finds function's outer scope.\n * @param {Scope} scope Function's own scope.\n * @returns {Scope} Function's outer scope.\n */\n\n\nfunction getOuterScope(scope) {\n  const upper = scope.upper;\n\n  if (upper.type === \"function-expression-name\") {\n    return upper.upper;\n  }\n\n  return upper;\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow returning values from setters\",\n      category: \"Possible Errors\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-setter-return\"\n    },\n    schema: [],\n    messages: {\n      returnsValue: \"Setter cannot return a value.\"\n    }\n  },\n\n  create(context) {\n    let funcInfo = null;\n    /**\n     * Creates and pushes to the stack a function info object for the given function node.\n     * @param {ASTNode} node The function node.\n     * @returns {void}\n     */\n\n    function enterFunction(node) {\n      const outerScope = getOuterScope(context.getScope());\n      funcInfo = {\n        upper: funcInfo,\n        isSetter: isSetter(node, outerScope)\n      };\n    }\n    /**\n     * Pops the current function info object from the stack.\n     * @returns {void}\n     */\n\n\n    function exitFunction() {\n      funcInfo = funcInfo.upper;\n    }\n    /**\n     * Reports the given node.\n     * @param {ASTNode} node Node to report.\n     * @returns {void}\n     */\n\n\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"returnsValue\"\n      });\n    }\n\n    return {\n      /*\n       * Function declarations cannot be setters, but we still have to track them in the `funcInfo` stack to avoid\n       * false positives, because a ReturnStatement node can belong to a function declaration inside a setter.\n       *\n       * Note: A previously declared function can be referenced and actually used as a setter in a property descriptor,\n       * but that's out of scope for this rule.\n       */\n      FunctionDeclaration: enterFunction,\n      FunctionExpression: enterFunction,\n\n      ArrowFunctionExpression(node) {\n        enterFunction(node);\n\n        if (funcInfo.isSetter && node.expression) {\n          // { set: foo => bar } property descriptor. Report implicit return 'bar' as the equivalent for a return statement.\n          report(node.body);\n        }\n      },\n\n      \"FunctionDeclaration:exit\": exitFunction,\n      \"FunctionExpression:exit\": exitFunction,\n      \"ArrowFunctionExpression:exit\": exitFunction,\n\n      ReturnStatement(node) {\n        // Global returns (e.g., at the top level of a Node module) don't have `funcInfo`.\n        if (funcInfo && funcInfo.isSetter && node.argument) {\n          report(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-setter-return.js"],"names":["astUtils","require","findVariable","isGlobalReference","node","scope","variable","type","defs","length","isArgumentOfGlobalMethodCall","objectName","methodName","index","parent","arguments","callee","getStaticPropertyName","object","name","isPropertyDescriptor","value","grandparent","isSetter","kind","getOuterScope","upper","module","exports","meta","docs","description","category","recommended","url","schema","messages","returnsValue","create","context","funcInfo","enterFunction","outerScope","getScope","exitFunction","report","messageId","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","expression","body","ReturnStatement","argument"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to disallow returning values from setters\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\nconst { findVariable } = require(\"eslint-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines whether the given identifier node is a reference to a global variable.\n * @param {ASTNode} node `Identifier` node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} True if the identifier is a reference to a global variable.\n */\nfunction isGlobalReference(node, scope) {\n    const variable = findVariable(scope, node);\n\n    return variable !== null && variable.scope.type === \"global\" && variable.defs.length === 0;\n}\n\n/**\n * Determines whether the given node is an argument of the specified global method call, at the given `index` position.\n * E.g., for given `index === 1`, this function checks for `objectName.methodName(foo, node)`, where objectName is a global variable.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @param {string} objectName Name of the global object.\n * @param {string} methodName Name of the method.\n * @param {number} index The given position.\n * @returns {boolean} `true` if the node is argument at the given position.\n */\nfunction isArgumentOfGlobalMethodCall(node, scope, objectName, methodName, index) {\n    const parent = node.parent;\n\n    return parent.type === \"CallExpression\" &&\n        parent.arguments[index] === node &&\n        parent.callee.type === \"MemberExpression\" &&\n        astUtils.getStaticPropertyName(parent.callee) === methodName &&\n        parent.callee.object.type === \"Identifier\" &&\n        parent.callee.object.name === objectName &&\n        isGlobalReference(parent.callee.object, scope);\n}\n\n/**\n * Determines whether the given node is used as a property descriptor.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} `true` if the node is a property descriptor.\n */\nfunction isPropertyDescriptor(node, scope) {\n    if (\n        isArgumentOfGlobalMethodCall(node, scope, \"Object\", \"defineProperty\", 2) ||\n        isArgumentOfGlobalMethodCall(node, scope, \"Reflect\", \"defineProperty\", 2)\n    ) {\n        return true;\n    }\n\n    const parent = node.parent;\n\n    if (\n        parent.type === \"Property\" &&\n        parent.value === node\n    ) {\n        const grandparent = parent.parent;\n\n        if (\n            grandparent.type === \"ObjectExpression\" &&\n            (\n                isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"create\", 1) ||\n                isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"defineProperties\", 1)\n            )\n        ) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Determines whether the given function node is used as a setter function.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} `true` if the node is a setter.\n */\nfunction isSetter(node, scope) {\n    const parent = node.parent;\n\n    if (\n        parent.kind === \"set\" &&\n        parent.value === node\n    ) {\n\n        // Setter in an object literal or in a class\n        return true;\n    }\n\n    if (\n        parent.type === \"Property\" &&\n        parent.value === node &&\n        astUtils.getStaticPropertyName(parent) === \"set\" &&\n        parent.parent.type === \"ObjectExpression\" &&\n        isPropertyDescriptor(parent.parent, scope)\n    ) {\n\n        // Setter in a property descriptor\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Finds function's outer scope.\n * @param {Scope} scope Function's own scope.\n * @returns {Scope} Function's outer scope.\n */\nfunction getOuterScope(scope) {\n    const upper = scope.upper;\n\n    if (upper.type === \"function-expression-name\") {\n        return upper.upper;\n    }\n\n    return upper;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow returning values from setters\",\n            category: \"Possible Errors\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-setter-return\"\n        },\n\n        schema: [],\n\n        messages: {\n            returnsValue: \"Setter cannot return a value.\"\n        }\n    },\n\n    create(context) {\n        let funcInfo = null;\n\n        /**\n         * Creates and pushes to the stack a function info object for the given function node.\n         * @param {ASTNode} node The function node.\n         * @returns {void}\n         */\n        function enterFunction(node) {\n            const outerScope = getOuterScope(context.getScope());\n\n            funcInfo = {\n                upper: funcInfo,\n                isSetter: isSetter(node, outerScope)\n            };\n        }\n\n        /**\n         * Pops the current function info object from the stack.\n         * @returns {void}\n         */\n        function exitFunction() {\n            funcInfo = funcInfo.upper;\n        }\n\n        /**\n         * Reports the given node.\n         * @param {ASTNode} node Node to report.\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({ node, messageId: \"returnsValue\" });\n        }\n\n        return {\n\n            /*\n             * Function declarations cannot be setters, but we still have to track them in the `funcInfo` stack to avoid\n             * false positives, because a ReturnStatement node can belong to a function declaration inside a setter.\n             *\n             * Note: A previously declared function can be referenced and actually used as a setter in a property descriptor,\n             * but that's out of scope for this rule.\n             */\n            FunctionDeclaration: enterFunction,\n            FunctionExpression: enterFunction,\n            ArrowFunctionExpression(node) {\n                enterFunction(node);\n\n                if (funcInfo.isSetter && node.expression) {\n\n                    // { set: foo => bar } property descriptor. Report implicit return 'bar' as the equivalent for a return statement.\n                    report(node.body);\n                }\n            },\n\n            \"FunctionDeclaration:exit\": exitFunction,\n            \"FunctionExpression:exit\": exitFunction,\n            \"ArrowFunctionExpression:exit\": exitFunction,\n\n            ReturnStatement(node) {\n\n                // Global returns (e.g., at the top level of a Node module) don't have `funcInfo`.\n                if (funcInfo && funcInfo.isSetter && node.argument) {\n                    report(node);\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}