{"ast":null,"code":"/* eslint-env mocha */\n\n/* eslint no-template-curly-in-string: 0 */\nimport assert from 'assert';\nimport { extractProp, describeIfNotBabylon, changePlugins, setParserName } from '../helper';\nimport { getLiteralPropValue } from '../../src/getPropValue';\ndescribe('getLiteralPropValue', () => {\n  beforeEach(() => {\n    setParserName('flow');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof getLiteralPropValue;\n    assert.equal(expected, actual);\n  });\n  it('should return undefined when not provided with a JSXAttribute', () => {\n    const expected = undefined;\n    const actual = getLiteralPropValue(1);\n    assert.equal(expected, actual);\n  });\n  it('should not throw error when trying to get value from unknown node type', () => {\n    const prop = {\n      type: 'JSXAttribute',\n      value: {\n        type: 'JSXExpressionContainer'\n      }\n    };\n    let counter = 0; // eslint-disable-next-line no-console\n\n    const errorOrig = console.error; // eslint-disable-next-line no-console\n\n    console.error = () => {\n      counter += 1;\n    };\n\n    let value;\n    assert.doesNotThrow(() => {\n      value = getLiteralPropValue(prop);\n    }, Error);\n    assert.equal(null, value);\n    assert.equal(counter, 1); // eslint-disable-next-line no-console\n\n    console.error = errorOrig;\n  });\n  describe('Null', () => {\n    it('should return true when no value is given', () => {\n      const prop = extractProp('<div foo />');\n      const expected = true;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n  });\n  describe('Literal', () => {\n    it('should return correct string if value is a string', () => {\n      const prop = extractProp('<div foo=\"bar\" />');\n      const expected = 'bar';\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should return correct string if value is a string expression', () => {\n      const prop = extractProp('<div foo={\"bar\"} />');\n      const expected = 'bar';\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should return correct integer if value is a integer expression', () => {\n      const prop = extractProp('<div foo={1} />');\n      const expected = 1;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should convert \"true\" to boolean type', () => {\n      const prop = extractProp('<div foo=\"true\" />');\n      const expected = true;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should convert \"TrUE\" to boolean type', () => {\n      const prop = extractProp('<div foo=\"TrUE\" />');\n      const expected = true;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should convert \"false\" to boolean type', () => {\n      const prop = extractProp('<div foo=\"false\" />');\n      const expected = false;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should convert \"FaLsE\" to boolean type', () => {\n      const prop = extractProp('<div foo=\"FaLsE\" />');\n      const expected = false;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should return String null when value is null', () => {\n      const prop = extractProp('<div foo={null} />');\n      const expected = 'null';\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n  });\n  describe('JSXElement', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={<bar />} />');\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n  });\n  describe('Identifier', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={bar} />');\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should return undefined when identifier is literally `undefined`', () => {\n      const prop = extractProp('<div foo={undefined} />');\n      const expected = undefined;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n  });\n  describe('Template literal', () => {\n    it('should return template literal with vars wrapped in curly braces', () => {\n      const prop = extractProp('<div foo={`bar ${baz}`} />');\n      const expected = 'bar {baz}';\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should return string \"undefined\" for expressions that evaluate to undefined', () => {\n      const prop = extractProp('<div foo={`bar ${undefined}`} />');\n      const expected = 'bar undefined';\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n  });\n  describe('Tagged Template literal', () => {\n    it('should return template literal with vars wrapped in curly braces', () => {\n      const prop = extractProp('<div foo={noop`bar ${baz}`} />');\n      const expected = 'bar {baz}';\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should return string \"undefined\" for expressions that evaluate to undefined', () => {\n      const prop = extractProp('<div foo={noop`bar ${undefined}`} />');\n      const expected = 'bar undefined';\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n  });\n  describe('Arrow function expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={ () => { return \"bar\"; }} />');\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n  });\n  describe('Function expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={ function() { return \"bar\"; } } />');\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n  });\n  describe('Logical expression', () => {\n    it('should return null for && operator', () => {\n      const prop = extractProp('<div foo={bar && baz} />');\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should return null for || operator', () => {\n      const prop = extractProp('<div foo={bar || baz} />');\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n  });\n  describe('Member expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={bar.baz} />');\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n  });\n  describe('Call expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={bar()} />');\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n  });\n  describe('Unary expression', () => {\n    it('should correctly evaluate an expression that prefixes with -', () => {\n      const prop = extractProp('<div foo={-bar} />'); // -\"bar\" => NaN\n\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n      assert.equal(expected, actual);\n    });\n    it('should correctly evaluate an expression that prefixes with -', () => {\n      const prop = extractProp('<div foo={-42} />');\n      const expected = -42;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should correctly evaluate an expression that prefixes with +', () => {\n      const prop = extractProp('<div foo={+bar} />'); // +\"bar\" => NaN\n\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n      assert.equal(expected, actual);\n    });\n    it('should correctly evaluate an expression that prefixes with +', () => {\n      const prop = extractProp('<div foo={+42} />');\n      const expected = 42;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should correctly evaluate an expression that prefixes with !', () => {\n      const prop = extractProp('<div foo={!bar} />');\n      const expected = false; // !\"bar\" === false\n\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should correctly evaluate an expression that prefixes with ~', () => {\n      const prop = extractProp('<div foo={~bar} />');\n      const expected = -1; // ~\"bar\" === -1\n\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should return true when evaluating `delete foo`', () => {\n      const prop = extractProp('<div foo={delete x} />');\n      const expected = true;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should return undefined when evaluating `void foo`', () => {\n      const prop = extractProp('<div foo={void x} />');\n      const expected = undefined;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    }); // TODO: We should fix this to check to see if we can evaluate it.\n\n    it('should return undefined when evaluating `typeof foo`', () => {\n      const prop = extractProp('<div foo={typeof x} />');\n      const expected = undefined;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n  });\n  describe('Update expression', () => {\n    it('should correctly evaluate an expression that prefixes with ++', () => {\n      const prop = extractProp('<div foo={++bar} />'); // ++\"bar\" => NaN\n\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n      assert.equal(expected, actual);\n    });\n    it('should correctly evaluate an expression that prefixes with --', () => {\n      const prop = extractProp('<div foo={--bar} />'); // --\"bar\" => NaN\n\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n      assert.equal(expected, actual);\n    });\n    it('should correctly evaluate an expression that suffixes with ++', () => {\n      const prop = extractProp('<div foo={bar++} />'); // \"bar\"++ => NaN\n\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n      assert.equal(expected, actual);\n    });\n    it('should correctly evaluate an expression that suffixes with --', () => {\n      const prop = extractProp('<div foo={bar--} />'); // \"bar\"-- => NaN\n\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n      assert.equal(expected, actual);\n    });\n  });\n  describe('This expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={this} />');\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n  });\n  describe('Conditional expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={bar ? baz : bam} />');\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n  });\n  describe('Binary expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={1 == \"1\"} />');\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n  });\n  describe('Object expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={ { bar: \"baz\" } } />');\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n      assert.deepEqual(expected, actual);\n    });\n  });\n  describe('New expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={new Bar()} />');\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n      assert.deepEqual(expected, actual);\n    });\n  });\n  describe('Array expression', () => {\n    it('should evaluate to correct representation of the the array in props', () => {\n      const prop = extractProp('<div foo={[\"bar\", 42, null]} />');\n      const expected = ['bar', 42];\n      const actual = getLiteralPropValue(prop);\n      assert.deepEqual(expected, actual);\n    });\n  });\n  it('should return an empty array provided an empty array in props', () => {\n    const prop = extractProp('<div foo={[]} />');\n    const expected = [];\n    const actual = getLiteralPropValue(prop);\n    assert.deepEqual(expected, actual);\n  });\n  describe('Bind expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={::this.handleClick} />');\n      const expected = 'null';\n      const actual = getLiteralPropValue(prop);\n      assert.deepEqual(expected, actual);\n    });\n  });\n  describeIfNotBabylon('Typescript', () => {\n    beforeEach(() => {\n      changePlugins(pls => [...pls, 'typescript']);\n    });\n    it('should return string representation of variable identifier wrapped in a Typescript non-null assertion', () => {\n      const prop = extractProp('<div foo={bar!} />');\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should return string representation of variable identifier wrapped in a deep Typescript non-null assertion', () => {\n      const prop = extractProp('<div foo={(bar!)!} />');\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n    it('should return string representation of variable identifier wrapped in a Typescript type coercion', () => {\n      changePlugins(pls => [...pls, 'typescript']);\n      const prop = extractProp('<div foo={bar as any} />');\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n      assert.equal(expected, actual);\n    });\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/__tests__/src/getPropLiteralValue-flowparser-test.js"],"names":["assert","extractProp","describeIfNotBabylon","changePlugins","setParserName","getLiteralPropValue","describe","beforeEach","it","expected","actual","equal","undefined","prop","type","value","counter","errorOrig","console","error","doesNotThrow","Error","Number","isNaN","deepEqual","pls"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\n/* eslint no-template-curly-in-string: 0 */\nimport assert from 'assert';\nimport {\n  extractProp,\n  describeIfNotBabylon,\n  changePlugins,\n  setParserName,\n} from '../helper';\nimport { getLiteralPropValue } from '../../src/getPropValue';\n\ndescribe('getLiteralPropValue', () => {\n  beforeEach(() => {\n    setParserName('flow');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof getLiteralPropValue;\n\n    assert.equal(expected, actual);\n  });\n\n  it('should return undefined when not provided with a JSXAttribute', () => {\n    const expected = undefined;\n    const actual = getLiteralPropValue(1);\n\n    assert.equal(expected, actual);\n  });\n\n  it('should not throw error when trying to get value from unknown node type', () => {\n    const prop = {\n      type: 'JSXAttribute',\n      value: {\n        type: 'JSXExpressionContainer',\n      },\n    };\n    let counter = 0;\n    // eslint-disable-next-line no-console\n    const errorOrig = console.error;\n    // eslint-disable-next-line no-console\n    console.error = () => {\n      counter += 1;\n    };\n    let value;\n    assert.doesNotThrow(() => {\n      value = getLiteralPropValue(prop);\n    }, Error);\n\n    assert.equal(null, value);\n    assert.equal(counter, 1);\n    // eslint-disable-next-line no-console\n    console.error = errorOrig;\n  });\n\n  describe('Null', () => {\n    it('should return true when no value is given', () => {\n      const prop = extractProp('<div foo />');\n\n      const expected = true;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n  });\n\n  describe('Literal', () => {\n    it('should return correct string if value is a string', () => {\n      const prop = extractProp('<div foo=\"bar\" />');\n\n      const expected = 'bar';\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should return correct string if value is a string expression', () => {\n      const prop = extractProp('<div foo={\"bar\"} />');\n\n      const expected = 'bar';\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should return correct integer if value is a integer expression', () => {\n      const prop = extractProp('<div foo={1} />');\n\n      const expected = 1;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should convert \"true\" to boolean type', () => {\n      const prop = extractProp('<div foo=\"true\" />');\n\n      const expected = true;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should convert \"TrUE\" to boolean type', () => {\n      const prop = extractProp('<div foo=\"TrUE\" />');\n\n      const expected = true;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should convert \"false\" to boolean type', () => {\n      const prop = extractProp('<div foo=\"false\" />');\n\n      const expected = false;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should convert \"FaLsE\" to boolean type', () => {\n      const prop = extractProp('<div foo=\"FaLsE\" />');\n\n      const expected = false;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should return String null when value is null', () => {\n      const prop = extractProp('<div foo={null} />');\n\n      const expected = 'null';\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n  });\n\n  describe('JSXElement', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={<bar />} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n  });\n\n  describe('Identifier', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={bar} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should return undefined when identifier is literally `undefined`', () => {\n      const prop = extractProp('<div foo={undefined} />');\n\n      const expected = undefined;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n  });\n\n  describe('Template literal', () => {\n    it('should return template literal with vars wrapped in curly braces', () => {\n      const prop = extractProp('<div foo={`bar ${baz}`} />');\n\n      const expected = 'bar {baz}';\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should return string \"undefined\" for expressions that evaluate to undefined', () => {\n      const prop = extractProp('<div foo={`bar ${undefined}`} />');\n\n      const expected = 'bar undefined';\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n  });\n\n  describe('Tagged Template literal', () => {\n    it('should return template literal with vars wrapped in curly braces', () => {\n      const prop = extractProp('<div foo={noop`bar ${baz}`} />');\n\n      const expected = 'bar {baz}';\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should return string \"undefined\" for expressions that evaluate to undefined', () => {\n      const prop = extractProp('<div foo={noop`bar ${undefined}`} />');\n\n      const expected = 'bar undefined';\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n  });\n\n  describe('Arrow function expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={ () => { return \"bar\"; }} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n  });\n\n  describe('Function expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={ function() { return \"bar\"; } } />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n  });\n\n  describe('Logical expression', () => {\n    it('should return null for && operator', () => {\n      const prop = extractProp('<div foo={bar && baz} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should return null for || operator', () => {\n      const prop = extractProp('<div foo={bar || baz} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n  });\n\n  describe('Member expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={bar.baz} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n  });\n\n  describe('Call expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={bar()} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n  });\n\n  describe('Unary expression', () => {\n    it('should correctly evaluate an expression that prefixes with -', () => {\n      const prop = extractProp('<div foo={-bar} />');\n\n      // -\"bar\" => NaN\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n\n      assert.equal(expected, actual);\n    });\n\n    it('should correctly evaluate an expression that prefixes with -', () => {\n      const prop = extractProp('<div foo={-42} />');\n\n      const expected = -42;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should correctly evaluate an expression that prefixes with +', () => {\n      const prop = extractProp('<div foo={+bar} />');\n\n      // +\"bar\" => NaN\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n\n      assert.equal(expected, actual);\n    });\n\n    it('should correctly evaluate an expression that prefixes with +', () => {\n      const prop = extractProp('<div foo={+42} />');\n\n      const expected = 42;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should correctly evaluate an expression that prefixes with !', () => {\n      const prop = extractProp('<div foo={!bar} />');\n\n      const expected = false; // !\"bar\" === false\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should correctly evaluate an expression that prefixes with ~', () => {\n      const prop = extractProp('<div foo={~bar} />');\n\n      const expected = -1; // ~\"bar\" === -1\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should return true when evaluating `delete foo`', () => {\n      const prop = extractProp('<div foo={delete x} />');\n\n      const expected = true;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should return undefined when evaluating `void foo`', () => {\n      const prop = extractProp('<div foo={void x} />');\n\n      const expected = undefined;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    // TODO: We should fix this to check to see if we can evaluate it.\n    it('should return undefined when evaluating `typeof foo`', () => {\n      const prop = extractProp('<div foo={typeof x} />');\n\n      const expected = undefined;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n  });\n\n  describe('Update expression', () => {\n    it('should correctly evaluate an expression that prefixes with ++', () => {\n      const prop = extractProp('<div foo={++bar} />');\n\n      // ++\"bar\" => NaN\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n\n      assert.equal(expected, actual);\n    });\n\n    it('should correctly evaluate an expression that prefixes with --', () => {\n      const prop = extractProp('<div foo={--bar} />');\n\n      // --\"bar\" => NaN\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n\n      assert.equal(expected, actual);\n    });\n\n    it('should correctly evaluate an expression that suffixes with ++', () => {\n      const prop = extractProp('<div foo={bar++} />');\n\n      // \"bar\"++ => NaN\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n\n      assert.equal(expected, actual);\n    });\n\n    it('should correctly evaluate an expression that suffixes with --', () => {\n      const prop = extractProp('<div foo={bar--} />');\n\n      // \"bar\"-- => NaN\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n\n      assert.equal(expected, actual);\n    });\n  });\n\n  describe('This expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={this} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n  });\n\n  describe('Conditional expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={bar ? baz : bam} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n  });\n\n  describe('Binary expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={1 == \"1\"} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n  });\n\n  describe('Object expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={ { bar: \"baz\" } } />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.deepEqual(expected, actual);\n    });\n  });\n\n  describe('New expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={new Bar()} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.deepEqual(expected, actual);\n    });\n  });\n\n  describe('Array expression', () => {\n    it('should evaluate to correct representation of the the array in props', () => {\n      const prop = extractProp('<div foo={[\"bar\", 42, null]} />');\n\n      const expected = ['bar', 42];\n      const actual = getLiteralPropValue(prop);\n\n      assert.deepEqual(expected, actual);\n    });\n  });\n\n  it('should return an empty array provided an empty array in props', () => {\n    const prop = extractProp('<div foo={[]} />');\n\n    const expected = [];\n    const actual = getLiteralPropValue(prop);\n\n    assert.deepEqual(expected, actual);\n  });\n\n  describe('Bind expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={::this.handleClick} />');\n\n      const expected = 'null';\n      const actual = getLiteralPropValue(prop);\n\n      assert.deepEqual(expected, actual);\n    });\n  });\n\n  describeIfNotBabylon('Typescript', () => {\n    beforeEach(() => {\n      changePlugins((pls) => [...pls, 'typescript']);\n    });\n\n    it('should return string representation of variable identifier wrapped in a Typescript non-null assertion', () => {\n      const prop = extractProp('<div foo={bar!} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should return string representation of variable identifier wrapped in a deep Typescript non-null assertion', () => {\n      const prop = extractProp('<div foo={(bar!)!} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n\n    it('should return string representation of variable identifier wrapped in a Typescript type coercion', () => {\n      changePlugins((pls) => [...pls, 'typescript']);\n      const prop = extractProp('<div foo={bar as any} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(expected, actual);\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"module"}