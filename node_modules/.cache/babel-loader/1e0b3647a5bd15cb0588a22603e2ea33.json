{"ast":null,"code":"'use strict';\n\nconst call = require('./call');\n\nmodule.exports = stat;\n/**\n * Retrieves the {@link fs.Stats} for the given path. If the path is a symbolic link,\n * then the Stats of the symlink's target are returned instead.  If the symlink is broken,\n * then the Stats of the symlink itself are returned.\n *\n * @param {object} fs - Synchronous or Asynchronouse facade for the \"fs\" module\n * @param {string} path - The path to return stats for\n * @param {function} callback\n */\n\nfunction stat(fs, path, callback) {\n  let isSymLink = false;\n  call.safe(fs.lstat, path, (err, lstats) => {\n    if (err) {\n      // fs.lstat threw an eror\n      return callback(err);\n    }\n\n    try {\n      isSymLink = lstats.isSymbolicLink();\n    } catch (err2) {\n      // lstats.isSymbolicLink() threw an error\n      // (probably because fs.lstat returned an invalid result)\n      return callback(err2);\n    }\n\n    if (isSymLink) {\n      // Try to resolve the symlink\n      symlinkStat(fs, path, lstats, callback);\n    } else {\n      // It's not a symlink, so return the stats as-is\n      callback(null, lstats);\n    }\n  });\n}\n/**\n * Retrieves the {@link fs.Stats} for the target of the given symlink.\n * If the symlink is broken, then the Stats of the symlink itself are returned.\n *\n * @param {object} fs - Synchronous or Asynchronouse facade for the \"fs\" module\n * @param {string} path - The path of the symlink to return stats for\n * @param {object} lstats - The stats of the symlink\n * @param {function} callback\n */\n\n\nfunction symlinkStat(fs, path, lstats, callback) {\n  call.safe(fs.stat, path, (err, stats) => {\n    if (err) {\n      // The symlink is broken, so return the stats for the link itself\n      return callback(null, lstats);\n    }\n\n    try {\n      // Return the stats for the resolved symlink target,\n      // and override the `isSymbolicLink` method to indicate that it's a symlink\n      stats.isSymbolicLink = () => true;\n    } catch (err2) {\n      // Setting stats.isSymbolicLink threw an error\n      // (probably because fs.stat returned an invalid result)\n      return callback(err2);\n    }\n\n    callback(null, stats);\n  });\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/@mrmlnc/readdir-enhanced/lib/stat.js"],"names":["call","require","module","exports","stat","fs","path","callback","isSymLink","safe","lstat","err","lstats","isSymbolicLink","err2","symlinkStat","stats"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AAEA;;;;;;;;;;AASA,SAASA,IAAT,CAAeC,EAAf,EAAmBC,IAAnB,EAAyBC,QAAzB,EAAmC;AACjC,MAAIC,SAAS,GAAG,KAAhB;AAEAR,EAAAA,IAAI,CAACS,IAAL,CAAUJ,EAAE,CAACK,KAAb,EAAoBJ,IAApB,EAA0B,CAACK,GAAD,EAAMC,MAAN,KAAiB;AACzC,QAAID,GAAJ,EAAS;AACP;AACA,aAAOJ,QAAQ,CAACI,GAAD,CAAf;AACD;;AAED,QAAI;AACFH,MAAAA,SAAS,GAAGI,MAAM,CAACC,cAAP,EAAZ;AACD,KAFD,CAGA,OAAOC,IAAP,EAAa;AACX;AACA;AACA,aAAOP,QAAQ,CAACO,IAAD,CAAf;AACD;;AAED,QAAIN,SAAJ,EAAe;AACb;AACAO,MAAAA,WAAW,CAACV,EAAD,EAAKC,IAAL,EAAWM,MAAX,EAAmBL,QAAnB,CAAX;AACD,KAHD,MAIK;AACH;AACAA,MAAAA,QAAQ,CAAC,IAAD,EAAOK,MAAP,CAAR;AACD;AACF,GAvBD;AAwBD;AAED;;;;;;;;;;;AASA,SAASG,WAAT,CAAsBV,EAAtB,EAA0BC,IAA1B,EAAgCM,MAAhC,EAAwCL,QAAxC,EAAkD;AAChDP,EAAAA,IAAI,CAACS,IAAL,CAAUJ,EAAE,CAACD,IAAb,EAAmBE,IAAnB,EAAyB,CAACK,GAAD,EAAMK,KAAN,KAAgB;AACvC,QAAIL,GAAJ,EAAS;AACP;AACA,aAAOJ,QAAQ,CAAC,IAAD,EAAOK,MAAP,CAAf;AACD;;AAED,QAAI;AACF;AACA;AACAI,MAAAA,KAAK,CAACH,cAAN,GAAuB,MAAM,IAA7B;AACD,KAJD,CAKA,OAAOC,IAAP,EAAa;AACX;AACA;AACA,aAAOP,QAAQ,CAACO,IAAD,CAAf;AACD;;AAEDP,IAAAA,QAAQ,CAAC,IAAD,EAAOS,KAAP,CAAR;AACD,GAlBD;AAmBD","sourcesContent":["'use strict';\n\nconst call = require('./call');\n\nmodule.exports = stat;\n\n/**\n * Retrieves the {@link fs.Stats} for the given path. If the path is a symbolic link,\n * then the Stats of the symlink's target are returned instead.  If the symlink is broken,\n * then the Stats of the symlink itself are returned.\n *\n * @param {object} fs - Synchronous or Asynchronouse facade for the \"fs\" module\n * @param {string} path - The path to return stats for\n * @param {function} callback\n */\nfunction stat (fs, path, callback) {\n  let isSymLink = false;\n\n  call.safe(fs.lstat, path, (err, lstats) => {\n    if (err) {\n      // fs.lstat threw an eror\n      return callback(err);\n    }\n\n    try {\n      isSymLink = lstats.isSymbolicLink();\n    }\n    catch (err2) {\n      // lstats.isSymbolicLink() threw an error\n      // (probably because fs.lstat returned an invalid result)\n      return callback(err2);\n    }\n\n    if (isSymLink) {\n      // Try to resolve the symlink\n      symlinkStat(fs, path, lstats, callback);\n    }\n    else {\n      // It's not a symlink, so return the stats as-is\n      callback(null, lstats);\n    }\n  });\n}\n\n/**\n * Retrieves the {@link fs.Stats} for the target of the given symlink.\n * If the symlink is broken, then the Stats of the symlink itself are returned.\n *\n * @param {object} fs - Synchronous or Asynchronouse facade for the \"fs\" module\n * @param {string} path - The path of the symlink to return stats for\n * @param {object} lstats - The stats of the symlink\n * @param {function} callback\n */\nfunction symlinkStat (fs, path, lstats, callback) {\n  call.safe(fs.stat, path, (err, stats) => {\n    if (err) {\n      // The symlink is broken, so return the stats for the link itself\n      return callback(null, lstats);\n    }\n\n    try {\n      // Return the stats for the resolved symlink target,\n      // and override the `isSymbolicLink` method to indicate that it's a symlink\n      stats.isSymbolicLink = () => true;\n    }\n    catch (err2) {\n      // Setting stats.isSymbolicLink threw an error\n      // (probably because fs.stat returned an invalid result)\n      return callback(err2);\n    }\n\n    callback(null, stats);\n  });\n}\n"]},"metadata":{},"sourceType":"script"}