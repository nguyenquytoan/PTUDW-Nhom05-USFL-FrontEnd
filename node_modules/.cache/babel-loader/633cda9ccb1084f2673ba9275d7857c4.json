{"ast":null,"code":"import fs from 'fs';\nimport postcss from 'postcss';\nimport test from 'ava';\nimport { diffLines } from 'diff';\nimport chalk from 'chalk';\nimport plugin from '../';\n\nfunction getDiff(left, right) {\n  let msg = ['\\n'];\n  diffLines(left, right).forEach(item => {\n    if (item.added || item.removed) {\n      let text = item.value.replace('\\n', '\\u00b6\\n').replace('\\ufeff', '[[BOM]]');\n      msg.push(chalk[item.added ? 'green' : 'red'](text));\n    } else {\n      let value = item.value.replace('\\ufeff', '[[BOM]]');\n      let lines = value.split('\\n'); // max line count for each item\n\n      let keepLines = 6; // lines to be omitted\n\n      let omitLines = lines.length - keepLines;\n\n      if (lines.length > keepLines) {\n        lines.splice(Math.floor(keepLines / 2), omitLines, chalk.gray('(...' + omitLines + ' lines omitted...)'));\n      }\n\n      msg.concat(lines);\n    }\n  });\n  msg.push('\\n');\n  return msg.map(line => '  ' + line).join('');\n}\n\nfunction read(file) {\n  return fs.readFileSync(__dirname + `/fixtures/${file}.css`, {\n    encoding: 'utf-8'\n  });\n}\n\nfunction exec(t, input) {\n  let output = read(`${input}.post`);\n  return postcss([plugin()]).process(read(input)).then(result => {\n    if (result.css !== output) {\n      t.fail(getDiff(result.css, output));\n    }\n\n    t.deepEqual(result.warnings().length, 0);\n  });\n}\n\ntest('Overridden @keyframes should be discarded correctly.', exec, 'keyframes');\ntest('Overridden @counter-style should be discarded correctly.', exec, 'counter-style');","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-discard-overridden/src/__tests__/index.js"],"names":["fs","postcss","test","diffLines","chalk","plugin","getDiff","left","right","msg","forEach","item","added","removed","text","value","replace","push","lines","split","keepLines","omitLines","length","splice","Math","floor","gray","concat","map","line","join","read","file","readFileSync","__dirname","encoding","exec","t","input","output","process","then","result","css","fail","deepEqual","warnings"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,IAAP,MAAiB,KAAjB;AACA,SAAQC,SAAR,QAAwB,MAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,KAAnB;;AAEA,SAASC,OAAT,CAAkBC,IAAlB,EAAwBC,KAAxB,EAA+B;AAC3B,MAAIC,GAAG,GAAG,CAAC,IAAD,CAAV;AACAN,EAAAA,SAAS,CAACI,IAAD,EAAOC,KAAP,CAAT,CAAuBE,OAAvB,CAA+BC,IAAI,IAAI;AACnC,QAAIA,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACE,OAAvB,EAAgC;AAC5B,UAAIC,IAAI,GAAGH,IAAI,CAACI,KAAL,CACNC,OADM,CACE,IADF,EACQ,UADR,EAENA,OAFM,CAEE,QAFF,EAEY,SAFZ,CAAX;AAGAP,MAAAA,GAAG,CAACQ,IAAJ,CAASb,KAAK,CAACO,IAAI,CAACC,KAAL,GAAa,OAAb,GAAuB,KAAxB,CAAL,CAAoCE,IAApC,CAAT;AACH,KALD,MAKO;AACH,UAAIC,KAAK,GAAGJ,IAAI,CAACI,KAAL,CAAWC,OAAX,CAAmB,QAAnB,EAA6B,SAA7B,CAAZ;AACA,UAAIE,KAAK,GAAGH,KAAK,CAACI,KAAN,CAAY,IAAZ,CAAZ,CAFG,CAIH;;AACA,UAAIC,SAAS,GAAG,CAAhB,CALG,CAMH;;AACA,UAAIC,SAAS,GAAGH,KAAK,CAACI,MAAN,GAAeF,SAA/B;;AACA,UAAIF,KAAK,CAACI,MAAN,GAAeF,SAAnB,EAA8B;AAC1BF,QAAAA,KAAK,CAACK,MAAN,CACIC,IAAI,CAACC,KAAL,CAAWL,SAAS,GAAG,CAAvB,CADJ,EAEIC,SAFJ,EAGIjB,KAAK,CAACsB,IAAN,CAAW,SAASL,SAAT,GAAqB,oBAAhC,CAHJ;AAKH;;AACDZ,MAAAA,GAAG,CAACkB,MAAJ,CAAWT,KAAX;AACH;AACJ,GAvBD;AAwBAT,EAAAA,GAAG,CAACQ,IAAJ,CAAS,IAAT;AACA,SAAOR,GAAG,CAACmB,GAAJ,CAAQC,IAAI,IAAI,OAAOA,IAAvB,EAA6BC,IAA7B,CAAkC,EAAlC,CAAP;AACH;;AAED,SAASC,IAAT,CAAeC,IAAf,EAAqB;AACjB,SAAOhC,EAAE,CAACiC,YAAH,CAAgBC,SAAS,GAAI,aAAYF,IAAK,MAA9C,EAAqD;AAACG,IAAAA,QAAQ,EAAE;AAAX,GAArD,CAAP;AACH;;AAED,SAASC,IAAT,CAAeC,CAAf,EAAkBC,KAAlB,EAAyB;AACrB,MAAIC,MAAM,GAAGR,IAAI,CAAE,GAAEO,KAAM,OAAV,CAAjB;AACA,SAAOrC,OAAO,CAAC,CAAEI,MAAM,EAAR,CAAD,CAAP,CAAsBmC,OAAtB,CAA8BT,IAAI,CAACO,KAAD,CAAlC,EACFG,IADE,CACIC,MAAM,IAAI;AACb,QAAIA,MAAM,CAACC,GAAP,KAAeJ,MAAnB,EAA2B;AACvBF,MAAAA,CAAC,CAACO,IAAF,CAAOtC,OAAO,CAACoC,MAAM,CAACC,GAAR,EAAaJ,MAAb,CAAd;AACH;;AACDF,IAAAA,CAAC,CAACQ,SAAF,CAAYH,MAAM,CAACI,QAAP,GAAkBxB,MAA9B,EAAsC,CAAtC;AACH,GANE,CAAP;AAOH;;AAEDpB,IAAI,CACA,sDADA,EAEAkC,IAFA,EAGA,WAHA,CAAJ;AAMAlC,IAAI,CACA,0DADA,EAEAkC,IAFA,EAGA,eAHA,CAAJ","sourcesContent":["import fs from 'fs';\nimport postcss from 'postcss';\nimport test from 'ava';\nimport {diffLines} from 'diff';\nimport chalk from 'chalk';\nimport plugin from '../';\n\nfunction getDiff (left, right) {\n    let msg = ['\\n'];\n    diffLines(left, right).forEach(item => {\n        if (item.added || item.removed) {\n            let text = item.value\n                .replace('\\n', '\\u00b6\\n')\n                .replace('\\ufeff', '[[BOM]]');\n            msg.push(chalk[item.added ? 'green' : 'red'](text));\n        } else {\n            let value = item.value.replace('\\ufeff', '[[BOM]]');\n            let lines = value.split('\\n');\n\n            // max line count for each item\n            let keepLines = 6;\n            // lines to be omitted\n            let omitLines = lines.length - keepLines;\n            if (lines.length > keepLines) {\n                lines.splice(\n                    Math.floor(keepLines / 2),\n                    omitLines,\n                    chalk.gray('(...' + omitLines + ' lines omitted...)')\n                );\n            }\n            msg.concat(lines);\n        }\n    });\n    msg.push('\\n');\n    return msg.map(line => '  ' + line).join('');\n}\n\nfunction read (file) {\n    return fs.readFileSync(__dirname + `/fixtures/${file}.css`, {encoding: 'utf-8'});\n}\n\nfunction exec (t, input) {\n    let output = read(`${input}.post`);\n    return postcss([ plugin() ]).process(read(input))\n        .then( result => {\n            if (result.css !== output) {\n                t.fail(getDiff(result.css, output));\n            }\n            t.deepEqual(result.warnings().length, 0);\n        });\n}\n\ntest(\n    'Overridden @keyframes should be discarded correctly.',\n    exec,\n    'keyframes'\n);\n\ntest(\n    'Overridden @counter-style should be discarded correctly.',\n    exec,\n    'counter-style'\n);\n"]},"metadata":{},"sourceType":"module"}