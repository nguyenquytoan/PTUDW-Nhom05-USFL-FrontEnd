{"ast":null,"code":"/**\n * @fileoverview Counts the cyclomatic complexity of each function of the script. See http://en.wikipedia.org/wiki/Cyclomatic_complexity.\n * Counts the number of if, conditional, for, whilte, try, switch/case,\n * @author Patrick Brosset\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst lodash = require(\"lodash\");\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce a maximum cyclomatic complexity allowed in a program\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/complexity\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 0\n      }, {\n        type: \"object\",\n        properties: {\n          maximum: {\n            type: \"integer\",\n            minimum: 0\n          },\n          max: {\n            type: \"integer\",\n            minimum: 0\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      complex: \"{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}.\"\n    }\n  },\n\n  create(context) {\n    const option = context.options[0];\n    let THRESHOLD = 20;\n\n    if (typeof option === \"object\" && (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))) {\n      THRESHOLD = option.maximum || option.max;\n    } else if (typeof option === \"number\") {\n      THRESHOLD = option;\n    } //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n    // Using a stack to store complexity (handling nested functions)\n\n\n    const fns = [];\n    /**\n     * When parsing a new function, store it in our function stack\n     * @returns {void}\n     * @private\n     */\n\n    function startFunction() {\n      fns.push(1);\n    }\n    /**\n     * Evaluate the node at the end of function\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function endFunction(node) {\n      const name = lodash.upperFirst(astUtils.getFunctionNameWithKind(node));\n      const complexity = fns.pop();\n\n      if (complexity > THRESHOLD) {\n        context.report({\n          node,\n          messageId: \"complex\",\n          data: {\n            name,\n            complexity,\n            max: THRESHOLD\n          }\n        });\n      }\n    }\n    /**\n     * Increase the complexity of the function in context\n     * @returns {void}\n     * @private\n     */\n\n\n    function increaseComplexity() {\n      if (fns.length) {\n        fns[fns.length - 1]++;\n      }\n    }\n    /**\n     * Increase the switch complexity in context\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function increaseSwitchComplexity(node) {\n      // Avoiding `default`\n      if (node.test) {\n        increaseComplexity();\n      }\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      FunctionDeclaration: startFunction,\n      FunctionExpression: startFunction,\n      ArrowFunctionExpression: startFunction,\n      \"FunctionDeclaration:exit\": endFunction,\n      \"FunctionExpression:exit\": endFunction,\n      \"ArrowFunctionExpression:exit\": endFunction,\n      CatchClause: increaseComplexity,\n      ConditionalExpression: increaseComplexity,\n      LogicalExpression: increaseComplexity,\n      ForStatement: increaseComplexity,\n      ForInStatement: increaseComplexity,\n      ForOfStatement: increaseComplexity,\n      IfStatement: increaseComplexity,\n      SwitchCase: increaseSwitchComplexity,\n      WhileStatement: increaseComplexity,\n      DoWhileStatement: increaseComplexity\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/complexity.js"],"names":["lodash","require","astUtils","module","exports","meta","type","docs","description","category","recommended","url","schema","oneOf","minimum","properties","maximum","max","additionalProperties","messages","complex","create","context","option","options","THRESHOLD","Object","prototype","hasOwnProperty","call","fns","startFunction","push","endFunction","node","name","upperFirst","getFunctionNameWithKind","complexity","pop","report","messageId","data","increaseComplexity","length","increaseSwitchComplexity","test","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","CatchClause","ConditionalExpression","LogicalExpression","ForStatement","ForInStatement","ForOfStatement","IfStatement","SwitchCase","WhileStatement","DoWhileStatement"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Counts the cyclomatic complexity of each function of the script. See http://en.wikipedia.org/wiki/Cyclomatic_complexity.\n * Counts the number of if, conditional, for, whilte, try, switch/case,\n * @author Patrick Brosset\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst lodash = require(\"lodash\");\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce a maximum cyclomatic complexity allowed in a program\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/complexity\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n\n        messages: {\n            complex: \"{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}.\"\n        }\n    },\n\n    create(context) {\n        const option = context.options[0];\n        let THRESHOLD = 20;\n\n        if (\n            typeof option === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))\n        ) {\n            THRESHOLD = option.maximum || option.max;\n        } else if (typeof option === \"number\") {\n            THRESHOLD = option;\n        }\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        // Using a stack to store complexity (handling nested functions)\n        const fns = [];\n\n        /**\n         * When parsing a new function, store it in our function stack\n         * @returns {void}\n         * @private\n         */\n        function startFunction() {\n            fns.push(1);\n        }\n\n        /**\n         * Evaluate the node at the end of function\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function endFunction(node) {\n            const name = lodash.upperFirst(astUtils.getFunctionNameWithKind(node));\n            const complexity = fns.pop();\n\n            if (complexity > THRESHOLD) {\n                context.report({\n                    node,\n                    messageId: \"complex\",\n                    data: { name, complexity, max: THRESHOLD }\n                });\n            }\n        }\n\n        /**\n         * Increase the complexity of the function in context\n         * @returns {void}\n         * @private\n         */\n        function increaseComplexity() {\n            if (fns.length) {\n                fns[fns.length - 1]++;\n            }\n        }\n\n        /**\n         * Increase the switch complexity in context\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function increaseSwitchComplexity(node) {\n\n            // Avoiding `default`\n            if (node.test) {\n                increaseComplexity();\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: startFunction,\n            FunctionExpression: startFunction,\n            ArrowFunctionExpression: startFunction,\n            \"FunctionDeclaration:exit\": endFunction,\n            \"FunctionExpression:exit\": endFunction,\n            \"ArrowFunctionExpression:exit\": endFunction,\n\n            CatchClause: increaseComplexity,\n            ConditionalExpression: increaseComplexity,\n            LogicalExpression: increaseComplexity,\n            ForStatement: increaseComplexity,\n            ForInStatement: increaseComplexity,\n            ForOfStatement: increaseComplexity,\n            IfStatement: increaseComplexity,\n            SwitchCase: increaseSwitchComplexity,\n            WhileStatement: increaseComplexity,\n            DoWhileStatement: increaseComplexity\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}