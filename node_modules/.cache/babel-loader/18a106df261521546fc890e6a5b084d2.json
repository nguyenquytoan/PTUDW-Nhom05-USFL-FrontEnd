{"ast":null,"code":"'use strict';\n\nconst {\n  promisify\n} = require('util');\n\nconst path = require('path');\n\nconst childProcess = require('child_process');\n\nconst fs = require('fs');\n\nconst url = require('url');\n\nconst isWsl = require('is-wsl');\n\nconst isDocker = require('is-docker');\n\nconst pAccess = promisify(fs.access);\nconst pExecFile = promisify(childProcess.execFile); // Path to included `xdg-open`.\n\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open'); // Convert a path from WSL format to Windows format:\n// `/mnt/c/Program Files/Example/MyApp.exe` → `C:\\Program Files\\Example\\MyApp.exe`\n\nconst wslToWindowsPath = async path => {\n  const {\n    stdout\n  } = await pExecFile('wslpath', ['-w', path]);\n  return stdout.trim();\n};\n\nmodule.exports = async (target, options) => {\n  if (typeof target !== 'string') {\n    throw new TypeError('Expected a `target`');\n  }\n\n  options = {\n    wait: false,\n    background: false,\n    url: false,\n    ...options\n  };\n  let command;\n  let appArguments = [];\n  const cliArguments = [];\n  const childProcessOptions = {};\n\n  if (Array.isArray(options.app)) {\n    appArguments = options.app.slice(1);\n    options.app = options.app[0];\n  } // Encodes the target as if it were an URL. Especially useful to get\n  // double-quotes through the “double-quotes on Windows caveat”, but it\n  // can be used on any platform.\n\n\n  if (options.url) {\n    target = new url.URL(target).href;\n\n    if (isWsl) {\n      target = target.replace(/&/g, '^&');\n    }\n  }\n\n  if (process.platform === 'darwin') {\n    command = 'open';\n\n    if (options.wait) {\n      cliArguments.push('--wait-apps');\n    }\n\n    if (options.background) {\n      cliArguments.push('--background');\n    }\n\n    if (options.app) {\n      cliArguments.push('-a', options.app);\n    }\n  } else if (process.platform === 'win32' || isWsl && !isDocker()) {\n    command = 'cmd' + (isWsl ? '.exe' : '');\n    cliArguments.push('/s', '/c', 'start', '\"\"', '/b');\n\n    if (!isWsl) {\n      // Always quoting target allows for URLs/paths to have spaces and unmarked characters, as `cmd.exe` will\n      // interpret them as plain text to be forwarded as one unique argument. Enabling `windowsVerbatimArguments`\n      // disables Node.js's default quotes and escapes handling (https://git.io/fjdem).\n      // References:\n      // - Issues #17, #44, #55, #77, #101, #115\n      // - Pull requests: #74, #98\n      //\n      // As a result, all double-quotes are stripped from the `target` and do not get to your desired destination.\n      target = `\"${target}\"`;\n      childProcessOptions.windowsVerbatimArguments = true;\n\n      if (options.app) {\n        options.app = `\"${options.app}\"`;\n      }\n    }\n\n    if (options.wait) {\n      cliArguments.push('/wait');\n    }\n\n    if (options.app) {\n      if (isWsl && options.app.startsWith('/mnt/')) {\n        const windowsPath = await wslToWindowsPath(options.app);\n        options.app = windowsPath;\n      }\n\n      cliArguments.push(options.app);\n    }\n\n    if (appArguments.length > 0) {\n      cliArguments.push(...appArguments);\n    }\n  } else {\n    if (options.app) {\n      command = options.app;\n    } else {\n      // When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n      const isBundled = !__dirname || __dirname === '/'; // Check if local `xdg-open` exists and is executable.\n\n      let exeLocalXdgOpen = false;\n\n      try {\n        await pAccess(localXdgOpenPath, fs.constants.X_OK);\n        exeLocalXdgOpen = true;\n      } catch (_) {}\n\n      const useSystemXdgOpen = process.versions.electron || process.platform === 'android' || isBundled || !exeLocalXdgOpen;\n      command = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n    }\n\n    if (appArguments.length > 0) {\n      cliArguments.push(...appArguments);\n    }\n\n    if (!options.wait) {\n      // `xdg-open` will block the process unless stdio is ignored\n      // and it's detached from the parent even if it's unref'd.\n      childProcessOptions.stdio = 'ignore';\n      childProcessOptions.detached = true;\n    }\n  }\n\n  cliArguments.push(target);\n\n  if (process.platform === 'darwin' && appArguments.length > 0) {\n    cliArguments.push('--args', ...appArguments);\n  }\n\n  const subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n  if (options.wait) {\n    return new Promise((resolve, reject) => {\n      subprocess.once('error', reject);\n      subprocess.once('close', exitCode => {\n        if (exitCode > 0) {\n          reject(new Error(`Exited with code ${exitCode}`));\n          return;\n        }\n\n        resolve(subprocess);\n      });\n    });\n  }\n\n  subprocess.unref();\n  return subprocess;\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/open/index.js"],"names":["promisify","require","path","childProcess","fs","url","isWsl","isDocker","pAccess","access","pExecFile","execFile","localXdgOpenPath","join","__dirname","wslToWindowsPath","stdout","trim","module","exports","target","options","TypeError","wait","background","command","appArguments","cliArguments","childProcessOptions","Array","isArray","app","slice","URL","href","replace","process","platform","push","windowsVerbatimArguments","startsWith","windowsPath","length","isBundled","exeLocalXdgOpen","constants","X_OK","_","useSystemXdgOpen","versions","electron","stdio","detached","subprocess","spawn","Promise","resolve","reject","once","exitCode","Error","unref"],"mappings":"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","sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst path = require('path');\nconst childProcess = require('child_process');\nconst fs = require('fs');\nconst url = require('url');\nconst isWsl = require('is-wsl');\nconst isDocker = require('is-docker');\n\nconst pAccess = promisify(fs.access);\nconst pExecFile = promisify(childProcess.execFile);\n\n// Path to included `xdg-open`.\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\n// Convert a path from WSL format to Windows format:\n// `/mnt/c/Program Files/Example/MyApp.exe` → `C:\\Program Files\\Example\\MyApp.exe`\nconst wslToWindowsPath = async path => {\n\tconst {stdout} = await pExecFile('wslpath', ['-w', path]);\n\treturn stdout.trim();\n};\n\nmodule.exports = async (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\toptions = {\n\t\twait: false,\n\t\tbackground: false,\n\t\turl: false,\n\t\t...options\n\t};\n\n\tlet command;\n\tlet appArguments = [];\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (Array.isArray(options.app)) {\n\t\tappArguments = options.app.slice(1);\n\t\toptions.app = options.app[0];\n\t}\n\n\t// Encodes the target as if it were an URL. Especially useful to get\n\t// double-quotes through the “double-quotes on Windows caveat”, but it\n\t// can be used on any platform.\n\tif (options.url) {\n\t\ttarget = new url.URL(target).href;\n\n\t\tif (isWsl) {\n\t\t\ttarget = target.replace(/&/g, '^&');\n\t\t}\n\t}\n\n\tif (process.platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('--wait-apps');\n\t\t}\n\n\t\tif (options.background) {\n\t\t\tcliArguments.push('--background');\n\t\t}\n\n\t\tif (options.app) {\n\t\t\tcliArguments.push('-a', options.app);\n\t\t}\n\t} else if (process.platform === 'win32' || (isWsl && !isDocker())) {\n\t\tcommand = 'cmd' + (isWsl ? '.exe' : '');\n\t\tcliArguments.push('/s', '/c', 'start', '\"\"', '/b');\n\n\t\tif (!isWsl) {\n\t\t\t// Always quoting target allows for URLs/paths to have spaces and unmarked characters, as `cmd.exe` will\n\t\t\t// interpret them as plain text to be forwarded as one unique argument. Enabling `windowsVerbatimArguments`\n\t\t\t// disables Node.js's default quotes and escapes handling (https://git.io/fjdem).\n\t\t\t// References:\n\t\t\t// - Issues #17, #44, #55, #77, #101, #115\n\t\t\t// - Pull requests: #74, #98\n\t\t\t//\n\t\t\t// As a result, all double-quotes are stripped from the `target` and do not get to your desired destination.\n\t\t\ttarget = `\"${target}\"`;\n\t\t\tchildProcessOptions.windowsVerbatimArguments = true;\n\n\t\t\tif (options.app) {\n\t\t\t\toptions.app = `\"${options.app}\"`;\n\t\t\t}\n\t\t}\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('/wait');\n\t\t}\n\n\t\tif (options.app) {\n\t\t\tif (isWsl && options.app.startsWith('/mnt/')) {\n\t\t\t\tconst windowsPath = await wslToWindowsPath(options.app);\n\t\t\t\toptions.app = windowsPath;\n\t\t\t}\n\n\t\t\tcliArguments.push(options.app);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\t} else {\n\t\tif (options.app) {\n\t\t\tcommand = options.app;\n\t\t} else {\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n\t\t\tconst isBundled = !__dirname || __dirname === '/';\n\n\t\t\t// Check if local `xdg-open` exists and is executable.\n\t\t\tlet exeLocalXdgOpen = false;\n\t\t\ttry {\n\t\t\t\tawait pAccess(localXdgOpenPath, fs.constants.X_OK);\n\t\t\t\texeLocalXdgOpen = true;\n\t\t\t} catch (_) {}\n\n\t\t\tconst useSystemXdgOpen = process.versions.electron ||\n\t\t\t\tprocess.platform === 'android' || isBundled || !exeLocalXdgOpen;\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tcliArguments.push(target);\n\n\tif (process.platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n"]},"metadata":{},"sourceType":"script"}