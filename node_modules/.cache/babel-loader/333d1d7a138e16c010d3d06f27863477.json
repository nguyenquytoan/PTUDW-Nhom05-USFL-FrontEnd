{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst checkForDeprecatedOptions = require('../lib/check-for-deprecated-options');\n\nconst generateSWStringSchema = require('./options/generate-sw-string-schema');\n\nconst getFileManifestEntries = require('../lib/get-file-manifest-entries');\n\nconst populateSWTemplate = require('../lib/populate-sw-template');\n\nconst validate = require('./options/validate');\n/**\n * This method generates a service worker based on the configuration options\n * provided.\n *\n * @param {Object} config Please refer to the\n * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-build#generateswstring_mode).\n * @return {Promise<{swString: string, warnings: Array<string>}>} A promise that\n * resolves once the service worker template is populated. The `swString`\n * property contains a string representation of the full service worker code.\n * Any non-fatal warning messages will be returned via `warnings`.\n *\n * @memberof module:workbox-build\n */\n\n\nasync function generateSWString(config) {\n  // This check needs to be done before validation, since the deprecated options\n  // will be renamed.\n  const deprecationWarnings = checkForDeprecatedOptions(config);\n  const options = validate(config, generateSWStringSchema);\n  const {\n    manifestEntries,\n    warnings\n  } = await getFileManifestEntries(options);\n  const swString = await populateSWTemplate(Object.assign({\n    manifestEntries\n  }, options)); // Add in any deprecation warnings.\n\n  warnings.push(...deprecationWarnings);\n  return {\n    swString,\n    warnings\n  };\n}\n\nmodule.exports = generateSWString;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-build/src/entry-points/generate-sw-string.js"],"names":["checkForDeprecatedOptions","require","generateSWStringSchema","getFileManifestEntries","populateSWTemplate","validate","generateSWString","config","deprecationWarnings","options","manifestEntries","warnings","swString","Object","assign","push","module","exports"],"mappings":"AAAA;;;;;;;AAQA,MAAMA,yBAAyB,GAC3BC,OAAO,CAAC,qCAAD,CADX;;AAEA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,qCAAD,CAAtC;;AACA,MAAME,sBAAsB,GAAGF,OAAO,CAAC,kCAAD,CAAtC;;AACA,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,6BAAD,CAAlC;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,oBAAD,CAAxB;AAEA;;;;;;;;;;;;;;;AAaA,eAAeK,gBAAf,CAAgCC,MAAhC,EAAwC;AACtC;AACA;AACA,QAAMC,mBAAmB,GAAGR,yBAAyB,CAACO,MAAD,CAArD;AAEA,QAAME,OAAO,GAAGJ,QAAQ,CAACE,MAAD,EAASL,sBAAT,CAAxB;AAEA,QAAM;AAACQ,IAAAA,eAAD;AAAkBC,IAAAA;AAAlB,MAA8B,MAAMR,sBAAsB,CAACM,OAAD,CAAhE;AAEA,QAAMG,QAAQ,GAAG,MAAMR,kBAAkB,CAACS,MAAM,CAACC,MAAP,CAAc;AACtDJ,IAAAA;AADsD,GAAd,EAEvCD,OAFuC,CAAD,CAAzC,CATsC,CAatC;;AACAE,EAAAA,QAAQ,CAACI,IAAT,CAAc,GAAGP,mBAAjB;AAEA,SAAO;AAACI,IAAAA,QAAD;AAAWD,IAAAA;AAAX,GAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBX,gBAAjB","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst checkForDeprecatedOptions =\n    require('../lib/check-for-deprecated-options');\nconst generateSWStringSchema = require('./options/generate-sw-string-schema');\nconst getFileManifestEntries = require('../lib/get-file-manifest-entries');\nconst populateSWTemplate = require('../lib/populate-sw-template');\nconst validate = require('./options/validate');\n\n/**\n * This method generates a service worker based on the configuration options\n * provided.\n *\n * @param {Object} config Please refer to the\n * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-build#generateswstring_mode).\n * @return {Promise<{swString: string, warnings: Array<string>}>} A promise that\n * resolves once the service worker template is populated. The `swString`\n * property contains a string representation of the full service worker code.\n * Any non-fatal warning messages will be returned via `warnings`.\n *\n * @memberof module:workbox-build\n */\nasync function generateSWString(config) {\n  // This check needs to be done before validation, since the deprecated options\n  // will be renamed.\n  const deprecationWarnings = checkForDeprecatedOptions(config);\n\n  const options = validate(config, generateSWStringSchema);\n\n  const {manifestEntries, warnings} = await getFileManifestEntries(options);\n\n  const swString = await populateSWTemplate(Object.assign({\n    manifestEntries,\n  }, options));\n\n  // Add in any deprecation warnings.\n  warnings.push(...deprecationWarnings);\n\n  return {swString, warnings};\n}\n\nmodule.exports = generateSWString;\n"]},"metadata":{},"sourceType":"script"}