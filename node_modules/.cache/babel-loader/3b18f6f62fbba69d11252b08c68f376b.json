{"ast":null,"code":"const UUID = /^[0-9A-Fa-f]{8}(?:\\-[0-9A-Fa-f]{4}){3}\\-[0-9A-Fa-f]{12}$/;\nconst UUID_PARSE = /^[0-9A-Fa-f\\-]{36}/; //RFC 4122\n\nconst handler = {\n  scheme: \"urn:uuid\",\n  parse: function (urnComponents, options) {\n    const uuidComponents = urnComponents;\n    uuidComponents.uuid = uuidComponents.nss;\n    uuidComponents.nss = undefined;\n\n    if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {\n      uuidComponents.error = uuidComponents.error || \"UUID is not valid.\";\n    }\n\n    return uuidComponents;\n  },\n  serialize: function (uuidComponents, options) {\n    const urnComponents = uuidComponents; //normalize UUID\n\n    urnComponents.nss = (uuidComponents.uuid || \"\").toLowerCase();\n    return urnComponents;\n  }\n};\nexport default handler;","map":{"version":3,"sources":["../../../src/schemes/urn-uuid.ts"],"names":[],"mappings":"AAQA,MAAM,IAAI,GAAG,0DAAb;AACA,MAAM,UAAU,GAAG,oBAAnB,C,CAEA;;AACA,MAAM,OAAO,GAA+D;AAC3E,EAAA,MAAM,EAAG,UADkE;AAG3E,EAAA,KAAK,EAAG,UAAU,aAAV,EAAuC,OAAvC,EAAyD;AAChE,UAAM,cAAc,GAAG,aAAvB;AACA,IAAA,cAAc,CAAC,IAAf,GAAsB,cAAc,CAAC,GAArC;AACA,IAAA,cAAc,CAAC,GAAf,GAAqB,SAArB;;AAEA,QAAI,CAAC,OAAO,CAAC,QAAT,KAAsB,CAAC,cAAc,CAAC,IAAhB,IAAwB,CAAC,cAAc,CAAC,IAAf,CAAoB,KAApB,CAA0B,IAA1B,CAA/C,CAAJ,EAAqF;AACpF,MAAA,cAAc,CAAC,KAAf,GAAuB,cAAc,CAAC,KAAf,IAAwB,oBAA/C;AACA;;AAED,WAAO,cAAP;AACA,GAb0E;AAe3E,EAAA,SAAS,EAAG,UAAU,cAAV,EAAyC,OAAzC,EAA2D;AACtE,UAAM,aAAa,GAAG,cAAtB,CADsE,CAEtE;;AACA,IAAA,aAAa,CAAC,GAAd,GAAoB,CAAC,cAAc,CAAC,IAAf,IAAuB,EAAxB,EAA4B,WAA5B,EAApB;AACA,WAAO,aAAP;AACA;AApB0E,CAA5E;AAuBA,eAAe,OAAf","sourceRoot":"","sourcesContent":["const UUID = /^[0-9A-Fa-f]{8}(?:\\-[0-9A-Fa-f]{4}){3}\\-[0-9A-Fa-f]{12}$/;\r\nconst UUID_PARSE = /^[0-9A-Fa-f\\-]{36}/;\r\n//RFC 4122\r\nconst handler = {\r\n    scheme: \"urn:uuid\",\r\n    parse: function (urnComponents, options) {\r\n        const uuidComponents = urnComponents;\r\n        uuidComponents.uuid = uuidComponents.nss;\r\n        uuidComponents.nss = undefined;\r\n        if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {\r\n            uuidComponents.error = uuidComponents.error || \"UUID is not valid.\";\r\n        }\r\n        return uuidComponents;\r\n    },\r\n    serialize: function (uuidComponents, options) {\r\n        const urnComponents = uuidComponents;\r\n        //normalize UUID\r\n        urnComponents.nss = (uuidComponents.uuid || \"\").toLowerCase();\r\n        return urnComponents;\r\n    },\r\n};\r\nexport default handler;\r\n//# sourceMappingURL=urn-uuid.js.map"]},"metadata":{},"sourceType":"module"}