{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromUnaryExpression;\n/**\n * Extractor function for a UnaryExpression type value node.\n * A unary expression is an expression with a unary operator.\n * For example, !\"foobar\" will evaluate to false, so this will return false.\n *\n * @param - value - AST Value object with type `UnaryExpression`\n * @returns - The extracted value converted to correct type.\n */\n\nfunction extractValueFromUnaryExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('./index.js').default;\n\n  var operator = value.operator,\n      argument = value.argument;\n\n  switch (operator) {\n    case '-':\n      return -getValue(argument);\n\n    case '+':\n      return +getValue(argument);\n    // eslint-disable-line no-implicit-coercion\n\n    case '!':\n      return !getValue(argument);\n\n    case '~':\n      return ~getValue(argument);\n    // eslint-disable-line no-bitwise\n\n    case 'delete':\n      // I believe delete statements evaluate to true.\n      return true;\n\n    case 'typeof':\n    case 'void':\n    default:\n      return undefined;\n  }\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/lib/values/expressions/UnaryExpression.js"],"names":["Object","defineProperty","exports","value","default","extractValueFromUnaryExpression","getValue","require","operator","argument","undefined"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,+BAAlB;AACA;;;;;;;;;AAQA,SAASA,+BAAT,CAAyCF,KAAzC,EAAgD;AAC9C;AACA,MAAIG,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBH,OAArC;;AACA,MAAII,QAAQ,GAAGL,KAAK,CAACK,QAArB;AAAA,MACIC,QAAQ,GAAGN,KAAK,CAACM,QADrB;;AAIA,UAAQD,QAAR;AACE,SAAK,GAAL;AACE,aAAO,CAACF,QAAQ,CAACG,QAAD,CAAhB;;AACF,SAAK,GAAL;AACE,aAAO,CAACH,QAAQ,CAACG,QAAD,CAAhB;AAA4B;;AAC9B,SAAK,GAAL;AACE,aAAO,CAACH,QAAQ,CAACG,QAAD,CAAhB;;AACF,SAAK,GAAL;AACE,aAAO,CAACH,QAAQ,CAACG,QAAD,CAAhB;AAA4B;;AAC9B,SAAK,QAAL;AACE;AACA,aAAO,IAAP;;AACF,SAAK,QAAL;AACA,SAAK,MAAL;AACA;AACE,aAAOC,SAAP;AAfJ;AAiBD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromUnaryExpression;\n/**\n * Extractor function for a UnaryExpression type value node.\n * A unary expression is an expression with a unary operator.\n * For example, !\"foobar\" will evaluate to false, so this will return false.\n *\n * @param - value - AST Value object with type `UnaryExpression`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromUnaryExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('./index.js').default;\n  var operator = value.operator,\n      argument = value.argument;\n\n\n  switch (operator) {\n    case '-':\n      return -getValue(argument);\n    case '+':\n      return +getValue(argument); // eslint-disable-line no-implicit-coercion\n    case '!':\n      return !getValue(argument);\n    case '~':\n      return ~getValue(argument); // eslint-disable-line no-bitwise\n    case 'delete':\n      // I believe delete statements evaluate to true.\n      return true;\n    case 'typeof':\n    case 'void':\n    default:\n      return undefined;\n  }\n}"]},"metadata":{},"sourceType":"script"}