{"ast":null,"code":"/**\n * @fileoverview This rule sets a specific indentation style and width for your code\n *\n * @author Teddy Katz\n * @author Vitaly Puzrin\n * @author Gyandeep Singh\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst lodash = require(\"lodash\");\n\nconst astUtils = require(\"./utils/ast-utils\");\n\nconst createTree = require(\"functional-red-black-tree\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nconst KNOWN_NODES = new Set([\"AssignmentExpression\", \"AssignmentPattern\", \"ArrayExpression\", \"ArrayPattern\", \"ArrowFunctionExpression\", \"AwaitExpression\", \"BlockStatement\", \"BinaryExpression\", \"BreakStatement\", \"CallExpression\", \"CatchClause\", \"ClassBody\", \"ClassDeclaration\", \"ClassExpression\", \"ConditionalExpression\", \"ContinueStatement\", \"DoWhileStatement\", \"DebuggerStatement\", \"EmptyStatement\", \"ExperimentalRestProperty\", \"ExperimentalSpreadProperty\", \"ExpressionStatement\", \"ForStatement\", \"ForInStatement\", \"ForOfStatement\", \"FunctionDeclaration\", \"FunctionExpression\", \"Identifier\", \"IfStatement\", \"Literal\", \"LabeledStatement\", \"LogicalExpression\", \"MemberExpression\", \"MetaProperty\", \"MethodDefinition\", \"NewExpression\", \"ObjectExpression\", \"ObjectPattern\", \"Program\", \"Property\", \"RestElement\", \"ReturnStatement\", \"SequenceExpression\", \"SpreadElement\", \"Super\", \"SwitchCase\", \"SwitchStatement\", \"TaggedTemplateExpression\", \"TemplateElement\", \"TemplateLiteral\", \"ThisExpression\", \"ThrowStatement\", \"TryStatement\", \"UnaryExpression\", \"UpdateExpression\", \"VariableDeclaration\", \"VariableDeclarator\", \"WhileStatement\", \"WithStatement\", \"YieldExpression\", \"JSXFragment\", \"JSXOpeningFragment\", \"JSXClosingFragment\", \"JSXIdentifier\", \"JSXNamespacedName\", \"JSXMemberExpression\", \"JSXEmptyExpression\", \"JSXExpressionContainer\", \"JSXElement\", \"JSXClosingElement\", \"JSXOpeningElement\", \"JSXAttribute\", \"JSXSpreadAttribute\", \"JSXText\", \"ExportDefaultDeclaration\", \"ExportNamedDeclaration\", \"ExportAllDeclaration\", \"ExportSpecifier\", \"ImportDeclaration\", \"ImportSpecifier\", \"ImportDefaultSpecifier\", \"ImportNamespaceSpecifier\", \"ImportExpression\"]);\n/*\n * General rule strategy:\n * 1. An OffsetStorage instance stores a map of desired offsets, where each token has a specified offset from another\n *    specified token or to the first column.\n * 2. As the AST is traversed, modify the desired offsets of tokens accordingly. For example, when entering a\n *    BlockStatement, offset all of the tokens in the BlockStatement by 1 indent level from the opening curly\n *    brace of the BlockStatement.\n * 3. After traversing the AST, calculate the expected indentation levels of every token according to the\n *    OffsetStorage container.\n * 4. For each line, compare the expected indentation of the first token to the actual indentation in the file,\n *    and report the token if the two values are not equal.\n */\n\n/**\n * A mutable balanced binary search tree that stores (key, value) pairs. The keys are numeric, and must be unique.\n * This is intended to be a generic wrapper around a balanced binary search tree library, so that the underlying implementation\n * can easily be swapped out.\n */\n\nclass BinarySearchTree {\n  /**\n   * Creates an empty tree\n   */\n  constructor() {\n    this._rbTree = createTree();\n  }\n  /**\n   * Inserts an entry into the tree.\n   * @param {number} key The entry's key\n   * @param {*} value The entry's value\n   * @returns {void}\n   */\n\n\n  insert(key, value) {\n    const iterator = this._rbTree.find(key);\n\n    if (iterator.valid) {\n      this._rbTree = iterator.update(value);\n    } else {\n      this._rbTree = this._rbTree.insert(key, value);\n    }\n  }\n  /**\n   * Finds the entry with the largest key less than or equal to the provided key\n   * @param {number} key The provided key\n   * @returns {{key: number, value: *}|null} The found entry, or null if no such entry exists.\n   */\n\n\n  findLe(key) {\n    const iterator = this._rbTree.le(key);\n\n    return iterator && {\n      key: iterator.key,\n      value: iterator.value\n    };\n  }\n  /**\n   * Deletes all of the keys in the interval [start, end)\n   * @param {number} start The start of the range\n   * @param {number} end The end of the range\n   * @returns {void}\n   */\n\n\n  deleteRange(start, end) {\n    // Exit without traversing the tree if the range has zero size.\n    if (start === end) {\n      return;\n    }\n\n    const iterator = this._rbTree.ge(start);\n\n    while (iterator.valid && iterator.key < end) {\n      this._rbTree = this._rbTree.remove(iterator.key);\n      iterator.next();\n    }\n  }\n\n}\n/**\n * A helper class to get token-based info related to indentation\n */\n\n\nclass TokenInfo {\n  // eslint-disable-next-line jsdoc/require-description\n\n  /**\n   * @param {SourceCode} sourceCode A SourceCode object\n   */\n  constructor(sourceCode) {\n    this.sourceCode = sourceCode;\n    this.firstTokensByLineNumber = sourceCode.tokensAndComments.reduce((map, token) => {\n      if (!map.has(token.loc.start.line)) {\n        map.set(token.loc.start.line, token);\n      }\n\n      if (!map.has(token.loc.end.line) && sourceCode.text.slice(token.range[1] - token.loc.end.column, token.range[1]).trim()) {\n        map.set(token.loc.end.line, token);\n      }\n\n      return map;\n    }, new Map());\n  }\n  /**\n   * Gets the first token on a given token's line\n   * @param {Token|ASTNode} token a node or token\n   * @returns {Token} The first token on the given line\n   */\n\n\n  getFirstTokenOfLine(token) {\n    return this.firstTokensByLineNumber.get(token.loc.start.line);\n  }\n  /**\n   * Determines whether a token is the first token in its line\n   * @param {Token} token The token\n   * @returns {boolean} `true` if the token is the first on its line\n   */\n\n\n  isFirstTokenOfLine(token) {\n    return this.getFirstTokenOfLine(token) === token;\n  }\n  /**\n   * Get the actual indent of a token\n   * @param {Token} token Token to examine. This should be the first token on its line.\n   * @returns {string} The indentation characters that precede the token\n   */\n\n\n  getTokenIndent(token) {\n    return this.sourceCode.text.slice(token.range[0] - token.loc.start.column, token.range[0]);\n  }\n\n}\n/**\n * A class to store information on desired offsets of tokens from each other\n */\n\n\nclass OffsetStorage {\n  // eslint-disable-next-line jsdoc/require-description\n\n  /**\n   * @param {TokenInfo} tokenInfo a TokenInfo instance\n   * @param {number} indentSize The desired size of each indentation level\n   * @param {string} indentType The indentation character\n   */\n  constructor(tokenInfo, indentSize, indentType) {\n    this._tokenInfo = tokenInfo;\n    this._indentSize = indentSize;\n    this._indentType = indentType;\n    this._tree = new BinarySearchTree();\n\n    this._tree.insert(0, {\n      offset: 0,\n      from: null,\n      force: false\n    });\n\n    this._lockedFirstTokens = new WeakMap();\n    this._desiredIndentCache = new WeakMap();\n    this._ignoredTokens = new WeakSet();\n  }\n\n  _getOffsetDescriptor(token) {\n    return this._tree.findLe(token.range[0]).value;\n  }\n  /**\n   * Sets the offset column of token B to match the offset column of token A.\n   * **WARNING**: This matches a *column*, even if baseToken is not the first token on its line. In\n   * most cases, `setDesiredOffset` should be used instead.\n   * @param {Token} baseToken The first token\n   * @param {Token} offsetToken The second token, whose offset should be matched to the first token\n   * @returns {void}\n   */\n\n\n  matchOffsetOf(baseToken, offsetToken) {\n    /*\n     * lockedFirstTokens is a map from a token whose indentation is controlled by the \"first\" option to\n     * the token that it depends on. For example, with the `ArrayExpression: first` option, the first\n     * token of each element in the array after the first will be mapped to the first token of the first\n     * element. The desired indentation of each of these tokens is computed based on the desired indentation\n     * of the \"first\" element, rather than through the normal offset mechanism.\n     */\n    this._lockedFirstTokens.set(offsetToken, baseToken);\n  }\n  /**\n   * Sets the desired offset of a token.\n   *\n   * This uses a line-based offset collapsing behavior to handle tokens on the same line.\n   * For example, consider the following two cases:\n   *\n   * (\n   *     [\n   *         bar\n   *     ]\n   * )\n   *\n   * ([\n   *     bar\n   * ])\n   *\n   * Based on the first case, it's clear that the `bar` token needs to have an offset of 1 indent level (4 spaces) from\n   * the `[` token, and the `[` token has to have an offset of 1 indent level from the `(` token. Since the `(` token is\n   * the first on its line (with an indent of 0 spaces), the `bar` token needs to be offset by 2 indent levels (8 spaces)\n   * from the start of its line.\n   *\n   * However, in the second case `bar` should only be indented by 4 spaces. This is because the offset of 1 indent level\n   * between the `(` and the `[` tokens gets \"collapsed\" because the two tokens are on the same line. As a result, the\n   * `(` token is mapped to the `[` token with an offset of 0, and the rule correctly decides that `bar` should be indented\n   * by 1 indent level from the start of the line.\n   *\n   * This is useful because rule listeners can usually just call `setDesiredOffset` for all the tokens in the node,\n   * without needing to check which lines those tokens are on.\n   *\n   * Note that since collapsing only occurs when two tokens are on the same line, there are a few cases where non-intuitive\n   * behavior can occur. For example, consider the following cases:\n   *\n   * foo(\n   * ).\n   *     bar(\n   *         baz\n   *     )\n   *\n   * foo(\n   * ).bar(\n   *     baz\n   * )\n   *\n   * Based on the first example, it would seem that `bar` should be offset by 1 indent level from `foo`, and `baz`\n   * should be offset by 1 indent level from `bar`. However, this is not correct, because it would result in `baz`\n   * being indented by 2 indent levels in the second case (since `foo`, `bar`, and `baz` are all on separate lines, no\n   * collapsing would occur).\n   *\n   * Instead, the correct way would be to offset `baz` by 1 level from `bar`, offset `bar` by 1 level from the `)`, and\n   * offset the `)` by 0 levels from `foo`. This ensures that the offset between `bar` and the `)` are correctly collapsed\n   * in the second case.\n   * @param {Token} token The token\n   * @param {Token} fromToken The token that `token` should be offset from\n   * @param {number} offset The desired indent level\n   * @returns {void}\n   */\n\n\n  setDesiredOffset(token, fromToken, offset) {\n    return this.setDesiredOffsets(token.range, fromToken, offset);\n  }\n  /**\n   * Sets the desired offset of all tokens in a range\n   * It's common for node listeners in this file to need to apply the same offset to a large, contiguous range of tokens.\n   * Moreover, the offset of any given token is usually updated multiple times (roughly once for each node that contains\n   * it). This means that the offset of each token is updated O(AST depth) times.\n   * It would not be performant to store and update the offsets for each token independently, because the rule would end\n   * up having a time complexity of O(number of tokens * AST depth), which is quite slow for large files.\n   *\n   * Instead, the offset tree is represented as a collection of contiguous offset ranges in a file. For example, the following\n   * list could represent the state of the offset tree at a given point:\n   *\n   * * Tokens starting in the interval [0, 15) are aligned with the beginning of the file\n   * * Tokens starting in the interval [15, 30) are offset by 1 indent level from the `bar` token\n   * * Tokens starting in the interval [30, 43) are offset by 1 indent level from the `foo` token\n   * * Tokens starting in the interval [43, 820) are offset by 2 indent levels from the `bar` token\n   * * Tokens starting in the interval [820, ∞) are offset by 1 indent level from the `baz` token\n   *\n   * The `setDesiredOffsets` methods inserts ranges like the ones above. The third line above would be inserted by using:\n   * `setDesiredOffsets([30, 43], fooToken, 1);`\n   * @param {[number, number]} range A [start, end] pair. All tokens with range[0] <= token.start < range[1] will have the offset applied.\n   * @param {Token} fromToken The token that this is offset from\n   * @param {number} offset The desired indent level\n   * @param {boolean} force `true` if this offset should not use the normal collapsing behavior. This should almost always be false.\n   * @returns {void}\n   */\n\n\n  setDesiredOffsets(range, fromToken, offset, force) {\n    /*\n     * Offset ranges are stored as a collection of nodes, where each node maps a numeric key to an offset\n     * descriptor. The tree for the example above would have the following nodes:\n     *\n     * * key: 0, value: { offset: 0, from: null }\n     * * key: 15, value: { offset: 1, from: barToken }\n     * * key: 30, value: { offset: 1, from: fooToken }\n     * * key: 43, value: { offset: 2, from: barToken }\n     * * key: 820, value: { offset: 1, from: bazToken }\n     *\n     * To find the offset descriptor for any given token, one needs to find the node with the largest key\n     * which is <= token.start. To make this operation fast, the nodes are stored in a balanced binary\n     * search tree indexed by key.\n     */\n    const descriptorToInsert = {\n      offset,\n      from: fromToken,\n      force\n    };\n\n    const descriptorAfterRange = this._tree.findLe(range[1]).value;\n\n    const fromTokenIsInRange = fromToken && fromToken.range[0] >= range[0] && fromToken.range[1] <= range[1];\n\n    const fromTokenDescriptor = fromTokenIsInRange && this._getOffsetDescriptor(fromToken); // First, remove any existing nodes in the range from the tree.\n\n\n    this._tree.deleteRange(range[0] + 1, range[1]); // Insert a new node into the tree for this range\n\n\n    this._tree.insert(range[0], descriptorToInsert);\n    /*\n     * To avoid circular offset dependencies, keep the `fromToken` token mapped to whatever it was mapped to previously,\n     * even if it's in the current range.\n     */\n\n\n    if (fromTokenIsInRange) {\n      this._tree.insert(fromToken.range[0], fromTokenDescriptor);\n\n      this._tree.insert(fromToken.range[1], descriptorToInsert);\n    }\n    /*\n     * To avoid modifying the offset of tokens after the range, insert another node to keep the offset of the following\n     * tokens the same as it was before.\n     */\n\n\n    this._tree.insert(range[1], descriptorAfterRange);\n  }\n  /**\n   * Gets the desired indent of a token\n   * @param {Token} token The token\n   * @returns {string} The desired indent of the token\n   */\n\n\n  getDesiredIndent(token) {\n    if (!this._desiredIndentCache.has(token)) {\n      if (this._ignoredTokens.has(token)) {\n        /*\n         * If the token is ignored, use the actual indent of the token as the desired indent.\n         * This ensures that no errors are reported for this token.\n         */\n        this._desiredIndentCache.set(token, this._tokenInfo.getTokenIndent(token));\n      } else if (this._lockedFirstTokens.has(token)) {\n        const firstToken = this._lockedFirstTokens.get(token);\n\n        this._desiredIndentCache.set(token, // (indentation for the first element's line)\n        this.getDesiredIndent(this._tokenInfo.getFirstTokenOfLine(firstToken)) + // (space between the start of the first element's line and the first element)\n        this._indentType.repeat(firstToken.loc.start.column - this._tokenInfo.getFirstTokenOfLine(firstToken).loc.start.column));\n      } else {\n        const offsetInfo = this._getOffsetDescriptor(token);\n\n        const offset = offsetInfo.from && offsetInfo.from.loc.start.line === token.loc.start.line && !/^\\s*?\\n/u.test(token.value) && !offsetInfo.force ? 0 : offsetInfo.offset * this._indentSize;\n\n        this._desiredIndentCache.set(token, (offsetInfo.from ? this.getDesiredIndent(offsetInfo.from) : \"\") + this._indentType.repeat(offset));\n      }\n    }\n\n    return this._desiredIndentCache.get(token);\n  }\n  /**\n   * Ignores a token, preventing it from being reported.\n   * @param {Token} token The token\n   * @returns {void}\n   */\n\n\n  ignoreToken(token) {\n    if (this._tokenInfo.isFirstTokenOfLine(token)) {\n      this._ignoredTokens.add(token);\n    }\n  }\n  /**\n   * Gets the first token that the given token's indentation is dependent on\n   * @param {Token} token The token\n   * @returns {Token} The token that the given token depends on, or `null` if the given token is at the top level\n   */\n\n\n  getFirstDependency(token) {\n    return this._getOffsetDescriptor(token).from;\n  }\n\n}\n\nconst ELEMENT_LIST_SCHEMA = {\n  oneOf: [{\n    type: \"integer\",\n    minimum: 0\n  }, {\n    enum: [\"first\", \"off\"]\n  }]\n};\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent indentation\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/indent\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      oneOf: [{\n        enum: [\"tab\"]\n      }, {\n        type: \"integer\",\n        minimum: 0\n      }]\n    }, {\n      type: \"object\",\n      properties: {\n        SwitchCase: {\n          type: \"integer\",\n          minimum: 0,\n          default: 0\n        },\n        VariableDeclarator: {\n          oneOf: [ELEMENT_LIST_SCHEMA, {\n            type: \"object\",\n            properties: {\n              var: ELEMENT_LIST_SCHEMA,\n              let: ELEMENT_LIST_SCHEMA,\n              const: ELEMENT_LIST_SCHEMA\n            },\n            additionalProperties: false\n          }]\n        },\n        outerIIFEBody: {\n          type: \"integer\",\n          minimum: 0\n        },\n        MemberExpression: {\n          oneOf: [{\n            type: \"integer\",\n            minimum: 0\n          }, {\n            enum: [\"off\"]\n          }]\n        },\n        FunctionDeclaration: {\n          type: \"object\",\n          properties: {\n            parameters: ELEMENT_LIST_SCHEMA,\n            body: {\n              type: \"integer\",\n              minimum: 0\n            }\n          },\n          additionalProperties: false\n        },\n        FunctionExpression: {\n          type: \"object\",\n          properties: {\n            parameters: ELEMENT_LIST_SCHEMA,\n            body: {\n              type: \"integer\",\n              minimum: 0\n            }\n          },\n          additionalProperties: false\n        },\n        CallExpression: {\n          type: \"object\",\n          properties: {\n            arguments: ELEMENT_LIST_SCHEMA\n          },\n          additionalProperties: false\n        },\n        ArrayExpression: ELEMENT_LIST_SCHEMA,\n        ObjectExpression: ELEMENT_LIST_SCHEMA,\n        ImportDeclaration: ELEMENT_LIST_SCHEMA,\n        flatTernaryExpressions: {\n          type: \"boolean\",\n          default: false\n        },\n        ignoredNodes: {\n          type: \"array\",\n          items: {\n            type: \"string\",\n            not: {\n              pattern: \":exit$\"\n            }\n          }\n        },\n        ignoreComments: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      wrongIndentation: \"Expected indentation of {{expected}} but found {{actual}}.\"\n    }\n  },\n\n  create(context) {\n    const DEFAULT_VARIABLE_INDENT = 1;\n    const DEFAULT_PARAMETER_INDENT = 1;\n    const DEFAULT_FUNCTION_BODY_INDENT = 1;\n    let indentType = \"space\";\n    let indentSize = 4;\n    const options = {\n      SwitchCase: 0,\n      VariableDeclarator: {\n        var: DEFAULT_VARIABLE_INDENT,\n        let: DEFAULT_VARIABLE_INDENT,\n        const: DEFAULT_VARIABLE_INDENT\n      },\n      outerIIFEBody: 1,\n      FunctionDeclaration: {\n        parameters: DEFAULT_PARAMETER_INDENT,\n        body: DEFAULT_FUNCTION_BODY_INDENT\n      },\n      FunctionExpression: {\n        parameters: DEFAULT_PARAMETER_INDENT,\n        body: DEFAULT_FUNCTION_BODY_INDENT\n      },\n      CallExpression: {\n        arguments: DEFAULT_PARAMETER_INDENT\n      },\n      MemberExpression: 1,\n      ArrayExpression: 1,\n      ObjectExpression: 1,\n      ImportDeclaration: 1,\n      flatTernaryExpressions: false,\n      ignoredNodes: [],\n      ignoreComments: false\n    };\n\n    if (context.options.length) {\n      if (context.options[0] === \"tab\") {\n        indentSize = 1;\n        indentType = \"tab\";\n      } else {\n        indentSize = context.options[0];\n        indentType = \"space\";\n      }\n\n      if (context.options[1]) {\n        Object.assign(options, context.options[1]);\n\n        if (typeof options.VariableDeclarator === \"number\" || options.VariableDeclarator === \"first\") {\n          options.VariableDeclarator = {\n            var: options.VariableDeclarator,\n            let: options.VariableDeclarator,\n            const: options.VariableDeclarator\n          };\n        }\n      }\n    }\n\n    const sourceCode = context.getSourceCode();\n    const tokenInfo = new TokenInfo(sourceCode);\n    const offsets = new OffsetStorage(tokenInfo, indentSize, indentType === \"space\" ? \" \" : \"\\t\");\n    const parameterParens = new WeakSet();\n    /**\n     * Creates an error message for a line, given the expected/actual indentation.\n     * @param {int} expectedAmount The expected amount of indentation characters for this line\n     * @param {int} actualSpaces The actual number of indentation spaces that were found on this line\n     * @param {int} actualTabs The actual number of indentation tabs that were found on this line\n     * @returns {string} An error message for this line\n     */\n\n    function createErrorMessageData(expectedAmount, actualSpaces, actualTabs) {\n      const expectedStatement = `${expectedAmount} ${indentType}${expectedAmount === 1 ? \"\" : \"s\"}`; // e.g. \"2 tabs\"\n\n      const foundSpacesWord = `space${actualSpaces === 1 ? \"\" : \"s\"}`; // e.g. \"space\"\n\n      const foundTabsWord = `tab${actualTabs === 1 ? \"\" : \"s\"}`; // e.g. \"tabs\"\n\n      let foundStatement;\n\n      if (actualSpaces > 0) {\n        /*\n         * Abbreviate the message if the expected indentation is also spaces.\n         * e.g. 'Expected 4 spaces but found 2' rather than 'Expected 4 spaces but found 2 spaces'\n         */\n        foundStatement = indentType === \"space\" ? actualSpaces : `${actualSpaces} ${foundSpacesWord}`;\n      } else if (actualTabs > 0) {\n        foundStatement = indentType === \"tab\" ? actualTabs : `${actualTabs} ${foundTabsWord}`;\n      } else {\n        foundStatement = \"0\";\n      }\n\n      return {\n        expected: expectedStatement,\n        actual: foundStatement\n      };\n    }\n    /**\n     * Reports a given indent violation\n     * @param {Token} token Token violating the indent rule\n     * @param {string} neededIndent Expected indentation string\n     * @returns {void}\n     */\n\n\n    function report(token, neededIndent) {\n      const actualIndent = Array.from(tokenInfo.getTokenIndent(token));\n      const numSpaces = actualIndent.filter(char => char === \" \").length;\n      const numTabs = actualIndent.filter(char => char === \"\\t\").length;\n      context.report({\n        node: token,\n        messageId: \"wrongIndentation\",\n        data: createErrorMessageData(neededIndent.length, numSpaces, numTabs),\n        loc: {\n          start: {\n            line: token.loc.start.line,\n            column: 0\n          },\n          end: {\n            line: token.loc.start.line,\n            column: token.loc.start.column\n          }\n        },\n\n        fix(fixer) {\n          const range = [token.range[0] - token.loc.start.column, token.range[0]];\n          const newText = neededIndent;\n          return fixer.replaceTextRange(range, newText);\n        }\n\n      });\n    }\n    /**\n     * Checks if a token's indentation is correct\n     * @param {Token} token Token to examine\n     * @param {string} desiredIndent Desired indentation of the string\n     * @returns {boolean} `true` if the token's indentation is correct\n     */\n\n\n    function validateTokenIndent(token, desiredIndent) {\n      const indentation = tokenInfo.getTokenIndent(token);\n      return indentation === desiredIndent || // To avoid conflicts with no-mixed-spaces-and-tabs, don't report mixed spaces and tabs.\n      indentation.includes(\" \") && indentation.includes(\"\\t\");\n    }\n    /**\n     * Check to see if the node is a file level IIFE\n     * @param {ASTNode} node The function node to check.\n     * @returns {boolean} True if the node is the outer IIFE\n     */\n\n\n    function isOuterIIFE(node) {\n      /*\n       * Verify that the node is an IIFE\n       */\n      if (!node.parent || node.parent.type !== \"CallExpression\" || node.parent.callee !== node) {\n        return false;\n      }\n      /*\n       * Navigate legal ancestors to determine whether this IIFE is outer.\n       * A \"legal ancestor\" is an expression or statement that causes the function to get executed immediately.\n       * For example, `!(function(){})()` is an outer IIFE even though it is preceded by a ! operator.\n       */\n\n\n      let statement = node.parent && node.parent.parent;\n\n      while (statement.type === \"UnaryExpression\" && [\"!\", \"~\", \"+\", \"-\"].indexOf(statement.operator) > -1 || statement.type === \"AssignmentExpression\" || statement.type === \"LogicalExpression\" || statement.type === \"SequenceExpression\" || statement.type === \"VariableDeclarator\") {\n        statement = statement.parent;\n      }\n\n      return (statement.type === \"ExpressionStatement\" || statement.type === \"VariableDeclaration\") && statement.parent.type === \"Program\";\n    }\n    /**\n     * Counts the number of linebreaks that follow the last non-whitespace character in a string\n     * @param {string} string The string to check\n     * @returns {number} The number of JavaScript linebreaks that follow the last non-whitespace character,\n     * or the total number of linebreaks if the string is all whitespace.\n     */\n\n\n    function countTrailingLinebreaks(string) {\n      const trailingWhitespace = string.match(/\\s*$/u)[0];\n      const linebreakMatches = trailingWhitespace.match(astUtils.createGlobalLinebreakMatcher());\n      return linebreakMatches === null ? 0 : linebreakMatches.length;\n    }\n    /**\n     * Check indentation for lists of elements (arrays, objects, function params)\n     * @param {ASTNode[]} elements List of elements that should be offset\n     * @param {Token} startToken The start token of the list that element should be aligned against, e.g. '['\n     * @param {Token} endToken The end token of the list, e.g. ']'\n     * @param {number|string} offset The amount that the elements should be offset\n     * @returns {void}\n     */\n\n\n    function addElementListIndent(elements, startToken, endToken, offset) {\n      /**\n       * Gets the first token of a given element, including surrounding parentheses.\n       * @param {ASTNode} element A node in the `elements` list\n       * @returns {Token} The first token of this element\n       */\n      function getFirstToken(element) {\n        let token = sourceCode.getTokenBefore(element);\n\n        while (astUtils.isOpeningParenToken(token) && token !== startToken) {\n          token = sourceCode.getTokenBefore(token);\n        }\n\n        return sourceCode.getTokenAfter(token);\n      } // Run through all the tokens in the list, and offset them by one indent level (mainly for comments, other things will end up overridden)\n\n\n      offsets.setDesiredOffsets([startToken.range[1], endToken.range[0]], startToken, typeof offset === \"number\" ? offset : 1);\n      offsets.setDesiredOffset(endToken, startToken, 0); // If the preference is \"first\" but there is no first element (e.g. sparse arrays w/ empty first slot), fall back to 1 level.\n\n      if (offset === \"first\" && elements.length && !elements[0]) {\n        return;\n      }\n\n      elements.forEach((element, index) => {\n        if (!element) {\n          // Skip holes in arrays\n          return;\n        }\n\n        if (offset === \"off\") {\n          // Ignore the first token of every element if the \"off\" option is used\n          offsets.ignoreToken(getFirstToken(element));\n        } // Offset the following elements correctly relative to the first element\n\n\n        if (index === 0) {\n          return;\n        }\n\n        if (offset === \"first\" && tokenInfo.isFirstTokenOfLine(getFirstToken(element))) {\n          offsets.matchOffsetOf(getFirstToken(elements[0]), getFirstToken(element));\n        } else {\n          const previousElement = elements[index - 1];\n          const firstTokenOfPreviousElement = previousElement && getFirstToken(previousElement);\n          const previousElementLastToken = previousElement && sourceCode.getLastToken(previousElement);\n\n          if (previousElement && previousElementLastToken.loc.end.line - countTrailingLinebreaks(previousElementLastToken.value) > startToken.loc.end.line) {\n            offsets.setDesiredOffsets([previousElement.range[1], element.range[1]], firstTokenOfPreviousElement, 0);\n          }\n        }\n      });\n    }\n    /**\n     * Check and decide whether to check for indentation for blockless nodes\n     * Scenarios are for or while statements without braces around them\n     * @param {ASTNode} node node to examine\n     * @returns {void}\n     */\n\n\n    function addBlocklessNodeIndent(node) {\n      if (node.type !== \"BlockStatement\") {\n        const lastParentToken = sourceCode.getTokenBefore(node, astUtils.isNotOpeningParenToken);\n        let firstBodyToken = sourceCode.getFirstToken(node);\n        let lastBodyToken = sourceCode.getLastToken(node);\n\n        while (astUtils.isOpeningParenToken(sourceCode.getTokenBefore(firstBodyToken)) && astUtils.isClosingParenToken(sourceCode.getTokenAfter(lastBodyToken))) {\n          firstBodyToken = sourceCode.getTokenBefore(firstBodyToken);\n          lastBodyToken = sourceCode.getTokenAfter(lastBodyToken);\n        }\n\n        offsets.setDesiredOffsets([firstBodyToken.range[0], lastBodyToken.range[1]], lastParentToken, 1);\n        /*\n         * For blockless nodes with semicolon-first style, don't indent the semicolon.\n         * e.g.\n         * if (foo) bar()\n         * ; [1, 2, 3].map(foo)\n         */\n\n        const lastToken = sourceCode.getLastToken(node);\n\n        if (node.type !== \"EmptyStatement\" && astUtils.isSemicolonToken(lastToken)) {\n          offsets.setDesiredOffset(lastToken, lastParentToken, 0);\n        }\n      }\n    }\n    /**\n     * Checks the indentation for nodes that are like function calls (`CallExpression` and `NewExpression`)\n     * @param {ASTNode} node A CallExpression or NewExpression node\n     * @returns {void}\n     */\n\n\n    function addFunctionCallIndent(node) {\n      let openingParen;\n\n      if (node.arguments.length) {\n        openingParen = sourceCode.getFirstTokenBetween(node.callee, node.arguments[0], astUtils.isOpeningParenToken);\n      } else {\n        openingParen = sourceCode.getLastToken(node, 1);\n      }\n\n      const closingParen = sourceCode.getLastToken(node);\n      parameterParens.add(openingParen);\n      parameterParens.add(closingParen);\n      offsets.setDesiredOffset(openingParen, sourceCode.getTokenBefore(openingParen), 0);\n      addElementListIndent(node.arguments, openingParen, closingParen, options.CallExpression.arguments);\n    }\n    /**\n     * Checks the indentation of parenthesized values, given a list of tokens in a program\n     * @param {Token[]} tokens A list of tokens\n     * @returns {void}\n     */\n\n\n    function addParensIndent(tokens) {\n      const parenStack = [];\n      const parenPairs = [];\n      tokens.forEach(nextToken => {\n        // Accumulate a list of parenthesis pairs\n        if (astUtils.isOpeningParenToken(nextToken)) {\n          parenStack.push(nextToken);\n        } else if (astUtils.isClosingParenToken(nextToken)) {\n          parenPairs.unshift({\n            left: parenStack.pop(),\n            right: nextToken\n          });\n        }\n      });\n      parenPairs.forEach(pair => {\n        const leftParen = pair.left;\n        const rightParen = pair.right; // We only want to handle parens around expressions, so exclude parentheses that are in function parameters and function call arguments.\n\n        if (!parameterParens.has(leftParen) && !parameterParens.has(rightParen)) {\n          const parenthesizedTokens = new Set(sourceCode.getTokensBetween(leftParen, rightParen));\n          parenthesizedTokens.forEach(token => {\n            if (!parenthesizedTokens.has(offsets.getFirstDependency(token))) {\n              offsets.setDesiredOffset(token, leftParen, 1);\n            }\n          });\n        }\n\n        offsets.setDesiredOffset(rightParen, leftParen, 0);\n      });\n    }\n    /**\n     * Ignore all tokens within an unknown node whose offset do not depend\n     * on another token's offset within the unknown node\n     * @param {ASTNode} node Unknown Node\n     * @returns {void}\n     */\n\n\n    function ignoreNode(node) {\n      const unknownNodeTokens = new Set(sourceCode.getTokens(node, {\n        includeComments: true\n      }));\n      unknownNodeTokens.forEach(token => {\n        if (!unknownNodeTokens.has(offsets.getFirstDependency(token))) {\n          const firstTokenOfLine = tokenInfo.getFirstTokenOfLine(token);\n\n          if (token === firstTokenOfLine) {\n            offsets.ignoreToken(token);\n          } else {\n            offsets.setDesiredOffset(token, firstTokenOfLine, 0);\n          }\n        }\n      });\n    }\n    /**\n     * Check whether the given token is on the first line of a statement.\n     * @param {Token} token The token to check.\n     * @param {ASTNode} leafNode The expression node that the token belongs directly.\n     * @returns {boolean} `true` if the token is on the first line of a statement.\n     */\n\n\n    function isOnFirstLineOfStatement(token, leafNode) {\n      let node = leafNode;\n\n      while (node.parent && !node.parent.type.endsWith(\"Statement\") && !node.parent.type.endsWith(\"Declaration\")) {\n        node = node.parent;\n      }\n\n      node = node.parent;\n      return !node || node.loc.start.line === token.loc.start.line;\n    }\n    /**\n     * Check whether there are any blank (whitespace-only) lines between\n     * two tokens on separate lines.\n     * @param {Token} firstToken The first token.\n     * @param {Token} secondToken The second token.\n     * @returns {boolean} `true` if the tokens are on separate lines and\n     *   there exists a blank line between them, `false` otherwise.\n     */\n\n\n    function hasBlankLinesBetween(firstToken, secondToken) {\n      const firstTokenLine = firstToken.loc.end.line;\n      const secondTokenLine = secondToken.loc.start.line;\n\n      if (firstTokenLine === secondTokenLine || firstTokenLine === secondTokenLine - 1) {\n        return false;\n      }\n\n      for (let line = firstTokenLine + 1; line < secondTokenLine; ++line) {\n        if (!tokenInfo.firstTokensByLineNumber.has(line)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    const ignoredNodeFirstTokens = new Set();\n    const baseOffsetListeners = {\n      \"ArrayExpression, ArrayPattern\"(node) {\n        const openingBracket = sourceCode.getFirstToken(node);\n        const closingBracket = sourceCode.getTokenAfter(lodash.findLast(node.elements) || openingBracket, astUtils.isClosingBracketToken);\n        addElementListIndent(node.elements, openingBracket, closingBracket, options.ArrayExpression);\n      },\n\n      \"ObjectExpression, ObjectPattern\"(node) {\n        const openingCurly = sourceCode.getFirstToken(node);\n        const closingCurly = sourceCode.getTokenAfter(node.properties.length ? node.properties[node.properties.length - 1] : openingCurly, astUtils.isClosingBraceToken);\n        addElementListIndent(node.properties, openingCurly, closingCurly, options.ObjectExpression);\n      },\n\n      ArrowFunctionExpression(node) {\n        const firstToken = sourceCode.getFirstToken(node);\n\n        if (astUtils.isOpeningParenToken(firstToken)) {\n          const openingParen = firstToken;\n          const closingParen = sourceCode.getTokenBefore(node.body, astUtils.isClosingParenToken);\n          parameterParens.add(openingParen);\n          parameterParens.add(closingParen);\n          addElementListIndent(node.params, openingParen, closingParen, options.FunctionExpression.parameters);\n        }\n\n        addBlocklessNodeIndent(node.body);\n      },\n\n      AssignmentExpression(node) {\n        const operator = sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);\n        offsets.setDesiredOffsets([operator.range[0], node.range[1]], sourceCode.getLastToken(node.left), 1);\n        offsets.ignoreToken(operator);\n        offsets.ignoreToken(sourceCode.getTokenAfter(operator));\n      },\n\n      \"BinaryExpression, LogicalExpression\"(node) {\n        const operator = sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);\n        /*\n         * For backwards compatibility, don't check BinaryExpression indents, e.g.\n         * var foo = bar &&\n         *                   baz;\n         */\n\n        const tokenAfterOperator = sourceCode.getTokenAfter(operator);\n        offsets.ignoreToken(operator);\n        offsets.ignoreToken(tokenAfterOperator);\n        offsets.setDesiredOffset(tokenAfterOperator, operator, 0);\n      },\n\n      \"BlockStatement, ClassBody\"(node) {\n        let blockIndentLevel;\n\n        if (node.parent && isOuterIIFE(node.parent)) {\n          blockIndentLevel = options.outerIIFEBody;\n        } else if (node.parent && (node.parent.type === \"FunctionExpression\" || node.parent.type === \"ArrowFunctionExpression\")) {\n          blockIndentLevel = options.FunctionExpression.body;\n        } else if (node.parent && node.parent.type === \"FunctionDeclaration\") {\n          blockIndentLevel = options.FunctionDeclaration.body;\n        } else {\n          blockIndentLevel = 1;\n        }\n        /*\n         * For blocks that aren't lone statements, ensure that the opening curly brace\n         * is aligned with the parent.\n         */\n\n\n        if (!astUtils.STATEMENT_LIST_PARENTS.has(node.parent.type)) {\n          offsets.setDesiredOffset(sourceCode.getFirstToken(node), sourceCode.getFirstToken(node.parent), 0);\n        }\n\n        addElementListIndent(node.body, sourceCode.getFirstToken(node), sourceCode.getLastToken(node), blockIndentLevel);\n      },\n\n      CallExpression: addFunctionCallIndent,\n\n      \"ClassDeclaration[superClass], ClassExpression[superClass]\"(node) {\n        const classToken = sourceCode.getFirstToken(node);\n        const extendsToken = sourceCode.getTokenBefore(node.superClass, astUtils.isNotOpeningParenToken);\n        offsets.setDesiredOffsets([extendsToken.range[0], node.body.range[0]], classToken, 1);\n      },\n\n      ConditionalExpression(node) {\n        const firstToken = sourceCode.getFirstToken(node); // `flatTernaryExpressions` option is for the following style:\n        // var a =\n        //     foo > 0 ? bar :\n        //     foo < 0 ? baz :\n        //     /*else*/ qiz ;\n\n        if (!options.flatTernaryExpressions || !astUtils.isTokenOnSameLine(node.test, node.consequent) || isOnFirstLineOfStatement(firstToken, node)) {\n          const questionMarkToken = sourceCode.getFirstTokenBetween(node.test, node.consequent, token => token.type === \"Punctuator\" && token.value === \"?\");\n          const colonToken = sourceCode.getFirstTokenBetween(node.consequent, node.alternate, token => token.type === \"Punctuator\" && token.value === \":\");\n          const firstConsequentToken = sourceCode.getTokenAfter(questionMarkToken);\n          const lastConsequentToken = sourceCode.getTokenBefore(colonToken);\n          const firstAlternateToken = sourceCode.getTokenAfter(colonToken);\n          offsets.setDesiredOffset(questionMarkToken, firstToken, 1);\n          offsets.setDesiredOffset(colonToken, firstToken, 1);\n          offsets.setDesiredOffset(firstConsequentToken, firstToken, 1);\n          /*\n           * The alternate and the consequent should usually have the same indentation.\n           * If they share part of a line, align the alternate against the first token of the consequent.\n           * This allows the alternate to be indented correctly in cases like this:\n           * foo ? (\n           *   bar\n           * ) : ( // this '(' is aligned with the '(' above, so it's considered to be aligned with `foo`\n           *   baz // as a result, `baz` is offset by 1 rather than 2\n           * )\n           */\n\n          if (lastConsequentToken.loc.end.line === firstAlternateToken.loc.start.line) {\n            offsets.setDesiredOffset(firstAlternateToken, firstConsequentToken, 0);\n          } else {\n            /**\n             * If the alternate and consequent do not share part of a line, offset the alternate from the first\n             * token of the conditional expression. For example:\n             * foo ? bar\n             *   : baz\n             *\n             * If `baz` were aligned with `bar` rather than being offset by 1 from `foo`, `baz` would end up\n             * having no expected indentation.\n             */\n            offsets.setDesiredOffset(firstAlternateToken, firstToken, 1);\n          }\n        }\n      },\n\n      \"DoWhileStatement, WhileStatement, ForInStatement, ForOfStatement\": node => addBlocklessNodeIndent(node.body),\n\n      ExportNamedDeclaration(node) {\n        if (node.declaration === null) {\n          const closingCurly = sourceCode.getLastToken(node, astUtils.isClosingBraceToken); // Indent the specifiers in `export {foo, bar, baz}`\n\n          addElementListIndent(node.specifiers, sourceCode.getFirstToken(node, {\n            skip: 1\n          }), closingCurly, 1);\n\n          if (node.source) {\n            // Indent everything after and including the `from` token in `export {foo, bar, baz} from 'qux'`\n            offsets.setDesiredOffsets([closingCurly.range[1], node.range[1]], sourceCode.getFirstToken(node), 1);\n          }\n        }\n      },\n\n      ForStatement(node) {\n        const forOpeningParen = sourceCode.getFirstToken(node, 1);\n\n        if (node.init) {\n          offsets.setDesiredOffsets(node.init.range, forOpeningParen, 1);\n        }\n\n        if (node.test) {\n          offsets.setDesiredOffsets(node.test.range, forOpeningParen, 1);\n        }\n\n        if (node.update) {\n          offsets.setDesiredOffsets(node.update.range, forOpeningParen, 1);\n        }\n\n        addBlocklessNodeIndent(node.body);\n      },\n\n      \"FunctionDeclaration, FunctionExpression\"(node) {\n        const closingParen = sourceCode.getTokenBefore(node.body);\n        const openingParen = sourceCode.getTokenBefore(node.params.length ? node.params[0] : closingParen);\n        parameterParens.add(openingParen);\n        parameterParens.add(closingParen);\n        addElementListIndent(node.params, openingParen, closingParen, options[node.type].parameters);\n      },\n\n      IfStatement(node) {\n        addBlocklessNodeIndent(node.consequent);\n\n        if (node.alternate && node.alternate.type !== \"IfStatement\") {\n          addBlocklessNodeIndent(node.alternate);\n        }\n      },\n\n      ImportDeclaration(node) {\n        if (node.specifiers.some(specifier => specifier.type === \"ImportSpecifier\")) {\n          const openingCurly = sourceCode.getFirstToken(node, astUtils.isOpeningBraceToken);\n          const closingCurly = sourceCode.getLastToken(node, astUtils.isClosingBraceToken);\n          addElementListIndent(node.specifiers.filter(specifier => specifier.type === \"ImportSpecifier\"), openingCurly, closingCurly, options.ImportDeclaration);\n        }\n\n        const fromToken = sourceCode.getLastToken(node, token => token.type === \"Identifier\" && token.value === \"from\");\n        const sourceToken = sourceCode.getLastToken(node, token => token.type === \"String\");\n        const semiToken = sourceCode.getLastToken(node, token => token.type === \"Punctuator\" && token.value === \";\");\n\n        if (fromToken) {\n          const end = semiToken && semiToken.range[1] === sourceToken.range[1] ? node.range[1] : sourceToken.range[1];\n          offsets.setDesiredOffsets([fromToken.range[0], end], sourceCode.getFirstToken(node), 1);\n        }\n      },\n\n      ImportExpression(node) {\n        const openingParen = sourceCode.getFirstToken(node, 1);\n        const closingParen = sourceCode.getLastToken(node);\n        parameterParens.add(openingParen);\n        parameterParens.add(closingParen);\n        offsets.setDesiredOffset(openingParen, sourceCode.getTokenBefore(openingParen), 0);\n        addElementListIndent([node.source], openingParen, closingParen, options.CallExpression.arguments);\n      },\n\n      \"MemberExpression, JSXMemberExpression, MetaProperty\"(node) {\n        const object = node.type === \"MetaProperty\" ? node.meta : node.object;\n        const firstNonObjectToken = sourceCode.getFirstTokenBetween(object, node.property, astUtils.isNotClosingParenToken);\n        const secondNonObjectToken = sourceCode.getTokenAfter(firstNonObjectToken);\n        const objectParenCount = sourceCode.getTokensBetween(object, node.property, {\n          filter: astUtils.isClosingParenToken\n        }).length;\n        const firstObjectToken = objectParenCount ? sourceCode.getTokenBefore(object, {\n          skip: objectParenCount - 1\n        }) : sourceCode.getFirstToken(object);\n        const lastObjectToken = sourceCode.getTokenBefore(firstNonObjectToken);\n        const firstPropertyToken = node.computed ? firstNonObjectToken : secondNonObjectToken;\n\n        if (node.computed) {\n          // For computed MemberExpressions, match the closing bracket with the opening bracket.\n          offsets.setDesiredOffset(sourceCode.getLastToken(node), firstNonObjectToken, 0);\n          offsets.setDesiredOffsets(node.property.range, firstNonObjectToken, 1);\n        }\n        /*\n         * If the object ends on the same line that the property starts, match against the last token\n         * of the object, to ensure that the MemberExpression is not indented.\n         *\n         * Otherwise, match against the first token of the object, e.g.\n         * foo\n         *   .bar\n         *   .baz // <-- offset by 1 from `foo`\n         */\n\n\n        const offsetBase = lastObjectToken.loc.end.line === firstPropertyToken.loc.start.line ? lastObjectToken : firstObjectToken;\n\n        if (typeof options.MemberExpression === \"number\") {\n          // Match the dot (for non-computed properties) or the opening bracket (for computed properties) against the object.\n          offsets.setDesiredOffset(firstNonObjectToken, offsetBase, options.MemberExpression);\n          /*\n           * For computed MemberExpressions, match the first token of the property against the opening bracket.\n           * Otherwise, match the first token of the property against the object.\n           */\n\n          offsets.setDesiredOffset(secondNonObjectToken, node.computed ? firstNonObjectToken : offsetBase, options.MemberExpression);\n        } else {\n          // If the MemberExpression option is off, ignore the dot and the first token of the property.\n          offsets.ignoreToken(firstNonObjectToken);\n          offsets.ignoreToken(secondNonObjectToken); // To ignore the property indentation, ensure that the property tokens depend on the ignored tokens.\n\n          offsets.setDesiredOffset(firstNonObjectToken, offsetBase, 0);\n          offsets.setDesiredOffset(secondNonObjectToken, firstNonObjectToken, 0);\n        }\n      },\n\n      NewExpression(node) {\n        // Only indent the arguments if the NewExpression has parens (e.g. `new Foo(bar)` or `new Foo()`, but not `new Foo`\n        if (node.arguments.length > 0 || astUtils.isClosingParenToken(sourceCode.getLastToken(node)) && astUtils.isOpeningParenToken(sourceCode.getLastToken(node, 1))) {\n          addFunctionCallIndent(node);\n        }\n      },\n\n      Property(node) {\n        if (!node.shorthand && !node.method && node.kind === \"init\") {\n          const colon = sourceCode.getFirstTokenBetween(node.key, node.value, astUtils.isColonToken);\n          offsets.ignoreToken(sourceCode.getTokenAfter(colon));\n        }\n      },\n\n      SwitchStatement(node) {\n        const openingCurly = sourceCode.getTokenAfter(node.discriminant, astUtils.isOpeningBraceToken);\n        const closingCurly = sourceCode.getLastToken(node);\n        offsets.setDesiredOffsets([openingCurly.range[1], closingCurly.range[0]], openingCurly, options.SwitchCase);\n\n        if (node.cases.length) {\n          sourceCode.getTokensBetween(node.cases[node.cases.length - 1], closingCurly, {\n            includeComments: true,\n            filter: astUtils.isCommentToken\n          }).forEach(token => offsets.ignoreToken(token));\n        }\n      },\n\n      SwitchCase(node) {\n        if (!(node.consequent.length === 1 && node.consequent[0].type === \"BlockStatement\")) {\n          const caseKeyword = sourceCode.getFirstToken(node);\n          const tokenAfterCurrentCase = sourceCode.getTokenAfter(node);\n          offsets.setDesiredOffsets([caseKeyword.range[1], tokenAfterCurrentCase.range[0]], caseKeyword, 1);\n        }\n      },\n\n      TemplateLiteral(node) {\n        node.expressions.forEach((expression, index) => {\n          const previousQuasi = node.quasis[index];\n          const nextQuasi = node.quasis[index + 1];\n          const tokenToAlignFrom = previousQuasi.loc.start.line === previousQuasi.loc.end.line ? sourceCode.getFirstToken(previousQuasi) : null;\n          offsets.setDesiredOffsets([previousQuasi.range[1], nextQuasi.range[0]], tokenToAlignFrom, 1);\n          offsets.setDesiredOffset(sourceCode.getFirstToken(nextQuasi), tokenToAlignFrom, 0);\n        });\n      },\n\n      VariableDeclaration(node) {\n        let variableIndent = Object.prototype.hasOwnProperty.call(options.VariableDeclarator, node.kind) ? options.VariableDeclarator[node.kind] : DEFAULT_VARIABLE_INDENT;\n        const firstToken = sourceCode.getFirstToken(node),\n              lastToken = sourceCode.getLastToken(node);\n\n        if (options.VariableDeclarator[node.kind] === \"first\") {\n          if (node.declarations.length > 1) {\n            addElementListIndent(node.declarations, firstToken, lastToken, \"first\");\n            return;\n          }\n\n          variableIndent = DEFAULT_VARIABLE_INDENT;\n        }\n\n        if (node.declarations[node.declarations.length - 1].loc.start.line > node.loc.start.line) {\n          /*\n           * VariableDeclarator indentation is a bit different from other forms of indentation, in that the\n           * indentation of an opening bracket sometimes won't match that of a closing bracket. For example,\n           * the following indentations are correct:\n           *\n           * var foo = {\n           *   ok: true\n           * };\n           *\n           * var foo = {\n           *     ok: true,\n           *   },\n           *   bar = 1;\n           *\n           * Account for when exiting the AST (after indentations have already been set for the nodes in\n           * the declaration) by manually increasing the indentation level of the tokens in this declarator\n           * on the same line as the start of the declaration, provided that there are declarators that\n           * follow this one.\n           */\n          offsets.setDesiredOffsets(node.range, firstToken, variableIndent, true);\n        } else {\n          offsets.setDesiredOffsets(node.range, firstToken, variableIndent);\n        }\n\n        if (astUtils.isSemicolonToken(lastToken)) {\n          offsets.ignoreToken(lastToken);\n        }\n      },\n\n      VariableDeclarator(node) {\n        if (node.init) {\n          const equalOperator = sourceCode.getTokenBefore(node.init, astUtils.isNotOpeningParenToken);\n          const tokenAfterOperator = sourceCode.getTokenAfter(equalOperator);\n          offsets.ignoreToken(equalOperator);\n          offsets.ignoreToken(tokenAfterOperator);\n          offsets.setDesiredOffsets([tokenAfterOperator.range[0], node.range[1]], equalOperator, 1);\n          offsets.setDesiredOffset(equalOperator, sourceCode.getLastToken(node.id), 0);\n        }\n      },\n\n      \"JSXAttribute[value]\"(node) {\n        const equalsToken = sourceCode.getFirstTokenBetween(node.name, node.value, token => token.type === \"Punctuator\" && token.value === \"=\");\n        offsets.setDesiredOffsets([equalsToken.range[0], node.value.range[1]], sourceCode.getFirstToken(node.name), 1);\n      },\n\n      JSXElement(node) {\n        if (node.closingElement) {\n          addElementListIndent(node.children, sourceCode.getFirstToken(node.openingElement), sourceCode.getFirstToken(node.closingElement), 1);\n        }\n      },\n\n      JSXOpeningElement(node) {\n        const firstToken = sourceCode.getFirstToken(node);\n        let closingToken;\n\n        if (node.selfClosing) {\n          closingToken = sourceCode.getLastToken(node, {\n            skip: 1\n          });\n          offsets.setDesiredOffset(sourceCode.getLastToken(node), closingToken, 0);\n        } else {\n          closingToken = sourceCode.getLastToken(node);\n        }\n\n        offsets.setDesiredOffsets(node.name.range, sourceCode.getFirstToken(node));\n        addElementListIndent(node.attributes, firstToken, closingToken, 1);\n      },\n\n      JSXClosingElement(node) {\n        const firstToken = sourceCode.getFirstToken(node);\n        offsets.setDesiredOffsets(node.name.range, firstToken, 1);\n      },\n\n      JSXFragment(node) {\n        const firstOpeningToken = sourceCode.getFirstToken(node.openingFragment);\n        const firstClosingToken = sourceCode.getFirstToken(node.closingFragment);\n        addElementListIndent(node.children, firstOpeningToken, firstClosingToken, 1);\n      },\n\n      JSXOpeningFragment(node) {\n        const firstToken = sourceCode.getFirstToken(node);\n        const closingToken = sourceCode.getLastToken(node);\n        offsets.setDesiredOffsets(node.range, firstToken, 1);\n        offsets.matchOffsetOf(firstToken, closingToken);\n      },\n\n      JSXClosingFragment(node) {\n        const firstToken = sourceCode.getFirstToken(node);\n        const slashToken = sourceCode.getLastToken(node, {\n          skip: 1\n        });\n        const closingToken = sourceCode.getLastToken(node);\n        const tokenToMatch = astUtils.isTokenOnSameLine(slashToken, closingToken) ? slashToken : closingToken;\n        offsets.setDesiredOffsets(node.range, firstToken, 1);\n        offsets.matchOffsetOf(firstToken, tokenToMatch);\n      },\n\n      JSXExpressionContainer(node) {\n        const openingCurly = sourceCode.getFirstToken(node);\n        const closingCurly = sourceCode.getLastToken(node);\n        offsets.setDesiredOffsets([openingCurly.range[1], closingCurly.range[0]], openingCurly, 1);\n      },\n\n      JSXSpreadAttribute(node) {\n        const openingCurly = sourceCode.getFirstToken(node);\n        const closingCurly = sourceCode.getLastToken(node);\n        offsets.setDesiredOffsets([openingCurly.range[1], closingCurly.range[0]], openingCurly, 1);\n      },\n\n      \"*\"(node) {\n        const firstToken = sourceCode.getFirstToken(node); // Ensure that the children of every node are indented at least as much as the first token.\n\n        if (firstToken && !ignoredNodeFirstTokens.has(firstToken)) {\n          offsets.setDesiredOffsets(node.range, firstToken, 0);\n        }\n      }\n\n    };\n    const listenerCallQueue = [];\n    /*\n     * To ignore the indentation of a node:\n     * 1. Don't call the node's listener when entering it (if it has a listener)\n     * 2. Don't set any offsets against the first token of the node.\n     * 3. Call `ignoreNode` on the node sometime after exiting it and before validating offsets.\n     */\n\n    const offsetListeners = lodash.mapValues(baseOffsetListeners,\n    /*\n     * Offset listener calls are deferred until traversal is finished, and are called as\n     * part of the final `Program:exit` listener. This is necessary because a node might\n     * be matched by multiple selectors.\n     *\n     * Example: Suppose there is an offset listener for `Identifier`, and the user has\n     * specified in configuration that `MemberExpression > Identifier` should be ignored.\n     * Due to selector specificity rules, the `Identifier` listener will get called first. However,\n     * if a given Identifier node is supposed to be ignored, then the `Identifier` offset listener\n     * should not have been called at all. Without doing extra selector matching, we don't know\n     * whether the Identifier matches the `MemberExpression > Identifier` selector until the\n     * `MemberExpression > Identifier` listener is called.\n     *\n     * To avoid this, the `Identifier` listener isn't called until traversal finishes and all\n     * ignored nodes are known.\n     */\n    listener => node => listenerCallQueue.push({\n      listener,\n      node\n    })); // For each ignored node selector, set up a listener to collect it into the `ignoredNodes` set.\n\n    const ignoredNodes = new Set();\n    /**\n     * Ignores a node\n     * @param {ASTNode} node The node to ignore\n     * @returns {void}\n     */\n\n    function addToIgnoredNodes(node) {\n      ignoredNodes.add(node);\n      ignoredNodeFirstTokens.add(sourceCode.getFirstToken(node));\n    }\n\n    const ignoredNodeListeners = options.ignoredNodes.reduce((listeners, ignoredSelector) => Object.assign(listeners, {\n      [ignoredSelector]: addToIgnoredNodes\n    }), {});\n    /*\n     * Join the listeners, and add a listener to verify that all tokens actually have the correct indentation\n     * at the end.\n     *\n     * Using Object.assign will cause some offset listeners to be overwritten if the same selector also appears\n     * in `ignoredNodeListeners`. This isn't a problem because all of the matching nodes will be ignored,\n     * so those listeners wouldn't be called anyway.\n     */\n\n    return Object.assign(offsetListeners, ignoredNodeListeners, {\n      \"*:exit\"(node) {\n        // If a node's type is nonstandard, we can't tell how its children should be offset, so ignore it.\n        if (!KNOWN_NODES.has(node.type)) {\n          addToIgnoredNodes(node);\n        }\n      },\n\n      \"Program:exit\"() {\n        // If ignoreComments option is enabled, ignore all comment tokens.\n        if (options.ignoreComments) {\n          sourceCode.getAllComments().forEach(comment => offsets.ignoreToken(comment));\n        } // Invoke the queued offset listeners for the nodes that aren't ignored.\n\n\n        listenerCallQueue.filter(nodeInfo => !ignoredNodes.has(nodeInfo.node)).forEach(nodeInfo => nodeInfo.listener(nodeInfo.node)); // Update the offsets for ignored nodes to prevent their child tokens from being reported.\n\n        ignoredNodes.forEach(ignoreNode);\n        addParensIndent(sourceCode.ast.tokens);\n        /*\n         * Create a Map from (tokenOrComment) => (precedingToken).\n         * This is necessary because sourceCode.getTokenBefore does not handle a comment as an argument correctly.\n         */\n\n        const precedingTokens = sourceCode.ast.comments.reduce((commentMap, comment) => {\n          const tokenOrCommentBefore = sourceCode.getTokenBefore(comment, {\n            includeComments: true\n          });\n          return commentMap.set(comment, commentMap.has(tokenOrCommentBefore) ? commentMap.get(tokenOrCommentBefore) : tokenOrCommentBefore);\n        }, new WeakMap());\n        sourceCode.lines.forEach((line, lineIndex) => {\n          const lineNumber = lineIndex + 1;\n\n          if (!tokenInfo.firstTokensByLineNumber.has(lineNumber)) {\n            // Don't check indentation on blank lines\n            return;\n          }\n\n          const firstTokenOfLine = tokenInfo.firstTokensByLineNumber.get(lineNumber);\n\n          if (firstTokenOfLine.loc.start.line !== lineNumber) {\n            // Don't check the indentation of multi-line tokens (e.g. template literals or block comments) twice.\n            return;\n          }\n\n          if (astUtils.isCommentToken(firstTokenOfLine)) {\n            const tokenBefore = precedingTokens.get(firstTokenOfLine);\n            const tokenAfter = tokenBefore ? sourceCode.getTokenAfter(tokenBefore) : sourceCode.ast.tokens[0];\n            const mayAlignWithBefore = tokenBefore && !hasBlankLinesBetween(tokenBefore, firstTokenOfLine);\n            const mayAlignWithAfter = tokenAfter && !hasBlankLinesBetween(firstTokenOfLine, tokenAfter);\n            /*\n             * If a comment precedes a line that begins with a semicolon token, align to that token, i.e.\n             *\n             * let foo\n             * // comment\n             * ;(async () => {})()\n             */\n\n            if (tokenAfter && astUtils.isSemicolonToken(tokenAfter) && !astUtils.isTokenOnSameLine(firstTokenOfLine, tokenAfter)) {\n              offsets.setDesiredOffset(firstTokenOfLine, tokenAfter, 0);\n            } // If a comment matches the expected indentation of the token immediately before or after, don't report it.\n\n\n            if (mayAlignWithBefore && validateTokenIndent(firstTokenOfLine, offsets.getDesiredIndent(tokenBefore)) || mayAlignWithAfter && validateTokenIndent(firstTokenOfLine, offsets.getDesiredIndent(tokenAfter))) {\n              return;\n            }\n          } // If the token matches the expected indentation, don't report it.\n\n\n          if (validateTokenIndent(firstTokenOfLine, offsets.getDesiredIndent(firstTokenOfLine))) {\n            return;\n          } // Otherwise, report the token/comment.\n\n\n          report(firstTokenOfLine, offsets.getDesiredIndent(firstTokenOfLine));\n        });\n      }\n\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/indent.js"],"names":["lodash","require","astUtils","createTree","KNOWN_NODES","Set","BinarySearchTree","constructor","_rbTree","insert","key","value","iterator","find","valid","update","findLe","le","deleteRange","start","end","ge","remove","next","TokenInfo","sourceCode","firstTokensByLineNumber","tokensAndComments","reduce","map","token","has","loc","line","set","text","slice","range","column","trim","Map","getFirstTokenOfLine","get","isFirstTokenOfLine","getTokenIndent","OffsetStorage","tokenInfo","indentSize","indentType","_tokenInfo","_indentSize","_indentType","_tree","offset","from","force","_lockedFirstTokens","WeakMap","_desiredIndentCache","_ignoredTokens","WeakSet","_getOffsetDescriptor","matchOffsetOf","baseToken","offsetToken","setDesiredOffset","fromToken","setDesiredOffsets","descriptorToInsert","descriptorAfterRange","fromTokenIsInRange","fromTokenDescriptor","getDesiredIndent","firstToken","repeat","offsetInfo","test","ignoreToken","add","getFirstDependency","ELEMENT_LIST_SCHEMA","oneOf","type","minimum","enum","module","exports","meta","docs","description","category","recommended","url","fixable","schema","properties","SwitchCase","default","VariableDeclarator","var","let","const","additionalProperties","outerIIFEBody","MemberExpression","FunctionDeclaration","parameters","body","FunctionExpression","CallExpression","arguments","ArrayExpression","ObjectExpression","ImportDeclaration","flatTernaryExpressions","ignoredNodes","items","not","pattern","ignoreComments","messages","wrongIndentation","create","context","DEFAULT_VARIABLE_INDENT","DEFAULT_PARAMETER_INDENT","DEFAULT_FUNCTION_BODY_INDENT","options","length","Object","assign","getSourceCode","offsets","parameterParens","createErrorMessageData","expectedAmount","actualSpaces","actualTabs","expectedStatement","foundSpacesWord","foundTabsWord","foundStatement","expected","actual","report","neededIndent","actualIndent","Array","numSpaces","filter","char","numTabs","node","messageId","data","fix","fixer","newText","replaceTextRange","validateTokenIndent","desiredIndent","indentation","includes","isOuterIIFE","parent","callee","statement","indexOf","operator","countTrailingLinebreaks","string","trailingWhitespace","match","linebreakMatches","createGlobalLinebreakMatcher","addElementListIndent","elements","startToken","endToken","getFirstToken","element","getTokenBefore","isOpeningParenToken","getTokenAfter","forEach","index","previousElement","firstTokenOfPreviousElement","previousElementLastToken","getLastToken","addBlocklessNodeIndent","lastParentToken","isNotOpeningParenToken","firstBodyToken","lastBodyToken","isClosingParenToken","lastToken","isSemicolonToken","addFunctionCallIndent","openingParen","getFirstTokenBetween","closingParen","addParensIndent","tokens","parenStack","parenPairs","nextToken","push","unshift","left","pop","right","pair","leftParen","rightParen","parenthesizedTokens","getTokensBetween","ignoreNode","unknownNodeTokens","getTokens","includeComments","firstTokenOfLine","isOnFirstLineOfStatement","leafNode","endsWith","hasBlankLinesBetween","secondToken","firstTokenLine","secondTokenLine","ignoredNodeFirstTokens","baseOffsetListeners","openingBracket","closingBracket","findLast","isClosingBracketToken","openingCurly","closingCurly","isClosingBraceToken","ArrowFunctionExpression","params","AssignmentExpression","tokenAfterOperator","blockIndentLevel","STATEMENT_LIST_PARENTS","classToken","extendsToken","superClass","ConditionalExpression","isTokenOnSameLine","consequent","questionMarkToken","colonToken","alternate","firstConsequentToken","lastConsequentToken","firstAlternateToken","ExportNamedDeclaration","declaration","specifiers","skip","source","ForStatement","forOpeningParen","init","IfStatement","some","specifier","isOpeningBraceToken","sourceToken","semiToken","ImportExpression","object","firstNonObjectToken","property","isNotClosingParenToken","secondNonObjectToken","objectParenCount","firstObjectToken","lastObjectToken","firstPropertyToken","computed","offsetBase","NewExpression","Property","shorthand","method","kind","colon","isColonToken","SwitchStatement","discriminant","cases","isCommentToken","caseKeyword","tokenAfterCurrentCase","TemplateLiteral","expressions","expression","previousQuasi","quasis","nextQuasi","tokenToAlignFrom","VariableDeclaration","variableIndent","prototype","hasOwnProperty","call","declarations","equalOperator","id","equalsToken","name","JSXElement","closingElement","children","openingElement","JSXOpeningElement","closingToken","selfClosing","attributes","JSXClosingElement","JSXFragment","firstOpeningToken","openingFragment","firstClosingToken","closingFragment","JSXOpeningFragment","JSXClosingFragment","slashToken","tokenToMatch","JSXExpressionContainer","JSXSpreadAttribute","listenerCallQueue","offsetListeners","mapValues","listener","addToIgnoredNodes","ignoredNodeListeners","listeners","ignoredSelector","getAllComments","comment","nodeInfo","ast","precedingTokens","comments","commentMap","tokenOrCommentBefore","lines","lineIndex","lineNumber","tokenBefore","tokenAfter","mayAlignWithBefore","mayAlignWithAfter"],"mappings":"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","sourcesContent":["/**\n * @fileoverview This rule sets a specific indentation style and width for your code\n *\n * @author Teddy Katz\n * @author Vitaly Puzrin\n * @author Gyandeep Singh\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst lodash = require(\"lodash\");\nconst astUtils = require(\"./utils/ast-utils\");\nconst createTree = require(\"functional-red-black-tree\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst KNOWN_NODES = new Set([\n    \"AssignmentExpression\",\n    \"AssignmentPattern\",\n    \"ArrayExpression\",\n    \"ArrayPattern\",\n    \"ArrowFunctionExpression\",\n    \"AwaitExpression\",\n    \"BlockStatement\",\n    \"BinaryExpression\",\n    \"BreakStatement\",\n    \"CallExpression\",\n    \"CatchClause\",\n    \"ClassBody\",\n    \"ClassDeclaration\",\n    \"ClassExpression\",\n    \"ConditionalExpression\",\n    \"ContinueStatement\",\n    \"DoWhileStatement\",\n    \"DebuggerStatement\",\n    \"EmptyStatement\",\n    \"ExperimentalRestProperty\",\n    \"ExperimentalSpreadProperty\",\n    \"ExpressionStatement\",\n    \"ForStatement\",\n    \"ForInStatement\",\n    \"ForOfStatement\",\n    \"FunctionDeclaration\",\n    \"FunctionExpression\",\n    \"Identifier\",\n    \"IfStatement\",\n    \"Literal\",\n    \"LabeledStatement\",\n    \"LogicalExpression\",\n    \"MemberExpression\",\n    \"MetaProperty\",\n    \"MethodDefinition\",\n    \"NewExpression\",\n    \"ObjectExpression\",\n    \"ObjectPattern\",\n    \"Program\",\n    \"Property\",\n    \"RestElement\",\n    \"ReturnStatement\",\n    \"SequenceExpression\",\n    \"SpreadElement\",\n    \"Super\",\n    \"SwitchCase\",\n    \"SwitchStatement\",\n    \"TaggedTemplateExpression\",\n    \"TemplateElement\",\n    \"TemplateLiteral\",\n    \"ThisExpression\",\n    \"ThrowStatement\",\n    \"TryStatement\",\n    \"UnaryExpression\",\n    \"UpdateExpression\",\n    \"VariableDeclaration\",\n    \"VariableDeclarator\",\n    \"WhileStatement\",\n    \"WithStatement\",\n    \"YieldExpression\",\n    \"JSXFragment\",\n    \"JSXOpeningFragment\",\n    \"JSXClosingFragment\",\n    \"JSXIdentifier\",\n    \"JSXNamespacedName\",\n    \"JSXMemberExpression\",\n    \"JSXEmptyExpression\",\n    \"JSXExpressionContainer\",\n    \"JSXElement\",\n    \"JSXClosingElement\",\n    \"JSXOpeningElement\",\n    \"JSXAttribute\",\n    \"JSXSpreadAttribute\",\n    \"JSXText\",\n    \"ExportDefaultDeclaration\",\n    \"ExportNamedDeclaration\",\n    \"ExportAllDeclaration\",\n    \"ExportSpecifier\",\n    \"ImportDeclaration\",\n    \"ImportSpecifier\",\n    \"ImportDefaultSpecifier\",\n    \"ImportNamespaceSpecifier\",\n    \"ImportExpression\"\n]);\n\n/*\n * General rule strategy:\n * 1. An OffsetStorage instance stores a map of desired offsets, where each token has a specified offset from another\n *    specified token or to the first column.\n * 2. As the AST is traversed, modify the desired offsets of tokens accordingly. For example, when entering a\n *    BlockStatement, offset all of the tokens in the BlockStatement by 1 indent level from the opening curly\n *    brace of the BlockStatement.\n * 3. After traversing the AST, calculate the expected indentation levels of every token according to the\n *    OffsetStorage container.\n * 4. For each line, compare the expected indentation of the first token to the actual indentation in the file,\n *    and report the token if the two values are not equal.\n */\n\n\n/**\n * A mutable balanced binary search tree that stores (key, value) pairs. The keys are numeric, and must be unique.\n * This is intended to be a generic wrapper around a balanced binary search tree library, so that the underlying implementation\n * can easily be swapped out.\n */\nclass BinarySearchTree {\n\n    /**\n     * Creates an empty tree\n     */\n    constructor() {\n        this._rbTree = createTree();\n    }\n\n    /**\n     * Inserts an entry into the tree.\n     * @param {number} key The entry's key\n     * @param {*} value The entry's value\n     * @returns {void}\n     */\n    insert(key, value) {\n        const iterator = this._rbTree.find(key);\n\n        if (iterator.valid) {\n            this._rbTree = iterator.update(value);\n        } else {\n            this._rbTree = this._rbTree.insert(key, value);\n        }\n    }\n\n    /**\n     * Finds the entry with the largest key less than or equal to the provided key\n     * @param {number} key The provided key\n     * @returns {{key: number, value: *}|null} The found entry, or null if no such entry exists.\n     */\n    findLe(key) {\n        const iterator = this._rbTree.le(key);\n\n        return iterator && { key: iterator.key, value: iterator.value };\n    }\n\n    /**\n     * Deletes all of the keys in the interval [start, end)\n     * @param {number} start The start of the range\n     * @param {number} end The end of the range\n     * @returns {void}\n     */\n    deleteRange(start, end) {\n\n        // Exit without traversing the tree if the range has zero size.\n        if (start === end) {\n            return;\n        }\n        const iterator = this._rbTree.ge(start);\n\n        while (iterator.valid && iterator.key < end) {\n            this._rbTree = this._rbTree.remove(iterator.key);\n            iterator.next();\n        }\n    }\n}\n\n/**\n * A helper class to get token-based info related to indentation\n */\nclass TokenInfo {\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @param {SourceCode} sourceCode A SourceCode object\n     */\n    constructor(sourceCode) {\n        this.sourceCode = sourceCode;\n        this.firstTokensByLineNumber = sourceCode.tokensAndComments.reduce((map, token) => {\n            if (!map.has(token.loc.start.line)) {\n                map.set(token.loc.start.line, token);\n            }\n            if (!map.has(token.loc.end.line) && sourceCode.text.slice(token.range[1] - token.loc.end.column, token.range[1]).trim()) {\n                map.set(token.loc.end.line, token);\n            }\n            return map;\n        }, new Map());\n    }\n\n    /**\n     * Gets the first token on a given token's line\n     * @param {Token|ASTNode} token a node or token\n     * @returns {Token} The first token on the given line\n     */\n    getFirstTokenOfLine(token) {\n        return this.firstTokensByLineNumber.get(token.loc.start.line);\n    }\n\n    /**\n     * Determines whether a token is the first token in its line\n     * @param {Token} token The token\n     * @returns {boolean} `true` if the token is the first on its line\n     */\n    isFirstTokenOfLine(token) {\n        return this.getFirstTokenOfLine(token) === token;\n    }\n\n    /**\n     * Get the actual indent of a token\n     * @param {Token} token Token to examine. This should be the first token on its line.\n     * @returns {string} The indentation characters that precede the token\n     */\n    getTokenIndent(token) {\n        return this.sourceCode.text.slice(token.range[0] - token.loc.start.column, token.range[0]);\n    }\n}\n\n/**\n * A class to store information on desired offsets of tokens from each other\n */\nclass OffsetStorage {\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @param {TokenInfo} tokenInfo a TokenInfo instance\n     * @param {number} indentSize The desired size of each indentation level\n     * @param {string} indentType The indentation character\n     */\n    constructor(tokenInfo, indentSize, indentType) {\n        this._tokenInfo = tokenInfo;\n        this._indentSize = indentSize;\n        this._indentType = indentType;\n\n        this._tree = new BinarySearchTree();\n        this._tree.insert(0, { offset: 0, from: null, force: false });\n\n        this._lockedFirstTokens = new WeakMap();\n        this._desiredIndentCache = new WeakMap();\n        this._ignoredTokens = new WeakSet();\n    }\n\n    _getOffsetDescriptor(token) {\n        return this._tree.findLe(token.range[0]).value;\n    }\n\n    /**\n     * Sets the offset column of token B to match the offset column of token A.\n     * **WARNING**: This matches a *column*, even if baseToken is not the first token on its line. In\n     * most cases, `setDesiredOffset` should be used instead.\n     * @param {Token} baseToken The first token\n     * @param {Token} offsetToken The second token, whose offset should be matched to the first token\n     * @returns {void}\n     */\n    matchOffsetOf(baseToken, offsetToken) {\n\n        /*\n         * lockedFirstTokens is a map from a token whose indentation is controlled by the \"first\" option to\n         * the token that it depends on. For example, with the `ArrayExpression: first` option, the first\n         * token of each element in the array after the first will be mapped to the first token of the first\n         * element. The desired indentation of each of these tokens is computed based on the desired indentation\n         * of the \"first\" element, rather than through the normal offset mechanism.\n         */\n        this._lockedFirstTokens.set(offsetToken, baseToken);\n    }\n\n    /**\n     * Sets the desired offset of a token.\n     *\n     * This uses a line-based offset collapsing behavior to handle tokens on the same line.\n     * For example, consider the following two cases:\n     *\n     * (\n     *     [\n     *         bar\n     *     ]\n     * )\n     *\n     * ([\n     *     bar\n     * ])\n     *\n     * Based on the first case, it's clear that the `bar` token needs to have an offset of 1 indent level (4 spaces) from\n     * the `[` token, and the `[` token has to have an offset of 1 indent level from the `(` token. Since the `(` token is\n     * the first on its line (with an indent of 0 spaces), the `bar` token needs to be offset by 2 indent levels (8 spaces)\n     * from the start of its line.\n     *\n     * However, in the second case `bar` should only be indented by 4 spaces. This is because the offset of 1 indent level\n     * between the `(` and the `[` tokens gets \"collapsed\" because the two tokens are on the same line. As a result, the\n     * `(` token is mapped to the `[` token with an offset of 0, and the rule correctly decides that `bar` should be indented\n     * by 1 indent level from the start of the line.\n     *\n     * This is useful because rule listeners can usually just call `setDesiredOffset` for all the tokens in the node,\n     * without needing to check which lines those tokens are on.\n     *\n     * Note that since collapsing only occurs when two tokens are on the same line, there are a few cases where non-intuitive\n     * behavior can occur. For example, consider the following cases:\n     *\n     * foo(\n     * ).\n     *     bar(\n     *         baz\n     *     )\n     *\n     * foo(\n     * ).bar(\n     *     baz\n     * )\n     *\n     * Based on the first example, it would seem that `bar` should be offset by 1 indent level from `foo`, and `baz`\n     * should be offset by 1 indent level from `bar`. However, this is not correct, because it would result in `baz`\n     * being indented by 2 indent levels in the second case (since `foo`, `bar`, and `baz` are all on separate lines, no\n     * collapsing would occur).\n     *\n     * Instead, the correct way would be to offset `baz` by 1 level from `bar`, offset `bar` by 1 level from the `)`, and\n     * offset the `)` by 0 levels from `foo`. This ensures that the offset between `bar` and the `)` are correctly collapsed\n     * in the second case.\n     * @param {Token} token The token\n     * @param {Token} fromToken The token that `token` should be offset from\n     * @param {number} offset The desired indent level\n     * @returns {void}\n     */\n    setDesiredOffset(token, fromToken, offset) {\n        return this.setDesiredOffsets(token.range, fromToken, offset);\n    }\n\n    /**\n     * Sets the desired offset of all tokens in a range\n     * It's common for node listeners in this file to need to apply the same offset to a large, contiguous range of tokens.\n     * Moreover, the offset of any given token is usually updated multiple times (roughly once for each node that contains\n     * it). This means that the offset of each token is updated O(AST depth) times.\n     * It would not be performant to store and update the offsets for each token independently, because the rule would end\n     * up having a time complexity of O(number of tokens * AST depth), which is quite slow for large files.\n     *\n     * Instead, the offset tree is represented as a collection of contiguous offset ranges in a file. For example, the following\n     * list could represent the state of the offset tree at a given point:\n     *\n     * * Tokens starting in the interval [0, 15) are aligned with the beginning of the file\n     * * Tokens starting in the interval [15, 30) are offset by 1 indent level from the `bar` token\n     * * Tokens starting in the interval [30, 43) are offset by 1 indent level from the `foo` token\n     * * Tokens starting in the interval [43, 820) are offset by 2 indent levels from the `bar` token\n     * * Tokens starting in the interval [820, ∞) are offset by 1 indent level from the `baz` token\n     *\n     * The `setDesiredOffsets` methods inserts ranges like the ones above. The third line above would be inserted by using:\n     * `setDesiredOffsets([30, 43], fooToken, 1);`\n     * @param {[number, number]} range A [start, end] pair. All tokens with range[0] <= token.start < range[1] will have the offset applied.\n     * @param {Token} fromToken The token that this is offset from\n     * @param {number} offset The desired indent level\n     * @param {boolean} force `true` if this offset should not use the normal collapsing behavior. This should almost always be false.\n     * @returns {void}\n     */\n    setDesiredOffsets(range, fromToken, offset, force) {\n\n        /*\n         * Offset ranges are stored as a collection of nodes, where each node maps a numeric key to an offset\n         * descriptor. The tree for the example above would have the following nodes:\n         *\n         * * key: 0, value: { offset: 0, from: null }\n         * * key: 15, value: { offset: 1, from: barToken }\n         * * key: 30, value: { offset: 1, from: fooToken }\n         * * key: 43, value: { offset: 2, from: barToken }\n         * * key: 820, value: { offset: 1, from: bazToken }\n         *\n         * To find the offset descriptor for any given token, one needs to find the node with the largest key\n         * which is <= token.start. To make this operation fast, the nodes are stored in a balanced binary\n         * search tree indexed by key.\n         */\n\n        const descriptorToInsert = { offset, from: fromToken, force };\n\n        const descriptorAfterRange = this._tree.findLe(range[1]).value;\n\n        const fromTokenIsInRange = fromToken && fromToken.range[0] >= range[0] && fromToken.range[1] <= range[1];\n        const fromTokenDescriptor = fromTokenIsInRange && this._getOffsetDescriptor(fromToken);\n\n        // First, remove any existing nodes in the range from the tree.\n        this._tree.deleteRange(range[0] + 1, range[1]);\n\n        // Insert a new node into the tree for this range\n        this._tree.insert(range[0], descriptorToInsert);\n\n        /*\n         * To avoid circular offset dependencies, keep the `fromToken` token mapped to whatever it was mapped to previously,\n         * even if it's in the current range.\n         */\n        if (fromTokenIsInRange) {\n            this._tree.insert(fromToken.range[0], fromTokenDescriptor);\n            this._tree.insert(fromToken.range[1], descriptorToInsert);\n        }\n\n        /*\n         * To avoid modifying the offset of tokens after the range, insert another node to keep the offset of the following\n         * tokens the same as it was before.\n         */\n        this._tree.insert(range[1], descriptorAfterRange);\n    }\n\n    /**\n     * Gets the desired indent of a token\n     * @param {Token} token The token\n     * @returns {string} The desired indent of the token\n     */\n    getDesiredIndent(token) {\n        if (!this._desiredIndentCache.has(token)) {\n\n            if (this._ignoredTokens.has(token)) {\n\n                /*\n                 * If the token is ignored, use the actual indent of the token as the desired indent.\n                 * This ensures that no errors are reported for this token.\n                 */\n                this._desiredIndentCache.set(\n                    token,\n                    this._tokenInfo.getTokenIndent(token)\n                );\n            } else if (this._lockedFirstTokens.has(token)) {\n                const firstToken = this._lockedFirstTokens.get(token);\n\n                this._desiredIndentCache.set(\n                    token,\n\n                    // (indentation for the first element's line)\n                    this.getDesiredIndent(this._tokenInfo.getFirstTokenOfLine(firstToken)) +\n\n                        // (space between the start of the first element's line and the first element)\n                        this._indentType.repeat(firstToken.loc.start.column - this._tokenInfo.getFirstTokenOfLine(firstToken).loc.start.column)\n                );\n            } else {\n                const offsetInfo = this._getOffsetDescriptor(token);\n                const offset = (\n                    offsetInfo.from &&\n                    offsetInfo.from.loc.start.line === token.loc.start.line &&\n                    !/^\\s*?\\n/u.test(token.value) &&\n                    !offsetInfo.force\n                ) ? 0 : offsetInfo.offset * this._indentSize;\n\n                this._desiredIndentCache.set(\n                    token,\n                    (offsetInfo.from ? this.getDesiredIndent(offsetInfo.from) : \"\") + this._indentType.repeat(offset)\n                );\n            }\n        }\n        return this._desiredIndentCache.get(token);\n    }\n\n    /**\n     * Ignores a token, preventing it from being reported.\n     * @param {Token} token The token\n     * @returns {void}\n     */\n    ignoreToken(token) {\n        if (this._tokenInfo.isFirstTokenOfLine(token)) {\n            this._ignoredTokens.add(token);\n        }\n    }\n\n    /**\n     * Gets the first token that the given token's indentation is dependent on\n     * @param {Token} token The token\n     * @returns {Token} The token that the given token depends on, or `null` if the given token is at the top level\n     */\n    getFirstDependency(token) {\n        return this._getOffsetDescriptor(token).from;\n    }\n}\n\nconst ELEMENT_LIST_SCHEMA = {\n    oneOf: [\n        {\n            type: \"integer\",\n            minimum: 0\n        },\n        {\n            enum: [\"first\", \"off\"]\n        }\n    ]\n};\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent indentation\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/indent\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        enum: [\"tab\"]\n                    },\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    }\n                ]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    SwitchCase: {\n                        type: \"integer\",\n                        minimum: 0,\n                        default: 0\n                    },\n                    VariableDeclarator: {\n                        oneOf: [\n                            ELEMENT_LIST_SCHEMA,\n                            {\n                                type: \"object\",\n                                properties: {\n                                    var: ELEMENT_LIST_SCHEMA,\n                                    let: ELEMENT_LIST_SCHEMA,\n                                    const: ELEMENT_LIST_SCHEMA\n                                },\n                                additionalProperties: false\n                            }\n                        ]\n                    },\n                    outerIIFEBody: {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    MemberExpression: {\n                        oneOf: [\n                            {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            {\n                                enum: [\"off\"]\n                            }\n                        ]\n                    },\n                    FunctionDeclaration: {\n                        type: \"object\",\n                        properties: {\n                            parameters: ELEMENT_LIST_SCHEMA,\n                            body: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    },\n                    FunctionExpression: {\n                        type: \"object\",\n                        properties: {\n                            parameters: ELEMENT_LIST_SCHEMA,\n                            body: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    },\n                    CallExpression: {\n                        type: \"object\",\n                        properties: {\n                            arguments: ELEMENT_LIST_SCHEMA\n                        },\n                        additionalProperties: false\n                    },\n                    ArrayExpression: ELEMENT_LIST_SCHEMA,\n                    ObjectExpression: ELEMENT_LIST_SCHEMA,\n                    ImportDeclaration: ELEMENT_LIST_SCHEMA,\n                    flatTernaryExpressions: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    ignoredNodes: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\",\n                            not: {\n                                pattern: \":exit$\"\n                            }\n                        }\n                    },\n                    ignoreComments: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            wrongIndentation: \"Expected indentation of {{expected}} but found {{actual}}.\"\n        }\n    },\n\n    create(context) {\n        const DEFAULT_VARIABLE_INDENT = 1;\n        const DEFAULT_PARAMETER_INDENT = 1;\n        const DEFAULT_FUNCTION_BODY_INDENT = 1;\n\n        let indentType = \"space\";\n        let indentSize = 4;\n        const options = {\n            SwitchCase: 0,\n            VariableDeclarator: {\n                var: DEFAULT_VARIABLE_INDENT,\n                let: DEFAULT_VARIABLE_INDENT,\n                const: DEFAULT_VARIABLE_INDENT\n            },\n            outerIIFEBody: 1,\n            FunctionDeclaration: {\n                parameters: DEFAULT_PARAMETER_INDENT,\n                body: DEFAULT_FUNCTION_BODY_INDENT\n            },\n            FunctionExpression: {\n                parameters: DEFAULT_PARAMETER_INDENT,\n                body: DEFAULT_FUNCTION_BODY_INDENT\n            },\n            CallExpression: {\n                arguments: DEFAULT_PARAMETER_INDENT\n            },\n            MemberExpression: 1,\n            ArrayExpression: 1,\n            ObjectExpression: 1,\n            ImportDeclaration: 1,\n            flatTernaryExpressions: false,\n            ignoredNodes: [],\n            ignoreComments: false\n        };\n\n        if (context.options.length) {\n            if (context.options[0] === \"tab\") {\n                indentSize = 1;\n                indentType = \"tab\";\n            } else {\n                indentSize = context.options[0];\n                indentType = \"space\";\n            }\n\n            if (context.options[1]) {\n                Object.assign(options, context.options[1]);\n\n                if (typeof options.VariableDeclarator === \"number\" || options.VariableDeclarator === \"first\") {\n                    options.VariableDeclarator = {\n                        var: options.VariableDeclarator,\n                        let: options.VariableDeclarator,\n                        const: options.VariableDeclarator\n                    };\n                }\n            }\n        }\n\n        const sourceCode = context.getSourceCode();\n        const tokenInfo = new TokenInfo(sourceCode);\n        const offsets = new OffsetStorage(tokenInfo, indentSize, indentType === \"space\" ? \" \" : \"\\t\");\n        const parameterParens = new WeakSet();\n\n        /**\n         * Creates an error message for a line, given the expected/actual indentation.\n         * @param {int} expectedAmount The expected amount of indentation characters for this line\n         * @param {int} actualSpaces The actual number of indentation spaces that were found on this line\n         * @param {int} actualTabs The actual number of indentation tabs that were found on this line\n         * @returns {string} An error message for this line\n         */\n        function createErrorMessageData(expectedAmount, actualSpaces, actualTabs) {\n            const expectedStatement = `${expectedAmount} ${indentType}${expectedAmount === 1 ? \"\" : \"s\"}`; // e.g. \"2 tabs\"\n            const foundSpacesWord = `space${actualSpaces === 1 ? \"\" : \"s\"}`; // e.g. \"space\"\n            const foundTabsWord = `tab${actualTabs === 1 ? \"\" : \"s\"}`; // e.g. \"tabs\"\n            let foundStatement;\n\n            if (actualSpaces > 0) {\n\n                /*\n                 * Abbreviate the message if the expected indentation is also spaces.\n                 * e.g. 'Expected 4 spaces but found 2' rather than 'Expected 4 spaces but found 2 spaces'\n                 */\n                foundStatement = indentType === \"space\" ? actualSpaces : `${actualSpaces} ${foundSpacesWord}`;\n            } else if (actualTabs > 0) {\n                foundStatement = indentType === \"tab\" ? actualTabs : `${actualTabs} ${foundTabsWord}`;\n            } else {\n                foundStatement = \"0\";\n            }\n            return {\n                expected: expectedStatement,\n                actual: foundStatement\n            };\n        }\n\n        /**\n         * Reports a given indent violation\n         * @param {Token} token Token violating the indent rule\n         * @param {string} neededIndent Expected indentation string\n         * @returns {void}\n         */\n        function report(token, neededIndent) {\n            const actualIndent = Array.from(tokenInfo.getTokenIndent(token));\n            const numSpaces = actualIndent.filter(char => char === \" \").length;\n            const numTabs = actualIndent.filter(char => char === \"\\t\").length;\n\n            context.report({\n                node: token,\n                messageId: \"wrongIndentation\",\n                data: createErrorMessageData(neededIndent.length, numSpaces, numTabs),\n                loc: {\n                    start: { line: token.loc.start.line, column: 0 },\n                    end: { line: token.loc.start.line, column: token.loc.start.column }\n                },\n                fix(fixer) {\n                    const range = [token.range[0] - token.loc.start.column, token.range[0]];\n                    const newText = neededIndent;\n\n                    return fixer.replaceTextRange(range, newText);\n                }\n            });\n        }\n\n        /**\n         * Checks if a token's indentation is correct\n         * @param {Token} token Token to examine\n         * @param {string} desiredIndent Desired indentation of the string\n         * @returns {boolean} `true` if the token's indentation is correct\n         */\n        function validateTokenIndent(token, desiredIndent) {\n            const indentation = tokenInfo.getTokenIndent(token);\n\n            return indentation === desiredIndent ||\n\n                // To avoid conflicts with no-mixed-spaces-and-tabs, don't report mixed spaces and tabs.\n                indentation.includes(\" \") && indentation.includes(\"\\t\");\n        }\n\n        /**\n         * Check to see if the node is a file level IIFE\n         * @param {ASTNode} node The function node to check.\n         * @returns {boolean} True if the node is the outer IIFE\n         */\n        function isOuterIIFE(node) {\n\n            /*\n             * Verify that the node is an IIFE\n             */\n            if (!node.parent || node.parent.type !== \"CallExpression\" || node.parent.callee !== node) {\n                return false;\n            }\n\n            /*\n             * Navigate legal ancestors to determine whether this IIFE is outer.\n             * A \"legal ancestor\" is an expression or statement that causes the function to get executed immediately.\n             * For example, `!(function(){})()` is an outer IIFE even though it is preceded by a ! operator.\n             */\n            let statement = node.parent && node.parent.parent;\n\n            while (\n                statement.type === \"UnaryExpression\" && [\"!\", \"~\", \"+\", \"-\"].indexOf(statement.operator) > -1 ||\n                statement.type === \"AssignmentExpression\" ||\n                statement.type === \"LogicalExpression\" ||\n                statement.type === \"SequenceExpression\" ||\n                statement.type === \"VariableDeclarator\"\n            ) {\n                statement = statement.parent;\n            }\n\n            return (statement.type === \"ExpressionStatement\" || statement.type === \"VariableDeclaration\") && statement.parent.type === \"Program\";\n        }\n\n        /**\n         * Counts the number of linebreaks that follow the last non-whitespace character in a string\n         * @param {string} string The string to check\n         * @returns {number} The number of JavaScript linebreaks that follow the last non-whitespace character,\n         * or the total number of linebreaks if the string is all whitespace.\n         */\n        function countTrailingLinebreaks(string) {\n            const trailingWhitespace = string.match(/\\s*$/u)[0];\n            const linebreakMatches = trailingWhitespace.match(astUtils.createGlobalLinebreakMatcher());\n\n            return linebreakMatches === null ? 0 : linebreakMatches.length;\n        }\n\n        /**\n         * Check indentation for lists of elements (arrays, objects, function params)\n         * @param {ASTNode[]} elements List of elements that should be offset\n         * @param {Token} startToken The start token of the list that element should be aligned against, e.g. '['\n         * @param {Token} endToken The end token of the list, e.g. ']'\n         * @param {number|string} offset The amount that the elements should be offset\n         * @returns {void}\n         */\n        function addElementListIndent(elements, startToken, endToken, offset) {\n\n            /**\n             * Gets the first token of a given element, including surrounding parentheses.\n             * @param {ASTNode} element A node in the `elements` list\n             * @returns {Token} The first token of this element\n             */\n            function getFirstToken(element) {\n                let token = sourceCode.getTokenBefore(element);\n\n                while (astUtils.isOpeningParenToken(token) && token !== startToken) {\n                    token = sourceCode.getTokenBefore(token);\n                }\n                return sourceCode.getTokenAfter(token);\n            }\n\n            // Run through all the tokens in the list, and offset them by one indent level (mainly for comments, other things will end up overridden)\n            offsets.setDesiredOffsets(\n                [startToken.range[1], endToken.range[0]],\n                startToken,\n                typeof offset === \"number\" ? offset : 1\n            );\n            offsets.setDesiredOffset(endToken, startToken, 0);\n\n            // If the preference is \"first\" but there is no first element (e.g. sparse arrays w/ empty first slot), fall back to 1 level.\n            if (offset === \"first\" && elements.length && !elements[0]) {\n                return;\n            }\n            elements.forEach((element, index) => {\n                if (!element) {\n\n                    // Skip holes in arrays\n                    return;\n                }\n                if (offset === \"off\") {\n\n                    // Ignore the first token of every element if the \"off\" option is used\n                    offsets.ignoreToken(getFirstToken(element));\n                }\n\n                // Offset the following elements correctly relative to the first element\n                if (index === 0) {\n                    return;\n                }\n                if (offset === \"first\" && tokenInfo.isFirstTokenOfLine(getFirstToken(element))) {\n                    offsets.matchOffsetOf(getFirstToken(elements[0]), getFirstToken(element));\n                } else {\n                    const previousElement = elements[index - 1];\n                    const firstTokenOfPreviousElement = previousElement && getFirstToken(previousElement);\n                    const previousElementLastToken = previousElement && sourceCode.getLastToken(previousElement);\n\n                    if (\n                        previousElement &&\n                        previousElementLastToken.loc.end.line - countTrailingLinebreaks(previousElementLastToken.value) > startToken.loc.end.line\n                    ) {\n                        offsets.setDesiredOffsets(\n                            [previousElement.range[1], element.range[1]],\n                            firstTokenOfPreviousElement,\n                            0\n                        );\n                    }\n                }\n            });\n        }\n\n        /**\n         * Check and decide whether to check for indentation for blockless nodes\n         * Scenarios are for or while statements without braces around them\n         * @param {ASTNode} node node to examine\n         * @returns {void}\n         */\n        function addBlocklessNodeIndent(node) {\n            if (node.type !== \"BlockStatement\") {\n                const lastParentToken = sourceCode.getTokenBefore(node, astUtils.isNotOpeningParenToken);\n\n                let firstBodyToken = sourceCode.getFirstToken(node);\n                let lastBodyToken = sourceCode.getLastToken(node);\n\n                while (\n                    astUtils.isOpeningParenToken(sourceCode.getTokenBefore(firstBodyToken)) &&\n                    astUtils.isClosingParenToken(sourceCode.getTokenAfter(lastBodyToken))\n                ) {\n                    firstBodyToken = sourceCode.getTokenBefore(firstBodyToken);\n                    lastBodyToken = sourceCode.getTokenAfter(lastBodyToken);\n                }\n\n                offsets.setDesiredOffsets([firstBodyToken.range[0], lastBodyToken.range[1]], lastParentToken, 1);\n\n                /*\n                 * For blockless nodes with semicolon-first style, don't indent the semicolon.\n                 * e.g.\n                 * if (foo) bar()\n                 * ; [1, 2, 3].map(foo)\n                 */\n                const lastToken = sourceCode.getLastToken(node);\n\n                if (node.type !== \"EmptyStatement\" && astUtils.isSemicolonToken(lastToken)) {\n                    offsets.setDesiredOffset(lastToken, lastParentToken, 0);\n                }\n            }\n        }\n\n        /**\n         * Checks the indentation for nodes that are like function calls (`CallExpression` and `NewExpression`)\n         * @param {ASTNode} node A CallExpression or NewExpression node\n         * @returns {void}\n         */\n        function addFunctionCallIndent(node) {\n            let openingParen;\n\n            if (node.arguments.length) {\n                openingParen = sourceCode.getFirstTokenBetween(node.callee, node.arguments[0], astUtils.isOpeningParenToken);\n            } else {\n                openingParen = sourceCode.getLastToken(node, 1);\n            }\n            const closingParen = sourceCode.getLastToken(node);\n\n            parameterParens.add(openingParen);\n            parameterParens.add(closingParen);\n            offsets.setDesiredOffset(openingParen, sourceCode.getTokenBefore(openingParen), 0);\n\n            addElementListIndent(node.arguments, openingParen, closingParen, options.CallExpression.arguments);\n        }\n\n        /**\n         * Checks the indentation of parenthesized values, given a list of tokens in a program\n         * @param {Token[]} tokens A list of tokens\n         * @returns {void}\n         */\n        function addParensIndent(tokens) {\n            const parenStack = [];\n            const parenPairs = [];\n\n            tokens.forEach(nextToken => {\n\n                // Accumulate a list of parenthesis pairs\n                if (astUtils.isOpeningParenToken(nextToken)) {\n                    parenStack.push(nextToken);\n                } else if (astUtils.isClosingParenToken(nextToken)) {\n                    parenPairs.unshift({ left: parenStack.pop(), right: nextToken });\n                }\n            });\n\n            parenPairs.forEach(pair => {\n                const leftParen = pair.left;\n                const rightParen = pair.right;\n\n                // We only want to handle parens around expressions, so exclude parentheses that are in function parameters and function call arguments.\n                if (!parameterParens.has(leftParen) && !parameterParens.has(rightParen)) {\n                    const parenthesizedTokens = new Set(sourceCode.getTokensBetween(leftParen, rightParen));\n\n                    parenthesizedTokens.forEach(token => {\n                        if (!parenthesizedTokens.has(offsets.getFirstDependency(token))) {\n                            offsets.setDesiredOffset(token, leftParen, 1);\n                        }\n                    });\n                }\n\n                offsets.setDesiredOffset(rightParen, leftParen, 0);\n            });\n        }\n\n        /**\n         * Ignore all tokens within an unknown node whose offset do not depend\n         * on another token's offset within the unknown node\n         * @param {ASTNode} node Unknown Node\n         * @returns {void}\n         */\n        function ignoreNode(node) {\n            const unknownNodeTokens = new Set(sourceCode.getTokens(node, { includeComments: true }));\n\n            unknownNodeTokens.forEach(token => {\n                if (!unknownNodeTokens.has(offsets.getFirstDependency(token))) {\n                    const firstTokenOfLine = tokenInfo.getFirstTokenOfLine(token);\n\n                    if (token === firstTokenOfLine) {\n                        offsets.ignoreToken(token);\n                    } else {\n                        offsets.setDesiredOffset(token, firstTokenOfLine, 0);\n                    }\n                }\n            });\n        }\n\n        /**\n         * Check whether the given token is on the first line of a statement.\n         * @param {Token} token The token to check.\n         * @param {ASTNode} leafNode The expression node that the token belongs directly.\n         * @returns {boolean} `true` if the token is on the first line of a statement.\n         */\n        function isOnFirstLineOfStatement(token, leafNode) {\n            let node = leafNode;\n\n            while (node.parent && !node.parent.type.endsWith(\"Statement\") && !node.parent.type.endsWith(\"Declaration\")) {\n                node = node.parent;\n            }\n            node = node.parent;\n\n            return !node || node.loc.start.line === token.loc.start.line;\n        }\n\n        /**\n         * Check whether there are any blank (whitespace-only) lines between\n         * two tokens on separate lines.\n         * @param {Token} firstToken The first token.\n         * @param {Token} secondToken The second token.\n         * @returns {boolean} `true` if the tokens are on separate lines and\n         *   there exists a blank line between them, `false` otherwise.\n         */\n        function hasBlankLinesBetween(firstToken, secondToken) {\n            const firstTokenLine = firstToken.loc.end.line;\n            const secondTokenLine = secondToken.loc.start.line;\n\n            if (firstTokenLine === secondTokenLine || firstTokenLine === secondTokenLine - 1) {\n                return false;\n            }\n\n            for (let line = firstTokenLine + 1; line < secondTokenLine; ++line) {\n                if (!tokenInfo.firstTokensByLineNumber.has(line)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        const ignoredNodeFirstTokens = new Set();\n\n        const baseOffsetListeners = {\n            \"ArrayExpression, ArrayPattern\"(node) {\n                const openingBracket = sourceCode.getFirstToken(node);\n                const closingBracket = sourceCode.getTokenAfter(lodash.findLast(node.elements) || openingBracket, astUtils.isClosingBracketToken);\n\n                addElementListIndent(node.elements, openingBracket, closingBracket, options.ArrayExpression);\n            },\n\n            \"ObjectExpression, ObjectPattern\"(node) {\n                const openingCurly = sourceCode.getFirstToken(node);\n                const closingCurly = sourceCode.getTokenAfter(\n                    node.properties.length ? node.properties[node.properties.length - 1] : openingCurly,\n                    astUtils.isClosingBraceToken\n                );\n\n                addElementListIndent(node.properties, openingCurly, closingCurly, options.ObjectExpression);\n            },\n\n            ArrowFunctionExpression(node) {\n                const firstToken = sourceCode.getFirstToken(node);\n\n                if (astUtils.isOpeningParenToken(firstToken)) {\n                    const openingParen = firstToken;\n                    const closingParen = sourceCode.getTokenBefore(node.body, astUtils.isClosingParenToken);\n\n                    parameterParens.add(openingParen);\n                    parameterParens.add(closingParen);\n                    addElementListIndent(node.params, openingParen, closingParen, options.FunctionExpression.parameters);\n                }\n                addBlocklessNodeIndent(node.body);\n            },\n\n            AssignmentExpression(node) {\n                const operator = sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);\n\n                offsets.setDesiredOffsets([operator.range[0], node.range[1]], sourceCode.getLastToken(node.left), 1);\n                offsets.ignoreToken(operator);\n                offsets.ignoreToken(sourceCode.getTokenAfter(operator));\n            },\n\n            \"BinaryExpression, LogicalExpression\"(node) {\n                const operator = sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);\n\n                /*\n                 * For backwards compatibility, don't check BinaryExpression indents, e.g.\n                 * var foo = bar &&\n                 *                   baz;\n                 */\n\n                const tokenAfterOperator = sourceCode.getTokenAfter(operator);\n\n                offsets.ignoreToken(operator);\n                offsets.ignoreToken(tokenAfterOperator);\n                offsets.setDesiredOffset(tokenAfterOperator, operator, 0);\n            },\n\n            \"BlockStatement, ClassBody\"(node) {\n\n                let blockIndentLevel;\n\n                if (node.parent && isOuterIIFE(node.parent)) {\n                    blockIndentLevel = options.outerIIFEBody;\n                } else if (node.parent && (node.parent.type === \"FunctionExpression\" || node.parent.type === \"ArrowFunctionExpression\")) {\n                    blockIndentLevel = options.FunctionExpression.body;\n                } else if (node.parent && node.parent.type === \"FunctionDeclaration\") {\n                    blockIndentLevel = options.FunctionDeclaration.body;\n                } else {\n                    blockIndentLevel = 1;\n                }\n\n                /*\n                 * For blocks that aren't lone statements, ensure that the opening curly brace\n                 * is aligned with the parent.\n                 */\n                if (!astUtils.STATEMENT_LIST_PARENTS.has(node.parent.type)) {\n                    offsets.setDesiredOffset(sourceCode.getFirstToken(node), sourceCode.getFirstToken(node.parent), 0);\n                }\n                addElementListIndent(node.body, sourceCode.getFirstToken(node), sourceCode.getLastToken(node), blockIndentLevel);\n            },\n\n            CallExpression: addFunctionCallIndent,\n\n            \"ClassDeclaration[superClass], ClassExpression[superClass]\"(node) {\n                const classToken = sourceCode.getFirstToken(node);\n                const extendsToken = sourceCode.getTokenBefore(node.superClass, astUtils.isNotOpeningParenToken);\n\n                offsets.setDesiredOffsets([extendsToken.range[0], node.body.range[0]], classToken, 1);\n            },\n\n            ConditionalExpression(node) {\n                const firstToken = sourceCode.getFirstToken(node);\n\n                // `flatTernaryExpressions` option is for the following style:\n                // var a =\n                //     foo > 0 ? bar :\n                //     foo < 0 ? baz :\n                //     /*else*/ qiz ;\n                if (!options.flatTernaryExpressions ||\n                    !astUtils.isTokenOnSameLine(node.test, node.consequent) ||\n                    isOnFirstLineOfStatement(firstToken, node)\n                ) {\n                    const questionMarkToken = sourceCode.getFirstTokenBetween(node.test, node.consequent, token => token.type === \"Punctuator\" && token.value === \"?\");\n                    const colonToken = sourceCode.getFirstTokenBetween(node.consequent, node.alternate, token => token.type === \"Punctuator\" && token.value === \":\");\n\n                    const firstConsequentToken = sourceCode.getTokenAfter(questionMarkToken);\n                    const lastConsequentToken = sourceCode.getTokenBefore(colonToken);\n                    const firstAlternateToken = sourceCode.getTokenAfter(colonToken);\n\n                    offsets.setDesiredOffset(questionMarkToken, firstToken, 1);\n                    offsets.setDesiredOffset(colonToken, firstToken, 1);\n\n                    offsets.setDesiredOffset(firstConsequentToken, firstToken, 1);\n\n                    /*\n                     * The alternate and the consequent should usually have the same indentation.\n                     * If they share part of a line, align the alternate against the first token of the consequent.\n                     * This allows the alternate to be indented correctly in cases like this:\n                     * foo ? (\n                     *   bar\n                     * ) : ( // this '(' is aligned with the '(' above, so it's considered to be aligned with `foo`\n                     *   baz // as a result, `baz` is offset by 1 rather than 2\n                     * )\n                     */\n                    if (lastConsequentToken.loc.end.line === firstAlternateToken.loc.start.line) {\n                        offsets.setDesiredOffset(firstAlternateToken, firstConsequentToken, 0);\n                    } else {\n\n                        /**\n                         * If the alternate and consequent do not share part of a line, offset the alternate from the first\n                         * token of the conditional expression. For example:\n                         * foo ? bar\n                         *   : baz\n                         *\n                         * If `baz` were aligned with `bar` rather than being offset by 1 from `foo`, `baz` would end up\n                         * having no expected indentation.\n                         */\n                        offsets.setDesiredOffset(firstAlternateToken, firstToken, 1);\n                    }\n                }\n            },\n\n            \"DoWhileStatement, WhileStatement, ForInStatement, ForOfStatement\": node => addBlocklessNodeIndent(node.body),\n\n            ExportNamedDeclaration(node) {\n                if (node.declaration === null) {\n                    const closingCurly = sourceCode.getLastToken(node, astUtils.isClosingBraceToken);\n\n                    // Indent the specifiers in `export {foo, bar, baz}`\n                    addElementListIndent(node.specifiers, sourceCode.getFirstToken(node, { skip: 1 }), closingCurly, 1);\n\n                    if (node.source) {\n\n                        // Indent everything after and including the `from` token in `export {foo, bar, baz} from 'qux'`\n                        offsets.setDesiredOffsets([closingCurly.range[1], node.range[1]], sourceCode.getFirstToken(node), 1);\n                    }\n                }\n            },\n\n            ForStatement(node) {\n                const forOpeningParen = sourceCode.getFirstToken(node, 1);\n\n                if (node.init) {\n                    offsets.setDesiredOffsets(node.init.range, forOpeningParen, 1);\n                }\n                if (node.test) {\n                    offsets.setDesiredOffsets(node.test.range, forOpeningParen, 1);\n                }\n                if (node.update) {\n                    offsets.setDesiredOffsets(node.update.range, forOpeningParen, 1);\n                }\n                addBlocklessNodeIndent(node.body);\n            },\n\n            \"FunctionDeclaration, FunctionExpression\"(node) {\n                const closingParen = sourceCode.getTokenBefore(node.body);\n                const openingParen = sourceCode.getTokenBefore(node.params.length ? node.params[0] : closingParen);\n\n                parameterParens.add(openingParen);\n                parameterParens.add(closingParen);\n                addElementListIndent(node.params, openingParen, closingParen, options[node.type].parameters);\n            },\n\n            IfStatement(node) {\n                addBlocklessNodeIndent(node.consequent);\n                if (node.alternate && node.alternate.type !== \"IfStatement\") {\n                    addBlocklessNodeIndent(node.alternate);\n                }\n            },\n\n            ImportDeclaration(node) {\n                if (node.specifiers.some(specifier => specifier.type === \"ImportSpecifier\")) {\n                    const openingCurly = sourceCode.getFirstToken(node, astUtils.isOpeningBraceToken);\n                    const closingCurly = sourceCode.getLastToken(node, astUtils.isClosingBraceToken);\n\n                    addElementListIndent(node.specifiers.filter(specifier => specifier.type === \"ImportSpecifier\"), openingCurly, closingCurly, options.ImportDeclaration);\n                }\n\n                const fromToken = sourceCode.getLastToken(node, token => token.type === \"Identifier\" && token.value === \"from\");\n                const sourceToken = sourceCode.getLastToken(node, token => token.type === \"String\");\n                const semiToken = sourceCode.getLastToken(node, token => token.type === \"Punctuator\" && token.value === \";\");\n\n                if (fromToken) {\n                    const end = semiToken && semiToken.range[1] === sourceToken.range[1] ? node.range[1] : sourceToken.range[1];\n\n                    offsets.setDesiredOffsets([fromToken.range[0], end], sourceCode.getFirstToken(node), 1);\n                }\n            },\n\n            ImportExpression(node) {\n                const openingParen = sourceCode.getFirstToken(node, 1);\n                const closingParen = sourceCode.getLastToken(node);\n\n                parameterParens.add(openingParen);\n                parameterParens.add(closingParen);\n                offsets.setDesiredOffset(openingParen, sourceCode.getTokenBefore(openingParen), 0);\n\n                addElementListIndent([node.source], openingParen, closingParen, options.CallExpression.arguments);\n            },\n\n            \"MemberExpression, JSXMemberExpression, MetaProperty\"(node) {\n                const object = node.type === \"MetaProperty\" ? node.meta : node.object;\n                const firstNonObjectToken = sourceCode.getFirstTokenBetween(object, node.property, astUtils.isNotClosingParenToken);\n                const secondNonObjectToken = sourceCode.getTokenAfter(firstNonObjectToken);\n\n                const objectParenCount = sourceCode.getTokensBetween(object, node.property, { filter: astUtils.isClosingParenToken }).length;\n                const firstObjectToken = objectParenCount\n                    ? sourceCode.getTokenBefore(object, { skip: objectParenCount - 1 })\n                    : sourceCode.getFirstToken(object);\n                const lastObjectToken = sourceCode.getTokenBefore(firstNonObjectToken);\n                const firstPropertyToken = node.computed ? firstNonObjectToken : secondNonObjectToken;\n\n                if (node.computed) {\n\n                    // For computed MemberExpressions, match the closing bracket with the opening bracket.\n                    offsets.setDesiredOffset(sourceCode.getLastToken(node), firstNonObjectToken, 0);\n                    offsets.setDesiredOffsets(node.property.range, firstNonObjectToken, 1);\n                }\n\n                /*\n                 * If the object ends on the same line that the property starts, match against the last token\n                 * of the object, to ensure that the MemberExpression is not indented.\n                 *\n                 * Otherwise, match against the first token of the object, e.g.\n                 * foo\n                 *   .bar\n                 *   .baz // <-- offset by 1 from `foo`\n                 */\n                const offsetBase = lastObjectToken.loc.end.line === firstPropertyToken.loc.start.line\n                    ? lastObjectToken\n                    : firstObjectToken;\n\n                if (typeof options.MemberExpression === \"number\") {\n\n                    // Match the dot (for non-computed properties) or the opening bracket (for computed properties) against the object.\n                    offsets.setDesiredOffset(firstNonObjectToken, offsetBase, options.MemberExpression);\n\n                    /*\n                     * For computed MemberExpressions, match the first token of the property against the opening bracket.\n                     * Otherwise, match the first token of the property against the object.\n                     */\n                    offsets.setDesiredOffset(secondNonObjectToken, node.computed ? firstNonObjectToken : offsetBase, options.MemberExpression);\n                } else {\n\n                    // If the MemberExpression option is off, ignore the dot and the first token of the property.\n                    offsets.ignoreToken(firstNonObjectToken);\n                    offsets.ignoreToken(secondNonObjectToken);\n\n                    // To ignore the property indentation, ensure that the property tokens depend on the ignored tokens.\n                    offsets.setDesiredOffset(firstNonObjectToken, offsetBase, 0);\n                    offsets.setDesiredOffset(secondNonObjectToken, firstNonObjectToken, 0);\n                }\n            },\n\n            NewExpression(node) {\n\n                // Only indent the arguments if the NewExpression has parens (e.g. `new Foo(bar)` or `new Foo()`, but not `new Foo`\n                if (node.arguments.length > 0 ||\n                        astUtils.isClosingParenToken(sourceCode.getLastToken(node)) &&\n                        astUtils.isOpeningParenToken(sourceCode.getLastToken(node, 1))) {\n                    addFunctionCallIndent(node);\n                }\n            },\n\n            Property(node) {\n                if (!node.shorthand && !node.method && node.kind === \"init\") {\n                    const colon = sourceCode.getFirstTokenBetween(node.key, node.value, astUtils.isColonToken);\n\n                    offsets.ignoreToken(sourceCode.getTokenAfter(colon));\n                }\n            },\n\n            SwitchStatement(node) {\n                const openingCurly = sourceCode.getTokenAfter(node.discriminant, astUtils.isOpeningBraceToken);\n                const closingCurly = sourceCode.getLastToken(node);\n\n                offsets.setDesiredOffsets([openingCurly.range[1], closingCurly.range[0]], openingCurly, options.SwitchCase);\n\n                if (node.cases.length) {\n                    sourceCode.getTokensBetween(\n                        node.cases[node.cases.length - 1],\n                        closingCurly,\n                        { includeComments: true, filter: astUtils.isCommentToken }\n                    ).forEach(token => offsets.ignoreToken(token));\n                }\n            },\n\n            SwitchCase(node) {\n                if (!(node.consequent.length === 1 && node.consequent[0].type === \"BlockStatement\")) {\n                    const caseKeyword = sourceCode.getFirstToken(node);\n                    const tokenAfterCurrentCase = sourceCode.getTokenAfter(node);\n\n                    offsets.setDesiredOffsets([caseKeyword.range[1], tokenAfterCurrentCase.range[0]], caseKeyword, 1);\n                }\n            },\n\n            TemplateLiteral(node) {\n                node.expressions.forEach((expression, index) => {\n                    const previousQuasi = node.quasis[index];\n                    const nextQuasi = node.quasis[index + 1];\n                    const tokenToAlignFrom = previousQuasi.loc.start.line === previousQuasi.loc.end.line\n                        ? sourceCode.getFirstToken(previousQuasi)\n                        : null;\n\n                    offsets.setDesiredOffsets([previousQuasi.range[1], nextQuasi.range[0]], tokenToAlignFrom, 1);\n                    offsets.setDesiredOffset(sourceCode.getFirstToken(nextQuasi), tokenToAlignFrom, 0);\n                });\n            },\n\n            VariableDeclaration(node) {\n                let variableIndent = Object.prototype.hasOwnProperty.call(options.VariableDeclarator, node.kind)\n                    ? options.VariableDeclarator[node.kind]\n                    : DEFAULT_VARIABLE_INDENT;\n\n                const firstToken = sourceCode.getFirstToken(node),\n                    lastToken = sourceCode.getLastToken(node);\n\n                if (options.VariableDeclarator[node.kind] === \"first\") {\n                    if (node.declarations.length > 1) {\n                        addElementListIndent(\n                            node.declarations,\n                            firstToken,\n                            lastToken,\n                            \"first\"\n                        );\n                        return;\n                    }\n\n                    variableIndent = DEFAULT_VARIABLE_INDENT;\n                }\n\n                if (node.declarations[node.declarations.length - 1].loc.start.line > node.loc.start.line) {\n\n                    /*\n                     * VariableDeclarator indentation is a bit different from other forms of indentation, in that the\n                     * indentation of an opening bracket sometimes won't match that of a closing bracket. For example,\n                     * the following indentations are correct:\n                     *\n                     * var foo = {\n                     *   ok: true\n                     * };\n                     *\n                     * var foo = {\n                     *     ok: true,\n                     *   },\n                     *   bar = 1;\n                     *\n                     * Account for when exiting the AST (after indentations have already been set for the nodes in\n                     * the declaration) by manually increasing the indentation level of the tokens in this declarator\n                     * on the same line as the start of the declaration, provided that there are declarators that\n                     * follow this one.\n                     */\n                    offsets.setDesiredOffsets(node.range, firstToken, variableIndent, true);\n                } else {\n                    offsets.setDesiredOffsets(node.range, firstToken, variableIndent);\n                }\n\n                if (astUtils.isSemicolonToken(lastToken)) {\n                    offsets.ignoreToken(lastToken);\n                }\n            },\n\n            VariableDeclarator(node) {\n                if (node.init) {\n                    const equalOperator = sourceCode.getTokenBefore(node.init, astUtils.isNotOpeningParenToken);\n                    const tokenAfterOperator = sourceCode.getTokenAfter(equalOperator);\n\n                    offsets.ignoreToken(equalOperator);\n                    offsets.ignoreToken(tokenAfterOperator);\n                    offsets.setDesiredOffsets([tokenAfterOperator.range[0], node.range[1]], equalOperator, 1);\n                    offsets.setDesiredOffset(equalOperator, sourceCode.getLastToken(node.id), 0);\n                }\n            },\n\n            \"JSXAttribute[value]\"(node) {\n                const equalsToken = sourceCode.getFirstTokenBetween(node.name, node.value, token => token.type === \"Punctuator\" && token.value === \"=\");\n\n                offsets.setDesiredOffsets([equalsToken.range[0], node.value.range[1]], sourceCode.getFirstToken(node.name), 1);\n            },\n\n            JSXElement(node) {\n                if (node.closingElement) {\n                    addElementListIndent(node.children, sourceCode.getFirstToken(node.openingElement), sourceCode.getFirstToken(node.closingElement), 1);\n                }\n            },\n\n            JSXOpeningElement(node) {\n                const firstToken = sourceCode.getFirstToken(node);\n                let closingToken;\n\n                if (node.selfClosing) {\n                    closingToken = sourceCode.getLastToken(node, { skip: 1 });\n                    offsets.setDesiredOffset(sourceCode.getLastToken(node), closingToken, 0);\n                } else {\n                    closingToken = sourceCode.getLastToken(node);\n                }\n                offsets.setDesiredOffsets(node.name.range, sourceCode.getFirstToken(node));\n                addElementListIndent(node.attributes, firstToken, closingToken, 1);\n            },\n\n            JSXClosingElement(node) {\n                const firstToken = sourceCode.getFirstToken(node);\n\n                offsets.setDesiredOffsets(node.name.range, firstToken, 1);\n            },\n\n            JSXFragment(node) {\n                const firstOpeningToken = sourceCode.getFirstToken(node.openingFragment);\n                const firstClosingToken = sourceCode.getFirstToken(node.closingFragment);\n\n                addElementListIndent(node.children, firstOpeningToken, firstClosingToken, 1);\n            },\n\n            JSXOpeningFragment(node) {\n                const firstToken = sourceCode.getFirstToken(node);\n                const closingToken = sourceCode.getLastToken(node);\n\n                offsets.setDesiredOffsets(node.range, firstToken, 1);\n                offsets.matchOffsetOf(firstToken, closingToken);\n            },\n\n            JSXClosingFragment(node) {\n                const firstToken = sourceCode.getFirstToken(node);\n                const slashToken = sourceCode.getLastToken(node, { skip: 1 });\n                const closingToken = sourceCode.getLastToken(node);\n                const tokenToMatch = astUtils.isTokenOnSameLine(slashToken, closingToken) ? slashToken : closingToken;\n\n                offsets.setDesiredOffsets(node.range, firstToken, 1);\n                offsets.matchOffsetOf(firstToken, tokenToMatch);\n            },\n\n            JSXExpressionContainer(node) {\n                const openingCurly = sourceCode.getFirstToken(node);\n                const closingCurly = sourceCode.getLastToken(node);\n\n                offsets.setDesiredOffsets(\n                    [openingCurly.range[1], closingCurly.range[0]],\n                    openingCurly,\n                    1\n                );\n            },\n\n            JSXSpreadAttribute(node) {\n                const openingCurly = sourceCode.getFirstToken(node);\n                const closingCurly = sourceCode.getLastToken(node);\n\n                offsets.setDesiredOffsets(\n                    [openingCurly.range[1], closingCurly.range[0]],\n                    openingCurly,\n                    1\n                );\n            },\n\n            \"*\"(node) {\n                const firstToken = sourceCode.getFirstToken(node);\n\n                // Ensure that the children of every node are indented at least as much as the first token.\n                if (firstToken && !ignoredNodeFirstTokens.has(firstToken)) {\n                    offsets.setDesiredOffsets(node.range, firstToken, 0);\n                }\n            }\n        };\n\n        const listenerCallQueue = [];\n\n        /*\n         * To ignore the indentation of a node:\n         * 1. Don't call the node's listener when entering it (if it has a listener)\n         * 2. Don't set any offsets against the first token of the node.\n         * 3. Call `ignoreNode` on the node sometime after exiting it and before validating offsets.\n         */\n        const offsetListeners = lodash.mapValues(\n            baseOffsetListeners,\n\n            /*\n             * Offset listener calls are deferred until traversal is finished, and are called as\n             * part of the final `Program:exit` listener. This is necessary because a node might\n             * be matched by multiple selectors.\n             *\n             * Example: Suppose there is an offset listener for `Identifier`, and the user has\n             * specified in configuration that `MemberExpression > Identifier` should be ignored.\n             * Due to selector specificity rules, the `Identifier` listener will get called first. However,\n             * if a given Identifier node is supposed to be ignored, then the `Identifier` offset listener\n             * should not have been called at all. Without doing extra selector matching, we don't know\n             * whether the Identifier matches the `MemberExpression > Identifier` selector until the\n             * `MemberExpression > Identifier` listener is called.\n             *\n             * To avoid this, the `Identifier` listener isn't called until traversal finishes and all\n             * ignored nodes are known.\n             */\n            listener =>\n                node =>\n                    listenerCallQueue.push({ listener, node })\n        );\n\n        // For each ignored node selector, set up a listener to collect it into the `ignoredNodes` set.\n        const ignoredNodes = new Set();\n\n        /**\n         * Ignores a node\n         * @param {ASTNode} node The node to ignore\n         * @returns {void}\n         */\n        function addToIgnoredNodes(node) {\n            ignoredNodes.add(node);\n            ignoredNodeFirstTokens.add(sourceCode.getFirstToken(node));\n        }\n\n        const ignoredNodeListeners = options.ignoredNodes.reduce(\n            (listeners, ignoredSelector) => Object.assign(listeners, { [ignoredSelector]: addToIgnoredNodes }),\n            {}\n        );\n\n        /*\n         * Join the listeners, and add a listener to verify that all tokens actually have the correct indentation\n         * at the end.\n         *\n         * Using Object.assign will cause some offset listeners to be overwritten if the same selector also appears\n         * in `ignoredNodeListeners`. This isn't a problem because all of the matching nodes will be ignored,\n         * so those listeners wouldn't be called anyway.\n         */\n        return Object.assign(\n            offsetListeners,\n            ignoredNodeListeners,\n            {\n                \"*:exit\"(node) {\n\n                    // If a node's type is nonstandard, we can't tell how its children should be offset, so ignore it.\n                    if (!KNOWN_NODES.has(node.type)) {\n                        addToIgnoredNodes(node);\n                    }\n                },\n                \"Program:exit\"() {\n\n                    // If ignoreComments option is enabled, ignore all comment tokens.\n                    if (options.ignoreComments) {\n                        sourceCode.getAllComments()\n                            .forEach(comment => offsets.ignoreToken(comment));\n                    }\n\n                    // Invoke the queued offset listeners for the nodes that aren't ignored.\n                    listenerCallQueue\n                        .filter(nodeInfo => !ignoredNodes.has(nodeInfo.node))\n                        .forEach(nodeInfo => nodeInfo.listener(nodeInfo.node));\n\n                    // Update the offsets for ignored nodes to prevent their child tokens from being reported.\n                    ignoredNodes.forEach(ignoreNode);\n\n                    addParensIndent(sourceCode.ast.tokens);\n\n                    /*\n                     * Create a Map from (tokenOrComment) => (precedingToken).\n                     * This is necessary because sourceCode.getTokenBefore does not handle a comment as an argument correctly.\n                     */\n                    const precedingTokens = sourceCode.ast.comments.reduce((commentMap, comment) => {\n                        const tokenOrCommentBefore = sourceCode.getTokenBefore(comment, { includeComments: true });\n\n                        return commentMap.set(comment, commentMap.has(tokenOrCommentBefore) ? commentMap.get(tokenOrCommentBefore) : tokenOrCommentBefore);\n                    }, new WeakMap());\n\n                    sourceCode.lines.forEach((line, lineIndex) => {\n                        const lineNumber = lineIndex + 1;\n\n                        if (!tokenInfo.firstTokensByLineNumber.has(lineNumber)) {\n\n                            // Don't check indentation on blank lines\n                            return;\n                        }\n\n                        const firstTokenOfLine = tokenInfo.firstTokensByLineNumber.get(lineNumber);\n\n                        if (firstTokenOfLine.loc.start.line !== lineNumber) {\n\n                            // Don't check the indentation of multi-line tokens (e.g. template literals or block comments) twice.\n                            return;\n                        }\n\n                        if (astUtils.isCommentToken(firstTokenOfLine)) {\n                            const tokenBefore = precedingTokens.get(firstTokenOfLine);\n                            const tokenAfter = tokenBefore ? sourceCode.getTokenAfter(tokenBefore) : sourceCode.ast.tokens[0];\n                            const mayAlignWithBefore = tokenBefore && !hasBlankLinesBetween(tokenBefore, firstTokenOfLine);\n                            const mayAlignWithAfter = tokenAfter && !hasBlankLinesBetween(firstTokenOfLine, tokenAfter);\n\n                            /*\n                             * If a comment precedes a line that begins with a semicolon token, align to that token, i.e.\n                             *\n                             * let foo\n                             * // comment\n                             * ;(async () => {})()\n                             */\n                            if (tokenAfter && astUtils.isSemicolonToken(tokenAfter) && !astUtils.isTokenOnSameLine(firstTokenOfLine, tokenAfter)) {\n                                offsets.setDesiredOffset(firstTokenOfLine, tokenAfter, 0);\n                            }\n\n                            // If a comment matches the expected indentation of the token immediately before or after, don't report it.\n                            if (\n                                mayAlignWithBefore && validateTokenIndent(firstTokenOfLine, offsets.getDesiredIndent(tokenBefore)) ||\n                                mayAlignWithAfter && validateTokenIndent(firstTokenOfLine, offsets.getDesiredIndent(tokenAfter))\n                            ) {\n                                return;\n                            }\n                        }\n\n                        // If the token matches the expected indentation, don't report it.\n                        if (validateTokenIndent(firstTokenOfLine, offsets.getDesiredIndent(firstTokenOfLine))) {\n                            return;\n                        }\n\n                        // Otherwise, report the token/comment.\n                        report(firstTokenOfLine, offsets.getDesiredIndent(firstTokenOfLine));\n                    });\n                }\n            }\n        );\n    }\n};\n"]},"metadata":{},"sourceType":"script"}