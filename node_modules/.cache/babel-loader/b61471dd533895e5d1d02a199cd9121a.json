{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\n\nconst util = require('util');\n\nconst chmod = util.promisify(fs.chmod);\nconst unlink = util.promisify(fs.unlink);\nconst stat = util.promisify(fs.stat);\n\nconst move = require('move-concurrently');\n\nconst pinflight = require('promise-inflight');\n\nmodule.exports = moveFile;\n\nfunction moveFile(src, dest) {\n  // This isn't quite an fs.rename -- the assumption is that\n  // if `dest` already exists, and we get certain errors while\n  // trying to move it, we should just not bother.\n  //\n  // In the case of cache corruption, users will receive an\n  // EINTEGRITY error elsewhere, and can remove the offending\n  // content their own way.\n  //\n  // Note that, as the name suggests, this strictly only supports file moves.\n  return new Promise((resolve, reject) => {\n    fs.link(src, dest, err => {\n      if (err) {\n        if (err.code === 'EEXIST' || err.code === 'EBUSY') {// file already exists, so whatever\n        } else if (err.code === 'EPERM' && process.platform === 'win32') {// file handle stayed open even past graceful-fs limits\n        } else {\n          return reject(err);\n        }\n      }\n\n      return resolve();\n    });\n  }).then(() => {\n    // content should never change for any reason, so make it read-only\n    return Promise.all([unlink(src), process.platform !== 'win32' && chmod(dest, '0444')]);\n  }).catch(() => {\n    return pinflight('cacache-move-file:' + dest, () => {\n      return stat(dest).catch(err => {\n        if (err.code !== 'ENOENT') {\n          // Something else is wrong here. Bail bail bail\n          throw err;\n        } // file doesn't already exist! let's try a rename -> copy fallback\n\n\n        return move(src, dest, {\n          Promise,\n          fs\n        });\n      });\n    });\n  });\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/cacache/lib/util/move-file.js"],"names":["fs","require","util","chmod","promisify","unlink","stat","move","pinflight","module","exports","moveFile","src","dest","Promise","resolve","reject","link","err","code","process","platform","then","all","catch"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,KAAK,GAAGD,IAAI,CAACE,SAAL,CAAeJ,EAAE,CAACG,KAAlB,CAAd;AACA,MAAME,MAAM,GAAGH,IAAI,CAACE,SAAL,CAAeJ,EAAE,CAACK,MAAlB,CAAf;AACA,MAAMC,IAAI,GAAGJ,IAAI,CAACE,SAAL,CAAeJ,EAAE,CAACM,IAAlB,CAAb;;AACA,MAAMC,IAAI,GAAGN,OAAO,CAAC,mBAAD,CAApB;;AACA,MAAMO,SAAS,GAAGP,OAAO,CAAC,kBAAD,CAAzB;;AAEAQ,MAAM,CAACC,OAAP,GAAiBC,QAAjB;;AAEA,SAASA,QAAT,CAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtChB,IAAAA,EAAE,CAACiB,IAAH,CAAQL,GAAR,EAAaC,IAAb,EAAoBK,GAAD,IAAS;AAC1B,UAAIA,GAAJ,EAAS;AACP,YAAIA,GAAG,CAACC,IAAJ,KAAa,QAAb,IAAyBD,GAAG,CAACC,IAAJ,KAAa,OAA1C,EAAmD,CACjD;AACD,SAFD,MAEO,IAAID,GAAG,CAACC,IAAJ,KAAa,OAAb,IAAwBC,OAAO,CAACC,QAAR,KAAqB,OAAjD,EAA0D,CAC/D;AACD,SAFM,MAEA;AACL,iBAAOL,MAAM,CAACE,GAAD,CAAb;AACD;AACF;;AACD,aAAOH,OAAO,EAAd;AACD,KAXD;AAYD,GAbM,EAcJO,IAdI,CAcC,MAAM;AACV;AACA,WAAOR,OAAO,CAACS,GAAR,CAAY,CACjBlB,MAAM,CAACO,GAAD,CADW,EAEjBQ,OAAO,CAACC,QAAR,KAAqB,OAArB,IAAgClB,KAAK,CAACU,IAAD,EAAO,MAAP,CAFpB,CAAZ,CAAP;AAID,GApBI,EAqBJW,KArBI,CAqBE,MAAM;AACX,WAAOhB,SAAS,CAAC,uBAAuBK,IAAxB,EAA8B,MAAM;AAClD,aAAOP,IAAI,CAACO,IAAD,CAAJ,CAAWW,KAAX,CAAkBN,GAAD,IAAS;AAC/B,YAAIA,GAAG,CAACC,IAAJ,KAAa,QAAjB,EAA2B;AACzB;AACA,gBAAMD,GAAN;AACD,SAJ8B,CAK/B;;;AACA,eAAOX,IAAI,CAACK,GAAD,EAAMC,IAAN,EAAY;AAAEC,UAAAA,OAAF;AAAWd,UAAAA;AAAX,SAAZ,CAAX;AACD,OAPM,CAAP;AAQD,KATe,CAAhB;AAUD,GAhCI,CAAP;AAiCD","sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst util = require('util')\nconst chmod = util.promisify(fs.chmod)\nconst unlink = util.promisify(fs.unlink)\nconst stat = util.promisify(fs.stat)\nconst move = require('move-concurrently')\nconst pinflight = require('promise-inflight')\n\nmodule.exports = moveFile\n\nfunction moveFile (src, dest) {\n  // This isn't quite an fs.rename -- the assumption is that\n  // if `dest` already exists, and we get certain errors while\n  // trying to move it, we should just not bother.\n  //\n  // In the case of cache corruption, users will receive an\n  // EINTEGRITY error elsewhere, and can remove the offending\n  // content their own way.\n  //\n  // Note that, as the name suggests, this strictly only supports file moves.\n  return new Promise((resolve, reject) => {\n    fs.link(src, dest, (err) => {\n      if (err) {\n        if (err.code === 'EEXIST' || err.code === 'EBUSY') {\n          // file already exists, so whatever\n        } else if (err.code === 'EPERM' && process.platform === 'win32') {\n          // file handle stayed open even past graceful-fs limits\n        } else {\n          return reject(err)\n        }\n      }\n      return resolve()\n    })\n  })\n    .then(() => {\n      // content should never change for any reason, so make it read-only\n      return Promise.all([\n        unlink(src),\n        process.platform !== 'win32' && chmod(dest, '0444')\n      ])\n    })\n    .catch(() => {\n      return pinflight('cacache-move-file:' + dest, () => {\n        return stat(dest).catch((err) => {\n          if (err.code !== 'ENOENT') {\n            // Something else is wrong here. Bail bail bail\n            throw err\n          }\n          // file doesn't already exist! let's try a rename -> copy fallback\n          return move(src, dest, { Promise, fs })\n        })\n      })\n    })\n}\n"]},"metadata":{},"sourceType":"script"}