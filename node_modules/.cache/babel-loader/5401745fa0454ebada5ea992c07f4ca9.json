{"ast":null,"code":"// if running on older node, ensure that es6-shim is loaded first\nif (/^v0.10/.test(process.version)) {\n  require('es6-shim');\n}\n\nvar assert = require('../assert');\n\nvar fs = require('../fs');\n\nvar path = require('../path');\n\nvar TESTFILE = '/tmp/hello';\ndescribe('fs module', function () {\n  it('write/read/unlink (callbacks)', function (done) {\n    fs.exists(TESTFILE, function (exists) {\n      if (exists) {\n        return done(\"Pre-existing file \" + TESTFILE + \"; aborting test.\");\n      }\n\n      fs.writeFile(TESTFILE, 'hello', 'utf-8', function (err) {\n        if (err) {\n          return done(err);\n        }\n\n        fs.exists(TESTFILE, function (exists) {\n          if (!exists) {\n            return done(TESTFILE + \" not found\");\n          }\n\n          fs.readFile(TESTFILE, 'utf-8', function (err, contents) {\n            if (err) {\n              return done(err);\n            }\n\n            if (contents !== 'hello') {\n              return done(\"File contents are not right\");\n            }\n\n            fs.unlink(TESTFILE, function (err) {\n              if (err) {\n                return done(err);\n              }\n\n              fs.exists(TESTFILE, function (exists) {\n                if (exists) {\n                  return done(\"unlink didn't work\");\n                }\n\n                done();\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n  it('write/read/unlink (promises)', function () {\n    return fs.exists(TESTFILE).then(function (exists) {\n      assert.equal(!!exists, false, \"Pre-existing file \" + TESTFILE + \"; aborting test.\");\n    }).then(function () {\n      return fs.writeFile(TESTFILE, 'hello', 'utf-8');\n    }).then(function () {\n      return fs.exists(TESTFILE);\n    }).then(function (exists) {\n      assert.equal(!!exists, true);\n      return fs.readFile(TESTFILE, 'utf-8');\n    }).then(function (contents) {\n      assert.equal(contents, 'hello');\n      return fs.unlink(TESTFILE);\n    }).then(function () {\n      return fs.exists(TESTFILE);\n    }).then(function (exists) {\n      assert.equal(!!exists, false);\n    });\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/pn/test/fs.js"],"names":["test","process","version","require","assert","fs","path","TESTFILE","describe","it","done","exists","writeFile","err","readFile","contents","unlink","then","equal"],"mappings":"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","sourcesContent":["// if running on older node, ensure that es6-shim is loaded first\nif (/^v0.10/.test(process.version)) { require('es6-shim'); }\nvar assert= require('../assert');\nvar fs = require('../fs');\nvar path = require('../path');\n\nvar TESTFILE = '/tmp/hello';\n\ndescribe('fs module', function() {\n    it('write/read/unlink (callbacks)', function(done) {\n        fs.exists(TESTFILE, function(exists) {\n            if (exists) {\n                return done(\"Pre-existing file \"+TESTFILE+\"; aborting test.\");\n            }\n            fs.writeFile(TESTFILE, 'hello', 'utf-8', function(err) {\n                if (err) { return done(err); }\n                fs.exists(TESTFILE, function(exists) {\n                    if (!exists) {\n                        return done(TESTFILE+\" not found\");\n                    }\n                    fs.readFile(TESTFILE, 'utf-8', function(err, contents) {\n                        if (err) { return done(err); }\n                        if (contents !== 'hello') {\n                            return done(\"File contents are not right\");\n                        }\n                        fs.unlink(TESTFILE, function(err) {\n                            if (err) { return done(err); }\n                            fs.exists(TESTFILE, function(exists) {\n                                if (exists) {\n                                    return done(\"unlink didn't work\");\n                                }\n                                done(/*success!*/);\n                            });\n                        });\n                    });\n                });\n            });\n        });\n    });\n    it('write/read/unlink (promises)', function() {\n        return fs.exists(TESTFILE).then(function(exists) {\n            assert.equal(!!exists, false,\n                         \"Pre-existing file \"+TESTFILE+\"; aborting test.\");\n        }).then(function() {\n            return fs.writeFile(TESTFILE, 'hello', 'utf-8');\n        }).then(function() {\n            return fs.exists(TESTFILE);\n        }).then(function(exists) {\n            assert.equal(!!exists, true);\n            return fs.readFile(TESTFILE, 'utf-8');\n        }).then(function(contents) {\n            assert.equal(contents, 'hello');\n            return fs.unlink(TESTFILE);\n        }).then(function() {\n            return fs.exists(TESTFILE);\n        }).then(function(exists) {\n            assert.equal(!!exists, false);\n        });\n    });\n});\n"]},"metadata":{},"sourceType":"script"}