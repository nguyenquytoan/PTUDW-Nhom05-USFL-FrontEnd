{"ast":null,"code":"'use strict';\n\nexports.type = 'perItem';\nexports.active = true;\nexports.description = 'collapses multiple transformations and optimizes it';\nexports.params = {\n  convertToShorts: true,\n  // degPrecision: 3, // transformPrecision (or matrix precision) - 2 by default\n  floatPrecision: 3,\n  transformPrecision: 5,\n  matrixToTransform: true,\n  shortTranslate: true,\n  shortScale: true,\n  shortRotate: true,\n  removeUseless: true,\n  collapseIntoOne: true,\n  leadingZero: true,\n  negativeExtraSpace: false\n};\n\nvar cleanupOutData = require('../lib/svgo/tools').cleanupOutData,\n    transform2js = require('./_transforms.js').transform2js,\n    transformsMultiply = require('./_transforms.js').transformsMultiply,\n    matrixToTransform = require('./_transforms.js').matrixToTransform,\n    degRound,\n    floatRound,\n    transformRound;\n/**\n * Convert matrices to the short aliases,\n * convert long translate, scale or rotate transform notations to the shorts ones,\n * convert transforms to the matrices and multiply them all into one,\n * remove useless transforms.\n *\n * @see http://www.w3.org/TR/SVG/coords.html#TransformMatrixDefined\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\n\n\nexports.fn = function (item, params) {\n  if (item.elem) {\n    // transform\n    if (item.hasAttr('transform')) {\n      convertTransform(item, 'transform', params);\n    } // gradientTransform\n\n\n    if (item.hasAttr('gradientTransform')) {\n      convertTransform(item, 'gradientTransform', params);\n    } // patternTransform\n\n\n    if (item.hasAttr('patternTransform')) {\n      convertTransform(item, 'patternTransform', params);\n    }\n  }\n};\n/**\n * Main function.\n *\n * @param {Object} item input item\n * @param {String} attrName attribute name\n * @param {Object} params plugin params\n */\n\n\nfunction convertTransform(item, attrName, params) {\n  var data = transform2js(item.attr(attrName).value);\n  params = definePrecision(data, params);\n\n  if (params.collapseIntoOne && data.length > 1) {\n    data = [transformsMultiply(data)];\n  }\n\n  if (params.convertToShorts) {\n    data = convertToShorts(data, params);\n  } else {\n    data.forEach(roundTransform);\n  }\n\n  if (params.removeUseless) {\n    data = removeUseless(data);\n  }\n\n  if (data.length) {\n    item.attr(attrName).value = js2transform(data, params);\n  } else {\n    item.removeAttr(attrName);\n  }\n}\n/**\n * Defines precision to work with certain parts.\n * transformPrecision - for scale and four first matrix parameters (needs a better precision due to multiplying),\n * floatPrecision - for translate including two last matrix and rotate parameters,\n * degPrecision - for rotate and skew. By default it's equal to (rougly)\n * transformPrecision - 2 or floatPrecision whichever is lower. Can be set in params.\n *\n * @param {Array} transforms input array\n * @param {Object} params plugin params\n * @return {Array} output array\n */\n\n\nfunction definePrecision(data, params) {\n  /* jshint validthis: true */\n  var matrixData = data.reduce(getMatrixData, []),\n      significantDigits = params.transformPrecision; // Clone params so it don't affect other elements transformations.\n\n  params = Object.assign({}, params); // Limit transform precision with matrix one. Calculating with larger precision doesn't add any value.\n\n  if (matrixData.length) {\n    params.transformPrecision = Math.min(params.transformPrecision, Math.max.apply(Math, matrixData.map(floatDigits)) || params.transformPrecision);\n    significantDigits = Math.max.apply(Math, matrixData.map(function (n) {\n      return String(n).replace(/\\D+/g, '').length; // Number of digits in a number. 123.45 → 5\n    }));\n  } // No sense in angle precision more then number of significant digits in matrix.\n\n\n  if (!('degPrecision' in params)) {\n    params.degPrecision = Math.max(0, Math.min(params.floatPrecision, significantDigits - 2));\n  }\n\n  floatRound = params.floatPrecision >= 1 && params.floatPrecision < 20 ? smartRound.bind(this, params.floatPrecision) : round;\n  degRound = params.degPrecision >= 1 && params.floatPrecision < 20 ? smartRound.bind(this, params.degPrecision) : round;\n  transformRound = params.transformPrecision >= 1 && params.floatPrecision < 20 ? smartRound.bind(this, params.transformPrecision) : round;\n  return params;\n}\n/**\n * Gathers four first matrix parameters.\n *\n * @param {Array} a array of data\n * @param {Object} transform\n * @return {Array} output array\n */\n\n\nfunction getMatrixData(a, b) {\n  return b.name == 'matrix' ? a.concat(b.data.slice(0, 4)) : a;\n}\n/**\n * Returns number of digits after the point. 0.125 → 3\n */\n\n\nfunction floatDigits(n) {\n  return (n = String(n)).slice(n.indexOf('.')).length - 1;\n}\n/**\n * Convert transforms to the shorthand alternatives.\n *\n * @param {Array} transforms input array\n * @param {Object} params plugin params\n * @return {Array} output array\n */\n\n\nfunction convertToShorts(transforms, params) {\n  for (var i = 0; i < transforms.length; i++) {\n    var transform = transforms[i]; // convert matrix to the short aliases\n\n    if (params.matrixToTransform && transform.name === 'matrix') {\n      var decomposed = matrixToTransform(transform, params);\n\n      if (decomposed != transform && js2transform(decomposed, params).length <= js2transform([transform], params).length) {\n        transforms.splice.apply(transforms, [i, 1].concat(decomposed));\n      }\n\n      transform = transforms[i];\n    } // fixed-point numbers\n    // 12.754997 → 12.755\n\n\n    roundTransform(transform); // convert long translate transform notation to the shorts one\n    // translate(10 0) → translate(10)\n\n    if (params.shortTranslate && transform.name === 'translate' && transform.data.length === 2 && !transform.data[1]) {\n      transform.data.pop();\n    } // convert long scale transform notation to the shorts one\n    // scale(2 2) → scale(2)\n\n\n    if (params.shortScale && transform.name === 'scale' && transform.data.length === 2 && transform.data[0] === transform.data[1]) {\n      transform.data.pop();\n    } // convert long rotate transform notation to the short one\n    // translate(cx cy) rotate(a) translate(-cx -cy) → rotate(a cx cy)\n\n\n    if (params.shortRotate && transforms[i - 2] && transforms[i - 2].name === 'translate' && transforms[i - 1].name === 'rotate' && transforms[i].name === 'translate' && transforms[i - 2].data[0] === -transforms[i].data[0] && transforms[i - 2].data[1] === -transforms[i].data[1]) {\n      transforms.splice(i - 2, 3, {\n        name: 'rotate',\n        data: [transforms[i - 1].data[0], transforms[i - 2].data[0], transforms[i - 2].data[1]]\n      }); // splice compensation\n\n      i -= 2;\n      transform = transforms[i];\n    }\n  }\n\n  return transforms;\n}\n/**\n * Remove useless transforms.\n *\n * @param {Array} transforms input array\n * @return {Array} output array\n */\n\n\nfunction removeUseless(transforms) {\n  return transforms.filter(function (transform) {\n    // translate(0), rotate(0[, cx, cy]), skewX(0), skewY(0)\n    if (['translate', 'rotate', 'skewX', 'skewY'].indexOf(transform.name) > -1 && (transform.data.length == 1 || transform.name == 'rotate') && !transform.data[0] || // translate(0, 0)\n    transform.name == 'translate' && !transform.data[0] && !transform.data[1] || // scale(1)\n    transform.name == 'scale' && transform.data[0] == 1 && (transform.data.length < 2 || transform.data[1] == 1) || // matrix(1 0 0 1 0 0)\n    transform.name == 'matrix' && transform.data[0] == 1 && transform.data[3] == 1 && !(transform.data[1] || transform.data[2] || transform.data[4] || transform.data[5])) {\n      return false;\n    }\n\n    return true;\n  });\n}\n/**\n * Convert transforms JS representation to string.\n *\n * @param {Array} transformJS JS representation array\n * @param {Object} params plugin params\n * @return {String} output string\n */\n\n\nfunction js2transform(transformJS, params) {\n  var transformString = ''; // collect output value string\n\n  transformJS.forEach(function (transform) {\n    roundTransform(transform);\n    transformString += (transformString && ' ') + transform.name + '(' + cleanupOutData(transform.data, params) + ')';\n  });\n  return transformString;\n}\n\nfunction roundTransform(transform) {\n  switch (transform.name) {\n    case 'translate':\n      transform.data = floatRound(transform.data);\n      break;\n\n    case 'rotate':\n      transform.data = degRound(transform.data.slice(0, 1)).concat(floatRound(transform.data.slice(1)));\n      break;\n\n    case 'skewX':\n    case 'skewY':\n      transform.data = degRound(transform.data);\n      break;\n\n    case 'scale':\n      transform.data = transformRound(transform.data);\n      break;\n\n    case 'matrix':\n      transform.data = transformRound(transform.data.slice(0, 4)).concat(floatRound(transform.data.slice(4)));\n      break;\n  }\n\n  return transform;\n}\n/**\n * Rounds numbers in array.\n *\n * @param {Array} data input data array\n * @return {Array} output data array\n */\n\n\nfunction round(data) {\n  return data.map(Math.round);\n}\n/**\n * Decrease accuracy of floating-point numbers\n * in transforms keeping a specified number of decimals.\n * Smart rounds values like 2.349 to 2.35.\n *\n * @param {Number} fixed number of decimals\n * @param {Array} data input data array\n * @return {Array} output data array\n */\n\n\nfunction smartRound(precision, data) {\n  for (var i = data.length, tolerance = +Math.pow(.1, precision).toFixed(precision); i--;) {\n    if (data[i].toFixed(precision) != data[i]) {\n      var rounded = +data[i].toFixed(precision - 1);\n      data[i] = +Math.abs(rounded - data[i]).toFixed(precision + 1) >= tolerance ? +data[i].toFixed(precision) : rounded;\n    }\n  }\n\n  return data;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/svgo/plugins/convertTransform.js"],"names":["exports","type","active","description","params","convertToShorts","floatPrecision","transformPrecision","matrixToTransform","shortTranslate","shortScale","shortRotate","removeUseless","collapseIntoOne","leadingZero","negativeExtraSpace","cleanupOutData","require","transform2js","transformsMultiply","degRound","floatRound","transformRound","fn","item","elem","hasAttr","convertTransform","attrName","data","attr","value","definePrecision","length","forEach","roundTransform","js2transform","removeAttr","matrixData","reduce","getMatrixData","significantDigits","Object","assign","Math","min","max","apply","map","floatDigits","n","String","replace","degPrecision","smartRound","bind","round","a","b","name","concat","slice","indexOf","transforms","i","transform","decomposed","splice","pop","filter","transformJS","transformString","precision","tolerance","pow","toFixed","rounded","abs"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.type = 'perItem';\n\nexports.active = true;\n\nexports.description = 'collapses multiple transformations and optimizes it';\n\nexports.params = {\n    convertToShorts: true,\n    // degPrecision: 3, // transformPrecision (or matrix precision) - 2 by default\n    floatPrecision: 3,\n    transformPrecision: 5,\n    matrixToTransform: true,\n    shortTranslate: true,\n    shortScale: true,\n    shortRotate: true,\n    removeUseless: true,\n    collapseIntoOne: true,\n    leadingZero: true,\n    negativeExtraSpace: false\n};\n\nvar cleanupOutData = require('../lib/svgo/tools').cleanupOutData,\n    transform2js = require('./_transforms.js').transform2js,\n    transformsMultiply = require('./_transforms.js').transformsMultiply,\n    matrixToTransform = require('./_transforms.js').matrixToTransform,\n    degRound,\n    floatRound,\n    transformRound;\n\n/**\n * Convert matrices to the short aliases,\n * convert long translate, scale or rotate transform notations to the shorts ones,\n * convert transforms to the matrices and multiply them all into one,\n * remove useless transforms.\n *\n * @see http://www.w3.org/TR/SVG/coords.html#TransformMatrixDefined\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\nexports.fn = function(item, params) {\n\n    if (item.elem) {\n\n        // transform\n        if (item.hasAttr('transform')) {\n            convertTransform(item, 'transform', params);\n        }\n\n        // gradientTransform\n        if (item.hasAttr('gradientTransform')) {\n            convertTransform(item, 'gradientTransform', params);\n        }\n\n        // patternTransform\n        if (item.hasAttr('patternTransform')) {\n            convertTransform(item, 'patternTransform', params);\n        }\n\n    }\n\n};\n\n/**\n * Main function.\n *\n * @param {Object} item input item\n * @param {String} attrName attribute name\n * @param {Object} params plugin params\n */\nfunction convertTransform(item, attrName, params) {\n    var data = transform2js(item.attr(attrName).value);\n    params = definePrecision(data, params);\n\n    if (params.collapseIntoOne && data.length > 1) {\n        data = [transformsMultiply(data)];\n    }\n\n    if (params.convertToShorts) {\n        data = convertToShorts(data, params);\n    } else {\n        data.forEach(roundTransform);\n    }\n\n    if (params.removeUseless) {\n        data = removeUseless(data);\n    }\n\n    if (data.length) {\n        item.attr(attrName).value = js2transform(data, params);\n    } else {\n        item.removeAttr(attrName);\n    }\n}\n\n/**\n * Defines precision to work with certain parts.\n * transformPrecision - for scale and four first matrix parameters (needs a better precision due to multiplying),\n * floatPrecision - for translate including two last matrix and rotate parameters,\n * degPrecision - for rotate and skew. By default it's equal to (rougly)\n * transformPrecision - 2 or floatPrecision whichever is lower. Can be set in params.\n *\n * @param {Array} transforms input array\n * @param {Object} params plugin params\n * @return {Array} output array\n */\nfunction definePrecision(data, params) {\n    /* jshint validthis: true */\n    var matrixData = data.reduce(getMatrixData, []),\n        significantDigits = params.transformPrecision;\n\n    // Clone params so it don't affect other elements transformations.\n    params = Object.assign({}, params);\n\n    // Limit transform precision with matrix one. Calculating with larger precision doesn't add any value.\n    if (matrixData.length) {\n        params.transformPrecision = Math.min(params.transformPrecision,\n            Math.max.apply(Math, matrixData.map(floatDigits)) || params.transformPrecision);\n\n        significantDigits = Math.max.apply(Math, matrixData.map(function(n) {\n            return String(n).replace(/\\D+/g, '').length; // Number of digits in a number. 123.45 → 5\n        }));\n    }\n    // No sense in angle precision more then number of significant digits in matrix.\n    if (!('degPrecision' in params)) {\n        params.degPrecision = Math.max(0, Math.min(params.floatPrecision, significantDigits - 2));\n    }\n\n    floatRound = params.floatPrecision >= 1 && params.floatPrecision < 20 ?\n        smartRound.bind(this, params.floatPrecision) :\n        round;\n    degRound = params.degPrecision >= 1 && params.floatPrecision < 20 ?\n        smartRound.bind(this, params.degPrecision) :\n        round;\n    transformRound = params.transformPrecision >= 1 && params.floatPrecision < 20 ?\n        smartRound.bind(this, params.transformPrecision) :\n        round;\n\n    return params;\n}\n\n/**\n * Gathers four first matrix parameters.\n *\n * @param {Array} a array of data\n * @param {Object} transform\n * @return {Array} output array\n */\nfunction getMatrixData(a, b) {\n    return b.name == 'matrix' ? a.concat(b.data.slice(0, 4)) : a;\n}\n\n/**\n * Returns number of digits after the point. 0.125 → 3\n */\nfunction floatDigits(n) {\n    return (n = String(n)).slice(n.indexOf('.')).length - 1;\n}\n\n/**\n * Convert transforms to the shorthand alternatives.\n *\n * @param {Array} transforms input array\n * @param {Object} params plugin params\n * @return {Array} output array\n */\nfunction convertToShorts(transforms, params) {\n\n    for(var i = 0; i < transforms.length; i++) {\n\n        var transform = transforms[i];\n\n        // convert matrix to the short aliases\n        if (\n            params.matrixToTransform &&\n            transform.name === 'matrix'\n        ) {\n            var decomposed = matrixToTransform(transform, params);\n            if (decomposed != transform &&\n                js2transform(decomposed, params).length <= js2transform([transform], params).length) {\n\n                transforms.splice.apply(transforms, [i, 1].concat(decomposed));\n            }\n            transform = transforms[i];\n        }\n\n        // fixed-point numbers\n        // 12.754997 → 12.755\n        roundTransform(transform);\n\n        // convert long translate transform notation to the shorts one\n        // translate(10 0) → translate(10)\n        if (\n            params.shortTranslate &&\n            transform.name === 'translate' &&\n            transform.data.length === 2 &&\n            !transform.data[1]\n        ) {\n            transform.data.pop();\n        }\n\n        // convert long scale transform notation to the shorts one\n        // scale(2 2) → scale(2)\n        if (\n            params.shortScale &&\n            transform.name === 'scale' &&\n            transform.data.length === 2 &&\n            transform.data[0] === transform.data[1]\n        ) {\n            transform.data.pop();\n        }\n\n        // convert long rotate transform notation to the short one\n        // translate(cx cy) rotate(a) translate(-cx -cy) → rotate(a cx cy)\n        if (\n            params.shortRotate &&\n            transforms[i - 2] &&\n            transforms[i - 2].name === 'translate' &&\n            transforms[i - 1].name === 'rotate' &&\n            transforms[i].name === 'translate' &&\n            transforms[i - 2].data[0] === -transforms[i].data[0] &&\n            transforms[i - 2].data[1] === -transforms[i].data[1]\n        ) {\n            transforms.splice(i - 2, 3, {\n                name: 'rotate',\n                data: [\n                    transforms[i - 1].data[0],\n                    transforms[i - 2].data[0],\n                    transforms[i - 2].data[1]\n                ]\n            });\n\n            // splice compensation\n            i -= 2;\n\n            transform = transforms[i];\n        }\n\n    }\n\n    return transforms;\n\n}\n\n/**\n * Remove useless transforms.\n *\n * @param {Array} transforms input array\n * @return {Array} output array\n */\nfunction removeUseless(transforms) {\n\n    return transforms.filter(function(transform) {\n\n        // translate(0), rotate(0[, cx, cy]), skewX(0), skewY(0)\n        if (\n            ['translate', 'rotate', 'skewX', 'skewY'].indexOf(transform.name) > -1 &&\n            (transform.data.length == 1 || transform.name == 'rotate') &&\n            !transform.data[0] ||\n\n            // translate(0, 0)\n            transform.name == 'translate' &&\n            !transform.data[0] &&\n            !transform.data[1] ||\n\n            // scale(1)\n            transform.name == 'scale' &&\n            transform.data[0] == 1 &&\n            (transform.data.length < 2 || transform.data[1] == 1) ||\n\n            // matrix(1 0 0 1 0 0)\n            transform.name == 'matrix' &&\n            transform.data[0] == 1 &&\n            transform.data[3] == 1 &&\n            !(transform.data[1] || transform.data[2] || transform.data[4] || transform.data[5])\n        ) {\n            return false;\n        }\n\n        return true;\n\n    });\n\n}\n\n/**\n * Convert transforms JS representation to string.\n *\n * @param {Array} transformJS JS representation array\n * @param {Object} params plugin params\n * @return {String} output string\n */\nfunction js2transform(transformJS, params) {\n\n    var transformString = '';\n\n    // collect output value string\n    transformJS.forEach(function(transform) {\n        roundTransform(transform);\n        transformString += (transformString && ' ') + transform.name + '(' + cleanupOutData(transform.data, params) + ')';\n    });\n\n    return transformString;\n\n}\n\nfunction roundTransform(transform) {\n    switch (transform.name) {\n        case 'translate':\n            transform.data = floatRound(transform.data);\n            break;\n        case 'rotate':\n            transform.data = degRound(transform.data.slice(0, 1)).concat(floatRound(transform.data.slice(1)));\n            break;\n        case 'skewX':\n        case 'skewY':\n            transform.data = degRound(transform.data);\n            break;\n        case 'scale':\n            transform.data = transformRound(transform.data);\n            break;\n        case 'matrix':\n            transform.data = transformRound(transform.data.slice(0, 4)).concat(floatRound(transform.data.slice(4)));\n            break;\n    }\n    return transform;\n}\n\n/**\n * Rounds numbers in array.\n *\n * @param {Array} data input data array\n * @return {Array} output data array\n */\nfunction round(data) {\n    return data.map(Math.round);\n}\n\n/**\n * Decrease accuracy of floating-point numbers\n * in transforms keeping a specified number of decimals.\n * Smart rounds values like 2.349 to 2.35.\n *\n * @param {Number} fixed number of decimals\n * @param {Array} data input data array\n * @return {Array} output data array\n */\nfunction smartRound(precision, data) {\n    for (var i = data.length, tolerance = +Math.pow(.1, precision).toFixed(precision); i--;) {\n        if (data[i].toFixed(precision) != data[i]) {\n            var rounded = +data[i].toFixed(precision - 1);\n            data[i] = +Math.abs(rounded - data[i]).toFixed(precision + 1) >= tolerance ?\n                +data[i].toFixed(precision) :\n                rounded;\n        }\n    }\n    return data;\n}\n"]},"metadata":{},"sourceType":"script"}