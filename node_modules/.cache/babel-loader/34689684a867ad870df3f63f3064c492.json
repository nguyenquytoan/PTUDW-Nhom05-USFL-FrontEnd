{"ast":null,"code":"/* eslint-disable import/no-dynamic-require, global-require */\nimport fs from 'fs';\nimport path from 'path';\nimport webpack from 'webpack';\nimport ExtractTextPlugin from 'extract-text-webpack-plugin';\nimport OptimizeCssAssetsPlugin from '../src/';\nimport { readFileOrEmpty, defaultConfig, checkForWebpackErrors } from './util/helpers';\nconst cases = process.env.CASES ? process.env.CASES.split(',') : fs.readdirSync(path.join(__dirname, 'cases'));\ndescribe('Webpack Integration Tests', () => {\n  cases.forEach(testCase => {\n    if (/^_skip_/.test(testCase)) return;\n    it(testCase, done => {\n      const testDirectory = path.join(__dirname, 'cases', testCase);\n      const outputDirectory = path.join(__dirname, 'js', testCase);\n      const expectedDirectory = path.join(testDirectory, 'expected');\n      const configFile = path.join(testDirectory, 'webpack.config.js');\n      const config = Object.assign(fs.existsSync(configFile) ? require(configFile) : {\n        entry: {\n          test: './index.js'\n        }\n      }, {\n        context: testDirectory,\n        output: {\n          filename: '[name].js',\n          path: outputDirectory\n        }\n      });\n      webpack(config, (err, stats) => {\n        checkForWebpackErrors({\n          err,\n          stats,\n          done\n        });\n        fs.readdirSync(expectedDirectory).forEach(file => {\n          const expectedFile = readFileOrEmpty(path.join(expectedDirectory, file));\n          const actualFile = readFileOrEmpty(path.join(outputDirectory, file));\n          expect(actualFile).toEqual(expectedFile);\n          expect(actualFile).toMatchSnapshot();\n        });\n        done();\n      });\n    });\n  });\n  it('calls cssProcessor with correct arguments', done => {\n    const destination = 'destination.css';\n    const expectedCss = readFileOrEmpty(__dirname + '/util/default.css');\n    const cssProcessorOptions = {\n      discardComments: {\n        removeAll: true\n      }\n    };\n    const cssProcessor = {\n      process: (actualCss, options) => {\n        expect(options).toEqual(expect.objectContaining(cssProcessorOptions));\n        expect(actualCss).toEqual(expectedCss);\n        return Promise.resolve({\n          css: actualCss\n        });\n      }\n    };\n    const plugin = new OptimizeCssAssetsPlugin({\n      cssProcessor,\n      cssProcessorOptions\n    });\n    const config = Object.assign(defaultConfig, {\n      plugins: [plugin, new ExtractTextPlugin(destination)]\n    });\n    webpack(config, (err, stats) => {\n      checkForWebpackErrors({\n        err,\n        stats,\n        done\n      });\n      done();\n    });\n  });\n  it('writes processed css to destination', done => {\n    const destination = 'destination.css';\n    const expectedCss = '.inifinity-pool{overflow:hidden;}';\n    const fakeCssProcessor = {\n      process: jest.fn().mockReturnValue(Promise.resolve({\n        css: expectedCss\n      }))\n    };\n    const plugin = new OptimizeCssAssetsPlugin({\n      cssProcessor: fakeCssProcessor\n    });\n    const config = Object.assign(defaultConfig, {\n      plugins: [plugin, new ExtractTextPlugin(destination)]\n    });\n    webpack(config, (err, stats) => {\n      checkForWebpackErrors({\n        err,\n        stats,\n        done\n      });\n      const actualCss = readFileOrEmpty(__dirname + '/js/default-exports/destination.css');\n      expect(fakeCssProcessor.process).toHaveBeenCalled();\n      expect(actualCss).toEqual(expectedCss);\n      done();\n    });\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/optimize-css-assets-webpack-plugin/test/webpack-integration.test.js"],"names":["fs","path","webpack","ExtractTextPlugin","OptimizeCssAssetsPlugin","readFileOrEmpty","defaultConfig","checkForWebpackErrors","cases","process","env","CASES","split","readdirSync","join","__dirname","describe","forEach","testCase","test","it","done","testDirectory","outputDirectory","expectedDirectory","configFile","config","Object","assign","existsSync","require","entry","context","output","filename","err","stats","file","expectedFile","actualFile","expect","toEqual","toMatchSnapshot","destination","expectedCss","cssProcessorOptions","discardComments","removeAll","cssProcessor","actualCss","options","objectContaining","Promise","resolve","css","plugin","plugins","fakeCssProcessor","jest","fn","mockReturnValue","toHaveBeenCalled"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-dynamic-require, global-require */\nimport fs from 'fs';\nimport path from 'path';\nimport webpack from 'webpack';\nimport ExtractTextPlugin from 'extract-text-webpack-plugin';\nimport OptimizeCssAssetsPlugin from '../src/';\nimport { readFileOrEmpty, defaultConfig, checkForWebpackErrors } from './util/helpers';\n\nconst cases = process.env.CASES ? process.env.CASES.split(',') : fs.readdirSync(path.join(__dirname, 'cases'));\n\ndescribe('Webpack Integration Tests', () => {\n  cases.forEach((testCase) => {\n    if (/^_skip_/.test(testCase)) return;\n    it(testCase, (done) => {\n      const testDirectory = path.join(__dirname, 'cases', testCase);\n      const outputDirectory = path.join(__dirname, 'js', testCase);\n      const expectedDirectory = path.join(testDirectory, 'expected');\n\n      const configFile = path.join(testDirectory, 'webpack.config.js');\n      const config = Object.assign(\n        fs.existsSync(configFile) ? require(configFile) : { entry: { test: './index.js' } },\n        {\n          context: testDirectory,\n          output: {\n            filename: '[name].js',\n            path: outputDirectory\n          }\n        }\n      );\n\n      webpack(config, (err, stats) => {\n        checkForWebpackErrors({ err, stats, done });\n        fs.readdirSync(expectedDirectory).forEach((file) => {\n          const expectedFile = readFileOrEmpty(path.join(expectedDirectory, file));\n          const actualFile = readFileOrEmpty(path.join(outputDirectory, file));\n          expect(actualFile).toEqual(expectedFile);\n          expect(actualFile).toMatchSnapshot();\n        });\n        done();\n      });\n    });\n  });\n\n  it('calls cssProcessor with correct arguments', (done) => {\n    const destination = 'destination.css';\n    const expectedCss = readFileOrEmpty(__dirname + '/util/default.css');\n    const cssProcessorOptions = { discardComments: { removeAll: true } };\n    const cssProcessor = {\n      process: (actualCss, options) => {\n        expect(options).toEqual(expect.objectContaining(cssProcessorOptions));\n        expect(actualCss).toEqual(expectedCss);\n        return Promise.resolve({ css: actualCss });\n      }\n    };\n    const plugin = new OptimizeCssAssetsPlugin({ cssProcessor, cssProcessorOptions });\n    const config = Object.assign(defaultConfig, {plugins: [plugin, new ExtractTextPlugin(destination)]});\n\n    webpack(config, (err, stats) => {\n      checkForWebpackErrors({ err, stats, done });\n      done();\n    });\n  });\n\n  it('writes processed css to destination', (done) => {\n    const destination = 'destination.css';\n    const expectedCss = '.inifinity-pool{overflow:hidden;}';\n    const fakeCssProcessor = {\n      process: jest.fn().mockReturnValue(Promise.resolve({ css: expectedCss }))\n    };\n    const plugin = new OptimizeCssAssetsPlugin({ cssProcessor: fakeCssProcessor });\n    const config = Object.assign(defaultConfig, {plugins: [plugin, new ExtractTextPlugin(destination)]});\n\n    webpack(config, (err, stats) => {\n      checkForWebpackErrors({ err, stats, done });\n      const actualCss = readFileOrEmpty(__dirname + '/js/default-exports/destination.css');\n\n      expect(fakeCssProcessor.process).toHaveBeenCalled();\n      expect(actualCss).toEqual(expectedCss);\n      done();\n    });\n  });\n});\n"]},"metadata":{},"sourceType":"module"}