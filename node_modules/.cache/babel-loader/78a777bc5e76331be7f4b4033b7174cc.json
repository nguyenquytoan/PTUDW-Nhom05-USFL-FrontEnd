{"ast":null,"code":"import Promise from \"./promise\";\n/**\n  `defer` returns an object similar to jQuery's `$.Deferred`.\n  `defer` should be used when porting over code reliant on `$.Deferred`'s\n  interface. New code should use the `Promise` constructor instead.\n\n  The object returned from `defer` is a plain object with three properties:\n\n  * promise - an `Promise`.\n  * reject - a function that causes the `promise` property on this object to\n    become rejected\n  * resolve - a function that causes the `promise` property on this object to\n    become fulfilled.\n\n  Example:\n\n   ```javascript\n   let deferred = defer();\n\n   deferred.resolve(\"Success!\");\n\n   deferred.promise.then(function(value){\n     // value here is \"Success!\"\n   });\n   ```\n\n  @method defer\n  @public\n  @static\n  @for rsvp\n  @param {String} [label] optional string for labeling the promise.\n  Useful for tooling.\n  @return {Object}\n */\n\nexport default function defer(label) {\n  let deferred = {\n    resolve: undefined,\n    reject: undefined\n  };\n  deferred.promise = new Promise((resolve, reject) => {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  }, label);\n  return deferred;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/rsvp/lib/rsvp/defer.js"],"names":["Promise","defer","label","deferred","resolve","undefined","reject","promise"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACnC,MAAIC,QAAQ,GAAG;AAAEC,IAAAA,OAAO,EAAEC,SAAX;AAAsBC,IAAAA,MAAM,EAAED;AAA9B,GAAf;AAEAF,EAAAA,QAAQ,CAACI,OAAT,GAAmB,IAAIP,OAAJ,CAAY,CAACI,OAAD,EAAUE,MAAV,KAAqB;AAClDH,IAAAA,QAAQ,CAACC,OAAT,GAAmBA,OAAnB;AACAD,IAAAA,QAAQ,CAACG,MAAT,GAAkBA,MAAlB;AACD,GAHkB,EAGhBJ,KAHgB,CAAnB;AAKA,SAAOC,QAAP;AACD","sourcesContent":["import Promise from \"./promise\";\n\n/**\n  `defer` returns an object similar to jQuery's `$.Deferred`.\n  `defer` should be used when porting over code reliant on `$.Deferred`'s\n  interface. New code should use the `Promise` constructor instead.\n\n  The object returned from `defer` is a plain object with three properties:\n\n  * promise - an `Promise`.\n  * reject - a function that causes the `promise` property on this object to\n    become rejected\n  * resolve - a function that causes the `promise` property on this object to\n    become fulfilled.\n\n  Example:\n\n   ```javascript\n   let deferred = defer();\n\n   deferred.resolve(\"Success!\");\n\n   deferred.promise.then(function(value){\n     // value here is \"Success!\"\n   });\n   ```\n\n  @method defer\n  @public\n  @static\n  @for rsvp\n  @param {String} [label] optional string for labeling the promise.\n  Useful for tooling.\n  @return {Object}\n */\n\nexport default function defer(label) {\n  let deferred = { resolve: undefined, reject: undefined };\n\n  deferred.promise = new Promise((resolve, reject) => {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  }, label);\n\n  return deferred;\n}\n"]},"metadata":{},"sourceType":"module"}