{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\n\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\n\nvar InnerSubscriber_1 = require(\"../InnerSubscriber\");\n\nfunction mergeScan(accumulator, seed, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  return function (source) {\n    return source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n  };\n}\n\nexports.mergeScan = mergeScan;\n\nvar MergeScanOperator = function () {\n  function MergeScanOperator(accumulator, seed, concurrent) {\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.concurrent = concurrent;\n  }\n\n  MergeScanOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n  };\n\n  return MergeScanOperator;\n}();\n\nexports.MergeScanOperator = MergeScanOperator;\n\nvar MergeScanSubscriber = function (_super) {\n  __extends(MergeScanSubscriber, _super);\n\n  function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.accumulator = accumulator;\n    _this.acc = acc;\n    _this.concurrent = concurrent;\n    _this.hasValue = false;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  MergeScanSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      var index = this.index++;\n      var destination = this.destination;\n      var ish = void 0;\n\n      try {\n        var accumulator = this.accumulator;\n        ish = accumulator(this.acc, value, index);\n      } catch (e) {\n        return destination.error(e);\n      }\n\n      this.active++;\n\n      this._innerSub(ish, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n\n  MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n    var innerSubscriber = new InnerSubscriber_1.InnerSubscriber(this, value, index);\n    var destination = this.destination;\n    destination.add(innerSubscriber);\n    var innerSubscription = subscribeToResult_1.subscribeToResult(this, ish, undefined, undefined, innerSubscriber);\n\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  };\n\n  MergeScanSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n\n      this.destination.complete();\n    }\n\n    this.unsubscribe();\n  };\n\n  MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    var destination = this.destination;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  };\n\n  MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n    var buffer = this.buffer;\n    var destination = this.destination;\n    destination.remove(innerSub);\n    this.active--;\n\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n\n      this.destination.complete();\n    }\n  };\n\n  return MergeScanSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\n\nexports.MergeScanSubscriber = MergeScanSubscriber;","map":{"version":3,"sources":["../../src/internal/operators/mergeScan.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar InnerSubscriber_1 = require(\"../InnerSubscriber\");\nfunction mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nexports.mergeScan = mergeScan;\nvar MergeScanOperator = (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexports.MergeScanOperator = MergeScanOperator;\nvar MergeScanSubscriber = (function (_super) {\n    __extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this.acc = acc;\n        _this.concurrent = concurrent;\n        _this.hasValue = false;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var destination = this.destination;\n            var ish = void 0;\n            try {\n                var accumulator = this.accumulator;\n                ish = accumulator(this.acc, value, index);\n            }\n            catch (e) {\n                return destination.error(e);\n            }\n            this.active++;\n            this._innerSub(ish, value, index);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        var innerSubscriber = new InnerSubscriber_1.InnerSubscriber(this, value, index);\n        var destination = this.destination;\n        destination.add(innerSubscriber);\n        var innerSubscription = subscribeToResult_1.subscribeToResult(this, ish, undefined, undefined, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        var destination = this.destination;\n        destination.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeScanSubscriber = MergeScanSubscriber;\n//# sourceMappingURL=mergeScan.js.map"]},"metadata":{},"sourceType":"script"}