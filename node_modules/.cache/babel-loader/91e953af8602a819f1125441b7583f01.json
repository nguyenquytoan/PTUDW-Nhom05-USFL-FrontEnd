{"ast":null,"code":"'use strict';\n\nvar FS = require('fs');\n\nvar PATH = require('path');\n\nvar yaml = require('js-yaml');\n/**\n * Read and/or extend/replace default config file,\n * prepare and optimize plugins array.\n *\n * @param {Object} [config] input config\n * @return {Object} output config\n */\n\n\nmodule.exports = function (config) {\n  var defaults;\n  config = typeof config == 'object' && config || {};\n\n  if (config.plugins && !Array.isArray(config.plugins)) {\n    return {\n      error: 'Error: Invalid plugins list. Provided \\'plugins\\' in config should be an array.'\n    };\n  }\n\n  if (config.full) {\n    defaults = config;\n\n    if (Array.isArray(defaults.plugins)) {\n      defaults.plugins = preparePluginsArray(config, defaults.plugins);\n    }\n  } else {\n    defaults = Object.assign({}, yaml.safeLoad(FS.readFileSync(__dirname + '/../../.svgo.yml', 'utf8')));\n    defaults.plugins = preparePluginsArray(config, defaults.plugins || []);\n    defaults = extendConfig(defaults, config);\n  }\n\n  if ('floatPrecision' in config && Array.isArray(defaults.plugins)) {\n    defaults.plugins.forEach(function (plugin) {\n      if (plugin.params && 'floatPrecision' in plugin.params) {\n        // Don't touch default plugin params\n        plugin.params = Object.assign({}, plugin.params, {\n          floatPrecision: config.floatPrecision\n        });\n      }\n    });\n  }\n\n  if ('datauri' in config) {\n    defaults.datauri = config.datauri;\n  }\n\n  if (Array.isArray(defaults.plugins)) {\n    defaults.plugins = optimizePluginsArray(defaults.plugins);\n  }\n\n  return defaults;\n};\n/**\n * Require() all plugins in array.\n *\n * @param {Object} config\n * @param {Array} plugins input plugins array\n * @return {Array} input plugins array of arrays\n */\n\n\nfunction preparePluginsArray(config, plugins) {\n  var plugin, key;\n  return plugins.map(function (item) {\n    // {}\n    if (typeof item === 'object') {\n      key = Object.keys(item)[0]; // custom\n\n      if (typeof item[key] === 'object' && item[key].fn && typeof item[key].fn === 'function') {\n        plugin = setupCustomPlugin(key, item[key]);\n      } else {\n        plugin = setPluginActiveState(loadPlugin(config, key, item[key].path), item, key);\n        plugin.name = key;\n      } // name\n\n    } else {\n      plugin = loadPlugin(config, item);\n      plugin.name = item;\n\n      if (typeof plugin.params === 'object') {\n        plugin.params = Object.assign({}, plugin.params);\n      }\n    }\n\n    return plugin;\n  });\n}\n/**\n * Extend plugins with the custom config object.\n *\n * @param {Array} plugins input plugins\n * @param {Object} config config\n * @return {Array} output plugins\n */\n\n\nfunction extendConfig(defaults, config) {\n  var key; // plugins\n\n  if (config.plugins) {\n    config.plugins.forEach(function (item) {\n      // {}\n      if (typeof item === 'object') {\n        key = Object.keys(item)[0];\n\n        if (item[key] == null) {\n          console.error(`Error: '${key}' plugin is misconfigured! Have you padded its content in YML properly?\\n`);\n        } // custom\n\n\n        if (typeof item[key] === 'object' && item[key].fn && typeof item[key].fn === 'function') {\n          defaults.plugins.push(setupCustomPlugin(key, item[key])); // plugin defined via path\n        } else if (typeof item[key] === 'object' && item[key].path) {\n          defaults.plugins.push(setPluginActiveState(loadPlugin(config, undefined, item[key].path), item, key));\n        } else {\n          defaults.plugins.forEach(function (plugin) {\n            if (plugin.name === key) {\n              plugin = setPluginActiveState(plugin, item, key);\n            }\n          });\n        }\n      }\n    });\n  }\n\n  defaults.multipass = config.multipass; // svg2js\n\n  if (config.svg2js) {\n    defaults.svg2js = config.svg2js;\n  } // js2svg\n\n\n  if (config.js2svg) {\n    defaults.js2svg = config.js2svg;\n  }\n\n  return defaults;\n}\n/**\n * Setup and enable a custom plugin\n *\n * @param {String} plugin name\n * @param {Object} custom plugin\n * @return {Array} enabled plugin\n */\n\n\nfunction setupCustomPlugin(name, plugin) {\n  plugin.active = true;\n  plugin.params = Object.assign({}, plugin.params || {});\n  plugin.name = name;\n  return plugin;\n}\n/**\n * Try to group sequential elements of plugins array.\n *\n * @param {Object} plugins input plugins\n * @return {Array} output plugins\n */\n\n\nfunction optimizePluginsArray(plugins) {\n  var prev;\n  return plugins.reduce(function (plugins, item) {\n    if (prev && item.type == prev[0].type) {\n      prev.push(item);\n    } else {\n      plugins.push(prev = [item]);\n    }\n\n    return plugins;\n  }, []);\n}\n/**\n * Sets plugin to active or inactive state.\n *\n * @param {Object} plugin\n * @param {Object} item\n * @param {Object} key\n * @return {Object} plugin\n */\n\n\nfunction setPluginActiveState(plugin, item, key) {\n  // name: {}\n  if (typeof item[key] === 'object') {\n    plugin.params = Object.assign({}, plugin.params || {}, item[key]);\n    plugin.active = true; // name: false\n  } else if (item[key] === false) {\n    plugin.active = false; // name: true\n  } else if (item[key] === true) {\n    plugin.active = true;\n  }\n\n  return plugin;\n}\n/**\n * Loads default plugin using name or custom plugin defined via path in config.\n *\n * @param {Object} config\n * @param {Object} name\n * @param {Object} path\n * @return {Object} plugin\n */\n\n\nfunction loadPlugin(config, name, path) {\n  var plugin;\n\n  if (!path) {\n    plugin = require('../../plugins/' + name);\n  } else {\n    plugin = require(PATH.resolve(config.__DIR, path));\n  }\n\n  return Object.assign({}, plugin);\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/svgo/lib/svgo/config.js"],"names":["FS","require","PATH","yaml","module","exports","config","defaults","plugins","Array","isArray","error","full","preparePluginsArray","Object","assign","safeLoad","readFileSync","__dirname","extendConfig","forEach","plugin","params","floatPrecision","datauri","optimizePluginsArray","key","map","item","keys","fn","setupCustomPlugin","setPluginActiveState","loadPlugin","path","name","console","push","undefined","multipass","svg2js","js2svg","active","prev","reduce","type","resolve","__DIR"],"mappings":"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","sourcesContent":["'use strict';\n\nvar FS = require('fs');\nvar PATH = require('path');\nvar yaml = require('js-yaml');\n\n/**\n * Read and/or extend/replace default config file,\n * prepare and optimize plugins array.\n *\n * @param {Object} [config] input config\n * @return {Object} output config\n */\nmodule.exports = function(config) {\n\n    var defaults;\n    config = typeof config == 'object' && config || {};\n\n    if (config.plugins && !Array.isArray(config.plugins)) {\n        return { error: 'Error: Invalid plugins list. Provided \\'plugins\\' in config should be an array.' };\n    }\n\n    if (config.full) {\n        defaults = config;\n\n        if (Array.isArray(defaults.plugins)) {\n            defaults.plugins = preparePluginsArray(config, defaults.plugins);\n        }\n    } else {\n        defaults = Object.assign({}, yaml.safeLoad(FS.readFileSync(__dirname + '/../../.svgo.yml', 'utf8')));\n        defaults.plugins = preparePluginsArray(config, defaults.plugins || []);\n        defaults = extendConfig(defaults, config);\n    }\n\n    if ('floatPrecision' in config && Array.isArray(defaults.plugins)) {\n        defaults.plugins.forEach(function(plugin) {\n            if (plugin.params && ('floatPrecision' in plugin.params)) {\n                // Don't touch default plugin params\n                plugin.params = Object.assign({}, plugin.params, { floatPrecision: config.floatPrecision });\n            }\n        });\n    }\n\n    if ('datauri' in config) {\n        defaults.datauri = config.datauri;\n    }\n\n    if (Array.isArray(defaults.plugins)) {\n        defaults.plugins = optimizePluginsArray(defaults.plugins);\n    }\n\n    return defaults;\n\n};\n\n/**\n * Require() all plugins in array.\n *\n * @param {Object} config\n * @param {Array} plugins input plugins array\n * @return {Array} input plugins array of arrays\n */\nfunction preparePluginsArray(config, plugins) {\n\n    var plugin,\n        key;\n\n    return plugins.map(function(item) {\n\n        // {}\n        if (typeof item === 'object') {\n\n            key = Object.keys(item)[0];\n\n            // custom\n            if (typeof item[key] === 'object' && item[key].fn && typeof item[key].fn === 'function') {\n                plugin = setupCustomPlugin(key, item[key]);\n\n            } else {\n\n                plugin = setPluginActiveState(\n                    loadPlugin(config, key, item[key].path),\n                    item,\n                    key\n                );\n                plugin.name = key;\n            }\n\n        // name\n        } else {\n\n            plugin = loadPlugin(config, item);\n            plugin.name = item;\n            if (typeof plugin.params === 'object') {\n                plugin.params = Object.assign({}, plugin.params);\n            }\n\n        }\n\n        return plugin;\n\n    });\n\n}\n\n/**\n * Extend plugins with the custom config object.\n *\n * @param {Array} plugins input plugins\n * @param {Object} config config\n * @return {Array} output plugins\n */\nfunction extendConfig(defaults, config) {\n\n    var key;\n\n    // plugins\n    if (config.plugins) {\n\n        config.plugins.forEach(function(item) {\n\n            // {}\n            if (typeof item === 'object') {\n\n                key = Object.keys(item)[0];\n\n                if (item[key] == null) {\n                    console.error(`Error: '${key}' plugin is misconfigured! Have you padded its content in YML properly?\\n`);\n                }\n\n                // custom\n                if (typeof item[key] === 'object' && item[key].fn && typeof item[key].fn === 'function') {\n                    defaults.plugins.push(setupCustomPlugin(key, item[key]));\n\n                // plugin defined via path\n                } else if (typeof item[key] === 'object' && item[key].path) {\n                    defaults.plugins.push(setPluginActiveState(loadPlugin(config, undefined, item[key].path), item, key));\n\n                } else {\n                    defaults.plugins.forEach(function(plugin) {\n\n                        if (plugin.name === key) {\n                            plugin = setPluginActiveState(plugin, item, key);\n                        }\n                    });\n                }\n\n            }\n\n        });\n\n    }\n\n    defaults.multipass = config.multipass;\n\n    // svg2js\n    if (config.svg2js) {\n        defaults.svg2js = config.svg2js;\n    }\n\n    // js2svg\n    if (config.js2svg) {\n        defaults.js2svg = config.js2svg;\n    }\n\n    return defaults;\n\n}\n\n/**\n * Setup and enable a custom plugin\n *\n * @param {String} plugin name\n * @param {Object} custom plugin\n * @return {Array} enabled plugin\n */\nfunction setupCustomPlugin(name, plugin) {\n    plugin.active = true;\n    plugin.params = Object.assign({}, plugin.params || {});\n    plugin.name = name;\n\n    return plugin;\n}\n\n/**\n * Try to group sequential elements of plugins array.\n *\n * @param {Object} plugins input plugins\n * @return {Array} output plugins\n */\nfunction optimizePluginsArray(plugins) {\n\n    var prev;\n\n    return plugins.reduce(function(plugins, item) {\n        if (prev && item.type == prev[0].type) {\n            prev.push(item);\n        } else {\n            plugins.push(prev = [item]);\n        }\n        return plugins;\n    }, []);\n\n}\n\n/**\n * Sets plugin to active or inactive state.\n *\n * @param {Object} plugin\n * @param {Object} item\n * @param {Object} key\n * @return {Object} plugin\n */\nfunction setPluginActiveState(plugin, item, key) {\n    // name: {}\n    if (typeof item[key] === 'object') {\n        plugin.params = Object.assign({}, plugin.params || {}, item[key]);\n        plugin.active = true;\n\n    // name: false\n    } else if (item[key] === false) {\n        plugin.active = false;\n\n    // name: true\n    } else if (item[key] === true) {\n        plugin.active = true;\n    }\n\n    return plugin;\n}\n\n/**\n * Loads default plugin using name or custom plugin defined via path in config.\n *\n * @param {Object} config\n * @param {Object} name\n * @param {Object} path\n * @return {Object} plugin\n */\nfunction loadPlugin(config, name, path) {\n    var plugin;\n\n    if (!path) {\n        plugin = require('../../plugins/' + name);\n    } else {\n        plugin = require(PATH.resolve(config.__DIR, path));\n    }\n\n    return Object.assign({}, plugin);\n}\n"]},"metadata":{},"sourceType":"script"}