{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"chai\").assert,\n    isRegExp = require(\"../../reg-exp/is\");\n\ndescribe(\"reg-exp/is\", function () {\n  it(\"Should return true on regular expression\", function () {\n    assert.equal(isRegExp(/foo/), true);\n  });\n  it(\"Should return false on native regular expression with no common API exposed\", function () {\n    var re = /foo/;\n    re.test = null;\n    assert.equal(isRegExp(re), false);\n  });\n  it(\"Should return false on RegExp.prototype\", function () {\n    assert.equal(isRegExp(RegExp.prototype), false);\n  });\n  it(\"Should return false on regexp like string\", function () {\n    assert.equal(isRegExp(\"/foo/\"), false);\n  });\n  it(\"Should return false on plain object\", function () {\n    assert.equal(isRegExp({}), false);\n  });\n  it(\"Should return false on function\", function () {\n    assert.equal(isRegExp(function () {\n      return true;\n    }), false);\n  });\n  it(\"Should return false on array\", function () {\n    assert.equal(isRegExp([]), false);\n  });\n\n  if (typeof Object.create === \"function\") {\n    it(\"Should return false on object with no prototype\", function () {\n      assert.equal(isRegExp(Object.create(null)), false);\n    });\n  }\n\n  it(\"Should return false on string\", function () {\n    assert.equal(isRegExp(\"foo\"), false);\n  });\n  it(\"Should return false on empty string\", function () {\n    assert.equal(isRegExp(\"\"), false);\n  });\n  it(\"Should return false on number\", function () {\n    assert.equal(isRegExp(123), false);\n  });\n  it(\"Should return false on NaN\", function () {\n    assert.equal(isRegExp(NaN), false);\n  });\n  it(\"Should return false on boolean\", function () {\n    assert.equal(isRegExp(true), false);\n  });\n\n  if (typeof Symbol === \"function\") {\n    it(\"Should return false on symbol\", function () {\n      assert.equal(isRegExp(Symbol(\"foo\")), false);\n    });\n  }\n\n  it(\"Should return false on null\", function () {\n    assert.equal(isRegExp(null), false);\n  });\n  it(\"Should return false on undefined\", function () {\n    assert.equal(isRegExp(void 0), false);\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type/test/reg-exp/is.js"],"names":["assert","require","isRegExp","describe","it","equal","re","test","RegExp","prototype","Object","create","NaN","Symbol"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar assert   = require(\"chai\").assert\n  , isRegExp = require(\"../../reg-exp/is\");\n\ndescribe(\"reg-exp/is\", function () {\n\tit(\"Should return true on regular expression\", function () {\n\t\tassert.equal(isRegExp(/foo/), true);\n\t});\n\n\tit(\"Should return false on native regular expression with no common API exposed\", function () {\n\t\tvar re = /foo/;\n\t\tre.test = null;\n\t\tassert.equal(isRegExp(re), false);\n\t});\n\tit(\"Should return false on RegExp.prototype\", function () {\n\t\tassert.equal(isRegExp(RegExp.prototype), false);\n\t});\n\tit(\"Should return false on regexp like string\", function () {\n\t\tassert.equal(isRegExp(\"/foo/\"), false);\n\t});\n\n\tit(\"Should return false on plain object\", function () { assert.equal(isRegExp({}), false); });\n\tit(\"Should return false on function\", function () {\n\t\tassert.equal(isRegExp(function () { return true; }), false);\n\t});\n\n\tit(\"Should return false on array\", function () { assert.equal(isRegExp([]), false); });\n\tif (typeof Object.create === \"function\") {\n\t\tit(\"Should return false on object with no prototype\", function () {\n\t\t\tassert.equal(isRegExp(Object.create(null)), false);\n\t\t});\n\t}\n\tit(\"Should return false on string\", function () { assert.equal(isRegExp(\"foo\"), false); });\n\tit(\"Should return false on empty string\", function () { assert.equal(isRegExp(\"\"), false); });\n\tit(\"Should return false on number\", function () { assert.equal(isRegExp(123), false); });\n\tit(\"Should return false on NaN\", function () { assert.equal(isRegExp(NaN), false); });\n\tit(\"Should return false on boolean\", function () { assert.equal(isRegExp(true), false); });\n\tif (typeof Symbol === \"function\") {\n\t\tit(\"Should return false on symbol\", function () {\n\t\t\tassert.equal(isRegExp(Symbol(\"foo\")), false);\n\t\t});\n\t}\n\n\tit(\"Should return false on null\", function () { assert.equal(isRegExp(null), false); });\n\tit(\"Should return false on undefined\", function () { assert.equal(isRegExp(void 0), false); });\n});\n"]},"metadata":{},"sourceType":"script"}