{"ast":null,"code":"/**\n * @fileoverview Rule to flag for-in loops without if statements inside\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require `for-in` loops to include an `if` statement\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/guard-for-in\"\n    },\n    schema: [],\n    messages: {\n      wrap: \"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.\"\n    }\n  },\n\n  create(context) {\n    return {\n      ForInStatement(node) {\n        const body = node.body; // empty statement\n\n        if (body.type === \"EmptyStatement\") {\n          return;\n        } // if statement\n\n\n        if (body.type === \"IfStatement\") {\n          return;\n        } // empty block\n\n\n        if (body.type === \"BlockStatement\" && body.body.length === 0) {\n          return;\n        } // block with just if statement\n\n\n        if (body.type === \"BlockStatement\" && body.body.length === 1 && body.body[0].type === \"IfStatement\") {\n          return;\n        } // block that starts with if statement\n\n\n        if (body.type === \"BlockStatement\" && body.body.length >= 1 && body.body[0].type === \"IfStatement\") {\n          const i = body.body[0]; // ... whose consequent is a continue\n\n          if (i.consequent.type === \"ContinueStatement\") {\n            return;\n          } // ... whose consequent is a block that contains only a continue\n\n\n          if (i.consequent.type === \"BlockStatement\" && i.consequent.body.length === 1 && i.consequent.body[0].type === \"ContinueStatement\") {\n            return;\n          }\n        }\n\n        context.report({\n          node,\n          messageId: \"wrap\"\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/guard-for-in.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","wrap","create","context","ForInStatement","node","body","length","i","consequent","report","messageId"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,qDADX;AAEFC,MAAAA,QAAQ,EAAE,gBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,EAVN;AAWFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,IAAI,EAAE;AADA;AAXR,GADO;;AAiBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,WAAO;AAEHC,MAAAA,cAAc,CAACC,IAAD,EAAO;AACjB,cAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB,CADiB,CAGjB;;AACA,YAAIA,IAAI,CAACb,IAAL,KAAc,gBAAlB,EAAoC;AAChC;AACH,SANgB,CAQjB;;;AACA,YAAIa,IAAI,CAACb,IAAL,KAAc,aAAlB,EAAiC;AAC7B;AACH,SAXgB,CAajB;;;AACA,YAAIa,IAAI,CAACb,IAAL,KAAc,gBAAd,IAAkCa,IAAI,CAACA,IAAL,CAAUC,MAAV,KAAqB,CAA3D,EAA8D;AAC1D;AACH,SAhBgB,CAkBjB;;;AACA,YAAID,IAAI,CAACb,IAAL,KAAc,gBAAd,IAAkCa,IAAI,CAACA,IAAL,CAAUC,MAAV,KAAqB,CAAvD,IAA4DD,IAAI,CAACA,IAAL,CAAU,CAAV,EAAab,IAAb,KAAsB,aAAtF,EAAqG;AACjG;AACH,SArBgB,CAuBjB;;;AACA,YAAIa,IAAI,CAACb,IAAL,KAAc,gBAAd,IAAkCa,IAAI,CAACA,IAAL,CAAUC,MAAV,IAAoB,CAAtD,IAA2DD,IAAI,CAACA,IAAL,CAAU,CAAV,EAAab,IAAb,KAAsB,aAArF,EAAoG;AAChG,gBAAMe,CAAC,GAAGF,IAAI,CAACA,IAAL,CAAU,CAAV,CAAV,CADgG,CAGhG;;AACA,cAAIE,CAAC,CAACC,UAAF,CAAahB,IAAb,KAAsB,mBAA1B,EAA+C;AAC3C;AACH,WAN+F,CAQhG;;;AACA,cAAIe,CAAC,CAACC,UAAF,CAAahB,IAAb,KAAsB,gBAAtB,IAA0Ce,CAAC,CAACC,UAAF,CAAaH,IAAb,CAAkBC,MAAlB,KAA6B,CAAvE,IAA4EC,CAAC,CAACC,UAAF,CAAaH,IAAb,CAAkB,CAAlB,EAAqBb,IAArB,KAA8B,mBAA9G,EAAmI;AAC/H;AACH;AACJ;;AAEDU,QAAAA,OAAO,CAACO,MAAR,CAAe;AAAEL,UAAAA,IAAF;AAAQM,UAAAA,SAAS,EAAE;AAAnB,SAAf;AACH;;AAzCE,KAAP;AA4CH;;AA/DY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to flag for-in loops without if statements inside\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require `for-in` loops to include an `if` statement\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/guard-for-in\"\n        },\n\n        schema: [],\n        messages: {\n            wrap: \"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n\n            ForInStatement(node) {\n                const body = node.body;\n\n                // empty statement\n                if (body.type === \"EmptyStatement\") {\n                    return;\n                }\n\n                // if statement\n                if (body.type === \"IfStatement\") {\n                    return;\n                }\n\n                // empty block\n                if (body.type === \"BlockStatement\" && body.body.length === 0) {\n                    return;\n                }\n\n                // block with just if statement\n                if (body.type === \"BlockStatement\" && body.body.length === 1 && body.body[0].type === \"IfStatement\") {\n                    return;\n                }\n\n                // block that starts with if statement\n                if (body.type === \"BlockStatement\" && body.body.length >= 1 && body.body[0].type === \"IfStatement\") {\n                    const i = body.body[0];\n\n                    // ... whose consequent is a continue\n                    if (i.consequent.type === \"ContinueStatement\") {\n                        return;\n                    }\n\n                    // ... whose consequent is a block that contains only a continue\n                    if (i.consequent.type === \"BlockStatement\" && i.consequent.body.length === 1 && i.consequent.body[0].type === \"ContinueStatement\") {\n                        return;\n                    }\n                }\n\n                context.report({ node, messageId: \"wrap\" });\n            }\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}