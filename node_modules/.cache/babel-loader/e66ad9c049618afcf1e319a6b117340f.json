{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar assert = require('assert');\n\nvar context = require('vm').runInNewContext;\n\nvar util = require('../../'); // isArray\n\n\nassert.equal(true, util.isArray([]));\nassert.equal(true, util.isArray(Array()));\nassert.equal(true, util.isArray(new Array()));\nassert.equal(true, util.isArray(new Array(5)));\nassert.equal(true, util.isArray(new Array('with', 'some', 'entries')));\nassert.equal(true, util.isArray(context('Array')()));\nassert.equal(false, util.isArray({}));\nassert.equal(false, util.isArray({\n  push: function () {}\n}));\nassert.equal(false, util.isArray(/regexp/));\nassert.equal(false, util.isArray(new Error()));\nassert.equal(false, util.isArray(Object.create(Array.prototype))); // isRegExp\n\nassert.equal(true, util.isRegExp(/regexp/));\nassert.equal(true, util.isRegExp(RegExp()));\nassert.equal(true, util.isRegExp(new RegExp()));\nassert.equal(true, util.isRegExp(context('RegExp')()));\nassert.equal(false, util.isRegExp({}));\nassert.equal(false, util.isRegExp([]));\nassert.equal(false, util.isRegExp(new Date()));\nassert.equal(false, util.isRegExp(Object.create(RegExp.prototype))); // isDate\n\nassert.equal(true, util.isDate(new Date()));\nassert.equal(true, util.isDate(new Date(0)));\nassert.equal(true, util.isDate(new (context('Date'))()));\nassert.equal(false, util.isDate(Date()));\nassert.equal(false, util.isDate({}));\nassert.equal(false, util.isDate([]));\nassert.equal(false, util.isDate(new Error()));\nassert.equal(false, util.isDate(Object.create(Date.prototype))); // isError\n\nassert.equal(true, util.isError(new Error()));\nassert.equal(true, util.isError(new TypeError()));\nassert.equal(true, util.isError(new SyntaxError()));\nassert.equal(true, util.isError(new (context('Error'))()));\nassert.equal(true, util.isError(new (context('TypeError'))()));\nassert.equal(true, util.isError(new (context('SyntaxError'))()));\nassert.equal(false, util.isError({}));\nassert.equal(false, util.isError({\n  name: 'Error',\n  message: ''\n}));\nassert.equal(false, util.isError([]));\nassert.equal(true, util.isError(Object.create(Error.prototype))); // isObject\n\nassert.ok(util.isObject({}) === true); // _extend\n\nassert.deepEqual(util._extend({\n  a: 1\n}), {\n  a: 1\n});\nassert.deepEqual(util._extend({\n  a: 1\n}, []), {\n  a: 1\n});\nassert.deepEqual(util._extend({\n  a: 1\n}, null), {\n  a: 1\n});\nassert.deepEqual(util._extend({\n  a: 1\n}, true), {\n  a: 1\n});\nassert.deepEqual(util._extend({\n  a: 1\n}, false), {\n  a: 1\n});\nassert.deepEqual(util._extend({\n  a: 1\n}, {\n  b: 2\n}), {\n  a: 1,\n  b: 2\n});\nassert.deepEqual(util._extend({\n  a: 1,\n  b: 2\n}, {\n  b: 3\n}), {\n  a: 1,\n  b: 3\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/util/test/node/util.js"],"names":["assert","require","context","runInNewContext","util","equal","isArray","Array","push","Error","Object","create","prototype","isRegExp","RegExp","Date","isDate","isError","TypeError","SyntaxError","name","message","ok","isObject","deepEqual","_extend","a","b"],"mappings":"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","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nvar assert = require('assert');\nvar context = require('vm').runInNewContext;\n\nvar util = require('../../');\n\n// isArray\nassert.equal(true, util.isArray([]));\nassert.equal(true, util.isArray(Array()));\nassert.equal(true, util.isArray(new Array()));\nassert.equal(true, util.isArray(new Array(5)));\nassert.equal(true, util.isArray(new Array('with', 'some', 'entries')));\nassert.equal(true, util.isArray(context('Array')()));\nassert.equal(false, util.isArray({}));\nassert.equal(false, util.isArray({ push: function() {} }));\nassert.equal(false, util.isArray(/regexp/));\nassert.equal(false, util.isArray(new Error));\nassert.equal(false, util.isArray(Object.create(Array.prototype)));\n\n// isRegExp\nassert.equal(true, util.isRegExp(/regexp/));\nassert.equal(true, util.isRegExp(RegExp()));\nassert.equal(true, util.isRegExp(new RegExp()));\nassert.equal(true, util.isRegExp(context('RegExp')()));\nassert.equal(false, util.isRegExp({}));\nassert.equal(false, util.isRegExp([]));\nassert.equal(false, util.isRegExp(new Date()));\nassert.equal(false, util.isRegExp(Object.create(RegExp.prototype)));\n\n// isDate\nassert.equal(true, util.isDate(new Date()));\nassert.equal(true, util.isDate(new Date(0)));\nassert.equal(true, util.isDate(new (context('Date'))));\nassert.equal(false, util.isDate(Date()));\nassert.equal(false, util.isDate({}));\nassert.equal(false, util.isDate([]));\nassert.equal(false, util.isDate(new Error));\nassert.equal(false, util.isDate(Object.create(Date.prototype)));\n\n// isError\nassert.equal(true, util.isError(new Error));\nassert.equal(true, util.isError(new TypeError));\nassert.equal(true, util.isError(new SyntaxError));\nassert.equal(true, util.isError(new (context('Error'))));\nassert.equal(true, util.isError(new (context('TypeError'))));\nassert.equal(true, util.isError(new (context('SyntaxError'))));\nassert.equal(false, util.isError({}));\nassert.equal(false, util.isError({ name: 'Error', message: '' }));\nassert.equal(false, util.isError([]));\nassert.equal(true, util.isError(Object.create(Error.prototype)));\n\n// isObject\nassert.ok(util.isObject({}) === true);\n\n// _extend\nassert.deepEqual(util._extend({a:1}),             {a:1});\nassert.deepEqual(util._extend({a:1}, []),         {a:1});\nassert.deepEqual(util._extend({a:1}, null),       {a:1});\nassert.deepEqual(util._extend({a:1}, true),       {a:1});\nassert.deepEqual(util._extend({a:1}, false),      {a:1});\nassert.deepEqual(util._extend({a:1}, {b:2}),      {a:1, b:2});\nassert.deepEqual(util._extend({a:1, b:2}, {b:3}), {a:1, b:3});\n"]},"metadata":{},"sourceType":"script"}