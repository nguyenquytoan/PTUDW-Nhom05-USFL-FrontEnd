{"ast":null,"code":"// @ts-check\n\n/** @typedef {import(\"../typings\").HtmlTagObject} HtmlTagObject */\n\n/**\n * @file\n * This file provides to helper to create html as a object repesentation as\n * thoses objects are easier to modify than pure string representations\n *\n * Usage:\n * ```\n * const element = createHtmlTagObject('h1', {class: 'demo'}, 'Hello World');\n * const html = htmlTagObjectToString(element);\n * console.log(html) // -> <h1 class=\"demo\">Hello World</h1>\n * ```\n */\n\n/**\n * All html tag elements which must not contain innerHTML\n * @see https://www.w3.org/TR/html5/syntax.html#void-elements\n */\nconst voidTags = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];\n/**\n * Turn a tag definition into a html string\n * @param {HtmlTagObject} tagDefinition\n *  A tag element according to the htmlWebpackPlugin object notation\n *\n * @param xhtml {boolean}\n *   Wether the generated html should add closing slashes to be xhtml compliant\n */\n\nfunction htmlTagObjectToString(tagDefinition, xhtml) {\n  const attributes = Object.keys(tagDefinition.attributes || {}).filter(function (attributeName) {\n    return tagDefinition.attributes[attributeName] !== false;\n  }).map(function (attributeName) {\n    if (tagDefinition.attributes[attributeName] === true) {\n      return xhtml ? attributeName + '=\"' + attributeName + '\"' : attributeName;\n    }\n\n    return attributeName + '=\"' + tagDefinition.attributes[attributeName] + '\"';\n  });\n  return '<' + [tagDefinition.tagName].concat(attributes).join(' ') + (tagDefinition.voidTag && xhtml ? '/' : '') + '>' + (tagDefinition.innerHTML || '') + (tagDefinition.voidTag ? '' : '</' + tagDefinition.tagName + '>');\n}\n/**\n * Static helper to create a tag object to be get injected into the dom\n *\n * @param {string} tagName\n * the name of the tage e.g. 'div'\n *\n * @param {{[attributeName: string]: string|boolean}} [attributes]\n * tag attributes e.g. `{ 'class': 'example', disabled: true }`\n *\n * @param {string} [innerHTML]\n *\n * @returns {HtmlTagObject}\n */\n\n\nfunction createHtmlTagObject(tagName, attributes, innerHTML) {\n  return {\n    tagName: tagName,\n    voidTag: voidTags.indexOf(tagName) !== -1,\n    attributes: attributes || {},\n    innerHTML: innerHTML\n  };\n}\n\nmodule.exports = {\n  createHtmlTagObject: createHtmlTagObject,\n  htmlTagObjectToString: htmlTagObjectToString\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/html-webpack-plugin/lib/html-tags.js"],"names":["voidTags","htmlTagObjectToString","tagDefinition","xhtml","attributes","Object","keys","filter","attributeName","map","tagName","concat","join","voidTag","innerHTML","createHtmlTagObject","indexOf","module","exports"],"mappings":"AAAA;;AACA;;AACA;;;;;;;;;;;;;AAaA;;;;AAIA,MAAMA,QAAQ,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,IAAjB,EAAuB,KAAvB,EAA8B,OAA9B,EAAuC,IAAvC,EAA6C,KAA7C,EAAoD,OAApD,EAA6D,QAA7D,EAAuE,MAAvE,EAA+E,MAA/E,EAAuF,OAAvF,EAAgG,QAAhG,EAA0G,OAA1G,EAAmH,KAAnH,CAAjB;AAEA;;;;;;;;;AAQA,SAASC,qBAAT,CAAgCC,aAAhC,EAA+CC,KAA/C,EAAsD;AACpD,QAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYJ,aAAa,CAACE,UAAd,IAA4B,EAAxC,EAChBG,MADgB,CACT,UAAUC,aAAV,EAAyB;AAC/B,WAAON,aAAa,CAACE,UAAd,CAAyBI,aAAzB,MAA4C,KAAnD;AACD,GAHgB,EAIhBC,GAJgB,CAIZ,UAAUD,aAAV,EAAyB;AAC5B,QAAIN,aAAa,CAACE,UAAd,CAAyBI,aAAzB,MAA4C,IAAhD,EAAsD;AACpD,aAAOL,KAAK,GAAGK,aAAa,GAAG,IAAhB,GAAuBA,aAAvB,GAAuC,GAA1C,GAAgDA,aAA5D;AACD;;AACD,WAAOA,aAAa,GAAG,IAAhB,GAAuBN,aAAa,CAACE,UAAd,CAAyBI,aAAzB,CAAvB,GAAiE,GAAxE;AACD,GATgB,CAAnB;AAUA,SAAO,MAAM,CAACN,aAAa,CAACQ,OAAf,EAAwBC,MAAxB,CAA+BP,UAA/B,EAA2CQ,IAA3C,CAAgD,GAAhD,CAAN,IAA8DV,aAAa,CAACW,OAAd,IAAyBV,KAAzB,GAAiC,GAAjC,GAAuC,EAArG,IAA2G,GAA3G,IACJD,aAAa,CAACY,SAAd,IAA2B,EADvB,KAEJZ,aAAa,CAACW,OAAd,GAAwB,EAAxB,GAA6B,OAAOX,aAAa,CAACQ,OAArB,GAA+B,GAFxD,CAAP;AAGD;AAED;;;;;;;;;;;;;;;AAaA,SAASK,mBAAT,CAA8BL,OAA9B,EAAuCN,UAAvC,EAAmDU,SAAnD,EAA8D;AAC5D,SAAO;AACLJ,IAAAA,OAAO,EAAEA,OADJ;AAELG,IAAAA,OAAO,EAAEb,QAAQ,CAACgB,OAAT,CAAiBN,OAAjB,MAA8B,CAAC,CAFnC;AAGLN,IAAAA,UAAU,EAAEA,UAAU,IAAI,EAHrB;AAILU,IAAAA,SAAS,EAAEA;AAJN,GAAP;AAMD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AACfH,EAAAA,mBAAmB,EAAEA,mBADN;AAEfd,EAAAA,qBAAqB,EAAEA;AAFR,CAAjB","sourcesContent":["// @ts-check\n/** @typedef {import(\"../typings\").HtmlTagObject} HtmlTagObject */\n/**\n * @file\n * This file provides to helper to create html as a object repesentation as\n * thoses objects are easier to modify than pure string representations\n *\n * Usage:\n * ```\n * const element = createHtmlTagObject('h1', {class: 'demo'}, 'Hello World');\n * const html = htmlTagObjectToString(element);\n * console.log(html) // -> <h1 class=\"demo\">Hello World</h1>\n * ```\n */\n\n/**\n * All html tag elements which must not contain innerHTML\n * @see https://www.w3.org/TR/html5/syntax.html#void-elements\n */\nconst voidTags = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];\n\n/**\n * Turn a tag definition into a html string\n * @param {HtmlTagObject} tagDefinition\n *  A tag element according to the htmlWebpackPlugin object notation\n *\n * @param xhtml {boolean}\n *   Wether the generated html should add closing slashes to be xhtml compliant\n */\nfunction htmlTagObjectToString (tagDefinition, xhtml) {\n  const attributes = Object.keys(tagDefinition.attributes || {})\n    .filter(function (attributeName) {\n      return tagDefinition.attributes[attributeName] !== false;\n    })\n    .map(function (attributeName) {\n      if (tagDefinition.attributes[attributeName] === true) {\n        return xhtml ? attributeName + '=\"' + attributeName + '\"' : attributeName;\n      }\n      return attributeName + '=\"' + tagDefinition.attributes[attributeName] + '\"';\n    });\n  return '<' + [tagDefinition.tagName].concat(attributes).join(' ') + (tagDefinition.voidTag && xhtml ? '/' : '') + '>' +\n    (tagDefinition.innerHTML || '') +\n    (tagDefinition.voidTag ? '' : '</' + tagDefinition.tagName + '>');\n}\n\n/**\n * Static helper to create a tag object to be get injected into the dom\n *\n * @param {string} tagName\n * the name of the tage e.g. 'div'\n *\n * @param {{[attributeName: string]: string|boolean}} [attributes]\n * tag attributes e.g. `{ 'class': 'example', disabled: true }`\n *\n * @param {string} [innerHTML]\n *\n * @returns {HtmlTagObject}\n */\nfunction createHtmlTagObject (tagName, attributes, innerHTML) {\n  return {\n    tagName: tagName,\n    voidTag: voidTags.indexOf(tagName) !== -1,\n    attributes: attributes || {},\n    innerHTML: innerHTML\n  };\n}\n\nmodule.exports = {\n  createHtmlTagObject: createHtmlTagObject,\n  htmlTagObjectToString: htmlTagObjectToString\n};\n"]},"metadata":{},"sourceType":"script"}