{"ast":null,"code":"const path = require('path');\n\nconst glob = require('glob');\n\nconst minimatch = require('minimatch');\n\nconst readPkgUp = require('read-pkg-up');\n\nconst requireMainFilename = require('require-main-filename');\n\nclass TestExclude {\n  constructor(opts) {\n    Object.assign(this, {\n      cwd: process.cwd(),\n      include: false,\n      relativePath: true,\n      configKey: null,\n      // the key to load config from in package.json.\n      configPath: null,\n      // optionally override requireMainFilename.\n      configFound: false,\n      excludeNodeModules: true,\n      extension: false\n    }, opts);\n\n    if (typeof this.include === 'string') {\n      this.include = [this.include];\n    }\n\n    if (typeof this.exclude === 'string') {\n      this.exclude = [this.exclude];\n    }\n\n    if (typeof this.extension === 'string') {\n      this.extension = [this.extension];\n    } else if (!Array.isArray(this.extension) || this.extension.length === 0) {\n      this.extension = false;\n    }\n\n    if (!this.include && !this.exclude && this.configKey) {\n      Object.assign(this, this.pkgConf(this.configKey, this.configPath));\n    }\n\n    if (!this.exclude || !Array.isArray(this.exclude)) {\n      this.exclude = exportFunc.defaultExclude;\n    }\n\n    if (this.include && this.include.length > 0) {\n      this.include = prepGlobPatterns([].concat(this.include));\n    } else {\n      this.include = false;\n    }\n\n    if (this.excludeNodeModules && !this.exclude.includes('**/node_modules/**')) {\n      this.exclude = this.exclude.concat('**/node_modules/**');\n    }\n\n    this.exclude = prepGlobPatterns([].concat(this.exclude));\n    this.handleNegation();\n  }\n  /* handle the special case of negative globs\n   * (!**foo/bar); we create a new this.excludeNegated set\n   * of rules, which is applied after excludes and we\n   * move excluded include rules into this.excludes.\n   */\n\n\n  handleNegation() {\n    const noNeg = e => e.charAt(0) !== '!';\n\n    const onlyNeg = e => e.charAt(0) === '!';\n\n    const stripNeg = e => e.slice(1);\n\n    if (Array.isArray(this.include)) {\n      const includeNegated = this.include.filter(onlyNeg).map(stripNeg);\n      this.exclude.push(...prepGlobPatterns(includeNegated));\n      this.include = this.include.filter(noNeg);\n    }\n\n    this.excludeNegated = this.exclude.filter(onlyNeg).map(stripNeg);\n    this.exclude = this.exclude.filter(noNeg);\n    this.excludeNegated = prepGlobPatterns(this.excludeNegated);\n  }\n\n  shouldInstrument(filename, relFile) {\n    if (this.extension && !this.extension.some(ext => filename.endsWith(ext))) {\n      return false;\n    }\n\n    let pathToCheck = filename;\n\n    if (this.relativePath) {\n      relFile = relFile || path.relative(this.cwd, filename); // Don't instrument files that are outside of the current working directory.\n\n      if (/^\\.\\./.test(path.relative(this.cwd, filename))) {\n        return false;\n      }\n\n      pathToCheck = relFile.replace(/^\\.[\\\\/]/, ''); // remove leading './' or '.\\'.\n    }\n\n    const dot = {\n      dot: true\n    };\n\n    const matches = pattern => minimatch(pathToCheck, pattern, dot);\n\n    return (!this.include || this.include.some(matches)) && (!this.exclude.some(matches) || this.excludeNegated.some(matches));\n  }\n\n  pkgConf(key, path) {\n    const cwd = path || requireMainFilename(require);\n    const obj = readPkgUp.sync({\n      cwd\n    });\n\n    if (obj.pkg && obj.pkg[key] && typeof obj.pkg[key] === 'object') {\n      this.configFound = true;\n      return obj.pkg[key];\n    }\n\n    return {};\n  }\n\n  globSync(cwd = this.cwd) {\n    const globPatterns = getExtensionPattern(this.extension || []);\n    const globOptions = {\n      cwd,\n      nodir: true,\n      dot: true\n    };\n    /* If we don't have any excludeNegated then we can optimize glob by telling\n     * it to not iterate into unwanted directory trees (like node_modules). */\n\n    if (this.excludeNegated.length === 0) {\n      globOptions.ignore = this.exclude;\n    }\n\n    return glob.sync(globPatterns, globOptions).filter(file => this.shouldInstrument(path.resolve(cwd, file)));\n  }\n\n}\n\nfunction prepGlobPatterns(patterns) {\n  return patterns.reduce((result, pattern) => {\n    // Allow gitignore style of directory exclusion\n    if (!/\\/\\*\\*$/.test(pattern)) {\n      result = result.concat(pattern.replace(/\\/$/, '') + '/**');\n    } // Any rules of the form **/foo.js, should also match foo.js.\n\n\n    if (/^\\*\\*\\//.test(pattern)) {\n      result = result.concat(pattern.replace(/^\\*\\*\\//, ''));\n    }\n\n    return result.concat(pattern);\n  }, []);\n}\n\nfunction getExtensionPattern(extension) {\n  switch (extension.length) {\n    case 0:\n      return '**';\n\n    case 1:\n      return `**/*${extension[0]}`;\n\n    default:\n      return `**/*{${extension.join()}}`;\n  }\n}\n\nconst exportFunc = opts => new TestExclude(opts);\n\nconst devConfigs = ['ava', 'babel', 'jest', 'nyc', 'rollup', 'webpack'];\nexportFunc.defaultExclude = ['coverage/**', 'packages/*/test/**', 'test/**', 'test{,-*}.js', '**/*{.,-}test.js', '**/__tests__/**', `**/{${devConfigs.join()}}.config.js`];\nmodule.exports = exportFunc;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/test-exclude/index.js"],"names":["path","require","glob","minimatch","readPkgUp","requireMainFilename","TestExclude","constructor","opts","Object","assign","cwd","process","include","relativePath","configKey","configPath","configFound","excludeNodeModules","extension","exclude","Array","isArray","length","pkgConf","exportFunc","defaultExclude","prepGlobPatterns","concat","includes","handleNegation","noNeg","e","charAt","onlyNeg","stripNeg","slice","includeNegated","filter","map","push","excludeNegated","shouldInstrument","filename","relFile","some","ext","endsWith","pathToCheck","relative","test","replace","dot","matches","pattern","key","obj","sync","pkg","globSync","globPatterns","getExtensionPattern","globOptions","nodir","ignore","file","resolve","patterns","reduce","result","join","devConfigs","module","exports"],"mappings":"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","sourcesContent":["const path = require('path');\nconst glob = require('glob');\nconst minimatch = require('minimatch');\nconst readPkgUp = require('read-pkg-up');\nconst requireMainFilename = require('require-main-filename');\n\nclass TestExclude {\n    constructor(opts) {\n        Object.assign(\n            this,\n            {\n                cwd: process.cwd(),\n                include: false,\n                relativePath: true,\n                configKey: null, // the key to load config from in package.json.\n                configPath: null, // optionally override requireMainFilename.\n                configFound: false,\n                excludeNodeModules: true,\n                extension: false\n            },\n            opts\n        );\n\n        if (typeof this.include === 'string') {\n            this.include = [this.include];\n        }\n\n        if (typeof this.exclude === 'string') {\n            this.exclude = [this.exclude];\n        }\n\n        if (typeof this.extension === 'string') {\n            this.extension = [this.extension];\n        } else if (\n            !Array.isArray(this.extension) ||\n            this.extension.length === 0\n        ) {\n            this.extension = false;\n        }\n\n        if (!this.include && !this.exclude && this.configKey) {\n            Object.assign(this, this.pkgConf(this.configKey, this.configPath));\n        }\n\n        if (!this.exclude || !Array.isArray(this.exclude)) {\n            this.exclude = exportFunc.defaultExclude;\n        }\n\n        if (this.include && this.include.length > 0) {\n            this.include = prepGlobPatterns([].concat(this.include));\n        } else {\n            this.include = false;\n        }\n\n        if (\n            this.excludeNodeModules &&\n            !this.exclude.includes('**/node_modules/**')\n        ) {\n            this.exclude = this.exclude.concat('**/node_modules/**');\n        }\n\n        this.exclude = prepGlobPatterns([].concat(this.exclude));\n\n        this.handleNegation();\n    }\n\n    /* handle the special case of negative globs\n     * (!**foo/bar); we create a new this.excludeNegated set\n     * of rules, which is applied after excludes and we\n     * move excluded include rules into this.excludes.\n     */\n    handleNegation() {\n        const noNeg = e => e.charAt(0) !== '!';\n        const onlyNeg = e => e.charAt(0) === '!';\n        const stripNeg = e => e.slice(1);\n\n        if (Array.isArray(this.include)) {\n            const includeNegated = this.include.filter(onlyNeg).map(stripNeg);\n            this.exclude.push(...prepGlobPatterns(includeNegated));\n            this.include = this.include.filter(noNeg);\n        }\n\n        this.excludeNegated = this.exclude.filter(onlyNeg).map(stripNeg);\n        this.exclude = this.exclude.filter(noNeg);\n        this.excludeNegated = prepGlobPatterns(this.excludeNegated);\n    }\n\n    shouldInstrument(filename, relFile) {\n        if (\n            this.extension &&\n            !this.extension.some(ext => filename.endsWith(ext))\n        ) {\n            return false;\n        }\n\n        let pathToCheck = filename;\n\n        if (this.relativePath) {\n            relFile = relFile || path.relative(this.cwd, filename);\n\n            // Don't instrument files that are outside of the current working directory.\n            if (/^\\.\\./.test(path.relative(this.cwd, filename))) {\n                return false;\n            }\n\n            pathToCheck = relFile.replace(/^\\.[\\\\/]/, ''); // remove leading './' or '.\\'.\n        }\n\n        const dot = { dot: true };\n        const matches = pattern => minimatch(pathToCheck, pattern, dot);\n        return (\n            (!this.include || this.include.some(matches)) &&\n            (!this.exclude.some(matches) || this.excludeNegated.some(matches))\n        );\n    }\n\n    pkgConf(key, path) {\n        const cwd = path || requireMainFilename(require);\n        const obj = readPkgUp.sync({ cwd });\n\n        if (obj.pkg && obj.pkg[key] && typeof obj.pkg[key] === 'object') {\n            this.configFound = true;\n\n            return obj.pkg[key];\n        }\n\n        return {};\n    }\n\n    globSync(cwd = this.cwd) {\n        const globPatterns = getExtensionPattern(this.extension || []);\n        const globOptions = { cwd, nodir: true, dot: true };\n        /* If we don't have any excludeNegated then we can optimize glob by telling\n         * it to not iterate into unwanted directory trees (like node_modules). */\n        if (this.excludeNegated.length === 0) {\n            globOptions.ignore = this.exclude;\n        }\n\n        return glob\n            .sync(globPatterns, globOptions)\n            .filter(file => this.shouldInstrument(path.resolve(cwd, file)));\n    }\n}\n\nfunction prepGlobPatterns(patterns) {\n    return patterns.reduce((result, pattern) => {\n        // Allow gitignore style of directory exclusion\n        if (!/\\/\\*\\*$/.test(pattern)) {\n            result = result.concat(pattern.replace(/\\/$/, '') + '/**');\n        }\n\n        // Any rules of the form **/foo.js, should also match foo.js.\n        if (/^\\*\\*\\//.test(pattern)) {\n            result = result.concat(pattern.replace(/^\\*\\*\\//, ''));\n        }\n\n        return result.concat(pattern);\n    }, []);\n}\n\nfunction getExtensionPattern(extension) {\n    switch (extension.length) {\n        case 0:\n            return '**';\n        case 1:\n            return `**/*${extension[0]}`;\n        default:\n            return `**/*{${extension.join()}}`;\n    }\n}\n\nconst exportFunc = opts => new TestExclude(opts);\n\nconst devConfigs = ['ava', 'babel', 'jest', 'nyc', 'rollup', 'webpack'];\n\nexportFunc.defaultExclude = [\n    'coverage/**',\n    'packages/*/test/**',\n    'test/**',\n    'test{,-*}.js',\n    '**/*{.,-}test.js',\n    '**/__tests__/**',\n    `**/{${devConfigs.join()}}.config.js`\n];\n\nmodule.exports = exportFunc;\n"]},"metadata":{},"sourceType":"script"}