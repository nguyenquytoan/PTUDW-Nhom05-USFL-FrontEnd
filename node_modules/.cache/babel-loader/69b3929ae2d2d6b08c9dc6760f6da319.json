{"ast":null,"code":"/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.mjs';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.mjs';\nimport { precachePlugins } from './utils/precachePlugins.mjs';\nimport './_version.mjs';\n\nconst installListener = event => {\n  const precacheController = getOrCreatePrecacheController();\n  const plugins = precachePlugins.get();\n  event.waitUntil(precacheController.install({\n    event,\n    plugins\n  }).catch(error => {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.error(`Service worker installation failed. It will ` + `be retried automatically during the next navigation.`);\n    } // Re-throw the error to ensure installation fails.\n\n\n    throw error;\n  }));\n};\n\nconst activateListener = event => {\n  const precacheController = getOrCreatePrecacheController();\n  const plugins = precachePlugins.get();\n  event.waitUntil(precacheController.activate({\n    event,\n    plugins\n  }));\n};\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n *\n * @alias workbox.precaching.precache\n */\n\n\nexport const precache = entries => {\n  const precacheController = getOrCreatePrecacheController();\n  precacheController.addToCacheList(entries);\n\n  if (entries.length > 0) {\n    // NOTE: these listeners will only be added once (even if the `precache()`\n    // method is called multiple times) because event listeners are implemented\n    // as a set, where each listener must be unique.\n    addEventListener('install', installListener);\n    addEventListener('activate', activateListener);\n  }\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-precaching/precache.mjs"],"names":["logger","getOrCreatePrecacheController","precachePlugins","installListener","event","precacheController","plugins","get","waitUntil","install","catch","error","process","env","NODE_ENV","activateListener","activate","precache","entries","addToCacheList","length","addEventListener"],"mappings":"AAAA;;;;;;;AAQA,SAAQA,MAAR,QAAqB,kCAArB;AACA,SAAQC,6BAAR,QAA4C,2CAA5C;AACA,SAAQC,eAAR,QAA8B,6BAA9B;AACA,OAAO,gBAAP;;AAGA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,QAAMC,kBAAkB,GAAGJ,6BAA6B,EAAxD;AACA,QAAMK,OAAO,GAAGJ,eAAe,CAACK,GAAhB,EAAhB;AAEAH,EAAAA,KAAK,CAACI,SAAN,CACIH,kBAAkB,CAACI,OAAnB,CAA2B;AAACL,IAAAA,KAAD;AAAQE,IAAAA;AAAR,GAA3B,EACKI,KADL,CACYC,KAAD,IAAW;AAChB,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCd,MAAAA,MAAM,CAACW,KAAP,CAAc,8CAAD,GACZ,sDADD;AAED,KAJe,CAKhB;;;AACA,UAAMA,KAAN;AACD,GARL,CADJ;AAWD,CAfD;;AAiBA,MAAMI,gBAAgB,GAAIX,KAAD,IAAW;AAClC,QAAMC,kBAAkB,GAAGJ,6BAA6B,EAAxD;AACA,QAAMK,OAAO,GAAGJ,eAAe,CAACK,GAAhB,EAAhB;AAEAH,EAAAA,KAAK,CAACI,SAAN,CAAgBH,kBAAkB,CAACW,QAAnB,CAA4B;AAACZ,IAAAA,KAAD;AAAQE,IAAAA;AAAR,GAA5B,CAAhB;AACD,CALD;AAOA;;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,MAAMW,QAAQ,GAAIC,OAAD,IAAa;AACnC,QAAMb,kBAAkB,GAAGJ,6BAA6B,EAAxD;AACAI,EAAAA,kBAAkB,CAACc,cAAnB,CAAkCD,OAAlC;;AAEA,MAAIA,OAAO,CAACE,MAAR,GAAiB,CAArB,EAAwB;AACtB;AACA;AACA;AACAC,IAAAA,gBAAgB,CAAC,SAAD,EAAYlB,eAAZ,CAAhB;AACAkB,IAAAA,gBAAgB,CAAC,UAAD,EAAaN,gBAAb,CAAhB;AACD;AACF,CAXM","sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {getOrCreatePrecacheController} from './utils/getOrCreatePrecacheController.mjs';\nimport {precachePlugins} from './utils/precachePlugins.mjs';\nimport './_version.mjs';\n\n\nconst installListener = (event) => {\n  const precacheController = getOrCreatePrecacheController();\n  const plugins = precachePlugins.get();\n\n  event.waitUntil(\n      precacheController.install({event, plugins})\n          .catch((error) => {\n            if (process.env.NODE_ENV !== 'production') {\n              logger.error(`Service worker installation failed. It will ` +\n              `be retried automatically during the next navigation.`);\n            }\n            // Re-throw the error to ensure installation fails.\n            throw error;\n          })\n  );\n};\n\nconst activateListener = (event) => {\n  const precacheController = getOrCreatePrecacheController();\n  const plugins = precachePlugins.get();\n\n  event.waitUntil(precacheController.activate({event, plugins}));\n};\n\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n *\n * @alias workbox.precaching.precache\n */\nexport const precache = (entries) => {\n  const precacheController = getOrCreatePrecacheController();\n  precacheController.addToCacheList(entries);\n\n  if (entries.length > 0) {\n    // NOTE: these listeners will only be added once (even if the `precache()`\n    // method is called multiple times) because event listeners are implemented\n    // as a set, where each listener must be unique.\n    addEventListener('install', installListener);\n    addEventListener('activate', activateListener);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}