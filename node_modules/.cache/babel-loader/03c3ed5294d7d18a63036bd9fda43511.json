{"ast":null,"code":"var List = require('css-tree').List;\n\nvar resolveKeyword = require('css-tree').keyword;\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar walk = require('css-tree').walk;\n\nfunction addRuleToMap(map, item, list, single) {\n  var node = item.data;\n  var name = resolveKeyword(node.name).basename;\n  var id = node.name.toLowerCase() + '/' + (node.prelude ? node.prelude.id : null);\n\n  if (!hasOwnProperty.call(map, name)) {\n    map[name] = Object.create(null);\n  }\n\n  if (single) {\n    delete map[name][id];\n  }\n\n  if (!hasOwnProperty.call(map[name], id)) {\n    map[name][id] = new List();\n  }\n\n  map[name][id].append(list.remove(item));\n}\n\nfunction relocateAtrules(ast, options) {\n  var collected = Object.create(null);\n  var topInjectPoint = null;\n  ast.children.each(function (node, item, list) {\n    if (node.type === 'Atrule') {\n      var name = resolveKeyword(node.name).basename;\n\n      switch (name) {\n        case 'keyframes':\n          addRuleToMap(collected, item, list, true);\n          return;\n\n        case 'media':\n          if (options.forceMediaMerge) {\n            addRuleToMap(collected, item, list, false);\n            return;\n          }\n\n          break;\n      }\n\n      if (topInjectPoint === null && name !== 'charset' && name !== 'import') {\n        topInjectPoint = item;\n      }\n    } else {\n      if (topInjectPoint === null) {\n        topInjectPoint = item;\n      }\n    }\n  });\n\n  for (var atrule in collected) {\n    for (var id in collected[atrule]) {\n      ast.children.insertList(collected[atrule][id], atrule === 'media' ? null : topInjectPoint);\n    }\n  }\n}\n\n;\n\nfunction isMediaRule(node) {\n  return node.type === 'Atrule' && node.name === 'media';\n}\n\nfunction processAtrule(node, item, list) {\n  if (!isMediaRule(node)) {\n    return;\n  }\n\n  var prev = item.prev && item.prev.data;\n\n  if (!prev || !isMediaRule(prev)) {\n    return;\n  } // merge @media with same query\n\n\n  if (node.prelude && prev.prelude && node.prelude.id === prev.prelude.id) {\n    prev.block.children.appendList(node.block.children);\n    list.remove(item); // TODO: use it when we can refer to several points in source\n    // prev.loc = {\n    //     primary: prev.loc,\n    //     merged: node.loc\n    // };\n  }\n}\n\nmodule.exports = function rejoinAtrule(ast, options) {\n  relocateAtrules(ast, options);\n  walk(ast, {\n    visit: 'Atrule',\n    reverse: true,\n    enter: processAtrule\n  });\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/csso/lib/restructure/1-mergeAtrule.js"],"names":["List","require","resolveKeyword","keyword","hasOwnProperty","Object","prototype","walk","addRuleToMap","map","item","list","single","node","data","name","basename","id","toLowerCase","prelude","call","create","append","remove","relocateAtrules","ast","options","collected","topInjectPoint","children","each","type","forceMediaMerge","atrule","insertList","isMediaRule","processAtrule","prev","block","appendList","module","exports","rejoinAtrule","visit","reverse","enter"],"mappings":"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","sourcesContent":["var List = require('css-tree').List;\nvar resolveKeyword = require('css-tree').keyword;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar walk = require('css-tree').walk;\n\nfunction addRuleToMap(map, item, list, single) {\n    var node = item.data;\n    var name = resolveKeyword(node.name).basename;\n    var id = node.name.toLowerCase() + '/' + (node.prelude ? node.prelude.id : null);\n\n    if (!hasOwnProperty.call(map, name)) {\n        map[name] = Object.create(null);\n    }\n\n    if (single) {\n        delete map[name][id];\n    }\n\n    if (!hasOwnProperty.call(map[name], id)) {\n        map[name][id] = new List();\n    }\n\n    map[name][id].append(list.remove(item));\n}\n\nfunction relocateAtrules(ast, options) {\n    var collected = Object.create(null);\n    var topInjectPoint = null;\n\n    ast.children.each(function(node, item, list) {\n        if (node.type === 'Atrule') {\n            var name = resolveKeyword(node.name).basename;\n\n            switch (name) {\n                case 'keyframes':\n                    addRuleToMap(collected, item, list, true);\n                    return;\n\n                case 'media':\n                    if (options.forceMediaMerge) {\n                        addRuleToMap(collected, item, list, false);\n                        return;\n                    }\n                    break;\n            }\n\n            if (topInjectPoint === null &&\n                name !== 'charset' &&\n                name !== 'import') {\n                topInjectPoint = item;\n            }\n        } else {\n            if (topInjectPoint === null) {\n                topInjectPoint = item;\n            }\n        }\n    });\n\n    for (var atrule in collected) {\n        for (var id in collected[atrule]) {\n            ast.children.insertList(\n                collected[atrule][id],\n                atrule === 'media' ? null : topInjectPoint\n            );\n        }\n    }\n};\n\nfunction isMediaRule(node) {\n    return node.type === 'Atrule' && node.name === 'media';\n}\n\nfunction processAtrule(node, item, list) {\n    if (!isMediaRule(node)) {\n        return;\n    }\n\n    var prev = item.prev && item.prev.data;\n\n    if (!prev || !isMediaRule(prev)) {\n        return;\n    }\n\n    // merge @media with same query\n    if (node.prelude &&\n        prev.prelude &&\n        node.prelude.id === prev.prelude.id) {\n        prev.block.children.appendList(node.block.children);\n        list.remove(item);\n\n        // TODO: use it when we can refer to several points in source\n        // prev.loc = {\n        //     primary: prev.loc,\n        //     merged: node.loc\n        // };\n    }\n}\n\nmodule.exports = function rejoinAtrule(ast, options) {\n    relocateAtrules(ast, options);\n\n    walk(ast, {\n        visit: 'Atrule',\n        reverse: true,\n        enter: processAtrule\n    });\n};\n"]},"metadata":{},"sourceType":"script"}