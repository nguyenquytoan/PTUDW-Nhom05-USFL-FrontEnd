{"ast":null,"code":"\"use strict\";\n\nvar _helpers = require(\"./util/helpers\");\n\n(0, _helpers.test)('comments', '/*test comment*/h2', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, '/*test comment*/');\n  t.deepEqual(tree.nodes[0].nodes[1].value, 'h2');\n});\n(0, _helpers.test)('comments (2)', '.a  /*test comment*/label', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].type, 'class');\n  t.deepEqual(tree.nodes[0].nodes[1].type, 'combinator');\n  t.deepEqual(tree.nodes[0].nodes[1].value, ' ');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.after, ' ');\n  t.deepEqual(tree.nodes[0].nodes[1].rawSpaceAfter, ' /*test comment*/');\n  t.deepEqual(tree.nodes[0].nodes[2].type, 'tag');\n});\n(0, _helpers.test)('comments (3)', '.a  /*test comment*/  label', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].type, 'class');\n  t.deepEqual(tree.nodes[0].nodes[1].type, 'combinator');\n  t.deepEqual(tree.nodes[0].nodes[1].value, ' ');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.before, '   ');\n  t.deepEqual(tree.nodes[0].nodes[1].rawSpaceBefore, '  /*test comment*/ ');\n  t.deepEqual(tree.nodes[0].nodes[2].type, 'tag');\n});\n(0, _helpers.test)('multiple comments and other things', 'h1/*test*/h2/*test*/.test/*test*/', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].type, 'tag', 'should have a tag');\n  t.deepEqual(tree.nodes[0].nodes[1].type, 'comment', 'should have a comment');\n  t.deepEqual(tree.nodes[0].nodes[2].type, 'tag', 'should have a tag');\n  t.deepEqual(tree.nodes[0].nodes[3].type, 'comment', 'should have a comment');\n  t.deepEqual(tree.nodes[0].nodes[4].type, 'class', 'should have a class name');\n  t.deepEqual(tree.nodes[0].nodes[5].type, 'comment', 'should have a comment');\n});\n(0, _helpers.test)('ending in comment', \".bar /* comment 3 */\", function (t, tree) {\n  var classname = tree.nodes[0].nodes[0];\n  t.deepEqual(classname.type, 'class', 'should have a tag');\n  t.deepEqual(classname.spaces.after, ' ');\n  t.deepEqual(classname.raws.spaces.after, ' /* comment 3 */');\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-selector-parser/dist/__tests__/comments.js"],"names":["_helpers","require","test","t","tree","deepEqual","nodes","value","type","spaces","after","rawSpaceAfter","before","rawSpaceBefore","classname","raws"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,gBAAD,CAAtB;;AAEA,CAAC,GAAGD,QAAQ,CAACE,IAAb,EAAmB,UAAnB,EAA+B,oBAA/B,EAAqD,UAAUC,CAAV,EAAaC,IAAb,EAAmB;AACtED,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBC,KAAnC,EAA0C,kBAA1C;AACAJ,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBC,KAAnC,EAA0C,IAA1C;AACD,CAHD;AAIA,CAAC,GAAGP,QAAQ,CAACE,IAAb,EAAmB,cAAnB,EAAmC,2BAAnC,EAAgE,UAAUC,CAAV,EAAaC,IAAb,EAAmB;AACjFD,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBE,IAAnC,EAAyC,OAAzC;AACAL,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBE,IAAnC,EAAyC,YAAzC;AACAL,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBC,KAAnC,EAA0C,GAA1C;AACAJ,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBG,MAAvB,CAA8BC,KAA1C,EAAiD,GAAjD;AACAP,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBK,aAAnC,EAAkD,mBAAlD;AACAR,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBE,IAAnC,EAAyC,KAAzC;AACD,CAPD;AAQA,CAAC,GAAGR,QAAQ,CAACE,IAAb,EAAmB,cAAnB,EAAmC,6BAAnC,EAAkE,UAAUC,CAAV,EAAaC,IAAb,EAAmB;AACnFD,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBE,IAAnC,EAAyC,OAAzC;AACAL,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBE,IAAnC,EAAyC,YAAzC;AACAL,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBC,KAAnC,EAA0C,GAA1C;AACAJ,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBG,MAAvB,CAA8BG,MAA1C,EAAkD,KAAlD;AACAT,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBO,cAAnC,EAAmD,qBAAnD;AACAV,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBE,IAAnC,EAAyC,KAAzC;AACD,CAPD;AAQA,CAAC,GAAGR,QAAQ,CAACE,IAAb,EAAmB,oCAAnB,EAAyD,mCAAzD,EAA8F,UAAUC,CAAV,EAAaC,IAAb,EAAmB;AAC/GD,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBE,IAAnC,EAAyC,KAAzC,EAAgD,mBAAhD;AACAL,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBE,IAAnC,EAAyC,SAAzC,EAAoD,uBAApD;AACAL,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBE,IAAnC,EAAyC,KAAzC,EAAgD,mBAAhD;AACAL,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBE,IAAnC,EAAyC,SAAzC,EAAoD,uBAApD;AACAL,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBE,IAAnC,EAAyC,OAAzC,EAAkD,0BAAlD;AACAL,EAAAA,CAAC,CAACE,SAAF,CAAYD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,EAAuBE,IAAnC,EAAyC,SAAzC,EAAoD,uBAApD;AACD,CAPD;AAQA,CAAC,GAAGR,QAAQ,CAACE,IAAb,EAAmB,mBAAnB,EAAwC,sBAAxC,EAAgE,UAAUC,CAAV,EAAaC,IAAb,EAAmB;AACjF,MAAIU,SAAS,GAAGV,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcA,KAAd,CAAoB,CAApB,CAAhB;AACAH,EAAAA,CAAC,CAACE,SAAF,CAAYS,SAAS,CAACN,IAAtB,EAA4B,OAA5B,EAAqC,mBAArC;AACAL,EAAAA,CAAC,CAACE,SAAF,CAAYS,SAAS,CAACL,MAAV,CAAiBC,KAA7B,EAAoC,GAApC;AACAP,EAAAA,CAAC,CAACE,SAAF,CAAYS,SAAS,CAACC,IAAV,CAAeN,MAAf,CAAsBC,KAAlC,EAAyC,kBAAzC;AACD,CALD","sourcesContent":["\"use strict\";\n\nvar _helpers = require(\"./util/helpers\");\n\n(0, _helpers.test)('comments', '/*test comment*/h2', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].value, '/*test comment*/');\n  t.deepEqual(tree.nodes[0].nodes[1].value, 'h2');\n});\n(0, _helpers.test)('comments (2)', '.a  /*test comment*/label', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].type, 'class');\n  t.deepEqual(tree.nodes[0].nodes[1].type, 'combinator');\n  t.deepEqual(tree.nodes[0].nodes[1].value, ' ');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.after, ' ');\n  t.deepEqual(tree.nodes[0].nodes[1].rawSpaceAfter, ' /*test comment*/');\n  t.deepEqual(tree.nodes[0].nodes[2].type, 'tag');\n});\n(0, _helpers.test)('comments (3)', '.a  /*test comment*/  label', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].type, 'class');\n  t.deepEqual(tree.nodes[0].nodes[1].type, 'combinator');\n  t.deepEqual(tree.nodes[0].nodes[1].value, ' ');\n  t.deepEqual(tree.nodes[0].nodes[1].spaces.before, '   ');\n  t.deepEqual(tree.nodes[0].nodes[1].rawSpaceBefore, '  /*test comment*/ ');\n  t.deepEqual(tree.nodes[0].nodes[2].type, 'tag');\n});\n(0, _helpers.test)('multiple comments and other things', 'h1/*test*/h2/*test*/.test/*test*/', function (t, tree) {\n  t.deepEqual(tree.nodes[0].nodes[0].type, 'tag', 'should have a tag');\n  t.deepEqual(tree.nodes[0].nodes[1].type, 'comment', 'should have a comment');\n  t.deepEqual(tree.nodes[0].nodes[2].type, 'tag', 'should have a tag');\n  t.deepEqual(tree.nodes[0].nodes[3].type, 'comment', 'should have a comment');\n  t.deepEqual(tree.nodes[0].nodes[4].type, 'class', 'should have a class name');\n  t.deepEqual(tree.nodes[0].nodes[5].type, 'comment', 'should have a comment');\n});\n(0, _helpers.test)('ending in comment', \".bar /* comment 3 */\", function (t, tree) {\n  var classname = tree.nodes[0].nodes[0];\n  t.deepEqual(classname.type, 'class', 'should have a tag');\n  t.deepEqual(classname.spaces.after, ' ');\n  t.deepEqual(classname.raws.spaces.after, ' /* comment 3 */');\n});"]},"metadata":{},"sourceType":"script"}