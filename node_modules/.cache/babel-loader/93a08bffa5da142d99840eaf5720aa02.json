{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = watch;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ansiEscapes() {\n  const data = _interopRequireDefault(require('ansi-escapes'));\n\n  _ansiEscapes = function _ansiEscapes() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _exit() {\n  const data = _interopRequireDefault(require('exit'));\n\n  _exit = function _exit() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _slash() {\n  const data = _interopRequireDefault(require('slash'));\n\n  _slash = function _slash() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function _jestMessageUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestValidate() {\n  const data = require('jest-validate');\n\n  _jestValidate = function _jestValidate() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestResolve() {\n  const data = _interopRequireDefault(require('jest-resolve'));\n\n  _jestResolve = function _jestResolve() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWatcher() {\n  const data = require('jest-watcher');\n\n  _jestWatcher = function _jestWatcher() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _getChangedFilesPromise = _interopRequireDefault(require('./getChangedFilesPromise'));\n\nvar _is_valid_path = _interopRequireDefault(require('./lib/is_valid_path'));\n\nvar _create_context = _interopRequireDefault(require('./lib/create_context'));\n\nvar _runJest = _interopRequireDefault(require('./runJest'));\n\nvar _update_global_config = _interopRequireDefault(require('./lib/update_global_config'));\n\nvar _SearchSource = _interopRequireDefault(require('./SearchSource'));\n\nvar _TestWatcher = _interopRequireDefault(require('./TestWatcher'));\n\nvar _FailedTestsCache = _interopRequireDefault(require('./FailedTestsCache'));\n\nvar _test_path_pattern = _interopRequireDefault(require('./plugins/test_path_pattern'));\n\nvar _test_name_pattern = _interopRequireDefault(require('./plugins/test_name_pattern'));\n\nvar _update_snapshots = _interopRequireDefault(require('./plugins/update_snapshots'));\n\nvar _update_snapshots_interactive = _interopRequireDefault(require('./plugins/update_snapshots_interactive'));\n\nvar _quit = _interopRequireDefault(require('./plugins/quit'));\n\nvar _watch_plugins_helpers = require('./lib/watch_plugins_helpers');\n\nvar _active_filters_message = _interopRequireDefault(require('./lib/active_filters_message'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst preRunMessagePrint = _jestUtil().preRunMessage.print;\n\nlet hasExitListener = false;\nconst INTERNAL_PLUGINS = [_test_path_pattern.default, _test_name_pattern.default, _update_snapshots.default, _update_snapshots_interactive.default, _quit.default];\nconst RESERVED_KEY_PLUGINS = new Map([[_update_snapshots.default, {\n  forbiddenOverwriteMessage: 'updating snapshots',\n  key: 'u'\n}], [_update_snapshots_interactive.default, {\n  forbiddenOverwriteMessage: 'updating snapshots interactively',\n  key: 'i'\n}], [_quit.default, {\n  forbiddenOverwriteMessage: 'quitting watch mode'\n}]]);\n\nfunction watch(initialGlobalConfig, contexts, outputStream, hasteMapInstances, stdin = process.stdin, hooks = new (_jestWatcher().JestHook)(), filter) {\n  // `globalConfig` will be constantly updated and reassigned as a result of\n  // watch mode interactions.\n  let globalConfig = initialGlobalConfig;\n  let activePlugin;\n  globalConfig = (0, _update_global_config.default)(globalConfig, {\n    mode: globalConfig.watch ? 'watch' : 'watchAll',\n    passWithNoTests: true\n  });\n\n  const updateConfigAndRun = ({\n    bail,\n    changedSince,\n    collectCoverage,\n    collectCoverageFrom,\n    collectCoverageOnlyFrom,\n    coverageDirectory,\n    coverageReporters,\n    mode,\n    notify,\n    notifyMode,\n    onlyFailures,\n    reporters,\n    testNamePattern,\n    testPathPattern,\n    updateSnapshot,\n    verbose\n  } = {}) => {\n    const previousUpdateSnapshot = globalConfig.updateSnapshot;\n    globalConfig = (0, _update_global_config.default)(globalConfig, {\n      bail,\n      changedSince,\n      collectCoverage,\n      collectCoverageFrom,\n      collectCoverageOnlyFrom,\n      coverageDirectory,\n      coverageReporters,\n      mode,\n      notify,\n      notifyMode,\n      onlyFailures,\n      reporters,\n      testNamePattern,\n      testPathPattern,\n      updateSnapshot,\n      verbose\n    });\n    startRun(globalConfig);\n    globalConfig = (0, _update_global_config.default)(globalConfig, {\n      // updateSnapshot is not sticky after a run.\n      updateSnapshot: previousUpdateSnapshot === 'all' ? 'none' : previousUpdateSnapshot\n    });\n  };\n\n  const watchPlugins = INTERNAL_PLUGINS.map(InternalPlugin => new InternalPlugin({\n    stdin,\n    stdout: outputStream\n  }));\n  watchPlugins.forEach(plugin => {\n    const hookSubscriber = hooks.getSubscriber();\n\n    if (plugin.apply) {\n      plugin.apply(hookSubscriber);\n    }\n  });\n\n  if (globalConfig.watchPlugins != null) {\n    const watchPluginKeys = new Map();\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = watchPlugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const plugin = _step.value;\n        const reservedInfo = RESERVED_KEY_PLUGINS.get(plugin.constructor) || {};\n        const key = reservedInfo.key || getPluginKey(plugin, globalConfig);\n\n        if (!key) {\n          continue;\n        }\n\n        const forbiddenOverwriteMessage = reservedInfo.forbiddenOverwriteMessage;\n        watchPluginKeys.set(key, {\n          forbiddenOverwriteMessage,\n          overwritable: forbiddenOverwriteMessage == null,\n          plugin\n        });\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = globalConfig.watchPlugins[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        const pluginWithConfig = _step2.value;\n        let plugin;\n\n        try {\n          const ThirdPartyPlugin = require(pluginWithConfig.path);\n\n          plugin = new ThirdPartyPlugin({\n            config: pluginWithConfig.config,\n            stdin,\n            stdout: outputStream\n          });\n        } catch (error) {\n          const errorWithContext = new Error(`Failed to initialize watch plugin \"${_chalk().default.bold((0, _slash().default)(_path().default.relative(process.cwd(), pluginWithConfig.path)))}\":\\n\\n${(0, _jestMessageUtil().formatExecError)(error, contexts[0].config, {\n            noStackTrace: false\n          })}`);\n          delete errorWithContext.stack;\n          return Promise.reject(errorWithContext);\n        }\n\n        checkForConflicts(watchPluginKeys, plugin, globalConfig);\n        const hookSubscriber = hooks.getSubscriber();\n\n        if (plugin.apply) {\n          plugin.apply(hookSubscriber);\n        }\n\n        watchPlugins.push(plugin);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n\n  const failedTestsCache = new _FailedTestsCache.default();\n  let searchSources = contexts.map(context => ({\n    context,\n    searchSource: new _SearchSource.default(context)\n  }));\n  let isRunning = false;\n  let testWatcher;\n  let shouldDisplayWatchUsage = true;\n  let isWatchUsageDisplayed = false;\n\n  const emitFileChange = () => {\n    if (hooks.isUsed('onFileChange')) {\n      const projects = searchSources.map(({\n        context,\n        searchSource\n      }) => ({\n        config: context.config,\n        testPaths: searchSource.findMatchingTests('').tests.map(t => t.path)\n      }));\n      hooks.getEmitter().onFileChange({\n        projects\n      });\n    }\n  };\n\n  emitFileChange();\n  hasteMapInstances.forEach((hasteMapInstance, index) => {\n    hasteMapInstance.on('change', ({\n      eventsQueue,\n      hasteFS,\n      moduleMap\n    }) => {\n      const validPaths = eventsQueue.filter(({\n        filePath\n      }) => (0, _is_valid_path.default)(globalConfig, filePath));\n\n      if (validPaths.length) {\n        const context = contexts[index] = (0, _create_context.default)(contexts[index].config, {\n          hasteFS,\n          moduleMap\n        });\n        activePlugin = null;\n        searchSources = searchSources.slice();\n        searchSources[index] = {\n          context,\n          searchSource: new _SearchSource.default(context)\n        };\n        emitFileChange();\n        startRun(globalConfig);\n      }\n    });\n  });\n\n  if (!hasExitListener) {\n    hasExitListener = true;\n    process.on('exit', () => {\n      if (activePlugin) {\n        outputStream.write(_ansiEscapes().default.cursorDown());\n        outputStream.write(_ansiEscapes().default.eraseDown);\n      }\n    });\n  }\n\n  const startRun = globalConfig => {\n    if (isRunning) {\n      return Promise.resolve(null);\n    }\n\n    testWatcher = new _TestWatcher.default({\n      isWatchMode: true\n    });\n    _jestUtil().isInteractive && outputStream.write(_jestUtil().specialChars.CLEAR);\n    preRunMessagePrint(outputStream);\n    isRunning = true;\n    const configs = contexts.map(context => context.config);\n    const changedFilesPromise = (0, _getChangedFilesPromise.default)(globalConfig, configs); // Clear cache for required modules\n\n    _jestResolve().default.clearDefaultResolverCache();\n\n    return (0, _runJest.default)({\n      changedFilesPromise,\n      contexts,\n      failedTestsCache,\n      filter,\n      globalConfig,\n      jestHooks: hooks.getEmitter(),\n      onComplete: results => {\n        isRunning = false;\n        hooks.getEmitter().onTestRunComplete(results); // Create a new testWatcher instance so that re-runs won't be blocked.\n        // The old instance that was passed to Jest will still be interrupted\n        // and prevent test runs from the previous run.\n\n        testWatcher = new _TestWatcher.default({\n          isWatchMode: true\n        }); // Do not show any Watch Usage related stuff when running in a\n        // non-interactive environment\n\n        if (_jestUtil().isInteractive) {\n          if (shouldDisplayWatchUsage) {\n            outputStream.write(usage(globalConfig, watchPlugins));\n            shouldDisplayWatchUsage = false; // hide Watch Usage after first run\n\n            isWatchUsageDisplayed = true;\n          } else {\n            outputStream.write(showToggleUsagePrompt());\n            shouldDisplayWatchUsage = false;\n            isWatchUsageDisplayed = false;\n          }\n        } else {\n          outputStream.write('\\n');\n        }\n\n        failedTestsCache.setTestResults(results.testResults);\n      },\n      outputStream,\n      startRun,\n      testWatcher\n    }).catch((error // Errors thrown inside `runJest`, e.g. by resolvers, are caught here for\n    ) => // continuous watch mode execution. We need to reprint them to the\n    // terminal and give just a little bit of extra space so they fit below\n    // `preRunMessagePrint` message nicely.\n    console.error('\\n\\n' + (0, _jestMessageUtil().formatExecError)(error, contexts[0].config, {\n      noStackTrace: false\n    })));\n  };\n\n  const onKeypress = key => {\n    if (key === _jestWatcher().KEYS.CONTROL_C || key === _jestWatcher().KEYS.CONTROL_D) {\n      if (typeof stdin.setRawMode === 'function') {\n        stdin.setRawMode(false);\n      }\n\n      outputStream.write('\\n');\n      (0, _exit().default)(0);\n      return;\n    }\n\n    if (activePlugin != null && activePlugin.onKey) {\n      // if a plugin is activate, Jest should let it handle keystrokes, so ignore\n      // them here\n      activePlugin.onKey(key);\n      return;\n    } // Abort test run\n\n\n    const pluginKeys = (0, _watch_plugins_helpers.getSortedUsageRows)(watchPlugins, globalConfig).map(usage => Number(usage.key).toString(16));\n\n    if (isRunning && testWatcher && ['q', _jestWatcher().KEYS.ENTER, 'a', 'o', 'f'].concat(pluginKeys).includes(key)) {\n      testWatcher.setState({\n        interrupted: true\n      });\n      return;\n    }\n\n    const matchingWatchPlugin = (0, _watch_plugins_helpers.filterInteractivePlugins)(watchPlugins, globalConfig).find(plugin => getPluginKey(plugin, globalConfig) === key);\n\n    if (matchingWatchPlugin != null) {\n      if (isRunning) {\n        testWatcher.setState({\n          interrupted: true\n        });\n        return;\n      } // \"activate\" the plugin, which has jest ignore keystrokes so the plugin\n      // can handle them\n\n\n      activePlugin = matchingWatchPlugin;\n\n      if (activePlugin.run) {\n        activePlugin.run(globalConfig, updateConfigAndRun).then(shouldRerun => {\n          activePlugin = null;\n\n          if (shouldRerun) {\n            updateConfigAndRun();\n          }\n        }, () => {\n          activePlugin = null;\n          onCancelPatternPrompt();\n        });\n      } else {\n        activePlugin = null;\n      }\n    }\n\n    switch (key) {\n      case _jestWatcher().KEYS.ENTER:\n        startRun(globalConfig);\n        break;\n\n      case 'a':\n        globalConfig = (0, _update_global_config.default)(globalConfig, {\n          mode: 'watchAll',\n          testNamePattern: '',\n          testPathPattern: ''\n        });\n        startRun(globalConfig);\n        break;\n\n      case 'c':\n        updateConfigAndRun({\n          mode: 'watch',\n          testNamePattern: '',\n          testPathPattern: ''\n        });\n        break;\n\n      case 'f':\n        globalConfig = (0, _update_global_config.default)(globalConfig, {\n          onlyFailures: !globalConfig.onlyFailures\n        });\n        startRun(globalConfig);\n        break;\n\n      case 'o':\n        globalConfig = (0, _update_global_config.default)(globalConfig, {\n          mode: 'watch',\n          testNamePattern: '',\n          testPathPattern: ''\n        });\n        startRun(globalConfig);\n        break;\n\n      case '?':\n        break;\n\n      case 'w':\n        if (!shouldDisplayWatchUsage && !isWatchUsageDisplayed) {\n          outputStream.write(_ansiEscapes().default.cursorUp());\n          outputStream.write(_ansiEscapes().default.eraseDown);\n          outputStream.write(usage(globalConfig, watchPlugins));\n          isWatchUsageDisplayed = true;\n          shouldDisplayWatchUsage = false;\n        }\n\n        break;\n    }\n  };\n\n  const onCancelPatternPrompt = () => {\n    outputStream.write(_ansiEscapes().default.cursorHide);\n    outputStream.write(_jestUtil().specialChars.CLEAR);\n    outputStream.write(usage(globalConfig, watchPlugins));\n    outputStream.write(_ansiEscapes().default.cursorShow);\n  };\n\n  if (typeof stdin.setRawMode === 'function') {\n    stdin.setRawMode(true);\n    stdin.resume();\n    stdin.setEncoding('utf8');\n    stdin.on('data', onKeypress);\n  }\n\n  startRun(globalConfig);\n  return Promise.resolve();\n}\n\nconst checkForConflicts = (watchPluginKeys, plugin, globalConfig) => {\n  const key = getPluginKey(plugin, globalConfig);\n\n  if (!key) {\n    return;\n  }\n\n  const conflictor = watchPluginKeys.get(key);\n\n  if (!conflictor || conflictor.overwritable) {\n    watchPluginKeys.set(key, {\n      overwritable: false,\n      plugin\n    });\n    return;\n  }\n\n  let error;\n\n  if (conflictor.forbiddenOverwriteMessage) {\n    error = `\n  Watch plugin ${_chalk().default.bold.red(getPluginIdentifier(plugin))} attempted to register key ${_chalk().default.bold.red(`<${key}>`)},\n  that is reserved internally for ${_chalk().default.bold.red(conflictor.forbiddenOverwriteMessage)}.\n  Please change the configuration key for this plugin.`.trim();\n  } else {\n    const plugins = [conflictor.plugin, plugin].map(p => _chalk().default.bold.red(getPluginIdentifier(p))).join(' and ');\n    error = `\n  Watch plugins ${plugins} both attempted to register key ${_chalk().default.bold.red(`<${key}>`)}.\n  Please change the key configuration for one of the conflicting plugins to avoid overlap.`.trim();\n  }\n\n  throw new (_jestValidate().ValidationError)('Watch plugin configuration error', error);\n};\n\nconst getPluginIdentifier = (plugin // This breaks as `displayName` is not defined as a static, but since\n// WatchPlugin is an interface, and it is my understanding interface\n// static fields are not definable anymore, no idea how to circumvent\n// this :-(\n// @ts-ignore: leave `displayName` be.\n) => plugin.constructor.displayName || plugin.constructor.name;\n\nconst getPluginKey = (plugin, globalConfig) => {\n  if (typeof plugin.getUsageInfo === 'function') {\n    return (plugin.getUsageInfo(globalConfig) || {\n      key: null\n    }).key;\n  }\n\n  return null;\n};\n\nconst usage = (globalConfig, watchPlugins, delimiter = '\\n') => {\n  const messages = [(0, _active_filters_message.default)(globalConfig), globalConfig.testPathPattern || globalConfig.testNamePattern ? _chalk().default.dim(' \\u203A Press ') + 'c' + _chalk().default.dim(' to clear filters.') : null, '\\n' + _chalk().default.bold('Watch Usage'), globalConfig.watch ? _chalk().default.dim(' \\u203A Press ') + 'a' + _chalk().default.dim(' to run all tests.') : null, globalConfig.onlyFailures ? _chalk().default.dim(' \\u203A Press ') + 'f' + _chalk().default.dim(' to quit \"only failed tests\" mode.') : _chalk().default.dim(' \\u203A Press ') + 'f' + _chalk().default.dim(' to run only failed tests.'), (globalConfig.watchAll || globalConfig.testPathPattern || globalConfig.testNamePattern) && !globalConfig.noSCM ? _chalk().default.dim(' \\u203A Press ') + 'o' + _chalk().default.dim(' to only run tests related to changed files.') : null, ...(0, _watch_plugins_helpers.getSortedUsageRows)(watchPlugins, globalConfig).map(plugin => _chalk().default.dim(' \\u203A Press') + ' ' + plugin.key + ' ' + _chalk().default.dim(`to ${plugin.prompt}.`)), _chalk().default.dim(' \\u203A Press ') + 'Enter' + _chalk().default.dim(' to trigger a test run.')];\n  return messages.filter(message => !!message).join(delimiter) + '\\n';\n};\n\nconst showToggleUsagePrompt = () => '\\n' + _chalk().default.bold('Watch Usage: ') + _chalk().default.dim('Press ') + 'w' + _chalk().default.dim(' to show more.');","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/@jest/core/build/watch.js"],"names":["Object","defineProperty","exports","value","default","watch","_path","data","_interopRequireDefault","require","_ansiEscapes","_chalk","_exit","_slash","_jestMessageUtil","_jestUtil","_jestValidate","_jestResolve","_jestWatcher","_getChangedFilesPromise","_is_valid_path","_create_context","_runJest","_update_global_config","_SearchSource","_TestWatcher","_FailedTestsCache","_test_path_pattern","_test_name_pattern","_update_snapshots","_update_snapshots_interactive","_quit","_watch_plugins_helpers","_active_filters_message","obj","__esModule","preRunMessagePrint","preRunMessage","print","hasExitListener","INTERNAL_PLUGINS","RESERVED_KEY_PLUGINS","Map","forbiddenOverwriteMessage","key","initialGlobalConfig","contexts","outputStream","hasteMapInstances","stdin","process","hooks","JestHook","filter","globalConfig","activePlugin","mode","passWithNoTests","updateConfigAndRun","bail","changedSince","collectCoverage","collectCoverageFrom","collectCoverageOnlyFrom","coverageDirectory","coverageReporters","notify","notifyMode","onlyFailures","reporters","testNamePattern","testPathPattern","updateSnapshot","verbose","previousUpdateSnapshot","startRun","watchPlugins","map","InternalPlugin","stdout","forEach","plugin","hookSubscriber","getSubscriber","apply","watchPluginKeys","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","reservedInfo","get","constructor","getPluginKey","set","overwritable","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","pluginWithConfig","ThirdPartyPlugin","path","config","error","errorWithContext","Error","bold","relative","cwd","formatExecError","noStackTrace","stack","Promise","reject","checkForConflicts","push","failedTestsCache","searchSources","context","searchSource","isRunning","testWatcher","shouldDisplayWatchUsage","isWatchUsageDisplayed","emitFileChange","isUsed","projects","testPaths","findMatchingTests","tests","t","getEmitter","onFileChange","hasteMapInstance","index","on","eventsQueue","hasteFS","moduleMap","validPaths","filePath","length","slice","write","cursorDown","eraseDown","resolve","isWatchMode","isInteractive","specialChars","CLEAR","configs","changedFilesPromise","clearDefaultResolverCache","jestHooks","onComplete","results","onTestRunComplete","usage","showToggleUsagePrompt","setTestResults","testResults","catch","console","onKeypress","KEYS","CONTROL_C","CONTROL_D","setRawMode","onKey","pluginKeys","getSortedUsageRows","Number","toString","ENTER","concat","includes","setState","interrupted","matchingWatchPlugin","filterInteractivePlugins","find","run","then","shouldRerun","onCancelPatternPrompt","cursorUp","cursorHide","cursorShow","resume","setEncoding","conflictor","red","getPluginIdentifier","trim","plugins","p","join","ValidationError","displayName","name","getUsageInfo","delimiter","messages","dim","watchAll","noSCM","prompt","message"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,KAAlB;;AAEA,SAASC,KAAT,GAAiB;AACf,QAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,MAAD,CAAR,CAAnC;;AAEAH,EAAAA,KAAK,GAAG,SAASA,KAAT,GAAiB;AACvB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASG,YAAT,GAAwB;AACtB,QAAMH,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAnC;;AAEAC,EAAAA,YAAY,GAAG,SAASA,YAAT,GAAwB;AACrC,WAAOH,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASI,MAAT,GAAkB;AAChB,QAAMJ,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEAE,EAAAA,MAAM,GAAG,SAASA,MAAT,GAAkB;AACzB,WAAOJ,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASK,KAAT,GAAiB;AACf,QAAML,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,MAAD,CAAR,CAAnC;;AAEAG,EAAAA,KAAK,GAAG,SAASA,KAAT,GAAiB;AACvB,WAAOL,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASM,MAAT,GAAkB;AAChB,QAAMN,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEAI,EAAAA,MAAM,GAAG,SAASA,MAAT,GAAkB;AACzB,WAAON,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASO,gBAAT,GAA4B;AAC1B,QAAMP,IAAI,GAAGE,OAAO,CAAC,mBAAD,CAApB;;AAEAK,EAAAA,gBAAgB,GAAG,SAASA,gBAAT,GAA4B;AAC7C,WAAOP,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASQ,SAAT,GAAqB;AACnB,QAAMR,IAAI,GAAGE,OAAO,CAAC,WAAD,CAApB;;AAEAM,EAAAA,SAAS,GAAG,SAASA,SAAT,GAAqB;AAC/B,WAAOR,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASS,aAAT,GAAyB;AACvB,QAAMT,IAAI,GAAGE,OAAO,CAAC,eAAD,CAApB;;AAEAO,EAAAA,aAAa,GAAG,SAASA,aAAT,GAAyB;AACvC,WAAOT,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASU,YAAT,GAAwB;AACtB,QAAMV,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAnC;;AAEAQ,EAAAA,YAAY,GAAG,SAASA,YAAT,GAAwB;AACrC,WAAOV,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASW,YAAT,GAAwB;AACtB,QAAMX,IAAI,GAAGE,OAAO,CAAC,cAAD,CAApB;;AAEAS,EAAAA,YAAY,GAAG,SAASA,YAAT,GAAwB;AACrC,WAAOX,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,IAAIY,uBAAuB,GAAGX,sBAAsB,CAClDC,OAAO,CAAC,0BAAD,CAD2C,CAApD;;AAIA,IAAIW,cAAc,GAAGZ,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAA3C;;AAEA,IAAIY,eAAe,GAAGb,sBAAsB,CAACC,OAAO,CAAC,sBAAD,CAAR,CAA5C;;AAEA,IAAIa,QAAQ,GAAGd,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAArC;;AAEA,IAAIc,qBAAqB,GAAGf,sBAAsB,CAChDC,OAAO,CAAC,4BAAD,CADyC,CAAlD;;AAIA,IAAIe,aAAa,GAAGhB,sBAAsB,CAACC,OAAO,CAAC,gBAAD,CAAR,CAA1C;;AAEA,IAAIgB,YAAY,GAAGjB,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIiB,iBAAiB,GAAGlB,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAA9C;;AAEA,IAAIkB,kBAAkB,GAAGnB,sBAAsB,CAC7CC,OAAO,CAAC,6BAAD,CADsC,CAA/C;;AAIA,IAAImB,kBAAkB,GAAGpB,sBAAsB,CAC7CC,OAAO,CAAC,6BAAD,CADsC,CAA/C;;AAIA,IAAIoB,iBAAiB,GAAGrB,sBAAsB,CAC5CC,OAAO,CAAC,4BAAD,CADqC,CAA9C;;AAIA,IAAIqB,6BAA6B,GAAGtB,sBAAsB,CACxDC,OAAO,CAAC,wCAAD,CADiD,CAA1D;;AAIA,IAAIsB,KAAK,GAAGvB,sBAAsB,CAACC,OAAO,CAAC,gBAAD,CAAR,CAAlC;;AAEA,IAAIuB,sBAAsB,GAAGvB,OAAO,CAAC,6BAAD,CAApC;;AAEA,IAAIwB,uBAAuB,GAAGzB,sBAAsB,CAClDC,OAAO,CAAC,8BAAD,CAD2C,CAApD;;AAIA,SAASD,sBAAT,CAAgC0B,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAC9B,IAAAA,OAAO,EAAE8B;AAAV,GAArC;AACD;AAED;;;;;;;;AAMA,MAAME,kBAAkB,GAAGrB,SAAS,GAAGsB,aAAZ,CAA0BC,KAArD;;AAEA,IAAIC,eAAe,GAAG,KAAtB;AACA,MAAMC,gBAAgB,GAAG,CACvBb,kBAAkB,CAACvB,OADI,EAEvBwB,kBAAkB,CAACxB,OAFI,EAGvByB,iBAAiB,CAACzB,OAHK,EAIvB0B,6BAA6B,CAAC1B,OAJP,EAKvB2B,KAAK,CAAC3B,OALiB,CAAzB;AAOA,MAAMqC,oBAAoB,GAAG,IAAIC,GAAJ,CAAQ,CACnC,CACEb,iBAAiB,CAACzB,OADpB,EAEE;AACEuC,EAAAA,yBAAyB,EAAE,oBAD7B;AAEEC,EAAAA,GAAG,EAAE;AAFP,CAFF,CADmC,EAQnC,CACEd,6BAA6B,CAAC1B,OADhC,EAEE;AACEuC,EAAAA,yBAAyB,EAAE,kCAD7B;AAEEC,EAAAA,GAAG,EAAE;AAFP,CAFF,CARmC,EAenC,CACEb,KAAK,CAAC3B,OADR,EAEE;AACEuC,EAAAA,yBAAyB,EAAE;AAD7B,CAFF,CAfmC,CAAR,CAA7B;;AAuBA,SAAStC,KAAT,CACEwC,mBADF,EAEEC,QAFF,EAGEC,YAHF,EAIEC,iBAJF,EAKEC,KAAK,GAAGC,OAAO,CAACD,KALlB,EAMEE,KAAK,GAAG,KAAKjC,YAAY,EAAb,CAAiBkC,QAArB,GANV,EAOEC,MAPF,EAQE;AACA;AACA;AACA,MAAIC,YAAY,GAAGT,mBAAnB;AACA,MAAIU,YAAJ;AACAD,EAAAA,YAAY,GAAG,CAAC,GAAG/B,qBAAqB,CAACnB,OAA1B,EAAmCkD,YAAnC,EAAiD;AAC9DE,IAAAA,IAAI,EAAEF,YAAY,CAACjD,KAAb,GAAqB,OAArB,GAA+B,UADyB;AAE9DoD,IAAAA,eAAe,EAAE;AAF6C,GAAjD,CAAf;;AAKA,QAAMC,kBAAkB,GAAG,CAAC;AAC1BC,IAAAA,IAD0B;AAE1BC,IAAAA,YAF0B;AAG1BC,IAAAA,eAH0B;AAI1BC,IAAAA,mBAJ0B;AAK1BC,IAAAA,uBAL0B;AAM1BC,IAAAA,iBAN0B;AAO1BC,IAAAA,iBAP0B;AAQ1BT,IAAAA,IAR0B;AAS1BU,IAAAA,MAT0B;AAU1BC,IAAAA,UAV0B;AAW1BC,IAAAA,YAX0B;AAY1BC,IAAAA,SAZ0B;AAa1BC,IAAAA,eAb0B;AAc1BC,IAAAA,eAd0B;AAe1BC,IAAAA,cAf0B;AAgB1BC,IAAAA;AAhB0B,MAiBxB,EAjBuB,KAiBhB;AACT,UAAMC,sBAAsB,GAAGpB,YAAY,CAACkB,cAA5C;AACAlB,IAAAA,YAAY,GAAG,CAAC,GAAG/B,qBAAqB,CAACnB,OAA1B,EAAmCkD,YAAnC,EAAiD;AAC9DK,MAAAA,IAD8D;AAE9DC,MAAAA,YAF8D;AAG9DC,MAAAA,eAH8D;AAI9DC,MAAAA,mBAJ8D;AAK9DC,MAAAA,uBAL8D;AAM9DC,MAAAA,iBAN8D;AAO9DC,MAAAA,iBAP8D;AAQ9DT,MAAAA,IAR8D;AAS9DU,MAAAA,MAT8D;AAU9DC,MAAAA,UAV8D;AAW9DC,MAAAA,YAX8D;AAY9DC,MAAAA,SAZ8D;AAa9DC,MAAAA,eAb8D;AAc9DC,MAAAA,eAd8D;AAe9DC,MAAAA,cAf8D;AAgB9DC,MAAAA;AAhB8D,KAAjD,CAAf;AAkBAE,IAAAA,QAAQ,CAACrB,YAAD,CAAR;AACAA,IAAAA,YAAY,GAAG,CAAC,GAAG/B,qBAAqB,CAACnB,OAA1B,EAAmCkD,YAAnC,EAAiD;AAC9D;AACAkB,MAAAA,cAAc,EACZE,sBAAsB,KAAK,KAA3B,GAAmC,MAAnC,GAA4CA;AAHgB,KAAjD,CAAf;AAKD,GA3CD;;AA6CA,QAAME,YAAY,GAAGpC,gBAAgB,CAACqC,GAAjB,CACnBC,cAAc,IACZ,IAAIA,cAAJ,CAAmB;AACjB7B,IAAAA,KADiB;AAEjB8B,IAAAA,MAAM,EAAEhC;AAFS,GAAnB,CAFiB,CAArB;AAOA6B,EAAAA,YAAY,CAACI,OAAb,CAAqBC,MAAM,IAAI;AAC7B,UAAMC,cAAc,GAAG/B,KAAK,CAACgC,aAAN,EAAvB;;AAEA,QAAIF,MAAM,CAACG,KAAX,EAAkB;AAChBH,MAAAA,MAAM,CAACG,KAAP,CAAaF,cAAb;AACD;AACF,GAND;;AAQA,MAAI5B,YAAY,CAACsB,YAAb,IAA6B,IAAjC,EAAuC;AACrC,UAAMS,eAAe,GAAG,IAAI3C,GAAJ,EAAxB;AACA,QAAI4C,yBAAyB,GAAG,IAAhC;AACA,QAAIC,iBAAiB,GAAG,KAAxB;AACA,QAAIC,cAAc,GAAGC,SAArB;;AAEA,QAAI;AACF,WACE,IAAIC,SAAS,GAAGd,YAAY,CAACe,MAAM,CAACC,QAAR,CAAZ,EAAhB,EAAiDC,KADnD,EAEE,EAAEP,yBAAyB,GAAG,CAACO,KAAK,GAAGH,SAAS,CAACI,IAAV,EAAT,EAA2BC,IAAzD,CAFF,EAGET,yBAAyB,GAAG,IAH9B,EAIE;AACA,cAAML,MAAM,GAAGY,KAAK,CAAC1F,KAArB;AACA,cAAM6F,YAAY,GAAGvD,oBAAoB,CAACwD,GAArB,CAAyBhB,MAAM,CAACiB,WAAhC,KAAgD,EAArE;AACA,cAAMtD,GAAG,GAAGoD,YAAY,CAACpD,GAAb,IAAoBuD,YAAY,CAAClB,MAAD,EAAS3B,YAAT,CAA5C;;AAEA,YAAI,CAACV,GAAL,EAAU;AACR;AACD;;AAED,cAAMD,yBAAyB,GAC7BqD,YAAY,CAACrD,yBADf;AAEA0C,QAAAA,eAAe,CAACe,GAAhB,CAAoBxD,GAApB,EAAyB;AACvBD,UAAAA,yBADuB;AAEvB0D,UAAAA,YAAY,EAAE1D,yBAAyB,IAAI,IAFpB;AAGvBsC,UAAAA;AAHuB,SAAzB;AAKD;AACF,KAtBD,CAsBE,OAAOqB,GAAP,EAAY;AACZf,MAAAA,iBAAiB,GAAG,IAApB;AACAC,MAAAA,cAAc,GAAGc,GAAjB;AACD,KAzBD,SAyBU;AACR,UAAI;AACF,YAAI,CAAChB,yBAAD,IAA8BI,SAAS,CAACa,MAAV,IAAoB,IAAtD,EAA4D;AAC1Db,UAAAA,SAAS,CAACa,MAAV;AACD;AACF,OAJD,SAIU;AACR,YAAIhB,iBAAJ,EAAuB;AACrB,gBAAMC,cAAN;AACD;AACF;AACF;;AAED,QAAIgB,0BAA0B,GAAG,IAAjC;AACA,QAAIC,kBAAkB,GAAG,KAAzB;AACA,QAAIC,eAAe,GAAGjB,SAAtB;;AAEA,QAAI;AACF,WACE,IAAIkB,UAAU,GAAGrD,YAAY,CAACsB,YAAb,CAA0Be,MAAM,CAACC,QAAjC,GAAjB,EAA+DgB,MADjE,EAEE,EAAEJ,0BAA0B,GAAG,CAACI,MAAM,GAAGD,UAAU,CAACb,IAAX,EAAV,EAA6BC,IAA5D,CAFF,EAGES,0BAA0B,GAAG,IAH/B,EAIE;AACA,cAAMK,gBAAgB,GAAGD,MAAM,CAACzG,KAAhC;AACA,YAAI8E,MAAJ;;AAEA,YAAI;AACF,gBAAM6B,gBAAgB,GAAGrG,OAAO,CAACoG,gBAAgB,CAACE,IAAlB,CAAhC;;AAEA9B,UAAAA,MAAM,GAAG,IAAI6B,gBAAJ,CAAqB;AAC5BE,YAAAA,MAAM,EAAEH,gBAAgB,CAACG,MADG;AAE5B/D,YAAAA,KAF4B;AAG5B8B,YAAAA,MAAM,EAAEhC;AAHoB,WAArB,CAAT;AAKD,SARD,CAQE,OAAOkE,KAAP,EAAc;AACd,gBAAMC,gBAAgB,GAAG,IAAIC,KAAJ,CACtB,sCAAqCxG,MAAM,GAAGP,OAAT,CAAiBgH,IAAjB,CACpC,CAAC,GAAGvG,MAAM,GAAGT,OAAb,EACEE,KAAK,GAAGF,OAAR,CAAgBiH,QAAhB,CAAyBnE,OAAO,CAACoE,GAAR,EAAzB,EAAwCT,gBAAgB,CAACE,IAAzD,CADF,CADoC,CAIpC,SAAQ,CAAC,GAAGjG,gBAAgB,GAAGyG,eAAvB,EACRN,KADQ,EAERnE,QAAQ,CAAC,CAAD,CAAR,CAAYkE,MAFJ,EAGR;AACEQ,YAAAA,YAAY,EAAE;AADhB,WAHQ,CAMR,EAXqB,CAAzB;AAaA,iBAAON,gBAAgB,CAACO,KAAxB;AACA,iBAAOC,OAAO,CAACC,MAAR,CAAeT,gBAAf,CAAP;AACD;;AAEDU,QAAAA,iBAAiB,CAACvC,eAAD,EAAkBJ,MAAlB,EAA0B3B,YAA1B,CAAjB;AACA,cAAM4B,cAAc,GAAG/B,KAAK,CAACgC,aAAN,EAAvB;;AAEA,YAAIF,MAAM,CAACG,KAAX,EAAkB;AAChBH,UAAAA,MAAM,CAACG,KAAP,CAAaF,cAAb;AACD;;AAEDN,QAAAA,YAAY,CAACiD,IAAb,CAAkB5C,MAAlB;AACD;AACF,KA5CD,CA4CE,OAAOqB,GAAP,EAAY;AACZG,MAAAA,kBAAkB,GAAG,IAArB;AACAC,MAAAA,eAAe,GAAGJ,GAAlB;AACD,KA/CD,SA+CU;AACR,UAAI;AACF,YAAI,CAACE,0BAAD,IAA+BG,UAAU,CAACJ,MAAX,IAAqB,IAAxD,EAA8D;AAC5DI,UAAAA,UAAU,CAACJ,MAAX;AACD;AACF,OAJD,SAIU;AACR,YAAIE,kBAAJ,EAAwB;AACtB,gBAAMC,eAAN;AACD;AACF;AACF;AACF;;AAED,QAAMoB,gBAAgB,GAAG,IAAIpG,iBAAiB,CAACtB,OAAtB,EAAzB;AACA,MAAI2H,aAAa,GAAGjF,QAAQ,CAAC+B,GAAT,CAAamD,OAAO,KAAK;AAC3CA,IAAAA,OAD2C;AAE3CC,IAAAA,YAAY,EAAE,IAAIzG,aAAa,CAACpB,OAAlB,CAA0B4H,OAA1B;AAF6B,GAAL,CAApB,CAApB;AAIA,MAAIE,SAAS,GAAG,KAAhB;AACA,MAAIC,WAAJ;AACA,MAAIC,uBAAuB,GAAG,IAA9B;AACA,MAAIC,qBAAqB,GAAG,KAA5B;;AAEA,QAAMC,cAAc,GAAG,MAAM;AAC3B,QAAInF,KAAK,CAACoF,MAAN,CAAa,cAAb,CAAJ,EAAkC;AAChC,YAAMC,QAAQ,GAAGT,aAAa,CAAClD,GAAd,CAAkB,CAAC;AAACmD,QAAAA,OAAD;AAAUC,QAAAA;AAAV,OAAD,MAA8B;AAC/DjB,QAAAA,MAAM,EAAEgB,OAAO,CAAChB,MAD+C;AAE/DyB,QAAAA,SAAS,EAAER,YAAY,CAACS,iBAAb,CAA+B,EAA/B,EAAmCC,KAAnC,CAAyC9D,GAAzC,CAA6C+D,CAAC,IAAIA,CAAC,CAAC7B,IAApD;AAFoD,OAA9B,CAAlB,CAAjB;AAIA5D,MAAAA,KAAK,CAAC0F,UAAN,GAAmBC,YAAnB,CAAgC;AAC9BN,QAAAA;AAD8B,OAAhC;AAGD;AACF,GAVD;;AAYAF,EAAAA,cAAc;AACdtF,EAAAA,iBAAiB,CAACgC,OAAlB,CAA0B,CAAC+D,gBAAD,EAAmBC,KAAnB,KAA6B;AACrDD,IAAAA,gBAAgB,CAACE,EAAjB,CAAoB,QAApB,EAA8B,CAAC;AAACC,MAAAA,WAAD;AAAcC,MAAAA,OAAd;AAAuBC,MAAAA;AAAvB,KAAD,KAAuC;AACnE,YAAMC,UAAU,GAAGH,WAAW,CAAC7F,MAAZ,CAAmB,CAAC;AAACiG,QAAAA;AAAD,OAAD,KACpC,CAAC,GAAGlI,cAAc,CAAChB,OAAnB,EAA4BkD,YAA5B,EAA0CgG,QAA1C,CADiB,CAAnB;;AAIA,UAAID,UAAU,CAACE,MAAf,EAAuB;AACrB,cAAMvB,OAAO,GAAIlF,QAAQ,CAACkG,KAAD,CAAR,GAAkB,CAAC,GAAG3H,eAAe,CAACjB,OAApB,EACjC0C,QAAQ,CAACkG,KAAD,CAAR,CAAgBhC,MADiB,EAEjC;AACEmC,UAAAA,OADF;AAEEC,UAAAA;AAFF,SAFiC,CAAnC;AAOA7F,QAAAA,YAAY,GAAG,IAAf;AACAwE,QAAAA,aAAa,GAAGA,aAAa,CAACyB,KAAd,EAAhB;AACAzB,QAAAA,aAAa,CAACiB,KAAD,CAAb,GAAuB;AACrBhB,UAAAA,OADqB;AAErBC,UAAAA,YAAY,EAAE,IAAIzG,aAAa,CAACpB,OAAlB,CAA0B4H,OAA1B;AAFO,SAAvB;AAIAM,QAAAA,cAAc;AACd3D,QAAAA,QAAQ,CAACrB,YAAD,CAAR;AACD;AACF,KAtBD;AAuBD,GAxBD;;AA0BA,MAAI,CAACf,eAAL,EAAsB;AACpBA,IAAAA,eAAe,GAAG,IAAlB;AACAW,IAAAA,OAAO,CAAC+F,EAAR,CAAW,MAAX,EAAmB,MAAM;AACvB,UAAI1F,YAAJ,EAAkB;AAChBR,QAAAA,YAAY,CAAC0G,KAAb,CAAmB/I,YAAY,GAAGN,OAAf,CAAuBsJ,UAAvB,EAAnB;AACA3G,QAAAA,YAAY,CAAC0G,KAAb,CAAmB/I,YAAY,GAAGN,OAAf,CAAuBuJ,SAA1C;AACD;AACF,KALD;AAMD;;AAED,QAAMhF,QAAQ,GAAGrB,YAAY,IAAI;AAC/B,QAAI4E,SAAJ,EAAe;AACb,aAAOR,OAAO,CAACkC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDzB,IAAAA,WAAW,GAAG,IAAI1G,YAAY,CAACrB,OAAjB,CAAyB;AACrCyJ,MAAAA,WAAW,EAAE;AADwB,KAAzB,CAAd;AAGA9I,IAAAA,SAAS,GAAG+I,aAAZ,IACE/G,YAAY,CAAC0G,KAAb,CAAmB1I,SAAS,GAAGgJ,YAAZ,CAAyBC,KAA5C,CADF;AAEA5H,IAAAA,kBAAkB,CAACW,YAAD,CAAlB;AACAmF,IAAAA,SAAS,GAAG,IAAZ;AACA,UAAM+B,OAAO,GAAGnH,QAAQ,CAAC+B,GAAT,CAAamD,OAAO,IAAIA,OAAO,CAAChB,MAAhC,CAAhB;AACA,UAAMkD,mBAAmB,GAAG,CAAC,GAAG/I,uBAAuB,CAACf,OAA5B,EAC1BkD,YAD0B,EAE1B2G,OAF0B,CAA5B,CAb+B,CAgB5B;;AAEHhJ,IAAAA,YAAY,GAAGb,OAAf,CAAuB+J,yBAAvB;;AAEA,WAAO,CAAC,GAAG7I,QAAQ,CAAClB,OAAb,EAAsB;AAC3B8J,MAAAA,mBAD2B;AAE3BpH,MAAAA,QAF2B;AAG3BgF,MAAAA,gBAH2B;AAI3BzE,MAAAA,MAJ2B;AAK3BC,MAAAA,YAL2B;AAM3B8G,MAAAA,SAAS,EAAEjH,KAAK,CAAC0F,UAAN,EANgB;AAO3BwB,MAAAA,UAAU,EAAEC,OAAO,IAAI;AACrBpC,QAAAA,SAAS,GAAG,KAAZ;AACA/E,QAAAA,KAAK,CAAC0F,UAAN,GAAmB0B,iBAAnB,CAAqCD,OAArC,EAFqB,CAE0B;AAC/C;AACA;;AAEAnC,QAAAA,WAAW,GAAG,IAAI1G,YAAY,CAACrB,OAAjB,CAAyB;AACrCyJ,UAAAA,WAAW,EAAE;AADwB,SAAzB,CAAd,CANqB,CAQjB;AACJ;;AAEA,YAAI9I,SAAS,GAAG+I,aAAhB,EAA+B;AAC7B,cAAI1B,uBAAJ,EAA6B;AAC3BrF,YAAAA,YAAY,CAAC0G,KAAb,CAAmBe,KAAK,CAAClH,YAAD,EAAesB,YAAf,CAAxB;AACAwD,YAAAA,uBAAuB,GAAG,KAA1B,CAF2B,CAEM;;AAEjCC,YAAAA,qBAAqB,GAAG,IAAxB;AACD,WALD,MAKO;AACLtF,YAAAA,YAAY,CAAC0G,KAAb,CAAmBgB,qBAAqB,EAAxC;AACArC,YAAAA,uBAAuB,GAAG,KAA1B;AACAC,YAAAA,qBAAqB,GAAG,KAAxB;AACD;AACF,SAXD,MAWO;AACLtF,UAAAA,YAAY,CAAC0G,KAAb,CAAmB,IAAnB;AACD;;AAED3B,QAAAA,gBAAgB,CAAC4C,cAAjB,CAAgCJ,OAAO,CAACK,WAAxC;AACD,OAlC0B;AAmC3B5H,MAAAA,YAnC2B;AAoC3B4B,MAAAA,QApC2B;AAqC3BwD,MAAAA;AArC2B,KAAtB,EAsCJyC,KAtCI,CAsCE,CACP3D,KADO,CACD;AADC,SAGP;AACA;AACA;AACA4D,IAAAA,OAAO,CAAC5D,KAAR,CACE,SACE,CAAC,GAAGnG,gBAAgB,GAAGyG,eAAvB,EAAwCN,KAAxC,EAA+CnE,QAAQ,CAAC,CAAD,CAAR,CAAYkE,MAA3D,EAAmE;AACjEQ,MAAAA,YAAY,EAAE;AADmD,KAAnE,CAFJ,CA5CK,CAAP;AAmDD,GAvED;;AAyEA,QAAMsD,UAAU,GAAGlI,GAAG,IAAI;AACxB,QACEA,GAAG,KAAK1B,YAAY,GAAG6J,IAAf,CAAoBC,SAA5B,IACApI,GAAG,KAAK1B,YAAY,GAAG6J,IAAf,CAAoBE,SAF9B,EAGE;AACA,UAAI,OAAOhI,KAAK,CAACiI,UAAb,KAA4B,UAAhC,EAA4C;AAC1CjI,QAAAA,KAAK,CAACiI,UAAN,CAAiB,KAAjB;AACD;;AAEDnI,MAAAA,YAAY,CAAC0G,KAAb,CAAmB,IAAnB;AACA,OAAC,GAAG7I,KAAK,GAAGR,OAAZ,EAAqB,CAArB;AACA;AACD;;AAED,QAAImD,YAAY,IAAI,IAAhB,IAAwBA,YAAY,CAAC4H,KAAzC,EAAgD;AAC9C;AACA;AACA5H,MAAAA,YAAY,CAAC4H,KAAb,CAAmBvI,GAAnB;AACA;AACD,KAnBuB,CAmBtB;;;AAEF,UAAMwI,UAAU,GAAG,CAAC,GAAGpJ,sBAAsB,CAACqJ,kBAA3B,EACjBzG,YADiB,EAEjBtB,YAFiB,EAGjBuB,GAHiB,CAGb2F,KAAK,IAAIc,MAAM,CAACd,KAAK,CAAC5H,GAAP,CAAN,CAAkB2I,QAAlB,CAA2B,EAA3B,CAHI,CAAnB;;AAKA,QACErD,SAAS,IACTC,WADA,IAEA,CAAC,GAAD,EAAMjH,YAAY,GAAG6J,IAAf,CAAoBS,KAA1B,EAAiC,GAAjC,EAAsC,GAAtC,EAA2C,GAA3C,EACGC,MADH,CACUL,UADV,EAEGM,QAFH,CAEY9I,GAFZ,CAHF,EAME;AACAuF,MAAAA,WAAW,CAACwD,QAAZ,CAAqB;AACnBC,QAAAA,WAAW,EAAE;AADM,OAArB;AAGA;AACD;;AAED,UAAMC,mBAAmB,GAAG,CAAC,GAC7B7J,sBAAsB,CAAC8J,wBADK,EAE1BlH,YAF0B,EAG1BtB,YAH0B,EAI1ByI,IAJ0B,CAIrB9G,MAAM,IAAIkB,YAAY,CAAClB,MAAD,EAAS3B,YAAT,CAAZ,KAAuCV,GAJ5B,CAA5B;;AAMA,QAAIiJ,mBAAmB,IAAI,IAA3B,EAAiC;AAC/B,UAAI3D,SAAJ,EAAe;AACbC,QAAAA,WAAW,CAACwD,QAAZ,CAAqB;AACnBC,UAAAA,WAAW,EAAE;AADM,SAArB;AAGA;AACD,OAN8B,CAM7B;AACF;;;AAEArI,MAAAA,YAAY,GAAGsI,mBAAf;;AAEA,UAAItI,YAAY,CAACyI,GAAjB,EAAsB;AACpBzI,QAAAA,YAAY,CAACyI,GAAb,CAAiB1I,YAAjB,EAA+BI,kBAA/B,EAAmDuI,IAAnD,CACEC,WAAW,IAAI;AACb3I,UAAAA,YAAY,GAAG,IAAf;;AAEA,cAAI2I,WAAJ,EAAiB;AACfxI,YAAAA,kBAAkB;AACnB;AACF,SAPH,EAQE,MAAM;AACJH,UAAAA,YAAY,GAAG,IAAf;AACA4I,UAAAA,qBAAqB;AACtB,SAXH;AAaD,OAdD,MAcO;AACL5I,QAAAA,YAAY,GAAG,IAAf;AACD;AACF;;AAED,YAAQX,GAAR;AACE,WAAK1B,YAAY,GAAG6J,IAAf,CAAoBS,KAAzB;AACE7G,QAAAA,QAAQ,CAACrB,YAAD,CAAR;AACA;;AAEF,WAAK,GAAL;AACEA,QAAAA,YAAY,GAAG,CAAC,GAAG/B,qBAAqB,CAACnB,OAA1B,EAAmCkD,YAAnC,EAAiD;AAC9DE,UAAAA,IAAI,EAAE,UADwD;AAE9Dc,UAAAA,eAAe,EAAE,EAF6C;AAG9DC,UAAAA,eAAe,EAAE;AAH6C,SAAjD,CAAf;AAKAI,QAAAA,QAAQ,CAACrB,YAAD,CAAR;AACA;;AAEF,WAAK,GAAL;AACEI,QAAAA,kBAAkB,CAAC;AACjBF,UAAAA,IAAI,EAAE,OADW;AAEjBc,UAAAA,eAAe,EAAE,EAFA;AAGjBC,UAAAA,eAAe,EAAE;AAHA,SAAD,CAAlB;AAKA;;AAEF,WAAK,GAAL;AACEjB,QAAAA,YAAY,GAAG,CAAC,GAAG/B,qBAAqB,CAACnB,OAA1B,EAAmCkD,YAAnC,EAAiD;AAC9Dc,UAAAA,YAAY,EAAE,CAACd,YAAY,CAACc;AADkC,SAAjD,CAAf;AAGAO,QAAAA,QAAQ,CAACrB,YAAD,CAAR;AACA;;AAEF,WAAK,GAAL;AACEA,QAAAA,YAAY,GAAG,CAAC,GAAG/B,qBAAqB,CAACnB,OAA1B,EAAmCkD,YAAnC,EAAiD;AAC9DE,UAAAA,IAAI,EAAE,OADwD;AAE9Dc,UAAAA,eAAe,EAAE,EAF6C;AAG9DC,UAAAA,eAAe,EAAE;AAH6C,SAAjD,CAAf;AAKAI,QAAAA,QAAQ,CAACrB,YAAD,CAAR;AACA;;AAEF,WAAK,GAAL;AACE;;AAEF,WAAK,GAAL;AACE,YAAI,CAAC8E,uBAAD,IAA4B,CAACC,qBAAjC,EAAwD;AACtDtF,UAAAA,YAAY,CAAC0G,KAAb,CAAmB/I,YAAY,GAAGN,OAAf,CAAuBgM,QAAvB,EAAnB;AACArJ,UAAAA,YAAY,CAAC0G,KAAb,CAAmB/I,YAAY,GAAGN,OAAf,CAAuBuJ,SAA1C;AACA5G,UAAAA,YAAY,CAAC0G,KAAb,CAAmBe,KAAK,CAAClH,YAAD,EAAesB,YAAf,CAAxB;AACAyD,UAAAA,qBAAqB,GAAG,IAAxB;AACAD,UAAAA,uBAAuB,GAAG,KAA1B;AACD;;AAED;AAlDJ;AAoDD,GA/HD;;AAiIA,QAAM+D,qBAAqB,GAAG,MAAM;AAClCpJ,IAAAA,YAAY,CAAC0G,KAAb,CAAmB/I,YAAY,GAAGN,OAAf,CAAuBiM,UAA1C;AACAtJ,IAAAA,YAAY,CAAC0G,KAAb,CAAmB1I,SAAS,GAAGgJ,YAAZ,CAAyBC,KAA5C;AACAjH,IAAAA,YAAY,CAAC0G,KAAb,CAAmBe,KAAK,CAAClH,YAAD,EAAesB,YAAf,CAAxB;AACA7B,IAAAA,YAAY,CAAC0G,KAAb,CAAmB/I,YAAY,GAAGN,OAAf,CAAuBkM,UAA1C;AACD,GALD;;AAOA,MAAI,OAAOrJ,KAAK,CAACiI,UAAb,KAA4B,UAAhC,EAA4C;AAC1CjI,IAAAA,KAAK,CAACiI,UAAN,CAAiB,IAAjB;AACAjI,IAAAA,KAAK,CAACsJ,MAAN;AACAtJ,IAAAA,KAAK,CAACuJ,WAAN,CAAkB,MAAlB;AACAvJ,IAAAA,KAAK,CAACgG,EAAN,CAAS,MAAT,EAAiB6B,UAAjB;AACD;;AAEDnG,EAAAA,QAAQ,CAACrB,YAAD,CAAR;AACA,SAAOoE,OAAO,CAACkC,OAAR,EAAP;AACD;;AAED,MAAMhC,iBAAiB,GAAG,CAACvC,eAAD,EAAkBJ,MAAlB,EAA0B3B,YAA1B,KAA2C;AACnE,QAAMV,GAAG,GAAGuD,YAAY,CAAClB,MAAD,EAAS3B,YAAT,CAAxB;;AAEA,MAAI,CAACV,GAAL,EAAU;AACR;AACD;;AAED,QAAM6J,UAAU,GAAGpH,eAAe,CAACY,GAAhB,CAAoBrD,GAApB,CAAnB;;AAEA,MAAI,CAAC6J,UAAD,IAAeA,UAAU,CAACpG,YAA9B,EAA4C;AAC1ChB,IAAAA,eAAe,CAACe,GAAhB,CAAoBxD,GAApB,EAAyB;AACvByD,MAAAA,YAAY,EAAE,KADS;AAEvBpB,MAAAA;AAFuB,KAAzB;AAIA;AACD;;AAED,MAAIgC,KAAJ;;AAEA,MAAIwF,UAAU,CAAC9J,yBAAf,EAA0C;AACxCsE,IAAAA,KAAK,GAAI;iBACItG,MAAM,GAAGP,OAAT,CAAiBgH,IAAjB,CAAsBsF,GAAtB,CACbC,mBAAmB,CAAC1H,MAAD,CADN,CAEb,8BAA6BtE,MAAM,GAAGP,OAAT,CAAiBgH,IAAjB,CAAsBsF,GAAtB,CAA2B,IAAG9J,GAAI,GAAlC,CAAsC;oCACnCjC,MAAM,GAAGP,OAAT,CAAiBgH,IAAjB,CAAsBsF,GAAtB,CAChCD,UAAU,CAAC9J,yBADqB,CAEhC;uDANQ,CAO4CiK,IAP5C,EAAR;AAQD,GATD,MASO;AACL,UAAMC,OAAO,GAAG,CAACJ,UAAU,CAACxH,MAAZ,EAAoBA,MAApB,EACbJ,GADa,CACTiI,CAAC,IAAInM,MAAM,GAAGP,OAAT,CAAiBgH,IAAjB,CAAsBsF,GAAtB,CAA0BC,mBAAmB,CAACG,CAAD,CAA7C,CADI,EAEbC,IAFa,CAER,OAFQ,CAAhB;AAGA9F,IAAAA,KAAK,GAAI;kBACK4F,OAAQ,mCAAkClM,MAAM,GAAGP,OAAT,CAAiBgH,IAAjB,CAAsBsF,GAAtB,CACrD,IAAG9J,GAAI,GAD8C,CAEtD;2FAHM,CAIgFgK,IAJhF,EAAR;AAKD;;AAED,QAAM,KAAK5L,aAAa,EAAd,CAAkBgM,eAAtB,EACJ,kCADI,EAEJ/F,KAFI,CAAN;AAID,CA3CD;;AA6CA,MAAM0F,mBAAmB,GAAG,CAC1B1H,MAD0B,CACnB;AACP;AACA;AACA;AACA;AAL0B,KAMvBA,MAAM,CAACiB,WAAP,CAAmB+G,WAAnB,IAAkChI,MAAM,CAACiB,WAAP,CAAmBgH,IAN1D;;AAQA,MAAM/G,YAAY,GAAG,CAAClB,MAAD,EAAS3B,YAAT,KAA0B;AAC7C,MAAI,OAAO2B,MAAM,CAACkI,YAAd,KAA+B,UAAnC,EAA+C;AAC7C,WAAO,CACLlI,MAAM,CAACkI,YAAP,CAAoB7J,YAApB,KAAqC;AACnCV,MAAAA,GAAG,EAAE;AAD8B,KADhC,EAILA,GAJF;AAKD;;AAED,SAAO,IAAP;AACD,CAVD;;AAYA,MAAM4H,KAAK,GAAG,CAAClH,YAAD,EAAesB,YAAf,EAA6BwI,SAAS,GAAG,IAAzC,KAAkD;AAC9D,QAAMC,QAAQ,GAAG,CACf,CAAC,GAAGpL,uBAAuB,CAAC7B,OAA5B,EAAqCkD,YAArC,CADe,EAEfA,YAAY,CAACiB,eAAb,IAAgCjB,YAAY,CAACgB,eAA7C,GACI3D,MAAM,GAAGP,OAAT,CAAiBkN,GAAjB,CAAqB,gBAArB,IACA,GADA,GAEA3M,MAAM,GAAGP,OAAT,CAAiBkN,GAAjB,CAAqB,oBAArB,CAHJ,GAII,IANW,EAOf,OAAO3M,MAAM,GAAGP,OAAT,CAAiBgH,IAAjB,CAAsB,aAAtB,CAPQ,EAQf9D,YAAY,CAACjD,KAAb,GACIM,MAAM,GAAGP,OAAT,CAAiBkN,GAAjB,CAAqB,gBAArB,IACA,GADA,GAEA3M,MAAM,GAAGP,OAAT,CAAiBkN,GAAjB,CAAqB,oBAArB,CAHJ,GAII,IAZW,EAafhK,YAAY,CAACc,YAAb,GACIzD,MAAM,GAAGP,OAAT,CAAiBkN,GAAjB,CAAqB,gBAArB,IACA,GADA,GAEA3M,MAAM,GAAGP,OAAT,CAAiBkN,GAAjB,CAAqB,oCAArB,CAHJ,GAII3M,MAAM,GAAGP,OAAT,CAAiBkN,GAAjB,CAAqB,gBAArB,IACA,GADA,GAEA3M,MAAM,GAAGP,OAAT,CAAiBkN,GAAjB,CAAqB,4BAArB,CAnBW,EAoBf,CAAChK,YAAY,CAACiK,QAAb,IACCjK,YAAY,CAACiB,eADd,IAECjB,YAAY,CAACgB,eAFf,KAGA,CAAChB,YAAY,CAACkK,KAHd,GAII7M,MAAM,GAAGP,OAAT,CAAiBkN,GAAjB,CAAqB,gBAArB,IACA,GADA,GAEA3M,MAAM,GAAGP,OAAT,CAAiBkN,GAAjB,CAAqB,8CAArB,CANJ,GAOI,IA3BW,EA4Bf,GAAG,CAAC,GAAGtL,sBAAsB,CAACqJ,kBAA3B,EACDzG,YADC,EAEDtB,YAFC,EAGDuB,GAHC,CAIDI,MAAM,IACJtE,MAAM,GAAGP,OAAT,CAAiBkN,GAAjB,CAAqB,eAArB,IACA,GADA,GAEArI,MAAM,CAACrC,GAFP,GAGA,GAHA,GAIAjC,MAAM,GAAGP,OAAT,CAAiBkN,GAAjB,CAAsB,MAAKrI,MAAM,CAACwI,MAAO,GAAzC,CATD,CA5BY,EAuCf9M,MAAM,GAAGP,OAAT,CAAiBkN,GAAjB,CAAqB,gBAArB,IACE,OADF,GAEE3M,MAAM,GAAGP,OAAT,CAAiBkN,GAAjB,CAAqB,yBAArB,CAzCa,CAAjB;AA2CA,SAAOD,QAAQ,CAAChK,MAAT,CAAgBqK,OAAO,IAAI,CAAC,CAACA,OAA7B,EAAsCX,IAAtC,CAA2CK,SAA3C,IAAwD,IAA/D;AACD,CA7CD;;AA+CA,MAAM3C,qBAAqB,GAAG,MAC5B,OACA9J,MAAM,GAAGP,OAAT,CAAiBgH,IAAjB,CAAsB,eAAtB,CADA,GAEAzG,MAAM,GAAGP,OAAT,CAAiBkN,GAAjB,CAAqB,QAArB,CAFA,GAGA,GAHA,GAIA3M,MAAM,GAAGP,OAAT,CAAiBkN,GAAjB,CAAqB,gBAArB,CALF","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = watch;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ansiEscapes() {\n  const data = _interopRequireDefault(require('ansi-escapes'));\n\n  _ansiEscapes = function _ansiEscapes() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _exit() {\n  const data = _interopRequireDefault(require('exit'));\n\n  _exit = function _exit() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _slash() {\n  const data = _interopRequireDefault(require('slash'));\n\n  _slash = function _slash() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function _jestMessageUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestValidate() {\n  const data = require('jest-validate');\n\n  _jestValidate = function _jestValidate() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestResolve() {\n  const data = _interopRequireDefault(require('jest-resolve'));\n\n  _jestResolve = function _jestResolve() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWatcher() {\n  const data = require('jest-watcher');\n\n  _jestWatcher = function _jestWatcher() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _getChangedFilesPromise = _interopRequireDefault(\n  require('./getChangedFilesPromise')\n);\n\nvar _is_valid_path = _interopRequireDefault(require('./lib/is_valid_path'));\n\nvar _create_context = _interopRequireDefault(require('./lib/create_context'));\n\nvar _runJest = _interopRequireDefault(require('./runJest'));\n\nvar _update_global_config = _interopRequireDefault(\n  require('./lib/update_global_config')\n);\n\nvar _SearchSource = _interopRequireDefault(require('./SearchSource'));\n\nvar _TestWatcher = _interopRequireDefault(require('./TestWatcher'));\n\nvar _FailedTestsCache = _interopRequireDefault(require('./FailedTestsCache'));\n\nvar _test_path_pattern = _interopRequireDefault(\n  require('./plugins/test_path_pattern')\n);\n\nvar _test_name_pattern = _interopRequireDefault(\n  require('./plugins/test_name_pattern')\n);\n\nvar _update_snapshots = _interopRequireDefault(\n  require('./plugins/update_snapshots')\n);\n\nvar _update_snapshots_interactive = _interopRequireDefault(\n  require('./plugins/update_snapshots_interactive')\n);\n\nvar _quit = _interopRequireDefault(require('./plugins/quit'));\n\nvar _watch_plugins_helpers = require('./lib/watch_plugins_helpers');\n\nvar _active_filters_message = _interopRequireDefault(\n  require('./lib/active_filters_message')\n);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst preRunMessagePrint = _jestUtil().preRunMessage.print;\n\nlet hasExitListener = false;\nconst INTERNAL_PLUGINS = [\n  _test_path_pattern.default,\n  _test_name_pattern.default,\n  _update_snapshots.default,\n  _update_snapshots_interactive.default,\n  _quit.default\n];\nconst RESERVED_KEY_PLUGINS = new Map([\n  [\n    _update_snapshots.default,\n    {\n      forbiddenOverwriteMessage: 'updating snapshots',\n      key: 'u'\n    }\n  ],\n  [\n    _update_snapshots_interactive.default,\n    {\n      forbiddenOverwriteMessage: 'updating snapshots interactively',\n      key: 'i'\n    }\n  ],\n  [\n    _quit.default,\n    {\n      forbiddenOverwriteMessage: 'quitting watch mode'\n    }\n  ]\n]);\n\nfunction watch(\n  initialGlobalConfig,\n  contexts,\n  outputStream,\n  hasteMapInstances,\n  stdin = process.stdin,\n  hooks = new (_jestWatcher()).JestHook(),\n  filter\n) {\n  // `globalConfig` will be constantly updated and reassigned as a result of\n  // watch mode interactions.\n  let globalConfig = initialGlobalConfig;\n  let activePlugin;\n  globalConfig = (0, _update_global_config.default)(globalConfig, {\n    mode: globalConfig.watch ? 'watch' : 'watchAll',\n    passWithNoTests: true\n  });\n\n  const updateConfigAndRun = ({\n    bail,\n    changedSince,\n    collectCoverage,\n    collectCoverageFrom,\n    collectCoverageOnlyFrom,\n    coverageDirectory,\n    coverageReporters,\n    mode,\n    notify,\n    notifyMode,\n    onlyFailures,\n    reporters,\n    testNamePattern,\n    testPathPattern,\n    updateSnapshot,\n    verbose\n  } = {}) => {\n    const previousUpdateSnapshot = globalConfig.updateSnapshot;\n    globalConfig = (0, _update_global_config.default)(globalConfig, {\n      bail,\n      changedSince,\n      collectCoverage,\n      collectCoverageFrom,\n      collectCoverageOnlyFrom,\n      coverageDirectory,\n      coverageReporters,\n      mode,\n      notify,\n      notifyMode,\n      onlyFailures,\n      reporters,\n      testNamePattern,\n      testPathPattern,\n      updateSnapshot,\n      verbose\n    });\n    startRun(globalConfig);\n    globalConfig = (0, _update_global_config.default)(globalConfig, {\n      // updateSnapshot is not sticky after a run.\n      updateSnapshot:\n        previousUpdateSnapshot === 'all' ? 'none' : previousUpdateSnapshot\n    });\n  };\n\n  const watchPlugins = INTERNAL_PLUGINS.map(\n    InternalPlugin =>\n      new InternalPlugin({\n        stdin,\n        stdout: outputStream\n      })\n  );\n  watchPlugins.forEach(plugin => {\n    const hookSubscriber = hooks.getSubscriber();\n\n    if (plugin.apply) {\n      plugin.apply(hookSubscriber);\n    }\n  });\n\n  if (globalConfig.watchPlugins != null) {\n    const watchPluginKeys = new Map();\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (\n        var _iterator = watchPlugins[Symbol.iterator](), _step;\n        !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n        _iteratorNormalCompletion = true\n      ) {\n        const plugin = _step.value;\n        const reservedInfo = RESERVED_KEY_PLUGINS.get(plugin.constructor) || {};\n        const key = reservedInfo.key || getPluginKey(plugin, globalConfig);\n\n        if (!key) {\n          continue;\n        }\n\n        const forbiddenOverwriteMessage =\n          reservedInfo.forbiddenOverwriteMessage;\n        watchPluginKeys.set(key, {\n          forbiddenOverwriteMessage,\n          overwritable: forbiddenOverwriteMessage == null,\n          plugin\n        });\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (\n        var _iterator2 = globalConfig.watchPlugins[Symbol.iterator](), _step2;\n        !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);\n        _iteratorNormalCompletion2 = true\n      ) {\n        const pluginWithConfig = _step2.value;\n        let plugin;\n\n        try {\n          const ThirdPartyPlugin = require(pluginWithConfig.path);\n\n          plugin = new ThirdPartyPlugin({\n            config: pluginWithConfig.config,\n            stdin,\n            stdout: outputStream\n          });\n        } catch (error) {\n          const errorWithContext = new Error(\n            `Failed to initialize watch plugin \"${_chalk().default.bold(\n              (0, _slash().default)(\n                _path().default.relative(process.cwd(), pluginWithConfig.path)\n              )\n            )}\":\\n\\n${(0, _jestMessageUtil().formatExecError)(\n              error,\n              contexts[0].config,\n              {\n                noStackTrace: false\n              }\n            )}`\n          );\n          delete errorWithContext.stack;\n          return Promise.reject(errorWithContext);\n        }\n\n        checkForConflicts(watchPluginKeys, plugin, globalConfig);\n        const hookSubscriber = hooks.getSubscriber();\n\n        if (plugin.apply) {\n          plugin.apply(hookSubscriber);\n        }\n\n        watchPlugins.push(plugin);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n\n  const failedTestsCache = new _FailedTestsCache.default();\n  let searchSources = contexts.map(context => ({\n    context,\n    searchSource: new _SearchSource.default(context)\n  }));\n  let isRunning = false;\n  let testWatcher;\n  let shouldDisplayWatchUsage = true;\n  let isWatchUsageDisplayed = false;\n\n  const emitFileChange = () => {\n    if (hooks.isUsed('onFileChange')) {\n      const projects = searchSources.map(({context, searchSource}) => ({\n        config: context.config,\n        testPaths: searchSource.findMatchingTests('').tests.map(t => t.path)\n      }));\n      hooks.getEmitter().onFileChange({\n        projects\n      });\n    }\n  };\n\n  emitFileChange();\n  hasteMapInstances.forEach((hasteMapInstance, index) => {\n    hasteMapInstance.on('change', ({eventsQueue, hasteFS, moduleMap}) => {\n      const validPaths = eventsQueue.filter(({filePath}) =>\n        (0, _is_valid_path.default)(globalConfig, filePath)\n      );\n\n      if (validPaths.length) {\n        const context = (contexts[index] = (0, _create_context.default)(\n          contexts[index].config,\n          {\n            hasteFS,\n            moduleMap\n          }\n        ));\n        activePlugin = null;\n        searchSources = searchSources.slice();\n        searchSources[index] = {\n          context,\n          searchSource: new _SearchSource.default(context)\n        };\n        emitFileChange();\n        startRun(globalConfig);\n      }\n    });\n  });\n\n  if (!hasExitListener) {\n    hasExitListener = true;\n    process.on('exit', () => {\n      if (activePlugin) {\n        outputStream.write(_ansiEscapes().default.cursorDown());\n        outputStream.write(_ansiEscapes().default.eraseDown);\n      }\n    });\n  }\n\n  const startRun = globalConfig => {\n    if (isRunning) {\n      return Promise.resolve(null);\n    }\n\n    testWatcher = new _TestWatcher.default({\n      isWatchMode: true\n    });\n    _jestUtil().isInteractive &&\n      outputStream.write(_jestUtil().specialChars.CLEAR);\n    preRunMessagePrint(outputStream);\n    isRunning = true;\n    const configs = contexts.map(context => context.config);\n    const changedFilesPromise = (0, _getChangedFilesPromise.default)(\n      globalConfig,\n      configs\n    ); // Clear cache for required modules\n\n    _jestResolve().default.clearDefaultResolverCache();\n\n    return (0, _runJest.default)({\n      changedFilesPromise,\n      contexts,\n      failedTestsCache,\n      filter,\n      globalConfig,\n      jestHooks: hooks.getEmitter(),\n      onComplete: results => {\n        isRunning = false;\n        hooks.getEmitter().onTestRunComplete(results); // Create a new testWatcher instance so that re-runs won't be blocked.\n        // The old instance that was passed to Jest will still be interrupted\n        // and prevent test runs from the previous run.\n\n        testWatcher = new _TestWatcher.default({\n          isWatchMode: true\n        }); // Do not show any Watch Usage related stuff when running in a\n        // non-interactive environment\n\n        if (_jestUtil().isInteractive) {\n          if (shouldDisplayWatchUsage) {\n            outputStream.write(usage(globalConfig, watchPlugins));\n            shouldDisplayWatchUsage = false; // hide Watch Usage after first run\n\n            isWatchUsageDisplayed = true;\n          } else {\n            outputStream.write(showToggleUsagePrompt());\n            shouldDisplayWatchUsage = false;\n            isWatchUsageDisplayed = false;\n          }\n        } else {\n          outputStream.write('\\n');\n        }\n\n        failedTestsCache.setTestResults(results.testResults);\n      },\n      outputStream,\n      startRun,\n      testWatcher\n    }).catch((\n      error // Errors thrown inside `runJest`, e.g. by resolvers, are caught here for\n    ) =>\n      // continuous watch mode execution. We need to reprint them to the\n      // terminal and give just a little bit of extra space so they fit below\n      // `preRunMessagePrint` message nicely.\n      console.error(\n        '\\n\\n' +\n          (0, _jestMessageUtil().formatExecError)(error, contexts[0].config, {\n            noStackTrace: false\n          })\n      )\n    );\n  };\n\n  const onKeypress = key => {\n    if (\n      key === _jestWatcher().KEYS.CONTROL_C ||\n      key === _jestWatcher().KEYS.CONTROL_D\n    ) {\n      if (typeof stdin.setRawMode === 'function') {\n        stdin.setRawMode(false);\n      }\n\n      outputStream.write('\\n');\n      (0, _exit().default)(0);\n      return;\n    }\n\n    if (activePlugin != null && activePlugin.onKey) {\n      // if a plugin is activate, Jest should let it handle keystrokes, so ignore\n      // them here\n      activePlugin.onKey(key);\n      return;\n    } // Abort test run\n\n    const pluginKeys = (0, _watch_plugins_helpers.getSortedUsageRows)(\n      watchPlugins,\n      globalConfig\n    ).map(usage => Number(usage.key).toString(16));\n\n    if (\n      isRunning &&\n      testWatcher &&\n      ['q', _jestWatcher().KEYS.ENTER, 'a', 'o', 'f']\n        .concat(pluginKeys)\n        .includes(key)\n    ) {\n      testWatcher.setState({\n        interrupted: true\n      });\n      return;\n    }\n\n    const matchingWatchPlugin = (0,\n    _watch_plugins_helpers.filterInteractivePlugins)(\n      watchPlugins,\n      globalConfig\n    ).find(plugin => getPluginKey(plugin, globalConfig) === key);\n\n    if (matchingWatchPlugin != null) {\n      if (isRunning) {\n        testWatcher.setState({\n          interrupted: true\n        });\n        return;\n      } // \"activate\" the plugin, which has jest ignore keystrokes so the plugin\n      // can handle them\n\n      activePlugin = matchingWatchPlugin;\n\n      if (activePlugin.run) {\n        activePlugin.run(globalConfig, updateConfigAndRun).then(\n          shouldRerun => {\n            activePlugin = null;\n\n            if (shouldRerun) {\n              updateConfigAndRun();\n            }\n          },\n          () => {\n            activePlugin = null;\n            onCancelPatternPrompt();\n          }\n        );\n      } else {\n        activePlugin = null;\n      }\n    }\n\n    switch (key) {\n      case _jestWatcher().KEYS.ENTER:\n        startRun(globalConfig);\n        break;\n\n      case 'a':\n        globalConfig = (0, _update_global_config.default)(globalConfig, {\n          mode: 'watchAll',\n          testNamePattern: '',\n          testPathPattern: ''\n        });\n        startRun(globalConfig);\n        break;\n\n      case 'c':\n        updateConfigAndRun({\n          mode: 'watch',\n          testNamePattern: '',\n          testPathPattern: ''\n        });\n        break;\n\n      case 'f':\n        globalConfig = (0, _update_global_config.default)(globalConfig, {\n          onlyFailures: !globalConfig.onlyFailures\n        });\n        startRun(globalConfig);\n        break;\n\n      case 'o':\n        globalConfig = (0, _update_global_config.default)(globalConfig, {\n          mode: 'watch',\n          testNamePattern: '',\n          testPathPattern: ''\n        });\n        startRun(globalConfig);\n        break;\n\n      case '?':\n        break;\n\n      case 'w':\n        if (!shouldDisplayWatchUsage && !isWatchUsageDisplayed) {\n          outputStream.write(_ansiEscapes().default.cursorUp());\n          outputStream.write(_ansiEscapes().default.eraseDown);\n          outputStream.write(usage(globalConfig, watchPlugins));\n          isWatchUsageDisplayed = true;\n          shouldDisplayWatchUsage = false;\n        }\n\n        break;\n    }\n  };\n\n  const onCancelPatternPrompt = () => {\n    outputStream.write(_ansiEscapes().default.cursorHide);\n    outputStream.write(_jestUtil().specialChars.CLEAR);\n    outputStream.write(usage(globalConfig, watchPlugins));\n    outputStream.write(_ansiEscapes().default.cursorShow);\n  };\n\n  if (typeof stdin.setRawMode === 'function') {\n    stdin.setRawMode(true);\n    stdin.resume();\n    stdin.setEncoding('utf8');\n    stdin.on('data', onKeypress);\n  }\n\n  startRun(globalConfig);\n  return Promise.resolve();\n}\n\nconst checkForConflicts = (watchPluginKeys, plugin, globalConfig) => {\n  const key = getPluginKey(plugin, globalConfig);\n\n  if (!key) {\n    return;\n  }\n\n  const conflictor = watchPluginKeys.get(key);\n\n  if (!conflictor || conflictor.overwritable) {\n    watchPluginKeys.set(key, {\n      overwritable: false,\n      plugin\n    });\n    return;\n  }\n\n  let error;\n\n  if (conflictor.forbiddenOverwriteMessage) {\n    error = `\n  Watch plugin ${_chalk().default.bold.red(\n    getPluginIdentifier(plugin)\n  )} attempted to register key ${_chalk().default.bold.red(`<${key}>`)},\n  that is reserved internally for ${_chalk().default.bold.red(\n    conflictor.forbiddenOverwriteMessage\n  )}.\n  Please change the configuration key for this plugin.`.trim();\n  } else {\n    const plugins = [conflictor.plugin, plugin]\n      .map(p => _chalk().default.bold.red(getPluginIdentifier(p)))\n      .join(' and ');\n    error = `\n  Watch plugins ${plugins} both attempted to register key ${_chalk().default.bold.red(\n      `<${key}>`\n    )}.\n  Please change the key configuration for one of the conflicting plugins to avoid overlap.`.trim();\n  }\n\n  throw new (_jestValidate()).ValidationError(\n    'Watch plugin configuration error',\n    error\n  );\n};\n\nconst getPluginIdentifier = (\n  plugin // This breaks as `displayName` is not defined as a static, but since\n  // WatchPlugin is an interface, and it is my understanding interface\n  // static fields are not definable anymore, no idea how to circumvent\n  // this :-(\n  // @ts-ignore: leave `displayName` be.\n) => plugin.constructor.displayName || plugin.constructor.name;\n\nconst getPluginKey = (plugin, globalConfig) => {\n  if (typeof plugin.getUsageInfo === 'function') {\n    return (\n      plugin.getUsageInfo(globalConfig) || {\n        key: null\n      }\n    ).key;\n  }\n\n  return null;\n};\n\nconst usage = (globalConfig, watchPlugins, delimiter = '\\n') => {\n  const messages = [\n    (0, _active_filters_message.default)(globalConfig),\n    globalConfig.testPathPattern || globalConfig.testNamePattern\n      ? _chalk().default.dim(' \\u203A Press ') +\n        'c' +\n        _chalk().default.dim(' to clear filters.')\n      : null,\n    '\\n' + _chalk().default.bold('Watch Usage'),\n    globalConfig.watch\n      ? _chalk().default.dim(' \\u203A Press ') +\n        'a' +\n        _chalk().default.dim(' to run all tests.')\n      : null,\n    globalConfig.onlyFailures\n      ? _chalk().default.dim(' \\u203A Press ') +\n        'f' +\n        _chalk().default.dim(' to quit \"only failed tests\" mode.')\n      : _chalk().default.dim(' \\u203A Press ') +\n        'f' +\n        _chalk().default.dim(' to run only failed tests.'),\n    (globalConfig.watchAll ||\n      globalConfig.testPathPattern ||\n      globalConfig.testNamePattern) &&\n    !globalConfig.noSCM\n      ? _chalk().default.dim(' \\u203A Press ') +\n        'o' +\n        _chalk().default.dim(' to only run tests related to changed files.')\n      : null,\n    ...(0, _watch_plugins_helpers.getSortedUsageRows)(\n      watchPlugins,\n      globalConfig\n    ).map(\n      plugin =>\n        _chalk().default.dim(' \\u203A Press') +\n        ' ' +\n        plugin.key +\n        ' ' +\n        _chalk().default.dim(`to ${plugin.prompt}.`)\n    ),\n    _chalk().default.dim(' \\u203A Press ') +\n      'Enter' +\n      _chalk().default.dim(' to trigger a test run.')\n  ];\n  return messages.filter(message => !!message).join(delimiter) + '\\n';\n};\n\nconst showToggleUsagePrompt = () =>\n  '\\n' +\n  _chalk().default.bold('Watch Usage: ') +\n  _chalk().default.dim('Press ') +\n  'w' +\n  _chalk().default.dim(' to show more.');\n"]},"metadata":{},"sourceType":"script"}