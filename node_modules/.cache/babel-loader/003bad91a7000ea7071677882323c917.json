{"ast":null,"code":"this.workbox = this.workbox || {}, this.workbox.googleAnalytics = function (e, t, o, n, a, c, w) {\n  \"use strict\";\n\n  try {\n    self[\"workbox:google-analytics:4.3.1\"] && _();\n  } catch (e) {}\n\n  const r = /^\\/(\\w+\\/)?collect/,\n        s = e => async ({\n    queue: t\n  }) => {\n    let o;\n\n    for (; o = await t.shiftRequest();) {\n      const {\n        request: n,\n        timestamp: a\n      } = o,\n            c = new URL(n.url);\n\n      try {\n        const w = \"POST\" === n.method ? new URLSearchParams(await n.clone().text()) : c.searchParams,\n              r = a - (Number(w.get(\"qt\")) || 0),\n              s = Date.now() - r;\n        if (w.set(\"qt\", s), e.parameterOverrides) for (const t of Object.keys(e.parameterOverrides)) {\n          const o = e.parameterOverrides[t];\n          w.set(t, o);\n        }\n        \"function\" == typeof e.hitFilter && e.hitFilter.call(null, w), await fetch(new Request(c.origin + c.pathname, {\n          body: w.toString(),\n          method: \"POST\",\n          mode: \"cors\",\n          credentials: \"omit\",\n          headers: {\n            \"Content-Type\": \"text/plain\"\n          }\n        }));\n      } catch (e) {\n        throw await t.unshiftRequest(o), e;\n      }\n    }\n  },\n        i = e => {\n    const t = ({\n      url: e\n    }) => \"www.google-analytics.com\" === e.hostname && r.test(e.pathname),\n          o = new w.NetworkOnly({\n      plugins: [e]\n    });\n\n    return [new n.Route(t, o, \"GET\"), new n.Route(t, o, \"POST\")];\n  },\n        l = e => {\n    const t = new c.NetworkFirst({\n      cacheName: e\n    });\n    return new n.Route(({\n      url: e\n    }) => \"www.google-analytics.com\" === e.hostname && \"/analytics.js\" === e.pathname, t, \"GET\");\n  },\n        m = e => {\n    const t = new c.NetworkFirst({\n      cacheName: e\n    });\n    return new n.Route(({\n      url: e\n    }) => \"www.googletagmanager.com\" === e.hostname && \"/gtag/js\" === e.pathname, t, \"GET\");\n  },\n        u = e => {\n    const t = new c.NetworkFirst({\n      cacheName: e\n    });\n    return new n.Route(({\n      url: e\n    }) => \"www.googletagmanager.com\" === e.hostname && \"/gtm.js\" === e.pathname, t, \"GET\");\n  };\n\n  return e.initialize = (e = {}) => {\n    const n = o.cacheNames.getGoogleAnalyticsName(e.cacheName),\n          c = new t.Plugin(\"workbox-google-analytics\", {\n      maxRetentionTime: 2880,\n      onSync: s(e)\n    }),\n          w = [u(n), l(n), m(n), ...i(c)],\n          r = new a.Router();\n\n    for (const e of w) r.registerRoute(e);\n\n    r.addFetchListener();\n  }, e;\n}({}, workbox.backgroundSync, workbox.core._private, workbox.routing, workbox.routing, workbox.strategies, workbox.strategies);","map":{"version":3,"sources":["../_version.mjs","../utils/constants.mjs","../initialize.mjs"],"names":["self","_","e","COLLECT_PATHS_REGEX","createOnSyncCallback","config","async","queue","entry","shiftRequest","request","timestamp","url","URL","params","method","URLSearchParams","clone","text","searchParams","originalHitTime","Number","get","queueTime","Date","now","set","parameterOverrides","param","Object","keys","value","hitFilter","call","fetch","Request","origin","pathname","body","toString","mode","credentials","headers","err","unshiftRequest","createCollectRoutes","queuePlugin","match","hostname","test","handler","NetworkOnly","plugins","Route","createAnalyticsJsRoute","cacheName","NetworkFirst","createGtagJsRoute","createGtmJsRoute","options","cacheNames","getGoogleAnalyticsName","Plugin","maxRetentionTime","onSync","routes","router","Router","route","registerRoute","addFetchListener"],"mappings":"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","sourcesContent":["try{self['workbox:google-analytics:4.3.1']&&_()}catch(e){}// eslint-disable-line","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\nexport const QUEUE_NAME = 'workbox-google-analytics';\nexport const MAX_RETENTION_TIME = 60 * 48; // Two days in minutes\nexport const GOOGLE_ANALYTICS_HOST = 'www.google-analytics.com';\nexport const GTM_HOST = 'www.googletagmanager.com';\nexport const ANALYTICS_JS_PATH = '/analytics.js';\nexport const GTAG_JS_PATH = '/gtag/js';\nexport const GTM_JS_PATH = '/gtm.js';\nexport const COLLECT_DEFAULT_PATH = '/collect';\n\n// This RegExp matches all known Measurement Protocol single-hit collect\n// endpoints. Most of the time the default path (/collect) is used, but\n// occasionally an experimental endpoint is used when testing new features,\n// (e.g. /r/collect or /j/collect)\nexport const COLLECT_PATHS_REGEX = /^\\/(\\w+\\/)?collect/;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {Plugin} from 'workbox-background-sync/Plugin.mjs';\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\nimport {getFriendlyURL} from 'workbox-core/_private/getFriendlyURL.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {Route} from 'workbox-routing/Route.mjs';\nimport {Router} from 'workbox-routing/Router.mjs';\nimport {NetworkFirst} from 'workbox-strategies/NetworkFirst.mjs';\nimport {NetworkOnly} from 'workbox-strategies/NetworkOnly.mjs';\nimport {\n  QUEUE_NAME,\n  MAX_RETENTION_TIME,\n  GOOGLE_ANALYTICS_HOST,\n  GTM_HOST,\n  ANALYTICS_JS_PATH,\n  GTAG_JS_PATH,\n  GTM_JS_PATH,\n  COLLECT_PATHS_REGEX,\n} from './utils/constants.mjs';\nimport './_version.mjs';\n\n/**\n * Creates the requestWillDequeue callback to be used with the background\n * sync queue plugin. The callback takes the failed request and adds the\n * `qt` param based on the current time, as well as applies any other\n * user-defined hit modifications.\n *\n * @param {Object} config See workbox.googleAnalytics.initialize.\n * @return {Function} The requestWillDequeu callback function.\n *\n * @private\n */\nconst createOnSyncCallback = (config) => {\n  return async ({queue}) => {\n    let entry;\n    while (entry = await queue.shiftRequest()) {\n      const {request, timestamp} = entry;\n      const url = new URL(request.url);\n\n      try {\n        // Measurement protocol requests can set their payload parameters in\n        // either the URL query string (for GET requests) or the POST body.\n        const params = request.method === 'POST' ?\n            new URLSearchParams(await request.clone().text()) :\n            url.searchParams;\n\n        // Calculate the qt param, accounting for the fact that an existing\n        // qt param may be present and should be updated rather than replaced.\n        const originalHitTime = timestamp - (Number(params.get('qt')) || 0);\n        const queueTime = Date.now() - originalHitTime;\n\n        // Set the qt param prior to applying hitFilter or parameterOverrides.\n        params.set('qt', queueTime);\n\n        // Apply `paramterOverrideds`, if set.\n        if (config.parameterOverrides) {\n          for (const param of Object.keys(config.parameterOverrides)) {\n            const value = config.parameterOverrides[param];\n            params.set(param, value);\n          }\n        }\n\n        // Apply `hitFilter`, if set.\n        if (typeof config.hitFilter === 'function') {\n          config.hitFilter.call(null, params);\n        }\n\n        // Retry the fetch. Ignore URL search params from the URL as they're\n        // now in the post body.\n        await fetch(new Request(url.origin + url.pathname, {\n          body: params.toString(),\n          method: 'POST',\n          mode: 'cors',\n          credentials: 'omit',\n          headers: {'Content-Type': 'text/plain'},\n        }));\n\n\n        if (process.env.NODE_ENV !== 'production') {\n          logger.log(`Request for '${getFriendlyURL(url.href)}'` +\n             `has been replayed`);\n        }\n      } catch (err) {\n        await queue.unshiftRequest(entry);\n\n        if (process.env.NODE_ENV !== 'production') {\n          logger.log(`Request for '${getFriendlyURL(url.href)}'` +\n             `failed to replay, putting it back in the queue.`);\n        }\n        throw err;\n      }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log(`All Google Analytics request successfully replayed; ` +\n          `the queue is now empty!`);\n    }\n  };\n};\n\n/**\n * Creates GET and POST routes to catch failed Measurement Protocol hits.\n *\n * @param {Plugin} queuePlugin\n * @return {Array<Route>} The created routes.\n *\n * @private\n */\nconst createCollectRoutes = (queuePlugin) => {\n  const match = ({url}) => url.hostname === GOOGLE_ANALYTICS_HOST &&\n      COLLECT_PATHS_REGEX.test(url.pathname);\n\n  const handler = new NetworkOnly({\n    plugins: [queuePlugin],\n  });\n\n  return [\n    new Route(match, handler, 'GET'),\n    new Route(match, handler, 'POST'),\n  ];\n};\n\n/**\n * Creates a route with a network first strategy for the analytics.js script.\n *\n * @param {string} cacheName\n * @return {Route} The created route.\n *\n * @private\n */\nconst createAnalyticsJsRoute = (cacheName) => {\n  const match = ({url}) => url.hostname === GOOGLE_ANALYTICS_HOST &&\n      url.pathname === ANALYTICS_JS_PATH;\n  const handler = new NetworkFirst({cacheName});\n\n  return new Route(match, handler, 'GET');\n};\n\n/**\n * Creates a route with a network first strategy for the gtag.js script.\n *\n * @param {string} cacheName\n * @return {Route} The created route.\n *\n * @private\n */\nconst createGtagJsRoute = (cacheName) => {\n  const match = ({url}) => url.hostname === GTM_HOST &&\n      url.pathname === GTAG_JS_PATH;\n  const handler = new NetworkFirst({cacheName});\n\n  return new Route(match, handler, 'GET');\n};\n\n/**\n * Creates a route with a network first strategy for the gtm.js script.\n *\n * @param {string} cacheName\n * @return {Route} The created route.\n *\n * @private\n */\nconst createGtmJsRoute = (cacheName) => {\n  const match = ({url}) => url.hostname === GTM_HOST &&\n      url.pathname === GTM_JS_PATH;\n  const handler = new NetworkFirst({cacheName});\n\n  return new Route(match, handler, 'GET');\n};\n\n/**\n * @param {Object=} [options]\n * @param {Object} [options.cacheName] The cache name to store and retrieve\n *     analytics.js. Defaults to the cache names provided by `workbox-core`.\n * @param {Object} [options.parameterOverrides]\n *     [Measurement Protocol parameters](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters),\n *     expressed as key/value pairs, to be added to replayed Google Analytics\n *     requests. This can be used to, e.g., set a custom dimension indicating\n *     that the request was replayed.\n * @param {Function} [options.hitFilter] A function that allows you to modify\n *     the hit parameters prior to replaying\n *     the hit. The function is invoked with the original hit's URLSearchParams\n *     object as its only argument.\n *\n * @memberof workbox.googleAnalytics\n */\nconst initialize = (options = {}) => {\n  const cacheName = cacheNames.getGoogleAnalyticsName(options.cacheName);\n\n  const queuePlugin = new Plugin(QUEUE_NAME, {\n    maxRetentionTime: MAX_RETENTION_TIME,\n    onSync: createOnSyncCallback(options),\n  });\n\n  const routes = [\n    createGtmJsRoute(cacheName),\n    createAnalyticsJsRoute(cacheName),\n    createGtagJsRoute(cacheName),\n    ...createCollectRoutes(queuePlugin),\n  ];\n\n  const router = new Router();\n  for (const route of routes) {\n    router.registerRoute(route);\n  }\n\n  router.addFetchListener();\n};\n\nexport {\n  initialize,\n};\n"]},"metadata":{},"sourceType":"script"}