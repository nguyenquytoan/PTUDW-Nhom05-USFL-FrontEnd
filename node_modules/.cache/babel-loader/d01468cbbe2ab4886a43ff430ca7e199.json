{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar assert = require('assert');\n\nvar util = require('../../');\n\nassert.ok(process.stdout.writable);\nassert.ok(process.stderr.writable);\nvar stdout_write = global.process.stdout.write;\nvar strings = [];\n\nglobal.process.stdout.write = function (string) {\n  strings.push(string);\n};\n\nconsole._stderr = process.stdout;\nvar tests = [{\n  input: 'foo',\n  output: 'foo'\n}, {\n  input: undefined,\n  output: 'undefined'\n}, {\n  input: null,\n  output: 'null'\n}, {\n  input: false,\n  output: 'false'\n}, {\n  input: 42,\n  output: '42'\n}, {\n  input: function () {},\n  output: '[Function]'\n}, {\n  input: parseInt('not a number', 10),\n  output: 'NaN'\n}, {\n  input: {\n    answer: 42\n  },\n  output: '{ answer: 42 }'\n}, {\n  input: [1, 2, 3],\n  output: '[ 1, 2, 3 ]'\n}]; // test util.log()\n\ntests.forEach(function (test) {\n  util.log(test.input);\n  var result = strings.shift().trim(),\n      re = /[0-9]{1,2} [A-Z][a-z]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} - (.+)$/,\n      match = re.exec(result);\n  assert.ok(match);\n  assert.equal(match[1], test.output);\n});\nglobal.process.stdout.write = stdout_write;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/util/test/node/log.js"],"names":["assert","require","util","ok","process","stdout","writable","stderr","stdout_write","global","write","strings","string","push","console","_stderr","tests","input","output","undefined","parseInt","answer","forEach","test","log","result","shift","trim","re","match","exec","equal"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAAlB;;AAEAD,MAAM,CAACG,EAAP,CAAUC,OAAO,CAACC,MAAR,CAAeC,QAAzB;AACAN,MAAM,CAACG,EAAP,CAAUC,OAAO,CAACG,MAAR,CAAeD,QAAzB;AAEA,IAAIE,YAAY,GAAGC,MAAM,CAACL,OAAP,CAAeC,MAAf,CAAsBK,KAAzC;AACA,IAAIC,OAAO,GAAG,EAAd;;AACAF,MAAM,CAACL,OAAP,CAAeC,MAAf,CAAsBK,KAAtB,GAA8B,UAASE,MAAT,EAAiB;AAC7CD,EAAAA,OAAO,CAACE,IAAR,CAAaD,MAAb;AACD,CAFD;;AAGAE,OAAO,CAACC,OAAR,GAAkBX,OAAO,CAACC,MAA1B;AAEA,IAAIW,KAAK,GAAG,CACV;AAACC,EAAAA,KAAK,EAAE,KAAR;AAAeC,EAAAA,MAAM,EAAE;AAAvB,CADU,EAEV;AAACD,EAAAA,KAAK,EAAEE,SAAR;AAAmBD,EAAAA,MAAM,EAAE;AAA3B,CAFU,EAGV;AAACD,EAAAA,KAAK,EAAE,IAAR;AAAcC,EAAAA,MAAM,EAAE;AAAtB,CAHU,EAIV;AAACD,EAAAA,KAAK,EAAE,KAAR;AAAeC,EAAAA,MAAM,EAAE;AAAvB,CAJU,EAKV;AAACD,EAAAA,KAAK,EAAE,EAAR;AAAYC,EAAAA,MAAM,EAAE;AAApB,CALU,EAMV;AAACD,EAAAA,KAAK,EAAE,YAAU,CAAE,CAApB;AAAsBC,EAAAA,MAAM,EAAE;AAA9B,CANU,EAOV;AAACD,EAAAA,KAAK,EAAEG,QAAQ,CAAC,cAAD,EAAiB,EAAjB,CAAhB;AAAsCF,EAAAA,MAAM,EAAE;AAA9C,CAPU,EAQV;AAACD,EAAAA,KAAK,EAAE;AAACI,IAAAA,MAAM,EAAE;AAAT,GAAR;AAAsBH,EAAAA,MAAM,EAAE;AAA9B,CARU,EASV;AAACD,EAAAA,KAAK,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAR;AAAiBC,EAAAA,MAAM,EAAE;AAAzB,CATU,CAAZ,C,CAYA;;AACAF,KAAK,CAACM,OAAN,CAAc,UAASC,IAAT,EAAe;AAC3BrB,EAAAA,IAAI,CAACsB,GAAL,CAASD,IAAI,CAACN,KAAd;AACA,MAAIQ,MAAM,GAAGd,OAAO,CAACe,KAAR,GAAgBC,IAAhB,EAAb;AAAA,MACIC,EAAE,GAAI,6DADV;AAAA,MAEIC,KAAK,GAAGD,EAAE,CAACE,IAAH,CAAQL,MAAR,CAFZ;AAGAzB,EAAAA,MAAM,CAACG,EAAP,CAAU0B,KAAV;AACA7B,EAAAA,MAAM,CAAC+B,KAAP,CAAaF,KAAK,CAAC,CAAD,CAAlB,EAAuBN,IAAI,CAACL,MAA5B;AACD,CAPD;AASAT,MAAM,CAACL,OAAP,CAAeC,MAAf,CAAsBK,KAAtB,GAA8BF,YAA9B","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nvar assert = require('assert');\nvar util = require('../../');\n\nassert.ok(process.stdout.writable);\nassert.ok(process.stderr.writable);\n\nvar stdout_write = global.process.stdout.write;\nvar strings = [];\nglobal.process.stdout.write = function(string) {\n  strings.push(string);\n};\nconsole._stderr = process.stdout;\n\nvar tests = [\n  {input: 'foo', output: 'foo'},\n  {input: undefined, output: 'undefined'},\n  {input: null, output: 'null'},\n  {input: false, output: 'false'},\n  {input: 42, output: '42'},\n  {input: function(){}, output: '[Function]'},\n  {input: parseInt('not a number', 10), output: 'NaN'},\n  {input: {answer: 42}, output: '{ answer: 42 }'},\n  {input: [1,2,3], output: '[ 1, 2, 3 ]'}\n];\n\n// test util.log()\ntests.forEach(function(test) {\n  util.log(test.input);\n  var result = strings.shift().trim(),\n      re = (/[0-9]{1,2} [A-Z][a-z]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} - (.+)$/),\n      match = re.exec(result);\n  assert.ok(match);\n  assert.equal(match[1], test.output);\n});\n\nglobal.process.stdout.write = stdout_write;\n"]},"metadata":{},"sourceType":"script"}