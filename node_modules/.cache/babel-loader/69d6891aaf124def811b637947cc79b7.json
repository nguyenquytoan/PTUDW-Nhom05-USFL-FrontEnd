{"ast":null,"code":"\"use strict\";\n\nfunction consoleLogIsCalledBy(log, methodName) {\n  it(methodName + \" calls console.log\", function () {\n    log.setLevel(log.levels.TRACE);\n    log[methodName](\"Log message for call to \" + methodName);\n    expect(console.log.calls.length).toEqual(1);\n  });\n}\n\nfunction mockConsole() {\n  return {\n    \"log\": jasmine.createSpy(\"console.log\")\n  };\n}\n\ndefine(['../lib/loglevel'], function (log) {\n  var originalConsole = window.console;\n  describe(\"Fallback functionality:\", function () {\n    describe(\"with no console present\", function () {\n      beforeEach(function () {\n        window.console = undefined;\n      });\n      afterEach(function () {\n        window.console = originalConsole;\n      });\n      it(\"silent method calls are allowed\", function () {\n        var result = log.setLevel(log.levels.SILENT);\n        log.trace(\"hello\");\n        expect(result).toBeUndefined();\n      });\n      it(\"setting an active level gently returns an error string\", function () {\n        var result = log.setLevel(log.levels.TRACE);\n        expect(result).toEqual(\"No console available for logging\");\n      });\n      it(\"active method calls are allowed, once the active setLevel fails\", function () {\n        log.setLevel(log.levels.TRACE);\n        log.trace(\"hello\");\n      });\n      describe(\"if a console later appears\", function () {\n        it(\"logging is re-enabled and works correctly when next used\", function () {\n          log.setLevel(log.levels.WARN);\n          window.console = mockConsole();\n          log.error(\"error\");\n          expect(window.console.log).toHaveBeenCalled();\n        });\n        it(\"logging is re-enabled but does nothing when used at a blocked level\", function () {\n          log.setLevel(log.levels.WARN);\n          window.console = mockConsole();\n          log.trace(\"trace\");\n          expect(window.console.log).not.toHaveBeenCalled();\n        });\n        it(\"changing level works correctly from that point\", function () {\n          window.console = mockConsole();\n          var result = log.setLevel(log.levels.WARN);\n          expect(result).toBeUndefined();\n        });\n      });\n    });\n    describe(\"with a console that only supports console.log\", function () {\n      beforeEach(function () {\n        window.console = mockConsole();\n      });\n      afterEach(function () {\n        window.console = originalConsole;\n      });\n      it(\"log can be set to silent\", function () {\n        log.setLevel(log.levels.SILENT);\n      });\n      it(\"log can be set to an active level\", function () {\n        log.setLevel(log.levels.ERROR);\n      });\n      consoleLogIsCalledBy(log, \"trace\");\n      consoleLogIsCalledBy(log, \"debug\");\n      consoleLogIsCalledBy(log, \"info\");\n      consoleLogIsCalledBy(log, \"warn\");\n      consoleLogIsCalledBy(log, \"trace\");\n    });\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/loglevel/test/console-fallback-test.js"],"names":["consoleLogIsCalledBy","log","methodName","it","setLevel","levels","TRACE","expect","console","calls","length","toEqual","mockConsole","jasmine","createSpy","define","originalConsole","window","describe","beforeEach","undefined","afterEach","result","SILENT","trace","toBeUndefined","WARN","error","toHaveBeenCalled","not","ERROR"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nfunction consoleLogIsCalledBy(log, methodName) {\r\n    it(methodName + \" calls console.log\", function() {\r\n        log.setLevel(log.levels.TRACE);\r\n        log[methodName](\"Log message for call to \" + methodName);\r\n        expect(console.log.calls.length).toEqual(1);\r\n    });\r\n}\r\n\r\nfunction mockConsole() {\r\n    return {\"log\" : jasmine.createSpy(\"console.log\")};\r\n}\r\n\r\ndefine(['../lib/loglevel'], function(log) {\r\n    var originalConsole = window.console;\r\n\r\n    describe(\"Fallback functionality:\", function() {\r\n        describe(\"with no console present\", function() {\r\n            beforeEach(function() {\r\n                window.console = undefined;\r\n            });\r\n\r\n            afterEach(function() {\r\n                window.console = originalConsole;\r\n            });\r\n\r\n            it(\"silent method calls are allowed\", function() {\r\n                var result = log.setLevel(log.levels.SILENT);\r\n                log.trace(\"hello\");\r\n\r\n                expect(result).toBeUndefined();\r\n            });\r\n\r\n            it(\"setting an active level gently returns an error string\", function() {\r\n                var result = log.setLevel(log.levels.TRACE);\r\n                expect(result).toEqual(\"No console available for logging\");\r\n            });\r\n\r\n            it(\"active method calls are allowed, once the active setLevel fails\", function() {\r\n                log.setLevel(log.levels.TRACE);\r\n                log.trace(\"hello\");\r\n            });\r\n\r\n            describe(\"if a console later appears\", function () {\r\n                it(\"logging is re-enabled and works correctly when next used\", function () {\r\n                    log.setLevel(log.levels.WARN);\r\n\r\n                    window.console = mockConsole();\r\n                    log.error(\"error\");\r\n\r\n                    expect(window.console.log).toHaveBeenCalled();\r\n                });\r\n\r\n                it(\"logging is re-enabled but does nothing when used at a blocked level\", function () {\r\n                    log.setLevel(log.levels.WARN);\r\n\r\n                    window.console = mockConsole();\r\n                    log.trace(\"trace\");\r\n\r\n                    expect(window.console.log).not.toHaveBeenCalled();\r\n                });\r\n\r\n                it(\"changing level works correctly from that point\", function () {\r\n                    window.console = mockConsole();\r\n                    var result = log.setLevel(log.levels.WARN);\r\n\r\n                    expect(result).toBeUndefined();\r\n                });\r\n            });\r\n        });\r\n\r\n        describe(\"with a console that only supports console.log\", function() {\r\n            beforeEach(function() {\r\n                window.console = mockConsole();\r\n            });\r\n\r\n            afterEach(function() {\r\n                window.console = originalConsole;\r\n            });\r\n\r\n            it(\"log can be set to silent\", function() {\r\n                log.setLevel(log.levels.SILENT);\r\n            });\r\n\r\n            it(\"log can be set to an active level\", function() {\r\n                log.setLevel(log.levels.ERROR);\r\n            });\r\n\r\n            consoleLogIsCalledBy(log, \"trace\");\r\n            consoleLogIsCalledBy(log, \"debug\");\r\n            consoleLogIsCalledBy(log, \"info\");\r\n            consoleLogIsCalledBy(log, \"warn\");\r\n            consoleLogIsCalledBy(log, \"trace\");\r\n        });\r\n    });\r\n});\r\n\r\n"]},"metadata":{},"sourceType":"script"}