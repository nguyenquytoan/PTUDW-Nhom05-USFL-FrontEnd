{"ast":null,"code":"var List = require('css-tree').List;\n\nvar clone = require('css-tree').clone;\n\nvar usageUtils = require('./usage');\n\nvar clean = require('./clean');\n\nvar replace = require('./replace');\n\nvar restructure = require('./restructure');\n\nvar walk = require('css-tree').walk;\n\nfunction readChunk(children, specialComments) {\n  var buffer = new List();\n  var nonSpaceTokenInBuffer = false;\n  var protectedComment;\n  children.nextUntil(children.head, function (node, item, list) {\n    if (node.type === 'Comment') {\n      if (!specialComments || node.value.charAt(0) !== '!') {\n        list.remove(item);\n        return;\n      }\n\n      if (nonSpaceTokenInBuffer || protectedComment) {\n        return true;\n      }\n\n      list.remove(item);\n      protectedComment = node;\n      return;\n    }\n\n    if (node.type !== 'WhiteSpace') {\n      nonSpaceTokenInBuffer = true;\n    }\n\n    buffer.insert(list.remove(item));\n  });\n  return {\n    comment: protectedComment,\n    stylesheet: {\n      type: 'StyleSheet',\n      loc: null,\n      children: buffer\n    }\n  };\n}\n\nfunction compressChunk(ast, firstAtrulesAllowed, num, options) {\n  options.logger('Compress block #' + num, null, true);\n  var seed = 1;\n\n  if (ast.type === 'StyleSheet') {\n    ast.firstAtrulesAllowed = firstAtrulesAllowed;\n    ast.id = seed++;\n  }\n\n  walk(ast, {\n    visit: 'Atrule',\n    enter: function markScopes(node) {\n      if (node.block !== null) {\n        node.block.id = seed++;\n      }\n    }\n  });\n  options.logger('init', ast); // remove redundant\n\n  clean(ast, options);\n  options.logger('clean', ast); // replace nodes for shortened forms\n\n  replace(ast, options);\n  options.logger('replace', ast); // structure optimisations\n\n  if (options.restructuring) {\n    restructure(ast, options);\n  }\n\n  return ast;\n}\n\nfunction getCommentsOption(options) {\n  var comments = 'comments' in options ? options.comments : 'exclamation';\n\n  if (typeof comments === 'boolean') {\n    comments = comments ? 'exclamation' : false;\n  } else if (comments !== 'exclamation' && comments !== 'first-exclamation') {\n    comments = false;\n  }\n\n  return comments;\n}\n\nfunction getRestructureOption(options) {\n  if ('restructure' in options) {\n    return options.restructure;\n  }\n\n  return 'restructuring' in options ? options.restructuring : true;\n}\n\nfunction wrapBlock(block) {\n  return new List().appendData({\n    type: 'Rule',\n    loc: null,\n    prelude: {\n      type: 'SelectorList',\n      loc: null,\n      children: new List().appendData({\n        type: 'Selector',\n        loc: null,\n        children: new List().appendData({\n          type: 'TypeSelector',\n          loc: null,\n          name: 'x'\n        })\n      })\n    },\n    block: block\n  });\n}\n\nmodule.exports = function compress(ast, options) {\n  ast = ast || {\n    type: 'StyleSheet',\n    loc: null,\n    children: new List()\n  };\n  options = options || {};\n  var compressOptions = {\n    logger: typeof options.logger === 'function' ? options.logger : function () {},\n    restructuring: getRestructureOption(options),\n    forceMediaMerge: Boolean(options.forceMediaMerge),\n    usage: options.usage ? usageUtils.buildIndex(options.usage) : false\n  };\n  var specialComments = getCommentsOption(options);\n  var firstAtrulesAllowed = true;\n  var input;\n  var output = new List();\n  var chunk;\n  var chunkNum = 1;\n  var chunkChildren;\n\n  if (options.clone) {\n    ast = clone(ast);\n  }\n\n  if (ast.type === 'StyleSheet') {\n    input = ast.children;\n    ast.children = output;\n  } else {\n    input = wrapBlock(ast);\n  }\n\n  do {\n    chunk = readChunk(input, Boolean(specialComments));\n    compressChunk(chunk.stylesheet, firstAtrulesAllowed, chunkNum++, compressOptions);\n    chunkChildren = chunk.stylesheet.children;\n\n    if (chunk.comment) {\n      // add \\n before comment if there is another content in output\n      if (!output.isEmpty()) {\n        output.insert(List.createItem({\n          type: 'Raw',\n          value: '\\n'\n        }));\n      }\n\n      output.insert(List.createItem(chunk.comment)); // add \\n after comment if chunk is not empty\n\n      if (!chunkChildren.isEmpty()) {\n        output.insert(List.createItem({\n          type: 'Raw',\n          value: '\\n'\n        }));\n      }\n    }\n\n    if (firstAtrulesAllowed && !chunkChildren.isEmpty()) {\n      var lastRule = chunkChildren.last();\n\n      if (lastRule.type !== 'Atrule' || lastRule.name !== 'import' && lastRule.name !== 'charset') {\n        firstAtrulesAllowed = false;\n      }\n    }\n\n    if (specialComments !== 'exclamation') {\n      specialComments = false;\n    }\n\n    output.appendList(chunkChildren);\n  } while (!input.isEmpty());\n\n  return {\n    ast: ast\n  };\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/csso/lib/compress.js"],"names":["List","require","clone","usageUtils","clean","replace","restructure","walk","readChunk","children","specialComments","buffer","nonSpaceTokenInBuffer","protectedComment","nextUntil","head","node","item","list","type","value","charAt","remove","insert","comment","stylesheet","loc","compressChunk","ast","firstAtrulesAllowed","num","options","logger","seed","id","visit","enter","markScopes","block","restructuring","getCommentsOption","comments","getRestructureOption","wrapBlock","appendData","prelude","name","module","exports","compress","compressOptions","forceMediaMerge","Boolean","usage","buildIndex","input","output","chunk","chunkNum","chunkChildren","isEmpty","createItem","lastRule","last","appendList"],"mappings":"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","sourcesContent":["var List = require('css-tree').List;\nvar clone = require('css-tree').clone;\nvar usageUtils = require('./usage');\nvar clean = require('./clean');\nvar replace = require('./replace');\nvar restructure = require('./restructure');\nvar walk = require('css-tree').walk;\n\nfunction readChunk(children, specialComments) {\n    var buffer = new List();\n    var nonSpaceTokenInBuffer = false;\n    var protectedComment;\n\n    children.nextUntil(children.head, function(node, item, list) {\n        if (node.type === 'Comment') {\n            if (!specialComments || node.value.charAt(0) !== '!') {\n                list.remove(item);\n                return;\n            }\n\n            if (nonSpaceTokenInBuffer || protectedComment) {\n                return true;\n            }\n\n            list.remove(item);\n            protectedComment = node;\n            return;\n        }\n\n        if (node.type !== 'WhiteSpace') {\n            nonSpaceTokenInBuffer = true;\n        }\n\n        buffer.insert(list.remove(item));\n    });\n\n    return {\n        comment: protectedComment,\n        stylesheet: {\n            type: 'StyleSheet',\n            loc: null,\n            children: buffer\n        }\n    };\n}\n\nfunction compressChunk(ast, firstAtrulesAllowed, num, options) {\n    options.logger('Compress block #' + num, null, true);\n\n    var seed = 1;\n\n    if (ast.type === 'StyleSheet') {\n        ast.firstAtrulesAllowed = firstAtrulesAllowed;\n        ast.id = seed++;\n    }\n\n    walk(ast, {\n        visit: 'Atrule',\n        enter: function markScopes(node) {\n            if (node.block !== null) {\n                node.block.id = seed++;\n            }\n        }\n    });\n    options.logger('init', ast);\n\n    // remove redundant\n    clean(ast, options);\n    options.logger('clean', ast);\n\n    // replace nodes for shortened forms\n    replace(ast, options);\n    options.logger('replace', ast);\n\n    // structure optimisations\n    if (options.restructuring) {\n        restructure(ast, options);\n    }\n\n    return ast;\n}\n\nfunction getCommentsOption(options) {\n    var comments = 'comments' in options ? options.comments : 'exclamation';\n\n    if (typeof comments === 'boolean') {\n        comments = comments ? 'exclamation' : false;\n    } else if (comments !== 'exclamation' && comments !== 'first-exclamation') {\n        comments = false;\n    }\n\n    return comments;\n}\n\nfunction getRestructureOption(options) {\n    if ('restructure' in options) {\n        return options.restructure;\n    }\n\n    return 'restructuring' in options ? options.restructuring : true;\n}\n\nfunction wrapBlock(block) {\n    return new List().appendData({\n        type: 'Rule',\n        loc: null,\n        prelude: {\n            type: 'SelectorList',\n            loc: null,\n            children: new List().appendData({\n                type: 'Selector',\n                loc: null,\n                children: new List().appendData({\n                    type: 'TypeSelector',\n                    loc: null,\n                    name: 'x'\n                })\n            })\n        },\n        block: block\n    });\n}\n\nmodule.exports = function compress(ast, options) {\n    ast = ast || { type: 'StyleSheet', loc: null, children: new List() };\n    options = options || {};\n\n    var compressOptions = {\n        logger: typeof options.logger === 'function' ? options.logger : function() {},\n        restructuring: getRestructureOption(options),\n        forceMediaMerge: Boolean(options.forceMediaMerge),\n        usage: options.usage ? usageUtils.buildIndex(options.usage) : false\n    };\n    var specialComments = getCommentsOption(options);\n    var firstAtrulesAllowed = true;\n    var input;\n    var output = new List();\n    var chunk;\n    var chunkNum = 1;\n    var chunkChildren;\n\n    if (options.clone) {\n        ast = clone(ast);\n    }\n\n    if (ast.type === 'StyleSheet') {\n        input = ast.children;\n        ast.children = output;\n    } else {\n        input = wrapBlock(ast);\n    }\n\n    do {\n        chunk = readChunk(input, Boolean(specialComments));\n        compressChunk(chunk.stylesheet, firstAtrulesAllowed, chunkNum++, compressOptions);\n        chunkChildren = chunk.stylesheet.children;\n\n        if (chunk.comment) {\n            // add \\n before comment if there is another content in output\n            if (!output.isEmpty()) {\n                output.insert(List.createItem({\n                    type: 'Raw',\n                    value: '\\n'\n                }));\n            }\n\n            output.insert(List.createItem(chunk.comment));\n\n            // add \\n after comment if chunk is not empty\n            if (!chunkChildren.isEmpty()) {\n                output.insert(List.createItem({\n                    type: 'Raw',\n                    value: '\\n'\n                }));\n            }\n        }\n\n        if (firstAtrulesAllowed && !chunkChildren.isEmpty()) {\n            var lastRule = chunkChildren.last();\n\n            if (lastRule.type !== 'Atrule' ||\n               (lastRule.name !== 'import' && lastRule.name !== 'charset')) {\n                firstAtrulesAllowed = false;\n            }\n        }\n\n        if (specialComments !== 'exclamation') {\n            specialComments = false;\n        }\n\n        output.appendList(chunkChildren);\n    } while (!input.isEmpty());\n\n    return {\n        ast: ast\n    };\n};\n"]},"metadata":{},"sourceType":"script"}