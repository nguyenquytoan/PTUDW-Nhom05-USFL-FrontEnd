{"ast":null,"code":"/**\n * @fileoverview Rule to flag when return statement contains assignment\n * @author Ilya Volodin\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst SENTINEL_TYPE = /^(?:[a-zA-Z]+?Statement|ArrowFunctionExpression|FunctionExpression|ClassExpression)$/u; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow assignment operators in `return` statements\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-return-assign\"\n    },\n    schema: [{\n      enum: [\"except-parens\", \"always\"]\n    }]\n  },\n\n  create(context) {\n    const always = (context.options[0] || \"except-parens\") !== \"except-parens\";\n    const sourceCode = context.getSourceCode();\n    return {\n      AssignmentExpression(node) {\n        if (!always && astUtils.isParenthesised(sourceCode, node)) {\n          return;\n        }\n\n        let currentChild = node;\n        let parent = currentChild.parent; // Find ReturnStatement or ArrowFunctionExpression in ancestors.\n\n        while (parent && !SENTINEL_TYPE.test(parent.type)) {\n          currentChild = parent;\n          parent = parent.parent;\n        } // Reports.\n\n\n        if (parent && parent.type === \"ReturnStatement\") {\n          context.report({\n            node: parent,\n            message: \"Return statement should not contain assignment.\"\n          });\n        } else if (parent && parent.type === \"ArrowFunctionExpression\" && parent.body === currentChild) {\n          context.report({\n            node: parent,\n            message: \"Arrow function should not return assignment.\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-return-assign.js"],"names":["astUtils","require","SENTINEL_TYPE","module","exports","meta","type","docs","description","category","recommended","url","schema","enum","create","context","always","options","sourceCode","getSourceCode","AssignmentExpression","node","isParenthesised","currentChild","parent","test","report","message","body"],"mappings":"AAAA;;;;AAIA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEA,MAAMC,aAAa,GAAG,uFAAtB,C,CAEA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,sDADX;AAEFC,MAAAA,QAAQ,EAAE,gBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,CAAC,eAAD,EAAkB,QAAlB;AADV,KADI;AAVN,GADO;;AAkBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,MAAM,GAAG,CAACD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,eAAvB,MAA4C,eAA3D;AACA,UAAMC,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB;AAEA,WAAO;AACHC,MAAAA,oBAAoB,CAACC,IAAD,EAAO;AACvB,YAAI,CAACL,MAAD,IAAWhB,QAAQ,CAACsB,eAAT,CAAyBJ,UAAzB,EAAqCG,IAArC,CAAf,EAA2D;AACvD;AACH;;AAED,YAAIE,YAAY,GAAGF,IAAnB;AACA,YAAIG,MAAM,GAAGD,YAAY,CAACC,MAA1B,CANuB,CAQvB;;AACA,eAAOA,MAAM,IAAI,CAACtB,aAAa,CAACuB,IAAd,CAAmBD,MAAM,CAAClB,IAA1B,CAAlB,EAAmD;AAC/CiB,UAAAA,YAAY,GAAGC,MAAf;AACAA,UAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;AACH,SAZsB,CAcvB;;;AACA,YAAIA,MAAM,IAAIA,MAAM,CAAClB,IAAP,KAAgB,iBAA9B,EAAiD;AAC7CS,UAAAA,OAAO,CAACW,MAAR,CAAe;AACXL,YAAAA,IAAI,EAAEG,MADK;AAEXG,YAAAA,OAAO,EAAE;AAFE,WAAf;AAIH,SALD,MAKO,IAAIH,MAAM,IAAIA,MAAM,CAAClB,IAAP,KAAgB,yBAA1B,IAAuDkB,MAAM,CAACI,IAAP,KAAgBL,YAA3E,EAAyF;AAC5FR,UAAAA,OAAO,CAACW,MAAR,CAAe;AACXL,YAAAA,IAAI,EAAEG,MADK;AAEXG,YAAAA,OAAO,EAAE;AAFE,WAAf;AAIH;AACJ;;AA3BE,KAAP;AA6BH;;AAnDY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to flag when return statement contains assignment\n * @author Ilya Volodin\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst SENTINEL_TYPE = /^(?:[a-zA-Z]+?Statement|ArrowFunctionExpression|FunctionExpression|ClassExpression)$/u;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow assignment operators in `return` statements\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-return-assign\"\n        },\n\n        schema: [\n            {\n                enum: [\"except-parens\", \"always\"]\n            }\n        ]\n    },\n\n    create(context) {\n        const always = (context.options[0] || \"except-parens\") !== \"except-parens\";\n        const sourceCode = context.getSourceCode();\n\n        return {\n            AssignmentExpression(node) {\n                if (!always && astUtils.isParenthesised(sourceCode, node)) {\n                    return;\n                }\n\n                let currentChild = node;\n                let parent = currentChild.parent;\n\n                // Find ReturnStatement or ArrowFunctionExpression in ancestors.\n                while (parent && !SENTINEL_TYPE.test(parent.type)) {\n                    currentChild = parent;\n                    parent = parent.parent;\n                }\n\n                // Reports.\n                if (parent && parent.type === \"ReturnStatement\") {\n                    context.report({\n                        node: parent,\n                        message: \"Return statement should not contain assignment.\"\n                    });\n                } else if (parent && parent.type === \"ArrowFunctionExpression\" && parent.body === currentChild) {\n                    context.report({\n                        node: parent,\n                        message: \"Arrow function should not return assignment.\"\n                    });\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}