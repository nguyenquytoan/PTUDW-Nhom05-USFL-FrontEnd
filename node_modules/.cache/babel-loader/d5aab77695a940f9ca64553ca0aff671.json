{"ast":null,"code":"/**\n * @fileoverview Rule to flag octal escape sequences in string literals.\n * @author Ian Christian Myers\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow octal escape sequences in string literals\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-octal-escape\"\n    },\n    schema: [],\n    messages: {\n      octalEscapeSequence: \"Don't use octal: '\\\\{{sequence}}'. Use '\\\\u....' instead.\"\n    }\n  },\n\n  create(context) {\n    return {\n      Literal(node) {\n        if (typeof node.value !== \"string\") {\n          return;\n        } // \\0 represents a valid NULL character if it isn't followed by a digit.\n\n\n        const match = node.raw.match(/^(?:[\\0-\\[\\]-\\u{10FFFF}]|\\\\[\\0-\\u{10FFFF}])*?\\\\([0-3][0-7]{1,2}|[4-7][0-7]|0(?=[89])|[1-7])/u);\n\n        if (match) {\n          context.report({\n            node,\n            messageId: \"octalEscapeSequence\",\n            data: {\n              sequence: match[1]\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-octal-escape.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","octalEscapeSequence","create","context","Literal","node","value","match","raw","report","messageId","data","sequence"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,oDADX;AAEFC,MAAAA,QAAQ,EAAE,gBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,EAVN;AAYFC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,mBAAmB,EAAE;AADf;AAZR,GADO;;AAkBbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ,WAAO;AAEHC,MAAAA,OAAO,CAACC,IAAD,EAAO;AACV,YAAI,OAAOA,IAAI,CAACC,KAAZ,KAAsB,QAA1B,EAAoC;AAChC;AACH,SAHS,CAKV;;;AACA,cAAMC,KAAK,GAAGF,IAAI,CAACG,GAAL,CAASD,KAAT,CACV,8FADU,CAAd;;AAIA,YAAIA,KAAJ,EAAW;AACPJ,UAAAA,OAAO,CAACM,MAAR,CAAe;AACXJ,YAAAA,IADW;AAEXK,YAAAA,SAAS,EAAE,qBAFA;AAGXC,YAAAA,IAAI,EAAE;AAAEC,cAAAA,QAAQ,EAAEL,KAAK,CAAC,CAAD;AAAjB;AAHK,WAAf;AAKH;AACJ;;AAnBE,KAAP;AAuBH;;AA3CY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to flag octal escape sequences in string literals.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow octal escape sequences in string literals\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-octal-escape\"\n        },\n\n        schema: [],\n\n        messages: {\n            octalEscapeSequence: \"Don't use octal: '\\\\{{sequence}}'. Use '\\\\u....' instead.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n\n            Literal(node) {\n                if (typeof node.value !== \"string\") {\n                    return;\n                }\n\n                // \\0 represents a valid NULL character if it isn't followed by a digit.\n                const match = node.raw.match(\n                    /^(?:[^\\\\]|\\\\.)*?\\\\([0-3][0-7]{1,2}|[4-7][0-7]|0(?=[89])|[1-7])/su\n                );\n\n                if (match) {\n                    context.report({\n                        node,\n                        messageId: \"octalEscapeSequence\",\n                        data: { sequence: match[1] }\n                    });\n                }\n            }\n\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}