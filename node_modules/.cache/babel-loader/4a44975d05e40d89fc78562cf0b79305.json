{"ast":null,"code":"'use strict';\n\nvar getFieldAsFn = require('./get-field-as-fn'),\n    CustomError = require('./get-error');\n/**\n * Create an encoder for output sources using the given codec hash\n * @throws Error Where the given codec is missing an encode function\n * @this {object} A loader or compilation\n * @param {{encode:function}} codec A single codec with an `encode` function\n * @returns {function(string):string|Error|false} An encode function that takes an absolute path\n */\n\n\nfunction encodeSourcesWith(codec) {\n  /* jshint validthis:true */\n  var context = this,\n      encoder = getFieldAsFn('encode')(codec);\n\n  if (!encoder) {\n    return new CustomError('Specified format does not support encoding (it lacks an \"encoder\" function)');\n  } else {\n    return function encode(absoluteSource) {\n      // call the encoder\n      var encoded;\n\n      try {\n        encoded = absoluteSource && encoder.call(context, absoluteSource);\n      } catch (exception) {\n        return getNamedError(exception);\n      }\n\n      return encoded;\n\n      function getNamedError(details) {\n        var name = codec.name || '(unnamed)',\n            message = ['Encoding with codec: ' + name, 'Absolute source: ' + absoluteSource, details && (details.stack ? details.stack : details)].filter(Boolean).join('\\n');\n        return new Error(message);\n      }\n    };\n  }\n}\n\nmodule.exports = encodeSourcesWith;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/adjust-sourcemap-loader/lib/process/encode-sources-with.js"],"names":["getFieldAsFn","require","CustomError","encodeSourcesWith","codec","context","encoder","encode","absoluteSource","encoded","call","exception","getNamedError","details","name","message","stack","filter","Boolean","join","Error","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,mBAAD,CAA1B;AAAA,IACIC,WAAW,GAAID,OAAO,CAAC,aAAD,CAD1B;AAGA;;;;;;;;;AAOA,SAASE,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC;AACA,MAAIC,OAAO,GAAG,IAAd;AAAA,MACIC,OAAO,GAAGN,YAAY,CAAC,QAAD,CAAZ,CAAuBI,KAAvB,CADd;;AAEA,MAAI,CAACE,OAAL,EAAc;AACZ,WAAO,IAAIJ,WAAJ,CAAgB,6EAAhB,CAAP;AACD,GAFD,MAGK;AACH,WAAO,SAASK,MAAT,CAAgBC,cAAhB,EAAgC;AAErC;AACA,UAAIC,OAAJ;;AACA,UAAI;AACFA,QAAAA,OAAO,GAAGD,cAAc,IAAIF,OAAO,CAACI,IAAR,CAAaL,OAAb,EAAsBG,cAAtB,CAA5B;AACD,OAFD,CAGA,OAAOG,SAAP,EAAkB;AAChB,eAAOC,aAAa,CAACD,SAAD,CAApB;AACD;;AACD,aAAOF,OAAP;;AAEA,eAASG,aAAT,CAAuBC,OAAvB,EAAgC;AAC9B,YAAIC,IAAI,GAAMV,KAAK,CAACU,IAAN,IAAc,WAA5B;AAAA,YACIC,OAAO,GAAG,CACR,0BAA0BD,IADlB,EAER,sBAAsBN,cAFd,EAGRK,OAAO,KAAKA,OAAO,CAACG,KAAR,GAAgBH,OAAO,CAACG,KAAxB,GAAgCH,OAArC,CAHC,EAKPI,MALO,CAKAC,OALA,EAMPC,IANO,CAMF,IANE,CADd;AAQA,eAAO,IAAIC,KAAJ,CAAUL,OAAV,CAAP;AACD;AACF,KAvBD;AAwBD;AACF;;AAEDM,MAAM,CAACC,OAAP,GAAiBnB,iBAAjB","sourcesContent":["'use strict';\n\nvar getFieldAsFn = require('./get-field-as-fn'),\n    CustomError  = require('./get-error');\n\n/**\n * Create an encoder for output sources using the given codec hash\n * @throws Error Where the given codec is missing an encode function\n * @this {object} A loader or compilation\n * @param {{encode:function}} codec A single codec with an `encode` function\n * @returns {function(string):string|Error|false} An encode function that takes an absolute path\n */\nfunction encodeSourcesWith(codec) {\n  /* jshint validthis:true */\n  var context = this,\n      encoder = getFieldAsFn('encode')(codec);\n  if (!encoder) {\n    return new CustomError('Specified format does not support encoding (it lacks an \"encoder\" function)');\n  }\n  else {\n    return function encode(absoluteSource) {\n\n      // call the encoder\n      var encoded;\n      try {\n        encoded = absoluteSource && encoder.call(context, absoluteSource);\n      }\n      catch (exception) {\n        return getNamedError(exception);\n      }\n      return encoded;\n\n      function getNamedError(details) {\n        var name    = codec.name || '(unnamed)',\n            message = [\n              'Encoding with codec: ' + name,\n              'Absolute source: ' + absoluteSource,\n              details && (details.stack ? details.stack : details)\n            ]\n              .filter(Boolean)\n              .join('\\n');\n        return new Error(message);\n      }\n    };\n  }\n}\n\nmodule.exports = encodeSourcesWith;\n"]},"metadata":{},"sourceType":"script"}