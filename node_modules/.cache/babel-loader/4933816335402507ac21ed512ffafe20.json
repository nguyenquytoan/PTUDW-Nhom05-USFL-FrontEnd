{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar css = require('css');\n\nvar convertSourceMap = require('convert-source-map');\n\nvar parse = css.parse;\nvar stringify = css.stringify;\n/**\n * Expose `rework`.\n */\n\nexports = module.exports = rework;\n/**\n * Initialize a new stylesheet `Rework` with `str`.\n *\n * @param {String} str\n * @param {Object} options\n * @return {Rework}\n * @api public\n */\n\nfunction rework(str, options) {\n  return new Rework(parse(str, options));\n}\n/**\n * Initialize a new stylesheet `Rework` with `obj`.\n *\n * @param {Object} obj\n * @api private\n */\n\n\nfunction Rework(obj) {\n  this.obj = obj;\n}\n/**\n * Use the given plugin `fn(style, rework)`.\n *\n * @param {Function} fn\n * @return {Rework}\n * @api public\n */\n\n\nRework.prototype.use = function (fn) {\n  fn(this.obj.stylesheet, this);\n  return this;\n};\n/**\n * Stringify the stylesheet.\n *\n * @param {Object} options\n * @return {String}\n * @api public\n */\n\n\nRework.prototype.toString = function (options) {\n  options = options || {};\n  var result = stringify(this.obj, options);\n\n  if (options.sourcemap && !options.sourcemapAsObject) {\n    result = result.code + '\\n' + sourcemapToComment(result.map);\n  }\n\n  return result;\n};\n/**\n * Convert sourcemap to base64-encoded comment\n *\n * @param {Object} map\n * @return {String}\n * @api private\n */\n\n\nfunction sourcemapToComment(map) {\n  var content = convertSourceMap.fromObject(map).toBase64();\n  return '/*# sourceMappingURL=data:application/json;base64,' + content + ' */';\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/rework/index.js"],"names":["css","require","convertSourceMap","parse","stringify","exports","module","rework","str","options","Rework","obj","prototype","use","fn","stylesheet","toString","result","sourcemap","sourcemapAsObject","code","sourcemapToComment","map","content","fromObject","toBase64"],"mappings":"AACA;;;AAIA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIE,KAAK,GAAGH,GAAG,CAACG,KAAhB;AACA,IAAIC,SAAS,GAAGJ,GAAG,CAACI,SAApB;AAEA;;;;AAIAC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBE,MAA3B;AAEA;;;;;;;;;AASA,SAASA,MAAT,CAAgBC,GAAhB,EAAqBC,OAArB,EAA8B;AAC5B,SAAO,IAAIC,MAAJ,CAAWP,KAAK,CAACK,GAAD,EAAMC,OAAN,CAAhB,CAAP;AACD;AAED;;;;;;;;AAOA,SAASC,MAAT,CAAgBC,GAAhB,EAAqB;AACnB,OAAKA,GAAL,GAAWA,GAAX;AACD;AAED;;;;;;;;;AAQAD,MAAM,CAACE,SAAP,CAAiBC,GAAjB,GAAuB,UAASC,EAAT,EAAY;AACjCA,EAAAA,EAAE,CAAC,KAAKH,GAAL,CAASI,UAAV,EAAsB,IAAtB,CAAF;AACA,SAAO,IAAP;AACD,CAHD;AAKA;;;;;;;;;AAQAL,MAAM,CAACE,SAAP,CAAiBI,QAAjB,GAA4B,UAASP,OAAT,EAAiB;AAC3CA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIQ,MAAM,GAAGb,SAAS,CAAC,KAAKO,GAAN,EAAWF,OAAX,CAAtB;;AACA,MAAIA,OAAO,CAACS,SAAR,IAAqB,CAACT,OAAO,CAACU,iBAAlC,EAAqD;AACnDF,IAAAA,MAAM,GAAGA,MAAM,CAACG,IAAP,GAAc,IAAd,GAAqBC,kBAAkB,CAACJ,MAAM,CAACK,GAAR,CAAhD;AACD;;AACD,SAAOL,MAAP;AACD,CAPD;AASA;;;;;;;;;AAQA,SAASI,kBAAT,CAA4BC,GAA5B,EAAiC;AAC/B,MAAIC,OAAO,GAAGrB,gBAAgB,CAACsB,UAAjB,CAA4BF,GAA5B,EAAiCG,QAAjC,EAAd;AACA,SAAO,uDAAuDF,OAAvD,GAAiE,KAAxE;AACD","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar css = require('css');\nvar convertSourceMap = require('convert-source-map');\nvar parse = css.parse;\nvar stringify = css.stringify;\n\n/**\n * Expose `rework`.\n */\n\nexports = module.exports = rework;\n\n/**\n * Initialize a new stylesheet `Rework` with `str`.\n *\n * @param {String} str\n * @param {Object} options\n * @return {Rework}\n * @api public\n */\n\nfunction rework(str, options) {\n  return new Rework(parse(str, options));\n}\n\n/**\n * Initialize a new stylesheet `Rework` with `obj`.\n *\n * @param {Object} obj\n * @api private\n */\n\nfunction Rework(obj) {\n  this.obj = obj;\n}\n\n/**\n * Use the given plugin `fn(style, rework)`.\n *\n * @param {Function} fn\n * @return {Rework}\n * @api public\n */\n\nRework.prototype.use = function(fn){\n  fn(this.obj.stylesheet, this);\n  return this;\n};\n\n/**\n * Stringify the stylesheet.\n *\n * @param {Object} options\n * @return {String}\n * @api public\n */\n\nRework.prototype.toString = function(options){\n  options = options || {};\n  var result = stringify(this.obj, options);\n  if (options.sourcemap && !options.sourcemapAsObject) {\n    result = result.code + '\\n' + sourcemapToComment(result.map);\n  }\n  return result;\n};\n\n/**\n * Convert sourcemap to base64-encoded comment\n *\n * @param {Object} map\n * @return {String}\n * @api private\n */\n\nfunction sourcemapToComment(map) {\n  var content = convertSourceMap.fromObject(map).toBase64();\n  return '/*# sourceMappingURL=data:application/json;base64,' + content + ' */';\n}\n"]},"metadata":{},"sourceType":"script"}