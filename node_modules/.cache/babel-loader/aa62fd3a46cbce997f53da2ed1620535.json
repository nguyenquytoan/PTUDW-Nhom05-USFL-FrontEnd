{"ast":null,"code":"/**\n * @fileoverview Rule to flag references to the undefined variable.\n * @author Michael Ficarra\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow the use of `undefined` as an identifier\",\n      category: \"Variables\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-undefined\"\n    },\n    schema: []\n  },\n\n  create(context) {\n    /**\n     * Report an invalid \"undefined\" identifier node.\n     * @param {ASTNode} node The node to report.\n     * @returns {void}\n     */\n    function report(node) {\n      context.report({\n        node,\n        message: \"Unexpected use of undefined.\"\n      });\n    }\n    /**\n     * Checks the given scope for references to `undefined` and reports\n     * all references found.\n     * @param {eslint-scope.Scope} scope The scope to check.\n     * @returns {void}\n     */\n\n\n    function checkScope(scope) {\n      const undefinedVar = scope.set.get(\"undefined\");\n\n      if (!undefinedVar) {\n        return;\n      }\n\n      const references = undefinedVar.references;\n      const defs = undefinedVar.defs; // Report non-initializing references (those are covered in defs below)\n\n      references.filter(ref => !ref.init).forEach(ref => report(ref.identifier));\n      defs.forEach(def => report(def.name));\n    }\n\n    return {\n      \"Program:exit\"() {\n        const globalScope = context.getScope();\n        const stack = [globalScope];\n\n        while (stack.length) {\n          const scope = stack.pop();\n          stack.push(...scope.childScopes);\n          checkScope(scope);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-undefined.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","create","context","report","node","message","checkScope","scope","undefinedVar","set","get","references","defs","filter","ref","init","forEach","identifier","def","name","globalScope","getScope","stack","length","pop","push","childScopes"],"mappings":"AAAA;;;;AAIA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,kDADX;AAEFC,MAAAA,QAAQ,EAAE,WAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE;AAVN,GADO;;AAcbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;;;;;AAKA,aAASC,MAAT,CAAgBC,IAAhB,EAAsB;AAClBF,MAAAA,OAAO,CAACC,MAAR,CAAe;AACXC,QAAAA,IADW;AAEXC,QAAAA,OAAO,EAAE;AAFE,OAAf;AAIH;AAED;;;;;;;;AAMA,aAASC,UAAT,CAAoBC,KAApB,EAA2B;AACvB,YAAMC,YAAY,GAAGD,KAAK,CAACE,GAAN,CAAUC,GAAV,CAAc,WAAd,CAArB;;AAEA,UAAI,CAACF,YAAL,EAAmB;AACf;AACH;;AAED,YAAMG,UAAU,GAAGH,YAAY,CAACG,UAAhC;AAEA,YAAMC,IAAI,GAAGJ,YAAY,CAACI,IAA1B,CATuB,CAWvB;;AACAD,MAAAA,UAAU,CACLE,MADL,CACYC,GAAG,IAAI,CAACA,GAAG,CAACC,IADxB,EAEKC,OAFL,CAEaF,GAAG,IAAIX,MAAM,CAACW,GAAG,CAACG,UAAL,CAF1B;AAIAL,MAAAA,IAAI,CAACI,OAAL,CAAaE,GAAG,IAAIf,MAAM,CAACe,GAAG,CAACC,IAAL,CAA1B;AACH;;AAED,WAAO;AACH,uBAAiB;AACb,cAAMC,WAAW,GAAGlB,OAAO,CAACmB,QAAR,EAApB;AAEA,cAAMC,KAAK,GAAG,CAACF,WAAD,CAAd;;AAEA,eAAOE,KAAK,CAACC,MAAb,EAAqB;AACjB,gBAAMhB,KAAK,GAAGe,KAAK,CAACE,GAAN,EAAd;AAEAF,UAAAA,KAAK,CAACG,IAAN,CAAW,GAAGlB,KAAK,CAACmB,WAApB;AACApB,UAAAA,UAAU,CAACC,KAAD,CAAV;AACH;AACJ;;AAZE,KAAP;AAeH;;AApEY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to flag references to the undefined variable.\n * @author Michael Ficarra\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow the use of `undefined` as an identifier\",\n            category: \"Variables\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-undefined\"\n        },\n\n        schema: []\n    },\n\n    create(context) {\n\n        /**\n         * Report an invalid \"undefined\" identifier node.\n         * @param {ASTNode} node The node to report.\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({\n                node,\n                message: \"Unexpected use of undefined.\"\n            });\n        }\n\n        /**\n         * Checks the given scope for references to `undefined` and reports\n         * all references found.\n         * @param {eslint-scope.Scope} scope The scope to check.\n         * @returns {void}\n         */\n        function checkScope(scope) {\n            const undefinedVar = scope.set.get(\"undefined\");\n\n            if (!undefinedVar) {\n                return;\n            }\n\n            const references = undefinedVar.references;\n\n            const defs = undefinedVar.defs;\n\n            // Report non-initializing references (those are covered in defs below)\n            references\n                .filter(ref => !ref.init)\n                .forEach(ref => report(ref.identifier));\n\n            defs.forEach(def => report(def.name));\n        }\n\n        return {\n            \"Program:exit\"() {\n                const globalScope = context.getScope();\n\n                const stack = [globalScope];\n\n                while (stack.length) {\n                    const scope = stack.pop();\n\n                    stack.push(...scope.childScopes);\n                    checkScope(scope);\n                }\n            }\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}