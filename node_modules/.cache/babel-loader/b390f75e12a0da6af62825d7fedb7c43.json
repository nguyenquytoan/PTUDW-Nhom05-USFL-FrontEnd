{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst fastGlob = require('fast-glob');\n\nconst gitIgnore = require('ignore');\n\nconst pify = require('pify');\n\nconst slash = require('slash');\n\nconst DEFAULT_IGNORE = ['**/node_modules/**', '**/bower_components/**', '**/flow-typed/**', '**/coverage/**', '**/.git'];\nconst readFileP = pify(fs.readFile);\n\nconst mapGitIgnorePatternTo = base => ignore => {\n  if (ignore.startsWith('!')) {\n    return '!' + path.posix.join(base, ignore.substr(1));\n  }\n\n  return path.posix.join(base, ignore);\n};\n\nconst parseGitIgnore = (content, opts) => {\n  const base = slash(path.relative(opts.cwd, path.dirname(opts.fileName)));\n  return content.split(/\\r?\\n/).filter(Boolean).filter(l => l.charAt(0) !== '#').map(mapGitIgnorePatternTo(base));\n};\n\nconst reduceIgnore = files => {\n  return files.reduce((ignores, file) => {\n    ignores.add(parseGitIgnore(file.content, {\n      cwd: file.cwd,\n      fileName: file.filePath\n    }));\n    return ignores;\n  }, gitIgnore());\n};\n\nconst getIsIgnoredPredecate = (ignores, cwd) => {\n  return p => ignores.ignores(slash(path.relative(cwd, p)));\n};\n\nconst getFile = (file, cwd) => {\n  const filePath = path.join(cwd, file);\n  return readFileP(filePath, 'utf8').then(content => ({\n    content,\n    cwd,\n    filePath\n  }));\n};\n\nconst getFileSync = (file, cwd) => {\n  const filePath = path.join(cwd, file);\n  const content = fs.readFileSync(filePath, 'utf8');\n  return {\n    content,\n    cwd,\n    filePath\n  };\n};\n\nconst normalizeOpts = opts => {\n  opts = opts || {};\n  const ignore = opts.ignore || [];\n  const cwd = opts.cwd || process.cwd();\n  return {\n    ignore,\n    cwd\n  };\n};\n\nmodule.exports = o => {\n  const opts = normalizeOpts(o);\n  return fastGlob('**/.gitignore', {\n    ignore: DEFAULT_IGNORE.concat(opts.ignore),\n    cwd: opts.cwd\n  }).then(paths => Promise.all(paths.map(file => getFile(file, opts.cwd)))).then(files => reduceIgnore(files)).then(ignores => getIsIgnoredPredecate(ignores, opts.cwd));\n};\n\nmodule.exports.sync = o => {\n  const opts = normalizeOpts(o);\n  const paths = fastGlob.sync('**/.gitignore', {\n    ignore: DEFAULT_IGNORE.concat(opts.ignore),\n    cwd: opts.cwd\n  });\n  const files = paths.map(file => getFileSync(file, opts.cwd));\n  const ignores = reduceIgnore(files);\n  return getIsIgnoredPredecate(ignores, opts.cwd);\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/globby/gitignore.js"],"names":["fs","require","path","fastGlob","gitIgnore","pify","slash","DEFAULT_IGNORE","readFileP","readFile","mapGitIgnorePatternTo","base","ignore","startsWith","posix","join","substr","parseGitIgnore","content","opts","relative","cwd","dirname","fileName","split","filter","Boolean","l","charAt","map","reduceIgnore","files","reduce","ignores","file","add","filePath","getIsIgnoredPredecate","p","getFile","then","getFileSync","readFileSync","normalizeOpts","process","module","exports","o","concat","paths","Promise","all","sync"],"mappings":"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","sourcesContent":["'use strict';\nconst fs = require('fs');\nconst path = require('path');\nconst fastGlob = require('fast-glob');\nconst gitIgnore = require('ignore');\nconst pify = require('pify');\nconst slash = require('slash');\n\nconst DEFAULT_IGNORE = [\n\t'**/node_modules/**',\n\t'**/bower_components/**',\n\t'**/flow-typed/**',\n\t'**/coverage/**',\n\t'**/.git'\n];\n\nconst readFileP = pify(fs.readFile);\n\nconst mapGitIgnorePatternTo = base => ignore => {\n\tif (ignore.startsWith('!')) {\n\t\treturn '!' + path.posix.join(base, ignore.substr(1));\n\t}\n\n\treturn path.posix.join(base, ignore);\n};\n\nconst parseGitIgnore = (content, opts) => {\n\tconst base = slash(path.relative(opts.cwd, path.dirname(opts.fileName)));\n\n\treturn content\n\t\t.split(/\\r?\\n/)\n\t\t.filter(Boolean)\n\t\t.filter(l => l.charAt(0) !== '#')\n\t\t.map(mapGitIgnorePatternTo(base));\n};\n\nconst reduceIgnore = files => {\n\treturn files.reduce((ignores, file) => {\n\t\tignores.add(parseGitIgnore(file.content, {\n\t\t\tcwd: file.cwd,\n\t\t\tfileName: file.filePath\n\t\t}));\n\t\treturn ignores;\n\t}, gitIgnore());\n};\n\nconst getIsIgnoredPredecate = (ignores, cwd) => {\n\treturn p => ignores.ignores(slash(path.relative(cwd, p)));\n};\n\nconst getFile = (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\treturn readFileP(filePath, 'utf8')\n\t\t.then(content => ({\n\t\t\tcontent,\n\t\t\tcwd,\n\t\t\tfilePath\n\t\t}));\n};\n\nconst getFileSync = (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = fs.readFileSync(filePath, 'utf8');\n\n\treturn {\n\t\tcontent,\n\t\tcwd,\n\t\tfilePath\n\t};\n};\n\nconst normalizeOpts = opts => {\n\topts = opts || {};\n\tconst ignore = opts.ignore || [];\n\tconst cwd = opts.cwd || process.cwd();\n\treturn {ignore, cwd};\n};\n\nmodule.exports = o => {\n\tconst opts = normalizeOpts(o);\n\n\treturn fastGlob('**/.gitignore', {ignore: DEFAULT_IGNORE.concat(opts.ignore), cwd: opts.cwd})\n\t\t.then(paths => Promise.all(paths.map(file => getFile(file, opts.cwd))))\n\t\t.then(files => reduceIgnore(files))\n\t\t.then(ignores => getIsIgnoredPredecate(ignores, opts.cwd));\n};\n\nmodule.exports.sync = o => {\n\tconst opts = normalizeOpts(o);\n\n\tconst paths = fastGlob.sync('**/.gitignore', {ignore: DEFAULT_IGNORE.concat(opts.ignore), cwd: opts.cwd});\n\tconst files = paths.map(file => getFileSync(file, opts.cwd));\n\tconst ignores = reduceIgnore(files);\n\treturn getIsIgnoredPredecate(ignores, opts.cwd);\n};\n"]},"metadata":{},"sourceType":"script"}