{"ast":null,"code":"/**\n * @fileoverview Rule to disallow if as the only statmenet in an else block\n * @author Brandon Mills\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `if` statements as the only statement in `else` blocks\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-lonely-if\"\n    },\n    schema: [],\n    fixable: \"code\"\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      IfStatement(node) {\n        const ancestors = context.getAncestors(),\n              parent = ancestors.pop(),\n              grandparent = ancestors.pop();\n\n        if (parent && parent.type === \"BlockStatement\" && parent.body.length === 1 && grandparent && grandparent.type === \"IfStatement\" && parent === grandparent.alternate) {\n          context.report({\n            node,\n            message: \"Unexpected if as the only statement in an else block.\",\n\n            fix(fixer) {\n              const openingElseCurly = sourceCode.getFirstToken(parent);\n              const closingElseCurly = sourceCode.getLastToken(parent);\n              const elseKeyword = sourceCode.getTokenBefore(openingElseCurly);\n              const tokenAfterElseBlock = sourceCode.getTokenAfter(closingElseCurly);\n              const lastIfToken = sourceCode.getLastToken(node.consequent);\n              const sourceText = sourceCode.getText();\n\n              if (sourceText.slice(openingElseCurly.range[1], node.range[0]).trim() || sourceText.slice(node.range[1], closingElseCurly.range[0]).trim()) {\n                // Don't fix if there are any non-whitespace characters interfering (e.g. comments)\n                return null;\n              }\n\n              if (node.consequent.type !== \"BlockStatement\" && lastIfToken.value !== \";\" && tokenAfterElseBlock && (node.consequent.loc.end.line === tokenAfterElseBlock.loc.start.line || /^[([/+`-]/u.test(tokenAfterElseBlock.value) || lastIfToken.value === \"++\" || lastIfToken.value === \"--\")) {\n                /*\n                 * If the `if` statement has no block, and is not followed by a semicolon, make sure that fixing\n                 * the issue would not change semantics due to ASI. If this would happen, don't do a fix.\n                 */\n                return null;\n              }\n\n              return fixer.replaceTextRange([openingElseCurly.range[0], closingElseCurly.range[1]], (elseKeyword.range[1] === openingElseCurly.range[0] ? \" \" : \"\") + sourceCode.getText(node));\n            }\n\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-lonely-if.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","fixable","create","context","sourceCode","getSourceCode","IfStatement","node","ancestors","getAncestors","parent","pop","grandparent","body","length","alternate","report","message","fix","fixer","openingElseCurly","getFirstToken","closingElseCurly","getLastToken","elseKeyword","getTokenBefore","tokenAfterElseBlock","getTokenAfter","lastIfToken","consequent","sourceText","getText","slice","range","trim","value","loc","end","line","start","test","replaceTextRange"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to disallow if as the only statmenet in an else block\n * @author Brandon Mills\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow `if` statements as the only statement in `else` blocks\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-lonely-if\"\n        },\n\n        schema: [],\n        fixable: \"code\"\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        return {\n            IfStatement(node) {\n                const ancestors = context.getAncestors(),\n                    parent = ancestors.pop(),\n                    grandparent = ancestors.pop();\n\n                if (parent && parent.type === \"BlockStatement\" &&\n                        parent.body.length === 1 && grandparent &&\n                        grandparent.type === \"IfStatement\" &&\n                        parent === grandparent.alternate) {\n                    context.report({\n                        node,\n                        message: \"Unexpected if as the only statement in an else block.\",\n                        fix(fixer) {\n                            const openingElseCurly = sourceCode.getFirstToken(parent);\n                            const closingElseCurly = sourceCode.getLastToken(parent);\n                            const elseKeyword = sourceCode.getTokenBefore(openingElseCurly);\n                            const tokenAfterElseBlock = sourceCode.getTokenAfter(closingElseCurly);\n                            const lastIfToken = sourceCode.getLastToken(node.consequent);\n                            const sourceText = sourceCode.getText();\n\n                            if (sourceText.slice(openingElseCurly.range[1],\n                                node.range[0]).trim() || sourceText.slice(node.range[1], closingElseCurly.range[0]).trim()) {\n\n                                // Don't fix if there are any non-whitespace characters interfering (e.g. comments)\n                                return null;\n                            }\n\n                            if (\n                                node.consequent.type !== \"BlockStatement\" && lastIfToken.value !== \";\" && tokenAfterElseBlock &&\n                                (\n                                    node.consequent.loc.end.line === tokenAfterElseBlock.loc.start.line ||\n                                    /^[([/+`-]/u.test(tokenAfterElseBlock.value) ||\n                                    lastIfToken.value === \"++\" ||\n                                    lastIfToken.value === \"--\"\n                                )\n                            ) {\n\n                                /*\n                                 * If the `if` statement has no block, and is not followed by a semicolon, make sure that fixing\n                                 * the issue would not change semantics due to ASI. If this would happen, don't do a fix.\n                                 */\n                                return null;\n                            }\n\n                            return fixer.replaceTextRange(\n                                [openingElseCurly.range[0], closingElseCurly.range[1]],\n                                (elseKeyword.range[1] === openingElseCurly.range[0] ? \" \" : \"\") + sourceCode.getText(node)\n                            );\n                        }\n                    });\n                }\n            }\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}