{"ast":null,"code":"\"use strict\";\n/*global document*/\n\nvar fixture = document.getElementById(\"qunit-fixture\");\n/*global QUnit*/\n\nQUnit.module('loglevel', {\n  setup: function () {},\n  teardown: function () {}\n});\n/*global test*/\n\ntest('basic test', function () {\n  /*global ok*/\n\n  /*global logging*/\n\n  /*global log*/\n  // Check that noConflict restored the original log\n  ok(typeof log === \"function\", \"log is a function\");\n  ok(log === QUnit.log, \"log is Qunit.log\"); // Check that noConflict setup logging\n\n  ok(typeof logging !== \"undefined\", \"logging is defined\");\n  ok(typeof logging === \"object\", \"logging is an object\");\n  ok(typeof logging.trace === \"function\", \"trace is a function\");\n  ok(typeof logging.debug === \"function\", \"debug is a function\");\n  ok(typeof logging.info === \"function\", \"info is a function\");\n  ok(typeof logging.warn === \"function\", \"warn is a function\");\n  ok(typeof logging.error === \"function\", \"error is a function\");\n  ok(typeof logging.setLevel === \"function\", \"setLevel is a function\");\n  ok(typeof logging.setDefaultLevel === \"function\", \"setDefaultLevel is a function\");\n  ok(typeof logging.enableAll === \"function\", \"enableAll is a function\");\n  ok(typeof logging.disableAll === \"function\", \"disableAll is a function\");\n  ok(typeof logging.getLogger === \"function\", \"getLogger is a function\"); // Use the API to make sure it doesn't blantantly fail with exceptions\n\n  logging.trace(\"a trace message\");\n  logging.debug(\"a debug message\");\n  logging.info(\"an info message\");\n  logging.warn(\"a warn message\");\n  logging.error(\"an error message\");\n  var newLogger = logging.getLogger(\"newLogger\");\n  newLogger.trace(\"a trace message\");\n  newLogger.debug(\"a debug message\");\n  newLogger.info(\"an info message\");\n  newLogger.warn(\"a warn message\");\n  newLogger.error(\"an error message\");\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/loglevel/test/test-qunit.js"],"names":["fixture","document","getElementById","QUnit","module","setup","teardown","test","ok","log","logging","trace","debug","info","warn","error","setLevel","setDefaultLevel","enableAll","disableAll","getLogger","newLogger"],"mappings":"AAAA;AAEA;;AACA,IAAIA,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAd;AAEA;;AACAC,KAAK,CAACC,MAAN,CAAa,UAAb,EAAyB;AACrBC,EAAAA,KAAK,EAAE,YAAW,CACjB,CAFoB;AAGrBC,EAAAA,QAAQ,EAAE,YAAW,CACpB;AAJoB,CAAzB;AAOA;;AACAC,IAAI,CAAC,YAAD,EAAe,YAAW;AAC1B;;AACA;;AACA;AAEA;AACAC,EAAAA,EAAE,CAAC,OAAOC,GAAP,KAAe,UAAhB,EAA4B,mBAA5B,CAAF;AACAD,EAAAA,EAAE,CAACC,GAAG,KAAKN,KAAK,CAACM,GAAf,EAAoB,kBAApB,CAAF,CAP0B,CAS1B;;AACAD,EAAAA,EAAE,CAAC,OAAOE,OAAP,KAAmB,WAApB,EAAiC,oBAAjC,CAAF;AACAF,EAAAA,EAAE,CAAC,OAAOE,OAAP,KAAmB,QAApB,EAA8B,sBAA9B,CAAF;AACAF,EAAAA,EAAE,CAAC,OAAOE,OAAO,CAACC,KAAf,KAAyB,UAA1B,EAAsC,qBAAtC,CAAF;AACAH,EAAAA,EAAE,CAAC,OAAOE,OAAO,CAACE,KAAf,KAAyB,UAA1B,EAAsC,qBAAtC,CAAF;AACAJ,EAAAA,EAAE,CAAC,OAAOE,OAAO,CAACG,IAAf,KAAwB,UAAzB,EAAqC,oBAArC,CAAF;AACAL,EAAAA,EAAE,CAAC,OAAOE,OAAO,CAACI,IAAf,KAAwB,UAAzB,EAAqC,oBAArC,CAAF;AACAN,EAAAA,EAAE,CAAC,OAAOE,OAAO,CAACK,KAAf,KAAyB,UAA1B,EAAsC,qBAAtC,CAAF;AACAP,EAAAA,EAAE,CAAC,OAAOE,OAAO,CAACM,QAAf,KAA4B,UAA7B,EAAyC,wBAAzC,CAAF;AACAR,EAAAA,EAAE,CAAC,OAAOE,OAAO,CAACO,eAAf,KAAmC,UAApC,EAAgD,+BAAhD,CAAF;AACAT,EAAAA,EAAE,CAAC,OAAOE,OAAO,CAACQ,SAAf,KAA6B,UAA9B,EAA0C,yBAA1C,CAAF;AACAV,EAAAA,EAAE,CAAC,OAAOE,OAAO,CAACS,UAAf,KAA8B,UAA/B,EAA2C,0BAA3C,CAAF;AACAX,EAAAA,EAAE,CAAC,OAAOE,OAAO,CAACU,SAAf,KAA6B,UAA9B,EAA0C,yBAA1C,CAAF,CArB0B,CAuB1B;;AACAV,EAAAA,OAAO,CAACC,KAAR,CAAc,iBAAd;AACAD,EAAAA,OAAO,CAACE,KAAR,CAAc,iBAAd;AACAF,EAAAA,OAAO,CAACG,IAAR,CAAa,iBAAb;AACAH,EAAAA,OAAO,CAACI,IAAR,CAAa,gBAAb;AACAJ,EAAAA,OAAO,CAACK,KAAR,CAAc,kBAAd;AAEA,MAAIM,SAAS,GAAGX,OAAO,CAACU,SAAR,CAAkB,WAAlB,CAAhB;AACAC,EAAAA,SAAS,CAACV,KAAV,CAAgB,iBAAhB;AACAU,EAAAA,SAAS,CAACT,KAAV,CAAgB,iBAAhB;AACAS,EAAAA,SAAS,CAACR,IAAV,CAAe,iBAAf;AACAQ,EAAAA,SAAS,CAACP,IAAV,CAAe,gBAAf;AACAO,EAAAA,SAAS,CAACN,KAAV,CAAgB,kBAAhB;AACH,CApCG,CAAJ","sourcesContent":["\"use strict\";\n\n/*global document*/\nvar fixture = document.getElementById(\"qunit-fixture\");\n\n/*global QUnit*/\nQUnit.module('loglevel', {\n    setup: function() {\n    },\n    teardown: function() {\n    }\n});\n\n/*global test*/\ntest('basic test', function() {\n    /*global ok*/\n    /*global logging*/\n    /*global log*/\n\n    // Check that noConflict restored the original log\n    ok(typeof log === \"function\", \"log is a function\");\n    ok(log === QUnit.log, \"log is Qunit.log\");\n\n    // Check that noConflict setup logging\n    ok(typeof logging !== \"undefined\", \"logging is defined\");\n    ok(typeof logging === \"object\", \"logging is an object\");\n    ok(typeof logging.trace === \"function\", \"trace is a function\");\n    ok(typeof logging.debug === \"function\", \"debug is a function\");\n    ok(typeof logging.info === \"function\", \"info is a function\");\n    ok(typeof logging.warn === \"function\", \"warn is a function\");\n    ok(typeof logging.error === \"function\", \"error is a function\");\n    ok(typeof logging.setLevel === \"function\", \"setLevel is a function\");\n    ok(typeof logging.setDefaultLevel === \"function\", \"setDefaultLevel is a function\");\n    ok(typeof logging.enableAll === \"function\", \"enableAll is a function\");\n    ok(typeof logging.disableAll === \"function\", \"disableAll is a function\");\n    ok(typeof logging.getLogger === \"function\", \"getLogger is a function\");\n\n    // Use the API to make sure it doesn't blantantly fail with exceptions\n    logging.trace(\"a trace message\");\n    logging.debug(\"a debug message\");\n    logging.info(\"an info message\");\n    logging.warn(\"a warn message\");\n    logging.error(\"an error message\");\n\n    var newLogger = logging.getLogger(\"newLogger\");\n    newLogger.trace(\"a trace message\");\n    newLogger.debug(\"a debug message\");\n    newLogger.info(\"an info message\");\n    newLogger.warn(\"a warn message\");\n    newLogger.error(\"an error message\");\n});\n"]},"metadata":{},"sourceType":"script"}