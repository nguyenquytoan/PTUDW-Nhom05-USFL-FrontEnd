{"ast":null,"code":"var Buffer = require('buffer').Buffer;\n\nvar test = require('tape');\n\nvar toArrayBuffer = require('.');\n\nfunction elementsEqual(ab, buffer) {\n  var view = new Uint8Array(ab);\n\n  for (var i = 0; i < view.length; i++) {\n    if (view[i] !== buffer[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ntest('Basic behavior', function (t) {\n  var buf = new Buffer(10);\n\n  for (var i = 0; i < 10; i++) {\n    buf[i] = i;\n  }\n\n  var ab = toArrayBuffer(buf);\n  t.equals(ab.byteLength, 10, 'correct length');\n  t.ok(elementsEqual(ab, buf), 'elements equal');\n  t.end();\n});\ntest('Behavior when input is a subarray 1', function (t) {\n  var origBuf = new Buffer(10);\n\n  for (var i = 0; i < 10; i++) {\n    origBuf[i] = i;\n  }\n\n  var buf = origBuf.slice(1);\n  var ab = toArrayBuffer(buf);\n  t.equals(ab.byteLength, 9, 'correct length');\n  t.ok(elementsEqual(ab, buf), 'elements equal');\n  t.notOk(ab === buf.buffer, 'the underlying ArrayBuffer is not returned when incorrect');\n  t.end();\n});\ntest('Behavior when input is a subarray 2', function (t) {\n  var origBuf = new Buffer(10);\n\n  for (var i = 0; i < 10; i++) {\n    origBuf[i] = i;\n  }\n\n  var buf = origBuf.slice(0, 9);\n  var ab = toArrayBuffer(buf);\n  t.equals(ab.byteLength, 9, 'correct length');\n  t.ok(elementsEqual(ab, buf), 'elements equal');\n  t.notOk(ab === buf.buffer, 'the underlying ArrayBuffer is not returned when incorrect');\n  t.end();\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/to-arraybuffer/test.js"],"names":["Buffer","require","test","toArrayBuffer","elementsEqual","ab","buffer","view","Uint8Array","i","length","t","buf","equals","byteLength","ok","end","origBuf","slice","notOk"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,MAA/B;;AACA,IAAIE,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIE,aAAa,GAAGF,OAAO,CAAC,GAAD,CAA3B;;AAEA,SAASG,aAAT,CAAwBC,EAAxB,EAA4BC,MAA5B,EAAoC;AACnC,MAAIC,IAAI,GAAG,IAAIC,UAAJ,CAAeH,EAAf,CAAX;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACrC,QAAIF,IAAI,CAACE,CAAD,CAAJ,KAAYH,MAAM,CAACG,CAAD,CAAtB,EAA2B;AAC1B,aAAO,KAAP;AACA;AACD;;AACD,SAAO,IAAP;AACA;;AAEDP,IAAI,CAAC,gBAAD,EAAmB,UAAUS,CAAV,EAAa;AACnC,MAAIC,GAAG,GAAG,IAAIZ,MAAJ,CAAW,EAAX,CAAV;;AACA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC5BG,IAAAA,GAAG,CAACH,CAAD,CAAH,GAASA,CAAT;AACA;;AAED,MAAIJ,EAAE,GAAGF,aAAa,CAACS,GAAD,CAAtB;AAEAD,EAAAA,CAAC,CAACE,MAAF,CAASR,EAAE,CAACS,UAAZ,EAAwB,EAAxB,EAA4B,gBAA5B;AACAH,EAAAA,CAAC,CAACI,EAAF,CAAKX,aAAa,CAACC,EAAD,EAAKO,GAAL,CAAlB,EAA6B,gBAA7B;AACAD,EAAAA,CAAC,CAACK,GAAF;AACA,CAXG,CAAJ;AAaAd,IAAI,CAAC,qCAAD,EAAwC,UAAUS,CAAV,EAAa;AACxD,MAAIM,OAAO,GAAG,IAAIjB,MAAJ,CAAW,EAAX,CAAd;;AACA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC5BQ,IAAAA,OAAO,CAACR,CAAD,CAAP,GAAaA,CAAb;AACA;;AACD,MAAIG,GAAG,GAAGK,OAAO,CAACC,KAAR,CAAc,CAAd,CAAV;AAEA,MAAIb,EAAE,GAAGF,aAAa,CAACS,GAAD,CAAtB;AAEAD,EAAAA,CAAC,CAACE,MAAF,CAASR,EAAE,CAACS,UAAZ,EAAwB,CAAxB,EAA2B,gBAA3B;AACAH,EAAAA,CAAC,CAACI,EAAF,CAAKX,aAAa,CAACC,EAAD,EAAKO,GAAL,CAAlB,EAA6B,gBAA7B;AACAD,EAAAA,CAAC,CAACQ,KAAF,CAAQd,EAAE,KAAKO,GAAG,CAACN,MAAnB,EAA2B,2DAA3B;AACAK,EAAAA,CAAC,CAACK,GAAF;AACA,CAbG,CAAJ;AAeAd,IAAI,CAAC,qCAAD,EAAwC,UAAUS,CAAV,EAAa;AACxD,MAAIM,OAAO,GAAG,IAAIjB,MAAJ,CAAW,EAAX,CAAd;;AACA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC5BQ,IAAAA,OAAO,CAACR,CAAD,CAAP,GAAaA,CAAb;AACA;;AACD,MAAIG,GAAG,GAAGK,OAAO,CAACC,KAAR,CAAc,CAAd,EAAiB,CAAjB,CAAV;AAEA,MAAIb,EAAE,GAAGF,aAAa,CAACS,GAAD,CAAtB;AAEAD,EAAAA,CAAC,CAACE,MAAF,CAASR,EAAE,CAACS,UAAZ,EAAwB,CAAxB,EAA2B,gBAA3B;AACAH,EAAAA,CAAC,CAACI,EAAF,CAAKX,aAAa,CAACC,EAAD,EAAKO,GAAL,CAAlB,EAA6B,gBAA7B;AACAD,EAAAA,CAAC,CAACQ,KAAF,CAAQd,EAAE,KAAKO,GAAG,CAACN,MAAnB,EAA2B,2DAA3B;AACAK,EAAAA,CAAC,CAACK,GAAF;AACA,CAbG,CAAJ","sourcesContent":["var Buffer = require('buffer').Buffer\nvar test = require('tape')\n\nvar toArrayBuffer = require('.')\n\nfunction elementsEqual (ab, buffer) {\n\tvar view = new Uint8Array(ab)\n\tfor (var i = 0; i < view.length; i++) {\n\t\tif (view[i] !== buffer[i]) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\ntest('Basic behavior', function (t) {\n\tvar buf = new Buffer(10)\n\tfor (var i = 0; i < 10; i++) {\n\t\tbuf[i] = i\n\t}\n\n\tvar ab = toArrayBuffer(buf)\n\n\tt.equals(ab.byteLength, 10, 'correct length')\n\tt.ok(elementsEqual(ab, buf), 'elements equal')\n\tt.end()\n})\n\ntest('Behavior when input is a subarray 1', function (t) {\n\tvar origBuf = new Buffer(10)\n\tfor (var i = 0; i < 10; i++) {\n\t\torigBuf[i] = i\n\t}\n\tvar buf = origBuf.slice(1)\n\n\tvar ab = toArrayBuffer(buf)\n\n\tt.equals(ab.byteLength, 9, 'correct length')\n\tt.ok(elementsEqual(ab, buf), 'elements equal')\n\tt.notOk(ab === buf.buffer, 'the underlying ArrayBuffer is not returned when incorrect')\n\tt.end()\n})\n\ntest('Behavior when input is a subarray 2', function (t) {\n\tvar origBuf = new Buffer(10)\n\tfor (var i = 0; i < 10; i++) {\n\t\torigBuf[i] = i\n\t}\n\tvar buf = origBuf.slice(0, 9)\n\n\tvar ab = toArrayBuffer(buf)\n\n\tt.equals(ab.byteLength, 9, 'correct length')\n\tt.ok(elementsEqual(ab, buf), 'elements equal')\n\tt.notOk(ab === buf.buffer, 'the underlying ArrayBuffer is not returned when incorrect')\n\tt.end()\n})\n"]},"metadata":{},"sourceType":"script"}