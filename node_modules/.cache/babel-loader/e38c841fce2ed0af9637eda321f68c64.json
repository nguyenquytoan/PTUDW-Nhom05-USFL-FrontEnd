{"ast":null,"code":"'use strict';\n\nfunction _exit() {\n  const data = _interopRequireDefault(require('exit'));\n\n  _exit = function _exit() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _throat() {\n  const data = _interopRequireDefault(require('throat'));\n\n  _throat = function _throat() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWorker() {\n  const data = _interopRequireDefault(require('jest-worker'));\n\n  _jestWorker = function _jestWorker() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _runTest = _interopRequireDefault(require('./runTest'));\n\nvar _testWorker = require('./testWorker');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst TEST_WORKER_PATH = require.resolve('./testWorker');\n/* eslint-disable-next-line no-redeclare */\n\n\nclass TestRunner {\n  constructor(globalConfig, context) {\n    _defineProperty(this, '_globalConfig', void 0);\n\n    _defineProperty(this, '_context', void 0);\n\n    this._globalConfig = globalConfig;\n    this._context = context || {};\n  }\n\n  runTests(tests, watcher, onStart, onResult, onFailure, options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return yield options.serial ? _this._createInBandTestRun(tests, watcher, onStart, onResult, onFailure) : _this._createParallelTestRun(tests, watcher, onStart, onResult, onFailure);\n    })();\n  }\n\n  _createInBandTestRun(tests, watcher, onStart, onResult, onFailure) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      process.env.JEST_WORKER_ID = '1';\n      const mutex = (0, _throat().default)(1);\n      return tests.reduce((promise, test) => mutex(() => promise.then( /*#__PURE__*/_asyncToGenerator(function* () {\n        if (watcher.isInterrupted()) {\n          throw new CancelRun();\n        }\n\n        yield onStart(test);\n        return (0, _runTest.default)(test.path, _this2._globalConfig, test.context.config, test.context.resolver, _this2._context);\n      })).then(result => onResult(test, result)).catch(err => onFailure(test, err))), Promise.resolve());\n    })();\n  }\n\n  _createParallelTestRun(tests, watcher, onStart, onResult, onFailure) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const resolvers = new Map();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = tests[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          const test = _step.value;\n\n          if (!resolvers.has(test.context.config.name)) {\n            resolvers.set(test.context.config.name, {\n              config: test.context.config,\n              serializableModuleMap: test.context.moduleMap.toJSON()\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      const worker = new (_jestWorker().default)(TEST_WORKER_PATH, {\n        exposedMethods: ['worker'],\n        forkOptions: {\n          stdio: 'pipe'\n        },\n        maxRetries: 3,\n        numWorkers: _this3._globalConfig.maxWorkers,\n        setupArgs: [{\n          serializableResolvers: Array.from(resolvers.values())\n        }]\n      });\n      if (worker.getStdout()) worker.getStdout().pipe(process.stdout);\n      if (worker.getStderr()) worker.getStderr().pipe(process.stderr);\n      const mutex = (0, _throat().default)(_this3._globalConfig.maxWorkers); // Send test suites to workers continuously instead of all at once to track\n      // the start time of individual tests.\n\n      const runTestInWorker = test => mutex( /*#__PURE__*/_asyncToGenerator(function* () {\n        if (watcher.isInterrupted()) {\n          return Promise.reject();\n        }\n\n        yield onStart(test);\n        return worker.worker({\n          config: test.context.config,\n          context: _objectSpread({}, _this3._context, {\n            changedFiles: _this3._context.changedFiles && Array.from(_this3._context.changedFiles)\n          }),\n          globalConfig: _this3._globalConfig,\n          path: test.path\n        });\n      }));\n\n      const onError = /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (err, test) {\n          yield onFailure(test, err);\n\n          if (err.type === 'ProcessTerminatedError') {\n            console.error('A worker process has quit unexpectedly! ' + 'Most likely this is an initialization error.');\n            (0, _exit().default)(1);\n          }\n        });\n\n        return function onError(_x, _x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n\n      const onInterrupt = new Promise((_, reject) => {\n        watcher.on('change', state => {\n          if (state.interrupted) {\n            reject(new CancelRun());\n          }\n        });\n      });\n      const runAllTests = Promise.all(tests.map(test => runTestInWorker(test).then(testResult => onResult(test, testResult)).catch(error => onError(error, test))));\n\n      const cleanup = () => worker.end();\n\n      return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);\n    })();\n  }\n\n}\n\nclass CancelRun extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'CancelRun';\n  }\n\n}\n\nmodule.exports = TestRunner;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-runner/build/index.js"],"names":["_exit","data","_interopRequireDefault","require","_throat","_jestWorker","_runTest","_testWorker","obj","__esModule","default","_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","apply","err","undefined","defineProperty","configurable","writable","TEST_WORKER_PATH","TestRunner","constructor","globalConfig","context","_globalConfig","_context","runTests","tests","watcher","onStart","onResult","onFailure","options","_this","serial","_createInBandTestRun","_createParallelTestRun","_this2","process","env","JEST_WORKER_ID","mutex","reduce","promise","test","isInterrupted","CancelRun","path","config","resolver","result","catch","_this3","resolvers","Map","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","next","has","name","set","serializableModuleMap","moduleMap","toJSON","return","worker","exposedMethods","forkOptions","stdio","maxRetries","numWorkers","maxWorkers","setupArgs","serializableResolvers","Array","from","values","getStdout","pipe","stdout","getStderr","stderr","runTestInWorker","changedFiles","onError","_ref3","type","console","_x","_x2","onInterrupt","_","on","state","interrupted","runAllTests","all","map","testResult","cleanup","end","race","Error","message","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction _exit() {\n  const data = _interopRequireDefault(require('exit'));\n\n  _exit = function _exit() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _throat() {\n  const data = _interopRequireDefault(require('throat'));\n\n  _throat = function _throat() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWorker() {\n  const data = _interopRequireDefault(require('jest-worker'));\n\n  _jestWorker = function _jestWorker() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _runTest = _interopRequireDefault(require('./runTest'));\n\nvar _testWorker = require('./testWorker');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(\n        Object.getOwnPropertySymbols(source).filter(function(sym) {\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        })\n      );\n    }\n    ownKeys.forEach(function(key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n  return target;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function() {\n    var self = this,\n      args = arguments;\n    return new Promise(function(resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);\n      }\n      _next(undefined);\n    });\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nconst TEST_WORKER_PATH = require.resolve('./testWorker');\n\n/* eslint-disable-next-line no-redeclare */\nclass TestRunner {\n  constructor(globalConfig, context) {\n    _defineProperty(this, '_globalConfig', void 0);\n\n    _defineProperty(this, '_context', void 0);\n\n    this._globalConfig = globalConfig;\n    this._context = context || {};\n  }\n\n  runTests(tests, watcher, onStart, onResult, onFailure, options) {\n    var _this = this;\n\n    return _asyncToGenerator(function*() {\n      return yield options.serial\n        ? _this._createInBandTestRun(\n            tests,\n            watcher,\n            onStart,\n            onResult,\n            onFailure\n          )\n        : _this._createParallelTestRun(\n            tests,\n            watcher,\n            onStart,\n            onResult,\n            onFailure\n          );\n    })();\n  }\n\n  _createInBandTestRun(tests, watcher, onStart, onResult, onFailure) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function*() {\n      process.env.JEST_WORKER_ID = '1';\n      const mutex = (0, _throat().default)(1);\n      return tests.reduce(\n        (promise, test) =>\n          mutex(() =>\n            promise\n              .then(\n                /*#__PURE__*/\n                _asyncToGenerator(function*() {\n                  if (watcher.isInterrupted()) {\n                    throw new CancelRun();\n                  }\n\n                  yield onStart(test);\n                  return (0,\n                  _runTest.default)(test.path, _this2._globalConfig, test.context.config, test.context.resolver, _this2._context);\n                })\n              )\n              .then(result => onResult(test, result))\n              .catch(err => onFailure(test, err))\n          ),\n        Promise.resolve()\n      );\n    })();\n  }\n\n  _createParallelTestRun(tests, watcher, onStart, onResult, onFailure) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function*() {\n      const resolvers = new Map();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (\n          var _iterator = tests[Symbol.iterator](), _step;\n          !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n          _iteratorNormalCompletion = true\n        ) {\n          const test = _step.value;\n\n          if (!resolvers.has(test.context.config.name)) {\n            resolvers.set(test.context.config.name, {\n              config: test.context.config,\n              serializableModuleMap: test.context.moduleMap.toJSON()\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      const worker = new (_jestWorker()).default(TEST_WORKER_PATH, {\n        exposedMethods: ['worker'],\n        forkOptions: {\n          stdio: 'pipe'\n        },\n        maxRetries: 3,\n        numWorkers: _this3._globalConfig.maxWorkers,\n        setupArgs: [\n          {\n            serializableResolvers: Array.from(resolvers.values())\n          }\n        ]\n      });\n      if (worker.getStdout()) worker.getStdout().pipe(process.stdout);\n      if (worker.getStderr()) worker.getStderr().pipe(process.stderr);\n      const mutex = (0, _throat().default)(_this3._globalConfig.maxWorkers); // Send test suites to workers continuously instead of all at once to track\n      // the start time of individual tests.\n\n      const runTestInWorker = test =>\n        mutex(\n          /*#__PURE__*/\n          _asyncToGenerator(function*() {\n            if (watcher.isInterrupted()) {\n              return Promise.reject();\n            }\n\n            yield onStart(test);\n            return worker.worker({\n              config: test.context.config,\n              context: _objectSpread({}, _this3._context, {\n                changedFiles:\n                  _this3._context.changedFiles &&\n                  Array.from(_this3._context.changedFiles)\n              }),\n              globalConfig: _this3._globalConfig,\n              path: test.path\n            });\n          })\n        );\n\n      const onError =\n        /*#__PURE__*/\n        (function() {\n          var _ref3 = _asyncToGenerator(function*(err, test) {\n            yield onFailure(test, err);\n\n            if (err.type === 'ProcessTerminatedError') {\n              console.error(\n                'A worker process has quit unexpectedly! ' +\n                  'Most likely this is an initialization error.'\n              );\n              (0, _exit().default)(1);\n            }\n          });\n\n          return function onError(_x, _x2) {\n            return _ref3.apply(this, arguments);\n          };\n        })();\n\n      const onInterrupt = new Promise((_, reject) => {\n        watcher.on('change', state => {\n          if (state.interrupted) {\n            reject(new CancelRun());\n          }\n        });\n      });\n      const runAllTests = Promise.all(\n        tests.map(test =>\n          runTestInWorker(test)\n            .then(testResult => onResult(test, testResult))\n            .catch(error => onError(error, test))\n        )\n      );\n\n      const cleanup = () => worker.end();\n\n      return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);\n    })();\n  }\n}\n\nclass CancelRun extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'CancelRun';\n  }\n}\n\nmodule.exports = TestRunner;\n"]},"metadata":{},"sourceType":"script"}