{"ast":null,"code":"var test = require('tape');\n\nvar through = require('../'); // must emit end before close.\n\n\ntest('buffering', function (assert) {\n  var ts = through(function (data) {\n    this.queue(data);\n  }, function () {\n    this.queue(null);\n  });\n  var ended = false,\n      actual = [];\n  ts.on('data', actual.push.bind(actual));\n  ts.on('end', function () {\n    ended = true;\n  });\n  ts.write(1);\n  ts.write(2);\n  ts.write(3);\n  assert.deepEqual(actual, [1, 2, 3]);\n  ts.pause();\n  ts.write(4);\n  ts.write(5);\n  ts.write(6);\n  assert.deepEqual(actual, [1, 2, 3]);\n  ts.resume();\n  assert.deepEqual(actual, [1, 2, 3, 4, 5, 6]);\n  ts.pause();\n  ts.end();\n  assert.ok(!ended);\n  ts.resume();\n  assert.ok(ended);\n  assert.end();\n});\ntest('buffering has data in queue, when ends', function (assert) {\n  /*\n   * If stream ends while paused with data in the queue,\n   * stream should still emit end after all data is written\n   * on resume.\n   */\n  var ts = through(function (data) {\n    this.queue(data);\n  }, function () {\n    this.queue(null);\n  });\n  var ended = false,\n      actual = [];\n  ts.on('data', actual.push.bind(actual));\n  ts.on('end', function () {\n    ended = true;\n  });\n  ts.pause();\n  ts.write(1);\n  ts.write(2);\n  ts.write(3);\n  ts.end();\n  assert.deepEqual(actual, [], 'no data written yet, still paused');\n  assert.ok(!ended, 'end not emitted yet, still paused');\n  ts.resume();\n  assert.deepEqual(actual, [1, 2, 3], 'resumed, all data should be delivered');\n  assert.ok(ended, 'end should be emitted once all data was delivered');\n  assert.end();\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/through/test/buffering.js"],"names":["test","require","through","assert","ts","data","queue","ended","actual","on","push","bind","write","deepEqual","pause","resume","end","ok"],"mappings":"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","sourcesContent":["var test = require('tape')\nvar through = require('../')\n\n// must emit end before close.\n\ntest('buffering', function(assert) {\n  var ts = through(function (data) {\n    this.queue(data)\n  }, function () {\n    this.queue(null)\n  })\n\n  var ended = false,  actual = []\n\n  ts.on('data', actual.push.bind(actual))\n  ts.on('end', function () {\n    ended = true\n  })\n\n  ts.write(1)\n  ts.write(2)\n  ts.write(3)\n  assert.deepEqual(actual, [1, 2, 3])\n  ts.pause()\n  ts.write(4)\n  ts.write(5)\n  ts.write(6)\n  assert.deepEqual(actual, [1, 2, 3])\n  ts.resume()\n  assert.deepEqual(actual, [1, 2, 3, 4, 5, 6])\n  ts.pause()\n  ts.end()\n  assert.ok(!ended)\n  ts.resume()\n  assert.ok(ended)\n  assert.end()\n})\n\ntest('buffering has data in queue, when ends', function (assert) {\n\n  /*\n   * If stream ends while paused with data in the queue,\n   * stream should still emit end after all data is written\n   * on resume.\n   */\n\n  var ts = through(function (data) {\n    this.queue(data)\n  }, function () {\n    this.queue(null)\n  })\n\n  var ended = false,  actual = []\n\n  ts.on('data', actual.push.bind(actual))\n  ts.on('end', function () {\n    ended = true\n  })\n\n  ts.pause()\n  ts.write(1)\n  ts.write(2)\n  ts.write(3)\n  ts.end()\n  assert.deepEqual(actual, [], 'no data written yet, still paused')\n  assert.ok(!ended, 'end not emitted yet, still paused')\n  ts.resume()\n  assert.deepEqual(actual, [1, 2, 3], 'resumed, all data should be delivered')\n  assert.ok(ended, 'end should be emitted once all data was delivered')\n  assert.end();\n})\n"]},"metadata":{},"sourceType":"script"}