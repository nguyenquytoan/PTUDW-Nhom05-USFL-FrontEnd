{"ast":null,"code":"// @remove-on-eject-begin\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict'; // Do this as the first thing so that any code reading it knows the right env.\n\nprocess.env.BABEL_ENV = 'test';\nprocess.env.NODE_ENV = 'test';\nprocess.env.PUBLIC_URL = ''; // Makes the script crash on unhandled rejections instead of silently\n// ignoring them. In the future, promise rejections that are not handled will\n// terminate the Node.js process with a non-zero exit code.\n\nprocess.on('unhandledRejection', err => {\n  throw err;\n}); // Ensure environment variables are read.\n\nrequire('../config/env'); // @remove-on-eject-begin\n// Do the preflight check (only happens before eject).\n\n\nconst verifyPackageTree = require('./utils/verifyPackageTree');\n\nif (process.env.SKIP_PREFLIGHT_CHECK !== 'true') {\n  verifyPackageTree();\n}\n\nconst verifyTypeScriptSetup = require('./utils/verifyTypeScriptSetup');\n\nverifyTypeScriptSetup(); // @remove-on-eject-end\n\nconst jest = require('jest');\n\nconst execSync = require('child_process').execSync;\n\nlet argv = process.argv.slice(2);\n\nfunction isInGitRepository() {\n  try {\n    execSync('git rev-parse --is-inside-work-tree', {\n      stdio: 'ignore'\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isInMercurialRepository() {\n  try {\n    execSync('hg --cwd . root', {\n      stdio: 'ignore'\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n} // Watch unless on CI or explicitly running all tests\n\n\nif (!process.env.CI && argv.indexOf('--watchAll') === -1 && argv.indexOf('--watchAll=false') === -1) {\n  // https://github.com/facebook/create-react-app/issues/5210\n  const hasSourceControl = isInGitRepository() || isInMercurialRepository();\n  argv.push(hasSourceControl ? '--watch' : '--watchAll');\n} // @remove-on-eject-begin\n// This is not necessary after eject because we embed config into package.json.\n\n\nconst createJestConfig = require('./utils/createJestConfig');\n\nconst path = require('path');\n\nconst paths = require('../config/paths');\n\nargv.push('--config', JSON.stringify(createJestConfig(relativePath => path.resolve(__dirname, '..', relativePath), path.resolve(paths.appSrc, '..'), false))); // This is a very dirty workaround for https://github.com/facebook/jest/issues/5913.\n// We're trying to resolve the environment ourselves because Jest does it incorrectly.\n// TODO: remove this as soon as it's fixed in Jest.\n\nconst resolve = require('resolve');\n\nfunction resolveJestDefaultEnvironment(name) {\n  const jestDir = path.dirname(resolve.sync('jest', {\n    basedir: __dirname\n  }));\n  const jestCLIDir = path.dirname(resolve.sync('jest-cli', {\n    basedir: jestDir\n  }));\n  const jestConfigDir = path.dirname(resolve.sync('jest-config', {\n    basedir: jestCLIDir\n  }));\n  return resolve.sync(name, {\n    basedir: jestConfigDir\n  });\n}\n\nlet cleanArgv = [];\nlet env = 'jsdom';\nlet next;\n\ndo {\n  next = argv.shift();\n\n  if (next === '--env') {\n    env = argv.shift();\n  } else if (next.indexOf('--env=') === 0) {\n    env = next.substring('--env='.length);\n  } else {\n    cleanArgv.push(next);\n  }\n} while (argv.length > 0);\n\nargv = cleanArgv;\nlet resolvedEnv;\n\ntry {\n  resolvedEnv = resolveJestDefaultEnvironment(`jest-environment-${env}`);\n} catch (e) {// ignore\n}\n\nif (!resolvedEnv) {\n  try {\n    resolvedEnv = resolveJestDefaultEnvironment(env);\n  } catch (e) {// ignore\n  }\n}\n\nconst testEnvironment = resolvedEnv || env;\nargv.push('--env', testEnvironment); // @remove-on-eject-end\n\njest.run(argv);","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-scripts/scripts/test.js"],"names":["process","env","BABEL_ENV","NODE_ENV","PUBLIC_URL","on","err","require","verifyPackageTree","SKIP_PREFLIGHT_CHECK","verifyTypeScriptSetup","jest","execSync","argv","slice","isInGitRepository","stdio","e","isInMercurialRepository","CI","indexOf","hasSourceControl","push","createJestConfig","path","paths","JSON","stringify","relativePath","resolve","__dirname","appSrc","resolveJestDefaultEnvironment","name","jestDir","dirname","sync","basedir","jestCLIDir","jestConfigDir","cleanArgv","next","shift","substring","length","resolvedEnv","testEnvironment","run"],"mappings":"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","sourcesContent":["// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\n// Do this as the first thing so that any code reading it knows the right env.\nprocess.env.BABEL_ENV = 'test';\nprocess.env.NODE_ENV = 'test';\nprocess.env.PUBLIC_URL = '';\n\n// Makes the script crash on unhandled rejections instead of silently\n// ignoring them. In the future, promise rejections that are not handled will\n// terminate the Node.js process with a non-zero exit code.\nprocess.on('unhandledRejection', err => {\n  throw err;\n});\n\n// Ensure environment variables are read.\nrequire('../config/env');\n// @remove-on-eject-begin\n// Do the preflight check (only happens before eject).\nconst verifyPackageTree = require('./utils/verifyPackageTree');\nif (process.env.SKIP_PREFLIGHT_CHECK !== 'true') {\n  verifyPackageTree();\n}\nconst verifyTypeScriptSetup = require('./utils/verifyTypeScriptSetup');\nverifyTypeScriptSetup();\n// @remove-on-eject-end\n\nconst jest = require('jest');\nconst execSync = require('child_process').execSync;\nlet argv = process.argv.slice(2);\n\nfunction isInGitRepository() {\n  try {\n    execSync('git rev-parse --is-inside-work-tree', { stdio: 'ignore' });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isInMercurialRepository() {\n  try {\n    execSync('hg --cwd . root', { stdio: 'ignore' });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n// Watch unless on CI or explicitly running all tests\nif (\n  !process.env.CI &&\n  argv.indexOf('--watchAll') === -1 &&\n  argv.indexOf('--watchAll=false') === -1\n) {\n  // https://github.com/facebook/create-react-app/issues/5210\n  const hasSourceControl = isInGitRepository() || isInMercurialRepository();\n  argv.push(hasSourceControl ? '--watch' : '--watchAll');\n}\n\n// @remove-on-eject-begin\n// This is not necessary after eject because we embed config into package.json.\nconst createJestConfig = require('./utils/createJestConfig');\nconst path = require('path');\nconst paths = require('../config/paths');\nargv.push(\n  '--config',\n  JSON.stringify(\n    createJestConfig(\n      relativePath => path.resolve(__dirname, '..', relativePath),\n      path.resolve(paths.appSrc, '..'),\n      false\n    )\n  )\n);\n\n// This is a very dirty workaround for https://github.com/facebook/jest/issues/5913.\n// We're trying to resolve the environment ourselves because Jest does it incorrectly.\n// TODO: remove this as soon as it's fixed in Jest.\nconst resolve = require('resolve');\nfunction resolveJestDefaultEnvironment(name) {\n  const jestDir = path.dirname(\n    resolve.sync('jest', {\n      basedir: __dirname,\n    })\n  );\n  const jestCLIDir = path.dirname(\n    resolve.sync('jest-cli', {\n      basedir: jestDir,\n    })\n  );\n  const jestConfigDir = path.dirname(\n    resolve.sync('jest-config', {\n      basedir: jestCLIDir,\n    })\n  );\n  return resolve.sync(name, {\n    basedir: jestConfigDir,\n  });\n}\nlet cleanArgv = [];\nlet env = 'jsdom';\nlet next;\ndo {\n  next = argv.shift();\n  if (next === '--env') {\n    env = argv.shift();\n  } else if (next.indexOf('--env=') === 0) {\n    env = next.substring('--env='.length);\n  } else {\n    cleanArgv.push(next);\n  }\n} while (argv.length > 0);\nargv = cleanArgv;\nlet resolvedEnv;\ntry {\n  resolvedEnv = resolveJestDefaultEnvironment(`jest-environment-${env}`);\n} catch (e) {\n  // ignore\n}\nif (!resolvedEnv) {\n  try {\n    resolvedEnv = resolveJestDefaultEnvironment(env);\n  } catch (e) {\n    // ignore\n  }\n}\nconst testEnvironment = resolvedEnv || env;\nargv.push('--env', testEnvironment);\n// @remove-on-eject-end\njest.run(argv);\n"]},"metadata":{},"sourceType":"script"}