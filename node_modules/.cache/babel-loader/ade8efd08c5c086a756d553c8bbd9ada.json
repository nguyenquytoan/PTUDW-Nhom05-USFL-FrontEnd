{"ast":null,"code":"/**\n * @fileoverview Rule to disallow whitespace before properties\n * @author Kai Cataldo\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow whitespace before properties\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-whitespace-before-property\"\n    },\n    fixable: \"whitespace\",\n    schema: []\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode(); //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Reports whitespace before property token\n     * @param {ASTNode} node the node to report in the event of an error\n     * @param {Token} leftToken the left token\n     * @param {Token} rightToken the right token\n     * @returns {void}\n     * @private\n     */\n\n    function reportError(node, leftToken, rightToken) {\n      const replacementText = node.computed ? \"\" : \".\";\n      context.report({\n        node,\n        message: \"Unexpected whitespace before property {{propName}}.\",\n        data: {\n          propName: sourceCode.getText(node.property)\n        },\n\n        fix(fixer) {\n          if (!node.computed && astUtils.isDecimalInteger(node.object)) {\n            /*\n             * If the object is a number literal, fixing it to something like 5.toString() would cause a SyntaxError.\n             * Don't fix this case.\n             */\n            return null;\n          }\n\n          return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], replacementText);\n        }\n\n      });\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      MemberExpression(node) {\n        let rightToken;\n        let leftToken;\n\n        if (!astUtils.isTokenOnSameLine(node.object, node.property)) {\n          return;\n        }\n\n        if (node.computed) {\n          rightToken = sourceCode.getTokenBefore(node.property, astUtils.isOpeningBracketToken);\n          leftToken = sourceCode.getTokenBefore(rightToken);\n        } else {\n          rightToken = sourceCode.getFirstToken(node.property);\n          leftToken = sourceCode.getTokenBefore(rightToken, 1);\n        }\n\n        if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken)) {\n          reportError(node, leftToken, rightToken);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-whitespace-before-property.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","create","context","sourceCode","getSourceCode","reportError","node","leftToken","rightToken","replacementText","computed","report","message","data","propName","getText","property","fix","fixer","isDecimalInteger","object","replaceTextRange","range","MemberExpression","isTokenOnSameLine","getTokenBefore","isOpeningBracketToken","getFirstToken","isSpaceBetweenTokens"],"mappings":"AAAA;;;;AAIA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,QADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,uCADX;AAEFC,MAAAA,QAAQ,EAAE,kBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,OAAO,EAAE,YAVP;AAWFC,IAAAA,MAAM,EAAE;AAXN,GADO;;AAebC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,UAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB,CADY,CAGZ;AACA;AACA;;AAEA;;;;;;;;;AAQA,aAASC,WAAT,CAAqBC,IAArB,EAA2BC,SAA3B,EAAsCC,UAAtC,EAAkD;AAC9C,YAAMC,eAAe,GAAGH,IAAI,CAACI,QAAL,GAAgB,EAAhB,GAAqB,GAA7C;AAEAR,MAAAA,OAAO,CAACS,MAAR,CAAe;AACXL,QAAAA,IADW;AAEXM,QAAAA,OAAO,EAAE,qDAFE;AAGXC,QAAAA,IAAI,EAAE;AACFC,UAAAA,QAAQ,EAAEX,UAAU,CAACY,OAAX,CAAmBT,IAAI,CAACU,QAAxB;AADR,SAHK;;AAMXC,QAAAA,GAAG,CAACC,KAAD,EAAQ;AACP,cAAI,CAACZ,IAAI,CAACI,QAAN,IAAkBtB,QAAQ,CAAC+B,gBAAT,CAA0Bb,IAAI,CAACc,MAA/B,CAAtB,EAA8D;AAE1D;;;;AAIA,mBAAO,IAAP;AACH;;AACD,iBAAOF,KAAK,CAACG,gBAAN,CAAuB,CAACd,SAAS,CAACe,KAAV,CAAgB,CAAhB,CAAD,EAAqBd,UAAU,CAACc,KAAX,CAAiB,CAAjB,CAArB,CAAvB,EAAkEb,eAAlE,CAAP;AACH;;AAhBU,OAAf;AAkBH,KApCW,CAsCZ;AACA;AACA;;;AAEA,WAAO;AACHc,MAAAA,gBAAgB,CAACjB,IAAD,EAAO;AACnB,YAAIE,UAAJ;AACA,YAAID,SAAJ;;AAEA,YAAI,CAACnB,QAAQ,CAACoC,iBAAT,CAA2BlB,IAAI,CAACc,MAAhC,EAAwCd,IAAI,CAACU,QAA7C,CAAL,EAA6D;AACzD;AACH;;AAED,YAAIV,IAAI,CAACI,QAAT,EAAmB;AACfF,UAAAA,UAAU,GAAGL,UAAU,CAACsB,cAAX,CAA0BnB,IAAI,CAACU,QAA/B,EAAyC5B,QAAQ,CAACsC,qBAAlD,CAAb;AACAnB,UAAAA,SAAS,GAAGJ,UAAU,CAACsB,cAAX,CAA0BjB,UAA1B,CAAZ;AACH,SAHD,MAGO;AACHA,UAAAA,UAAU,GAAGL,UAAU,CAACwB,aAAX,CAAyBrB,IAAI,CAACU,QAA9B,CAAb;AACAT,UAAAA,SAAS,GAAGJ,UAAU,CAACsB,cAAX,CAA0BjB,UAA1B,EAAsC,CAAtC,CAAZ;AACH;;AAED,YAAIL,UAAU,CAACyB,oBAAX,CAAgCrB,SAAhC,EAA2CC,UAA3C,CAAJ,EAA4D;AACxDH,UAAAA,WAAW,CAACC,IAAD,EAAOC,SAAP,EAAkBC,UAAlB,CAAX;AACH;AACJ;;AApBE,KAAP;AAsBH;;AA/EY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to disallow whitespace before properties\n * @author Kai Cataldo\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"disallow whitespace before properties\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-whitespace-before-property\"\n        },\n\n        fixable: \"whitespace\",\n        schema: []\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports whitespace before property token\n         * @param {ASTNode} node the node to report in the event of an error\n         * @param {Token} leftToken the left token\n         * @param {Token} rightToken the right token\n         * @returns {void}\n         * @private\n         */\n        function reportError(node, leftToken, rightToken) {\n            const replacementText = node.computed ? \"\" : \".\";\n\n            context.report({\n                node,\n                message: \"Unexpected whitespace before property {{propName}}.\",\n                data: {\n                    propName: sourceCode.getText(node.property)\n                },\n                fix(fixer) {\n                    if (!node.computed && astUtils.isDecimalInteger(node.object)) {\n\n                        /*\n                         * If the object is a number literal, fixing it to something like 5.toString() would cause a SyntaxError.\n                         * Don't fix this case.\n                         */\n                        return null;\n                    }\n                    return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], replacementText);\n                }\n            });\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            MemberExpression(node) {\n                let rightToken;\n                let leftToken;\n\n                if (!astUtils.isTokenOnSameLine(node.object, node.property)) {\n                    return;\n                }\n\n                if (node.computed) {\n                    rightToken = sourceCode.getTokenBefore(node.property, astUtils.isOpeningBracketToken);\n                    leftToken = sourceCode.getTokenBefore(rightToken);\n                } else {\n                    rightToken = sourceCode.getFirstToken(node.property);\n                    leftToken = sourceCode.getTokenBefore(rightToken, 1);\n                }\n\n                if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken)) {\n                    reportError(node, leftToken, rightToken);\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}