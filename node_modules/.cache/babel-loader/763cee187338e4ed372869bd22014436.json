{"ast":null,"code":"/**\n * @fileoverview Restrict usage of duplicate imports.\n * @author Simen Bekkhus\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/**\n * Returns the name of the module imported or re-exported.\n * @param {ASTNode} node A node to get.\n * @returns {string} the name of the module, or empty string if no name.\n */\n\nfunction getValue(node) {\n  if (node && node.source && node.source.value) {\n    return node.source.value.trim();\n  }\n\n  return \"\";\n}\n/**\n * Checks if the name of the import or export exists in the given array, and reports if so.\n * @param {RuleContext} context The ESLint rule context object.\n * @param {ASTNode} node A node to get.\n * @param {string} value The name of the imported or exported module.\n * @param {string[]} array The array containing other imports or exports in the file.\n * @param {string} messageId A messageId to be reported after the name of the module\n *\n * @returns {void} No return value\n */\n\n\nfunction checkAndReport(context, node, value, array, messageId) {\n  if (array.indexOf(value) !== -1) {\n    context.report({\n      node,\n      messageId,\n      data: {\n        module: value\n      }\n    });\n  }\n}\n/**\n * @callback nodeCallback\n * @param {ASTNode} node A node to handle.\n */\n\n/**\n * Returns a function handling the imports of a given file\n * @param {RuleContext} context The ESLint rule context object.\n * @param {boolean} includeExports Whether or not to check for exports in addition to imports.\n * @param {string[]} importsInFile The array containing other imports in the file.\n * @param {string[]} exportsInFile The array containing other exports in the file.\n *\n * @returns {nodeCallback} A function passed to ESLint to handle the statement.\n */\n\n\nfunction handleImports(context, includeExports, importsInFile, exportsInFile) {\n  return function (node) {\n    const value = getValue(node);\n\n    if (value) {\n      checkAndReport(context, node, value, importsInFile, \"import\");\n\n      if (includeExports) {\n        checkAndReport(context, node, value, exportsInFile, \"importAs\");\n      }\n\n      importsInFile.push(value);\n    }\n  };\n}\n/**\n * Returns a function handling the exports of a given file\n * @param {RuleContext} context The ESLint rule context object.\n * @param {string[]} importsInFile The array containing other imports in the file.\n * @param {string[]} exportsInFile The array containing other exports in the file.\n *\n * @returns {nodeCallback} A function passed to ESLint to handle the statement.\n */\n\n\nfunction handleExports(context, importsInFile, exportsInFile) {\n  return function (node) {\n    const value = getValue(node);\n\n    if (value) {\n      checkAndReport(context, node, value, exportsInFile, \"export\");\n      checkAndReport(context, node, value, importsInFile, \"exportAs\");\n      exportsInFile.push(value);\n    }\n  };\n}\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow duplicate module imports\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-duplicate-imports\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        includeExports: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      import: \"'{{module}}' import is duplicated.\",\n      importAs: \"'{{module}}' import is duplicated as export.\",\n      export: \"'{{module}}' export is duplicated.\",\n      exportAs: \"'{{module}}' export is duplicated as import.\"\n    }\n  },\n\n  create(context) {\n    const includeExports = (context.options[0] || {}).includeExports,\n          importsInFile = [],\n          exportsInFile = [];\n    const handlers = {\n      ImportDeclaration: handleImports(context, includeExports, importsInFile, exportsInFile)\n    };\n\n    if (includeExports) {\n      handlers.ExportNamedDeclaration = handleExports(context, importsInFile, exportsInFile);\n      handlers.ExportAllDeclaration = handleExports(context, importsInFile, exportsInFile);\n    }\n\n    return handlers;\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-duplicate-imports.js"],"names":["getValue","node","source","value","trim","checkAndReport","context","array","messageId","indexOf","report","data","module","handleImports","includeExports","importsInFile","exportsInFile","push","handleExports","exports","meta","type","docs","description","category","recommended","url","schema","properties","default","additionalProperties","messages","import","importAs","export","exportAs","create","options","handlers","ImportDeclaration","ExportNamedDeclaration","ExportAllDeclaration"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Restrict usage of duplicate imports.\n * @author Simen Bekkhus\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/**\n * Returns the name of the module imported or re-exported.\n * @param {ASTNode} node A node to get.\n * @returns {string} the name of the module, or empty string if no name.\n */\nfunction getValue(node) {\n    if (node && node.source && node.source.value) {\n        return node.source.value.trim();\n    }\n\n    return \"\";\n}\n\n/**\n * Checks if the name of the import or export exists in the given array, and reports if so.\n * @param {RuleContext} context The ESLint rule context object.\n * @param {ASTNode} node A node to get.\n * @param {string} value The name of the imported or exported module.\n * @param {string[]} array The array containing other imports or exports in the file.\n * @param {string} messageId A messageId to be reported after the name of the module\n *\n * @returns {void} No return value\n */\nfunction checkAndReport(context, node, value, array, messageId) {\n    if (array.indexOf(value) !== -1) {\n        context.report({\n            node,\n            messageId,\n            data: {\n                module: value\n            }\n        });\n    }\n}\n\n/**\n * @callback nodeCallback\n * @param {ASTNode} node A node to handle.\n */\n\n/**\n * Returns a function handling the imports of a given file\n * @param {RuleContext} context The ESLint rule context object.\n * @param {boolean} includeExports Whether or not to check for exports in addition to imports.\n * @param {string[]} importsInFile The array containing other imports in the file.\n * @param {string[]} exportsInFile The array containing other exports in the file.\n *\n * @returns {nodeCallback} A function passed to ESLint to handle the statement.\n */\nfunction handleImports(context, includeExports, importsInFile, exportsInFile) {\n    return function(node) {\n        const value = getValue(node);\n\n        if (value) {\n            checkAndReport(context, node, value, importsInFile, \"import\");\n\n            if (includeExports) {\n                checkAndReport(context, node, value, exportsInFile, \"importAs\");\n            }\n\n            importsInFile.push(value);\n        }\n    };\n}\n\n/**\n * Returns a function handling the exports of a given file\n * @param {RuleContext} context The ESLint rule context object.\n * @param {string[]} importsInFile The array containing other imports in the file.\n * @param {string[]} exportsInFile The array containing other exports in the file.\n *\n * @returns {nodeCallback} A function passed to ESLint to handle the statement.\n */\nfunction handleExports(context, importsInFile, exportsInFile) {\n    return function(node) {\n        const value = getValue(node);\n\n        if (value) {\n            checkAndReport(context, node, value, exportsInFile, \"export\");\n            checkAndReport(context, node, value, importsInFile, \"exportAs\");\n\n            exportsInFile.push(value);\n        }\n    };\n}\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow duplicate module imports\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-duplicate-imports\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                includeExports: {\n                    type: \"boolean\",\n                    default: false\n                }\n            },\n            additionalProperties: false\n        }],\n        messages: {\n            import: \"'{{module}}' import is duplicated.\",\n            importAs: \"'{{module}}' import is duplicated as export.\",\n            export: \"'{{module}}' export is duplicated.\",\n            exportAs: \"'{{module}}' export is duplicated as import.\"\n        }\n    },\n\n    create(context) {\n        const includeExports = (context.options[0] || {}).includeExports,\n            importsInFile = [],\n            exportsInFile = [];\n\n        const handlers = {\n            ImportDeclaration: handleImports(context, includeExports, importsInFile, exportsInFile)\n        };\n\n        if (includeExports) {\n            handlers.ExportNamedDeclaration = handleExports(context, importsInFile, exportsInFile);\n            handlers.ExportAllDeclaration = handleExports(context, importsInFile, exportsInFile);\n        }\n\n        return handlers;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}