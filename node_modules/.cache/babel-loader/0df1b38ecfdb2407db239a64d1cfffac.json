{"ast":null,"code":"var hasOwnProperty = Object.prototype.hasOwnProperty;\nvar shape = {\n  generic: true,\n  types: {},\n  atrules: {},\n  properties: {},\n  parseContext: {},\n  scope: {},\n  atrule: ['parse'],\n  pseudo: ['parse'],\n  node: ['name', 'structure', 'parse', 'generate', 'walkContext']\n};\n\nfunction isObject(value) {\n  return value && value.constructor === Object;\n}\n\nfunction copy(value) {\n  if (isObject(value)) {\n    return Object.assign({}, value);\n  } else {\n    return value;\n  }\n}\n\nfunction extend(dest, src) {\n  for (var key in src) {\n    if (hasOwnProperty.call(src, key)) {\n      if (isObject(dest[key])) {\n        extend(dest[key], copy(src[key]));\n      } else {\n        dest[key] = copy(src[key]);\n      }\n    }\n  }\n}\n\nfunction mix(dest, src, shape) {\n  for (var key in shape) {\n    if (hasOwnProperty.call(shape, key) === false) {\n      continue;\n    }\n\n    if (shape[key] === true) {\n      if (key in src) {\n        if (hasOwnProperty.call(src, key)) {\n          dest[key] = copy(src[key]);\n        }\n      }\n    } else if (shape[key]) {\n      if (isObject(shape[key])) {\n        var res = {};\n        extend(res, dest[key]);\n        extend(res, src[key]);\n        dest[key] = res;\n      } else if (Array.isArray(shape[key])) {\n        var res = {};\n        var innerShape = shape[key].reduce(function (s, k) {\n          s[k] = true;\n          return s;\n        }, {});\n\n        for (var name in dest[key]) {\n          if (hasOwnProperty.call(dest[key], name)) {\n            res[name] = {};\n\n            if (dest[key] && dest[key][name]) {\n              mix(res[name], dest[key][name], innerShape);\n            }\n          }\n        }\n\n        for (var name in src[key]) {\n          if (hasOwnProperty.call(src[key], name)) {\n            if (!res[name]) {\n              res[name] = {};\n            }\n\n            if (src[key] && src[key][name]) {\n              mix(res[name], src[key][name], innerShape);\n            }\n          }\n        }\n\n        dest[key] = res;\n      }\n    }\n  }\n\n  return dest;\n}\n\nmodule.exports = function (dest, src) {\n  return mix(dest, src, shape);\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/csso/node_modules/css-tree/lib/syntax/config/mix.js"],"names":["hasOwnProperty","Object","prototype","shape","generic","types","atrules","properties","parseContext","scope","atrule","pseudo","node","isObject","value","constructor","copy","assign","extend","dest","src","key","call","mix","res","Array","isArray","innerShape","reduce","s","k","name","module","exports"],"mappings":"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","sourcesContent":["var hasOwnProperty = Object.prototype.hasOwnProperty;\nvar shape = {\n    generic: true,\n    types: {},\n    atrules: {},\n    properties: {},\n    parseContext: {},\n    scope: {},\n    atrule: ['parse'],\n    pseudo: ['parse'],\n    node: ['name', 'structure', 'parse', 'generate', 'walkContext']\n};\n\nfunction isObject(value) {\n    return value && value.constructor === Object;\n}\n\nfunction copy(value) {\n    if (isObject(value)) {\n        return Object.assign({}, value);\n    } else {\n        return value;\n    }\n}\nfunction extend(dest, src) {\n    for (var key in src) {\n        if (hasOwnProperty.call(src, key)) {\n            if (isObject(dest[key])) {\n                extend(dest[key], copy(src[key]));\n            } else {\n                dest[key] = copy(src[key]);\n            }\n        }\n    }\n}\n\nfunction mix(dest, src, shape) {\n    for (var key in shape) {\n        if (hasOwnProperty.call(shape, key) === false) {\n            continue;\n        }\n\n        if (shape[key] === true) {\n            if (key in src) {\n                if (hasOwnProperty.call(src, key)) {\n                    dest[key] = copy(src[key]);\n                }\n            }\n        } else if (shape[key]) {\n            if (isObject(shape[key])) {\n                var res = {};\n                extend(res, dest[key]);\n                extend(res, src[key]);\n                dest[key] = res;\n            } else if (Array.isArray(shape[key])) {\n                var res = {};\n                var innerShape = shape[key].reduce(function(s, k) {\n                    s[k] = true;\n                    return s;\n                }, {});\n                for (var name in dest[key]) {\n                    if (hasOwnProperty.call(dest[key], name)) {\n                        res[name] = {};\n                        if (dest[key] && dest[key][name]) {\n                            mix(res[name], dest[key][name], innerShape);\n                        }\n                    }\n                }\n                for (var name in src[key]) {\n                    if (hasOwnProperty.call(src[key], name)) {\n                        if (!res[name]) {\n                            res[name] = {};\n                        }\n                        if (src[key] && src[key][name]) {\n                            mix(res[name], src[key][name], innerShape);\n                        }\n                    }\n                }\n                dest[key] = res;\n            }\n        }\n    }\n    return dest;\n}\n\nmodule.exports = function(dest, src) {\n    return mix(dest, src, shape);\n};\n"]},"metadata":{},"sourceType":"script"}