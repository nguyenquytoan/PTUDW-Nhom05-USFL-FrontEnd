{"ast":null,"code":"\"use strict\";\n\ndefine(['test/test-helpers'], function (testHelpers) {\n  var it = testHelpers.itWithFreshLog;\n  describe(\"Setting the methodFactory tests:\", function () {\n    it(\"methodFactory should be called once for each loggable level\", function (log) {\n      log.methodFactory = jasmine.createSpy(\"methodFactory\");\n      log.setLevel(\"trace\");\n      expect(log.methodFactory.calls.length).toEqual(5);\n      expect(log.methodFactory.argsForCall[0]).toEqual([\"trace\", 0, undefined]);\n      expect(log.methodFactory.argsForCall[1]).toEqual([\"debug\", 0, undefined]);\n      expect(log.methodFactory.argsForCall[2]).toEqual([\"info\", 0, undefined]);\n      expect(log.methodFactory.argsForCall[3]).toEqual([\"warn\", 0, undefined]);\n      expect(log.methodFactory.argsForCall[4]).toEqual([\"error\", 0, undefined]);\n      log.setLevel(\"error\");\n      expect(log.methodFactory.calls.length).toEqual(6);\n      expect(log.methodFactory.argsForCall[5]).toEqual([\"error\", 4, undefined]);\n    });\n    it(\"functions returned by methodFactory should be used as logging functions\", function (log) {\n      var logFunction = function () {};\n\n      log.methodFactory = function () {\n        return logFunction;\n      };\n\n      log.setLevel(\"error\");\n      expect(log.warn).not.toEqual(logFunction);\n      expect(log.error).toEqual(logFunction);\n    });\n    it(\"the third argument should be logger's name\", function (log) {\n      var logger = log.getLogger(\"newLogger\");\n      logger.methodFactory = jasmine.createSpy(\"methodFactory\");\n      logger.setLevel(\"error\");\n      expect(logger.methodFactory.argsForCall[0]).toEqual([\"error\", 4, \"newLogger\"]);\n    });\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/loglevel/test/method-factory-test.js"],"names":["define","testHelpers","it","itWithFreshLog","describe","log","methodFactory","jasmine","createSpy","setLevel","expect","calls","length","toEqual","argsForCall","undefined","logFunction","warn","not","error","logger","getLogger"],"mappings":"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","sourcesContent":["\"use strict\";\n\ndefine(['test/test-helpers'], function(testHelpers) {\n    var it = testHelpers.itWithFreshLog;\n\n    describe(\"Setting the methodFactory tests:\", function() {\n\n        it(\"methodFactory should be called once for each loggable level\", function(log) {\n            log.methodFactory = jasmine.createSpy(\"methodFactory\");\n\n            log.setLevel(\"trace\");\n            expect(log.methodFactory.calls.length).toEqual(5);\n            expect(log.methodFactory.argsForCall[0]).toEqual([\"trace\", 0, undefined]);\n            expect(log.methodFactory.argsForCall[1]).toEqual([\"debug\", 0, undefined]);\n            expect(log.methodFactory.argsForCall[2]).toEqual([\"info\",  0, undefined]);\n            expect(log.methodFactory.argsForCall[3]).toEqual([\"warn\",  0, undefined]);\n            expect(log.methodFactory.argsForCall[4]).toEqual([\"error\", 0, undefined]);\n\n            log.setLevel(\"error\");\n            expect(log.methodFactory.calls.length).toEqual(6);\n            expect(log.methodFactory.argsForCall[5]).toEqual([\"error\", 4, undefined]);\n        });\n\n        it(\"functions returned by methodFactory should be used as logging functions\", function(log) {\n            var logFunction = function() {};\n            log.methodFactory = function() { return logFunction; };\n            log.setLevel(\"error\");\n\n            expect(log.warn).not.toEqual(logFunction);\n            expect(log.error).toEqual(logFunction);\n        });\n\n        it(\"the third argument should be logger's name\", function(log) {\n            var logger = log.getLogger(\"newLogger\");\n            logger.methodFactory = jasmine.createSpy(\"methodFactory\");\n\n            logger.setLevel(\"error\");\n            expect(logger.methodFactory.argsForCall[0]).toEqual([\"error\", 4, \"newLogger\"]);\n        });\n\n    });\n});\n"]},"metadata":{},"sourceType":"script"}