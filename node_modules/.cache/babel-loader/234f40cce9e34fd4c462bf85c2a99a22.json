{"ast":null,"code":"#!/usr/bin/env node\n\nvar mdns = require('./')();\n\nvar path = require('path');\n\nvar os = require('os');\n\nvar announcing = process.argv.indexOf('--announce') > -1;\n\nif (process.argv.length < 3) {\n  console.error('Usage: %s <hostname>', path.basename(process.argv[1]));\n  process.exit(1);\n}\n\nvar hostname = process.argv[2];\n\nif (announcing) {\n  var ip = getIp();\n  mdns.on('query', function (query) {\n    query.questions.forEach(function (q) {\n      if (q.name === hostname) {\n        console.log('Responding %s -> %s', q.name, ip);\n        mdns.respond({\n          answers: [{\n            type: 'A',\n            name: q.name,\n            data: ip\n          }]\n        });\n      }\n    });\n  });\n} else {\n  mdns.on('response', function (response) {\n    response.answers.forEach(function (answer) {\n      if (answer.name === hostname) {\n        console.log(answer.data);\n        process.exit();\n      }\n    });\n  });\n  mdns.query(hostname, 'A'); // Give responses 3 seconds to respond\n\n  setTimeout(function () {\n    console.error('Hostname not found');\n    process.exit(1);\n  }, 3000);\n}\n\nfunction getIp() {\n  var networks = os.networkInterfaces();\n  var found = '127.0.0.1';\n  Object.keys(networks).forEach(function (k) {\n    var n = networks[k];\n    n.forEach(function (addr) {\n      if (addr.family === 'IPv4' && !addr.internal) {\n        found = addr.address;\n      }\n    });\n  });\n  return found;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/multicast-dns/cli.js"],"names":["mdns","require","path","os","announcing","process","argv","indexOf","length","console","error","basename","exit","hostname","ip","getIp","on","query","questions","forEach","q","name","log","respond","answers","type","data","response","answer","setTimeout","networks","networkInterfaces","found","Object","keys","k","n","addr","family","internal","address"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,IAAD,CAAP,EAAX;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAhB;;AAEA,IAAIG,UAAU,GAAGC,OAAO,CAACC,IAAR,CAAaC,OAAb,CAAqB,YAArB,IAAqC,CAAC,CAAvD;;AAEA,IAAIF,OAAO,CAACC,IAAR,CAAaE,MAAb,GAAsB,CAA1B,EAA6B;AAC3BC,EAAAA,OAAO,CAACC,KAAR,CAAc,sBAAd,EAAsCR,IAAI,CAACS,QAAL,CAAcN,OAAO,CAACC,IAAR,CAAa,CAAb,CAAd,CAAtC;AACAD,EAAAA,OAAO,CAACO,IAAR,CAAa,CAAb;AACD;;AACD,IAAIC,QAAQ,GAAGR,OAAO,CAACC,IAAR,CAAa,CAAb,CAAf;;AAEA,IAAIF,UAAJ,EAAgB;AACd,MAAIU,EAAE,GAAGC,KAAK,EAAd;AACAf,EAAAA,IAAI,CAACgB,EAAL,CAAQ,OAAR,EAAiB,UAAUC,KAAV,EAAiB;AAChCA,IAAAA,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwB,UAAUC,CAAV,EAAa;AACnC,UAAIA,CAAC,CAACC,IAAF,KAAWR,QAAf,EAAyB;AACvBJ,QAAAA,OAAO,CAACa,GAAR,CAAY,qBAAZ,EAAmCF,CAAC,CAACC,IAArC,EAA2CP,EAA3C;AACAd,QAAAA,IAAI,CAACuB,OAAL,CAAa;AACXC,UAAAA,OAAO,EAAE,CAAC;AACRC,YAAAA,IAAI,EAAE,GADE;AAERJ,YAAAA,IAAI,EAAED,CAAC,CAACC,IAFA;AAGRK,YAAAA,IAAI,EAAEZ;AAHE,WAAD;AADE,SAAb;AAOD;AACF,KAXD;AAYD,GAbD;AAcD,CAhBD,MAgBO;AACLd,EAAAA,IAAI,CAACgB,EAAL,CAAQ,UAAR,EAAoB,UAAUW,QAAV,EAAoB;AACtCA,IAAAA,QAAQ,CAACH,OAAT,CAAiBL,OAAjB,CAAyB,UAAUS,MAAV,EAAkB;AACzC,UAAIA,MAAM,CAACP,IAAP,KAAgBR,QAApB,EAA8B;AAC5BJ,QAAAA,OAAO,CAACa,GAAR,CAAYM,MAAM,CAACF,IAAnB;AACArB,QAAAA,OAAO,CAACO,IAAR;AACD;AACF,KALD;AAMD,GAPD;AASAZ,EAAAA,IAAI,CAACiB,KAAL,CAAWJ,QAAX,EAAqB,GAArB,EAVK,CAYL;;AACAgB,EAAAA,UAAU,CAAC,YAAY;AACrBpB,IAAAA,OAAO,CAACC,KAAR,CAAc,oBAAd;AACAL,IAAAA,OAAO,CAACO,IAAR,CAAa,CAAb;AACD,GAHS,EAGP,IAHO,CAAV;AAID;;AAED,SAASG,KAAT,GAAkB;AAChB,MAAIe,QAAQ,GAAG3B,EAAE,CAAC4B,iBAAH,EAAf;AACA,MAAIC,KAAK,GAAG,WAAZ;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBX,OAAtB,CAA8B,UAAUgB,CAAV,EAAa;AACzC,QAAIC,CAAC,GAAGN,QAAQ,CAACK,CAAD,CAAhB;AACAC,IAAAA,CAAC,CAACjB,OAAF,CAAU,UAAUkB,IAAV,EAAgB;AACxB,UAAIA,IAAI,CAACC,MAAL,KAAgB,MAAhB,IAA0B,CAACD,IAAI,CAACE,QAApC,EAA8C;AAC5CP,QAAAA,KAAK,GAAGK,IAAI,CAACG,OAAb;AACD;AACF,KAJD;AAKD,GAPD;AASA,SAAOR,KAAP;AACD","sourcesContent":["#!/usr/bin/env node\n\nvar mdns = require('./')()\nvar path = require('path')\nvar os = require('os')\n\nvar announcing = process.argv.indexOf('--announce') > -1\n\nif (process.argv.length < 3) {\n  console.error('Usage: %s <hostname>', path.basename(process.argv[1]))\n  process.exit(1)\n}\nvar hostname = process.argv[2]\n\nif (announcing) {\n  var ip = getIp()\n  mdns.on('query', function (query) {\n    query.questions.forEach(function (q) {\n      if (q.name === hostname) {\n        console.log('Responding %s -> %s', q.name, ip)\n        mdns.respond({\n          answers: [{\n            type: 'A',\n            name: q.name,\n            data: ip\n          }]\n        })\n      }\n    })\n  })\n} else {\n  mdns.on('response', function (response) {\n    response.answers.forEach(function (answer) {\n      if (answer.name === hostname) {\n        console.log(answer.data)\n        process.exit()\n      }\n    })\n  })\n\n  mdns.query(hostname, 'A')\n\n  // Give responses 3 seconds to respond\n  setTimeout(function () {\n    console.error('Hostname not found')\n    process.exit(1)\n  }, 3000)\n}\n\nfunction getIp () {\n  var networks = os.networkInterfaces()\n  var found = '127.0.0.1'\n\n  Object.keys(networks).forEach(function (k) {\n    var n = networks[k]\n    n.forEach(function (addr) {\n      if (addr.family === 'IPv4' && !addr.internal) {\n        found = addr.address\n      }\n    })\n  })\n\n  return found\n}\n"]},"metadata":{},"sourceType":"script"}