{"ast":null,"code":"this.workbox = this.workbox || {}, this.workbox.navigationPreload = function (t) {\n  \"use strict\";\n\n  try {\n    self[\"workbox:navigation-preload:4.3.1\"] && _();\n  } catch (t) {}\n\n  function e() {\n    return Boolean(self.registration && self.registration.navigationPreload);\n  }\n\n  return t.disable = function () {\n    e() && self.addEventListener(\"activate\", t => {\n      t.waitUntil(self.registration.navigationPreload.disable().then(() => {}));\n    });\n  }, t.enable = function (t) {\n    e() && self.addEventListener(\"activate\", e => {\n      e.waitUntil(self.registration.navigationPreload.enable().then(() => {\n        t && self.registration.navigationPreload.setHeaderValue(t);\n      }));\n    });\n  }, t.isSupported = e, t;\n}({});","map":{"version":3,"sources":["../_version.mjs","../isSupported.mjs","../disable.mjs","../enable.mjs"],"names":["self","_","e","isSupported","Boolean","registration","navigationPreload","addEventListener","event","waitUntil","disable","then","headerValue","enable","setHeaderValue"],"mappings":";;;AAAA,MAAA;AAAIA,IAAAA,IAAAA,CAAK,kCAALA,CAAAA,IAA0CC,CAAAA,EAA1CD;AAA8C,GAAlD,CAAkD,OAAME,CAAN,EAAMA,CCgBxD;;AAAA,WAASC,CAAT,GAASA;AAAAA,WACAC,OAAAA,CAAQJ,IAAAA,CAAKK,YAALL,IAAqBA,IAAAA,CAAKK,YAALL,CAAkBM,iBAA/CF,CADAD;AAC+CG;;AAAAA,SAAAA,CAAAA,CAAAA,OAAAA,GCExD,YAAA;AACMH,IAAAA,CAAAA,MACFH,IAAAA,CAAKO,gBAALP,CAAsB,UAAtBA,EAAmCQ,CAAAA,IAAAA;AACjCA,MAAAA,CAAAA,CAAMC,SAAND,CACIR,IAAAA,CAAKK,YAALL,CAAkBM,iBAAlBN,CAAoCU,OAApCV,GAA8CW,IAA9CX,CAAmD,MAAA,CAAA,CAAnDA,CADJQ;AACuD,KAFzDR,CADEG;AAGuD,GDNLG,ECMK,CAAA,CAAA,MAAA,GCC7D,UAAgBM,CAAhB,EAAgBA;AACVT,IAAAA,CAAAA,MACFH,IAAAA,CAAKO,gBAALP,CAAsB,UAAtBA,EAAmCQ,CAAAA,IAAAA;AACjCA,MAAAA,CAAAA,CAAMC,SAAND,CACIR,IAAAA,CAAKK,YAALL,CAAkBM,iBAAlBN,CAAoCa,MAApCb,GAA6CW,IAA7CX,CAAkD,MAAA;AAE5CY,QAAAA,CAAAA,IACFZ,IAAAA,CAAKK,YAALL,CAAkBM,iBAAlBN,CAAoCc,cAApCd,CAAmDY,CAAnDZ,CADEY;AACiDA,OAHvDZ,CADJQ;AAI2DI,KAL7DZ,CADEG;AAM2DS,GFdTN,EEcSM,CAAAA,CAAAA,WAAAA,GAAAA,CFdTN,EEcSM,CFdTN;AEcSM,C,CAAAA,E","sourcesContent":["try{self['workbox:navigation-preload:4.3.1']&&_()}catch(e){}// eslint-disable-line","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport './_version.mjs';\n\n/**\n * @return {boolean} Whether or not the current browser supports enabling\n * navigation preload.\n *\n * @memberof workbox.navigationPreload\n */\nfunction isSupported() {\n  return Boolean(self.registration && self.registration.navigationPreload);\n}\n\nexport {isSupported};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {logger} from 'workbox-core/_private/logger.mjs';\n\nimport {isSupported} from './isSupported.mjs';\n\nimport './_version.mjs';\n\n/**\n * If the browser supports Navigation Preload, then this will disable it.\n *\n * @memberof workbox.navigationPreload\n */\nfunction disable() {\n  if (isSupported()) {\n    self.addEventListener('activate', (event) => {\n      event.waitUntil(\n          self.registration.navigationPreload.disable().then(() => {\n            if (process.env.NODE_ENV !== 'production') {\n              logger.log(`Navigation preload is disabled.`);\n            }\n          })\n      );\n    });\n  } else {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log(`Navigation preload is not supported in this browser.`);\n    }\n  }\n}\n\nexport {disable};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {logger} from 'workbox-core/_private/logger.mjs';\n\nimport {isSupported} from './isSupported.mjs';\n\nimport './_version.mjs';\n\n/**\n * If the browser supports Navigation Preload, then this will enable it.\n *\n * @param {string} [headerValue] Optionally, allows developers to\n * [override](https://developers.google.com/web/updates/2017/02/navigation-preload#changing_the_header)\n * the value of the `Service-Worker-Navigation-Preload` header which will be\n * sent to the server when making the navigation request.\n *\n * @memberof workbox.navigationPreload\n */\nfunction enable(headerValue) {\n  if (isSupported()) {\n    self.addEventListener('activate', (event) => {\n      event.waitUntil(\n          self.registration.navigationPreload.enable().then(() => {\n          // Defaults to Service-Worker-Navigation-Preload: true if not set.\n            if (headerValue) {\n              self.registration.navigationPreload.setHeaderValue(headerValue);\n            }\n\n            if (process.env.NODE_ENV !== 'production') {\n              logger.log(`Navigation preload is enabled.`);\n            }\n          })\n      );\n    });\n  } else {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log(`Navigation preload is not supported in this browser.`);\n    }\n  }\n}\n\nexport {enable};\n"]},"metadata":{},"sourceType":"script"}