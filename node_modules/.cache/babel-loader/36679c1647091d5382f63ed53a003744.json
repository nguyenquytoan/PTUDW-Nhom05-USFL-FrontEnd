{"ast":null,"code":"/**\n * @fileoverview Disallow Labeled Statements\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow labeled statements\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-labels\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowLoop: {\n          type: \"boolean\",\n          default: false\n        },\n        allowSwitch: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const options = context.options[0];\n    const allowLoop = options && options.allowLoop;\n    const allowSwitch = options && options.allowSwitch;\n    let scopeInfo = null;\n    /**\n     * Gets the kind of a given node.\n     * @param {ASTNode} node A node to get.\n     * @returns {string} The kind of the node.\n     */\n\n    function getBodyKind(node) {\n      if (astUtils.isLoop(node)) {\n        return \"loop\";\n      }\n\n      if (node.type === \"SwitchStatement\") {\n        return \"switch\";\n      }\n\n      return \"other\";\n    }\n    /**\n     * Checks whether the label of a given kind is allowed or not.\n     * @param {string} kind A kind to check.\n     * @returns {boolean} `true` if the kind is allowed.\n     */\n\n\n    function isAllowed(kind) {\n      switch (kind) {\n        case \"loop\":\n          return allowLoop;\n\n        case \"switch\":\n          return allowSwitch;\n\n        default:\n          return false;\n      }\n    }\n    /**\n     * Checks whether a given name is a label of a loop or not.\n     * @param {string} label A name of a label to check.\n     * @returns {boolean} `true` if the name is a label of a loop.\n     */\n\n\n    function getKind(label) {\n      let info = scopeInfo;\n\n      while (info) {\n        if (info.label === label) {\n          return info.kind;\n        }\n\n        info = info.upper;\n      }\n      /* istanbul ignore next: syntax error */\n\n\n      return \"other\";\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      LabeledStatement(node) {\n        scopeInfo = {\n          label: node.label.name,\n          kind: getBodyKind(node.body),\n          upper: scopeInfo\n        };\n      },\n\n      \"LabeledStatement:exit\"(node) {\n        if (!isAllowed(scopeInfo.kind)) {\n          context.report({\n            node,\n            message: \"Unexpected labeled statement.\"\n          });\n        }\n\n        scopeInfo = scopeInfo.upper;\n      },\n\n      BreakStatement(node) {\n        if (node.label && !isAllowed(getKind(node.label.name))) {\n          context.report({\n            node,\n            message: \"Unexpected label in break statement.\"\n          });\n        }\n      },\n\n      ContinueStatement(node) {\n        if (node.label && !isAllowed(getKind(node.label.name))) {\n          context.report({\n            node,\n            message: \"Unexpected label in continue statement.\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-labels.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","allowLoop","default","allowSwitch","additionalProperties","create","context","options","scopeInfo","getBodyKind","node","isLoop","isAllowed","kind","getKind","label","info","upper","LabeledStatement","name","body","report","message","BreakStatement","ContinueStatement"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Disallow Labeled Statements\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow labeled statements\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-labels\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allowLoop: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowSwitch: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create(context) {\n        const options = context.options[0];\n        const allowLoop = options && options.allowLoop;\n        const allowSwitch = options && options.allowSwitch;\n        let scopeInfo = null;\n\n        /**\n         * Gets the kind of a given node.\n         * @param {ASTNode} node A node to get.\n         * @returns {string} The kind of the node.\n         */\n        function getBodyKind(node) {\n            if (astUtils.isLoop(node)) {\n                return \"loop\";\n            }\n            if (node.type === \"SwitchStatement\") {\n                return \"switch\";\n            }\n            return \"other\";\n        }\n\n        /**\n         * Checks whether the label of a given kind is allowed or not.\n         * @param {string} kind A kind to check.\n         * @returns {boolean} `true` if the kind is allowed.\n         */\n        function isAllowed(kind) {\n            switch (kind) {\n                case \"loop\": return allowLoop;\n                case \"switch\": return allowSwitch;\n                default: return false;\n            }\n        }\n\n        /**\n         * Checks whether a given name is a label of a loop or not.\n         * @param {string} label A name of a label to check.\n         * @returns {boolean} `true` if the name is a label of a loop.\n         */\n        function getKind(label) {\n            let info = scopeInfo;\n\n            while (info) {\n                if (info.label === label) {\n                    return info.kind;\n                }\n                info = info.upper;\n            }\n\n            /* istanbul ignore next: syntax error */\n            return \"other\";\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            LabeledStatement(node) {\n                scopeInfo = {\n                    label: node.label.name,\n                    kind: getBodyKind(node.body),\n                    upper: scopeInfo\n                };\n            },\n\n            \"LabeledStatement:exit\"(node) {\n                if (!isAllowed(scopeInfo.kind)) {\n                    context.report({\n                        node,\n                        message: \"Unexpected labeled statement.\"\n                    });\n                }\n\n                scopeInfo = scopeInfo.upper;\n            },\n\n            BreakStatement(node) {\n                if (node.label && !isAllowed(getKind(node.label.name))) {\n                    context.report({\n                        node,\n                        message: \"Unexpected label in break statement.\"\n                    });\n                }\n            },\n\n            ContinueStatement(node) {\n                if (node.label && !isAllowed(getKind(node.label.name))) {\n                    context.report({\n                        node,\n                        message: \"Unexpected label in continue statement.\"\n                    });\n                }\n            }\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}