{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _browserslist = require('browserslist');\n\nvar _browserslist2 = _interopRequireDefault(_browserslist);\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _vendors = require('vendors');\n\nvar _vendors2 = _interopRequireDefault(_vendors);\n\nvar _cssnanoUtilSameParent = require('cssnano-util-same-parent');\n\nvar _cssnanoUtilSameParent2 = _interopRequireDefault(_cssnanoUtilSameParent);\n\nvar _ensureCompatibility = require('./lib/ensureCompatibility');\n\nvar _ensureCompatibility2 = _interopRequireDefault(_ensureCompatibility);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst prefixes = _vendors2.default.map(v => `-${v}-`);\n\nfunction intersect(a, b, not) {\n  return a.filter(c => {\n    const index = ~b.indexOf(c);\n    return not ? !index : index;\n  });\n} // Internet Explorer use :-ms-input-placeholder.\n// Microsoft Edge use ::-ms-input-placeholder.\n\n\nconst findMsInputPlaceholder = selector => ~selector.search(/-ms-input-placeholder/i);\n\nconst different = (a, b) => intersect(a, b, true).concat(intersect(b, a, true));\n\nconst filterPrefixes = selector => intersect(prefixes, selector);\n\nfunction sameVendor(selectorsA, selectorsB) {\n  let same = selectors => selectors.map(filterPrefixes).join();\n\n  let findMsVendor = selectors => selectors.find(findMsInputPlaceholder);\n\n  return same(selectorsA) === same(selectorsB) && !(findMsVendor(selectorsA) && findMsVendor(selectorsB));\n}\n\nconst noVendor = selector => !filterPrefixes(selector).length;\n\nfunction canMerge(ruleA, ruleB, browsers, compatibilityCache) {\n  const a = ruleA.selectors;\n  const b = ruleB.selectors;\n  const selectors = a.concat(b);\n\n  if (!(0, _ensureCompatibility2.default)(selectors, browsers, compatibilityCache)) {\n    return false;\n  }\n\n  const parent = (0, _cssnanoUtilSameParent2.default)(ruleA, ruleB);\n  const {\n    name\n  } = ruleA.parent;\n\n  if (parent && name && ~name.indexOf('keyframes')) {\n    return false;\n  }\n\n  return parent && (selectors.every(noVendor) || sameVendor(a, b));\n}\n\nconst getDecls = rule => rule.nodes && rule.nodes.map(String);\n\nconst joinSelectors = (...rules) => rules.map(s => s.selector).join();\n\nfunction ruleLength(...rules) {\n  return rules.map(r => r.nodes.length ? String(r) : '').join('').length;\n}\n\nfunction splitProp(prop) {\n  const parts = prop.split('-');\n  let base, rest; // Treat vendor prefixed properties as if they were unprefixed;\n  // moving them when combined with non-prefixed properties can\n  // cause issues. e.g. moving -webkit-background-clip when there\n  // is a background shorthand definition.\n\n  if (prop[0] === '-') {\n    base = parts[2];\n    rest = parts.slice(3);\n  } else {\n    base = parts[0];\n    rest = parts.slice(1);\n  }\n\n  return [base, rest];\n}\n\nfunction isConflictingProp(propA, propB) {\n  if (propA === propB) {\n    return true;\n  }\n\n  const a = splitProp(propA);\n  const b = splitProp(propB);\n  return a[0] === b[0] && a[1].length !== b[1].length;\n}\n\nfunction hasConflicts(declProp, notMoved) {\n  return notMoved.some(prop => isConflictingProp(prop, declProp));\n}\n\nfunction partialMerge(first, second) {\n  let intersection = intersect(getDecls(first), getDecls(second));\n\n  if (!intersection.length) {\n    return second;\n  }\n\n  let nextRule = second.next();\n\n  if (nextRule && nextRule.type === 'rule' && canMerge(second, nextRule)) {\n    let nextIntersection = intersect(getDecls(second), getDecls(nextRule));\n\n    if (nextIntersection.length > intersection.length) {\n      first = second;\n      second = nextRule;\n      intersection = nextIntersection;\n    }\n  }\n\n  const recievingBlock = second.clone();\n  recievingBlock.selector = joinSelectors(first, second);\n  recievingBlock.nodes = [];\n  const difference = different(getDecls(first), getDecls(second));\n\n  const filterConflicts = (decls, intersectn) => {\n    let willNotMove = [];\n    return decls.reduce((willMove, decl) => {\n      let intersects = ~intersectn.indexOf(decl);\n      let prop = decl.split(':')[0];\n      let base = prop.split('-')[0];\n      let canMove = difference.every(d => d.split(':')[0] !== base);\n\n      if (intersects && canMove && !hasConflicts(prop, willNotMove)) {\n        willMove.push(decl);\n      } else {\n        willNotMove.push(prop);\n      }\n\n      return willMove;\n    }, []);\n  };\n\n  const containsAllDeclaration = intersectionList => {\n    return intersectionList.some(declaration => {\n      return declaration.split(':')[0].toLowerCase() === 'all';\n    });\n  };\n\n  intersection = filterConflicts(getDecls(first).reverse(), intersection);\n  intersection = filterConflicts(getDecls(second), intersection); // Rules with \"all\" declarations must be on top\n\n  if (containsAllDeclaration(intersection)) {\n    second.parent.insertBefore(first, recievingBlock);\n  } else {\n    second.parent.insertBefore(second, recievingBlock);\n  }\n\n  const firstClone = first.clone();\n  const secondClone = second.clone();\n\n  const moveDecl = callback => {\n    return decl => {\n      if (~intersection.indexOf(String(decl))) {\n        callback.call(this, decl);\n      }\n    };\n  };\n\n  firstClone.walkDecls(moveDecl(decl => {\n    decl.remove();\n    recievingBlock.append(decl);\n  }));\n  secondClone.walkDecls(moveDecl(decl => decl.remove()));\n  const merged = ruleLength(firstClone, recievingBlock, secondClone);\n  const original = ruleLength(first, second);\n\n  if (merged < original) {\n    first.replaceWith(firstClone);\n    second.replaceWith(secondClone);\n    [firstClone, recievingBlock, secondClone].forEach(r => {\n      if (!r.nodes.length) {\n        r.remove();\n      }\n    });\n\n    if (!secondClone.parent) {\n      return recievingBlock;\n    }\n\n    return secondClone;\n  } else {\n    recievingBlock.remove();\n    return second;\n  }\n}\n\nfunction selectorMerger(browsers, compatibilityCache) {\n  let cache = null;\n  return function (rule) {\n    // Prime the cache with the first rule, or alternately ensure that it is\n    // safe to merge both declarations before continuing\n    if (!cache || !canMerge(rule, cache, browsers, compatibilityCache)) {\n      cache = rule;\n      return;\n    } // Ensure that we don't deduplicate the same rule; this is sometimes\n    // caused by a partial merge\n\n\n    if (cache === rule) {\n      cache = rule;\n      return;\n    } // Merge when declarations are exactly equal\n    // e.g. h1 { color: red } h2 { color: red }\n\n\n    if (getDecls(rule).join(';') === getDecls(cache).join(';')) {\n      rule.selector = joinSelectors(cache, rule);\n      cache.remove();\n      cache = rule;\n      return;\n    } // Merge when both selectors are exactly equal\n    // e.g. a { color: blue } a { font-weight: bold }\n\n\n    if (cache.selector === rule.selector) {\n      const cached = getDecls(cache);\n      rule.walk(decl => {\n        if (~cached.indexOf(String(decl))) {\n          return decl.remove();\n        }\n\n        cache.append(decl);\n      });\n      rule.remove();\n      return;\n    } // Partial merge: check if the rule contains a subset of the last; if\n    // so create a joined selector with the subset, if smaller.\n\n\n    cache = partialMerge(cache, rule);\n  };\n}\n\nexports.default = _postcss2.default.plugin('postcss-merge-rules', () => {\n  return (css, result) => {\n    const resultOpts = result.opts || {};\n    const browsers = (0, _browserslist2.default)(null, {\n      stats: resultOpts.stats,\n      path: __dirname,\n      env: resultOpts.env\n    });\n    const compatibilityCache = {};\n    css.walkRules(selectorMerger(browsers, compatibilityCache));\n  };\n});\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-merge-rules/dist/index.js"],"names":["Object","defineProperty","exports","value","_browserslist","require","_browserslist2","_interopRequireDefault","_postcss","_postcss2","_vendors","_vendors2","_cssnanoUtilSameParent","_cssnanoUtilSameParent2","_ensureCompatibility","_ensureCompatibility2","obj","__esModule","default","prefixes","map","v","intersect","a","b","not","filter","c","index","indexOf","findMsInputPlaceholder","selector","search","different","concat","filterPrefixes","sameVendor","selectorsA","selectorsB","same","selectors","join","findMsVendor","find","noVendor","length","canMerge","ruleA","ruleB","browsers","compatibilityCache","parent","name","every","getDecls","rule","nodes","String","joinSelectors","rules","s","ruleLength","r","splitProp","prop","parts","split","base","rest","slice","isConflictingProp","propA","propB","hasConflicts","declProp","notMoved","some","partialMerge","first","second","intersection","nextRule","next","type","nextIntersection","recievingBlock","clone","difference","filterConflicts","decls","intersectn","willNotMove","reduce","willMove","decl","intersects","canMove","d","push","containsAllDeclaration","intersectionList","declaration","toLowerCase","reverse","insertBefore","firstClone","secondClone","moveDecl","callback","call","walkDecls","remove","append","merged","original","replaceWith","forEach","selectorMerger","cache","cached","walk","plugin","css","result","resultOpts","opts","stats","path","__dirname","env","walkRules","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,EAAAA,KAAK,EAAE;AADkC,CAA7C;;AAIA,IAAIC,aAAa,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AAEA,IAAIC,cAAc,GAAGC,sBAAsB,CAACH,aAAD,CAA3C;;AAEA,IAAII,QAAQ,GAAGH,OAAO,CAAC,SAAD,CAAtB;;AAEA,IAAII,SAAS,GAAGF,sBAAsB,CAACC,QAAD,CAAtC;;AAEA,IAAIE,QAAQ,GAAGL,OAAO,CAAC,SAAD,CAAtB;;AAEA,IAAIM,SAAS,GAAGJ,sBAAsB,CAACG,QAAD,CAAtC;;AAEA,IAAIE,sBAAsB,GAAGP,OAAO,CAAC,0BAAD,CAApC;;AAEA,IAAIQ,uBAAuB,GAAGN,sBAAsB,CAACK,sBAAD,CAApD;;AAEA,IAAIE,oBAAoB,GAAGT,OAAO,CAAC,2BAAD,CAAlC;;AAEA,IAAIU,qBAAqB,GAAGR,sBAAsB,CAACO,oBAAD,CAAlD;;AAEA,SAASP,sBAAT,CAAgCS,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,MAAMG,QAAQ,GAAGR,SAAS,CAACO,OAAV,CAAkBE,GAAlB,CAAsBC,CAAC,IAAK,IAAGA,CAAE,GAAjC,CAAjB;;AAEA,SAASC,SAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyBC,GAAzB,EAA8B;AAC1B,SAAOF,CAAC,CAACG,MAAF,CAASC,CAAC,IAAI;AACjB,UAAMC,KAAK,GAAG,CAACJ,CAAC,CAACK,OAAF,CAAUF,CAAV,CAAf;AACA,WAAOF,GAAG,GAAG,CAACG,KAAJ,GAAYA,KAAtB;AACH,GAHM,CAAP;AAIH,C,CAED;AACA;;;AACA,MAAME,sBAAsB,GAAGC,QAAQ,IAAI,CAACA,QAAQ,CAACC,MAAT,CAAgB,wBAAhB,CAA5C;;AACA,MAAMC,SAAS,GAAG,CAACV,CAAD,EAAIC,CAAJ,KAAUF,SAAS,CAACC,CAAD,EAAIC,CAAJ,EAAO,IAAP,CAAT,CAAsBU,MAAtB,CAA6BZ,SAAS,CAACE,CAAD,EAAID,CAAJ,EAAO,IAAP,CAAtC,CAA5B;;AACA,MAAMY,cAAc,GAAGJ,QAAQ,IAAIT,SAAS,CAACH,QAAD,EAAWY,QAAX,CAA5C;;AAEA,SAASK,UAAT,CAAoBC,UAApB,EAAgCC,UAAhC,EAA4C;AACxC,MAAIC,IAAI,GAAGC,SAAS,IAAIA,SAAS,CAACpB,GAAV,CAAce,cAAd,EAA8BM,IAA9B,EAAxB;;AACA,MAAIC,YAAY,GAAGF,SAAS,IAAIA,SAAS,CAACG,IAAV,CAAeb,sBAAf,CAAhC;;AACA,SAAOS,IAAI,CAACF,UAAD,CAAJ,KAAqBE,IAAI,CAACD,UAAD,CAAzB,IAAyC,EAAEI,YAAY,CAACL,UAAD,CAAZ,IAA4BK,YAAY,CAACJ,UAAD,CAA1C,CAAhD;AACH;;AAED,MAAMM,QAAQ,GAAGb,QAAQ,IAAI,CAACI,cAAc,CAACJ,QAAD,CAAd,CAAyBc,MAAvD;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCC,QAAhC,EAA0CC,kBAA1C,EAA8D;AAC1D,QAAM3B,CAAC,GAAGwB,KAAK,CAACP,SAAhB;AACA,QAAMhB,CAAC,GAAGwB,KAAK,CAACR,SAAhB;AAEA,QAAMA,SAAS,GAAGjB,CAAC,CAACW,MAAF,CAASV,CAAT,CAAlB;;AAEA,MAAI,CAAC,CAAC,GAAGT,qBAAqB,CAACG,OAA1B,EAAmCsB,SAAnC,EAA8CS,QAA9C,EAAwDC,kBAAxD,CAAL,EAAkF;AAC9E,WAAO,KAAP;AACH;;AAED,QAAMC,MAAM,GAAG,CAAC,GAAGtC,uBAAuB,CAACK,OAA5B,EAAqC6B,KAArC,EAA4CC,KAA5C,CAAf;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAWL,KAAK,CAACI,MAAvB;;AACA,MAAIA,MAAM,IAAIC,IAAV,IAAkB,CAACA,IAAI,CAACvB,OAAL,CAAa,WAAb,CAAvB,EAAkD;AAC9C,WAAO,KAAP;AACH;;AACD,SAAOsB,MAAM,KAAKX,SAAS,CAACa,KAAV,CAAgBT,QAAhB,KAA6BR,UAAU,CAACb,CAAD,EAAIC,CAAJ,CAA5C,CAAb;AACH;;AAED,MAAM8B,QAAQ,GAAGC,IAAI,IAAIA,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACC,KAAL,CAAWpC,GAAX,CAAeqC,MAAf,CAAvC;;AACA,MAAMC,aAAa,GAAG,CAAC,GAAGC,KAAJ,KAAcA,KAAK,CAACvC,GAAN,CAAUwC,CAAC,IAAIA,CAAC,CAAC7B,QAAjB,EAA2BU,IAA3B,EAApC;;AAEA,SAASoB,UAAT,CAAoB,GAAGF,KAAvB,EAA8B;AAC1B,SAAOA,KAAK,CAACvC,GAAN,CAAU0C,CAAC,IAAIA,CAAC,CAACN,KAAF,CAAQX,MAAR,GAAiBY,MAAM,CAACK,CAAD,CAAvB,GAA6B,EAA5C,EAAgDrB,IAAhD,CAAqD,EAArD,EAAyDI,MAAhE;AACH;;AAED,SAASkB,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,QAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAd;AACA,MAAIC,IAAJ,EAAUC,IAAV,CAFqB,CAGrB;AACA;AACA;AACA;;AACA,MAAIJ,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACjBG,IAAAA,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAZ;AACAG,IAAAA,IAAI,GAAGH,KAAK,CAACI,KAAN,CAAY,CAAZ,CAAP;AACH,GAHD,MAGO;AACHF,IAAAA,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAZ;AACAG,IAAAA,IAAI,GAAGH,KAAK,CAACI,KAAN,CAAY,CAAZ,CAAP;AACH;;AACD,SAAO,CAACF,IAAD,EAAOC,IAAP,CAAP;AACH;;AAED,SAASE,iBAAT,CAA2BC,KAA3B,EAAkCC,KAAlC,EAAyC;AACrC,MAAID,KAAK,KAAKC,KAAd,EAAqB;AACjB,WAAO,IAAP;AACH;;AACD,QAAMjD,CAAC,GAAGwC,SAAS,CAACQ,KAAD,CAAnB;AACA,QAAM/C,CAAC,GAAGuC,SAAS,CAACS,KAAD,CAAnB;AACA,SAAOjD,CAAC,CAAC,CAAD,CAAD,KAASC,CAAC,CAAC,CAAD,CAAV,IAAiBD,CAAC,CAAC,CAAD,CAAD,CAAKsB,MAAL,KAAgBrB,CAAC,CAAC,CAAD,CAAD,CAAKqB,MAA7C;AACH;;AAED,SAAS4B,YAAT,CAAsBC,QAAtB,EAAgCC,QAAhC,EAA0C;AACtC,SAAOA,QAAQ,CAACC,IAAT,CAAcZ,IAAI,IAAIM,iBAAiB,CAACN,IAAD,EAAOU,QAAP,CAAvC,CAAP;AACH;;AAED,SAASG,YAAT,CAAsBC,KAAtB,EAA6BC,MAA7B,EAAqC;AACjC,MAAIC,YAAY,GAAG1D,SAAS,CAACgC,QAAQ,CAACwB,KAAD,CAAT,EAAkBxB,QAAQ,CAACyB,MAAD,CAA1B,CAA5B;;AACA,MAAI,CAACC,YAAY,CAACnC,MAAlB,EAA0B;AACtB,WAAOkC,MAAP;AACH;;AACD,MAAIE,QAAQ,GAAGF,MAAM,CAACG,IAAP,EAAf;;AACA,MAAID,QAAQ,IAAIA,QAAQ,CAACE,IAAT,KAAkB,MAA9B,IAAwCrC,QAAQ,CAACiC,MAAD,EAASE,QAAT,CAApD,EAAwE;AACpE,QAAIG,gBAAgB,GAAG9D,SAAS,CAACgC,QAAQ,CAACyB,MAAD,CAAT,EAAmBzB,QAAQ,CAAC2B,QAAD,CAA3B,CAAhC;;AACA,QAAIG,gBAAgB,CAACvC,MAAjB,GAA0BmC,YAAY,CAACnC,MAA3C,EAAmD;AAC/CiC,MAAAA,KAAK,GAAGC,MAAR;AAAeA,MAAAA,MAAM,GAAGE,QAAT;AAAkBD,MAAAA,YAAY,GAAGI,gBAAf;AACpC;AACJ;;AACD,QAAMC,cAAc,GAAGN,MAAM,CAACO,KAAP,EAAvB;AACAD,EAAAA,cAAc,CAACtD,QAAf,GAA0B2B,aAAa,CAACoB,KAAD,EAAQC,MAAR,CAAvC;AACAM,EAAAA,cAAc,CAAC7B,KAAf,GAAuB,EAAvB;AACA,QAAM+B,UAAU,GAAGtD,SAAS,CAACqB,QAAQ,CAACwB,KAAD,CAAT,EAAkBxB,QAAQ,CAACyB,MAAD,CAA1B,CAA5B;;AACA,QAAMS,eAAe,GAAG,CAACC,KAAD,EAAQC,UAAR,KAAuB;AAC3C,QAAIC,WAAW,GAAG,EAAlB;AACA,WAAOF,KAAK,CAACG,MAAN,CAAa,CAACC,QAAD,EAAWC,IAAX,KAAoB;AACpC,UAAIC,UAAU,GAAG,CAACL,UAAU,CAAC7D,OAAX,CAAmBiE,IAAnB,CAAlB;AACA,UAAI9B,IAAI,GAAG8B,IAAI,CAAC5B,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAX;AACA,UAAIC,IAAI,GAAGH,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAX;AACA,UAAI8B,OAAO,GAAGT,UAAU,CAAClC,KAAX,CAAiB4C,CAAC,IAAIA,CAAC,CAAC/B,KAAF,CAAQ,GAAR,EAAa,CAAb,MAAoBC,IAA1C,CAAd;;AACA,UAAI4B,UAAU,IAAIC,OAAd,IAAyB,CAACvB,YAAY,CAACT,IAAD,EAAO2B,WAAP,CAA1C,EAA+D;AAC3DE,QAAAA,QAAQ,CAACK,IAAT,CAAcJ,IAAd;AACH,OAFD,MAEO;AACHH,QAAAA,WAAW,CAACO,IAAZ,CAAiBlC,IAAjB;AACH;;AACD,aAAO6B,QAAP;AACH,KAXM,EAWJ,EAXI,CAAP;AAYH,GAdD;;AAeA,QAAMM,sBAAsB,GAAGC,gBAAgB,IAAI;AAC/C,WAAOA,gBAAgB,CAACxB,IAAjB,CAAsByB,WAAW,IAAI;AACxC,aAAOA,WAAW,CAACnC,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,EAA0BoC,WAA1B,OAA4C,KAAnD;AACH,KAFM,CAAP;AAGH,GAJD;;AAKAtB,EAAAA,YAAY,GAAGQ,eAAe,CAAClC,QAAQ,CAACwB,KAAD,CAAR,CAAgByB,OAAhB,EAAD,EAA4BvB,YAA5B,CAA9B;AACAA,EAAAA,YAAY,GAAGQ,eAAe,CAAClC,QAAQ,CAACyB,MAAD,CAAT,EAAmBC,YAAnB,CAA9B,CArCiC,CAuCjC;;AACA,MAAImB,sBAAsB,CAACnB,YAAD,CAA1B,EAA0C;AACtCD,IAAAA,MAAM,CAAC5B,MAAP,CAAcqD,YAAd,CAA2B1B,KAA3B,EAAkCO,cAAlC;AACH,GAFD,MAEO;AACHN,IAAAA,MAAM,CAAC5B,MAAP,CAAcqD,YAAd,CAA2BzB,MAA3B,EAAmCM,cAAnC;AACH;;AAED,QAAMoB,UAAU,GAAG3B,KAAK,CAACQ,KAAN,EAAnB;AACA,QAAMoB,WAAW,GAAG3B,MAAM,CAACO,KAAP,EAApB;;AACA,QAAMqB,QAAQ,GAAGC,QAAQ,IAAI;AACzB,WAAOd,IAAI,IAAI;AACX,UAAI,CAACd,YAAY,CAACnD,OAAb,CAAqB4B,MAAM,CAACqC,IAAD,CAA3B,CAAL,EAAyC;AACrCc,QAAAA,QAAQ,CAACC,IAAT,CAAc,IAAd,EAAoBf,IAApB;AACH;AACJ,KAJD;AAKH,GAND;;AAOAW,EAAAA,UAAU,CAACK,SAAX,CAAqBH,QAAQ,CAACb,IAAI,IAAI;AAClCA,IAAAA,IAAI,CAACiB,MAAL;AACA1B,IAAAA,cAAc,CAAC2B,MAAf,CAAsBlB,IAAtB;AACH,GAH4B,CAA7B;AAIAY,EAAAA,WAAW,CAACI,SAAZ,CAAsBH,QAAQ,CAACb,IAAI,IAAIA,IAAI,CAACiB,MAAL,EAAT,CAA9B;AACA,QAAME,MAAM,GAAGpD,UAAU,CAAC4C,UAAD,EAAapB,cAAb,EAA6BqB,WAA7B,CAAzB;AACA,QAAMQ,QAAQ,GAAGrD,UAAU,CAACiB,KAAD,EAAQC,MAAR,CAA3B;;AACA,MAAIkC,MAAM,GAAGC,QAAb,EAAuB;AACnBpC,IAAAA,KAAK,CAACqC,WAAN,CAAkBV,UAAlB;AACA1B,IAAAA,MAAM,CAACoC,WAAP,CAAmBT,WAAnB;AACA,KAACD,UAAD,EAAapB,cAAb,EAA6BqB,WAA7B,EAA0CU,OAA1C,CAAkDtD,CAAC,IAAI;AACnD,UAAI,CAACA,CAAC,CAACN,KAAF,CAAQX,MAAb,EAAqB;AACjBiB,QAAAA,CAAC,CAACiD,MAAF;AACH;AACJ,KAJD;;AAKA,QAAI,CAACL,WAAW,CAACvD,MAAjB,EAAyB;AACrB,aAAOkC,cAAP;AACH;;AACD,WAAOqB,WAAP;AACH,GAZD,MAYO;AACHrB,IAAAA,cAAc,CAAC0B,MAAf;AACA,WAAOhC,MAAP;AACH;AACJ;;AAED,SAASsC,cAAT,CAAwBpE,QAAxB,EAAkCC,kBAAlC,EAAsD;AAClD,MAAIoE,KAAK,GAAG,IAAZ;AACA,SAAO,UAAU/D,IAAV,EAAgB;AACnB;AACA;AACA,QAAI,CAAC+D,KAAD,IAAU,CAACxE,QAAQ,CAACS,IAAD,EAAO+D,KAAP,EAAcrE,QAAd,EAAwBC,kBAAxB,CAAvB,EAAoE;AAChEoE,MAAAA,KAAK,GAAG/D,IAAR;AACA;AACH,KANkB,CAOnB;AACA;;;AACA,QAAI+D,KAAK,KAAK/D,IAAd,EAAoB;AAChB+D,MAAAA,KAAK,GAAG/D,IAAR;AACA;AACH,KAZkB,CAanB;AACA;;;AACA,QAAID,QAAQ,CAACC,IAAD,CAAR,CAAed,IAAf,CAAoB,GAApB,MAA6Ba,QAAQ,CAACgE,KAAD,CAAR,CAAgB7E,IAAhB,CAAqB,GAArB,CAAjC,EAA4D;AACxDc,MAAAA,IAAI,CAACxB,QAAL,GAAgB2B,aAAa,CAAC4D,KAAD,EAAQ/D,IAAR,CAA7B;AACA+D,MAAAA,KAAK,CAACP,MAAN;AACAO,MAAAA,KAAK,GAAG/D,IAAR;AACA;AACH,KApBkB,CAqBnB;AACA;;;AACA,QAAI+D,KAAK,CAACvF,QAAN,KAAmBwB,IAAI,CAACxB,QAA5B,EAAsC;AAClC,YAAMwF,MAAM,GAAGjE,QAAQ,CAACgE,KAAD,CAAvB;AACA/D,MAAAA,IAAI,CAACiE,IAAL,CAAU1B,IAAI,IAAI;AACd,YAAI,CAACyB,MAAM,CAAC1F,OAAP,CAAe4B,MAAM,CAACqC,IAAD,CAArB,CAAL,EAAmC;AAC/B,iBAAOA,IAAI,CAACiB,MAAL,EAAP;AACH;;AACDO,QAAAA,KAAK,CAACN,MAAN,CAAalB,IAAb;AACH,OALD;AAMAvC,MAAAA,IAAI,CAACwD,MAAL;AACA;AACH,KAjCkB,CAkCnB;AACA;;;AACAO,IAAAA,KAAK,GAAGzC,YAAY,CAACyC,KAAD,EAAQ/D,IAAR,CAApB;AACH,GArCD;AAsCH;;AAEDrD,OAAO,CAACgB,OAAR,GAAkBT,SAAS,CAACS,OAAV,CAAkBuG,MAAlB,CAAyB,qBAAzB,EAAgD,MAAM;AACpE,SAAO,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACpB,UAAMC,UAAU,GAAGD,MAAM,CAACE,IAAP,IAAe,EAAlC;AACA,UAAM5E,QAAQ,GAAG,CAAC,GAAG3C,cAAc,CAACY,OAAnB,EAA4B,IAA5B,EAAkC;AAC/C4G,MAAAA,KAAK,EAAEF,UAAU,CAACE,KAD6B;AAE/CC,MAAAA,IAAI,EAAEC,SAFyC;AAG/CC,MAAAA,GAAG,EAAEL,UAAU,CAACK;AAH+B,KAAlC,CAAjB;AAKA,UAAM/E,kBAAkB,GAAG,EAA3B;AACAwE,IAAAA,GAAG,CAACQ,SAAJ,CAAcb,cAAc,CAACpE,QAAD,EAAWC,kBAAX,CAA5B;AACH,GATD;AAUH,CAXiB,CAAlB;AAYAiF,MAAM,CAACjI,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _browserslist = require('browserslist');\n\nvar _browserslist2 = _interopRequireDefault(_browserslist);\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _vendors = require('vendors');\n\nvar _vendors2 = _interopRequireDefault(_vendors);\n\nvar _cssnanoUtilSameParent = require('cssnano-util-same-parent');\n\nvar _cssnanoUtilSameParent2 = _interopRequireDefault(_cssnanoUtilSameParent);\n\nvar _ensureCompatibility = require('./lib/ensureCompatibility');\n\nvar _ensureCompatibility2 = _interopRequireDefault(_ensureCompatibility);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst prefixes = _vendors2.default.map(v => `-${v}-`);\n\nfunction intersect(a, b, not) {\n    return a.filter(c => {\n        const index = ~b.indexOf(c);\n        return not ? !index : index;\n    });\n}\n\n// Internet Explorer use :-ms-input-placeholder.\n// Microsoft Edge use ::-ms-input-placeholder.\nconst findMsInputPlaceholder = selector => ~selector.search(/-ms-input-placeholder/i);\nconst different = (a, b) => intersect(a, b, true).concat(intersect(b, a, true));\nconst filterPrefixes = selector => intersect(prefixes, selector);\n\nfunction sameVendor(selectorsA, selectorsB) {\n    let same = selectors => selectors.map(filterPrefixes).join();\n    let findMsVendor = selectors => selectors.find(findMsInputPlaceholder);\n    return same(selectorsA) === same(selectorsB) && !(findMsVendor(selectorsA) && findMsVendor(selectorsB));\n}\n\nconst noVendor = selector => !filterPrefixes(selector).length;\n\nfunction canMerge(ruleA, ruleB, browsers, compatibilityCache) {\n    const a = ruleA.selectors;\n    const b = ruleB.selectors;\n\n    const selectors = a.concat(b);\n\n    if (!(0, _ensureCompatibility2.default)(selectors, browsers, compatibilityCache)) {\n        return false;\n    }\n\n    const parent = (0, _cssnanoUtilSameParent2.default)(ruleA, ruleB);\n    const { name } = ruleA.parent;\n    if (parent && name && ~name.indexOf('keyframes')) {\n        return false;\n    }\n    return parent && (selectors.every(noVendor) || sameVendor(a, b));\n}\n\nconst getDecls = rule => rule.nodes && rule.nodes.map(String);\nconst joinSelectors = (...rules) => rules.map(s => s.selector).join();\n\nfunction ruleLength(...rules) {\n    return rules.map(r => r.nodes.length ? String(r) : '').join('').length;\n}\n\nfunction splitProp(prop) {\n    const parts = prop.split('-');\n    let base, rest;\n    // Treat vendor prefixed properties as if they were unprefixed;\n    // moving them when combined with non-prefixed properties can\n    // cause issues. e.g. moving -webkit-background-clip when there\n    // is a background shorthand definition.\n    if (prop[0] === '-') {\n        base = parts[2];\n        rest = parts.slice(3);\n    } else {\n        base = parts[0];\n        rest = parts.slice(1);\n    }\n    return [base, rest];\n}\n\nfunction isConflictingProp(propA, propB) {\n    if (propA === propB) {\n        return true;\n    }\n    const a = splitProp(propA);\n    const b = splitProp(propB);\n    return a[0] === b[0] && a[1].length !== b[1].length;\n}\n\nfunction hasConflicts(declProp, notMoved) {\n    return notMoved.some(prop => isConflictingProp(prop, declProp));\n}\n\nfunction partialMerge(first, second) {\n    let intersection = intersect(getDecls(first), getDecls(second));\n    if (!intersection.length) {\n        return second;\n    }\n    let nextRule = second.next();\n    if (nextRule && nextRule.type === 'rule' && canMerge(second, nextRule)) {\n        let nextIntersection = intersect(getDecls(second), getDecls(nextRule));\n        if (nextIntersection.length > intersection.length) {\n            first = second;second = nextRule;intersection = nextIntersection;\n        }\n    }\n    const recievingBlock = second.clone();\n    recievingBlock.selector = joinSelectors(first, second);\n    recievingBlock.nodes = [];\n    const difference = different(getDecls(first), getDecls(second));\n    const filterConflicts = (decls, intersectn) => {\n        let willNotMove = [];\n        return decls.reduce((willMove, decl) => {\n            let intersects = ~intersectn.indexOf(decl);\n            let prop = decl.split(':')[0];\n            let base = prop.split('-')[0];\n            let canMove = difference.every(d => d.split(':')[0] !== base);\n            if (intersects && canMove && !hasConflicts(prop, willNotMove)) {\n                willMove.push(decl);\n            } else {\n                willNotMove.push(prop);\n            }\n            return willMove;\n        }, []);\n    };\n    const containsAllDeclaration = intersectionList => {\n        return intersectionList.some(declaration => {\n            return declaration.split(':')[0].toLowerCase() === 'all';\n        });\n    };\n    intersection = filterConflicts(getDecls(first).reverse(), intersection);\n    intersection = filterConflicts(getDecls(second), intersection);\n\n    // Rules with \"all\" declarations must be on top\n    if (containsAllDeclaration(intersection)) {\n        second.parent.insertBefore(first, recievingBlock);\n    } else {\n        second.parent.insertBefore(second, recievingBlock);\n    }\n\n    const firstClone = first.clone();\n    const secondClone = second.clone();\n    const moveDecl = callback => {\n        return decl => {\n            if (~intersection.indexOf(String(decl))) {\n                callback.call(this, decl);\n            }\n        };\n    };\n    firstClone.walkDecls(moveDecl(decl => {\n        decl.remove();\n        recievingBlock.append(decl);\n    }));\n    secondClone.walkDecls(moveDecl(decl => decl.remove()));\n    const merged = ruleLength(firstClone, recievingBlock, secondClone);\n    const original = ruleLength(first, second);\n    if (merged < original) {\n        first.replaceWith(firstClone);\n        second.replaceWith(secondClone);\n        [firstClone, recievingBlock, secondClone].forEach(r => {\n            if (!r.nodes.length) {\n                r.remove();\n            }\n        });\n        if (!secondClone.parent) {\n            return recievingBlock;\n        }\n        return secondClone;\n    } else {\n        recievingBlock.remove();\n        return second;\n    }\n}\n\nfunction selectorMerger(browsers, compatibilityCache) {\n    let cache = null;\n    return function (rule) {\n        // Prime the cache with the first rule, or alternately ensure that it is\n        // safe to merge both declarations before continuing\n        if (!cache || !canMerge(rule, cache, browsers, compatibilityCache)) {\n            cache = rule;\n            return;\n        }\n        // Ensure that we don't deduplicate the same rule; this is sometimes\n        // caused by a partial merge\n        if (cache === rule) {\n            cache = rule;\n            return;\n        }\n        // Merge when declarations are exactly equal\n        // e.g. h1 { color: red } h2 { color: red }\n        if (getDecls(rule).join(';') === getDecls(cache).join(';')) {\n            rule.selector = joinSelectors(cache, rule);\n            cache.remove();\n            cache = rule;\n            return;\n        }\n        // Merge when both selectors are exactly equal\n        // e.g. a { color: blue } a { font-weight: bold }\n        if (cache.selector === rule.selector) {\n            const cached = getDecls(cache);\n            rule.walk(decl => {\n                if (~cached.indexOf(String(decl))) {\n                    return decl.remove();\n                }\n                cache.append(decl);\n            });\n            rule.remove();\n            return;\n        }\n        // Partial merge: check if the rule contains a subset of the last; if\n        // so create a joined selector with the subset, if smaller.\n        cache = partialMerge(cache, rule);\n    };\n}\n\nexports.default = _postcss2.default.plugin('postcss-merge-rules', () => {\n    return (css, result) => {\n        const resultOpts = result.opts || {};\n        const browsers = (0, _browserslist2.default)(null, {\n            stats: resultOpts.stats,\n            path: __dirname,\n            env: resultOpts.env\n        });\n        const compatibilityCache = {};\n        css.walkRules(selectorMerger(browsers, compatibilityCache));\n    };\n});\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}