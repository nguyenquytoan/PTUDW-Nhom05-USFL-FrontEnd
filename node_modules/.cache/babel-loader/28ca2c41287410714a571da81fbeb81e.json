{"ast":null,"code":"/**\n * @fileoverview Rule to flag when using multiline strings\n * @author Ilya Volodin\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow multiline strings\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-multi-str\"\n    },\n    schema: []\n  },\n\n  create(context) {\n    /**\n     * Determines if a given node is part of JSX syntax.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} True if the node is a JSX node, false if not.\n     * @private\n     */\n    function isJSXElement(node) {\n      return node.type.indexOf(\"JSX\") === 0;\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      Literal(node) {\n        if (astUtils.LINEBREAK_MATCHER.test(node.raw) && !isJSXElement(node.parent)) {\n          context.report({\n            node,\n            message: \"Multiline support is limited to browsers supporting ES5 only.\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-multi-str.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","create","context","isJSXElement","node","indexOf","Literal","LINEBREAK_MATCHER","test","raw","parent","report","message"],"mappings":"AAAA;;;;AAKA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,YADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,4BADX;AAEFC,MAAAA,QAAQ,EAAE,gBAFR;AAGFC,MAAAA,WAAW,EAAE,KAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE;AAVN,GADO;;AAcbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;;;;;;AAMA,aAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,aAAOA,IAAI,CAACV,IAAL,CAAUW,OAAV,CAAkB,KAAlB,MAA6B,CAApC;AACH,KAVW,CAYZ;AACA;AACA;;;AAEA,WAAO;AAEHC,MAAAA,OAAO,CAACF,IAAD,EAAO;AACV,YAAIf,QAAQ,CAACkB,iBAAT,CAA2BC,IAA3B,CAAgCJ,IAAI,CAACK,GAArC,KAA6C,CAACN,YAAY,CAACC,IAAI,CAACM,MAAN,CAA9D,EAA6E;AACzER,UAAAA,OAAO,CAACS,MAAR,CAAe;AAAEP,YAAAA,IAAF;AAAQQ,YAAAA,OAAO,EAAE;AAAjB,WAAf;AACH;AACJ;;AANE,KAAP;AASH;;AAvCY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to flag when using multiline strings\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow multiline strings\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-multi-str\"\n        },\n\n        schema: []\n    },\n\n    create(context) {\n\n        /**\n         * Determines if a given node is part of JSX syntax.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} True if the node is a JSX node, false if not.\n         * @private\n         */\n        function isJSXElement(node) {\n            return node.type.indexOf(\"JSX\") === 0;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n\n            Literal(node) {\n                if (astUtils.LINEBREAK_MATCHER.test(node.raw) && !isJSXElement(node.parent)) {\n                    context.report({ node, message: \"Multiline support is limited to browsers supporting ES5 only.\" });\n                }\n            }\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}