{"ast":null,"code":"/**\n * @fileoverview A rule to disallow or enforce spaces inside of single line blocks.\n * @author Toru Nagashima\n */\n\"use strict\";\n\nconst util = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow or enforce spaces inside of blocks after opening block and before closing block\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/block-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }],\n    messages: {\n      missing: \"Requires a space {{location}} '{{token}}'.\",\n      extra: \"Unexpected space(s) {{location}} '{{token}}'.\"\n    }\n  },\n\n  create(context) {\n    const always = context.options[0] !== \"never\",\n          messageId = always ? \"missing\" : \"extra\",\n          sourceCode = context.getSourceCode();\n    /**\n     * Gets the open brace token from a given node.\n     * @param {ASTNode} node A BlockStatement/SwitchStatement node to get.\n     * @returns {Token} The token of the open brace.\n     */\n\n    function getOpenBrace(node) {\n      if (node.type === \"SwitchStatement\") {\n        if (node.cases.length > 0) {\n          return sourceCode.getTokenBefore(node.cases[0]);\n        }\n\n        return sourceCode.getLastToken(node, 1);\n      }\n\n      return sourceCode.getFirstToken(node);\n    }\n    /**\n     * Checks whether or not:\n     *   - given tokens are on same line.\n     *   - there is/isn't a space between given tokens.\n     * @param {Token} left A token to check.\n     * @param {Token} right The token which is next to `left`.\n     * @returns {boolean}\n     *    When the option is `\"always\"`, `true` if there are one or more spaces between given tokens.\n     *    When the option is `\"never\"`, `true` if there are not any spaces between given tokens.\n     *    If given tokens are not on same line, it's always `true`.\n     */\n\n\n    function isValid(left, right) {\n      return !util.isTokenOnSameLine(left, right) || sourceCode.isSpaceBetweenTokens(left, right) === always;\n    }\n    /**\n     * Reports invalid spacing style inside braces.\n     * @param {ASTNode} node A BlockStatement/SwitchStatement node to get.\n     * @returns {void}\n     */\n\n\n    function checkSpacingInsideBraces(node) {\n      // Gets braces and the first/last token of content.\n      const openBrace = getOpenBrace(node);\n      const closeBrace = sourceCode.getLastToken(node);\n      const firstToken = sourceCode.getTokenAfter(openBrace, {\n        includeComments: true\n      });\n      const lastToken = sourceCode.getTokenBefore(closeBrace, {\n        includeComments: true\n      }); // Skip if the node is invalid or empty.\n\n      if (openBrace.type !== \"Punctuator\" || openBrace.value !== \"{\" || closeBrace.type !== \"Punctuator\" || closeBrace.value !== \"}\" || firstToken === closeBrace) {\n        return;\n      } // Skip line comments for option never\n\n\n      if (!always && firstToken.type === \"Line\") {\n        return;\n      } // Check.\n\n\n      if (!isValid(openBrace, firstToken)) {\n        context.report({\n          node,\n          loc: openBrace.loc.start,\n          messageId,\n          data: {\n            location: \"after\",\n            token: openBrace.value\n          },\n\n          fix(fixer) {\n            if (always) {\n              return fixer.insertTextBefore(firstToken, \" \");\n            }\n\n            return fixer.removeRange([openBrace.range[1], firstToken.range[0]]);\n          }\n\n        });\n      }\n\n      if (!isValid(lastToken, closeBrace)) {\n        context.report({\n          node,\n          loc: closeBrace.loc.start,\n          messageId,\n          data: {\n            location: \"before\",\n            token: closeBrace.value\n          },\n\n          fix(fixer) {\n            if (always) {\n              return fixer.insertTextAfter(lastToken, \" \");\n            }\n\n            return fixer.removeRange([lastToken.range[1], closeBrace.range[0]]);\n          }\n\n        });\n      }\n    }\n\n    return {\n      BlockStatement: checkSpacingInsideBraces,\n      SwitchStatement: checkSpacingInsideBraces\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/block-spacing.js"],"names":["util","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","messages","missing","extra","create","context","always","options","messageId","sourceCode","getSourceCode","getOpenBrace","node","cases","length","getTokenBefore","getLastToken","getFirstToken","isValid","left","right","isTokenOnSameLine","isSpaceBetweenTokens","checkSpacingInsideBraces","openBrace","closeBrace","firstToken","getTokenAfter","includeComments","lastToken","value","report","loc","start","data","location","token","fix","fixer","insertTextBefore","removeRange","range","insertTextAfter","BlockStatement","SwitchStatement"],"mappings":"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","sourcesContent":["/**\n * @fileoverview A rule to disallow or enforce spaces inside of single line blocks.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nconst util = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"disallow or enforce spaces inside of blocks after opening block and before closing block\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/block-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            { enum: [\"always\", \"never\"] }\n        ],\n\n        messages: {\n            missing: \"Requires a space {{location}} '{{token}}'.\",\n            extra: \"Unexpected space(s) {{location}} '{{token}}'.\"\n        }\n    },\n\n    create(context) {\n        const always = (context.options[0] !== \"never\"),\n            messageId = always ? \"missing\" : \"extra\",\n            sourceCode = context.getSourceCode();\n\n        /**\n         * Gets the open brace token from a given node.\n         * @param {ASTNode} node A BlockStatement/SwitchStatement node to get.\n         * @returns {Token} The token of the open brace.\n         */\n        function getOpenBrace(node) {\n            if (node.type === \"SwitchStatement\") {\n                if (node.cases.length > 0) {\n                    return sourceCode.getTokenBefore(node.cases[0]);\n                }\n                return sourceCode.getLastToken(node, 1);\n            }\n            return sourceCode.getFirstToken(node);\n        }\n\n        /**\n         * Checks whether or not:\n         *   - given tokens are on same line.\n         *   - there is/isn't a space between given tokens.\n         * @param {Token} left A token to check.\n         * @param {Token} right The token which is next to `left`.\n         * @returns {boolean}\n         *    When the option is `\"always\"`, `true` if there are one or more spaces between given tokens.\n         *    When the option is `\"never\"`, `true` if there are not any spaces between given tokens.\n         *    If given tokens are not on same line, it's always `true`.\n         */\n        function isValid(left, right) {\n            return (\n                !util.isTokenOnSameLine(left, right) ||\n                sourceCode.isSpaceBetweenTokens(left, right) === always\n            );\n        }\n\n        /**\n         * Reports invalid spacing style inside braces.\n         * @param {ASTNode} node A BlockStatement/SwitchStatement node to get.\n         * @returns {void}\n         */\n        function checkSpacingInsideBraces(node) {\n\n            // Gets braces and the first/last token of content.\n            const openBrace = getOpenBrace(node);\n            const closeBrace = sourceCode.getLastToken(node);\n            const firstToken = sourceCode.getTokenAfter(openBrace, { includeComments: true });\n            const lastToken = sourceCode.getTokenBefore(closeBrace, { includeComments: true });\n\n            // Skip if the node is invalid or empty.\n            if (openBrace.type !== \"Punctuator\" ||\n                openBrace.value !== \"{\" ||\n                closeBrace.type !== \"Punctuator\" ||\n                closeBrace.value !== \"}\" ||\n                firstToken === closeBrace\n            ) {\n                return;\n            }\n\n            // Skip line comments for option never\n            if (!always && firstToken.type === \"Line\") {\n                return;\n            }\n\n            // Check.\n            if (!isValid(openBrace, firstToken)) {\n                context.report({\n                    node,\n                    loc: openBrace.loc.start,\n                    messageId,\n                    data: {\n                        location: \"after\",\n                        token: openBrace.value\n                    },\n                    fix(fixer) {\n                        if (always) {\n                            return fixer.insertTextBefore(firstToken, \" \");\n                        }\n\n                        return fixer.removeRange([openBrace.range[1], firstToken.range[0]]);\n                    }\n                });\n            }\n            if (!isValid(lastToken, closeBrace)) {\n                context.report({\n                    node,\n                    loc: closeBrace.loc.start,\n                    messageId,\n                    data: {\n                        location: \"before\",\n                        token: closeBrace.value\n                    },\n                    fix(fixer) {\n                        if (always) {\n                            return fixer.insertTextAfter(lastToken, \" \");\n                        }\n\n                        return fixer.removeRange([lastToken.range[1], closeBrace.range[0]]);\n                    }\n                });\n            }\n        }\n\n        return {\n            BlockStatement: checkSpacingInsideBraces,\n            SwitchStatement: checkSpacingInsideBraces\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}