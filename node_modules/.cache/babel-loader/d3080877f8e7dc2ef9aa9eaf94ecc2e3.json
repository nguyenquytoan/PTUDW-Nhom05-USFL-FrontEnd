{"ast":null,"code":"'use strict';\n\nvar SAX = require('sax'),\n    JSAPI = require('./jsAPI.js'),\n    CSSClassList = require('./css-class-list'),\n    CSSStyleDeclaration = require('./css-style-declaration'),\n    entityDeclaration = /<!ENTITY\\s+(\\S+)\\s+(?:'([^\\']+)'|\"([^\\\"]+)\")\\s*>/g;\n\nvar config = {\n  strict: true,\n  trim: false,\n  normalize: true,\n  lowercase: true,\n  xmlns: true,\n  position: true\n};\n/**\n * Convert SVG (XML) string to SVG-as-JS object.\n *\n * @param {String} data input data\n * @param {Function} callback\n */\n\nmodule.exports = function (data, callback) {\n  var sax = SAX.parser(config.strict, config),\n      root = new JSAPI({\n    elem: '#document',\n    content: []\n  }),\n      current = root,\n      stack = [root],\n      textContext = null,\n      parsingError = false;\n\n  function pushToContent(content) {\n    content = new JSAPI(content, current);\n    (current.content = current.content || []).push(content);\n    return content;\n  }\n\n  sax.ondoctype = function (doctype) {\n    pushToContent({\n      doctype: doctype\n    });\n    var subsetStart = doctype.indexOf('['),\n        entityMatch;\n\n    if (subsetStart >= 0) {\n      entityDeclaration.lastIndex = subsetStart;\n\n      while ((entityMatch = entityDeclaration.exec(data)) != null) {\n        sax.ENTITIES[entityMatch[1]] = entityMatch[2] || entityMatch[3];\n      }\n    }\n  };\n\n  sax.onprocessinginstruction = function (data) {\n    pushToContent({\n      processinginstruction: data\n    });\n  };\n\n  sax.oncomment = function (comment) {\n    pushToContent({\n      comment: comment.trim()\n    });\n  };\n\n  sax.oncdata = function (cdata) {\n    pushToContent({\n      cdata: cdata\n    });\n  };\n\n  sax.onopentag = function (data) {\n    var elem = {\n      elem: data.name,\n      prefix: data.prefix,\n      local: data.local,\n      attrs: {}\n    };\n    elem.class = new CSSClassList(elem);\n    elem.style = new CSSStyleDeclaration(elem);\n\n    if (Object.keys(data.attributes).length) {\n      for (var name in data.attributes) {\n        if (name === 'class') {\n          // has class attribute\n          elem.class.hasClass();\n        }\n\n        if (name === 'style') {\n          // has style attribute\n          elem.style.hasStyle();\n        }\n\n        elem.attrs[name] = {\n          name: name,\n          value: data.attributes[name].value,\n          prefix: data.attributes[name].prefix,\n          local: data.attributes[name].local\n        };\n      }\n    }\n\n    elem = pushToContent(elem);\n    current = elem; // Save info about <text> tag to prevent trimming of meaningful whitespace\n\n    if (data.name == 'text' && !data.prefix) {\n      textContext = current;\n    }\n\n    stack.push(elem);\n  };\n\n  sax.ontext = function (text) {\n    if (/\\S/.test(text) || textContext) {\n      if (!textContext) text = text.trim();\n      pushToContent({\n        text: text\n      });\n    }\n  };\n\n  sax.onclosetag = function () {\n    var last = stack.pop(); // Trim text inside <text> tag.\n\n    if (last == textContext) {\n      trim(textContext);\n      textContext = null;\n    }\n\n    current = stack[stack.length - 1];\n  };\n\n  sax.onerror = function (e) {\n    e.message = 'Error in parsing SVG: ' + e.message;\n\n    if (e.message.indexOf('Unexpected end') < 0) {\n      throw e;\n    }\n  };\n\n  sax.onend = function () {\n    if (!this.error) {\n      callback(root);\n    } else {\n      callback({\n        error: this.error.message\n      });\n    }\n  };\n\n  try {\n    sax.write(data);\n  } catch (e) {\n    callback({\n      error: e.message\n    });\n    parsingError = true;\n  }\n\n  if (!parsingError) sax.close();\n\n  function trim(elem) {\n    if (!elem.content) return elem;\n    var start = elem.content[0],\n        end = elem.content[elem.content.length - 1];\n\n    while (start && start.content && !start.text) start = start.content[0];\n\n    if (start && start.text) start.text = start.text.replace(/^\\s+/, '');\n\n    while (end && end.content && !end.text) end = end.content[end.content.length - 1];\n\n    if (end && end.text) end.text = end.text.replace(/\\s+$/, '');\n    return elem;\n  }\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/svgo/lib/svgo/svg2js.js"],"names":["SAX","require","JSAPI","CSSClassList","CSSStyleDeclaration","entityDeclaration","config","strict","trim","normalize","lowercase","xmlns","position","module","exports","data","callback","sax","parser","root","elem","content","current","stack","textContext","parsingError","pushToContent","push","ondoctype","doctype","subsetStart","indexOf","entityMatch","lastIndex","exec","ENTITIES","onprocessinginstruction","processinginstruction","oncomment","comment","oncdata","cdata","onopentag","name","prefix","local","attrs","class","style","Object","keys","attributes","length","hasClass","hasStyle","value","ontext","text","test","onclosetag","last","pop","onerror","e","message","onend","error","write","close","start","end","replace"],"mappings":"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","sourcesContent":["'use strict';\n\nvar SAX = require('sax'),\n    JSAPI = require('./jsAPI.js'),\n    CSSClassList = require('./css-class-list'),\n    CSSStyleDeclaration = require('./css-style-declaration'),\n    entityDeclaration = /<!ENTITY\\s+(\\S+)\\s+(?:'([^\\']+)'|\"([^\\\"]+)\")\\s*>/g;\n\nvar config = {\n    strict: true,\n    trim: false,\n    normalize: true,\n    lowercase: true,\n    xmlns: true,\n    position: true\n};\n\n/**\n * Convert SVG (XML) string to SVG-as-JS object.\n *\n * @param {String} data input data\n * @param {Function} callback\n */\nmodule.exports = function(data, callback) {\n\n    var sax = SAX.parser(config.strict, config),\n        root = new JSAPI({ elem: '#document', content: [] }),\n        current = root,\n        stack = [root],\n        textContext = null,\n        parsingError = false;\n\n    function pushToContent(content) {\n\n        content = new JSAPI(content, current);\n\n        (current.content = current.content || []).push(content);\n\n        return content;\n\n    }\n\n    sax.ondoctype = function(doctype) {\n\n        pushToContent({\n            doctype: doctype\n        });\n\n        var subsetStart = doctype.indexOf('['),\n            entityMatch;\n\n        if (subsetStart >= 0) {\n            entityDeclaration.lastIndex = subsetStart;\n\n            while ((entityMatch = entityDeclaration.exec(data)) != null) {\n                sax.ENTITIES[entityMatch[1]] = entityMatch[2] || entityMatch[3];\n            }\n        }\n    };\n\n    sax.onprocessinginstruction = function(data) {\n\n        pushToContent({\n            processinginstruction: data\n        });\n\n    };\n\n    sax.oncomment = function(comment) {\n\n        pushToContent({\n            comment: comment.trim()\n        });\n\n    };\n\n    sax.oncdata = function(cdata) {\n\n        pushToContent({\n            cdata: cdata\n        });\n\n    };\n\n    sax.onopentag = function(data) {\n\n        var elem = {\n            elem: data.name,\n            prefix: data.prefix,\n            local: data.local,\n            attrs: {}\n        };\n\n        elem.class = new CSSClassList(elem);\n        elem.style = new CSSStyleDeclaration(elem);\n\n        if (Object.keys(data.attributes).length) {\n            for (var name in data.attributes) {\n\n                if (name === 'class') { // has class attribute\n                    elem.class.hasClass();\n                }\n\n                if (name === 'style') { // has style attribute\n                    elem.style.hasStyle();\n                }\n\n                elem.attrs[name] = {\n                    name: name,\n                    value: data.attributes[name].value,\n                    prefix: data.attributes[name].prefix,\n                    local: data.attributes[name].local\n                };\n            }\n        }\n\n        elem = pushToContent(elem);\n        current = elem;\n\n        // Save info about <text> tag to prevent trimming of meaningful whitespace\n        if (data.name == 'text' && !data.prefix) {\n            textContext = current;\n        }\n\n        stack.push(elem);\n\n    };\n\n    sax.ontext = function(text) {\n\n        if (/\\S/.test(text) || textContext) {\n\n            if (!textContext)\n                text = text.trim();\n\n            pushToContent({\n                text: text\n            });\n\n        }\n\n    };\n\n    sax.onclosetag = function() {\n\n        var last = stack.pop();\n\n        // Trim text inside <text> tag.\n        if (last == textContext) {\n            trim(textContext);\n            textContext = null;\n        }\n        current = stack[stack.length - 1];\n\n    };\n\n    sax.onerror = function(e) {\n\n        e.message = 'Error in parsing SVG: ' + e.message;\n        if (e.message.indexOf('Unexpected end') < 0) {\n            throw e;\n        }\n\n    };\n\n    sax.onend = function() {\n\n        if (!this.error) {\n            callback(root);\n        } else {\n            callback({ error: this.error.message });\n        }\n\n    };\n\n    try {\n        sax.write(data);\n    } catch (e) {\n        callback({ error: e.message });\n        parsingError = true;\n    }\n    if (!parsingError) sax.close();\n\n    function trim(elem) {\n        if (!elem.content) return elem;\n\n        var start = elem.content[0],\n            end = elem.content[elem.content.length - 1];\n\n        while (start && start.content && !start.text) start = start.content[0];\n        if (start && start.text) start.text = start.text.replace(/^\\s+/, '');\n\n        while (end && end.content && !end.text) end = end.content[end.content.length - 1];\n        if (end && end.text) end.text = end.text.replace(/\\s+$/, '');\n\n        return elem;\n\n    }\n\n};\n"]},"metadata":{},"sourceType":"script"}