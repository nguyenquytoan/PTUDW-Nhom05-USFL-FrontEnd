{"ast":null,"code":"'use strict';\n\nvar getError = require('./get-error');\n/**\n * Where the given list is non-null and contains error instances then consolidate and throw\n * @throws Error\n * @param {string} resourcePath The path to the resource being processed\n * @param {null|Array} candidates A possible Array with possible error elements\n */\n\n\nfunction throwErrors(resourcePath, candidates) {\n  var errors = !!candidates && candidates.filter(testIsError).map(getMessage);\n  var hasError = !!errors && errors.length;\n\n  if (hasError) {\n    throw getError(['For resource: ' + resourcePath].concat(errors).join('\\n'));\n  }\n\n  function testIsError(candidate) {\n    return !!candidate && typeof candidate === 'object' && candidate instanceof Error;\n  }\n\n  function getMessage(error) {\n    return error.message;\n  }\n}\n\nmodule.exports = throwErrors;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/adjust-sourcemap-loader/lib/process/throw-errors.js"],"names":["getError","require","throwErrors","resourcePath","candidates","errors","filter","testIsError","map","getMessage","hasError","length","concat","join","candidate","Error","error","message","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAtB;AAEA;;;;;;;;AAMA,SAASC,WAAT,CAAqBC,YAArB,EAAmCC,UAAnC,EAA+C;AAC7C,MAAIC,MAAM,GAAG,CAAC,CAACD,UAAF,IAAgBA,UAAU,CAClCE,MADwB,CACjBC,WADiB,EAExBC,GAFwB,CAEpBC,UAFoB,CAA7B;AAIA,MAAIC,QAAQ,GAAG,CAAC,CAACL,MAAF,IAAYA,MAAM,CAACM,MAAlC;;AACA,MAAID,QAAJ,EAAc;AACZ,UAAMV,QAAQ,CAAC,CAAC,mBAAmBG,YAApB,EAAkCS,MAAlC,CAAyCP,MAAzC,EAAiDQ,IAAjD,CAAsD,IAAtD,CAAD,CAAd;AACD;;AAED,WAASN,WAAT,CAAqBO,SAArB,EAAgC;AAC9B,WAAO,CAAC,CAACA,SAAF,IAAgB,OAAOA,SAAP,KAAqB,QAArC,IAAmDA,SAAS,YAAYC,KAA/E;AACD;;AAED,WAASN,UAAT,CAAoBO,KAApB,EAA2B;AACzB,WAAOA,KAAK,CAACC,OAAb;AACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiBjB,WAAjB","sourcesContent":["'use strict';\n\nvar getError = require('./get-error');\n\n/**\n * Where the given list is non-null and contains error instances then consolidate and throw\n * @throws Error\n * @param {string} resourcePath The path to the resource being processed\n * @param {null|Array} candidates A possible Array with possible error elements\n */\nfunction throwErrors(resourcePath, candidates) {\n  var errors = !!candidates && candidates\n      .filter(testIsError)\n      .map(getMessage);\n\n  var hasError = !!errors && errors.length;\n  if (hasError) {\n    throw getError(['For resource: ' + resourcePath].concat(errors).join('\\n'));\n  }\n\n  function testIsError(candidate) {\n    return !!candidate && (typeof candidate === 'object') && (candidate instanceof Error);\n  }\n\n  function getMessage(error) {\n    return error.message;\n  }\n}\n\nmodule.exports = throwErrors;"]},"metadata":{},"sourceType":"script"}