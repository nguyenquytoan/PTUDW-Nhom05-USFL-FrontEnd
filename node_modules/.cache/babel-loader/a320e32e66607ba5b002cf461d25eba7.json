{"ast":null,"code":"/**\n * Utility for resolving a module relative to another module\n * @author Teddy Katz\n */\n\"use strict\";\n\nconst Module = require(\"module\");\n\nconst path = require(\"path\"); // Polyfill Node's `Module.createRequire` if not present. We only support the case where the argument is a filepath, not a URL.\n\n\nconst createRequire = // Added in v12.2.0\nModule.createRequire || // Added in v10.12.0, but deprecated in v12.2.0.\nModule.createRequireFromPath || ( // Polyfill - This is not executed on the tests on node@>=10.\n\n/* istanbul ignore next */\nfilename => {\n  const mod = new Module(filename, null);\n  mod.filename = filename;\n  mod.paths = Module._nodeModulePaths(path.dirname(filename)); // eslint-disable-line no-underscore-dangle\n\n  mod._compile(\"module.exports = require;\", filename); // eslint-disable-line no-underscore-dangle\n\n\n  return mod.exports;\n});\n\nmodule.exports = {\n  /**\n   * Resolves a Node module relative to another module\n   * @param {string} moduleName The name of a Node module, or a path to a Node module.\n   *\n   * @param {string} relativeToPath An absolute path indicating the module that `moduleName` should be resolved relative to. This must be\n   * a file rather than a directory, but the file need not actually exist.\n   * @returns {string} The absolute path that would result from calling `require.resolve(moduleName)` in a file located at `relativeToPath`\n   */\n  resolve(moduleName, relativeToPath) {\n    try {\n      return createRequire(relativeToPath).resolve(moduleName);\n    } catch (error) {\n      if (typeof error === \"object\" && error !== null && error.code === \"MODULE_NOT_FOUND\" && !error.requireStack && error.message.includes(moduleName)) {\n        error.message += `\\nRequire stack:\\n- ${relativeToPath}`;\n      }\n\n      throw error;\n    }\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/shared/relative-module-resolver.js"],"names":["Module","require","path","createRequire","createRequireFromPath","filename","mod","paths","_nodeModulePaths","dirname","_compile","exports","module","resolve","moduleName","relativeToPath","error","code","requireStack","message","includes"],"mappings":"AAAA;;;;AAKA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB,C,CAEA;;;AACA,MAAME,aAAa,GAEf;AACAH,MAAM,CAACG,aAAP,IAEA;AACAH,MAAM,CAACI,qBAHP,MAKA;;AACA;AACCC,QAAQ,IAAI;AACT,QAAMC,GAAG,GAAG,IAAIN,MAAJ,CAAWK,QAAX,EAAqB,IAArB,CAAZ;AAEAC,EAAAA,GAAG,CAACD,QAAJ,GAAeA,QAAf;AACAC,EAAAA,GAAG,CAACC,KAAJ,GAAYP,MAAM,CAACQ,gBAAP,CAAwBN,IAAI,CAACO,OAAL,CAAaJ,QAAb,CAAxB,CAAZ,CAJS,CAIoD;;AAC7DC,EAAAA,GAAG,CAACI,QAAJ,CAAa,2BAAb,EAA0CL,QAA1C,EALS,CAK4C;;;AACrD,SAAOC,GAAG,CAACK,OAAX;AACH,CAdD,CAHJ;;AAoBAC,MAAM,CAACD,OAAP,GAAiB;AAEb;;;;;;;;AAQAE,EAAAA,OAAO,CAACC,UAAD,EAAaC,cAAb,EAA6B;AAChC,QAAI;AACA,aAAOZ,aAAa,CAACY,cAAD,CAAb,CAA8BF,OAA9B,CAAsCC,UAAtC,CAAP;AACH,KAFD,CAEE,OAAOE,KAAP,EAAc;AACZ,UACI,OAAOA,KAAP,KAAiB,QAAjB,IACAA,KAAK,KAAK,IADV,IAEAA,KAAK,CAACC,IAAN,KAAe,kBAFf,IAGA,CAACD,KAAK,CAACE,YAHP,IAIAF,KAAK,CAACG,OAAN,CAAcC,QAAd,CAAuBN,UAAvB,CALJ,EAME;AACEE,QAAAA,KAAK,CAACG,OAAN,IAAkB,uBAAsBJ,cAAe,EAAvD;AACH;;AACD,YAAMC,KAAN;AACH;AACJ;;AAzBY,CAAjB","sourcesContent":["/**\n * Utility for resolving a module relative to another module\n * @author Teddy Katz\n */\n\n\"use strict\";\n\nconst Module = require(\"module\");\nconst path = require(\"path\");\n\n// Polyfill Node's `Module.createRequire` if not present. We only support the case where the argument is a filepath, not a URL.\nconst createRequire = (\n\n    // Added in v12.2.0\n    Module.createRequire ||\n\n    // Added in v10.12.0, but deprecated in v12.2.0.\n    Module.createRequireFromPath ||\n\n    // Polyfill - This is not executed on the tests on node@>=10.\n    /* istanbul ignore next */\n    (filename => {\n        const mod = new Module(filename, null);\n\n        mod.filename = filename;\n        mod.paths = Module._nodeModulePaths(path.dirname(filename)); // eslint-disable-line no-underscore-dangle\n        mod._compile(\"module.exports = require;\", filename); // eslint-disable-line no-underscore-dangle\n        return mod.exports;\n    })\n);\n\nmodule.exports = {\n\n    /**\n     * Resolves a Node module relative to another module\n     * @param {string} moduleName The name of a Node module, or a path to a Node module.\n     *\n     * @param {string} relativeToPath An absolute path indicating the module that `moduleName` should be resolved relative to. This must be\n     * a file rather than a directory, but the file need not actually exist.\n     * @returns {string} The absolute path that would result from calling `require.resolve(moduleName)` in a file located at `relativeToPath`\n     */\n    resolve(moduleName, relativeToPath) {\n        try {\n            return createRequire(relativeToPath).resolve(moduleName);\n        } catch (error) {\n            if (\n                typeof error === \"object\" &&\n                error !== null &&\n                error.code === \"MODULE_NOT_FOUND\" &&\n                !error.requireStack &&\n                error.message.includes(moduleName)\n            ) {\n                error.message += `\\nRequire stack:\\n- ${relativeToPath}`;\n            }\n            throw error;\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}