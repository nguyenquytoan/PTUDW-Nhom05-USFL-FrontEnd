{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcssSelectorParser = _interopRequireDefault(require(\"postcss-selector-parser\"));\n\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\n\nvar _parser = require(\"../parser\");\n\nvar _reducer = _interopRequireDefault(require(\"./reducer\"));\n\nvar _stringifier = _interopRequireDefault(require(\"./stringifier\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // eslint-disable-next-line import/no-unresolved\n\n\nvar MATCH_CALC = /((?:-(moz|webkit)-)?calc)/i;\n\nfunction transformValue(value, options, result, item) {\n  return (0, _postcssValueParser.default)(value).walk(function (node) {\n    // skip anything which isn't a calc() function\n    if (node.type !== 'function' || !MATCH_CALC.test(node.value)) {\n      return node;\n    } // stringify calc expression and produce an AST\n\n\n    var contents = _postcssValueParser.default.stringify(node.nodes);\n\n    var ast = _parser.parser.parse(contents); // reduce AST to its simplest form, that is, either to a single value\n    // or a simplified calc expression\n\n\n    var reducedAst = (0, _reducer.default)(ast, options.precision); // stringify AST and write it back\n\n    node.type = 'word';\n    node.value = (0, _stringifier.default)(node.value, reducedAst, value, options, result, item);\n    return false;\n  }).toString();\n}\n\nfunction transformSelector(value, options, result, item) {\n  return (0, _postcssSelectorParser.default)(function (selectors) {\n    selectors.walk(function (node) {\n      // attribute value\n      // e.g. the \"calc(3*3)\" part of \"div[data-size=\"calc(3*3)\"]\"\n      if (node.type === 'attribute' && node.value) {\n        node.setValue(transformValue(node.value, options, result, item));\n      } // tag value\n      // e.g. the \"calc(3*3)\" part of \"div:nth-child(2n + calc(3*3))\"\n\n\n      if (node.type === 'tag') {\n        node.value = transformValue(node.value, options, result, item);\n      }\n\n      return;\n    });\n  }).processSync(value);\n}\n\nvar _default = function _default(node, property, options, result) {\n  var value = property === \"selector\" ? transformSelector(node[property], options, result, node) : transformValue(node[property], options, result, node); // if the preserve option is enabled and the value has changed, write the\n  // transformed value into a cloned node which is inserted before the current\n  // node, preserving the original value. Otherwise, overwrite the original\n  // value.\n\n  if (options.preserve && node[property] !== value) {\n    var clone = node.clone();\n    clone[property] = value;\n    node.parent.insertBefore(node, clone);\n  } else {\n    node[property] = value;\n  }\n};\n\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/postcss-calc/dist/lib/transform.js"],"names":["Object","defineProperty","exports","value","default","_postcssSelectorParser","_interopRequireDefault","require","_postcssValueParser","_parser","_reducer","_stringifier","obj","__esModule","MATCH_CALC","transformValue","options","result","item","walk","node","type","test","contents","stringify","nodes","ast","parser","parse","reducedAst","precision","toString","transformSelector","selectors","setValue","processSync","_default","property","preserve","clone","parent","insertBefore","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcssSelectorParser = _interopRequireDefault(require(\"postcss-selector-parser\"));\n\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\n\nvar _parser = require(\"../parser\");\n\nvar _reducer = _interopRequireDefault(require(\"./reducer\"));\n\nvar _stringifier = _interopRequireDefault(require(\"./stringifier\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// eslint-disable-next-line import/no-unresolved\nvar MATCH_CALC = /((?:-(moz|webkit)-)?calc)/i;\n\nfunction transformValue(value, options, result, item) {\n  return (0, _postcssValueParser.default)(value).walk(function (node) {\n    // skip anything which isn't a calc() function\n    if (node.type !== 'function' || !MATCH_CALC.test(node.value)) {\n      return node;\n    } // stringify calc expression and produce an AST\n\n\n    var contents = _postcssValueParser.default.stringify(node.nodes);\n\n    var ast = _parser.parser.parse(contents); // reduce AST to its simplest form, that is, either to a single value\n    // or a simplified calc expression\n\n\n    var reducedAst = (0, _reducer.default)(ast, options.precision); // stringify AST and write it back\n\n    node.type = 'word';\n    node.value = (0, _stringifier.default)(node.value, reducedAst, value, options, result, item);\n    return false;\n  }).toString();\n}\n\nfunction transformSelector(value, options, result, item) {\n  return (0, _postcssSelectorParser.default)(function (selectors) {\n    selectors.walk(function (node) {\n      // attribute value\n      // e.g. the \"calc(3*3)\" part of \"div[data-size=\"calc(3*3)\"]\"\n      if (node.type === 'attribute' && node.value) {\n        node.setValue(transformValue(node.value, options, result, item));\n      } // tag value\n      // e.g. the \"calc(3*3)\" part of \"div:nth-child(2n + calc(3*3))\"\n\n\n      if (node.type === 'tag') {\n        node.value = transformValue(node.value, options, result, item);\n      }\n\n      return;\n    });\n  }).processSync(value);\n}\n\nvar _default = function _default(node, property, options, result) {\n  var value = property === \"selector\" ? transformSelector(node[property], options, result, node) : transformValue(node[property], options, result, node); // if the preserve option is enabled and the value has changed, write the\n  // transformed value into a cloned node which is inserted before the current\n  // node, preserving the original value. Otherwise, overwrite the original\n  // value.\n\n  if (options.preserve && node[property] !== value) {\n    var clone = node.clone();\n    clone[property] = value;\n    node.parent.insertBefore(node, clone);\n  } else {\n    node[property] = value;\n  }\n};\n\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}