{"ast":null,"code":"\"use strict\";\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _ansiEscapes = _interopRequireDefault(require(\"ansi-escapes\"));\n\nvar _jestWatcher = require(\"jest-watcher\");\n\nvar _scroll2 = _interopRequireDefault(require(\"../lib/scroll\"));\n\nvar _utils = require(\"../lib/utils\");\n\nvar _pattern_mode_helpers = require(\"../lib/pattern_mode_helpers\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nclass TestNamePatternPrompt extends _jestWatcher.PatternPrompt {\n  constructor(pipe, prompt) {\n    super(pipe, prompt);\n    this._entityName = 'tests';\n    this._cachedTestResults = [];\n  }\n\n  _onChange(pattern, options) {\n    super._onChange(pattern, options);\n\n    this._printTypeahead(pattern, options);\n  }\n\n  _printTypeahead(pattern, options) {\n    const matchedTests = this._getMatchedTests(pattern);\n\n    const total = matchedTests.length;\n    const pipe = this._pipe;\n    const prompt = this._prompt;\n    (0, _jestWatcher.printPatternCaret)(pattern, pipe);\n    pipe.write(_ansiEscapes.default.cursorLeft);\n\n    if (pattern) {\n      (0, _pattern_mode_helpers.printPatternMatches)(total, 'test', pipe, ` from ${_chalk.default.yellow('cached')} test suites`);\n      const width = (0, _utils.getTerminalWidth)(pipe);\n\n      const _scroll = (0, _scroll2.default)(total, options),\n            start = _scroll.start,\n            end = _scroll.end,\n            index = _scroll.index;\n\n      prompt.setPromptLength(total);\n      matchedTests.slice(start, end).map(name => (0, _utils.formatTestNameByPattern)(name, pattern, width - 4)).map((item, i) => (0, _pattern_mode_helpers.formatTypeaheadSelection)(item, i, index, prompt)).forEach(item => (0, _pattern_mode_helpers.printTypeaheadItem)(item, pipe));\n\n      if (total > end) {\n        (0, _pattern_mode_helpers.printMore)('test', pipe, total - end);\n      }\n    } else {\n      (0, _pattern_mode_helpers.printStartTyping)('test name', pipe);\n    }\n\n    (0, _jestWatcher.printRestoredPatternCaret)(pattern, this._currentUsageRows, pipe);\n  }\n\n  _getMatchedTests(pattern) {\n    let regex;\n\n    try {\n      regex = new RegExp(pattern, 'i');\n    } catch (e) {\n      return [];\n    }\n\n    return this._cachedTestResults.reduce((matchedTests, {\n      testResults\n    }) => {\n      return matchedTests.concat(testResults.filter(({\n        fullName\n      }) => regex.test(fullName)).map(({\n        fullName\n      }) => fullName));\n    }, []);\n  }\n\n  updateCachedTestResults(testResults = []) {\n    this._cachedTestResults = testResults;\n  }\n\n}\n\nmodule.exports = TestNamePatternPrompt;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jest-watch-typeahead/build/test_name_plugin/prompt.js"],"names":["_chalk","_interopRequireDefault","require","_ansiEscapes","_jestWatcher","_scroll2","_utils","_pattern_mode_helpers","obj","__esModule","default","TestNamePatternPrompt","PatternPrompt","constructor","pipe","prompt","_entityName","_cachedTestResults","_onChange","pattern","options","_printTypeahead","matchedTests","_getMatchedTests","total","length","_pipe","_prompt","printPatternCaret","write","cursorLeft","printPatternMatches","yellow","width","getTerminalWidth","_scroll","start","end","index","setPromptLength","slice","map","name","formatTestNameByPattern","item","i","formatTypeaheadSelection","forEach","printTypeaheadItem","printMore","printStartTyping","printRestoredPatternCaret","_currentUsageRows","regex","RegExp","e","reduce","testResults","concat","filter","fullName","test","updateCachedTestResults","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _ansiEscapes = _interopRequireDefault(require(\"ansi-escapes\"));\n\nvar _jestWatcher = require(\"jest-watcher\");\n\nvar _scroll2 = _interopRequireDefault(require(\"../lib/scroll\"));\n\nvar _utils = require(\"../lib/utils\");\n\nvar _pattern_mode_helpers = require(\"../lib/pattern_mode_helpers\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass TestNamePatternPrompt extends _jestWatcher.PatternPrompt {\n  constructor(pipe, prompt) {\n    super(pipe, prompt);\n    this._entityName = 'tests';\n    this._cachedTestResults = [];\n  }\n\n  _onChange(pattern, options) {\n    super._onChange(pattern, options);\n\n    this._printTypeahead(pattern, options);\n  }\n\n  _printTypeahead(pattern, options) {\n    const matchedTests = this._getMatchedTests(pattern);\n\n    const total = matchedTests.length;\n    const pipe = this._pipe;\n    const prompt = this._prompt;\n    (0, _jestWatcher.printPatternCaret)(pattern, pipe);\n    pipe.write(_ansiEscapes.default.cursorLeft);\n\n    if (pattern) {\n      (0, _pattern_mode_helpers.printPatternMatches)(total, 'test', pipe, ` from ${_chalk.default.yellow('cached')} test suites`);\n      const width = (0, _utils.getTerminalWidth)(pipe);\n\n      const _scroll = (0, _scroll2.default)(total, options),\n            start = _scroll.start,\n            end = _scroll.end,\n            index = _scroll.index;\n\n      prompt.setPromptLength(total);\n      matchedTests.slice(start, end).map(name => (0, _utils.formatTestNameByPattern)(name, pattern, width - 4)).map((item, i) => (0, _pattern_mode_helpers.formatTypeaheadSelection)(item, i, index, prompt)).forEach(item => (0, _pattern_mode_helpers.printTypeaheadItem)(item, pipe));\n\n      if (total > end) {\n        (0, _pattern_mode_helpers.printMore)('test', pipe, total - end);\n      }\n    } else {\n      (0, _pattern_mode_helpers.printStartTyping)('test name', pipe);\n    }\n\n    (0, _jestWatcher.printRestoredPatternCaret)(pattern, this._currentUsageRows, pipe);\n  }\n\n  _getMatchedTests(pattern) {\n    let regex;\n\n    try {\n      regex = new RegExp(pattern, 'i');\n    } catch (e) {\n      return [];\n    }\n\n    return this._cachedTestResults.reduce((matchedTests, {\n      testResults\n    }) => {\n      return matchedTests.concat(testResults.filter(({\n        fullName\n      }) => regex.test(fullName)).map(({\n        fullName\n      }) => fullName));\n    }, []);\n  }\n\n  updateCachedTestResults(testResults = []) {\n    this._cachedTestResults = testResults;\n  }\n\n}\n\nmodule.exports = TestNamePatternPrompt;"]},"metadata":{},"sourceType":"script"}