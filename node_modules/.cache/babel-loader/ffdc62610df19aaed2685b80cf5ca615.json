{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.mjs';\nimport { assert } from 'workbox-core/_private/assert.mjs';\nimport { logger } from 'workbox-core/_private/logger.mjs';\nimport { calculateEffectiveBoundaries } from './utils/calculateEffectiveBoundaries.mjs';\nimport { parseRangeHeader } from './utils/parseRangeHeader.mjs';\nimport './_version.mjs';\n/**\n * Given a `Request` and `Response` objects as input, this will return a\n * promise for a new `Response`.\n *\n * If the original `Response` already contains partial content (i.e. it has\n * a status of 206), then this assumes it already fulfills the `Range:`\n * requirements, and will return it as-is.\n *\n * @param {Request} request A request, which should contain a Range:\n * header.\n * @param {Response} originalResponse A response.\n * @return {Promise<Response>} Either a `206 Partial Content` response, with\n * the response body set to the slice of content specified by the request's\n * `Range:` header, or a `416 Range Not Satisfiable` response if the\n * conditions of the `Range:` header can't be met.\n *\n * @memberof workbox.rangeRequests\n */\n\nasync function createPartialResponse(request, originalResponse) {\n  try {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-range-requests',\n        funcName: 'createPartialResponse',\n        paramName: 'request'\n      });\n      assert.isInstance(originalResponse, Response, {\n        moduleName: 'workbox-range-requests',\n        funcName: 'createPartialResponse',\n        paramName: 'originalResponse'\n      });\n    }\n\n    if (originalResponse.status === 206) {\n      // If we already have a 206, then just pass it through as-is;\n      // see https://github.com/GoogleChrome/workbox/issues/1720\n      return originalResponse;\n    }\n\n    const rangeHeader = request.headers.get('range');\n\n    if (!rangeHeader) {\n      throw new WorkboxError('no-range-header');\n    }\n\n    const boundaries = parseRangeHeader(rangeHeader);\n    const originalBlob = await originalResponse.blob();\n    const effectiveBoundaries = calculateEffectiveBoundaries(originalBlob, boundaries.start, boundaries.end);\n    const slicedBlob = originalBlob.slice(effectiveBoundaries.start, effectiveBoundaries.end);\n    const slicedBlobSize = slicedBlob.size;\n    const slicedResponse = new Response(slicedBlob, {\n      // Status code 206 is for a Partial Content response.\n      // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/206\n      status: 206,\n      statusText: 'Partial Content',\n      headers: originalResponse.headers\n    });\n    slicedResponse.headers.set('Content-Length', slicedBlobSize);\n    slicedResponse.headers.set('Content-Range', `bytes ${effectiveBoundaries.start}-${effectiveBoundaries.end - 1}/` + originalBlob.size);\n    return slicedResponse;\n  } catch (error) {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.warn(`Unable to construct a partial response; returning a ` + `416 Range Not Satisfiable response instead.`);\n      logger.groupCollapsed(`View details here.`);\n      logger.log(error);\n      logger.log(request);\n      logger.log(originalResponse);\n      logger.groupEnd();\n    }\n\n    return new Response('', {\n      status: 416,\n      statusText: 'Range Not Satisfiable'\n    });\n  }\n}\n\nexport { createPartialResponse };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-range-requests/createPartialResponse.mjs"],"names":["WorkboxError","assert","logger","calculateEffectiveBoundaries","parseRangeHeader","createPartialResponse","request","originalResponse","process","env","NODE_ENV","isInstance","Request","moduleName","funcName","paramName","Response","status","rangeHeader","headers","get","boundaries","originalBlob","blob","effectiveBoundaries","start","end","slicedBlob","slice","slicedBlobSize","size","slicedResponse","statusText","set","error","warn","groupCollapsed","log","groupEnd"],"mappings":"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","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\n\nimport {calculateEffectiveBoundaries} from\n  './utils/calculateEffectiveBoundaries.mjs';\nimport {parseRangeHeader} from './utils/parseRangeHeader.mjs';\n\nimport './_version.mjs';\n\n/**\n * Given a `Request` and `Response` objects as input, this will return a\n * promise for a new `Response`.\n *\n * If the original `Response` already contains partial content (i.e. it has\n * a status of 206), then this assumes it already fulfills the `Range:`\n * requirements, and will return it as-is.\n *\n * @param {Request} request A request, which should contain a Range:\n * header.\n * @param {Response} originalResponse A response.\n * @return {Promise<Response>} Either a `206 Partial Content` response, with\n * the response body set to the slice of content specified by the request's\n * `Range:` header, or a `416 Range Not Satisfiable` response if the\n * conditions of the `Range:` header can't be met.\n *\n * @memberof workbox.rangeRequests\n */\nasync function createPartialResponse(request, originalResponse) {\n  try {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-range-requests',\n        funcName: 'createPartialResponse',\n        paramName: 'request',\n      });\n\n      assert.isInstance(originalResponse, Response, {\n        moduleName: 'workbox-range-requests',\n        funcName: 'createPartialResponse',\n        paramName: 'originalResponse',\n      });\n    }\n\n    if (originalResponse.status === 206) {\n      // If we already have a 206, then just pass it through as-is;\n      // see https://github.com/GoogleChrome/workbox/issues/1720\n      return originalResponse;\n    }\n\n    const rangeHeader = request.headers.get('range');\n    if (!rangeHeader) {\n      throw new WorkboxError('no-range-header');\n    }\n\n    const boundaries = parseRangeHeader(rangeHeader);\n    const originalBlob = await originalResponse.blob();\n\n    const effectiveBoundaries = calculateEffectiveBoundaries(\n        originalBlob, boundaries.start, boundaries.end);\n\n    const slicedBlob = originalBlob.slice(effectiveBoundaries.start,\n        effectiveBoundaries.end);\n    const slicedBlobSize = slicedBlob.size;\n\n    const slicedResponse = new Response(slicedBlob, {\n      // Status code 206 is for a Partial Content response.\n      // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/206\n      status: 206,\n      statusText: 'Partial Content',\n      headers: originalResponse.headers,\n    });\n\n    slicedResponse.headers.set('Content-Length', slicedBlobSize);\n    slicedResponse.headers.set('Content-Range',\n        `bytes ${effectiveBoundaries.start}-${effectiveBoundaries.end - 1}/` +\n      originalBlob.size);\n\n    return slicedResponse;\n  } catch (error) {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.warn(`Unable to construct a partial response; returning a ` +\n        `416 Range Not Satisfiable response instead.`);\n      logger.groupCollapsed(`View details here.`);\n      logger.log(error);\n      logger.log(request);\n      logger.log(originalResponse);\n      logger.groupEnd();\n    }\n\n    return new Response('', {\n      status: 416,\n      statusText: 'Range Not Satisfiable',\n    });\n  }\n}\n\nexport {createPartialResponse};\n"]},"metadata":{},"sourceType":"module"}