{"ast":null,"code":"(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    g.URLParse = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function () {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = \"function\" == typeof require && require;\n            if (!f && c) return c(i, !0);\n            if (u) return u(i, !0);\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\n            throw a.code = \"MODULE_NOT_FOUND\", a;\n          }\n\n          var p = n[i] = {\n            exports: {}\n          };\n          e[i][0].call(p.exports, function (r) {\n            var n = e[i][1][r];\n            return o(n || r);\n          }, p, p.exports, r, e, n, t);\n        }\n\n        return n[i].exports;\n      }\n\n      for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);\n\n      return o;\n    }\n\n    return r;\n  }()({\n    1: [function (require, module, exports) {\n      (function (global) {\n        'use strict';\n\n        var required = require('requires-port'),\n            qs = require('querystringify'),\n            slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//,\n            protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\S\\s]*)/i,\n            whitespace = '[\\\\x09\\\\x0A\\\\x0B\\\\x0C\\\\x0D\\\\x20\\\\xA0\\\\u1680\\\\u180E\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200A\\\\u202F\\\\u205F\\\\u3000\\\\u2028\\\\u2029\\\\uFEFF]',\n            left = new RegExp('^' + whitespace + '+');\n        /**\n         * Trim a given string.\n         *\n         * @param {String} str String to trim.\n         * @public\n         */\n\n\n        function trimLeft(str) {\n          return (str ? str : '').toString().replace(left, '');\n        }\n        /**\n         * These are the parse rules for the URL parser, it informs the parser\n         * about:\n         *\n         * 0. The char it Needs to parse, if it's a string it should be done using\n         *    indexOf, RegExp using exec and NaN means set as current value.\n         * 1. The property we should set when parsing this value.\n         * 2. Indication if it's backwards or forward parsing, when set as number it's\n         *    the value of extra chars that should be split off.\n         * 3. Inherit from location if non existing in the parser.\n         * 4. `toLowerCase` the resulting value.\n         */\n\n\n        var rules = [['#', 'hash'], // Extract from the back.\n        ['?', 'query'], // Extract from the back.\n        function sanitize(address) {\n          // Sanitize what is left of the address\n          return address.replace('\\\\', '/');\n        }, ['/', 'pathname'], // Extract from the back.\n        ['@', 'auth', 1], // Extract from the front.\n        [NaN, 'host', undefined, 1, 1], // Set left over value.\n        [/:(\\d+)$/, 'port', undefined, 1], // RegExp the back.\n        [NaN, 'hostname', undefined, 1, 1] // Set left over.\n        ];\n        /**\n         * These properties should not be copied or inherited from. This is only needed\n         * for all non blob URL's as a blob URL does not include a hash, only the\n         * origin.\n         *\n         * @type {Object}\n         * @private\n         */\n\n        var ignore = {\n          hash: 1,\n          query: 1\n        };\n        /**\n         * The location object differs when your code is loaded through a normal page,\n         * Worker or through a worker using a blob. And with the blobble begins the\n         * trouble as the location object will contain the URL of the blob, not the\n         * location of the page where our code is loaded in. The actual origin is\n         * encoded in the `pathname` so we can thankfully generate a good \"default\"\n         * location from it so we can generate proper relative URL's again.\n         *\n         * @param {Object|String} loc Optional default location object.\n         * @returns {Object} lolcation object.\n         * @public\n         */\n\n        function lolcation(loc) {\n          var globalVar;\n          if (typeof window !== 'undefined') globalVar = window;else if (typeof global !== 'undefined') globalVar = global;else if (typeof self !== 'undefined') globalVar = self;else globalVar = {};\n          var location = globalVar.location || {};\n          loc = loc || location;\n          var finaldestination = {},\n              type = typeof loc,\n              key;\n\n          if ('blob:' === loc.protocol) {\n            finaldestination = new Url(unescape(loc.pathname), {});\n          } else if ('string' === type) {\n            finaldestination = new Url(loc, {});\n\n            for (key in ignore) delete finaldestination[key];\n          } else if ('object' === type) {\n            for (key in loc) {\n              if (key in ignore) continue;\n              finaldestination[key] = loc[key];\n            }\n\n            if (finaldestination.slashes === undefined) {\n              finaldestination.slashes = slashes.test(loc.href);\n            }\n          }\n\n          return finaldestination;\n        }\n        /**\n         * @typedef ProtocolExtract\n         * @type Object\n         * @property {String} protocol Protocol matched in the URL, in lowercase.\n         * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n         * @property {String} rest Rest of the URL that is not part of the protocol.\n         */\n\n        /**\n         * Extract protocol information from a URL with/without double slash (\"//\").\n         *\n         * @param {String} address URL we want to extract from.\n         * @return {ProtocolExtract} Extracted information.\n         * @private\n         */\n\n\n        function extractProtocol(address) {\n          address = trimLeft(address);\n          var match = protocolre.exec(address);\n          return {\n            protocol: match[1] ? match[1].toLowerCase() : '',\n            slashes: !!match[2],\n            rest: match[3]\n          };\n        }\n        /**\n         * Resolve a relative URL pathname against a base URL pathname.\n         *\n         * @param {String} relative Pathname of the relative URL.\n         * @param {String} base Pathname of the base URL.\n         * @return {String} Resolved pathname.\n         * @private\n         */\n\n\n        function resolve(relative, base) {\n          if (relative === '') return base;\n          var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/')),\n              i = path.length,\n              last = path[i - 1],\n              unshift = false,\n              up = 0;\n\n          while (i--) {\n            if (path[i] === '.') {\n              path.splice(i, 1);\n            } else if (path[i] === '..') {\n              path.splice(i, 1);\n              up++;\n            } else if (up) {\n              if (i === 0) unshift = true;\n              path.splice(i, 1);\n              up--;\n            }\n          }\n\n          if (unshift) path.unshift('');\n          if (last === '.' || last === '..') path.push('');\n          return path.join('/');\n        }\n        /**\n         * The actual URL instance. Instead of returning an object we've opted-in to\n         * create an actual constructor as it's much more memory efficient and\n         * faster and it pleases my OCD.\n         *\n         * It is worth noting that we should not use `URL` as class name to prevent\n         * clashes with the global URL instance that got introduced in browsers.\n         *\n         * @constructor\n         * @param {String} address URL we want to parse.\n         * @param {Object|String} [location] Location defaults for relative paths.\n         * @param {Boolean|Function} [parser] Parser for the query string.\n         * @private\n         */\n\n\n        function Url(address, location, parser) {\n          address = trimLeft(address);\n\n          if (!(this instanceof Url)) {\n            return new Url(address, location, parser);\n          }\n\n          var relative,\n              extracted,\n              parse,\n              instruction,\n              index,\n              key,\n              instructions = rules.slice(),\n              type = typeof location,\n              url = this,\n              i = 0; //\n          // The following if statements allows this module two have compatibility with\n          // 2 different API:\n          //\n          // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n          //    where the boolean indicates that the query string should also be parsed.\n          //\n          // 2. The `URL` interface of the browser which accepts a URL, object as\n          //    arguments. The supplied object will be used as default values / fall-back\n          //    for relative paths.\n          //\n\n          if ('object' !== type && 'string' !== type) {\n            parser = location;\n            location = null;\n          }\n\n          if (parser && 'function' !== typeof parser) parser = qs.parse;\n          location = lolcation(location); //\n          // Extract protocol information before running the instructions.\n          //\n\n          extracted = extractProtocol(address || '');\n          relative = !extracted.protocol && !extracted.slashes;\n          url.slashes = extracted.slashes || relative && location.slashes;\n          url.protocol = extracted.protocol || location.protocol || '';\n          address = extracted.rest; //\n          // When the authority component is absent the URL starts with a path\n          // component.\n          //\n\n          if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];\n\n          for (; i < instructions.length; i++) {\n            instruction = instructions[i];\n\n            if (typeof instruction === 'function') {\n              address = instruction(address);\n              continue;\n            }\n\n            parse = instruction[0];\n            key = instruction[1];\n\n            if (parse !== parse) {\n              url[key] = address;\n            } else if ('string' === typeof parse) {\n              if (~(index = address.indexOf(parse))) {\n                if ('number' === typeof instruction[2]) {\n                  url[key] = address.slice(0, index);\n                  address = address.slice(index + instruction[2]);\n                } else {\n                  url[key] = address.slice(index);\n                  address = address.slice(0, index);\n                }\n              }\n            } else if (index = parse.exec(address)) {\n              url[key] = index[1];\n              address = address.slice(0, index.index);\n            }\n\n            url[key] = url[key] || (relative && instruction[3] ? location[key] || '' : ''); //\n            // Hostname, host and protocol should be lowercased so they can be used to\n            // create a proper `origin`.\n            //\n\n            if (instruction[4]) url[key] = url[key].toLowerCase();\n          } //\n          // Also parse the supplied query string in to an object. If we're supplied\n          // with a custom parser as function use that instead of the default build-in\n          // parser.\n          //\n\n\n          if (parser) url.query = parser(url.query); //\n          // If the URL is relative, resolve the pathname against the base URL.\n          //\n\n          if (relative && location.slashes && url.pathname.charAt(0) !== '/' && (url.pathname !== '' || location.pathname !== '')) {\n            url.pathname = resolve(url.pathname, location.pathname);\n          } //\n          // We should not add port numbers if they are already the default port number\n          // for a given protocol. As the host also contains the port number we're going\n          // override it with the hostname which contains no port number.\n          //\n\n\n          if (!required(url.port, url.protocol)) {\n            url.host = url.hostname;\n            url.port = '';\n          } //\n          // Parse down the `auth` for the username and password.\n          //\n\n\n          url.username = url.password = '';\n\n          if (url.auth) {\n            instruction = url.auth.split(':');\n            url.username = instruction[0] || '';\n            url.password = instruction[1] || '';\n          }\n\n          url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null'; //\n          // The href is just the compiled result.\n          //\n\n          url.href = url.toString();\n        }\n        /**\n         * This is convenience method for changing properties in the URL instance to\n         * insure that they all propagate correctly.\n         *\n         * @param {String} part          Property we need to adjust.\n         * @param {Mixed} value          The newly assigned value.\n         * @param {Boolean|Function} fn  When setting the query, it will be the function\n         *                               used to parse the query.\n         *                               When setting the protocol, double slash will be\n         *                               removed from the final url if it is true.\n         * @returns {URL} URL instance for chaining.\n         * @public\n         */\n\n\n        function set(part, value, fn) {\n          var url = this;\n\n          switch (part) {\n            case 'query':\n              if ('string' === typeof value && value.length) {\n                value = (fn || qs.parse)(value);\n              }\n\n              url[part] = value;\n              break;\n\n            case 'port':\n              url[part] = value;\n\n              if (!required(value, url.protocol)) {\n                url.host = url.hostname;\n                url[part] = '';\n              } else if (value) {\n                url.host = url.hostname + ':' + value;\n              }\n\n              break;\n\n            case 'hostname':\n              url[part] = value;\n              if (url.port) value += ':' + url.port;\n              url.host = value;\n              break;\n\n            case 'host':\n              url[part] = value;\n\n              if (/:\\d+$/.test(value)) {\n                value = value.split(':');\n                url.port = value.pop();\n                url.hostname = value.join(':');\n              } else {\n                url.hostname = value;\n                url.port = '';\n              }\n\n              break;\n\n            case 'protocol':\n              url.protocol = value.toLowerCase();\n              url.slashes = !fn;\n              break;\n\n            case 'pathname':\n            case 'hash':\n              if (value) {\n                var char = part === 'pathname' ? '/' : '#';\n                url[part] = value.charAt(0) !== char ? char + value : value;\n              } else {\n                url[part] = value;\n              }\n\n              break;\n\n            default:\n              url[part] = value;\n          }\n\n          for (var i = 0; i < rules.length; i++) {\n            var ins = rules[i];\n            if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n          }\n\n          url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';\n          url.href = url.toString();\n          return url;\n        }\n        /**\n         * Transform the properties back in to a valid and full URL string.\n         *\n         * @param {Function} stringify Optional query stringify function.\n         * @returns {String} Compiled version of the URL.\n         * @public\n         */\n\n\n        function toString(stringify) {\n          if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n          var query,\n              url = this,\n              protocol = url.protocol;\n          if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n          var result = protocol + (url.slashes ? '//' : '');\n\n          if (url.username) {\n            result += url.username;\n            if (url.password) result += ':' + url.password;\n            result += '@';\n          }\n\n          result += url.host + url.pathname;\n          query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n          if (query) result += '?' !== query.charAt(0) ? '?' + query : query;\n          if (url.hash) result += url.hash;\n          return result;\n        }\n\n        Url.prototype = {\n          set: set,\n          toString: toString\n        }; //\n        // Expose the URL parser and some additional properties that might be useful for\n        // others or testing.\n        //\n\n        Url.extractProtocol = extractProtocol;\n        Url.location = lolcation;\n        Url.trimLeft = trimLeft;\n        Url.qs = qs;\n        module.exports = Url;\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {\n      \"querystringify\": 2,\n      \"requires-port\": 3\n    }],\n    2: [function (require, module, exports) {\n      'use strict';\n\n      var has = Object.prototype.hasOwnProperty;\n      /**\n       * Decode a URI encoded string.\n       *\n       * @param {String} input The URI encoded string.\n       * @returns {String} The decoded string.\n       * @api private\n       */\n\n      function decode(input) {\n        return decodeURIComponent(input.replace(/\\+/g, ' '));\n      }\n      /**\n       * Simple query string parser.\n       *\n       * @param {String} query The query string that needs to be parsed.\n       * @returns {Object}\n       * @api public\n       */\n\n\n      function querystring(query) {\n        var parser = /([^=?&]+)=?([^&]*)/g,\n            result = {},\n            part;\n\n        while (part = parser.exec(query)) {\n          var key = decode(part[1]),\n              value = decode(part[2]); //\n          // Prevent overriding of existing properties. This ensures that build-in\n          // methods like `toString` or __proto__ are not overriden by malicious\n          // querystrings.\n          //\n\n          if (key in result) continue;\n          result[key] = value;\n        }\n\n        return result;\n      }\n      /**\n       * Transform a query string to an object.\n       *\n       * @param {Object} obj Object that should be transformed.\n       * @param {String} prefix Optional prefix.\n       * @returns {String}\n       * @api public\n       */\n\n\n      function querystringify(obj, prefix) {\n        prefix = prefix || '';\n        var pairs = []; //\n        // Optionally prefix with a '?' if needed\n        //\n\n        if ('string' !== typeof prefix) prefix = '?';\n\n        for (var key in obj) {\n          if (has.call(obj, key)) {\n            pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));\n          }\n        }\n\n        return pairs.length ? prefix + pairs.join('&') : '';\n      } //\n      // Expose the module.\n      //\n\n\n      exports.stringify = querystringify;\n      exports.parse = querystring;\n    }, {}],\n    3: [function (require, module, exports) {\n      'use strict';\n      /**\n       * Check if we're required to add a port number.\n       *\n       * @see https://url.spec.whatwg.org/#default-port\n       * @param {Number|String} port Port number we need to check\n       * @param {String} protocol Protocol we need to check against.\n       * @returns {Boolean} Is it a default port for the given protocol\n       * @api private\n       */\n\n      module.exports = function required(port, protocol) {\n        protocol = protocol.split(':')[0];\n        port = +port;\n        if (!port) return false;\n\n        switch (protocol) {\n          case 'http':\n          case 'ws':\n            return port !== 80;\n\n          case 'https':\n          case 'wss':\n            return port !== 443;\n\n          case 'ftp':\n            return port !== 21;\n\n          case 'gopher':\n            return port !== 70;\n\n          case 'file':\n            return false;\n        }\n\n        return port !== 0;\n      };\n    }, {}]\n  }, {}, [1])(1);\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/url-parse/dist/url-parse.js"],"names":["f","exports","module","define","amd","g","window","global","self","URLParse","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","required","qs","slashes","protocolre","whitespace","left","RegExp","trimLeft","str","toString","replace","rules","sanitize","address","NaN","undefined","ignore","hash","query","lolcation","loc","globalVar","location","finaldestination","type","key","protocol","Url","unescape","pathname","test","href","extractProtocol","match","exec","toLowerCase","rest","resolve","relative","base","path","split","slice","concat","last","unshift","up","splice","push","join","parser","extracted","parse","instruction","index","instructions","url","indexOf","charAt","port","host","hostname","username","password","auth","origin","set","part","value","fn","pop","char","ins","stringify","result","prototype","has","Object","hasOwnProperty","decode","input","decodeURIComponent","querystring","querystringify","obj","prefix","pairs","encodeURIComponent"],"mappings":"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","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.URLParse = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar required = require('requires-port')\n  , qs = require('querystringify')\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\S\\s]*)/i\n  , whitespace = '[\\\\x09\\\\x0A\\\\x0B\\\\x0C\\\\x0D\\\\x20\\\\xA0\\\\u1680\\\\u180E\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200A\\\\u202F\\\\u205F\\\\u3000\\\\u2028\\\\u2029\\\\uFEFF]'\n  , left = new RegExp('^'+ whitespace +'+');\n\n/**\n * Trim a given string.\n *\n * @param {String} str String to trim.\n * @public\n */\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(left, '');\n}\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address) {          // Sanitize what is left of the address\n    return address.replace('\\\\', '/');\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d+)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') globalVar = window;\n  else if (typeof global !== 'undefined') globalVar = global;\n  else if (typeof self !== 'undefined') globalVar = self;\n  else globalVar = {};\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address) {\n  address = trimLeft(address);\n  var match = protocolre.exec(address);\n\n  return {\n    protocol: match[1] ? match[1].toLowerCase() : '',\n    slashes: !!match[2],\n    rest: match[3]\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '');\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result = protocol + (url.slashes ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = qs;\n\nmodule.exports = Url;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"querystringify\":2,\"requires-port\":3}],2:[function(require,module,exports){\n'use strict';\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  return decodeURIComponent(input.replace(/\\+/g, ' '));\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  while (part = parser.exec(query)) {\n    var key = decode(part[1])\n      , value = decode(part[2]);\n\n    //\n    // Prevent overriding of existing properties. This ensures that build-in\n    // methods like `toString` or __proto__ are not overriden by malicious\n    // querystrings.\n    //\n    if (key in result) continue;\n    result[key] = value;\n  }\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = [];\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nmodule.exports = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) return false;\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n\n},{}]},{},[1])(1)\n});\n"]},"metadata":{},"sourceType":"script"}