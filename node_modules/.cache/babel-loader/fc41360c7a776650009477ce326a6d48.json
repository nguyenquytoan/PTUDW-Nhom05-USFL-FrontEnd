{"ast":null,"code":"function callbacksFor(object) {\n  let callbacks = object._promiseCallbacks;\n\n  if (!callbacks) {\n    callbacks = object._promiseCallbacks = {};\n  }\n\n  return callbacks;\n}\n/**\n  @class EventTarget\n  @for rsvp\n  @public\n*/\n\n\nexport default {\n  /**\n    `EventTarget.mixin` extends an object with EventTarget methods. For\n    Example:\n     ```javascript\n    import EventTarget from 'rsvp';\n     let object = {};\n     EventTarget.mixin(object);\n     object.on('finished', function(event) {\n      // handle event\n    });\n     object.trigger('finished', { detail: value });\n    ```\n     `EventTarget.mixin` also works with prototypes:\n     ```javascript\n    import EventTarget from 'rsvp';\n     let Person = function() {};\n    EventTarget.mixin(Person.prototype);\n     let yehuda = new Person();\n    let tom = new Person();\n     yehuda.on('poke', function(event) {\n      console.log('Yehuda says OW');\n    });\n     tom.on('poke', function(event) {\n      console.log('Tom says OW');\n    });\n     yehuda.trigger('poke');\n    tom.trigger('poke');\n    ```\n     @method mixin\n    @for rsvp\n    @private\n    @param {Object} object object to extend with EventTarget methods\n  */\n  mixin(object) {\n    object.on = this.on;\n    object.off = this.off;\n    object.trigger = this.trigger;\n    object._promiseCallbacks = undefined;\n    return object;\n  },\n\n  /**\n    Registers a callback to be executed when `eventName` is triggered\n     ```javascript\n    object.on('event', function(eventInfo){\n      // handle the event\n    });\n     object.trigger('event');\n    ```\n     @method on\n    @for EventTarget\n    @private\n    @param {String} eventName name of the event to listen for\n    @param {Function} callback function to be called when the event is triggered.\n  */\n  on(eventName, callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback must be a function');\n    }\n\n    let allCallbacks = callbacksFor(this);\n    let callbacks = allCallbacks[eventName];\n\n    if (!callbacks) {\n      callbacks = allCallbacks[eventName] = [];\n    }\n\n    if (callbacks.indexOf(callback) === -1) {\n      callbacks.push(callback);\n    }\n  },\n\n  /**\n    You can use `off` to stop firing a particular callback for an event:\n     ```javascript\n    function doStuff() { // do stuff! }\n    object.on('stuff', doStuff);\n     object.trigger('stuff'); // doStuff will be called\n     // Unregister ONLY the doStuff callback\n    object.off('stuff', doStuff);\n    object.trigger('stuff'); // doStuff will NOT be called\n    ```\n     If you don't pass a `callback` argument to `off`, ALL callbacks for the\n    event will not be executed when the event fires. For example:\n     ```javascript\n    let callback1 = function(){};\n    let callback2 = function(){};\n     object.on('stuff', callback1);\n    object.on('stuff', callback2);\n     object.trigger('stuff'); // callback1 and callback2 will be executed.\n     object.off('stuff');\n    object.trigger('stuff'); // callback1 and callback2 will not be executed!\n    ```\n     @method off\n    @for rsvp\n    @private\n    @param {String} eventName event to stop listening to\n    @param {Function} [callback] optional argument. If given, only the function\n    given will be removed from the event's callback queue. If no `callback`\n    argument is given, all callbacks will be removed from the event's callback\n    queue.\n  */\n  off(eventName, callback) {\n    let allCallbacks = callbacksFor(this);\n\n    if (!callback) {\n      allCallbacks[eventName] = [];\n      return;\n    }\n\n    let callbacks = allCallbacks[eventName];\n    let index = callbacks.indexOf(callback);\n\n    if (index !== -1) {\n      callbacks.splice(index, 1);\n    }\n  },\n\n  /**\n    Use `trigger` to fire custom events. For example:\n     ```javascript\n    object.on('foo', function(){\n      console.log('foo event happened!');\n    });\n    object.trigger('foo');\n    // 'foo event happened!' logged to the console\n    ```\n     You can also pass a value as a second argument to `trigger` that will be\n    passed as an argument to all event listeners for the event:\n     ```javascript\n    object.on('foo', function(value){\n      console.log(value.name);\n    });\n     object.trigger('foo', { name: 'bar' });\n    // 'bar' logged to the console\n    ```\n     @method trigger\n    @for rsvp\n    @private\n    @param {String} eventName name of the event to be triggered\n    @param {*} [options] optional value to be passed to any event handlers for\n    the given `eventName`\n  */\n  trigger(eventName, options, label) {\n    let allCallbacks = callbacksFor(this);\n    let callbacks = allCallbacks[eventName];\n\n    if (callbacks) {\n      // Don't cache the callbacks.length since it may grow\n      let callback;\n\n      for (let i = 0; i < callbacks.length; i++) {\n        callback = callbacks[i];\n        callback(options, label);\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/rsvp/lib/rsvp/events.js"],"names":["callbacksFor","object","callbacks","_promiseCallbacks","mixin","on","off","trigger","undefined","eventName","callback","TypeError","allCallbacks","indexOf","push","index","splice","options","label","i","length"],"mappings":"AACA,SAASA,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B,MAAIC,SAAS,GAAGD,MAAM,CAACE,iBAAvB;;AAEA,MAAI,CAACD,SAAL,EAAgB;AACdA,IAAAA,SAAS,GAAGD,MAAM,CAACE,iBAAP,GAA2B,EAAvC;AACD;;AAED,SAAOD,SAAP;AACD;AAED;;;;;;;AAKA,eAAe;AAEb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CAE,EAAAA,KAAK,CAACH,MAAD,EAAS;AACZA,IAAAA,MAAM,CAACI,EAAP,GAAiB,KAAKA,EAAtB;AACAJ,IAAAA,MAAM,CAACK,GAAP,GAAiB,KAAKA,GAAtB;AACAL,IAAAA,MAAM,CAACM,OAAP,GAAiB,KAAKA,OAAtB;AACAN,IAAAA,MAAM,CAACE,iBAAP,GAA2BK,SAA3B;AACA,WAAOP,MAAP;AACD,GAtDY;;AAwDb;;;;;;;;;;;;;;AAiBAI,EAAAA,EAAE,CAACI,SAAD,EAAYC,QAAZ,EAAsB;AACtB,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,YAAM,IAAIC,SAAJ,CAAc,6BAAd,CAAN;AACD;;AAED,QAAIC,YAAY,GAAGZ,YAAY,CAAC,IAAD,CAA/B;AACA,QAAIE,SAAS,GAAGU,YAAY,CAACH,SAAD,CAA5B;;AAEA,QAAI,CAACP,SAAL,EAAgB;AACdA,MAAAA,SAAS,GAAGU,YAAY,CAACH,SAAD,CAAZ,GAA0B,EAAtC;AACD;;AAED,QAAIP,SAAS,CAACW,OAAV,CAAkBH,QAAlB,MAAgC,CAAC,CAArC,EAAwC;AACtCR,MAAAA,SAAS,CAACY,IAAV,CAAeJ,QAAf;AACD;AACF,GAxFY;;AA0Fb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCAJ,EAAAA,GAAG,CAACG,SAAD,EAAYC,QAAZ,EAAsB;AACvB,QAAIE,YAAY,GAAGZ,YAAY,CAAC,IAAD,CAA/B;;AAEA,QAAI,CAACU,QAAL,EAAe;AACbE,MAAAA,YAAY,CAACH,SAAD,CAAZ,GAA0B,EAA1B;AACA;AACD;;AAED,QAAIP,SAAS,GAAGU,YAAY,CAACH,SAAD,CAA5B;AACA,QAAIM,KAAK,GAAGb,SAAS,CAACW,OAAV,CAAkBH,QAAlB,CAAZ;;AAEA,QAAIK,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBb,MAAAA,SAAS,CAACc,MAAV,CAAiBD,KAAjB,EAAwB,CAAxB;AACD;AACF,GA/IY;;AAiJb;;;;;;;;;;;;;;;;;;;;;;;;;AA8BAR,EAAAA,OAAO,CAACE,SAAD,EAAYQ,OAAZ,EAAqBC,KAArB,EAA4B;AACjC,QAAIN,YAAY,GAAGZ,YAAY,CAAC,IAAD,CAA/B;AAEA,QAAIE,SAAS,GAAGU,YAAY,CAACH,SAAD,CAA5B;;AACA,QAAIP,SAAJ,EAAe;AACb;AACA,UAAIQ,QAAJ;;AACA,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,SAAS,CAACkB,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCT,QAAAA,QAAQ,GAAGR,SAAS,CAACiB,CAAD,CAApB;AACAT,QAAAA,QAAQ,CAACO,OAAD,EAAUC,KAAV,CAAR;AACD;AACF;AACF;;AA3LY,CAAf","sourcesContent":["\nfunction callbacksFor(object) {\n  let callbacks = object._promiseCallbacks;\n\n  if (!callbacks) {\n    callbacks = object._promiseCallbacks = {};\n  }\n\n  return callbacks;\n}\n\n/**\n  @class EventTarget\n  @for rsvp\n  @public\n*/\nexport default {\n\n  /**\n    `EventTarget.mixin` extends an object with EventTarget methods. For\n    Example:\n\n    ```javascript\n    import EventTarget from 'rsvp';\n\n    let object = {};\n\n    EventTarget.mixin(object);\n\n    object.on('finished', function(event) {\n      // handle event\n    });\n\n    object.trigger('finished', { detail: value });\n    ```\n\n    `EventTarget.mixin` also works with prototypes:\n\n    ```javascript\n    import EventTarget from 'rsvp';\n\n    let Person = function() {};\n    EventTarget.mixin(Person.prototype);\n\n    let yehuda = new Person();\n    let tom = new Person();\n\n    yehuda.on('poke', function(event) {\n      console.log('Yehuda says OW');\n    });\n\n    tom.on('poke', function(event) {\n      console.log('Tom says OW');\n    });\n\n    yehuda.trigger('poke');\n    tom.trigger('poke');\n    ```\n\n    @method mixin\n    @for rsvp\n    @private\n    @param {Object} object object to extend with EventTarget methods\n  */\n  mixin(object) {\n    object.on      = this.on;\n    object.off     = this.off;\n    object.trigger = this.trigger;\n    object._promiseCallbacks = undefined;\n    return object;\n  },\n\n  /**\n    Registers a callback to be executed when `eventName` is triggered\n\n    ```javascript\n    object.on('event', function(eventInfo){\n      // handle the event\n    });\n\n    object.trigger('event');\n    ```\n\n    @method on\n    @for EventTarget\n    @private\n    @param {String} eventName name of the event to listen for\n    @param {Function} callback function to be called when the event is triggered.\n  */\n  on(eventName, callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback must be a function');\n    }\n\n    let allCallbacks = callbacksFor(this);\n    let callbacks = allCallbacks[eventName];\n\n    if (!callbacks) {\n      callbacks = allCallbacks[eventName] = [];\n    }\n\n    if (callbacks.indexOf(callback) === -1) {\n      callbacks.push(callback);\n    }\n  },\n\n  /**\n    You can use `off` to stop firing a particular callback for an event:\n\n    ```javascript\n    function doStuff() { // do stuff! }\n    object.on('stuff', doStuff);\n\n    object.trigger('stuff'); // doStuff will be called\n\n    // Unregister ONLY the doStuff callback\n    object.off('stuff', doStuff);\n    object.trigger('stuff'); // doStuff will NOT be called\n    ```\n\n    If you don't pass a `callback` argument to `off`, ALL callbacks for the\n    event will not be executed when the event fires. For example:\n\n    ```javascript\n    let callback1 = function(){};\n    let callback2 = function(){};\n\n    object.on('stuff', callback1);\n    object.on('stuff', callback2);\n\n    object.trigger('stuff'); // callback1 and callback2 will be executed.\n\n    object.off('stuff');\n    object.trigger('stuff'); // callback1 and callback2 will not be executed!\n    ```\n\n    @method off\n    @for rsvp\n    @private\n    @param {String} eventName event to stop listening to\n    @param {Function} [callback] optional argument. If given, only the function\n    given will be removed from the event's callback queue. If no `callback`\n    argument is given, all callbacks will be removed from the event's callback\n    queue.\n  */\n  off(eventName, callback) {\n    let allCallbacks = callbacksFor(this);\n\n    if (!callback) {\n      allCallbacks[eventName] = [];\n      return;\n    }\n\n    let callbacks = allCallbacks[eventName];\n    let index = callbacks.indexOf(callback);\n\n    if (index !== -1) {\n      callbacks.splice(index, 1);\n    }\n  },\n\n  /**\n    Use `trigger` to fire custom events. For example:\n\n    ```javascript\n    object.on('foo', function(){\n      console.log('foo event happened!');\n    });\n    object.trigger('foo');\n    // 'foo event happened!' logged to the console\n    ```\n\n    You can also pass a value as a second argument to `trigger` that will be\n    passed as an argument to all event listeners for the event:\n\n    ```javascript\n    object.on('foo', function(value){\n      console.log(value.name);\n    });\n\n    object.trigger('foo', { name: 'bar' });\n    // 'bar' logged to the console\n    ```\n\n    @method trigger\n    @for rsvp\n    @private\n    @param {String} eventName name of the event to be triggered\n    @param {*} [options] optional value to be passed to any event handlers for\n    the given `eventName`\n  */\n  trigger(eventName, options, label) {\n    let allCallbacks = callbacksFor(this);\n\n    let callbacks = allCallbacks[eventName];\n    if (callbacks) {\n      // Don't cache the callbacks.length since it may grow\n      let callback;\n      for (let i = 0; i < callbacks.length; i++) {\n        callback = callbacks[i];\n        callback(options, label);\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}