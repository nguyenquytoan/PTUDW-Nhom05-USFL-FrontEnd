{"ast":null,"code":"//      \n'use strict'; // Resolves property names or property paths defined with period-delimited\n// strings or arrays of strings. Property names that are found on the source\n// object are used directly (even if they include a period).\n// Nested property names that include periods, within a path, are only\n// understood in array paths.\n\nfunction getPropertyByPath(source, path) {\n  if (typeof path === 'string' && source.hasOwnProperty(path)) {\n    return source[path];\n  }\n\n  const parsedPath = typeof path === 'string' ? path.split('.') : path;\n  return parsedPath.reduce((previous, key) => {\n    if (previous === undefined) {\n      return previous;\n    }\n\n    return previous[key];\n  }, source);\n}\n\nmodule.exports = getPropertyByPath;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/cosmiconfig/dist/getPropertyByPath.js"],"names":["getPropertyByPath","source","path","hasOwnProperty","parsedPath","split","reduce","previous","key","undefined","module","exports"],"mappings":"AAAA;AACA,a,CAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,iBAAT,CAA2BC,MAA3B,EAA2CC,IAA3C,EAA8E;AAC5E,MAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BD,MAAM,CAACE,cAAP,CAAsBD,IAAtB,CAAhC,EAA6D;AAC3D,WAAOD,MAAM,CAACC,IAAD,CAAb;AACD;;AAED,QAAME,UAAU,GAAG,OAAOF,IAAP,KAAgB,QAAhB,GAA2BA,IAAI,CAACG,KAAL,CAAW,GAAX,CAA3B,GAA6CH,IAAhE;AACA,SAAOE,UAAU,CAACE,MAAX,CAAkB,CAACC,QAAD,EAAWC,GAAX,KAAmB;AAC1C,QAAID,QAAQ,KAAKE,SAAjB,EAA4B;AAC1B,aAAOF,QAAP;AACD;;AACD,WAAOA,QAAQ,CAACC,GAAD,CAAf;AACD,GALM,EAKJP,MALI,CAAP;AAMD;;AAEDS,MAAM,CAACC,OAAP,GAAiBX,iBAAjB","sourcesContent":["//      \n'use strict';\n\n// Resolves property names or property paths defined with period-delimited\n// strings or arrays of strings. Property names that are found on the source\n// object are used directly (even if they include a period).\n// Nested property names that include periods, within a path, are only\n// understood in array paths.\nfunction getPropertyByPath(source        , path                        )      {\n  if (typeof path === 'string' && source.hasOwnProperty(path)) {\n    return source[path];\n  }\n\n  const parsedPath = typeof path === 'string' ? path.split('.') : path;\n  return parsedPath.reduce((previous, key) => {\n    if (previous === undefined) {\n      return previous;\n    }\n    return previous[key];\n  }, source);\n}\n\nmodule.exports = getPropertyByPath;\n"]},"metadata":{},"sourceType":"script"}