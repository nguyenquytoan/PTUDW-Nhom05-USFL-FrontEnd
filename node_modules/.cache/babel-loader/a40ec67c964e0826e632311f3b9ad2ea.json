{"ast":null,"code":"/**\n * @fileoverview A rule to disallow duplicate name in class members.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow duplicate class members\",\n      category: \"ECMAScript 6\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-dupe-class-members\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Duplicate name '{{name}}'.\"\n    }\n  },\n\n  create(context) {\n    let stack = [];\n    /**\n     * Gets state of a given member name.\n     * @param {string} name A name of a member.\n     * @param {boolean} isStatic A flag which specifies that is a static member.\n     * @returns {Object} A state of a given member name.\n     *   - retv.init {boolean} A flag which shows the name is declared as normal member.\n     *   - retv.get {boolean} A flag which shows the name is declared as getter.\n     *   - retv.set {boolean} A flag which shows the name is declared as setter.\n     */\n\n    function getState(name, isStatic) {\n      const stateMap = stack[stack.length - 1];\n      const key = `$${name}`; // to avoid \"__proto__\".\n\n      if (!stateMap[key]) {\n        stateMap[key] = {\n          nonStatic: {\n            init: false,\n            get: false,\n            set: false\n          },\n          static: {\n            init: false,\n            get: false,\n            set: false\n          }\n        };\n      }\n\n      return stateMap[key][isStatic ? \"static\" : \"nonStatic\"];\n    }\n    /**\n     * Gets the name text of a given node.\n     * @param {ASTNode} node A node to get the name.\n     * @returns {string} The name text of the node.\n     */\n\n\n    function getName(node) {\n      switch (node.type) {\n        case \"Identifier\":\n          return node.name;\n\n        case \"Literal\":\n          return String(node.value);\n\n        /* istanbul ignore next: syntax error */\n\n        default:\n          return \"\";\n      }\n    }\n\n    return {\n      // Initializes the stack of state of member declarations.\n      Program() {\n        stack = [];\n      },\n\n      // Initializes state of member declarations for the class.\n      ClassBody() {\n        stack.push(Object.create(null));\n      },\n\n      // Disposes the state for the class.\n      \"ClassBody:exit\"() {\n        stack.pop();\n      },\n\n      // Reports the node if its name has been declared already.\n      MethodDefinition(node) {\n        if (node.computed) {\n          return;\n        }\n\n        const name = getName(node.key);\n        const state = getState(name, node.static);\n        let isDuplicate = false;\n\n        if (node.kind === \"get\") {\n          isDuplicate = state.init || state.get;\n          state.get = true;\n        } else if (node.kind === \"set\") {\n          isDuplicate = state.init || state.set;\n          state.set = true;\n        } else {\n          isDuplicate = state.init || state.get || state.set;\n          state.init = true;\n        }\n\n        if (isDuplicate) {\n          context.report({\n            node,\n            messageId: \"unexpected\",\n            data: {\n              name\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-dupe-class-members.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","stack","getState","name","isStatic","stateMap","length","key","nonStatic","init","get","set","static","getName","node","String","value","Program","ClassBody","push","Object","pop","MethodDefinition","computed","state","isDuplicate","kind","report","messageId","data"],"mappings":"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","sourcesContent":["/**\n * @fileoverview A rule to disallow duplicate name in class members.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow duplicate class members\",\n            category: \"ECMAScript 6\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-dupe-class-members\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Duplicate name '{{name}}'.\"\n        }\n    },\n\n    create(context) {\n        let stack = [];\n\n        /**\n         * Gets state of a given member name.\n         * @param {string} name A name of a member.\n         * @param {boolean} isStatic A flag which specifies that is a static member.\n         * @returns {Object} A state of a given member name.\n         *   - retv.init {boolean} A flag which shows the name is declared as normal member.\n         *   - retv.get {boolean} A flag which shows the name is declared as getter.\n         *   - retv.set {boolean} A flag which shows the name is declared as setter.\n         */\n        function getState(name, isStatic) {\n            const stateMap = stack[stack.length - 1];\n            const key = `$${name}`; // to avoid \"__proto__\".\n\n            if (!stateMap[key]) {\n                stateMap[key] = {\n                    nonStatic: { init: false, get: false, set: false },\n                    static: { init: false, get: false, set: false }\n                };\n            }\n\n            return stateMap[key][isStatic ? \"static\" : \"nonStatic\"];\n        }\n\n        /**\n         * Gets the name text of a given node.\n         * @param {ASTNode} node A node to get the name.\n         * @returns {string} The name text of the node.\n         */\n        function getName(node) {\n            switch (node.type) {\n                case \"Identifier\": return node.name;\n                case \"Literal\": return String(node.value);\n\n                /* istanbul ignore next: syntax error */\n                default: return \"\";\n            }\n        }\n\n        return {\n\n            // Initializes the stack of state of member declarations.\n            Program() {\n                stack = [];\n            },\n\n            // Initializes state of member declarations for the class.\n            ClassBody() {\n                stack.push(Object.create(null));\n            },\n\n            // Disposes the state for the class.\n            \"ClassBody:exit\"() {\n                stack.pop();\n            },\n\n            // Reports the node if its name has been declared already.\n            MethodDefinition(node) {\n                if (node.computed) {\n                    return;\n                }\n\n                const name = getName(node.key);\n                const state = getState(name, node.static);\n                let isDuplicate = false;\n\n                if (node.kind === \"get\") {\n                    isDuplicate = (state.init || state.get);\n                    state.get = true;\n                } else if (node.kind === \"set\") {\n                    isDuplicate = (state.init || state.set);\n                    state.set = true;\n                } else {\n                    isDuplicate = (state.init || state.get || state.set);\n                    state.init = true;\n                }\n\n                if (isDuplicate) {\n                    context.report({ node, messageId: \"unexpected\", data: { name } });\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}