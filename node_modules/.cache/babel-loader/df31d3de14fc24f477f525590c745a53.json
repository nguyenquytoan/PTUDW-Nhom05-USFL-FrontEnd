{"ast":null,"code":"var Marker = require('../../tokenizer/marker');\n\nvar Selector = {\n  ADJACENT_SIBLING: '+',\n  DESCENDANT: '>',\n  DOT: '.',\n  HASH: '#',\n  NON_ADJACENT_SIBLING: '~',\n  PSEUDO: ':'\n};\nvar LETTER_PATTERN = /[a-zA-Z]/;\nvar NOT_PREFIX = ':not(';\nvar SEPARATOR_PATTERN = /[\\s,\\(>~\\+]/;\n\nfunction specificity(selector) {\n  var result = [0, 0, 0];\n  var character;\n  var isEscaped;\n  var isSingleQuoted;\n  var isDoubleQuoted;\n  var roundBracketLevel = 0;\n  var couldIntroduceNewTypeSelector;\n  var withinNotPseudoClass = false;\n  var wasPseudoClass = false;\n  var i, l;\n\n  for (i = 0, l = selector.length; i < l; i++) {\n    character = selector[i];\n\n    if (isEscaped) {// noop\n    } else if (character == Marker.SINGLE_QUOTE && !isDoubleQuoted && !isSingleQuoted) {\n      isSingleQuoted = true;\n    } else if (character == Marker.SINGLE_QUOTE && !isDoubleQuoted && isSingleQuoted) {\n      isSingleQuoted = false;\n    } else if (character == Marker.DOUBLE_QUOTE && !isDoubleQuoted && !isSingleQuoted) {\n      isDoubleQuoted = true;\n    } else if (character == Marker.DOUBLE_QUOTE && isDoubleQuoted && !isSingleQuoted) {\n      isDoubleQuoted = false;\n    } else if (isSingleQuoted || isDoubleQuoted) {\n      continue;\n    } else if (roundBracketLevel > 0 && !withinNotPseudoClass) {// noop\n    } else if (character == Marker.OPEN_ROUND_BRACKET) {\n      roundBracketLevel++;\n    } else if (character == Marker.CLOSE_ROUND_BRACKET && roundBracketLevel == 1) {\n      roundBracketLevel--;\n      withinNotPseudoClass = false;\n    } else if (character == Marker.CLOSE_ROUND_BRACKET) {\n      roundBracketLevel--;\n    } else if (character == Selector.HASH) {\n      result[0]++;\n    } else if (character == Selector.DOT || character == Marker.OPEN_SQUARE_BRACKET) {\n      result[1]++;\n    } else if (character == Selector.PSEUDO && !wasPseudoClass && !isNotPseudoClass(selector, i)) {\n      result[1]++;\n      withinNotPseudoClass = false;\n    } else if (character == Selector.PSEUDO) {\n      withinNotPseudoClass = true;\n    } else if ((i === 0 || couldIntroduceNewTypeSelector) && LETTER_PATTERN.test(character)) {\n      result[2]++;\n    }\n\n    isEscaped = character == Marker.BACK_SLASH;\n    wasPseudoClass = character == Selector.PSEUDO;\n    couldIntroduceNewTypeSelector = !isEscaped && SEPARATOR_PATTERN.test(character);\n  }\n\n  return result;\n}\n\nfunction isNotPseudoClass(selector, index) {\n  return selector.indexOf(NOT_PREFIX, index) === index;\n}\n\nmodule.exports = specificity;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/clean-css/lib/optimizer/level-2/specificity.js"],"names":["Marker","require","Selector","ADJACENT_SIBLING","DESCENDANT","DOT","HASH","NON_ADJACENT_SIBLING","PSEUDO","LETTER_PATTERN","NOT_PREFIX","SEPARATOR_PATTERN","specificity","selector","result","character","isEscaped","isSingleQuoted","isDoubleQuoted","roundBracketLevel","couldIntroduceNewTypeSelector","withinNotPseudoClass","wasPseudoClass","i","l","length","SINGLE_QUOTE","DOUBLE_QUOTE","OPEN_ROUND_BRACKET","CLOSE_ROUND_BRACKET","OPEN_SQUARE_BRACKET","isNotPseudoClass","test","BACK_SLASH","index","indexOf","module","exports"],"mappings":"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","sourcesContent":["var Marker = require('../../tokenizer/marker');\n\nvar Selector = {\n  ADJACENT_SIBLING: '+',\n  DESCENDANT: '>',\n  DOT: '.',\n  HASH: '#',\n  NON_ADJACENT_SIBLING: '~',\n  PSEUDO: ':'\n};\n\nvar LETTER_PATTERN = /[a-zA-Z]/;\nvar NOT_PREFIX = ':not(';\nvar SEPARATOR_PATTERN = /[\\s,\\(>~\\+]/;\n\nfunction specificity(selector) {\n  var result = [0, 0, 0];\n  var character;\n  var isEscaped;\n  var isSingleQuoted;\n  var isDoubleQuoted;\n  var roundBracketLevel = 0;\n  var couldIntroduceNewTypeSelector;\n  var withinNotPseudoClass = false;\n  var wasPseudoClass = false;\n  var i, l;\n\n  for (i = 0, l = selector.length; i < l; i++) {\n    character = selector[i];\n\n    if (isEscaped) {\n      // noop\n    } else if (character == Marker.SINGLE_QUOTE && !isDoubleQuoted && !isSingleQuoted) {\n      isSingleQuoted = true;\n    } else if (character == Marker.SINGLE_QUOTE && !isDoubleQuoted && isSingleQuoted) {\n      isSingleQuoted = false;\n    } else if (character == Marker.DOUBLE_QUOTE && !isDoubleQuoted && !isSingleQuoted) {\n      isDoubleQuoted = true;\n    } else if (character == Marker.DOUBLE_QUOTE && isDoubleQuoted && !isSingleQuoted) {\n      isDoubleQuoted = false;\n    } else if (isSingleQuoted || isDoubleQuoted) {\n      continue;\n    } else if (roundBracketLevel > 0 && !withinNotPseudoClass) {\n      // noop\n    } else if (character == Marker.OPEN_ROUND_BRACKET) {\n      roundBracketLevel++;\n    } else if (character == Marker.CLOSE_ROUND_BRACKET && roundBracketLevel == 1) {\n      roundBracketLevel--;\n      withinNotPseudoClass = false;\n    } else if (character == Marker.CLOSE_ROUND_BRACKET) {\n      roundBracketLevel--;\n    } else if (character == Selector.HASH) {\n      result[0]++;\n    } else if (character == Selector.DOT || character == Marker.OPEN_SQUARE_BRACKET) {\n      result[1]++;\n    } else if (character == Selector.PSEUDO && !wasPseudoClass && !isNotPseudoClass(selector, i)) {\n      result[1]++;\n      withinNotPseudoClass = false;\n    } else if (character == Selector.PSEUDO) {\n      withinNotPseudoClass = true;\n    } else if ((i === 0 || couldIntroduceNewTypeSelector) && LETTER_PATTERN.test(character)) {\n      result[2]++;\n    }\n\n    isEscaped = character == Marker.BACK_SLASH;\n    wasPseudoClass = character == Selector.PSEUDO;\n    couldIntroduceNewTypeSelector = !isEscaped && SEPARATOR_PATTERN.test(character);\n  }\n\n  return result;\n}\n\nfunction isNotPseudoClass(selector, index) {\n  return selector.indexOf(NOT_PREFIX, index) === index;\n}\n\nmodule.exports = specificity;\n"]},"metadata":{},"sourceType":"script"}