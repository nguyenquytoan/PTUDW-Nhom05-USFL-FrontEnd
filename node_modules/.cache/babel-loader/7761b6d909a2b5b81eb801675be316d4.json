{"ast":null,"code":"function resolveMemberExpressions(object = {}, property = {}) {\n  if (object.type === 'JSXMemberExpression') {\n    return `${resolveMemberExpressions(object.object, object.property)}.${property.name}`;\n  }\n\n  return `${object.name}.${property.name}`;\n}\n/**\n * Returns the tagName associated with a JSXElement.\n */\n\n\nexport default function elementType(node = {}) {\n  const {\n    name\n  } = node;\n\n  if (!name) {\n    throw new Error('The argument provided is not a JSXElement node.');\n  }\n\n  if (name.type === 'JSXMemberExpression') {\n    const {\n      object = {},\n      property = {}\n    } = name;\n    return resolveMemberExpressions(object, property);\n  }\n\n  if (name.type === 'JSXNamespacedName') {\n    return `${name.namespace.name}:${name.name.name}`;\n  }\n\n  return node.name.name;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/src/elementType.js"],"names":["resolveMemberExpressions","object","property","type","name","elementType","node","Error","namespace"],"mappings":"AAAA,SAASA,wBAAT,CAAkCC,MAAM,GAAG,EAA3C,EAA+CC,QAAQ,GAAG,EAA1D,EAA8D;AAC5D,MAAID,MAAM,CAACE,IAAP,KAAgB,qBAApB,EAA2C;AACzC,WAAQ,GAAEH,wBAAwB,CAACC,MAAM,CAACA,MAAR,EAAgBA,MAAM,CAACC,QAAvB,CAAiC,IAAGA,QAAQ,CAACE,IAAK,EAApF;AACD;;AAED,SAAQ,GAAEH,MAAM,CAACG,IAAK,IAAGF,QAAQ,CAACE,IAAK,EAAvC;AACD;AAED;;;;;AAGA,eAAe,SAASC,WAAT,CAAqBC,IAAI,GAAG,EAA5B,EAAgC;AAC7C,QAAM;AAAEF,IAAAA;AAAF,MAAWE,IAAjB;;AAEA,MAAI,CAACF,IAAL,EAAW;AACT,UAAM,IAAIG,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,MAAIH,IAAI,CAACD,IAAL,KAAc,qBAAlB,EAAyC;AACvC,UAAM;AAAEF,MAAAA,MAAM,GAAG,EAAX;AAAeC,MAAAA,QAAQ,GAAG;AAA1B,QAAiCE,IAAvC;AACA,WAAOJ,wBAAwB,CAACC,MAAD,EAASC,QAAT,CAA/B;AACD;;AAED,MAAIE,IAAI,CAACD,IAAL,KAAc,mBAAlB,EAAuC;AACrC,WAAQ,GAAEC,IAAI,CAACI,SAAL,CAAeJ,IAAK,IAAGA,IAAI,CAACA,IAAL,CAAUA,IAAK,EAAhD;AACD;;AAED,SAAOE,IAAI,CAACF,IAAL,CAAUA,IAAjB;AACD","sourcesContent":["function resolveMemberExpressions(object = {}, property = {}) {\n  if (object.type === 'JSXMemberExpression') {\n    return `${resolveMemberExpressions(object.object, object.property)}.${property.name}`;\n  }\n\n  return `${object.name}.${property.name}`;\n}\n\n/**\n * Returns the tagName associated with a JSXElement.\n */\nexport default function elementType(node = {}) {\n  const { name } = node;\n\n  if (!name) {\n    throw new Error('The argument provided is not a JSXElement node.');\n  }\n\n  if (name.type === 'JSXMemberExpression') {\n    const { object = {}, property = {} } = name;\n    return resolveMemberExpressions(object, property);\n  }\n\n  if (name.type === 'JSXNamespacedName') {\n    return `${name.namespace.name}:${name.name.name}`;\n  }\n\n  return node.name.name;\n}\n"]},"metadata":{},"sourceType":"module"}