{"ast":null,"code":"/**\n * Extractor function for a LogicalExpression type value node.\n * A logical expression is `a && b` or `a || b`, so we evaluate both sides\n * and return the extracted value of the expression.\n *\n * @param - value - AST Value object with type `LogicalExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromLogicalExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('./index.js').default;\n\n  const {\n    operator,\n    left,\n    right\n  } = value;\n  const leftVal = getValue(left);\n  const rightVal = getValue(right);\n\n  if (operator === '&&') {\n    return leftVal && rightVal;\n  }\n\n  if (operator === '??') {\n    // return leftVal ?? rightVal; // TODO: update to babel 7\n    return leftVal === null || typeof leftVal === 'undefined' ? rightVal : leftVal;\n  }\n\n  return leftVal || rightVal;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/jsx-ast-utils/src/values/expressions/LogicalExpression.js"],"names":["extractValueFromLogicalExpression","value","getValue","require","default","operator","left","right","leftVal","rightVal"],"mappings":"AAAA;;;;;;;;AAQA,eAAe,SAASA,iCAAT,CAA2CC,KAA3C,EAAkD;AAC/D;AACA,QAAMC,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBC,OAAvC;;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,IAAZ;AAAkBC,IAAAA;AAAlB,MAA4BN,KAAlC;AACA,QAAMO,OAAO,GAAGN,QAAQ,CAACI,IAAD,CAAxB;AACA,QAAMG,QAAQ,GAAGP,QAAQ,CAACK,KAAD,CAAzB;;AAEA,MAAIF,QAAQ,KAAK,IAAjB,EAAuB;AACrB,WAAOG,OAAO,IAAIC,QAAlB;AACD;;AACD,MAAIJ,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA,WAAQG,OAAO,KAAK,IAAZ,IAAoB,OAAOA,OAAP,KAAmB,WAAxC,GAAuDC,QAAvD,GAAkED,OAAzE;AACD;;AACD,SAAOA,OAAO,IAAIC,QAAlB;AACD","sourcesContent":["/**\n * Extractor function for a LogicalExpression type value node.\n * A logical expression is `a && b` or `a || b`, so we evaluate both sides\n * and return the extracted value of the expression.\n *\n * @param - value - AST Value object with type `LogicalExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromLogicalExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('./index.js').default;\n  const { operator, left, right } = value;\n  const leftVal = getValue(left);\n  const rightVal = getValue(right);\n\n  if (operator === '&&') {\n    return leftVal && rightVal;\n  }\n  if (operator === '??') {\n    // return leftVal ?? rightVal; // TODO: update to babel 7\n    return (leftVal === null || typeof leftVal === 'undefined') ? rightVal : leftVal;\n  }\n  return leftVal || rightVal;\n}\n"]},"metadata":{},"sourceType":"module"}