{"ast":null,"code":"/*\n   This file is the executable run by watchexec\n   when a change is detected.\n\n   It will extract changes from the environment variables\n   set by watchexec and write to stdout in a format\n   readable by the file `../watchexec_watcher.js`.\n*/\n'use strict';\n\nconst {\n  EOL\n} = require('os');\n\nfunction withPrefixes(prefixes) {\n  return function withPrefix(arr, i) {\n    return arr.map(str => {\n      return `${prefixes[i]} ${str}`;\n    });\n  };\n}\n\nlet allPrefixes = ['write', 'rename', 'remove', 'create'];\n\nfunction extractChanges(context) {\n  const {\n    WATCHEXEC_COMMON_PATH,\n    WATCHEXEC_WRITTEN_PATH,\n    WATCHEXEC_RENAMED_PATH,\n    WATCHEXEC_REMOVED_PATH,\n    WATCHEXEC_CREATED_PATH\n  } = context;\n  let events = [WATCHEXEC_WRITTEN_PATH, WATCHEXEC_RENAMED_PATH, WATCHEXEC_REMOVED_PATH, WATCHEXEC_CREATED_PATH];\n  let currentPrefixes = events.map((l, i) => l && allPrefixes[i]).filter(Boolean);\n\n  function toFullPath(arr) {\n    return arr.map(path => (WATCHEXEC_COMMON_PATH || '') + path);\n  }\n\n  let message = events.filter(Boolean).map(str => str.split(':')).map(toFullPath).map(withPrefixes(currentPrefixes)).reduce((e, memo) => memo.concat(e), []).join(EOL);\n  return message;\n}\n\nif (require.main === module) {\n  let message = extractChanges(process.env);\n  console.log(message);\n}\n\nmodule.exports = extractChanges;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/sane/src/watchexec_client.js"],"names":["EOL","require","withPrefixes","prefixes","withPrefix","arr","i","map","str","allPrefixes","extractChanges","context","WATCHEXEC_COMMON_PATH","WATCHEXEC_WRITTEN_PATH","WATCHEXEC_RENAMED_PATH","WATCHEXEC_REMOVED_PATH","WATCHEXEC_CREATED_PATH","events","currentPrefixes","l","filter","Boolean","toFullPath","path","message","split","reduce","e","memo","concat","join","main","module","process","env","console","log","exports"],"mappings":"AAAA;;;;;;;;AAQA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,IAAD,CAAvB;;AAEA,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAC9B,SAAO,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,CAAzB,EAA4B;AACjC,WAAOD,GAAG,CAACE,GAAJ,CAAQC,GAAG,IAAI;AACpB,aAAQ,GAAEL,QAAQ,CAACG,CAAD,CAAI,IAAGE,GAAI,EAA7B;AACD,KAFM,CAAP;AAGD,GAJD;AAKD;;AAED,IAAIC,WAAW,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,EAA8B,QAA9B,CAAlB;;AAEA,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAC/B,QAAM;AACJC,IAAAA,qBADI;AAEJC,IAAAA,sBAFI;AAGJC,IAAAA,sBAHI;AAIJC,IAAAA,sBAJI;AAKJC,IAAAA;AALI,MAMFL,OANJ;AAQA,MAAIM,MAAM,GAAG,CACXJ,sBADW,EAEXC,sBAFW,EAGXC,sBAHW,EAIXC,sBAJW,CAAb;AAOA,MAAIE,eAAe,GAAGD,MAAM,CACzBV,GADmB,CACf,CAACY,CAAD,EAAIb,CAAJ,KAAUa,CAAC,IAAIV,WAAW,CAACH,CAAD,CADX,EAEnBc,MAFmB,CAEZC,OAFY,CAAtB;;AAIA,WAASC,UAAT,CAAoBjB,GAApB,EAAyB;AACvB,WAAOA,GAAG,CAACE,GAAJ,CAAQgB,IAAI,IAAI,CAACX,qBAAqB,IAAI,EAA1B,IAAgCW,IAAhD,CAAP;AACD;;AAED,MAAIC,OAAO,GAAGP,MAAM,CACjBG,MADW,CACJC,OADI,EAEXd,GAFW,CAEPC,GAAG,IAAIA,GAAG,CAACiB,KAAJ,CAAU,GAAV,CAFA,EAGXlB,GAHW,CAGPe,UAHO,EAIXf,GAJW,CAIPL,YAAY,CAACgB,eAAD,CAJL,EAKXQ,MALW,CAKJ,CAACC,CAAD,EAAIC,IAAJ,KAAaA,IAAI,CAACC,MAAL,CAAYF,CAAZ,CALT,EAKyB,EALzB,EAMXG,IANW,CAMN9B,GANM,CAAd;AAQA,SAAOwB,OAAP;AACD;;AAED,IAAIvB,OAAO,CAAC8B,IAAR,KAAiBC,MAArB,EAA6B;AAC3B,MAAIR,OAAO,GAAGd,cAAc,CAACuB,OAAO,CAACC,GAAT,CAA5B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,OAAZ;AACD;;AAEDQ,MAAM,CAACK,OAAP,GAAiB3B,cAAjB","sourcesContent":["/*\n   This file is the executable run by watchexec\n   when a change is detected.\n\n   It will extract changes from the environment variables\n   set by watchexec and write to stdout in a format\n   readable by the file `../watchexec_watcher.js`.\n*/\n'use strict';\n\nconst { EOL } = require('os');\n\nfunction withPrefixes(prefixes) {\n  return function withPrefix(arr, i) {\n    return arr.map(str => {\n      return `${prefixes[i]} ${str}`;\n    });\n  };\n}\n\nlet allPrefixes = ['write', 'rename', 'remove', 'create'];\n\nfunction extractChanges(context) {\n  const {\n    WATCHEXEC_COMMON_PATH,\n    WATCHEXEC_WRITTEN_PATH,\n    WATCHEXEC_RENAMED_PATH,\n    WATCHEXEC_REMOVED_PATH,\n    WATCHEXEC_CREATED_PATH,\n  } = context;\n\n  let events = [\n    WATCHEXEC_WRITTEN_PATH,\n    WATCHEXEC_RENAMED_PATH,\n    WATCHEXEC_REMOVED_PATH,\n    WATCHEXEC_CREATED_PATH,\n  ];\n\n  let currentPrefixes = events\n    .map((l, i) => l && allPrefixes[i])\n    .filter(Boolean);\n\n  function toFullPath(arr) {\n    return arr.map(path => (WATCHEXEC_COMMON_PATH || '') + path);\n  }\n\n  let message = events\n    .filter(Boolean)\n    .map(str => str.split(':'))\n    .map(toFullPath)\n    .map(withPrefixes(currentPrefixes))\n    .reduce((e, memo) => memo.concat(e), [])\n    .join(EOL);\n\n  return message;\n}\n\nif (require.main === module) {\n  let message = extractChanges(process.env);\n  console.log(message);\n}\n\nmodule.exports = extractChanges;\n"]},"metadata":{},"sourceType":"script"}