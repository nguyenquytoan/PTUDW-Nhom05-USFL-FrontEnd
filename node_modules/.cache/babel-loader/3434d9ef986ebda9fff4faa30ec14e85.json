{"ast":null,"code":"'use strict';\n\nconst {\n  extname\n} = require('path');\n\nfunction namedAssetImportPlugin({\n  types: t\n}) {\n  const visited = new WeakSet();\n\n  function generateNewSourcePath(loaderMap, moduleName, sourcePath) {\n    const ext = extname(sourcePath).substr(1);\n    const extMap = loaderMap[ext];\n    return extMap[moduleName] ? extMap[moduleName].replace(/\\[path\\]/, sourcePath) : sourcePath;\n  }\n\n  function replaceMatchingSpecifiers(path, loaderMap, callback) {\n    const sourcePath = path.node.source.value;\n    const ext = extname(sourcePath).substr(1);\n\n    if (visited.has(path.node) || sourcePath.indexOf('!') !== -1) {\n      return;\n    }\n\n    if (loaderMap[ext]) {\n      path.replaceWithMultiple(path.node.specifiers.map(specifier => {\n        const newSpecifier = callback(specifier, sourcePath);\n        visited.add(newSpecifier);\n        return newSpecifier;\n      }));\n    }\n  }\n\n  return {\n    visitor: {\n      ExportNamedDeclaration(path, {\n        opts: {\n          loaderMap\n        }\n      }) {\n        if (!path.node.source) {\n          return;\n        }\n\n        replaceMatchingSpecifiers(path, loaderMap, (specifier, sourcePath) => {\n          if (t.isExportDefaultSpecifier(specifier)) {\n            return t.exportDeclaration([t.exportDefaultSpecifier(t.identifier(specifier.local.name))], t.stringLiteral(sourcePath));\n          }\n\n          return t.exportNamedDeclaration(null, [t.exportSpecifier(t.identifier(specifier.local.name), t.identifier(specifier.exported.name))], t.stringLiteral(generateNewSourcePath(loaderMap, specifier.local.name, sourcePath)));\n        });\n      },\n\n      ImportDeclaration(path, {\n        opts: {\n          loaderMap\n        }\n      }) {\n        replaceMatchingSpecifiers(path, loaderMap, (specifier, sourcePath) => {\n          if (t.isImportDefaultSpecifier(specifier)) {\n            return t.importDeclaration([t.importDefaultSpecifier(t.identifier(specifier.local.name))], t.stringLiteral(sourcePath));\n          }\n\n          return t.importDeclaration([t.importSpecifier(t.identifier(specifier.local.name), t.identifier(specifier.imported.name))], t.stringLiteral(generateNewSourcePath(loaderMap, specifier.imported.name, sourcePath)));\n        });\n      }\n\n    }\n  };\n}\n\nmodule.exports = namedAssetImportPlugin;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/babel-plugin-named-asset-import/index.js"],"names":["extname","require","namedAssetImportPlugin","types","t","visited","WeakSet","generateNewSourcePath","loaderMap","moduleName","sourcePath","ext","substr","extMap","replace","replaceMatchingSpecifiers","path","callback","node","source","value","has","indexOf","replaceWithMultiple","specifiers","map","specifier","newSpecifier","add","visitor","ExportNamedDeclaration","opts","isExportDefaultSpecifier","exportDeclaration","exportDefaultSpecifier","identifier","local","name","stringLiteral","exportNamedDeclaration","exportSpecifier","exported","ImportDeclaration","isImportDefaultSpecifier","importDeclaration","importDefaultSpecifier","importSpecifier","imported","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { extname } = require('path');\n\nfunction namedAssetImportPlugin({ types: t }) {\n  const visited = new WeakSet();\n\n  function generateNewSourcePath(loaderMap, moduleName, sourcePath) {\n    const ext = extname(sourcePath).substr(1);\n    const extMap = loaderMap[ext];\n    return extMap[moduleName]\n      ? extMap[moduleName].replace(/\\[path\\]/, sourcePath)\n      : sourcePath;\n  }\n\n  function replaceMatchingSpecifiers(path, loaderMap, callback) {\n    const sourcePath = path.node.source.value;\n    const ext = extname(sourcePath).substr(1);\n\n    if (visited.has(path.node) || sourcePath.indexOf('!') !== -1) {\n      return;\n    }\n\n    if (loaderMap[ext]) {\n      path.replaceWithMultiple(\n        path.node.specifiers.map(specifier => {\n          const newSpecifier = callback(specifier, sourcePath);\n          visited.add(newSpecifier);\n\n          return newSpecifier;\n        })\n      );\n    }\n  }\n\n  return {\n    visitor: {\n      ExportNamedDeclaration(\n        path,\n        {\n          opts: { loaderMap },\n        }\n      ) {\n        if (!path.node.source) {\n          return;\n        }\n\n        replaceMatchingSpecifiers(path, loaderMap, (specifier, sourcePath) => {\n          if (t.isExportDefaultSpecifier(specifier)) {\n            return t.exportDeclaration(\n              [t.exportDefaultSpecifier(t.identifier(specifier.local.name))],\n              t.stringLiteral(sourcePath)\n            );\n          }\n\n          return t.exportNamedDeclaration(\n            null,\n            [\n              t.exportSpecifier(\n                t.identifier(specifier.local.name),\n                t.identifier(specifier.exported.name)\n              ),\n            ],\n            t.stringLiteral(\n              generateNewSourcePath(loaderMap, specifier.local.name, sourcePath)\n            )\n          );\n        });\n      },\n      ImportDeclaration(\n        path,\n        {\n          opts: { loaderMap },\n        }\n      ) {\n        replaceMatchingSpecifiers(path, loaderMap, (specifier, sourcePath) => {\n          if (t.isImportDefaultSpecifier(specifier)) {\n            return t.importDeclaration(\n              [t.importDefaultSpecifier(t.identifier(specifier.local.name))],\n              t.stringLiteral(sourcePath)\n            );\n          }\n\n          return t.importDeclaration(\n            [\n              t.importSpecifier(\n                t.identifier(specifier.local.name),\n                t.identifier(specifier.imported.name)\n              ),\n            ],\n            t.stringLiteral(\n              generateNewSourcePath(\n                loaderMap,\n                specifier.imported.name,\n                sourcePath\n              )\n            )\n          );\n        });\n      },\n    },\n  };\n}\n\nmodule.exports = namedAssetImportPlugin;\n"]},"metadata":{},"sourceType":"script"}