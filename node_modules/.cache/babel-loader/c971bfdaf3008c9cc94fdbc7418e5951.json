{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _tokenize = _interopRequireDefault(require(\"./tokenize\"));\n\nvar _input = _interopRequireDefault(require(\"./input\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar HIGHLIGHT_THEME = {\n  'brackets': _chalk.default.cyan,\n  'at-word': _chalk.default.cyan,\n  'comment': _chalk.default.gray,\n  'string': _chalk.default.green,\n  'class': _chalk.default.yellow,\n  'call': _chalk.default.cyan,\n  'hash': _chalk.default.magenta,\n  '(': _chalk.default.cyan,\n  ')': _chalk.default.cyan,\n  '{': _chalk.default.yellow,\n  '}': _chalk.default.yellow,\n  '[': _chalk.default.yellow,\n  ']': _chalk.default.yellow,\n  ':': _chalk.default.yellow,\n  ';': _chalk.default.yellow\n};\n\nfunction getTokenType(_ref, processor) {\n  var type = _ref[0],\n      value = _ref[1];\n\n  if (type === 'word') {\n    if (value[0] === '.') {\n      return 'class';\n    }\n\n    if (value[0] === '#') {\n      return 'hash';\n    }\n  }\n\n  if (!processor.endOfFile()) {\n    var next = processor.nextToken();\n    processor.back(next);\n    if (next[0] === 'brackets' || next[0] === '(') return 'call';\n  }\n\n  return type;\n}\n\nfunction terminalHighlight(css) {\n  var processor = (0, _tokenize.default)(new _input.default(css), {\n    ignoreErrors: true\n  });\n  var result = '';\n\n  var _loop = function _loop() {\n    var token = processor.nextToken();\n    var color = HIGHLIGHT_THEME[getTokenType(token, processor)];\n\n    if (color) {\n      result += token[1].split(/\\r?\\n/).map(function (i) {\n        return color(i);\n      }).join('\\n');\n    } else {\n      result += token[1];\n    }\n  };\n\n  while (!processor.endOfFile()) {\n    _loop();\n  }\n\n  return result;\n}\n\nvar _default = terminalHighlight;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["terminal-highlight.es6"],"names":["HIGHLIGHT_THEME","chalk","yellow","type","value","processor","next","Input","ignoreErrors","result","token","color","getTokenType","terminalHighlight"],"mappings":"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","sourcesContent":["import chalk from 'chalk'\n\nimport tokenizer from './tokenize'\nimport Input from './input'\n\nconst HIGHLIGHT_THEME = {\n  'brackets': chalk.cyan,\n  'at-word': chalk.cyan,\n  'comment': chalk.gray,\n  'string': chalk.green,\n  'class': chalk.yellow,\n  'call': chalk.cyan,\n  'hash': chalk.magenta,\n  '(': chalk.cyan,\n  ')': chalk.cyan,\n  '{': chalk.yellow,\n  '}': chalk.yellow,\n  '[': chalk.yellow,\n  ']': chalk.yellow,\n  ':': chalk.yellow,\n  ';': chalk.yellow\n}\n\nfunction getTokenType ([type, value], processor) {\n  if (type === 'word') {\n    if (value[0] === '.') {\n      return 'class'\n    }\n    if (value[0] === '#') {\n      return 'hash'\n    }\n  }\n\n  if (!processor.endOfFile()) {\n    let next = processor.nextToken()\n    processor.back(next)\n    if (next[0] === 'brackets' || next[0] === '(') return 'call'\n  }\n\n  return type\n}\n\nfunction terminalHighlight (css) {\n  let processor = tokenizer(new Input(css), { ignoreErrors: true })\n  let result = ''\n  while (!processor.endOfFile()) {\n    let token = processor.nextToken()\n    let color = HIGHLIGHT_THEME[getTokenType(token, processor)]\n    if (color) {\n      result += token[1].split(/\\r?\\n/)\n        .map(i => color(i))\n        .join('\\n')\n    } else {\n      result += token[1]\n    }\n  }\n  return result\n}\n\nexport default terminalHighlight\n"]},"metadata":{},"sourceType":"script"}