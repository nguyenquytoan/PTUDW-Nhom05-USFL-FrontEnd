{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.mjs';\nimport '../../_version.mjs';\n\nconst fallback = (code, ...args) => {\n  let msg = code;\n\n  if (args.length > 0) {\n    msg += ` :: ${JSON.stringify(args)}`;\n  }\n\n  return msg;\n};\n\nconst generatorFunction = (code, ...args) => {\n  const message = messages[code];\n\n  if (!message) {\n    throw new Error(`Unable to find message for code '${code}'.`);\n  }\n\n  return message(...args);\n};\n\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-core/models/messages/messageGenerator.mjs"],"names":["messages","fallback","code","args","msg","length","JSON","stringify","generatorFunction","message","Error","messageGenerator","process","env","NODE_ENV"],"mappings":"AAAA;;;;;;;AAQA,SAAQA,QAAR,QAAuB,gBAAvB;AACA,OAAO,oBAAP;;AAEA,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAO,GAAGC,IAAV,KAAmB;AAClC,MAAIC,GAAG,GAAGF,IAAV;;AACA,MAAIC,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnBD,IAAAA,GAAG,IAAK,OAAME,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAqB,EAAnC;AACD;;AACD,SAAOC,GAAP;AACD,CAND;;AAQA,MAAMI,iBAAiB,GAAG,CAACN,IAAD,EAAO,GAAGC,IAAV,KAAmB;AAC3C,QAAMM,OAAO,GAAGT,QAAQ,CAACE,IAAD,CAAxB;;AACA,MAAI,CAACO,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAW,oCAAmCR,IAAK,IAAnD,CAAN;AACD;;AAED,SAAOO,OAAO,CAAC,GAAGN,IAAJ,CAAd;AACD,CAPD;;AASA,OAAO,MAAMQ,gBAAgB,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA1B,GAC5Bb,QAD4B,GACjBO,iBADR","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {messages} from './messages.mjs';\nimport '../../_version.mjs';\n\nconst fallback = (code, ...args) => {\n  let msg = code;\n  if (args.length > 0) {\n    msg += ` :: ${JSON.stringify(args)}`;\n  }\n  return msg;\n};\n\nconst generatorFunction = (code, ...args) => {\n  const message = messages[code];\n  if (!message) {\n    throw new Error(`Unable to find message for code '${code}'.`);\n  }\n\n  return message(...args);\n};\n\nexport const messageGenerator = (process.env.NODE_ENV === 'production') ?\n    fallback : generatorFunction;\n"]},"metadata":{},"sourceType":"module"}