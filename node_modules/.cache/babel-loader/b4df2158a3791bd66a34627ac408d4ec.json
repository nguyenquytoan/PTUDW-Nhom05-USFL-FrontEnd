{"ast":null,"code":"const SyncBailHook = require(\"tapable/lib/SyncBailHook\");\n\nconst {\n  Logger\n} = require(\"./Logger\");\n\nconst createConsoleLogger = require(\"./createConsoleLogger\");\n/** @type {createConsoleLogger.LoggerOptions} */\n\n\nlet currentDefaultLoggerOptions = {\n  level: \"info\",\n  debug: false,\n  console\n};\nlet currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);\n/**\n * @param {string} name name of the logger\n * @returns {Logger} a logger\n */\n\nexports.getLogger = name => {\n  return new Logger((type, args) => {\n    if (exports.hooks.log.call(name, type, args) === undefined) {\n      currentDefaultLogger(name, type, args);\n    }\n  });\n};\n/**\n * @param {createConsoleLogger.LoggerOptions} options new options, merge with old options\n * @returns {void}\n */\n\n\nexports.configureDefaultLogger = options => {\n  Object.assign(currentDefaultLoggerOptions, options);\n  currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);\n};\n\nexports.hooks = {\n  log: new SyncBailHook([\"origin\", \"type\", \"args\"])\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/webpack/lib/logging/runtime.js"],"names":["SyncBailHook","require","Logger","createConsoleLogger","currentDefaultLoggerOptions","level","debug","console","currentDefaultLogger","exports","getLogger","name","type","args","hooks","log","call","undefined","configureDefaultLogger","options","Object","assign"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,UAAD,CAA1B;;AACA,MAAME,mBAAmB,GAAGF,OAAO,CAAC,uBAAD,CAAnC;AAEA;;;AACA,IAAIG,2BAA2B,GAAG;AACjCC,EAAAA,KAAK,EAAE,MAD0B;AAEjCC,EAAAA,KAAK,EAAE,KAF0B;AAGjCC,EAAAA;AAHiC,CAAlC;AAKA,IAAIC,oBAAoB,GAAGL,mBAAmB,CAACC,2BAAD,CAA9C;AAEA;;;;;AAIAK,OAAO,CAACC,SAAR,GAAoBC,IAAI,IAAI;AAC3B,SAAO,IAAIT,MAAJ,CAAW,CAACU,IAAD,EAAOC,IAAP,KAAgB;AACjC,QAAIJ,OAAO,CAACK,KAAR,CAAcC,GAAd,CAAkBC,IAAlB,CAAuBL,IAAvB,EAA6BC,IAA7B,EAAmCC,IAAnC,MAA6CI,SAAjD,EAA4D;AAC3DT,MAAAA,oBAAoB,CAACG,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAApB;AACA;AACD,GAJM,CAAP;AAKA,CAND;AAQA;;;;;;AAIAJ,OAAO,CAACS,sBAAR,GAAiCC,OAAO,IAAI;AAC3CC,EAAAA,MAAM,CAACC,MAAP,CAAcjB,2BAAd,EAA2Ce,OAA3C;AACAX,EAAAA,oBAAoB,GAAGL,mBAAmB,CAACC,2BAAD,CAA1C;AACA,CAHD;;AAKAK,OAAO,CAACK,KAAR,GAAgB;AACfC,EAAAA,GAAG,EAAE,IAAIf,YAAJ,CAAiB,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,CAAjB;AADU,CAAhB","sourcesContent":["const SyncBailHook = require(\"tapable/lib/SyncBailHook\");\nconst { Logger } = require(\"./Logger\");\nconst createConsoleLogger = require(\"./createConsoleLogger\");\n\n/** @type {createConsoleLogger.LoggerOptions} */\nlet currentDefaultLoggerOptions = {\n\tlevel: \"info\",\n\tdebug: false,\n\tconsole\n};\nlet currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);\n\n/**\n * @param {string} name name of the logger\n * @returns {Logger} a logger\n */\nexports.getLogger = name => {\n\treturn new Logger((type, args) => {\n\t\tif (exports.hooks.log.call(name, type, args) === undefined) {\n\t\t\tcurrentDefaultLogger(name, type, args);\n\t\t}\n\t});\n};\n\n/**\n * @param {createConsoleLogger.LoggerOptions} options new options, merge with old options\n * @returns {void}\n */\nexports.configureDefaultLogger = options => {\n\tObject.assign(currentDefaultLoggerOptions, options);\n\tcurrentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);\n};\n\nexports.hooks = {\n\tlog: new SyncBailHook([\"origin\", \"type\", \"args\"])\n};\n"]},"metadata":{},"sourceType":"script"}