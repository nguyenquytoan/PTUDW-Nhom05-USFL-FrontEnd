{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass NormalizedMessage {\n  constructor(data) {\n    this.type = data.type;\n    this.code = data.code;\n    this.severity = data.severity;\n    this.content = data.content;\n    this.file = data.file;\n    this.line = data.line;\n    this.character = data.character;\n    this.stack = data.stack;\n  }\n\n  static createFromJSON(json) {\n    return new NormalizedMessage(json);\n  }\n\n  static compare(messageA, messageB) {\n    if (!(messageA instanceof NormalizedMessage)) {\n      return -1;\n    }\n\n    if (!(messageB instanceof NormalizedMessage)) {\n      return 1;\n    }\n\n    return NormalizedMessage.compareTypes(messageA.type, messageB.type) || NormalizedMessage.compareOptionalStrings(messageA.file, messageB.file) || NormalizedMessage.compareSeverities(messageA.severity, messageB.severity) || NormalizedMessage.compareNumbers(messageA.line, messageB.line) || NormalizedMessage.compareNumbers(messageA.character, messageB.character) || // code can be string (lint failure) or number (typescript error) - should the following line cater for this in some way?\n    NormalizedMessage.compareOptionalStrings(messageA.code, messageB.code) || NormalizedMessage.compareOptionalStrings(messageA.content, messageB.content) || NormalizedMessage.compareOptionalStrings(messageA.stack, messageB.stack) || 0\n    /* EqualTo */\n    ;\n  }\n\n  static equals(messageA, messageB) {\n    return this.compare(messageA, messageB) === 0;\n  }\n\n  static deduplicate(messages) {\n    return messages.sort(NormalizedMessage.compare).filter((message, index) => {\n      return index === 0 || !NormalizedMessage.equals(message, messages[index - 1]);\n    });\n  }\n\n  static compareTypes(typeA, typeB) {\n    const priorities = [typeA, typeB].map(type => {\n      return [NormalizedMessage.TYPE_LINT\n      /* 0 */\n      , NormalizedMessage.TYPE_DIAGNOSTIC\n      /* 1 */\n      ].indexOf(type);\n    });\n    return priorities[0] - priorities[1];\n  }\n\n  static compareSeverities(severityA, severityB) {\n    const priorities = [severityA, severityB].map(type => {\n      return [NormalizedMessage.SEVERITY_WARNING\n      /* 0 */\n      , NormalizedMessage.SEVERITY_ERROR\n      /* 1 */\n      ].indexOf(type);\n    });\n    return priorities[0] - priorities[1];\n  }\n\n  static compareOptionalStrings(stringA, stringB) {\n    if (stringA === stringB) {\n      return 0;\n    }\n\n    if (stringA === undefined || stringA === null) {\n      return -1;\n    }\n\n    if (stringB === undefined || stringB === null) {\n      return 1;\n    }\n\n    return stringA.toString().localeCompare(stringB.toString());\n  }\n\n  static compareNumbers(numberA, numberB) {\n    if (numberA === numberB) {\n      return 0;\n    }\n\n    if (numberA === undefined || numberA === null) {\n      return -1;\n    }\n\n    if (numberB === undefined || numberB === null) {\n      return 1;\n    }\n\n    return numberA - numberB;\n  }\n\n  toJSON() {\n    return {\n      type: this.type,\n      code: this.code,\n      severity: this.severity,\n      content: this.content,\n      file: this.file,\n      line: this.line,\n      character: this.character,\n      stack: this.stack\n    };\n  }\n\n  isDiagnosticType() {\n    return NormalizedMessage.TYPE_DIAGNOSTIC === this.type;\n  }\n\n  isLintType() {\n    return NormalizedMessage.TYPE_LINT === this.type;\n  }\n\n  getFormattedCode() {\n    return this.isDiagnosticType() ? 'TS' + this.code : this.code;\n  }\n\n  isErrorSeverity() {\n    return this.severity === NormalizedMessage.SEVERITY_ERROR;\n  }\n\n  isWarningSeverity() {\n    return this.severity === NormalizedMessage.SEVERITY_WARNING;\n  }\n\n}\n\nNormalizedMessage.TYPE_DIAGNOSTIC = 'diagnostic';\nNormalizedMessage.TYPE_LINT = 'lint'; // severity types\n\nNormalizedMessage.SEVERITY_ERROR = 'error';\nNormalizedMessage.SEVERITY_WARNING = 'warning';\nNormalizedMessage.ERROR_CODE_INTERNAL = 'INTERNAL_ERROR';\nexports.NormalizedMessage = NormalizedMessage;","map":{"version":3,"sources":["../src/NormalizedMessage.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass NormalizedMessage {\n    constructor(data) {\n        this.type = data.type;\n        this.code = data.code;\n        this.severity = data.severity;\n        this.content = data.content;\n        this.file = data.file;\n        this.line = data.line;\n        this.character = data.character;\n        this.stack = data.stack;\n    }\n    static createFromJSON(json) {\n        return new NormalizedMessage(json);\n    }\n    static compare(messageA, messageB) {\n        if (!(messageA instanceof NormalizedMessage)) {\n            return -1;\n        }\n        if (!(messageB instanceof NormalizedMessage)) {\n            return 1;\n        }\n        return (NormalizedMessage.compareTypes(messageA.type, messageB.type) ||\n            NormalizedMessage.compareOptionalStrings(messageA.file, messageB.file) ||\n            NormalizedMessage.compareSeverities(messageA.severity, messageB.severity) ||\n            NormalizedMessage.compareNumbers(messageA.line, messageB.line) ||\n            NormalizedMessage.compareNumbers(messageA.character, messageB.character) ||\n            // code can be string (lint failure) or number (typescript error) - should the following line cater for this in some way?\n            NormalizedMessage.compareOptionalStrings(messageA.code, messageB.code) ||\n            NormalizedMessage.compareOptionalStrings(messageA.content, messageB.content) ||\n            NormalizedMessage.compareOptionalStrings(messageA.stack, messageB.stack) ||\n            0 /* EqualTo */);\n    }\n    static equals(messageA, messageB) {\n        return this.compare(messageA, messageB) === 0;\n    }\n    static deduplicate(messages) {\n        return messages.sort(NormalizedMessage.compare).filter((message, index) => {\n            return (index === 0 || !NormalizedMessage.equals(message, messages[index - 1]));\n        });\n    }\n    static compareTypes(typeA, typeB) {\n        const priorities = [typeA, typeB].map(type => {\n            return [\n                NormalizedMessage.TYPE_LINT /* 0 */,\n                NormalizedMessage.TYPE_DIAGNOSTIC /* 1 */\n            ].indexOf(type);\n        });\n        return priorities[0] - priorities[1];\n    }\n    static compareSeverities(severityA, severityB) {\n        const priorities = [severityA, severityB].map(type => {\n            return [\n                NormalizedMessage.SEVERITY_WARNING /* 0 */,\n                NormalizedMessage.SEVERITY_ERROR /* 1 */\n            ].indexOf(type);\n        });\n        return priorities[0] - priorities[1];\n    }\n    static compareOptionalStrings(stringA, stringB) {\n        if (stringA === stringB) {\n            return 0;\n        }\n        if (stringA === undefined || stringA === null) {\n            return -1;\n        }\n        if (stringB === undefined || stringB === null) {\n            return 1;\n        }\n        return stringA.toString().localeCompare(stringB.toString());\n    }\n    static compareNumbers(numberA, numberB) {\n        if (numberA === numberB) {\n            return 0;\n        }\n        if (numberA === undefined || numberA === null) {\n            return -1;\n        }\n        if (numberB === undefined || numberB === null) {\n            return 1;\n        }\n        return numberA - numberB;\n    }\n    toJSON() {\n        return {\n            type: this.type,\n            code: this.code,\n            severity: this.severity,\n            content: this.content,\n            file: this.file,\n            line: this.line,\n            character: this.character,\n            stack: this.stack\n        };\n    }\n    isDiagnosticType() {\n        return NormalizedMessage.TYPE_DIAGNOSTIC === this.type;\n    }\n    isLintType() {\n        return NormalizedMessage.TYPE_LINT === this.type;\n    }\n    getFormattedCode() {\n        return this.isDiagnosticType() ? 'TS' + this.code : this.code;\n    }\n    isErrorSeverity() {\n        return this.severity === NormalizedMessage.SEVERITY_ERROR;\n    }\n    isWarningSeverity() {\n        return this.severity === NormalizedMessage.SEVERITY_WARNING;\n    }\n}\nNormalizedMessage.TYPE_DIAGNOSTIC = 'diagnostic';\nNormalizedMessage.TYPE_LINT = 'lint';\n// severity types\nNormalizedMessage.SEVERITY_ERROR = 'error';\nNormalizedMessage.SEVERITY_WARNING = 'warning';\nNormalizedMessage.ERROR_CODE_INTERNAL = 'INTERNAL_ERROR';\nexports.NormalizedMessage = NormalizedMessage;\n//# sourceMappingURL=NormalizedMessage.js.map"]},"metadata":{},"sourceType":"script"}