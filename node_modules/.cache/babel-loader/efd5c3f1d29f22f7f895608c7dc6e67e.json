{"ast":null,"code":"// Generated by LiveScript 1.4.0\n(function () {\n  var parsedTypeCheck,\n      types,\n      toString$ = {}.toString;\n  parsedTypeCheck = require('type-check').parsedTypeCheck;\n  types = {\n    '*': function (value, options) {\n      switch (toString$.call(value).slice(8, -1)) {\n        case 'Array':\n          return typeCast(value, {\n            type: 'Array'\n          }, options);\n\n        case 'Object':\n          return typeCast(value, {\n            type: 'Object'\n          }, options);\n\n        default:\n          return {\n            type: 'Just',\n            value: typesCast(value, [{\n              type: 'Undefined'\n            }, {\n              type: 'Null'\n            }, {\n              type: 'NaN'\n            }, {\n              type: 'Boolean'\n            }, {\n              type: 'Number'\n            }, {\n              type: 'Date'\n            }, {\n              type: 'RegExp'\n            }, {\n              type: 'Array'\n            }, {\n              type: 'Object'\n            }, {\n              type: 'String'\n            }], (options.explicit = true, options))\n          };\n      }\n    },\n    Undefined: function (it) {\n      if (it === 'undefined' || it === void 8) {\n        return {\n          type: 'Just',\n          value: void 8\n        };\n      } else {\n        return {\n          type: 'Nothing'\n        };\n      }\n    },\n    Null: function (it) {\n      if (it === 'null') {\n        return {\n          type: 'Just',\n          value: null\n        };\n      } else {\n        return {\n          type: 'Nothing'\n        };\n      }\n    },\n    NaN: function (it) {\n      if (it === 'NaN') {\n        return {\n          type: 'Just',\n          value: NaN\n        };\n      } else {\n        return {\n          type: 'Nothing'\n        };\n      }\n    },\n    Boolean: function (it) {\n      if (it === 'true') {\n        return {\n          type: 'Just',\n          value: true\n        };\n      } else if (it === 'false') {\n        return {\n          type: 'Just',\n          value: false\n        };\n      } else {\n        return {\n          type: 'Nothing'\n        };\n      }\n    },\n    Number: function (it) {\n      return {\n        type: 'Just',\n        value: +it\n      };\n    },\n    Int: function (it) {\n      return {\n        type: 'Just',\n        value: +it\n      };\n    },\n    Float: function (it) {\n      return {\n        type: 'Just',\n        value: +it\n      };\n    },\n    Date: function (value, options) {\n      var that;\n\n      if (that = /^\\#([\\s\\S]*)\\#$/.exec(value)) {\n        return {\n          type: 'Just',\n          value: new Date(+that[1] || that[1])\n        };\n      } else if (options.explicit) {\n        return {\n          type: 'Nothing'\n        };\n      } else {\n        return {\n          type: 'Just',\n          value: new Date(+value || value)\n        };\n      }\n    },\n    RegExp: function (value, options) {\n      var that;\n\n      if (that = /^\\/([\\s\\S]*)\\/([gimy]*)$/.exec(value)) {\n        return {\n          type: 'Just',\n          value: new RegExp(that[1], that[2])\n        };\n      } else if (options.explicit) {\n        return {\n          type: 'Nothing'\n        };\n      } else {\n        return {\n          type: 'Just',\n          value: new RegExp(value)\n        };\n      }\n    },\n    Array: function (value, options) {\n      return castArray(value, {\n        of: [{\n          type: '*'\n        }]\n      }, options);\n    },\n    Object: function (value, options) {\n      return castFields(value, {\n        of: {}\n      }, options);\n    },\n    String: function (it) {\n      var that;\n\n      if (toString$.call(it).slice(8, -1) !== 'String') {\n        return {\n          type: 'Nothing'\n        };\n      }\n\n      if (that = it.match(/^'([\\s\\S]*)'$/)) {\n        return {\n          type: 'Just',\n          value: that[1].replace(/\\\\'/g, \"'\")\n        };\n      } else if (that = it.match(/^\"([\\s\\S]*)\"$/)) {\n        return {\n          type: 'Just',\n          value: that[1].replace(/\\\\\"/g, '\"')\n        };\n      } else {\n        return {\n          type: 'Just',\n          value: it\n        };\n      }\n    }\n  };\n\n  function castArray(node, type, options) {\n    var typeOf, element;\n\n    if (toString$.call(node).slice(8, -1) !== 'Array') {\n      return {\n        type: 'Nothing'\n      };\n    }\n\n    typeOf = type.of;\n    return {\n      type: 'Just',\n      value: function () {\n        var i$,\n            ref$,\n            len$,\n            results$ = [];\n\n        for (i$ = 0, len$ = (ref$ = node).length; i$ < len$; ++i$) {\n          element = ref$[i$];\n          results$.push(typesCast(element, typeOf, options));\n        }\n\n        return results$;\n      }()\n    };\n  }\n\n  function castTuple(node, type, options) {\n    var result, i, i$, ref$, len$, types, cast;\n\n    if (toString$.call(node).slice(8, -1) !== 'Array') {\n      return {\n        type: 'Nothing'\n      };\n    }\n\n    result = [];\n    i = 0;\n\n    for (i$ = 0, len$ = (ref$ = type.of).length; i$ < len$; ++i$) {\n      types = ref$[i$];\n      cast = typesCast(node[i], types, options);\n\n      if (toString$.call(cast).slice(8, -1) !== 'Undefined') {\n        result.push(cast);\n      }\n\n      i++;\n    }\n\n    if (node.length <= i) {\n      return {\n        type: 'Just',\n        value: result\n      };\n    } else {\n      return {\n        type: 'Nothing'\n      };\n    }\n  }\n\n  function castFields(node, type, options) {\n    var typeOf, key, value;\n\n    if (toString$.call(node).slice(8, -1) !== 'Object') {\n      return {\n        type: 'Nothing'\n      };\n    }\n\n    typeOf = type.of;\n    return {\n      type: 'Just',\n      value: function () {\n        var ref$,\n            resultObj$ = {};\n\n        for (key in ref$ = node) {\n          value = ref$[key];\n          resultObj$[typesCast(key, [{\n            type: 'String'\n          }], options)] = typesCast(value, typeOf[key] || [{\n            type: '*'\n          }], options);\n        }\n\n        return resultObj$;\n      }()\n    };\n  }\n\n  function typeCast(node, typeObj, options) {\n    var type, structure, castFunc, ref$;\n    type = typeObj.type, structure = typeObj.structure;\n\n    if (type) {\n      castFunc = ((ref$ = options.customTypes[type]) != null ? ref$.cast : void 8) || types[type];\n\n      if (!castFunc) {\n        throw new Error(\"Type not defined: \" + type + \".\");\n      }\n\n      return castFunc(node, options, typesCast);\n    } else {\n      switch (structure) {\n        case 'array':\n          return castArray(node, typeObj, options);\n\n        case 'tuple':\n          return castTuple(node, typeObj, options);\n\n        case 'fields':\n          return castFields(node, typeObj, options);\n      }\n    }\n  }\n\n  function typesCast(node, types, options) {\n    var i$, len$, type, ref$, valueType, value;\n\n    for (i$ = 0, len$ = types.length; i$ < len$; ++i$) {\n      type = types[i$];\n      ref$ = typeCast(node, type, options), valueType = ref$.type, value = ref$.value;\n\n      if (valueType === 'Nothing') {\n        continue;\n      }\n\n      if (parsedTypeCheck([type], value, {\n        customTypes: options.customTypes\n      })) {\n        return value;\n      }\n    }\n\n    throw new Error(\"Value \" + JSON.stringify(node) + \" does not type check against \" + JSON.stringify(types) + \".\");\n  }\n\n  module.exports = typesCast;\n}).call(this);","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/levn/lib/cast.js"],"names":["parsedTypeCheck","types","toString$","toString","require","value","options","call","slice","typeCast","type","typesCast","explicit","Undefined","it","Null","NaN","Boolean","Number","Int","Float","Date","that","exec","RegExp","Array","castArray","of","Object","castFields","String","match","replace","node","typeOf","element","i$","ref$","len$","results$","length","push","castTuple","result","i","cast","key","resultObj$","typeObj","structure","castFunc","customTypes","Error","valueType","JSON","stringify","module","exports"],"mappings":"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","sourcesContent":["// Generated by LiveScript 1.4.0\n(function(){\n  var parsedTypeCheck, types, toString$ = {}.toString;\n  parsedTypeCheck = require('type-check').parsedTypeCheck;\n  types = {\n    '*': function(value, options){\n      switch (toString$.call(value).slice(8, -1)) {\n      case 'Array':\n        return typeCast(value, {\n          type: 'Array'\n        }, options);\n      case 'Object':\n        return typeCast(value, {\n          type: 'Object'\n        }, options);\n      default:\n        return {\n          type: 'Just',\n          value: typesCast(value, [\n            {\n              type: 'Undefined'\n            }, {\n              type: 'Null'\n            }, {\n              type: 'NaN'\n            }, {\n              type: 'Boolean'\n            }, {\n              type: 'Number'\n            }, {\n              type: 'Date'\n            }, {\n              type: 'RegExp'\n            }, {\n              type: 'Array'\n            }, {\n              type: 'Object'\n            }, {\n              type: 'String'\n            }\n          ], (options.explicit = true, options))\n        };\n      }\n    },\n    Undefined: function(it){\n      if (it === 'undefined' || it === void 8) {\n        return {\n          type: 'Just',\n          value: void 8\n        };\n      } else {\n        return {\n          type: 'Nothing'\n        };\n      }\n    },\n    Null: function(it){\n      if (it === 'null') {\n        return {\n          type: 'Just',\n          value: null\n        };\n      } else {\n        return {\n          type: 'Nothing'\n        };\n      }\n    },\n    NaN: function(it){\n      if (it === 'NaN') {\n        return {\n          type: 'Just',\n          value: NaN\n        };\n      } else {\n        return {\n          type: 'Nothing'\n        };\n      }\n    },\n    Boolean: function(it){\n      if (it === 'true') {\n        return {\n          type: 'Just',\n          value: true\n        };\n      } else if (it === 'false') {\n        return {\n          type: 'Just',\n          value: false\n        };\n      } else {\n        return {\n          type: 'Nothing'\n        };\n      }\n    },\n    Number: function(it){\n      return {\n        type: 'Just',\n        value: +it\n      };\n    },\n    Int: function(it){\n      return {\n        type: 'Just',\n        value: +it\n      };\n    },\n    Float: function(it){\n      return {\n        type: 'Just',\n        value: +it\n      };\n    },\n    Date: function(value, options){\n      var that;\n      if (that = /^\\#([\\s\\S]*)\\#$/.exec(value)) {\n        return {\n          type: 'Just',\n          value: new Date(+that[1] || that[1])\n        };\n      } else if (options.explicit) {\n        return {\n          type: 'Nothing'\n        };\n      } else {\n        return {\n          type: 'Just',\n          value: new Date(+value || value)\n        };\n      }\n    },\n    RegExp: function(value, options){\n      var that;\n      if (that = /^\\/([\\s\\S]*)\\/([gimy]*)$/.exec(value)) {\n        return {\n          type: 'Just',\n          value: new RegExp(that[1], that[2])\n        };\n      } else if (options.explicit) {\n        return {\n          type: 'Nothing'\n        };\n      } else {\n        return {\n          type: 'Just',\n          value: new RegExp(value)\n        };\n      }\n    },\n    Array: function(value, options){\n      return castArray(value, {\n        of: [{\n          type: '*'\n        }]\n      }, options);\n    },\n    Object: function(value, options){\n      return castFields(value, {\n        of: {}\n      }, options);\n    },\n    String: function(it){\n      var that;\n      if (toString$.call(it).slice(8, -1) !== 'String') {\n        return {\n          type: 'Nothing'\n        };\n      }\n      if (that = it.match(/^'([\\s\\S]*)'$/)) {\n        return {\n          type: 'Just',\n          value: that[1].replace(/\\\\'/g, \"'\")\n        };\n      } else if (that = it.match(/^\"([\\s\\S]*)\"$/)) {\n        return {\n          type: 'Just',\n          value: that[1].replace(/\\\\\"/g, '\"')\n        };\n      } else {\n        return {\n          type: 'Just',\n          value: it\n        };\n      }\n    }\n  };\n  function castArray(node, type, options){\n    var typeOf, element;\n    if (toString$.call(node).slice(8, -1) !== 'Array') {\n      return {\n        type: 'Nothing'\n      };\n    }\n    typeOf = type.of;\n    return {\n      type: 'Just',\n      value: (function(){\n        var i$, ref$, len$, results$ = [];\n        for (i$ = 0, len$ = (ref$ = node).length; i$ < len$; ++i$) {\n          element = ref$[i$];\n          results$.push(typesCast(element, typeOf, options));\n        }\n        return results$;\n      }())\n    };\n  }\n  function castTuple(node, type, options){\n    var result, i, i$, ref$, len$, types, cast;\n    if (toString$.call(node).slice(8, -1) !== 'Array') {\n      return {\n        type: 'Nothing'\n      };\n    }\n    result = [];\n    i = 0;\n    for (i$ = 0, len$ = (ref$ = type.of).length; i$ < len$; ++i$) {\n      types = ref$[i$];\n      cast = typesCast(node[i], types, options);\n      if (toString$.call(cast).slice(8, -1) !== 'Undefined') {\n        result.push(cast);\n      }\n      i++;\n    }\n    if (node.length <= i) {\n      return {\n        type: 'Just',\n        value: result\n      };\n    } else {\n      return {\n        type: 'Nothing'\n      };\n    }\n  }\n  function castFields(node, type, options){\n    var typeOf, key, value;\n    if (toString$.call(node).slice(8, -1) !== 'Object') {\n      return {\n        type: 'Nothing'\n      };\n    }\n    typeOf = type.of;\n    return {\n      type: 'Just',\n      value: (function(){\n        var ref$, resultObj$ = {};\n        for (key in ref$ = node) {\n          value = ref$[key];\n          resultObj$[typesCast(key, [{\n            type: 'String'\n          }], options)] = typesCast(value, typeOf[key] || [{\n            type: '*'\n          }], options);\n        }\n        return resultObj$;\n      }())\n    };\n  }\n  function typeCast(node, typeObj, options){\n    var type, structure, castFunc, ref$;\n    type = typeObj.type, structure = typeObj.structure;\n    if (type) {\n      castFunc = ((ref$ = options.customTypes[type]) != null ? ref$.cast : void 8) || types[type];\n      if (!castFunc) {\n        throw new Error(\"Type not defined: \" + type + \".\");\n      }\n      return castFunc(node, options, typesCast);\n    } else {\n      switch (structure) {\n      case 'array':\n        return castArray(node, typeObj, options);\n      case 'tuple':\n        return castTuple(node, typeObj, options);\n      case 'fields':\n        return castFields(node, typeObj, options);\n      }\n    }\n  }\n  function typesCast(node, types, options){\n    var i$, len$, type, ref$, valueType, value;\n    for (i$ = 0, len$ = types.length; i$ < len$; ++i$) {\n      type = types[i$];\n      ref$ = typeCast(node, type, options), valueType = ref$.type, value = ref$.value;\n      if (valueType === 'Nothing') {\n        continue;\n      }\n      if (parsedTypeCheck([type], value, {\n        customTypes: options.customTypes\n      })) {\n        return value;\n      }\n    }\n    throw new Error(\"Value \" + JSON.stringify(node) + \" does not type check against \" + JSON.stringify(types) + \".\");\n  }\n  module.exports = typesCast;\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}