{"ast":null,"code":"// These tests are taken from http-browserify to ensure compatibility with\n// that module\nvar test = require('tape');\n\nvar url = require('url');\n\nvar location = 'http://localhost:8081/foo/123';\n\nvar noop = function () {};\n\nglobal.location = url.parse(location);\n\nglobal.XMLHttpRequest = function () {\n  this.open = noop;\n  this.send = noop;\n  this.withCredentials = false;\n};\n\nvar moduleName = require.resolve('../../');\n\ndelete require.cache[moduleName];\n\nvar http = require('../../');\n\ntest('Make sure http object has correct properties', function (t) {\n  t.ok(http.Agent, 'Agent defined');\n  t.ok(http.ClientRequest, 'ClientRequest defined');\n  t.ok(http.ClientRequest.prototype, 'ClientRequest.prototype defined');\n  t.ok(http.IncomingMessage, 'IncomingMessage defined');\n  t.ok(http.IncomingMessage.prototype, 'IncomingMessage.prototype defined');\n  t.ok(http.METHODS, 'METHODS defined');\n  t.ok(http.STATUS_CODES, 'STATUS_CODES defined');\n  t.ok(http.get, 'get defined');\n  t.ok(http.globalAgent, 'globalAgent defined');\n  t.ok(http.request, 'request defined');\n  t.end();\n});\ntest('Test simple url string', function (t) {\n  var testUrl = {\n    path: '/api/foo'\n  };\n  var request = http.get(testUrl, noop);\n  var resolved = url.resolve(location, request._opts.url);\n  t.equal(resolved, 'http://localhost:8081/api/foo', 'Url should be correct');\n  t.end();\n});\ntest('Test full url object', function (t) {\n  var testUrl = {\n    host: \"localhost:8081\",\n    hostname: \"localhost\",\n    href: \"http://localhost:8081/api/foo?bar=baz\",\n    method: \"GET\",\n    path: \"/api/foo?bar=baz\",\n    pathname: \"/api/foo\",\n    port: \"8081\",\n    protocol: \"http:\",\n    query: \"bar=baz\",\n    search: \"?bar=baz\",\n    slashes: true\n  };\n  var request = http.get(testUrl, noop);\n  var resolved = url.resolve(location, request._opts.url);\n  t.equal(resolved, 'http://localhost:8081/api/foo?bar=baz', 'Url should be correct');\n  t.end();\n});\ntest('Test alt protocol', function (t) {\n  var params = {\n    protocol: \"foo:\",\n    hostname: \"localhost\",\n    port: \"3000\",\n    path: \"/bar\"\n  };\n  var request = http.get(params, noop);\n  var resolved = url.resolve(location, request._opts.url);\n  t.equal(resolved, 'foo://localhost:3000/bar', 'Url should be correct');\n  t.end();\n});\ntest('Test page with \\'file:\\' protocol', function (t) {\n  var params = {\n    hostname: 'localhost',\n    port: 3000,\n    path: '/bar'\n  };\n  var fileLocation = 'file:///home/me/stuff/index.html';\n  var normalLocation = global.location;\n  global.location = url.parse(fileLocation); // Temporarily change the location\n\n  var request = http.get(params, noop);\n  global.location = normalLocation; // Reset the location\n\n  var resolved = url.resolve(fileLocation, request._opts.url);\n  t.equal(resolved, 'http://localhost:3000/bar', 'Url should be correct');\n  t.end();\n});\ntest('Test string as parameters', function (t) {\n  var testUrl = '/api/foo';\n  var request = http.get(testUrl, noop);\n  var resolved = url.resolve(location, request._opts.url);\n  t.equal(resolved, 'http://localhost:8081/api/foo', 'Url should be correct');\n  t.end();\n});\ntest('Test withCredentials param', function (t) {\n  var url = '/api/foo';\n  var request = http.get({\n    url: url,\n    withCredentials: false\n  }, noop);\n  t.equal(request._xhr.withCredentials, false, 'xhr.withCredentials should be false');\n  var request = http.get({\n    url: url,\n    withCredentials: true\n  }, noop);\n  t.equal(request._xhr.withCredentials, true, 'xhr.withCredentials should be true');\n  var request = http.get({\n    url: url\n  }, noop);\n  t.equal(request._xhr.withCredentials, false, 'xhr.withCredentials should be false');\n  t.end();\n});\ntest('Test ipv6 address', function (t) {\n  var testUrl = 'http://[::1]:80/foo';\n  var request = http.get(testUrl, noop);\n  var resolved = url.resolve(location, request._opts.url);\n  t.equal(resolved, 'http://[::1]:80/foo', 'Url should be correct');\n  t.end();\n});\ntest('Test relative path in url', function (t) {\n  var params = {\n    path: './bar'\n  };\n  var request = http.get(params, noop);\n  var resolved = url.resolve(location, request._opts.url);\n  t.equal(resolved, 'http://localhost:8081/foo/bar', 'Url should be correct');\n  t.end();\n});\ntest('Cleanup', function (t) {\n  delete global.location;\n  delete global.XMLHttpRequest;\n  delete require.cache[moduleName];\n  t.end();\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/stream-http/test/node/http-browserify.js"],"names":["test","require","url","location","noop","global","parse","XMLHttpRequest","open","send","withCredentials","moduleName","resolve","cache","http","t","ok","Agent","ClientRequest","prototype","IncomingMessage","METHODS","STATUS_CODES","get","globalAgent","request","end","testUrl","path","resolved","_opts","equal","host","hostname","href","method","pathname","port","protocol","query","search","slashes","params","fileLocation","normalLocation","_xhr"],"mappings":"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","sourcesContent":["// These tests are taken from http-browserify to ensure compatibility with\n// that module\nvar test = require('tape')\nvar url = require('url')\n\nvar location = 'http://localhost:8081/foo/123'\n\nvar noop = function() {}\nglobal.location = url.parse(location)\nglobal.XMLHttpRequest = function() {\n\tthis.open = noop\n\tthis.send = noop\n\tthis.withCredentials = false\n}\n\nvar moduleName = require.resolve('../../')\ndelete require.cache[moduleName]\nvar http = require('../../')\n\ntest('Make sure http object has correct properties', function (t) {\n\tt.ok(http.Agent, 'Agent defined')\n\tt.ok(http.ClientRequest, 'ClientRequest defined')\n\tt.ok(http.ClientRequest.prototype, 'ClientRequest.prototype defined')\n\tt.ok(http.IncomingMessage, 'IncomingMessage defined')\n\tt.ok(http.IncomingMessage.prototype, 'IncomingMessage.prototype defined')\n\tt.ok(http.METHODS, 'METHODS defined')\n\tt.ok(http.STATUS_CODES, 'STATUS_CODES defined')\n\tt.ok(http.get, 'get defined')\n\tt.ok(http.globalAgent, 'globalAgent defined')\n\tt.ok(http.request, 'request defined')\n\tt.end()\n})\n\ntest('Test simple url string', function(t) {\n\tvar testUrl = { path: '/api/foo' }\n\tvar request = http.get(testUrl, noop)\n\n\tvar resolved = url.resolve(location, request._opts.url)\n\tt.equal(resolved, 'http://localhost:8081/api/foo', 'Url should be correct')\n\tt.end()\n\n})\n\ntest('Test full url object', function(t) {\n\tvar testUrl = {\n\t\thost: \"localhost:8081\",\n\t\thostname: \"localhost\",\n\t\thref: \"http://localhost:8081/api/foo?bar=baz\",\n\t\tmethod: \"GET\",\n\t\tpath: \"/api/foo?bar=baz\",\n\t\tpathname: \"/api/foo\",\n\t\tport: \"8081\",\n\t\tprotocol: \"http:\",\n\t\tquery: \"bar=baz\",\n\t\tsearch: \"?bar=baz\",\n\t\tslashes: true\n\t}\n\n\tvar request = http.get(testUrl, noop)\n\n\tvar resolved = url.resolve(location, request._opts.url)\n\tt.equal(resolved, 'http://localhost:8081/api/foo?bar=baz', 'Url should be correct')\n\tt.end()\n})\n\ntest('Test alt protocol', function(t) {\n\tvar params = {\n\t\tprotocol: \"foo:\",\n\t\thostname: \"localhost\",\n\t\tport: \"3000\",\n\t\tpath: \"/bar\"\n\t}\n\n\tvar request = http.get(params, noop)\n\n\tvar resolved = url.resolve(location, request._opts.url)\n\tt.equal(resolved, 'foo://localhost:3000/bar', 'Url should be correct')\n\tt.end()\n})\n\ntest('Test page with \\'file:\\' protocol', function (t) {\n\tvar params = {\n\t\thostname: 'localhost',\n\t\tport: 3000,\n\t\tpath: '/bar'\n\t}\n\n\tvar fileLocation = 'file:///home/me/stuff/index.html'\n\n\tvar normalLocation = global.location\n\tglobal.location = url.parse(fileLocation) // Temporarily change the location\n\tvar request = http.get(params, noop)\n\tglobal.location = normalLocation // Reset the location\n\n\tvar resolved = url.resolve(fileLocation, request._opts.url)\n\tt.equal(resolved, 'http://localhost:3000/bar', 'Url should be correct')\n\tt.end()\n})\n\ntest('Test string as parameters', function(t) {\n\tvar testUrl = '/api/foo'\n\tvar request = http.get(testUrl, noop)\n\n\tvar resolved = url.resolve(location, request._opts.url)\n\tt.equal(resolved, 'http://localhost:8081/api/foo', 'Url should be correct')\n\tt.end()\n})\n\ntest('Test withCredentials param', function(t) {\n\tvar url = '/api/foo'\n\n\tvar request = http.get({ url: url, withCredentials: false }, noop)\n\tt.equal(request._xhr.withCredentials, false, 'xhr.withCredentials should be false')\n\n\tvar request = http.get({ url: url, withCredentials: true }, noop)\n\tt.equal(request._xhr.withCredentials, true, 'xhr.withCredentials should be true')\n\n\tvar request = http.get({ url: url }, noop)\n\tt.equal(request._xhr.withCredentials, false, 'xhr.withCredentials should be false')\n\n\tt.end()\n})\n\ntest('Test ipv6 address', function(t) {\n\tvar testUrl = 'http://[::1]:80/foo'\n\tvar request = http.get(testUrl, noop)\n\n\tvar resolved = url.resolve(location, request._opts.url)\n\tt.equal(resolved, 'http://[::1]:80/foo', 'Url should be correct')\n\tt.end()\n})\n\ntest('Test relative path in url', function(t) {\n\tvar params = { path: './bar' }\n\tvar request = http.get(params, noop)\n\n\tvar resolved = url.resolve(location, request._opts.url)\n\tt.equal(resolved, 'http://localhost:8081/foo/bar', 'Url should be correct')\n\tt.end()\n})\n\ntest('Cleanup', function (t) {\n\tdelete global.location\n\tdelete global.XMLHttpRequest\n\tdelete require.cache[moduleName]\n\tt.end()\n})\n"]},"metadata":{},"sourceType":"script"}