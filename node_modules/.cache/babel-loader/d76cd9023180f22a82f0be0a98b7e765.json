{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"chai\").assert,\n    coerceToNaturalNumber = require(\"../../natural-number/coerce\");\n\ndescribe(\"natural-number/coerce\", function () {\n  it(\"Should coerce float to integer\", function () {\n    assert.equal(coerceToNaturalNumber(123.123), 123);\n    assert.equal(coerceToNaturalNumber(123.823), 123);\n  });\n  it(\"Should coerce string\", function () {\n    assert.equal(coerceToNaturalNumber(\"12.123\"), 12);\n  });\n  it(\"Should coerce booleans\", function () {\n    assert.equal(coerceToNaturalNumber(true), 1);\n  });\n  it(\"Should coerce number objects\", function () {\n    assert.equal(coerceToNaturalNumber(new Number(343)), 343);\n  });\n  it(\"Should coerce objects\", function () {\n    assert.equal(coerceToNaturalNumber({\n      valueOf: function () {\n        return 23;\n      }\n    }), 23);\n  });\n  it(\"Should coerce number beyond Number.MAX_SAFE_INTEGER\", function () {\n    assert.equal(coerceToNaturalNumber(9007199254740992), 9007199254740992);\n  });\n  it(\"Should reject negative number\", function () {\n    assert.equal(coerceToNaturalNumber(-1), null);\n  });\n  it(\"Should reject infinite number\", function () {\n    assert.equal(coerceToNaturalNumber(Infinity), null);\n  });\n  it(\"Should reject NaN\", function () {\n    assert.equal(coerceToNaturalNumber(NaN), null);\n  });\n\n  if (typeof Object.create === \"function\") {\n    it(\"Should not coerce objects with no number representation\", function () {\n      assert.equal(coerceToNaturalNumber(Object.create(null)), null);\n    });\n  }\n\n  it(\"Should not coerce null\", function () {\n    assert.equal(coerceToNaturalNumber(null), null);\n  });\n  it(\"Should not coerce undefined\", function () {\n    assert.equal(coerceToNaturalNumber(undefined), null);\n  });\n\n  if (typeof Symbol === \"function\") {\n    it(\"Should not coerce symbols\", function () {\n      assert.equal(coerceToNaturalNumber(Symbol(\"foo\")), null);\n    });\n  }\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type/test/natural-number/coerce.js"],"names":["assert","require","coerceToNaturalNumber","describe","it","equal","Number","valueOf","Infinity","NaN","Object","create","undefined","Symbol"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar assert                = require(\"chai\").assert\n  , coerceToNaturalNumber = require(\"../../natural-number/coerce\");\n\ndescribe(\"natural-number/coerce\", function () {\n\tit(\"Should coerce float to integer\", function () {\n\t\tassert.equal(coerceToNaturalNumber(123.123), 123);\n\t\tassert.equal(coerceToNaturalNumber(123.823), 123);\n\t});\n\tit(\"Should coerce string\", function () { assert.equal(coerceToNaturalNumber(\"12.123\"), 12); });\n\tit(\"Should coerce booleans\", function () { assert.equal(coerceToNaturalNumber(true), 1); });\n\tit(\"Should coerce number objects\", function () {\n\t\tassert.equal(coerceToNaturalNumber(new Number(343)), 343);\n\t});\n\tit(\"Should coerce objects\", function () {\n\t\tassert.equal(coerceToNaturalNumber({ valueOf: function () { return 23; } }), 23);\n\t});\n\tit(\"Should coerce number beyond Number.MAX_SAFE_INTEGER\", function () {\n\t\tassert.equal(coerceToNaturalNumber(9007199254740992), 9007199254740992);\n\t});\n\n\tit(\"Should reject negative number\", function () {\n\t\tassert.equal(coerceToNaturalNumber(-1), null);\n\t});\n\tit(\"Should reject infinite number\", function () {\n\t\tassert.equal(coerceToNaturalNumber(Infinity), null);\n\t});\n\tit(\"Should reject NaN\", function () { assert.equal(coerceToNaturalNumber(NaN), null); });\n\n\tif (typeof Object.create === \"function\") {\n\t\tit(\"Should not coerce objects with no number representation\", function () {\n\t\t\tassert.equal(coerceToNaturalNumber(Object.create(null)), null);\n\t\t});\n\t}\n\n\tit(\"Should not coerce null\", function () { assert.equal(coerceToNaturalNumber(null), null); });\n\tit(\"Should not coerce undefined\", function () {\n\t\tassert.equal(coerceToNaturalNumber(undefined), null);\n\t});\n\n\tif (typeof Symbol === \"function\") {\n\t\tit(\"Should not coerce symbols\", function () {\n\t\t\tassert.equal(coerceToNaturalNumber(Symbol(\"foo\")), null);\n\t\t});\n\t}\n});\n"]},"metadata":{},"sourceType":"script"}