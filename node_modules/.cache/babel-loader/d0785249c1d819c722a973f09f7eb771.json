{"ast":null,"code":"try {\n  self['workbox:window:4.3.1'] && _();\n} catch (e) {} // eslint-disable-line\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n/**\n * Sends a data object to a service worker via `postMessage` and resolves with\n * a response (if any).\n *\n * A response can be set in a message handler in the service worker by\n * calling `event.ports[0].postMessage(...)`, which will resolve the promise\n * returned by `messageSW()`. If no response is set, the promise will not\n * resolve.\n *\n * @param {ServiceWorker} sw The service worker to send the message to.\n * @param {Object} data An object to send to the service worker.\n * @return {Promise<Object|undefined>}\n *\n * @memberof module:workbox-window\n */\n\n\nconst messageSW = (sw, data) => {\n  return new Promise(resolve => {\n    let messageChannel = new MessageChannel();\n\n    messageChannel.port1.onmessage = evt => resolve(evt.data);\n\n    sw.postMessage(data, [messageChannel.port2]);\n  });\n};\n\ntry {\n  self['workbox:core:4.3.1'] && _();\n} catch (e) {} // eslint-disable-line\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\n\n\nclass Deferred {\n  /**\n   * Creates a promise and exposes its resolve and reject functions as methods.\n   */\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n\n}\n/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n\nconst logger = (() => {\n  let inGroup = false;\n  const methodToColorMap = {\n    debug: `#7f8c8d`,\n    // Gray\n    log: `#2ecc71`,\n    // Green\n    warn: `#f39c12`,\n    // Yellow\n    error: `#c0392b`,\n    // Red\n    groupCollapsed: `#3498db`,\n    // Blue\n    groupEnd: null // No colored prefix on groupEnd\n\n  };\n\n  const print = function (method, args) {\n    if (method === 'groupCollapsed') {\n      // Safari doesn't print all console.groupCollapsed() arguments:\n      // https://bugs.webkit.org/show_bug.cgi?id=182754\n      if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n        console[method](...args);\n        return;\n      }\n    }\n\n    const styles = [`background: ${methodToColorMap[method]}`, `border-radius: 0.5em`, `color: white`, `font-weight: bold`, `padding: 2px 0.5em`]; // When in a group, the workbox prefix is not displayed.\n\n    const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n    console[method](...logPrefix, ...args);\n\n    if (method === 'groupCollapsed') {\n      inGroup = true;\n    }\n\n    if (method === 'groupEnd') {\n      inGroup = false;\n    }\n  };\n\n  const api = {};\n\n  for (const method of Object.keys(methodToColorMap)) {\n    api[method] = (...args) => {\n      print(method, args);\n    };\n  }\n\n  return api;\n})();\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n/**\n * A minimal `EventTarget` shim.\n * This is necessary because not all browsers support constructable\n * `EventTarget`, so using a real `EventTarget` will error.\n * @private\n */\n\n\nclass EventTargetShim {\n  /**\n   * Creates an event listener registry\n   *\n   * @private\n   */\n  constructor() {\n    // A registry of event types to listeners.\n    this._eventListenerRegistry = {};\n  }\n  /**\n   * @param {string} type\n   * @param {Function} listener\n   * @private\n   */\n\n\n  addEventListener(type, listener) {\n    this._getEventListenersByType(type).add(listener);\n  }\n  /**\n   * @param {string} type\n   * @param {Function} listener\n   * @private\n   */\n\n\n  removeEventListener(type, listener) {\n    this._getEventListenersByType(type).delete(listener);\n  }\n  /**\n   * @param {Event} event\n   * @private\n   */\n\n\n  dispatchEvent(event) {\n    event.target = this;\n\n    this._getEventListenersByType(event.type).forEach(listener => listener(event));\n  }\n  /**\n   * Returns a Set of listeners associated with the passed event type.\n   * If no handlers have been registered, an empty Set is returned.\n   *\n   * @param {string} type The event type.\n   * @return {Set} An array of handler functions.\n   * @private\n   */\n\n\n  _getEventListenersByType(type) {\n    return this._eventListenerRegistry[type] = this._eventListenerRegistry[type] || new Set();\n  }\n\n}\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n/**\n * Returns true if two URLs have the same `.href` property. The URLS can be\n * relative, and if they are the current location href is used to resolve URLs.\n *\n * @private\n * @param {string} url1\n * @param {string} url2\n * @return {boolean}\n */\n\n\nconst urlsMatch = (url1, url2) => {\n  return new URL(url1, location).href === new URL(url2, location).href;\n};\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n/**\n * A minimal `Event` subclass shim.\n * This doesn't *actually* subclass `Event` because not all browsers support\n * constructable `EventTarget`, and using a real `Event` will error.\n * @private\n */\n\n\nclass WorkboxEvent {\n  /**\n   * @param {string} type\n   * @param {Object} props\n   */\n  constructor(type, props) {\n    Object.assign(this, props, {\n      type\n    });\n  }\n\n}\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n// `skipWaiting()` wasn't called. This 200 amount wasn't scientifically\n// chosen, but it seems to avoid false positives in my testing.\n\n\nconst WAITING_TIMEOUT_DURATION = 200; // The amount of time after a registration that we can reasonably conclude\n// that the registration didn't trigger an update.\n\nconst REGISTRATION_TIMEOUT_DURATION = 60000;\n/**\n * A class to aid in handling service worker registration, updates, and\n * reacting to service worker lifecycle events.\n *\n * @fires [message]{@link module:workbox-window.Workbox#message}\n * @fires [installed]{@link module:workbox-window.Workbox#installed}\n * @fires [waiting]{@link module:workbox-window.Workbox#waiting}\n * @fires [controlling]{@link module:workbox-window.Workbox#controlling}\n * @fires [activated]{@link module:workbox-window.Workbox#activated}\n * @fires [redundant]{@link module:workbox-window.Workbox#redundant}\n * @fires [externalinstalled]{@link module:workbox-window.Workbox#externalinstalled}\n * @fires [externalwaiting]{@link module:workbox-window.Workbox#externalwaiting}\n * @fires [externalactivated]{@link module:workbox-window.Workbox#externalactivated}\n *\n * @memberof module:workbox-window\n */\n\nclass Workbox extends EventTargetShim {\n  /**\n   * Creates a new Workbox instance with a script URL and service worker\n   * options. The script URL and options are the same as those used when\n   * calling `navigator.serviceWorker.register(scriptURL, options)`. See:\n   * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n   *\n   * @param {string} scriptURL The service worker script associated with this\n   *     instance.\n   * @param {Object} [registerOptions] The service worker options associated\n   *     with this instance.\n   */\n  constructor(scriptURL, registerOptions = {}) {\n    super();\n    this._scriptURL = scriptURL;\n    this._registerOptions = registerOptions;\n    this._updateFoundCount = 0; // Deferreds we can resolve later.\n\n    this._swDeferred = new Deferred();\n    this._activeDeferred = new Deferred();\n    this._controllingDeferred = new Deferred(); // Bind event handler callbacks.\n\n    this._onMessage = this._onMessage.bind(this);\n    this._onStateChange = this._onStateChange.bind(this);\n    this._onUpdateFound = this._onUpdateFound.bind(this);\n    this._onControllerChange = this._onControllerChange.bind(this);\n  }\n  /**\n   * Registers a service worker for this instances script URL and service\n   * worker options. By default this method delays registration until after\n   * the window has loaded.\n   *\n   * @param {Object} [options]\n   * @param {Function} [options.immediate=false] Setting this to true will\n   *     register the service worker immediately, even if the window has\n   *     not loaded (not recommended).\n   */\n\n\n  async register({\n    immediate = false\n  } = {}) {\n    {\n      if (this._registrationTime) {\n        logger.error('Cannot re-register a Workbox instance after it has ' + 'been registered. Create a new instance instead.');\n        return;\n      }\n    }\n\n    if (!immediate && document.readyState !== 'complete') {\n      await new Promise(res => addEventListener('load', res));\n    } // Set this flag to true if any service worker was controlling the page\n    // at registration time.\n\n\n    this._isUpdate = Boolean(navigator.serviceWorker.controller); // Before registering, attempt to determine if a SW is already controlling\n    // the page, and if that SW script (and version, if specified) matches this\n    // instance's script.\n\n    this._compatibleControllingSW = this._getControllingSWIfCompatible();\n    this._registration = await this._registerScript(); // If we have a compatible controller, store the controller as the \"own\"\n    // SW, resolve active/controlling deferreds and add necessary listeners.\n\n    if (this._compatibleControllingSW) {\n      this._sw = this._compatibleControllingSW;\n\n      this._activeDeferred.resolve(this._compatibleControllingSW);\n\n      this._controllingDeferred.resolve(this._compatibleControllingSW);\n\n      this._reportWindowReady(this._compatibleControllingSW);\n\n      this._compatibleControllingSW.addEventListener('statechange', this._onStateChange, {\n        once: true\n      });\n    } // If there's a waiting service worker with a matching URL before the\n    // `updatefound` event fires, it likely means that this site is open\n    // in another tab, or the user refreshed the page (and thus the prevoius\n    // page wasn't fully unloaded before this page started loading).\n    // https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#waiting\n\n\n    const waitingSW = this._registration.waiting;\n\n    if (waitingSW && urlsMatch(waitingSW.scriptURL, this._scriptURL)) {\n      // Store the waiting SW as the \"own\" Sw, even if it means overwriting\n      // a compatible controller.\n      this._sw = waitingSW; // Run this in the next microtask, so any code that adds an event\n      // listener after awaiting `register()` will get this event.\n\n      Promise.resolve().then(() => {\n        this.dispatchEvent(new WorkboxEvent('waiting', {\n          sw: waitingSW,\n          wasWaitingBeforeRegister: true\n        }));\n        {\n          logger.warn('A service worker was already waiting to activate ' + 'before this script was registered...');\n        }\n      });\n    } // If an \"own\" SW is already set, resolve the deferred.\n\n\n    if (this._sw) {\n      this._swDeferred.resolve(this._sw);\n    }\n\n    {\n      logger.log('Successfully registered service worker.', this._scriptURL);\n\n      if (navigator.serviceWorker.controller) {\n        if (this._compatibleControllingSW) {\n          logger.debug('A service worker with the same script URL ' + 'is already controlling this page.');\n        } else {\n          logger.debug('A service worker with a different script URL is ' + 'currently controlling the page. The browser is now fetching ' + 'the new script now...');\n        }\n      }\n\n      const currentPageIsOutOfScope = () => {\n        const scopeURL = new URL(this._registerOptions.scope || this._scriptURL, document.baseURI);\n        const scopeURLBasePath = new URL('./', scopeURL.href).pathname;\n        return !location.pathname.startsWith(scopeURLBasePath);\n      };\n\n      if (currentPageIsOutOfScope()) {\n        logger.warn('The current page is not in scope for the registered ' + 'service worker. Was this a mistake?');\n      }\n    }\n\n    this._registration.addEventListener('updatefound', this._onUpdateFound);\n\n    navigator.serviceWorker.addEventListener('controllerchange', this._onControllerChange, {\n      once: true\n    }); // Add message listeners.\n\n    if ('BroadcastChannel' in self) {\n      this._broadcastChannel = new BroadcastChannel('workbox');\n\n      this._broadcastChannel.addEventListener('message', this._onMessage);\n    }\n\n    navigator.serviceWorker.addEventListener('message', this._onMessage);\n    return this._registration;\n  }\n  /**\n   * Resolves to the service worker registered by this instance as soon as it\n   * is active. If a service worker was already controlling at registration\n   * time then it will resolve to that if the script URLs (and optionally\n   * script versions) match, otherwise it will wait until an update is found\n   * and activates.\n   *\n   * @return {Promise<ServiceWorker>}\n   */\n\n\n  get active() {\n    return this._activeDeferred.promise;\n  }\n  /**\n   * Resolves to the service worker registered by this instance as soon as it\n   * is controlling the page. If a service worker was already controlling at\n   * registration time then it will resolve to that if the script URLs (and\n   * optionally script versions) match, otherwise it will wait until an update\n   * is found and starts controlling the page.\n   * Note: the first time a service worker is installed it will active but\n   * not start controlling the page unless `clients.claim()` is called in the\n   * service worker.\n   *\n   * @return {Promise<ServiceWorker>}\n   */\n\n\n  get controlling() {\n    return this._controllingDeferred.promise;\n  }\n  /**\n   * Resolves with a reference to a service worker that matches the script URL\n   * of this instance, as soon as it's available.\n   *\n   * If, at registration time, there's already an active or waiting service\n   * worker with a matching script URL, it will be used (with the waiting\n   * service worker taking precedence over the active service worker if both\n   * match, since the waiting service worker would have been registered more\n   * recently).\n   * If there's no matching active or waiting service worker at registration\n   * time then the promise will not resolve until an update is found and starts\n   * installing, at which point the installing service worker is used.\n   *\n   * @return {Promise<ServiceWorker>}\n   */\n\n\n  async getSW() {\n    // If `this._sw` is set, resolve with that as we want `getSW()` to\n    // return the correct (new) service worker if an update is found.\n    return this._sw || this._swDeferred.promise;\n  }\n  /**\n   * Sends the passed data object to the service worker registered by this\n   * instance (via [`getSW()`]{@link module:workbox-window.Workbox#getSW}) and resolves\n   * with a response (if any).\n   *\n   * A response can be set in a message handler in the service worker by\n   * calling `event.ports[0].postMessage(...)`, which will resolve the promise\n   * returned by `messageSW()`. If no response is set, the promise will never\n   * resolve.\n   *\n   * @param {Object} data An object to send to the service worker\n   * @return {Promise<Object>}\n   */\n\n\n  async messageSW(data) {\n    const sw = await this.getSW();\n    return messageSW(sw, data);\n  }\n  /**\n   * Checks for a service worker already controlling the page and returns\n   * it if its script URL matchs.\n   *\n   * @private\n   * @return {ServiceWorker|undefined}\n   */\n\n\n  _getControllingSWIfCompatible() {\n    const controller = navigator.serviceWorker.controller;\n\n    if (controller && urlsMatch(controller.scriptURL, this._scriptURL)) {\n      return controller;\n    }\n  }\n  /**\n   * Registers a service worker for this instances script URL and register\n   * options and tracks the time registration was complete.\n   *\n   * @private\n   */\n\n\n  async _registerScript() {\n    try {\n      const reg = await navigator.serviceWorker.register(this._scriptURL, this._registerOptions); // Keep track of when registration happened, so it can be used in the\n      // `this._onUpdateFound` heuristic. Also use the presence of this\n      // property as a way to see if `.register()` has been called.\n\n      this._registrationTime = performance.now();\n      return reg;\n    } catch (error) {\n      {\n        logger.error(error);\n      } // Re-throw the error.\n\n      throw error;\n    }\n  }\n  /**\n   * Sends a message to the passed service worker that the window is ready.\n   *\n   * @param {ServiceWorker} sw\n   * @private\n   */\n\n\n  _reportWindowReady(sw) {\n    messageSW(sw, {\n      type: 'WINDOW_READY',\n      meta: 'workbox-window'\n    });\n  }\n  /**\n   * @private\n   */\n\n\n  _onUpdateFound() {\n    const installingSW = this._registration.installing; // If the script URL passed to `navigator.serviceWorker.register()` is\n    // different from the current controlling SW's script URL, we know any\n    // successful registration calls will trigger an `updatefound` event.\n    // But if the registered script URL is the same as the current controlling\n    // SW's script URL, we'll only get an `updatefound` event if the file\n    // changed since it was last registered. This can be a problem if the user\n    // opens up the same page in a different tab, and that page registers\n    // a SW that triggers an update. It's a problem because this page has no\n    // good way of knowing whether the `updatefound` event came from the SW\n    // script it registered or from a registration attempt made by a newer\n    // version of the page running in another tab.\n    // To minimize the possibility of a false positive, we use the logic here:\n\n    let updateLikelyTriggeredExternally = // Since we enforce only calling `register()` once, and since we don't\n    // add the `updatefound` event listener until the `register()` call, if\n    // `_updateFoundCount` is > 0 then it means this method has already\n    // been called, thus this SW must be external\n    this._updateFoundCount > 0 || // If the script URL of the installing SW is different from this\n    // instance's script URL, we know it's definitely not from our\n    // registration.\n    !urlsMatch(installingSW.scriptURL, this._scriptURL) || // If all of the above are false, then we use a time-based heuristic:\n    // Any `updatefound` event that occurs long after our registration is\n    // assumed to be external.\n    performance.now() > this._registrationTime + REGISTRATION_TIMEOUT_DURATION ? // If any of the above are not true, we assume the update was\n    // triggered by this instance.\n    true : false;\n\n    if (updateLikelyTriggeredExternally) {\n      this._externalSW = installingSW;\n\n      this._registration.removeEventListener('updatefound', this._onUpdateFound);\n    } else {\n      // If the update was not triggered externally we know the installing\n      // SW is the one we registered, so we set it.\n      this._sw = installingSW;\n\n      this._swDeferred.resolve(installingSW); // The `installing` state isn't something we have a dedicated\n      // callback for, but we do log messages for it in development.\n\n\n      {\n        if (navigator.serviceWorker.controller) {\n          logger.log('Updated service worker found. Installing now...');\n        } else {\n          logger.log('Service worker is installing...');\n        }\n      }\n    } // Increment the `updatefound` count, so future invocations of this\n    // method can be sure they were triggered externally.\n\n\n    ++this._updateFoundCount; // Add a `statechange` listener regardless of whether this update was\n    // triggered externally, since we have callbacks for both.\n\n    installingSW.addEventListener('statechange', this._onStateChange);\n  }\n  /**\n   * @private\n   * @param {Event} originalEvent\n   */\n\n\n  _onStateChange(originalEvent) {\n    const sw = originalEvent.target;\n    const {\n      state\n    } = sw;\n    const isExternal = sw === this._externalSW;\n    const eventPrefix = isExternal ? 'external' : '';\n    const eventProps = {\n      sw,\n      originalEvent\n    };\n\n    if (!isExternal && this._isUpdate) {\n      eventProps.isUpdate = true;\n    }\n\n    this.dispatchEvent(new WorkboxEvent(eventPrefix + state, eventProps));\n\n    if (state === 'installed') {\n      // This timeout is used to ignore cases where the service worker calls\n      // `skipWaiting()` in the install event, thus moving it directly in the\n      // activating state. (Since all service workers *must* go through the\n      // waiting phase, the only way to detect `skipWaiting()` called in the\n      // install event is to observe that the time spent in the waiting phase\n      // is very short.)\n      // NOTE: we don't need separate timeouts for the own and external SWs\n      // since they can't go through these phases at the same time.\n      this._waitingTimeout = setTimeout(() => {\n        // Ensure the SW is still waiting (it may now be redundant).\n        if (state === 'installed' && this._registration.waiting === sw) {\n          this.dispatchEvent(new WorkboxEvent(eventPrefix + 'waiting', eventProps));\n          {\n            if (isExternal) {\n              logger.warn('An external service worker has installed but is ' + 'waiting for this client to close before activating...');\n            } else {\n              logger.warn('The service worker has installed but is waiting ' + 'for existing clients to close before activating...');\n            }\n          }\n        }\n      }, WAITING_TIMEOUT_DURATION);\n    } else if (state === 'activating') {\n      clearTimeout(this._waitingTimeout);\n\n      if (!isExternal) {\n        this._activeDeferred.resolve(sw);\n      }\n    }\n\n    {\n      switch (state) {\n        case 'installed':\n          if (isExternal) {\n            logger.warn('An external service worker has installed. ' + 'You may want to suggest users reload this page.');\n          } else {\n            logger.log('Registered service worker installed.');\n          }\n\n          break;\n\n        case 'activated':\n          if (isExternal) {\n            logger.warn('An external service worker has activated.');\n          } else {\n            logger.log('Registered service worker activated.');\n\n            if (sw !== navigator.serviceWorker.controller) {\n              logger.warn('The registered service worker is active but ' + 'not yet controlling the page. Reload or run ' + '`clients.claim()` in the service worker.');\n            }\n          }\n\n          break;\n\n        case 'redundant':\n          if (sw === this._compatibleControllingSW) {\n            logger.log('Previously controlling service worker now redundant!');\n          } else if (!isExternal) {\n            logger.log('Registered service worker now redundant!');\n          }\n\n          break;\n      }\n    }\n  }\n  /**\n   * @private\n   * @param {Event} originalEvent\n   */\n\n\n  _onControllerChange(originalEvent) {\n    const sw = this._sw;\n\n    if (sw === navigator.serviceWorker.controller) {\n      this.dispatchEvent(new WorkboxEvent('controlling', {\n        sw,\n        originalEvent\n      }));\n      {\n        logger.log('Registered service worker now controlling this page.');\n      }\n\n      this._controllingDeferred.resolve(sw);\n    }\n  }\n  /**\n   * @private\n   * @param {Event} originalEvent\n   */\n\n\n  _onMessage(originalEvent) {\n    const {\n      data\n    } = originalEvent;\n    this.dispatchEvent(new WorkboxEvent('message', {\n      data,\n      originalEvent\n    }));\n  }\n\n} // The jsdoc comments below outline the events this instance may dispatch:\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n\nexport { Workbox, messageSW };","map":{"version":3,"sources":["../_version.mjs","../messageSW.mjs","../../workbox-core/_version.mjs","../../workbox-core/_private/Deferred.mjs","../../workbox-core/_private/logger.mjs","../utils/EventTargetShim.mjs","../utils/urlsMatch.mjs","../utils/WorkboxEvent.mjs","../Workbox.mjs","../index.mjs"],"names":["self","_","messageSW","resolve","messageChannel","evt","sw","constructor","logger","inGroup","methodToColorMap","debug","log","warn","error","groupCollapsed","groupEnd","print","method","navigator","console","styles","logPrefix","api","Object","addEventListener","removeEventListener","dispatchEvent","event","listener","_getEventListenersByType","urlsMatch","type","WAITING_TIMEOUT_DURATION","REGISTRATION_TIMEOUT_DURATION","registerOptions","immediate","document","res","Boolean","once","waitingSW","Promise","wasWaitingBeforeRegister","currentPageIsOutOfScope","scopeURL","scopeURLBasePath","location","_getControllingSWIfCompatible","controller","reg","performance","_reportWindowReady","meta","_onUpdateFound","installingSW","updateLikelyTriggeredExternally","_onStateChange","originalEvent","state","isExternal","eventPrefix","eventProps","setTimeout","clearTimeout","_onControllerChange","_onMessage","data"],"mappings":"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","sourcesContent":["try{self['workbox:window:4.3.1']&&_()}catch(e){}// eslint-disable-line","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport './_version.mjs';\n\n\n/**\n * Sends a data object to a service worker via `postMessage` and resolves with\n * a response (if any).\n *\n * A response can be set in a message handler in the service worker by\n * calling `event.ports[0].postMessage(...)`, which will resolve the promise\n * returned by `messageSW()`. If no response is set, the promise will not\n * resolve.\n *\n * @param {ServiceWorker} sw The service worker to send the message to.\n * @param {Object} data An object to send to the service worker.\n * @return {Promise<Object|undefined>}\n *\n * @memberof module:workbox-window\n */\nconst messageSW = (sw, data) => {\n  return new Promise((resolve) => {\n    let messageChannel = new MessageChannel();\n    messageChannel.port1.onmessage = (evt) => resolve(evt.data);\n    sw.postMessage(data, [messageChannel.port2]);\n  });\n};\n\nexport {messageSW};\n","try{self['workbox:core:4.3.1']&&_()}catch(e){}// eslint-disable-line","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nexport class Deferred {\n  /**\n   * Creates a promise and exposes its resolve and reject functions as methods.\n   */\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n\nconst logger = process.env.NODE_ENV === 'production' ? null : (() => {\n  let inGroup = false;\n\n  const methodToColorMap = {\n    debug: `#7f8c8d`, // Gray\n    log: `#2ecc71`, // Green\n    warn: `#f39c12`, // Yellow\n    error: `#c0392b`, // Red\n    groupCollapsed: `#3498db`, // Blue\n    groupEnd: null, // No colored prefix on groupEnd\n  };\n\n  const print = function(method, args) {\n    if (method === 'groupCollapsed') {\n      // Safari doesn't print all console.groupCollapsed() arguments:\n      // https://bugs.webkit.org/show_bug.cgi?id=182754\n      if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n        console[method](...args);\n        return;\n      }\n    }\n\n    const styles = [\n      `background: ${methodToColorMap[method]}`,\n      `border-radius: 0.5em`,\n      `color: white`,\n      `font-weight: bold`,\n      `padding: 2px 0.5em`,\n    ];\n\n    // When in a group, the workbox prefix is not displayed.\n    const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n\n    console[method](...logPrefix, ...args);\n\n    if (method === 'groupCollapsed') {\n      inGroup = true;\n    }\n    if (method === 'groupEnd') {\n      inGroup = false;\n    }\n  };\n\n  const api = {};\n  for (const method of Object.keys(methodToColorMap)) {\n    api[method] = (...args) => {\n      print(method, args);\n    };\n  }\n\n  return api;\n})();\n\nexport {logger};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n\n/**\n * A minimal `EventTarget` shim.\n * This is necessary because not all browsers support constructable\n * `EventTarget`, so using a real `EventTarget` will error.\n * @private\n */\nclass EventTargetShim {\n  /**\n   * Creates an event listener registry\n   *\n   * @private\n   */\n  constructor() {\n    // A registry of event types to listeners.\n    this._eventListenerRegistry = {};\n  }\n  /**\n   * @param {string} type\n   * @param {Function} listener\n   * @private\n   */\n  addEventListener(type, listener) {\n    this._getEventListenersByType(type).add(listener);\n  }\n\n  /**\n   * @param {string} type\n   * @param {Function} listener\n   * @private\n   */\n  removeEventListener(type, listener) {\n    this._getEventListenersByType(type).delete(listener);\n  }\n\n  /**\n   * @param {Event} event\n   * @private\n   */\n  dispatchEvent(event) {\n    event.target = this;\n    this._getEventListenersByType(event.type).forEach(\n        (listener) => listener(event));\n  }\n\n  /**\n   * Returns a Set of listeners associated with the passed event type.\n   * If no handlers have been registered, an empty Set is returned.\n   *\n   * @param {string} type The event type.\n   * @return {Set} An array of handler functions.\n   * @private\n   */\n  _getEventListenersByType(type) {\n    return this._eventListenerRegistry[type] =\n        (this._eventListenerRegistry[type] || new Set());\n  }\n}\n\nexport {EventTargetShim};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n\n/**\n * Returns true if two URLs have the same `.href` property. The URLS can be\n * relative, and if they are the current location href is used to resolve URLs.\n *\n * @private\n * @param {string} url1\n * @param {string} url2\n * @return {boolean}\n */\nconst urlsMatch = (url1, url2) => {\n  return new URL(url1, location).href === new URL(url2, location).href;\n};\n\nexport {urlsMatch};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\n/**\n * A minimal `Event` subclass shim.\n * This doesn't *actually* subclass `Event` because not all browsers support\n * constructable `EventTarget`, and using a real `Event` will error.\n * @private\n */\nclass WorkboxEvent {\n  /**\n   * @param {string} type\n   * @param {Object} props\n   */\n  constructor(type, props) {\n    Object.assign(this, props, {type});\n  }\n}\n\nexport {WorkboxEvent};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {Deferred} from 'workbox-core/_private/Deferred.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {messageSW} from './messageSW.mjs';\nimport {EventTargetShim} from './utils/EventTargetShim.mjs';\nimport {urlsMatch} from './utils/urlsMatch.mjs';\nimport {WorkboxEvent} from './utils/WorkboxEvent.mjs';\nimport './_version.mjs';\n\n\n// The time a SW must be in the waiting phase before we can conclude\n// `skipWaiting()` wasn't called. This 200 amount wasn't scientifically\n// chosen, but it seems to avoid false positives in my testing.\nconst WAITING_TIMEOUT_DURATION = 200;\n\n// The amount of time after a registration that we can reasonably conclude\n// that the registration didn't trigger an update.\nconst REGISTRATION_TIMEOUT_DURATION = 60000;\n\n/**\n * A class to aid in handling service worker registration, updates, and\n * reacting to service worker lifecycle events.\n *\n * @fires [message]{@link module:workbox-window.Workbox#message}\n * @fires [installed]{@link module:workbox-window.Workbox#installed}\n * @fires [waiting]{@link module:workbox-window.Workbox#waiting}\n * @fires [controlling]{@link module:workbox-window.Workbox#controlling}\n * @fires [activated]{@link module:workbox-window.Workbox#activated}\n * @fires [redundant]{@link module:workbox-window.Workbox#redundant}\n * @fires [externalinstalled]{@link module:workbox-window.Workbox#externalinstalled}\n * @fires [externalwaiting]{@link module:workbox-window.Workbox#externalwaiting}\n * @fires [externalactivated]{@link module:workbox-window.Workbox#externalactivated}\n *\n * @memberof module:workbox-window\n */\nclass Workbox extends EventTargetShim {\n  /**\n   * Creates a new Workbox instance with a script URL and service worker\n   * options. The script URL and options are the same as those used when\n   * calling `navigator.serviceWorker.register(scriptURL, options)`. See:\n   * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n   *\n   * @param {string} scriptURL The service worker script associated with this\n   *     instance.\n   * @param {Object} [registerOptions] The service worker options associated\n   *     with this instance.\n   */\n  constructor(scriptURL, registerOptions = {}) {\n    super();\n\n    this._scriptURL = scriptURL;\n    this._registerOptions = registerOptions;\n    this._updateFoundCount = 0;\n\n    // Deferreds we can resolve later.\n    this._swDeferred = new Deferred();\n    this._activeDeferred = new Deferred();\n    this._controllingDeferred = new Deferred();\n\n    // Bind event handler callbacks.\n    this._onMessage = this._onMessage.bind(this);\n    this._onStateChange = this._onStateChange.bind(this);\n    this._onUpdateFound = this._onUpdateFound.bind(this);\n    this._onControllerChange = this._onControllerChange.bind(this);\n  }\n\n  /**\n   * Registers a service worker for this instances script URL and service\n   * worker options. By default this method delays registration until after\n   * the window has loaded.\n   *\n   * @param {Object} [options]\n   * @param {Function} [options.immediate=false] Setting this to true will\n   *     register the service worker immediately, even if the window has\n   *     not loaded (not recommended).\n   */\n  async register({immediate = false} = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (this._registrationTime) {\n        logger.error('Cannot re-register a Workbox instance after it has ' +\n            'been registered. Create a new instance instead.');\n        return;\n      }\n    }\n\n    if (!immediate && document.readyState !== 'complete') {\n      await new Promise((res) => addEventListener('load', res));\n    }\n\n    // Set this flag to true if any service worker was controlling the page\n    // at registration time.\n    this._isUpdate = Boolean(navigator.serviceWorker.controller);\n\n    // Before registering, attempt to determine if a SW is already controlling\n    // the page, and if that SW script (and version, if specified) matches this\n    // instance's script.\n    this._compatibleControllingSW = this._getControllingSWIfCompatible();\n\n    this._registration = await this._registerScript();\n\n    // If we have a compatible controller, store the controller as the \"own\"\n    // SW, resolve active/controlling deferreds and add necessary listeners.\n    if (this._compatibleControllingSW) {\n      this._sw = this._compatibleControllingSW;\n      this._activeDeferred.resolve(this._compatibleControllingSW);\n      this._controllingDeferred.resolve(this._compatibleControllingSW);\n\n      this._reportWindowReady(this._compatibleControllingSW);\n      this._compatibleControllingSW.addEventListener(\n          'statechange', this._onStateChange, {once: true});\n    }\n\n    // If there's a waiting service worker with a matching URL before the\n    // `updatefound` event fires, it likely means that this site is open\n    // in another tab, or the user refreshed the page (and thus the prevoius\n    // page wasn't fully unloaded before this page started loading).\n    // https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#waiting\n    const waitingSW = this._registration.waiting;\n    if (waitingSW && urlsMatch(waitingSW.scriptURL, this._scriptURL)) {\n      // Store the waiting SW as the \"own\" Sw, even if it means overwriting\n      // a compatible controller.\n      this._sw = waitingSW;\n\n      // Run this in the next microtask, so any code that adds an event\n      // listener after awaiting `register()` will get this event.\n      Promise.resolve().then(() => {\n        this.dispatchEvent(new WorkboxEvent('waiting', {\n          sw: waitingSW,\n          wasWaitingBeforeRegister: true,\n        }));\n        if (process.env.NODE_ENV !== 'production') {\n          logger.warn('A service worker was already waiting to activate ' +\n              'before this script was registered...');\n        }\n      });\n    }\n\n    // If an \"own\" SW is already set, resolve the deferred.\n    if (this._sw) {\n      this._swDeferred.resolve(this._sw);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log('Successfully registered service worker.', this._scriptURL);\n\n      if (navigator.serviceWorker.controller) {\n        if (this._compatibleControllingSW) {\n          logger.debug('A service worker with the same script URL ' +\n              'is already controlling this page.');\n        } else {\n          logger.debug('A service worker with a different script URL is ' +\n              'currently controlling the page. The browser is now fetching ' +\n              'the new script now...');\n        }\n      }\n\n      const currentPageIsOutOfScope = () => {\n        const scopeURL = new URL(\n            this._registerOptions.scope || this._scriptURL, document.baseURI);\n        const scopeURLBasePath = new URL('./', scopeURL.href).pathname;\n        return !location.pathname.startsWith(scopeURLBasePath);\n      };\n      if (currentPageIsOutOfScope()) {\n        logger.warn('The current page is not in scope for the registered ' +\n            'service worker. Was this a mistake?');\n      }\n    }\n\n    this._registration.addEventListener('updatefound', this._onUpdateFound);\n    navigator.serviceWorker.addEventListener(\n        'controllerchange', this._onControllerChange, {once: true});\n\n    // Add message listeners.\n    if ('BroadcastChannel' in self) {\n      this._broadcastChannel = new BroadcastChannel('workbox');\n      this._broadcastChannel.addEventListener('message', this._onMessage);\n    }\n    navigator.serviceWorker.addEventListener('message', this._onMessage);\n\n    return this._registration;\n  }\n\n  /**\n   * Resolves to the service worker registered by this instance as soon as it\n   * is active. If a service worker was already controlling at registration\n   * time then it will resolve to that if the script URLs (and optionally\n   * script versions) match, otherwise it will wait until an update is found\n   * and activates.\n   *\n   * @return {Promise<ServiceWorker>}\n   */\n  get active() {\n    return this._activeDeferred.promise;\n  }\n\n  /**\n   * Resolves to the service worker registered by this instance as soon as it\n   * is controlling the page. If a service worker was already controlling at\n   * registration time then it will resolve to that if the script URLs (and\n   * optionally script versions) match, otherwise it will wait until an update\n   * is found and starts controlling the page.\n   * Note: the first time a service worker is installed it will active but\n   * not start controlling the page unless `clients.claim()` is called in the\n   * service worker.\n   *\n   * @return {Promise<ServiceWorker>}\n   */\n  get controlling() {\n    return this._controllingDeferred.promise;\n  }\n\n  /**\n   * Resolves with a reference to a service worker that matches the script URL\n   * of this instance, as soon as it's available.\n   *\n   * If, at registration time, there's already an active or waiting service\n   * worker with a matching script URL, it will be used (with the waiting\n   * service worker taking precedence over the active service worker if both\n   * match, since the waiting service worker would have been registered more\n   * recently).\n   * If there's no matching active or waiting service worker at registration\n   * time then the promise will not resolve until an update is found and starts\n   * installing, at which point the installing service worker is used.\n   *\n   * @return {Promise<ServiceWorker>}\n   */\n  async getSW() {\n    // If `this._sw` is set, resolve with that as we want `getSW()` to\n    // return the correct (new) service worker if an update is found.\n    return this._sw || this._swDeferred.promise;\n  }\n\n  /**\n   * Sends the passed data object to the service worker registered by this\n   * instance (via [`getSW()`]{@link module:workbox-window.Workbox#getSW}) and resolves\n   * with a response (if any).\n   *\n   * A response can be set in a message handler in the service worker by\n   * calling `event.ports[0].postMessage(...)`, which will resolve the promise\n   * returned by `messageSW()`. If no response is set, the promise will never\n   * resolve.\n   *\n   * @param {Object} data An object to send to the service worker\n   * @return {Promise<Object>}\n   */\n  async messageSW(data) {\n    const sw = await this.getSW();\n    return messageSW(sw, data);\n  }\n\n  /**\n   * Checks for a service worker already controlling the page and returns\n   * it if its script URL matchs.\n   *\n   * @private\n   * @return {ServiceWorker|undefined}\n   */\n  _getControllingSWIfCompatible() {\n    const controller = navigator.serviceWorker.controller;\n    if (controller && urlsMatch(controller.scriptURL, this._scriptURL)) {\n      return controller;\n    }\n  }\n\n  /**\n   * Registers a service worker for this instances script URL and register\n   * options and tracks the time registration was complete.\n   *\n   * @private\n   */\n  async _registerScript() {\n    try {\n      const reg = await navigator.serviceWorker.register(\n          this._scriptURL, this._registerOptions);\n\n      // Keep track of when registration happened, so it can be used in the\n      // `this._onUpdateFound` heuristic. Also use the presence of this\n      // property as a way to see if `.register()` has been called.\n      this._registrationTime = performance.now();\n\n      return reg;\n    } catch (error) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.error(error);\n      }\n      // Re-throw the error.\n      throw error;\n    }\n  }\n\n\n  /**\n   * Sends a message to the passed service worker that the window is ready.\n   *\n   * @param {ServiceWorker} sw\n   * @private\n   */\n  _reportWindowReady(sw) {\n    messageSW(sw, {\n      type: 'WINDOW_READY',\n      meta: 'workbox-window',\n    });\n  }\n\n  /**\n   * @private\n   */\n  _onUpdateFound() {\n    const installingSW = this._registration.installing;\n\n    // If the script URL passed to `navigator.serviceWorker.register()` is\n    // different from the current controlling SW's script URL, we know any\n    // successful registration calls will trigger an `updatefound` event.\n    // But if the registered script URL is the same as the current controlling\n    // SW's script URL, we'll only get an `updatefound` event if the file\n    // changed since it was last registered. This can be a problem if the user\n    // opens up the same page in a different tab, and that page registers\n    // a SW that triggers an update. It's a problem because this page has no\n    // good way of knowing whether the `updatefound` event came from the SW\n    // script it registered or from a registration attempt made by a newer\n    // version of the page running in another tab.\n    // To minimize the possibility of a false positive, we use the logic here:\n    let updateLikelyTriggeredExternally =\n        // Since we enforce only calling `register()` once, and since we don't\n        // add the `updatefound` event listener until the `register()` call, if\n        // `_updateFoundCount` is > 0 then it means this method has already\n        // been called, thus this SW must be external\n        this._updateFoundCount > 0 ||\n        // If the script URL of the installing SW is different from this\n        // instance's script URL, we know it's definitely not from our\n        // registration.\n        !urlsMatch(installingSW.scriptURL, this._scriptURL) ||\n        // If all of the above are false, then we use a time-based heuristic:\n        // Any `updatefound` event that occurs long after our registration is\n        // assumed to be external.\n        (performance.now() >\n            this._registrationTime + REGISTRATION_TIMEOUT_DURATION) ?\n                // If any of the above are not true, we assume the update was\n                // triggered by this instance.\n                true : false;\n\n    if (updateLikelyTriggeredExternally) {\n      this._externalSW = installingSW;\n      this._registration.removeEventListener(\n          'updatefound', this._onUpdateFound);\n    } else {\n      // If the update was not triggered externally we know the installing\n      // SW is the one we registered, so we set it.\n      this._sw = installingSW;\n      this._swDeferred.resolve(installingSW);\n\n      // The `installing` state isn't something we have a dedicated\n      // callback for, but we do log messages for it in development.\n      if (process.env.NODE_ENV !== 'production') {\n        if (navigator.serviceWorker.controller) {\n          logger.log('Updated service worker found. Installing now...');\n        } else {\n          logger.log('Service worker is installing...');\n        }\n      }\n    }\n\n    // Increment the `updatefound` count, so future invocations of this\n    // method can be sure they were triggered externally.\n    ++this._updateFoundCount;\n\n    // Add a `statechange` listener regardless of whether this update was\n    // triggered externally, since we have callbacks for both.\n    installingSW.addEventListener('statechange', this._onStateChange);\n  }\n\n  /**\n   * @private\n   * @param {Event} originalEvent\n   */\n  _onStateChange(originalEvent) {\n    const sw = originalEvent.target;\n    const {state} = sw;\n    const isExternal = sw === this._externalSW;\n    const eventPrefix = isExternal ? 'external' : '';\n\n    const eventProps = {sw, originalEvent};\n    if (!isExternal && this._isUpdate) {\n      eventProps.isUpdate = true;\n    }\n\n    this.dispatchEvent(new WorkboxEvent(\n        eventPrefix + state, eventProps));\n\n    if (state === 'installed') {\n      // This timeout is used to ignore cases where the service worker calls\n      // `skipWaiting()` in the install event, thus moving it directly in the\n      // activating state. (Since all service workers *must* go through the\n      // waiting phase, the only way to detect `skipWaiting()` called in the\n      // install event is to observe that the time spent in the waiting phase\n      // is very short.)\n      // NOTE: we don't need separate timeouts for the own and external SWs\n      // since they can't go through these phases at the same time.\n      this._waitingTimeout = setTimeout(() => {\n        // Ensure the SW is still waiting (it may now be redundant).\n        if (state === 'installed' && this._registration.waiting === sw) {\n          this.dispatchEvent(new WorkboxEvent(\n              eventPrefix + 'waiting', eventProps));\n\n          if (process.env.NODE_ENV !== 'production') {\n            if (isExternal) {\n              logger.warn('An external service worker has installed but is ' +\n                  'waiting for this client to close before activating...');\n            } else {\n              logger.warn('The service worker has installed but is waiting ' +\n                  'for existing clients to close before activating...');\n            }\n          }\n        }\n      }, WAITING_TIMEOUT_DURATION);\n    } else if (state === 'activating') {\n      clearTimeout(this._waitingTimeout);\n      if (!isExternal) {\n        this._activeDeferred.resolve(sw);\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      switch (state) {\n        case 'installed':\n          if (isExternal) {\n            logger.warn('An external service worker has installed. ' +\n                'You may want to suggest users reload this page.');\n          } else {\n            logger.log('Registered service worker installed.');\n          }\n          break;\n        case 'activated':\n          if (isExternal) {\n            logger.warn('An external service worker has activated.');\n          } else {\n            logger.log('Registered service worker activated.');\n            if (sw !== navigator.serviceWorker.controller) {\n              logger.warn('The registered service worker is active but ' +\n                  'not yet controlling the page. Reload or run ' +\n                  '`clients.claim()` in the service worker.');\n            }\n          }\n          break;\n        case 'redundant':\n          if (sw === this._compatibleControllingSW) {\n            logger.log('Previously controlling service worker now redundant!');\n          } else if (!isExternal) {\n            logger.log('Registered service worker now redundant!');\n          }\n          break;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} originalEvent\n   */\n  _onControllerChange(originalEvent) {\n    const sw = this._sw;\n    if (sw === navigator.serviceWorker.controller) {\n      this.dispatchEvent(new WorkboxEvent('controlling', {sw, originalEvent}));\n      if (process.env.NODE_ENV !== 'production') {\n        logger.log('Registered service worker now controlling this page.');\n      }\n      this._controllingDeferred.resolve(sw);\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} originalEvent\n   */\n  _onMessage(originalEvent) {\n    const {data} = originalEvent;\n    this.dispatchEvent(new WorkboxEvent('message', {data, originalEvent}));\n  }\n}\n\n// The jsdoc comments below outline the events this instance may dispatch:\n// -----------------------------------------------------------------------\n\n/**\n * The `message` event is dispatched any time a `postMessage` (or a\n * `BroadcastChannel` message with the `workbox` channel name) is received.\n *\n * @event module:workbox-window.Workbox#message\n * @type {WorkboxEvent}\n * @property {*} data The `data` property from the original `message` event.\n * @property {Event} originalEvent The original [`message`]{@link https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent}\n *     event.\n * @property {string} type `message`.\n * @property {Workbox} target The `Workbox` instance.\n */\n\n/**\n * The `installed` event is dispatched if the state of a\n * [`Workbox`]{@link module:workbox-window.Workbox} instance's\n * [registered service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-registered-sw}\n * changes to `installed`.\n *\n * Then can happen either the very first time a service worker is installed,\n * or after an update to the current service worker is found. In the case\n * of an update being found, the event's `isUpdate` property will be `true`.\n *\n * @event module:workbox-window.Workbox#installed\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {boolean|undefined} isUpdate True if a service worker was already\n *     controlling when this `Workbox` instance called `register()`.\n * @property {string} type `installed`.\n * @property {Workbox} target The `Workbox` instance.\n */\n\n/**\n * The `waiting` event is dispatched if the state of a\n * [`Workbox`]{@link module:workbox-window.Workbox} instance's\n * [registered service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-registered-sw}\n * changes to `installed` and then doesn't immediately change to `activating`.\n * It may also be dispatched if a service worker with the same\n * [`scriptURL`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/scriptURL}\n * was already waiting when the [`register()`]{@link module:workbox-window.Workbox#register}\n * method was called.\n *\n * @event module:workbox-window.Workbox#waiting\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The native `controllerchange` event\n * @property {boolean|undefined} isUpdate True if a service worker was already\n *     controlling when this `Workbox` instance called `register()`.\n * @property {boolean|undefined} wasWaitingBeforeRegister True if a service worker with\n *     a matching `scriptURL` was already waiting when this `Workbox`\n *     instance called `register()`.\n * @property {string} type `waiting`.\n * @property {Workbox} target The `Workbox` instance.\n */\n\n/**\n * The `controlling` event is dispatched if a\n * [`controllerchange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/oncontrollerchange}\n * fires on the service worker [container]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer}\n * and the [`scriptURL`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/scriptURL}\n * of the new [controller]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/controller}\n * matches the `scriptURL` of the `Workbox` instance's\n * [registered service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-registered-sw}.\n *\n * @event module:workbox-window.Workbox#controlling\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`controllerchange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/oncontrollerchange}\n *     event.\n * @property {boolean|undefined} isUpdate True if a service worker was already\n *     controlling when this service worker was registered.\n * @property {string} type `controlling`.\n * @property {Workbox} target The `Workbox` instance.\n */\n\n/**\n * The `activated` event is dispatched if the state of a\n * [`Workbox`]{@link module:workbox-window.Workbox} instance's\n * [registered service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-registered-sw}\n * changes to `activated`.\n *\n * @event module:workbox-window.Workbox#activated\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {boolean|undefined} isUpdate True if a service worker was already\n *     controlling when this `Workbox` instance called `register()`.\n * @property {string} type `activated`.\n * @property {Workbox} target The `Workbox` instance.\n */\n\n/**\n * The `redundant` event is dispatched if the state of a\n * [`Workbox`]{@link module:workbox-window.Workbox} instance's\n * [registered service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-registered-sw}\n * changes to `redundant`.\n *\n * @event module:workbox-window.Workbox#redundant\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {boolean|undefined} isUpdate True if a service worker was already\n *     controlling when this `Workbox` instance called `register()`.\n * @property {string} type `redundant`.\n * @property {Workbox} target The `Workbox` instance.\n */\n\n/**\n * The `externalinstalled` event is dispatched if the state of an\n * [external service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-external-sw}\n * changes to `installed`.\n *\n * @event module:workbox-window.Workbox#externalinstalled\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {string} type `externalinstalled`.\n * @property {Workbox} target The `Workbox` instance.\n */\n\n/**\n * The `externalwaiting` event is dispatched if the state of an\n * [external service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-external-sw}\n * changes to `waiting`.\n *\n * @event module:workbox-window.Workbox#externalwaiting\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event|undefined} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {string} type `externalwaiting`.\n * @property {Workbox} target The `Workbox` instance.\n */\n\n/**\n * The `externalactivated` event is dispatched if the state of an\n * [external service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-external-sw}\n * changes to `activated`.\n *\n * @event module:workbox-window.Workbox#externalactivated\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {string} type `externalactivated`.\n * @property {Workbox} target The `Workbox` instance.\n */\n\nexport {Workbox};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {messageSW} from './messageSW.mjs';\nimport {Workbox} from './Workbox.mjs';\nimport './_version.mjs';\n\n\n/**\n * @module workbox-window\n */\nexport {\n  Workbox,\n  messageSW,\n};\n"]},"metadata":{},"sourceType":"module"}