{"ast":null,"code":"/**\n * @fileoverview Rule to flag statements that use magic numbers (adapted from https://github.com/danielstjules/buddy.js)\n * @author Vincent Lemeunier\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow magic numbers\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-magic-numbers\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        detectObjects: {\n          type: \"boolean\",\n          default: false\n        },\n        enforceConst: {\n          type: \"boolean\",\n          default: false\n        },\n        ignore: {\n          type: \"array\",\n          items: {\n            type: \"number\"\n          },\n          uniqueItems: true\n        },\n        ignoreArrayIndexes: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      useConst: \"Number constants declarations must use 'const'.\",\n      noMagic: \"No magic number: {{raw}}.\"\n    }\n  },\n\n  create(context) {\n    const config = context.options[0] || {},\n          detectObjects = !!config.detectObjects,\n          enforceConst = !!config.enforceConst,\n          ignore = config.ignore || [],\n          ignoreArrayIndexes = !!config.ignoreArrayIndexes;\n    /**\n     * Returns whether the node is number literal\n     * @param {Node} node the node literal being evaluated\n     * @returns {boolean} true if the node is a number literal\n     */\n\n    function isNumber(node) {\n      return typeof node.value === \"number\";\n    }\n    /**\n     * Returns whether the number should be ignored\n     * @param {number} num the number\n     * @returns {boolean} true if the number should be ignored\n     */\n\n\n    function shouldIgnoreNumber(num) {\n      return ignore.indexOf(num) !== -1;\n    }\n    /**\n     * Returns whether the number should be ignored when used as a radix within parseInt() or Number.parseInt()\n     * @param {ASTNode} parent the non-\"UnaryExpression\" parent\n     * @param {ASTNode} node the node literal being evaluated\n     * @returns {boolean} true if the number should be ignored\n     */\n\n\n    function shouldIgnoreParseInt(parent, node) {\n      return parent.type === \"CallExpression\" && node === parent.arguments[1] && (parent.callee.name === \"parseInt\" || parent.callee.type === \"MemberExpression\" && parent.callee.object.name === \"Number\" && parent.callee.property.name === \"parseInt\");\n    }\n    /**\n     * Returns whether the number should be ignored when used to define a JSX prop\n     * @param {ASTNode} parent the non-\"UnaryExpression\" parent\n     * @returns {boolean} true if the number should be ignored\n     */\n\n\n    function shouldIgnoreJSXNumbers(parent) {\n      return parent.type.indexOf(\"JSX\") === 0;\n    }\n    /**\n     * Returns whether the number should be ignored when used as an array index with enabled 'ignoreArrayIndexes' option.\n     * @param {ASTNode} parent the non-\"UnaryExpression\" parent.\n     * @returns {boolean} true if the number should be ignored\n     */\n\n\n    function shouldIgnoreArrayIndexes(parent) {\n      return parent.type === \"MemberExpression\" && ignoreArrayIndexes;\n    }\n\n    return {\n      Literal(node) {\n        const okTypes = detectObjects ? [] : [\"ObjectExpression\", \"Property\", \"AssignmentExpression\"];\n\n        if (!isNumber(node)) {\n          return;\n        }\n\n        let fullNumberNode;\n        let parent;\n        let value;\n        let raw; // For negative magic numbers: update the value and parent node\n\n        if (node.parent.type === \"UnaryExpression\" && node.parent.operator === \"-\") {\n          fullNumberNode = node.parent;\n          parent = fullNumberNode.parent;\n          value = -node.value;\n          raw = `-${node.raw}`;\n        } else {\n          fullNumberNode = node;\n          parent = node.parent;\n          value = node.value;\n          raw = node.raw;\n        }\n\n        if (shouldIgnoreNumber(value) || shouldIgnoreParseInt(parent, fullNumberNode) || shouldIgnoreArrayIndexes(parent) || shouldIgnoreJSXNumbers(parent)) {\n          return;\n        }\n\n        if (parent.type === \"VariableDeclarator\") {\n          if (enforceConst && parent.parent.kind !== \"const\") {\n            context.report({\n              node: fullNumberNode,\n              messageId: \"useConst\"\n            });\n          }\n        } else if (okTypes.indexOf(parent.type) === -1 || parent.type === \"AssignmentExpression\" && parent.left.type === \"Identifier\") {\n          context.report({\n            node: fullNumberNode,\n            messageId: \"noMagic\",\n            data: {\n              raw\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-magic-numbers.js"],"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","properties","detectObjects","default","enforceConst","ignore","items","uniqueItems","ignoreArrayIndexes","additionalProperties","messages","useConst","noMagic","create","context","config","options","isNumber","node","value","shouldIgnoreNumber","num","indexOf","shouldIgnoreParseInt","parent","arguments","callee","name","object","property","shouldIgnoreJSXNumbers","shouldIgnoreArrayIndexes","Literal","okTypes","fullNumberNode","raw","operator","kind","report","messageId","left","data"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to flag statements that use magic numbers (adapted from https://github.com/danielstjules/buddy.js)\n * @author Vincent Lemeunier\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow magic numbers\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-magic-numbers\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                detectObjects: {\n                    type: \"boolean\",\n                    default: false\n                },\n                enforceConst: {\n                    type: \"boolean\",\n                    default: false\n                },\n                ignore: {\n                    type: \"array\",\n                    items: {\n                        type: \"number\"\n                    },\n                    uniqueItems: true\n                },\n                ignoreArrayIndexes: {\n                    type: \"boolean\",\n                    default: false\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            useConst: \"Number constants declarations must use 'const'.\",\n            noMagic: \"No magic number: {{raw}}.\"\n        }\n    },\n\n    create(context) {\n        const config = context.options[0] || {},\n            detectObjects = !!config.detectObjects,\n            enforceConst = !!config.enforceConst,\n            ignore = config.ignore || [],\n            ignoreArrayIndexes = !!config.ignoreArrayIndexes;\n\n        /**\n         * Returns whether the node is number literal\n         * @param {Node} node the node literal being evaluated\n         * @returns {boolean} true if the node is a number literal\n         */\n        function isNumber(node) {\n            return typeof node.value === \"number\";\n        }\n\n        /**\n         * Returns whether the number should be ignored\n         * @param {number} num the number\n         * @returns {boolean} true if the number should be ignored\n         */\n        function shouldIgnoreNumber(num) {\n            return ignore.indexOf(num) !== -1;\n        }\n\n        /**\n         * Returns whether the number should be ignored when used as a radix within parseInt() or Number.parseInt()\n         * @param {ASTNode} parent the non-\"UnaryExpression\" parent\n         * @param {ASTNode} node the node literal being evaluated\n         * @returns {boolean} true if the number should be ignored\n         */\n        function shouldIgnoreParseInt(parent, node) {\n            return parent.type === \"CallExpression\" && node === parent.arguments[1] &&\n                (parent.callee.name === \"parseInt\" ||\n                parent.callee.type === \"MemberExpression\" &&\n                parent.callee.object.name === \"Number\" &&\n                parent.callee.property.name === \"parseInt\");\n        }\n\n        /**\n         * Returns whether the number should be ignored when used to define a JSX prop\n         * @param {ASTNode} parent the non-\"UnaryExpression\" parent\n         * @returns {boolean} true if the number should be ignored\n         */\n        function shouldIgnoreJSXNumbers(parent) {\n            return parent.type.indexOf(\"JSX\") === 0;\n        }\n\n        /**\n         * Returns whether the number should be ignored when used as an array index with enabled 'ignoreArrayIndexes' option.\n         * @param {ASTNode} parent the non-\"UnaryExpression\" parent.\n         * @returns {boolean} true if the number should be ignored\n         */\n        function shouldIgnoreArrayIndexes(parent) {\n            return parent.type === \"MemberExpression\" && ignoreArrayIndexes;\n        }\n\n        return {\n            Literal(node) {\n                const okTypes = detectObjects ? [] : [\"ObjectExpression\", \"Property\", \"AssignmentExpression\"];\n\n                if (!isNumber(node)) {\n                    return;\n                }\n\n                let fullNumberNode;\n                let parent;\n                let value;\n                let raw;\n\n                // For negative magic numbers: update the value and parent node\n                if (node.parent.type === \"UnaryExpression\" && node.parent.operator === \"-\") {\n                    fullNumberNode = node.parent;\n                    parent = fullNumberNode.parent;\n                    value = -node.value;\n                    raw = `-${node.raw}`;\n                } else {\n                    fullNumberNode = node;\n                    parent = node.parent;\n                    value = node.value;\n                    raw = node.raw;\n                }\n\n                if (shouldIgnoreNumber(value) ||\n                    shouldIgnoreParseInt(parent, fullNumberNode) ||\n                    shouldIgnoreArrayIndexes(parent) ||\n                    shouldIgnoreJSXNumbers(parent)) {\n                    return;\n                }\n\n                if (parent.type === \"VariableDeclarator\") {\n                    if (enforceConst && parent.parent.kind !== \"const\") {\n                        context.report({\n                            node: fullNumberNode,\n                            messageId: \"useConst\"\n                        });\n                    }\n                } else if (\n                    okTypes.indexOf(parent.type) === -1 ||\n                    (parent.type === \"AssignmentExpression\" && parent.left.type === \"Identifier\")\n                ) {\n                    context.report({\n                        node: fullNumberNode,\n                        messageId: \"noMagic\",\n                        data: {\n                            raw\n                        }\n                    });\n                }\n            }\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}