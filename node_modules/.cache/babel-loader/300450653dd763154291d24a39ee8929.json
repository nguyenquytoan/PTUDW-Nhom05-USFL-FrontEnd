{"ast":null,"code":"var express = require('express');\n\nvar sockjs = require('sockjs');\n\nvar websocket_multiplex = require('websocket-multiplex'); // 1. Setup SockJS server\n\n\nvar sockjs_opts = {\n  sockjs_url: \"http://cdn.jsdelivr.net/sockjs/1.0.1/sockjs.min.js\"\n};\nvar service = sockjs.createServer(sockjs_opts); // 2. Setup multiplexing\n\nvar multiplexer = new websocket_multiplex.MultiplexServer(service);\nvar ann = multiplexer.registerChannel('ann');\nann.on('connection', function (conn) {\n  conn.write('Ann says hi!');\n  conn.on('data', function (data) {\n    conn.write('Ann nods: ' + data);\n  });\n});\nvar bob = multiplexer.registerChannel('bob');\nbob.on('connection', function (conn) {\n  conn.write('Bob doesn\\'t agree.');\n  conn.on('data', function (data) {\n    conn.write('Bob says no to: ' + data);\n  });\n});\nvar carl = multiplexer.registerChannel('carl');\ncarl.on('connection', function (conn) {\n  conn.write('Carl says goodbye!'); // Explicitly cancel connection\n\n  conn.end();\n}); // 3. Express server\n\nvar app = express.createServer();\nservice.installHandlers(app, {\n  prefix: '/multiplex'\n});\nconsole.log(' [*] Listening on 0.0.0.0:9999');\napp.listen(9999, '0.0.0.0');\napp.get('/', function (req, res) {\n  res.sendfile(__dirname + '/index.html');\n});\napp.get('/multiplex.js', function (req, res) {\n  res.sendfile(__dirname + '/multiplex.js');\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/sockjs/examples/multiplex/server.js"],"names":["express","require","sockjs","websocket_multiplex","sockjs_opts","sockjs_url","service","createServer","multiplexer","MultiplexServer","ann","registerChannel","on","conn","write","data","bob","carl","end","app","installHandlers","prefix","console","log","listen","get","req","res","sendfile","__dirname"],"mappings":"AAAA,IAAIA,OAAO,GAAeC,OAAO,CAAC,SAAD,CAAjC;;AACA,IAAIC,MAAM,GAAgBD,OAAO,CAAC,QAAD,CAAjC;;AAEA,IAAIE,mBAAmB,GAAGF,OAAO,CAAC,qBAAD,CAAjC,C,CAGA;;;AACA,IAAIG,WAAW,GAAG;AAACC,EAAAA,UAAU,EAAE;AAAb,CAAlB;AACA,IAAIC,OAAO,GAAGJ,MAAM,CAACK,YAAP,CAAoBH,WAApB,CAAd,C,CAGA;;AACA,IAAII,WAAW,GAAG,IAAIL,mBAAmB,CAACM,eAAxB,CAAwCH,OAAxC,CAAlB;AAEA,IAAII,GAAG,GAAGF,WAAW,CAACG,eAAZ,CAA4B,KAA5B,CAAV;AACAD,GAAG,CAACE,EAAJ,CAAO,YAAP,EAAqB,UAASC,IAAT,EAAe;AAChCA,EAAAA,IAAI,CAACC,KAAL,CAAW,cAAX;AACAD,EAAAA,IAAI,CAACD,EAAL,CAAQ,MAAR,EAAgB,UAASG,IAAT,EAAe;AAC3BF,IAAAA,IAAI,CAACC,KAAL,CAAW,eAAeC,IAA1B;AACH,GAFD;AAGH,CALD;AAOA,IAAIC,GAAG,GAAGR,WAAW,CAACG,eAAZ,CAA4B,KAA5B,CAAV;AACAK,GAAG,CAACJ,EAAJ,CAAO,YAAP,EAAqB,UAASC,IAAT,EAAe;AAChCA,EAAAA,IAAI,CAACC,KAAL,CAAW,qBAAX;AACAD,EAAAA,IAAI,CAACD,EAAL,CAAQ,MAAR,EAAgB,UAASG,IAAT,EAAe;AAC3BF,IAAAA,IAAI,CAACC,KAAL,CAAW,qBAAqBC,IAAhC;AACH,GAFD;AAGH,CALD;AAOA,IAAIE,IAAI,GAAGT,WAAW,CAACG,eAAZ,CAA4B,MAA5B,CAAX;AACAM,IAAI,CAACL,EAAL,CAAQ,YAAR,EAAsB,UAASC,IAAT,EAAe;AACjCA,EAAAA,IAAI,CAACC,KAAL,CAAW,oBAAX,EADiC,CAEjC;;AACAD,EAAAA,IAAI,CAACK,GAAL;AACH,CAJD,E,CAOA;;AACA,IAAIC,GAAG,GAAGnB,OAAO,CAACO,YAAR,EAAV;AACAD,OAAO,CAACc,eAAR,CAAwBD,GAAxB,EAA6B;AAACE,EAAAA,MAAM,EAAC;AAAR,CAA7B;AAEAC,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAJ,GAAG,CAACK,MAAJ,CAAW,IAAX,EAAiB,SAAjB;AAEAL,GAAG,CAACM,GAAJ,CAAQ,GAAR,EAAa,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC7BA,EAAAA,GAAG,CAACC,QAAJ,CAAaC,SAAS,GAAG,aAAzB;AACH,CAFD;AAIAV,GAAG,CAACM,GAAJ,CAAQ,eAAR,EAAyB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACzCA,EAAAA,GAAG,CAACC,QAAJ,CAAaC,SAAS,GAAG,eAAzB;AACH,CAFD","sourcesContent":["var express             = require('express');\nvar sockjs              = require('sockjs');\n\nvar websocket_multiplex = require('websocket-multiplex');\n\n\n// 1. Setup SockJS server\nvar sockjs_opts = {sockjs_url: \"http://cdn.jsdelivr.net/sockjs/1.0.1/sockjs.min.js\"};\nvar service = sockjs.createServer(sockjs_opts);\n\n\n// 2. Setup multiplexing\nvar multiplexer = new websocket_multiplex.MultiplexServer(service);\n\nvar ann = multiplexer.registerChannel('ann');\nann.on('connection', function(conn) {\n    conn.write('Ann says hi!');\n    conn.on('data', function(data) {\n        conn.write('Ann nods: ' + data);\n    });\n});\n\nvar bob = multiplexer.registerChannel('bob');\nbob.on('connection', function(conn) {\n    conn.write('Bob doesn\\'t agree.');\n    conn.on('data', function(data) {\n        conn.write('Bob says no to: ' + data);\n    });\n});\n\nvar carl = multiplexer.registerChannel('carl');\ncarl.on('connection', function(conn) {\n    conn.write('Carl says goodbye!');\n    // Explicitly cancel connection\n    conn.end();\n});\n\n\n// 3. Express server\nvar app = express.createServer();\nservice.installHandlers(app, {prefix:'/multiplex'});\n\nconsole.log(' [*] Listening on 0.0.0.0:9999' );\napp.listen(9999, '0.0.0.0');\n\napp.get('/', function (req, res) {\n    res.sendfile(__dirname + '/index.html');\n});\n\napp.get('/multiplex.js', function (req, res) {\n    res.sendfile(__dirname + '/multiplex.js');\n});\n"]},"metadata":{},"sourceType":"script"}