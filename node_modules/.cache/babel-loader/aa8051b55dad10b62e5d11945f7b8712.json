{"ast":null,"code":"import { default as Enumerator, setSettledResult } from './enumerator';\nimport Promise from './promise';\n/**\n@module rsvp\n@public\n**/\n\nclass AllSettled extends Enumerator {\n  constructor(Constructor, entries, label) {\n    super(Constructor, entries, false\n    /* don't abort on reject */\n    , label);\n  }\n\n}\n\nAllSettled.prototype._setResultAt = setSettledResult;\n/**\n`RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\na fail-fast method, it waits until all the promises have returned and\nshows you all the results. This is useful if you want to handle multiple\npromises' failure states together as a set.\n Returns a promise that is fulfilled when all the given promises have been\nsettled. The return promise is fulfilled with an array of the states of\nthe promises passed into the `promises` array argument.\n Each state object will either indicate fulfillment or rejection, and\nprovide the corresponding value or reason. The states will take one of\nthe following formats:\n ```javascript\n{ state: 'fulfilled', value: value }\n  or\n{ state: 'rejected', reason: reason }\n```\n Example:\n ```javascript\nlet promise1 = RSVP.Promise.resolve(1);\nlet promise2 = RSVP.Promise.reject(new Error('2'));\nlet promise3 = RSVP.Promise.reject(new Error('3'));\nlet promises = [ promise1, promise2, promise3 ];\n RSVP.allSettled(promises).then(function(array){\n  // array == [\n  //   { state: 'fulfilled', value: 1 },\n  //   { state: 'rejected', reason: Error },\n  //   { state: 'rejected', reason: Error }\n  // ]\n  // Note that for the second item, reason.message will be '2', and for the\n  // third item, reason.message will be '3'.\n}, function(error) {\n  // Not run. (This block would only be called if allSettled had failed,\n  // for instance if passed an incorrect argument type.)\n});\n```\n @method allSettled\n@public\n@static\n@for rsvp\n@param {Array} entries\n@param {String} [label] - optional string that describes the promise.\nUseful for tooling.\n@return {Promise} promise that is fulfilled with an array of the settled\nstates of the constituent promises.\n*/\n\nexport default function allSettled(entries, label) {\n  if (!Array.isArray(entries)) {\n    return Promise.reject(new TypeError(\"Promise.allSettled must be called with an array\"), label);\n  }\n\n  return new AllSettled(Promise, entries, label).promise;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/rsvp/lib/rsvp/all-settled.js"],"names":["default","Enumerator","setSettledResult","Promise","AllSettled","constructor","Constructor","entries","label","prototype","_setResultAt","allSettled","Array","isArray","reject","TypeError","promise"],"mappings":"AAAA,SACEA,OAAO,IAAIC,UADb,EAEEC,gBAFF,QAGO,cAHP;AAIA,OAAOC,OAAP,MAAoB,WAApB;AAEA;;;;;AAKA,MAAMC,UAAN,SAAyBH,UAAzB,CAAoC;AAClCI,EAAAA,WAAW,CAACC,WAAD,EAAcC,OAAd,EAAuBC,KAAvB,EAA8B;AACvC,UAAMF,WAAN,EAAmBC,OAAnB,EAA4B;AAAM;AAAlC,MAA+DC,KAA/D;AACD;;AAHiC;;AAMpCJ,UAAU,CAACK,SAAX,CAAqBC,YAArB,GAAoCR,gBAApC;AAEE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDF,eAAe,SAASS,UAAT,CAAoBJ,OAApB,EAA6BC,KAA7B,EAAoC;AACjD,MAAI,CAACI,KAAK,CAACC,OAAN,CAAcN,OAAd,CAAL,EAA6B;AAC3B,WAAOJ,OAAO,CAACW,MAAR,CAAe,IAAIC,SAAJ,CAAc,iDAAd,CAAf,EAAiFP,KAAjF,CAAP;AACD;;AAED,SAAO,IAAIJ,UAAJ,CAAeD,OAAf,EAAwBI,OAAxB,EAAiCC,KAAjC,EAAwCQ,OAA/C;AACD","sourcesContent":["import {\n  default as Enumerator,\n  setSettledResult\n} from './enumerator';\nimport Promise from './promise';\n\n/**\n@module rsvp\n@public\n**/\n\nclass AllSettled extends Enumerator {\n  constructor(Constructor, entries, label) {\n    super(Constructor, entries, false /* don't abort on reject */, label);\n  }\n}\n\nAllSettled.prototype._setResultAt = setSettledResult;\n\n  /**\n  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\n  a fail-fast method, it waits until all the promises have returned and\n  shows you all the results. This is useful if you want to handle multiple\n  promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled. The return promise is fulfilled with an array of the states of\n  the promises passed into the `promises` array argument.\n\n  Each state object will either indicate fulfillment or rejection, and\n  provide the corresponding value or reason. The states will take one of\n  the following formats:\n\n  ```javascript\n  { state: 'fulfilled', value: value }\n    or\n  { state: 'rejected', reason: reason }\n  ```\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.Promise.resolve(1);\n  let promise2 = RSVP.Promise.reject(new Error('2'));\n  let promise3 = RSVP.Promise.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.allSettled(promises).then(function(array){\n    // array == [\n    //   { state: 'fulfilled', value: 1 },\n    //   { state: 'rejected', reason: Error },\n    //   { state: 'rejected', reason: Error }\n    // ]\n    // Note that for the second item, reason.message will be '2', and for the\n    // third item, reason.message will be '3'.\n  }, function(error) {\n    // Not run. (This block would only be called if allSettled had failed,\n    // for instance if passed an incorrect argument type.)\n  });\n  ```\n\n  @method allSettled\n  @public\n  @static\n  @for rsvp\n  @param {Array} entries\n  @param {String} [label] - optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with an array of the settled\n  states of the constituent promises.\n  */\n\nexport default function allSettled(entries, label) {\n  if (!Array.isArray(entries)) {\n    return Promise.reject(new TypeError(\"Promise.allSettled must be called with an array\"), label);\n  }\n\n  return new AllSettled(Promise, entries, label).promise;\n}\n\n\n"]},"metadata":{},"sourceType":"module"}