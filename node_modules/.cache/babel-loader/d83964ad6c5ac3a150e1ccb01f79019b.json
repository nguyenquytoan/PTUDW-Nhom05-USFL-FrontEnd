{"ast":null,"code":"/**\n * @fileoverview Rule to flag bitwise identifiers\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n/*\n *\n * Set of bitwise operators.\n *\n */\n\nconst BITWISE_OPERATORS = [\"^\", \"|\", \"&\", \"<<\", \">>\", \">>>\", \"^=\", \"|=\", \"&=\", \"<<=\", \">>=\", \">>>=\", \"~\"]; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow bitwise operators\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-bitwise\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allow: {\n          type: \"array\",\n          items: {\n            enum: BITWISE_OPERATORS\n          },\n          uniqueItems: true\n        },\n        int32Hint: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpected: \"Unexpected use of '{{operator}}'.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0] || {};\n    const allowed = options.allow || [];\n    const int32Hint = options.int32Hint === true;\n    /**\n     * Reports an unexpected use of a bitwise operator.\n     * @param   {ASTNode} node Node which contains the bitwise operator.\n     * @returns {void}\n     */\n\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"unexpected\",\n        data: {\n          operator: node.operator\n        }\n      });\n    }\n    /**\n     * Checks if the given node has a bitwise operator.\n     * @param   {ASTNode} node The node to check.\n     * @returns {boolean} Whether or not the node has a bitwise operator.\n     */\n\n\n    function hasBitwiseOperator(node) {\n      return BITWISE_OPERATORS.indexOf(node.operator) !== -1;\n    }\n    /**\n     * Checks if exceptions were provided, e.g. `{ allow: ['~', '|'] }`.\n     * @param   {ASTNode} node The node to check.\n     * @returns {boolean} Whether or not the node has a bitwise operator.\n     */\n\n\n    function allowedOperator(node) {\n      return allowed.indexOf(node.operator) !== -1;\n    }\n    /**\n     * Checks if the given bitwise operator is used for integer typecasting, i.e. \"|0\"\n     * @param   {ASTNode} node The node to check.\n     * @returns {boolean} whether the node is used in integer typecasting.\n     */\n\n\n    function isInt32Hint(node) {\n      return int32Hint && node.operator === \"|\" && node.right && node.right.type === \"Literal\" && node.right.value === 0;\n    }\n    /**\n     * Report if the given node contains a bitwise operator.\n     * @param   {ASTNode} node The node to check.\n     * @returns {void}\n     */\n\n\n    function checkNodeForBitwiseOperator(node) {\n      if (hasBitwiseOperator(node) && !allowedOperator(node) && !isInt32Hint(node)) {\n        report(node);\n      }\n    }\n\n    return {\n      AssignmentExpression: checkNodeForBitwiseOperator,\n      BinaryExpression: checkNodeForBitwiseOperator,\n      UnaryExpression: checkNodeForBitwiseOperator\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-bitwise.js"],"names":["BITWISE_OPERATORS","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","allow","items","enum","uniqueItems","int32Hint","default","additionalProperties","messages","unexpected","create","context","options","allowed","report","node","messageId","data","operator","hasBitwiseOperator","indexOf","allowedOperator","isInt32Hint","right","value","checkNodeForBitwiseOperator","AssignmentExpression","BinaryExpression","UnaryExpression"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to flag bitwise identifiers\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n/*\n *\n * Set of bitwise operators.\n *\n */\nconst BITWISE_OPERATORS = [\n    \"^\", \"|\", \"&\", \"<<\", \">>\", \">>>\",\n    \"^=\", \"|=\", \"&=\", \"<<=\", \">>=\", \">>>=\",\n    \"~\"\n];\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow bitwise operators\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-bitwise\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allow: {\n                        type: \"array\",\n                        items: {\n                            enum: BITWISE_OPERATORS\n                        },\n                        uniqueItems: true\n                    },\n                    int32Hint: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpected: \"Unexpected use of '{{operator}}'.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {};\n        const allowed = options.allow || [];\n        const int32Hint = options.int32Hint === true;\n\n        /**\n         * Reports an unexpected use of a bitwise operator.\n         * @param   {ASTNode} node Node which contains the bitwise operator.\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({ node, messageId: \"unexpected\", data: { operator: node.operator } });\n        }\n\n        /**\n         * Checks if the given node has a bitwise operator.\n         * @param   {ASTNode} node The node to check.\n         * @returns {boolean} Whether or not the node has a bitwise operator.\n         */\n        function hasBitwiseOperator(node) {\n            return BITWISE_OPERATORS.indexOf(node.operator) !== -1;\n        }\n\n        /**\n         * Checks if exceptions were provided, e.g. `{ allow: ['~', '|'] }`.\n         * @param   {ASTNode} node The node to check.\n         * @returns {boolean} Whether or not the node has a bitwise operator.\n         */\n        function allowedOperator(node) {\n            return allowed.indexOf(node.operator) !== -1;\n        }\n\n        /**\n         * Checks if the given bitwise operator is used for integer typecasting, i.e. \"|0\"\n         * @param   {ASTNode} node The node to check.\n         * @returns {boolean} whether the node is used in integer typecasting.\n         */\n        function isInt32Hint(node) {\n            return int32Hint && node.operator === \"|\" && node.right &&\n              node.right.type === \"Literal\" && node.right.value === 0;\n        }\n\n        /**\n         * Report if the given node contains a bitwise operator.\n         * @param   {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkNodeForBitwiseOperator(node) {\n            if (hasBitwiseOperator(node) && !allowedOperator(node) && !isInt32Hint(node)) {\n                report(node);\n            }\n        }\n\n        return {\n            AssignmentExpression: checkNodeForBitwiseOperator,\n            BinaryExpression: checkNodeForBitwiseOperator,\n            UnaryExpression: checkNodeForBitwiseOperator\n        };\n\n    }\n};\n"]},"metadata":{},"sourceType":"script"}