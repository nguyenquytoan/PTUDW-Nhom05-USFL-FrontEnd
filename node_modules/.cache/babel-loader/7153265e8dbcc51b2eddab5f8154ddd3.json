{"ast":null,"code":"/**\n * @fileoverview Rule to flag when the same variable is declared more then once.\n * @author Ilya Volodin\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow variable redeclaration\",\n      category: \"Best Practices\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-redeclare\"\n    },\n    messages: {\n      redeclared: \"'{{id}}' is already defined.\",\n      redeclaredAsBuiltin: \"'{{id}}' is already defined as a built-in global variable.\",\n      redeclaredBySyntax: \"'{{id}}' is already defined by a variable declaration.\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        builtinGlobals: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    const options = {\n      builtinGlobals: Boolean(context.options.length === 0 || context.options[0].builtinGlobals)\n    };\n    const sourceCode = context.getSourceCode();\n    /**\n     * Iterate declarations of a given variable.\n     * @param {escope.variable} variable The variable object to iterate declarations.\n     * @returns {IterableIterator<{type:string,node:ASTNode,loc:SourceLocation}>} The declarations.\n     */\n\n    function* iterateDeclarations(variable) {\n      if (options.builtinGlobals && (variable.eslintImplicitGlobalSetting === \"readonly\" || variable.eslintImplicitGlobalSetting === \"writable\")) {\n        yield {\n          type: \"builtin\"\n        };\n      }\n\n      for (const id of variable.identifiers) {\n        yield {\n          type: \"syntax\",\n          node: id,\n          loc: id.loc\n        };\n      }\n\n      if (variable.eslintExplicitGlobalComments) {\n        for (const comment of variable.eslintExplicitGlobalComments) {\n          yield {\n            type: \"comment\",\n            node: comment,\n            loc: astUtils.getNameLocationInGlobalDirectiveComment(sourceCode, comment, variable.name)\n          };\n        }\n      }\n    }\n    /**\n     * Find variables in a given scope and flag redeclared ones.\n     * @param {Scope} scope An eslint-scope scope object.\n     * @returns {void}\n     * @private\n     */\n\n\n    function findVariablesInScope(scope) {\n      for (const variable of scope.variables) {\n        const [declaration, ...extraDeclarations] = iterateDeclarations(variable);\n\n        if (extraDeclarations.length === 0) {\n          continue;\n        }\n        /*\n         * If the type of a declaration is different from the type of\n         * the first declaration, it shows the location of the first\n         * declaration.\n         */\n\n\n        const detailMessageId = declaration.type === \"builtin\" ? \"redeclaredAsBuiltin\" : \"redeclaredBySyntax\";\n        const data = {\n          id: variable.name\n        }; // Report extra declarations.\n\n        for (const {\n          type,\n          node,\n          loc\n        } of extraDeclarations) {\n          const messageId = type === declaration.type ? \"redeclared\" : detailMessageId;\n          context.report({\n            node,\n            loc,\n            messageId,\n            data\n          });\n        }\n      }\n    }\n    /**\n     * Find variables in the current scope.\n     * @param {ASTNode} node The node of the current scope.\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkForBlock(node) {\n      const scope = context.getScope();\n      /*\n       * In ES5, some node type such as `BlockStatement` doesn't have that scope.\n       * `scope.block` is a different node in such a case.\n       */\n\n      if (scope.block === node) {\n        findVariablesInScope(scope);\n      }\n    }\n\n    return {\n      Program() {\n        const scope = context.getScope();\n        findVariablesInScope(scope); // Node.js or ES modules has a special scope.\n\n        if (scope.type === \"global\" && scope.childScopes[0] && // The special scope's block is the Program node.\n        scope.block === scope.childScopes[0].block) {\n          findVariablesInScope(scope.childScopes[0]);\n        }\n      },\n\n      FunctionDeclaration: checkForBlock,\n      FunctionExpression: checkForBlock,\n      ArrowFunctionExpression: checkForBlock,\n      BlockStatement: checkForBlock,\n      ForStatement: checkForBlock,\n      ForInStatement: checkForBlock,\n      ForOfStatement: checkForBlock,\n      SwitchStatement: checkForBlock\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-redeclare.js"],"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","messages","redeclared","redeclaredAsBuiltin","redeclaredBySyntax","schema","properties","builtinGlobals","default","additionalProperties","create","context","options","Boolean","length","sourceCode","getSourceCode","iterateDeclarations","variable","eslintImplicitGlobalSetting","id","identifiers","node","loc","eslintExplicitGlobalComments","comment","getNameLocationInGlobalDirectiveComment","name","findVariablesInScope","scope","variables","declaration","extraDeclarations","detailMessageId","data","messageId","report","checkForBlock","getScope","block","Program","childScopes","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","BlockStatement","ForStatement","ForInStatement","ForOfStatement","SwitchStatement"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Rule to flag when the same variable is declared more then once.\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow variable redeclaration\",\n            category: \"Best Practices\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-redeclare\"\n        },\n\n        messages: {\n            redeclared: \"'{{id}}' is already defined.\",\n            redeclaredAsBuiltin: \"'{{id}}' is already defined as a built-in global variable.\",\n            redeclaredBySyntax: \"'{{id}}' is already defined by a variable declaration.\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    builtinGlobals: { type: \"boolean\", default: true }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create(context) {\n        const options = {\n            builtinGlobals: Boolean(\n                context.options.length === 0 ||\n                context.options[0].builtinGlobals\n            )\n        };\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Iterate declarations of a given variable.\n         * @param {escope.variable} variable The variable object to iterate declarations.\n         * @returns {IterableIterator<{type:string,node:ASTNode,loc:SourceLocation}>} The declarations.\n         */\n        function *iterateDeclarations(variable) {\n            if (options.builtinGlobals && (\n                variable.eslintImplicitGlobalSetting === \"readonly\" ||\n                variable.eslintImplicitGlobalSetting === \"writable\"\n            )) {\n                yield { type: \"builtin\" };\n            }\n\n            for (const id of variable.identifiers) {\n                yield { type: \"syntax\", node: id, loc: id.loc };\n            }\n\n            if (variable.eslintExplicitGlobalComments) {\n                for (const comment of variable.eslintExplicitGlobalComments) {\n                    yield {\n                        type: \"comment\",\n                        node: comment,\n                        loc: astUtils.getNameLocationInGlobalDirectiveComment(\n                            sourceCode,\n                            comment,\n                            variable.name\n                        )\n                    };\n                }\n            }\n        }\n\n        /**\n         * Find variables in a given scope and flag redeclared ones.\n         * @param {Scope} scope An eslint-scope scope object.\n         * @returns {void}\n         * @private\n         */\n        function findVariablesInScope(scope) {\n            for (const variable of scope.variables) {\n                const [\n                    declaration,\n                    ...extraDeclarations\n                ] = iterateDeclarations(variable);\n\n                if (extraDeclarations.length === 0) {\n                    continue;\n                }\n\n                /*\n                 * If the type of a declaration is different from the type of\n                 * the first declaration, it shows the location of the first\n                 * declaration.\n                 */\n                const detailMessageId = declaration.type === \"builtin\"\n                    ? \"redeclaredAsBuiltin\"\n                    : \"redeclaredBySyntax\";\n                const data = { id: variable.name };\n\n                // Report extra declarations.\n                for (const { type, node, loc } of extraDeclarations) {\n                    const messageId = type === declaration.type\n                        ? \"redeclared\"\n                        : detailMessageId;\n\n                    context.report({ node, loc, messageId, data });\n                }\n            }\n        }\n\n        /**\n         * Find variables in the current scope.\n         * @param {ASTNode} node The node of the current scope.\n         * @returns {void}\n         * @private\n         */\n        function checkForBlock(node) {\n            const scope = context.getScope();\n\n            /*\n             * In ES5, some node type such as `BlockStatement` doesn't have that scope.\n             * `scope.block` is a different node in such a case.\n             */\n            if (scope.block === node) {\n                findVariablesInScope(scope);\n            }\n        }\n\n        return {\n            Program() {\n                const scope = context.getScope();\n\n                findVariablesInScope(scope);\n\n                // Node.js or ES modules has a special scope.\n                if (\n                    scope.type === \"global\" &&\n                    scope.childScopes[0] &&\n\n                    // The special scope's block is the Program node.\n                    scope.block === scope.childScopes[0].block\n                ) {\n                    findVariablesInScope(scope.childScopes[0]);\n                }\n            },\n\n            FunctionDeclaration: checkForBlock,\n            FunctionExpression: checkForBlock,\n            ArrowFunctionExpression: checkForBlock,\n\n            BlockStatement: checkForBlock,\n            ForStatement: checkForBlock,\n            ForInStatement: checkForBlock,\n            ForOfStatement: checkForBlock,\n            SwitchStatement: checkForBlock\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}