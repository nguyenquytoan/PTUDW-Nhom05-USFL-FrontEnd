{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n// Only used for types\n// eslint-disable-next-line\n// eslint-disable-next-line\n\nconst invariant = (condition, message) => {\n  if (!condition) {\n    throw new Error('babel-plugin-jest-hoist: ' + message);\n  }\n}; // We allow `jest`, `expect`, `require`, all default Node.js globals and all\n// ES2015 built-ins to be used inside of a `jest.mock` factory.\n// We also allow variables prefixed with `mock` as an escape-hatch.\n\n\nconst WHITELISTED_IDENTIFIERS = new Set(['Array', 'ArrayBuffer', 'Boolean', 'DataView', 'Date', 'Error', 'EvalError', 'Float32Array', 'Float64Array', 'Function', 'Generator', 'GeneratorFunction', 'Infinity', 'Int16Array', 'Int32Array', 'Int8Array', 'InternalError', 'Intl', 'JSON', 'Map', 'Math', 'NaN', 'Number', 'Object', 'Promise', 'Proxy', 'RangeError', 'ReferenceError', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'SyntaxError', 'TypeError', 'URIError', 'Uint16Array', 'Uint32Array', 'Uint8Array', 'Uint8ClampedArray', 'WeakMap', 'WeakSet', 'arguments', 'console', 'expect', 'isNaN', 'jest', 'parseFloat', 'parseInt', 'require', 'undefined']);\nObject.getOwnPropertyNames(global).forEach(name => {\n  WHITELISTED_IDENTIFIERS.add(name);\n});\nconst JEST_GLOBAL = {\n  name: 'jest'\n}; // TODO: Should be Visitor<{ids: Set<NodePath<Identifier>>}>, but `ReferencedIdentifier` doesn't exist\n\nconst IDVisitor = {\n  ReferencedIdentifier(path) {\n    // @ts-ignore: passed as Visitor State\n    this.ids.add(path);\n  },\n\n  blacklist: ['TypeAnnotation', 'TSTypeAnnotation', 'TSTypeReference']\n};\nconst FUNCTIONS = Object.create(null);\n\nFUNCTIONS.mock = args => {\n  if (args.length === 1) {\n    return args[0].isStringLiteral() || args[0].isLiteral();\n  } else if (args.length === 2 || args.length === 3) {\n    const moduleFactory = args[1];\n    invariant(moduleFactory.isFunction(), 'The second argument of `jest.mock` must be an inline function.');\n    const ids = new Set();\n    const parentScope = moduleFactory.parentPath.scope; // @ts-ignore: Same as above: ReferencedIdentifier doesn't exist\n\n    moduleFactory.traverse(IDVisitor, {\n      ids\n    });\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = ids[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const id = _step.value;\n        const name = id.node.name;\n        let found = false;\n        let scope = id.scope;\n\n        while (scope !== parentScope) {\n          if (scope.bindings[name]) {\n            found = true;\n            break;\n          }\n\n          scope = scope.parent;\n        }\n\n        if (!found) {\n          invariant(scope.hasGlobal(name) && WHITELISTED_IDENTIFIERS.has(name) || /^mock/i.test(name) || // Allow istanbul's coverage variable to pass.\n          /^(?:__)?cov/.test(name), 'The module factory of `jest.mock()` is not allowed to ' + 'reference any out-of-scope variables.\\n' + 'Invalid variable access: ' + name + '\\n' + 'Whitelisted objects: ' + Array.from(WHITELISTED_IDENTIFIERS).join(', ') + '.\\n' + 'Note: This is a precaution to guard against uninitialized mock ' + 'variables. If it is ensured that the mock is required lazily, ' + 'variable names prefixed with `mock` (case insensitive) are permitted.');\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nFUNCTIONS.unmock = args => args.length === 1 && args[0].isStringLiteral();\n\nFUNCTIONS.deepUnmock = args => args.length === 1 && args[0].isStringLiteral();\n\nFUNCTIONS.disableAutomock = FUNCTIONS.enableAutomock = args => args.length === 0;\n\nmodule.exports = () => {\n  const shouldHoistExpression = expr => {\n    if (!expr.isCallExpression()) {\n      return false;\n    }\n\n    const callee = expr.get('callee');\n    const expressionArguments = expr.get('arguments'); // TODO: avoid type casts - the types can be arrays (is it possible to ignore that without casting?)\n\n    const object = callee.get('object');\n    const property = callee.get('property');\n    return property.isIdentifier() && FUNCTIONS[property.node.name] && (object.isIdentifier(JEST_GLOBAL) || callee.isMemberExpression() && shouldHoistExpression(object)) && FUNCTIONS[property.node.name](expressionArguments);\n  };\n\n  const visitor = {\n    ExpressionStatement(path) {\n      if (shouldHoistExpression(path.get('expression'))) {\n        // @ts-ignore: private, magical property\n        path.node._blockHoist = Infinity;\n      }\n    }\n\n  };\n  return {\n    visitor\n  };\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/babel-plugin-jest-hoist/build/index.js"],"names":["invariant","condition","message","Error","WHITELISTED_IDENTIFIERS","Set","Object","getOwnPropertyNames","global","forEach","name","add","JEST_GLOBAL","IDVisitor","ReferencedIdentifier","path","ids","blacklist","FUNCTIONS","create","mock","args","length","isStringLiteral","isLiteral","moduleFactory","isFunction","parentScope","parentPath","scope","traverse","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","id","value","node","found","bindings","parent","hasGlobal","has","test","Array","from","join","err","return","unmock","deepUnmock","disableAutomock","enableAutomock","module","exports","shouldHoistExpression","expr","isCallExpression","callee","get","expressionArguments","object","property","isIdentifier","isMemberExpression","visitor","ExpressionStatement","_blockHoist","Infinity"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n// Only used for types\n// eslint-disable-next-line\n// eslint-disable-next-line\nconst invariant = (condition, message) => {\n  if (!condition) {\n    throw new Error('babel-plugin-jest-hoist: ' + message);\n  }\n}; // We allow `jest`, `expect`, `require`, all default Node.js globals and all\n// ES2015 built-ins to be used inside of a `jest.mock` factory.\n// We also allow variables prefixed with `mock` as an escape-hatch.\n\nconst WHITELISTED_IDENTIFIERS = new Set([\n  'Array',\n  'ArrayBuffer',\n  'Boolean',\n  'DataView',\n  'Date',\n  'Error',\n  'EvalError',\n  'Float32Array',\n  'Float64Array',\n  'Function',\n  'Generator',\n  'GeneratorFunction',\n  'Infinity',\n  'Int16Array',\n  'Int32Array',\n  'Int8Array',\n  'InternalError',\n  'Intl',\n  'JSON',\n  'Map',\n  'Math',\n  'NaN',\n  'Number',\n  'Object',\n  'Promise',\n  'Proxy',\n  'RangeError',\n  'ReferenceError',\n  'Reflect',\n  'RegExp',\n  'Set',\n  'String',\n  'Symbol',\n  'SyntaxError',\n  'TypeError',\n  'URIError',\n  'Uint16Array',\n  'Uint32Array',\n  'Uint8Array',\n  'Uint8ClampedArray',\n  'WeakMap',\n  'WeakSet',\n  'arguments',\n  'console',\n  'expect',\n  'isNaN',\n  'jest',\n  'parseFloat',\n  'parseInt',\n  'require',\n  'undefined'\n]);\nObject.getOwnPropertyNames(global).forEach(name => {\n  WHITELISTED_IDENTIFIERS.add(name);\n});\nconst JEST_GLOBAL = {\n  name: 'jest'\n}; // TODO: Should be Visitor<{ids: Set<NodePath<Identifier>>}>, but `ReferencedIdentifier` doesn't exist\n\nconst IDVisitor = {\n  ReferencedIdentifier(path) {\n    // @ts-ignore: passed as Visitor State\n    this.ids.add(path);\n  },\n\n  blacklist: ['TypeAnnotation', 'TSTypeAnnotation', 'TSTypeReference']\n};\nconst FUNCTIONS = Object.create(null);\n\nFUNCTIONS.mock = args => {\n  if (args.length === 1) {\n    return args[0].isStringLiteral() || args[0].isLiteral();\n  } else if (args.length === 2 || args.length === 3) {\n    const moduleFactory = args[1];\n    invariant(\n      moduleFactory.isFunction(),\n      'The second argument of `jest.mock` must be an inline function.'\n    );\n    const ids = new Set();\n    const parentScope = moduleFactory.parentPath.scope; // @ts-ignore: Same as above: ReferencedIdentifier doesn't exist\n\n    moduleFactory.traverse(IDVisitor, {\n      ids\n    });\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (\n        var _iterator = ids[Symbol.iterator](), _step;\n        !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n        _iteratorNormalCompletion = true\n      ) {\n        const id = _step.value;\n        const name = id.node.name;\n        let found = false;\n        let scope = id.scope;\n\n        while (scope !== parentScope) {\n          if (scope.bindings[name]) {\n            found = true;\n            break;\n          }\n\n          scope = scope.parent;\n        }\n\n        if (!found) {\n          invariant(\n            (scope.hasGlobal(name) && WHITELISTED_IDENTIFIERS.has(name)) ||\n            /^mock/i.test(name) || // Allow istanbul's coverage variable to pass.\n              /^(?:__)?cov/.test(name),\n            'The module factory of `jest.mock()` is not allowed to ' +\n              'reference any out-of-scope variables.\\n' +\n              'Invalid variable access: ' +\n              name +\n              '\\n' +\n              'Whitelisted objects: ' +\n              Array.from(WHITELISTED_IDENTIFIERS).join(', ') +\n              '.\\n' +\n              'Note: This is a precaution to guard against uninitialized mock ' +\n              'variables. If it is ensured that the mock is required lazily, ' +\n              'variable names prefixed with `mock` (case insensitive) are permitted.'\n          );\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nFUNCTIONS.unmock = args => args.length === 1 && args[0].isStringLiteral();\n\nFUNCTIONS.deepUnmock = args => args.length === 1 && args[0].isStringLiteral();\n\nFUNCTIONS.disableAutomock = FUNCTIONS.enableAutomock = args =>\n  args.length === 0;\n\nmodule.exports = () => {\n  const shouldHoistExpression = expr => {\n    if (!expr.isCallExpression()) {\n      return false;\n    }\n\n    const callee = expr.get('callee');\n    const expressionArguments = expr.get('arguments'); // TODO: avoid type casts - the types can be arrays (is it possible to ignore that without casting?)\n\n    const object = callee.get('object');\n    const property = callee.get('property');\n    return (\n      property.isIdentifier() &&\n      FUNCTIONS[property.node.name] &&\n      (object.isIdentifier(JEST_GLOBAL) ||\n        (callee.isMemberExpression() && shouldHoistExpression(object))) &&\n      FUNCTIONS[property.node.name](expressionArguments)\n    );\n  };\n\n  const visitor = {\n    ExpressionStatement(path) {\n      if (shouldHoistExpression(path.get('expression'))) {\n        // @ts-ignore: private, magical property\n        path.node._blockHoist = Infinity;\n      }\n    }\n  };\n  return {\n    visitor\n  };\n};\n"]},"metadata":{},"sourceType":"script"}