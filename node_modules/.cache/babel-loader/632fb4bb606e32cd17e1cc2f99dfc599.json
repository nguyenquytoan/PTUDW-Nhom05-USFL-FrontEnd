{"ast":null,"code":"#!/usr/bin/env node\n// @ts-ignore\nprocess.exitCode = 0;\n/**\n * @param {string} command process to run\n * @param {string[]} args commandline arguments\n * @returns {Promise<void>} promise\n */\n\nconst runCommand = (command, args) => {\n  const cp = require(\"child_process\");\n\n  return new Promise((resolve, reject) => {\n    const executedCommand = cp.spawn(command, args, {\n      stdio: \"inherit\",\n      shell: true\n    });\n    executedCommand.on(\"error\", error => {\n      reject(error);\n    });\n    executedCommand.on(\"exit\", code => {\n      if (code === 0) {\n        resolve();\n      } else {\n        reject();\n      }\n    });\n  });\n};\n/**\n * @param {string} packageName name of the package\n * @returns {boolean} is the package installed?\n */\n\n\nconst isInstalled = packageName => {\n  try {\n    require.resolve(packageName);\n\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n/**\n * @typedef {Object} CliOption\n * @property {string} name display name\n * @property {string} package npm package name\n * @property {string} binName name of the executable file\n * @property {string} alias shortcut for choice\n * @property {boolean} installed currently installed?\n * @property {boolean} recommended is recommended\n * @property {string} url homepage\n * @property {string} description description\n */\n\n/** @type {CliOption[]} */\n\n\nconst CLIs = [{\n  name: \"webpack-cli\",\n  package: \"webpack-cli\",\n  binName: \"webpack-cli\",\n  alias: \"cli\",\n  installed: isInstalled(\"webpack-cli\"),\n  recommended: true,\n  url: \"https://github.com/webpack/webpack-cli\",\n  description: \"The original webpack full-featured CLI.\"\n}, {\n  name: \"webpack-command\",\n  package: \"webpack-command\",\n  binName: \"webpack-command\",\n  alias: \"command\",\n  installed: isInstalled(\"webpack-command\"),\n  recommended: false,\n  url: \"https://github.com/webpack-contrib/webpack-command\",\n  description: \"A lightweight, opinionated webpack CLI.\"\n}];\nconst installedClis = CLIs.filter(cli => cli.installed);\n\nif (installedClis.length === 0) {\n  const path = require(\"path\");\n\n  const fs = require(\"fs\");\n\n  const readLine = require(\"readline\");\n\n  let notify = \"One CLI for webpack must be installed. These are recommended choices, delivered as separate packages:\";\n\n  for (const item of CLIs) {\n    if (item.recommended) {\n      notify += `\\n - ${item.name} (${item.url})\\n   ${item.description}`;\n    }\n  }\n\n  console.error(notify);\n  const isYarn = fs.existsSync(path.resolve(process.cwd(), \"yarn.lock\"));\n  const packageManager = isYarn ? \"yarn\" : \"npm\";\n  const installOptions = [isYarn ? \"add\" : \"install\", \"-D\"];\n  console.error(`We will use \"${packageManager}\" to install the CLI via \"${packageManager} ${installOptions.join(\" \")}\".`);\n  const question = `Do you want to install 'webpack-cli' (yes/no): `;\n  const questionInterface = readLine.createInterface({\n    input: process.stdin,\n    output: process.stderr\n  });\n  questionInterface.question(question, answer => {\n    questionInterface.close();\n    const normalizedAnswer = answer.toLowerCase().startsWith(\"y\");\n\n    if (!normalizedAnswer) {\n      console.error(\"You need to install 'webpack-cli' to use webpack via CLI.\\n\" + \"You can also install the CLI manually.\");\n      process.exitCode = 1;\n      return;\n    }\n\n    const packageName = \"webpack-cli\";\n    console.log(`Installing '${packageName}' (running '${packageManager} ${installOptions.join(\" \")} ${packageName}')...`);\n    runCommand(packageManager, installOptions.concat(packageName)).then(() => {\n      require(packageName); //eslint-disable-line\n\n    }).catch(error => {\n      console.error(error);\n      process.exitCode = 1;\n    });\n  });\n} else if (installedClis.length === 1) {\n  const path = require(\"path\");\n\n  const pkgPath = require.resolve(`${installedClis[0].package}/package.json`); // eslint-disable-next-line node/no-missing-require\n\n\n  const pkg = require(pkgPath); // eslint-disable-next-line node/no-missing-require\n\n\n  require(path.resolve(path.dirname(pkgPath), pkg.bin[installedClis[0].binName]));\n} else {\n  console.warn(`You have installed ${installedClis.map(item => item.name).join(\" and \")} together. To work with the \"webpack\" command you need only one CLI package, please remove one of them or use them directly via their binary.`); // @ts-ignore\n\n  process.exitCode = 1;\n}","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/webpack/bin/webpack.js"],"names":["process","exitCode","runCommand","command","args","cp","require","Promise","resolve","reject","executedCommand","spawn","stdio","shell","on","error","code","isInstalled","packageName","err","CLIs","name","package","binName","alias","installed","recommended","url","description","installedClis","filter","cli","length","path","fs","readLine","notify","item","console","isYarn","existsSync","cwd","packageManager","installOptions","join","question","questionInterface","createInterface","input","stdin","output","stderr","answer","close","normalizedAnswer","toLowerCase","startsWith","log","concat","then","catch","pkgPath","pkg","dirname","bin","warn","map"],"mappings":"AAAA;AAEA;AACAA,OAAO,CAACC,QAAR,GAAmB,CAAnB;AAEA;;;;;;AAKA,MAAMC,UAAU,GAAG,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACrC,QAAMC,EAAE,GAAGC,OAAO,CAAC,eAAD,CAAlB;;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,UAAMC,eAAe,GAAGL,EAAE,CAACM,KAAH,CAASR,OAAT,EAAkBC,IAAlB,EAAwB;AAC/CQ,MAAAA,KAAK,EAAE,SADwC;AAE/CC,MAAAA,KAAK,EAAE;AAFwC,KAAxB,CAAxB;AAKAH,IAAAA,eAAe,CAACI,EAAhB,CAAmB,OAAnB,EAA4BC,KAAK,IAAI;AACpCN,MAAAA,MAAM,CAACM,KAAD,CAAN;AACA,KAFD;AAIAL,IAAAA,eAAe,CAACI,EAAhB,CAAmB,MAAnB,EAA2BE,IAAI,IAAI;AAClC,UAAIA,IAAI,KAAK,CAAb,EAAgB;AACfR,QAAAA,OAAO;AACP,OAFD,MAEO;AACNC,QAAAA,MAAM;AACN;AACD,KAND;AAOA,GAjBM,CAAP;AAkBA,CApBD;AAsBA;;;;;;AAIA,MAAMQ,WAAW,GAAGC,WAAW,IAAI;AAClC,MAAI;AACHZ,IAAAA,OAAO,CAACE,OAAR,CAAgBU,WAAhB;;AAEA,WAAO,IAAP;AACA,GAJD,CAIE,OAAOC,GAAP,EAAY;AACb,WAAO,KAAP;AACA;AACD,CARD;AAUA;;;;;;;;;;;;AAYA;;;AACA,MAAMC,IAAI,GAAG,CACZ;AACCC,EAAAA,IAAI,EAAE,aADP;AAECC,EAAAA,OAAO,EAAE,aAFV;AAGCC,EAAAA,OAAO,EAAE,aAHV;AAICC,EAAAA,KAAK,EAAE,KAJR;AAKCC,EAAAA,SAAS,EAAER,WAAW,CAAC,aAAD,CALvB;AAMCS,EAAAA,WAAW,EAAE,IANd;AAOCC,EAAAA,GAAG,EAAE,wCAPN;AAQCC,EAAAA,WAAW,EAAE;AARd,CADY,EAWZ;AACCP,EAAAA,IAAI,EAAE,iBADP;AAECC,EAAAA,OAAO,EAAE,iBAFV;AAGCC,EAAAA,OAAO,EAAE,iBAHV;AAICC,EAAAA,KAAK,EAAE,SAJR;AAKCC,EAAAA,SAAS,EAAER,WAAW,CAAC,iBAAD,CALvB;AAMCS,EAAAA,WAAW,EAAE,KANd;AAOCC,EAAAA,GAAG,EAAE,oDAPN;AAQCC,EAAAA,WAAW,EAAE;AARd,CAXY,CAAb;AAuBA,MAAMC,aAAa,GAAGT,IAAI,CAACU,MAAL,CAAYC,GAAG,IAAIA,GAAG,CAACN,SAAvB,CAAtB;;AAEA,IAAII,aAAa,CAACG,MAAd,KAAyB,CAA7B,EAAgC;AAC/B,QAAMC,IAAI,GAAG3B,OAAO,CAAC,MAAD,CAApB;;AACA,QAAM4B,EAAE,GAAG5B,OAAO,CAAC,IAAD,CAAlB;;AACA,QAAM6B,QAAQ,GAAG7B,OAAO,CAAC,UAAD,CAAxB;;AAEA,MAAI8B,MAAM,GACT,uGADD;;AAGA,OAAK,MAAMC,IAAX,IAAmBjB,IAAnB,EAAyB;AACxB,QAAIiB,IAAI,CAACX,WAAT,EAAsB;AACrBU,MAAAA,MAAM,IAAK,QAAOC,IAAI,CAAChB,IAAK,KAAIgB,IAAI,CAACV,GAAI,SAAQU,IAAI,CAACT,WAAY,EAAlE;AACA;AACD;;AAEDU,EAAAA,OAAO,CAACvB,KAAR,CAAcqB,MAAd;AAEA,QAAMG,MAAM,GAAGL,EAAE,CAACM,UAAH,CAAcP,IAAI,CAACzB,OAAL,CAAaR,OAAO,CAACyC,GAAR,EAAb,EAA4B,WAA5B,CAAd,CAAf;AAEA,QAAMC,cAAc,GAAGH,MAAM,GAAG,MAAH,GAAY,KAAzC;AACA,QAAMI,cAAc,GAAG,CAACJ,MAAM,GAAG,KAAH,GAAW,SAAlB,EAA6B,IAA7B,CAAvB;AAEAD,EAAAA,OAAO,CAACvB,KAAR,CACE,gBAAe2B,cAAe,6BAA4BA,cAAe,IAAGC,cAAc,CAACC,IAAf,CAC5E,GAD4E,CAE3E,IAHH;AAMA,QAAMC,QAAQ,GAAI,iDAAlB;AAEA,QAAMC,iBAAiB,GAAGX,QAAQ,CAACY,eAAT,CAAyB;AAClDC,IAAAA,KAAK,EAAEhD,OAAO,CAACiD,KADmC;AAElDC,IAAAA,MAAM,EAAElD,OAAO,CAACmD;AAFkC,GAAzB,CAA1B;AAIAL,EAAAA,iBAAiB,CAACD,QAAlB,CAA2BA,QAA3B,EAAqCO,MAAM,IAAI;AAC9CN,IAAAA,iBAAiB,CAACO,KAAlB;AAEA,UAAMC,gBAAgB,GAAGF,MAAM,CAACG,WAAP,GAAqBC,UAArB,CAAgC,GAAhC,CAAzB;;AAEA,QAAI,CAACF,gBAAL,EAAuB;AACtBhB,MAAAA,OAAO,CAACvB,KAAR,CACC,gEACC,wCAFF;AAIAf,MAAAA,OAAO,CAACC,QAAR,GAAmB,CAAnB;AAEA;AACA;;AAED,UAAMiB,WAAW,GAAG,aAApB;AAEAoB,IAAAA,OAAO,CAACmB,GAAR,CACE,eAAcvC,WAAY,eAAcwB,cAAe,IAAGC,cAAc,CAACC,IAAf,CAC1D,GAD0D,CAEzD,IAAG1B,WAAY,OAHlB;AAMAhB,IAAAA,UAAU,CAACwC,cAAD,EAAiBC,cAAc,CAACe,MAAf,CAAsBxC,WAAtB,CAAjB,CAAV,CACEyC,IADF,CACO,MAAM;AACXrD,MAAAA,OAAO,CAACY,WAAD,CAAP,CADW,CACW;;AACtB,KAHF,EAIE0C,KAJF,CAIQ7C,KAAK,IAAI;AACfuB,MAAAA,OAAO,CAACvB,KAAR,CAAcA,KAAd;AACAf,MAAAA,OAAO,CAACC,QAAR,GAAmB,CAAnB;AACA,KAPF;AAQA,GA/BD;AAgCA,CAjED,MAiEO,IAAI4B,aAAa,CAACG,MAAd,KAAyB,CAA7B,EAAgC;AACtC,QAAMC,IAAI,GAAG3B,OAAO,CAAC,MAAD,CAApB;;AACA,QAAMuD,OAAO,GAAGvD,OAAO,CAACE,OAAR,CAAiB,GAAEqB,aAAa,CAAC,CAAD,CAAb,CAAiBP,OAAQ,eAA5C,CAAhB,CAFsC,CAGtC;;;AACA,QAAMwC,GAAG,GAAGxD,OAAO,CAACuD,OAAD,CAAnB,CAJsC,CAKtC;;;AACAvD,EAAAA,OAAO,CAAC2B,IAAI,CAACzB,OAAL,CACPyB,IAAI,CAAC8B,OAAL,CAAaF,OAAb,CADO,EAEPC,GAAG,CAACE,GAAJ,CAAQnC,aAAa,CAAC,CAAD,CAAb,CAAiBN,OAAzB,CAFO,CAAD,CAAP;AAIA,CAVM,MAUA;AACNe,EAAAA,OAAO,CAAC2B,IAAR,CACE,sBAAqBpC,aAAa,CACjCqC,GADoB,CAChB7B,IAAI,IAAIA,IAAI,CAAChB,IADG,EAEpBuB,IAFoB,CAGpB,OAHoB,CAInB,+IALJ,EADM,CASN;;AACA5C,EAAAA,OAAO,CAACC,QAAR,GAAmB,CAAnB;AACA","sourcesContent":["#!/usr/bin/env node\n\n// @ts-ignore\nprocess.exitCode = 0;\n\n/**\n * @param {string} command process to run\n * @param {string[]} args commandline arguments\n * @returns {Promise<void>} promise\n */\nconst runCommand = (command, args) => {\n\tconst cp = require(\"child_process\");\n\treturn new Promise((resolve, reject) => {\n\t\tconst executedCommand = cp.spawn(command, args, {\n\t\t\tstdio: \"inherit\",\n\t\t\tshell: true\n\t\t});\n\n\t\texecutedCommand.on(\"error\", error => {\n\t\t\treject(error);\n\t\t});\n\n\t\texecutedCommand.on(\"exit\", code => {\n\t\t\tif (code === 0) {\n\t\t\t\tresolve();\n\t\t\t} else {\n\t\t\t\treject();\n\t\t\t}\n\t\t});\n\t});\n};\n\n/**\n * @param {string} packageName name of the package\n * @returns {boolean} is the package installed?\n */\nconst isInstalled = packageName => {\n\ttry {\n\t\trequire.resolve(packageName);\n\n\t\treturn true;\n\t} catch (err) {\n\t\treturn false;\n\t}\n};\n\n/**\n * @typedef {Object} CliOption\n * @property {string} name display name\n * @property {string} package npm package name\n * @property {string} binName name of the executable file\n * @property {string} alias shortcut for choice\n * @property {boolean} installed currently installed?\n * @property {boolean} recommended is recommended\n * @property {string} url homepage\n * @property {string} description description\n */\n\n/** @type {CliOption[]} */\nconst CLIs = [\n\t{\n\t\tname: \"webpack-cli\",\n\t\tpackage: \"webpack-cli\",\n\t\tbinName: \"webpack-cli\",\n\t\talias: \"cli\",\n\t\tinstalled: isInstalled(\"webpack-cli\"),\n\t\trecommended: true,\n\t\turl: \"https://github.com/webpack/webpack-cli\",\n\t\tdescription: \"The original webpack full-featured CLI.\"\n\t},\n\t{\n\t\tname: \"webpack-command\",\n\t\tpackage: \"webpack-command\",\n\t\tbinName: \"webpack-command\",\n\t\talias: \"command\",\n\t\tinstalled: isInstalled(\"webpack-command\"),\n\t\trecommended: false,\n\t\turl: \"https://github.com/webpack-contrib/webpack-command\",\n\t\tdescription: \"A lightweight, opinionated webpack CLI.\"\n\t}\n];\n\nconst installedClis = CLIs.filter(cli => cli.installed);\n\nif (installedClis.length === 0) {\n\tconst path = require(\"path\");\n\tconst fs = require(\"fs\");\n\tconst readLine = require(\"readline\");\n\n\tlet notify =\n\t\t\"One CLI for webpack must be installed. These are recommended choices, delivered as separate packages:\";\n\n\tfor (const item of CLIs) {\n\t\tif (item.recommended) {\n\t\t\tnotify += `\\n - ${item.name} (${item.url})\\n   ${item.description}`;\n\t\t}\n\t}\n\n\tconsole.error(notify);\n\n\tconst isYarn = fs.existsSync(path.resolve(process.cwd(), \"yarn.lock\"));\n\n\tconst packageManager = isYarn ? \"yarn\" : \"npm\";\n\tconst installOptions = [isYarn ? \"add\" : \"install\", \"-D\"];\n\n\tconsole.error(\n\t\t`We will use \"${packageManager}\" to install the CLI via \"${packageManager} ${installOptions.join(\n\t\t\t\" \"\n\t\t)}\".`\n\t);\n\n\tconst question = `Do you want to install 'webpack-cli' (yes/no): `;\n\n\tconst questionInterface = readLine.createInterface({\n\t\tinput: process.stdin,\n\t\toutput: process.stderr\n\t});\n\tquestionInterface.question(question, answer => {\n\t\tquestionInterface.close();\n\n\t\tconst normalizedAnswer = answer.toLowerCase().startsWith(\"y\");\n\n\t\tif (!normalizedAnswer) {\n\t\t\tconsole.error(\n\t\t\t\t\"You need to install 'webpack-cli' to use webpack via CLI.\\n\" +\n\t\t\t\t\t\"You can also install the CLI manually.\"\n\t\t\t);\n\t\t\tprocess.exitCode = 1;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst packageName = \"webpack-cli\";\n\n\t\tconsole.log(\n\t\t\t`Installing '${packageName}' (running '${packageManager} ${installOptions.join(\n\t\t\t\t\" \"\n\t\t\t)} ${packageName}')...`\n\t\t);\n\n\t\trunCommand(packageManager, installOptions.concat(packageName))\n\t\t\t.then(() => {\n\t\t\t\trequire(packageName); //eslint-disable-line\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error);\n\t\t\t\tprocess.exitCode = 1;\n\t\t\t});\n\t});\n} else if (installedClis.length === 1) {\n\tconst path = require(\"path\");\n\tconst pkgPath = require.resolve(`${installedClis[0].package}/package.json`);\n\t// eslint-disable-next-line node/no-missing-require\n\tconst pkg = require(pkgPath);\n\t// eslint-disable-next-line node/no-missing-require\n\trequire(path.resolve(\n\t\tpath.dirname(pkgPath),\n\t\tpkg.bin[installedClis[0].binName]\n\t));\n} else {\n\tconsole.warn(\n\t\t`You have installed ${installedClis\n\t\t\t.map(item => item.name)\n\t\t\t.join(\n\t\t\t\t\" and \"\n\t\t\t)} together. To work with the \"webpack\" command you need only one CLI package, please remove one of them or use them directly via their binary.`\n\t);\n\n\t// @ts-ignore\n\tprocess.exitCode = 1;\n}\n"]},"metadata":{},"sourceType":"script"}