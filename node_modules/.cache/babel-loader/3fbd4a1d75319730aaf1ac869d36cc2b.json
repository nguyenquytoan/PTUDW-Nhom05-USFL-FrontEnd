{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst loaderUtils = require('loader-utils');\n\nconst path = require('path');\n\nmodule.exports = function getLocalIdent(context, localIdentName, localName, options) {\n  // Use the filename or folder name, based on some uses the index.js / index.module.(css|scss|sass) project style\n  const fileNameOrFolder = context.resourcePath.match(/index\\.module\\.(css|scss|sass)$/) ? '[folder]' : '[name]'; // Create a hash based on a the file location and class name. Will be unique across a project, and close to globally unique.\n\n  const hash = loaderUtils.getHashDigest(path.posix.relative(context.rootContext, context.resourcePath) + localName, 'md5', 'base64', 5); // Use loaderUtils to find the file or folder name\n\n  const className = loaderUtils.interpolateName(context, fileNameOrFolder + '_' + localName + '__' + hash, options); // remove the .module that appears in every classname when based on the file.\n\n  return className.replace('.module_', '_');\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-dev-utils/getCSSModuleLocalIdent.js"],"names":["loaderUtils","require","path","module","exports","getLocalIdent","context","localIdentName","localName","options","fileNameOrFolder","resourcePath","match","hash","getHashDigest","posix","relative","rootContext","className","interpolateName","replace"],"mappings":"AAAA;;;;;;AAOA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CACfC,OADe,EAEfC,cAFe,EAGfC,SAHe,EAIfC,OAJe,EAKf;AACA;AACA,QAAMC,gBAAgB,GAAGJ,OAAO,CAACK,YAAR,CAAqBC,KAArB,CACvB,iCADuB,IAGrB,UAHqB,GAIrB,QAJJ,CAFA,CAOA;;AACA,QAAMC,IAAI,GAAGb,WAAW,CAACc,aAAZ,CACXZ,IAAI,CAACa,KAAL,CAAWC,QAAX,CAAoBV,OAAO,CAACW,WAA5B,EAAyCX,OAAO,CAACK,YAAjD,IAAiEH,SADtD,EAEX,KAFW,EAGX,QAHW,EAIX,CAJW,CAAb,CARA,CAcA;;AACA,QAAMU,SAAS,GAAGlB,WAAW,CAACmB,eAAZ,CAChBb,OADgB,EAEhBI,gBAAgB,GAAG,GAAnB,GAAyBF,SAAzB,GAAqC,IAArC,GAA4CK,IAF5B,EAGhBJ,OAHgB,CAAlB,CAfA,CAoBA;;AACA,SAAOS,SAAS,CAACE,OAAV,CAAkB,UAAlB,EAA8B,GAA9B,CAAP;AACD,CA3BD","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst loaderUtils = require('loader-utils');\nconst path = require('path');\n\nmodule.exports = function getLocalIdent(\n  context,\n  localIdentName,\n  localName,\n  options\n) {\n  // Use the filename or folder name, based on some uses the index.js / index.module.(css|scss|sass) project style\n  const fileNameOrFolder = context.resourcePath.match(\n    /index\\.module\\.(css|scss|sass)$/\n  )\n    ? '[folder]'\n    : '[name]';\n  // Create a hash based on a the file location and class name. Will be unique across a project, and close to globally unique.\n  const hash = loaderUtils.getHashDigest(\n    path.posix.relative(context.rootContext, context.resourcePath) + localName,\n    'md5',\n    'base64',\n    5\n  );\n  // Use loaderUtils to find the file or folder name\n  const className = loaderUtils.interpolateName(\n    context,\n    fileNameOrFolder + '_' + localName + '__' + hash,\n    options\n  );\n  // remove the .module that appears in every classname when based on the file.\n  return className.replace('.module_', '_');\n};\n"]},"metadata":{},"sourceType":"script"}