{"ast":null,"code":"var test = require('tape');\n\nvar path = require('path');\n\nvar parse = path.parse || require('path-parse');\n\nvar keys = require('object-keys');\n\nvar nodeModulesPaths = require('../lib/node-modules-paths');\n\nvar verifyDirs = function verifyDirs(t, start, dirs, moduleDirectories, paths) {\n  var moduleDirs = [].concat(moduleDirectories || 'node_modules');\n\n  if (paths) {\n    for (var k = 0; k < paths.length; ++k) {\n      moduleDirs.push(path.basename(paths[k]));\n    }\n  }\n\n  var foundModuleDirs = {};\n  var uniqueDirs = {};\n  var parsedDirs = {};\n\n  for (var i = 0; i < dirs.length; ++i) {\n    var parsed = parse(dirs[i]);\n\n    if (!foundModuleDirs[parsed.base]) {\n      foundModuleDirs[parsed.base] = 0;\n    }\n\n    foundModuleDirs[parsed.base] += 1;\n    parsedDirs[parsed.dir] = true;\n    uniqueDirs[dirs[i]] = true;\n  }\n\n  t.equal(keys(parsedDirs).length >= start.split(path.sep).length, true, 'there are >= dirs than \"start\" has');\n  var foundModuleDirNames = keys(foundModuleDirs);\n  t.deepEqual(foundModuleDirNames, moduleDirs, 'all desired module dirs were found');\n  t.equal(keys(uniqueDirs).length, dirs.length, 'all dirs provided were unique');\n  var counts = {};\n\n  for (var j = 0; j < foundModuleDirNames.length; ++j) {\n    counts[foundModuleDirs[j]] = true;\n  }\n\n  t.equal(keys(counts).length, 1, 'all found module directories had the same count');\n};\n\ntest('node-modules-paths', function (t) {\n  t.test('no options', function (t) {\n    var start = path.join(__dirname, 'resolver');\n    var dirs = nodeModulesPaths(start);\n    verifyDirs(t, start, dirs);\n    t.end();\n  });\n  t.test('empty options', function (t) {\n    var start = path.join(__dirname, 'resolver');\n    var dirs = nodeModulesPaths(start, {});\n    verifyDirs(t, start, dirs);\n    t.end();\n  });\n  t.test('with paths=array option', function (t) {\n    var start = path.join(__dirname, 'resolver');\n    var paths = ['a', 'b'];\n    var dirs = nodeModulesPaths(start, {\n      paths: paths\n    });\n    verifyDirs(t, start, dirs, null, paths);\n    t.end();\n  });\n  t.test('with paths=function option', function (t) {\n    var paths = function paths(request, absoluteStart, getNodeModulesDirs, opts) {\n      return getNodeModulesDirs().concat(path.join(absoluteStart, 'not node modules', request));\n    };\n\n    var start = path.join(__dirname, 'resolver');\n    var dirs = nodeModulesPaths(start, {\n      paths: paths\n    }, 'pkg');\n    verifyDirs(t, start, dirs, null, [path.join(start, 'not node modules', 'pkg')]);\n    t.end();\n  });\n  t.test('with paths=function skipping node modules resolution', function (t) {\n    var paths = function paths(request, absoluteStart, getNodeModulesDirs, opts) {\n      return [];\n    };\n\n    var start = path.join(__dirname, 'resolver');\n    var dirs = nodeModulesPaths(start, {\n      paths: paths\n    });\n    t.deepEqual(dirs, [], 'no node_modules was computed');\n    t.end();\n  });\n  t.test('with moduleDirectory option', function (t) {\n    var start = path.join(__dirname, 'resolver');\n    var moduleDirectory = 'not node modules';\n    var dirs = nodeModulesPaths(start, {\n      moduleDirectory: moduleDirectory\n    });\n    verifyDirs(t, start, dirs, moduleDirectory);\n    t.end();\n  });\n  t.test('with 1 moduleDirectory and paths options', function (t) {\n    var start = path.join(__dirname, 'resolver');\n    var paths = ['a', 'b'];\n    var moduleDirectory = 'not node modules';\n    var dirs = nodeModulesPaths(start, {\n      paths: paths,\n      moduleDirectory: moduleDirectory\n    });\n    verifyDirs(t, start, dirs, moduleDirectory, paths);\n    t.end();\n  });\n  t.test('with 1+ moduleDirectory and paths options', function (t) {\n    var start = path.join(__dirname, 'resolver');\n    var paths = ['a', 'b'];\n    var moduleDirectories = ['not node modules', 'other modules'];\n    var dirs = nodeModulesPaths(start, {\n      paths: paths,\n      moduleDirectory: moduleDirectories\n    });\n    verifyDirs(t, start, dirs, moduleDirectories, paths);\n    t.end();\n  });\n  t.test('combine paths correctly on Windows', function (t) {\n    var start = 'C:\\\\Users\\\\username\\\\myProject\\\\src';\n    var paths = [];\n    var moduleDirectories = ['node_modules', start];\n    var dirs = nodeModulesPaths(start, {\n      paths: paths,\n      moduleDirectory: moduleDirectories\n    });\n    t.equal(dirs.indexOf(path.resolve(start)) > -1, true, 'should contain start dir');\n    t.end();\n  });\n  t.test('combine paths correctly on non-Windows', {\n    skip: process.platform === 'win32'\n  }, function (t) {\n    var start = '/Users/username/git/myProject/src';\n    var paths = [];\n    var moduleDirectories = ['node_modules', '/Users/username/git/myProject/src'];\n    var dirs = nodeModulesPaths(start, {\n      paths: paths,\n      moduleDirectory: moduleDirectories\n    });\n    t.equal(dirs.indexOf(path.resolve(start)) > -1, true, 'should contain start dir');\n    t.end();\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/resolve/test/node-modules-paths.js"],"names":["test","require","path","parse","keys","nodeModulesPaths","verifyDirs","t","start","dirs","moduleDirectories","paths","moduleDirs","concat","k","length","push","basename","foundModuleDirs","uniqueDirs","parsedDirs","i","parsed","base","dir","equal","split","sep","foundModuleDirNames","deepEqual","counts","j","join","__dirname","end","request","absoluteStart","getNodeModulesDirs","opts","moduleDirectory","indexOf","resolve","skip","process","platform"],"mappings":"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","sourcesContent":["var test = require('tape');\nvar path = require('path');\nvar parse = path.parse || require('path-parse');\nvar keys = require('object-keys');\n\nvar nodeModulesPaths = require('../lib/node-modules-paths');\n\nvar verifyDirs = function verifyDirs(t, start, dirs, moduleDirectories, paths) {\n    var moduleDirs = [].concat(moduleDirectories || 'node_modules');\n    if (paths) {\n        for (var k = 0; k < paths.length; ++k) {\n            moduleDirs.push(path.basename(paths[k]));\n        }\n    }\n\n    var foundModuleDirs = {};\n    var uniqueDirs = {};\n    var parsedDirs = {};\n    for (var i = 0; i < dirs.length; ++i) {\n        var parsed = parse(dirs[i]);\n        if (!foundModuleDirs[parsed.base]) { foundModuleDirs[parsed.base] = 0; }\n        foundModuleDirs[parsed.base] += 1;\n        parsedDirs[parsed.dir] = true;\n        uniqueDirs[dirs[i]] = true;\n    }\n    t.equal(keys(parsedDirs).length >= start.split(path.sep).length, true, 'there are >= dirs than \"start\" has');\n    var foundModuleDirNames = keys(foundModuleDirs);\n    t.deepEqual(foundModuleDirNames, moduleDirs, 'all desired module dirs were found');\n    t.equal(keys(uniqueDirs).length, dirs.length, 'all dirs provided were unique');\n\n    var counts = {};\n    for (var j = 0; j < foundModuleDirNames.length; ++j) {\n        counts[foundModuleDirs[j]] = true;\n    }\n    t.equal(keys(counts).length, 1, 'all found module directories had the same count');\n};\n\ntest('node-modules-paths', function (t) {\n    t.test('no options', function (t) {\n        var start = path.join(__dirname, 'resolver');\n        var dirs = nodeModulesPaths(start);\n\n        verifyDirs(t, start, dirs);\n\n        t.end();\n    });\n\n    t.test('empty options', function (t) {\n        var start = path.join(__dirname, 'resolver');\n        var dirs = nodeModulesPaths(start, {});\n\n        verifyDirs(t, start, dirs);\n\n        t.end();\n    });\n\n    t.test('with paths=array option', function (t) {\n        var start = path.join(__dirname, 'resolver');\n        var paths = ['a', 'b'];\n        var dirs = nodeModulesPaths(start, { paths: paths });\n\n        verifyDirs(t, start, dirs, null, paths);\n\n        t.end();\n    });\n\n    t.test('with paths=function option', function (t) {\n        var paths = function paths(request, absoluteStart, getNodeModulesDirs, opts) {\n            return getNodeModulesDirs().concat(path.join(absoluteStart, 'not node modules', request));\n        };\n\n        var start = path.join(__dirname, 'resolver');\n        var dirs = nodeModulesPaths(start, { paths: paths }, 'pkg');\n\n        verifyDirs(t, start, dirs, null, [path.join(start, 'not node modules', 'pkg')]);\n\n        t.end();\n    });\n\n    t.test('with paths=function skipping node modules resolution', function (t) {\n        var paths = function paths(request, absoluteStart, getNodeModulesDirs, opts) {\n            return [];\n        };\n        var start = path.join(__dirname, 'resolver');\n        var dirs = nodeModulesPaths(start, { paths: paths });\n        t.deepEqual(dirs, [], 'no node_modules was computed');\n        t.end();\n    });\n\n    t.test('with moduleDirectory option', function (t) {\n        var start = path.join(__dirname, 'resolver');\n        var moduleDirectory = 'not node modules';\n        var dirs = nodeModulesPaths(start, { moduleDirectory: moduleDirectory });\n\n        verifyDirs(t, start, dirs, moduleDirectory);\n\n        t.end();\n    });\n\n    t.test('with 1 moduleDirectory and paths options', function (t) {\n        var start = path.join(__dirname, 'resolver');\n        var paths = ['a', 'b'];\n        var moduleDirectory = 'not node modules';\n        var dirs = nodeModulesPaths(start, { paths: paths, moduleDirectory: moduleDirectory });\n\n        verifyDirs(t, start, dirs, moduleDirectory, paths);\n\n        t.end();\n    });\n\n    t.test('with 1+ moduleDirectory and paths options', function (t) {\n        var start = path.join(__dirname, 'resolver');\n        var paths = ['a', 'b'];\n        var moduleDirectories = ['not node modules', 'other modules'];\n        var dirs = nodeModulesPaths(start, { paths: paths, moduleDirectory: moduleDirectories });\n\n        verifyDirs(t, start, dirs, moduleDirectories, paths);\n\n        t.end();\n    });\n\n    t.test('combine paths correctly on Windows', function (t) {\n        var start = 'C:\\\\Users\\\\username\\\\myProject\\\\src';\n        var paths = [];\n        var moduleDirectories = ['node_modules', start];\n        var dirs = nodeModulesPaths(start, { paths: paths, moduleDirectory: moduleDirectories });\n\n        t.equal(dirs.indexOf(path.resolve(start)) > -1, true, 'should contain start dir');\n\n        t.end();\n    });\n\n    t.test('combine paths correctly on non-Windows', { skip: process.platform === 'win32' }, function (t) {\n        var start = '/Users/username/git/myProject/src';\n        var paths = [];\n        var moduleDirectories = ['node_modules', '/Users/username/git/myProject/src'];\n        var dirs = nodeModulesPaths(start, { paths: paths, moduleDirectory: moduleDirectories });\n\n        t.equal(dirs.indexOf(path.resolve(start)) > -1, true, 'should contain start dir');\n\n        t.end();\n    });\n});\n"]},"metadata":{},"sourceType":"script"}