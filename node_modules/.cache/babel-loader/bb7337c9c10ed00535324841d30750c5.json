{"ast":null,"code":"'use strict';\n\nconst pRetry = require('p-retry');\n\nconst portfinder = require('portfinder');\n\nconst defaultPort = require('./defaultPort');\n\nconst defaultTo = require('./defaultTo');\n\nconst tryParseInt = require('./tryParseInt');\n\nfunction runPortFinder() {\n  return new Promise((resolve, reject) => {\n    portfinder.basePort = defaultPort;\n    portfinder.getPort((error, port) => {\n      if (error) {\n        return reject(error);\n      }\n\n      return resolve(port);\n    });\n  });\n}\n\nfunction findPort(port) {\n  if (port) {\n    return Promise.resolve(port);\n  } // Try to find unused port and listen on it for 3 times,\n  // if port is not specified in options.\n  // Because NaN == null is false, defaultTo fails if parseInt returns NaN\n  // so the tryParseInt function is introduced to handle NaN\n\n\n  const defaultPortRetry = defaultTo(tryParseInt(process.env.DEFAULT_PORT_RETRY), 3);\n  return pRetry(runPortFinder, {\n    retries: defaultPortRetry\n  });\n}\n\nmodule.exports = findPort;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/webpack-dev-server/lib/utils/findPort.js"],"names":["pRetry","require","portfinder","defaultPort","defaultTo","tryParseInt","runPortFinder","Promise","resolve","reject","basePort","getPort","error","port","findPort","defaultPortRetry","process","env","DEFAULT_PORT_RETRY","retries","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,eAAD,CAA3B;;AAEA,SAASK,aAAT,GAAyB;AACvB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCP,IAAAA,UAAU,CAACQ,QAAX,GAAsBP,WAAtB;AACAD,IAAAA,UAAU,CAACS,OAAX,CAAmB,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAClC,UAAID,KAAJ,EAAW;AACT,eAAOH,MAAM,CAACG,KAAD,CAAb;AACD;;AAED,aAAOJ,OAAO,CAACK,IAAD,CAAd;AACD,KAND;AAOD,GATM,CAAP;AAUD;;AAED,SAASC,QAAT,CAAkBD,IAAlB,EAAwB;AACtB,MAAIA,IAAJ,EAAU;AACR,WAAON,OAAO,CAACC,OAAR,CAAgBK,IAAhB,CAAP;AACD,GAHqB,CAKtB;AACA;AACA;AACA;;;AACA,QAAME,gBAAgB,GAAGX,SAAS,CAChCC,WAAW,CAACW,OAAO,CAACC,GAAR,CAAYC,kBAAb,CADqB,EAEhC,CAFgC,CAAlC;AAKA,SAAOlB,MAAM,CAACM,aAAD,EAAgB;AAAEa,IAAAA,OAAO,EAAEJ;AAAX,GAAhB,CAAb;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBP,QAAjB","sourcesContent":["'use strict';\n\nconst pRetry = require('p-retry');\nconst portfinder = require('portfinder');\nconst defaultPort = require('./defaultPort');\nconst defaultTo = require('./defaultTo');\nconst tryParseInt = require('./tryParseInt');\n\nfunction runPortFinder() {\n  return new Promise((resolve, reject) => {\n    portfinder.basePort = defaultPort;\n    portfinder.getPort((error, port) => {\n      if (error) {\n        return reject(error);\n      }\n\n      return resolve(port);\n    });\n  });\n}\n\nfunction findPort(port) {\n  if (port) {\n    return Promise.resolve(port);\n  }\n\n  // Try to find unused port and listen on it for 3 times,\n  // if port is not specified in options.\n  // Because NaN == null is false, defaultTo fails if parseInt returns NaN\n  // so the tryParseInt function is introduced to handle NaN\n  const defaultPortRetry = defaultTo(\n    tryParseInt(process.env.DEFAULT_PORT_RETRY),\n    3\n  );\n\n  return pRetry(runPortFinder, { retries: defaultPortRetry });\n}\n\nmodule.exports = findPort;\n"]},"metadata":{},"sourceType":"script"}