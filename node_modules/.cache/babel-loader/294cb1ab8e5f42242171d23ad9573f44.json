{"ast":null,"code":"this.workbox = this.workbox || {}, this.workbox.backgroundSync = function (t, e, s) {\n  \"use strict\";\n\n  try {\n    self[\"workbox:background-sync:4.3.1\"] && _();\n  } catch (t) {}\n\n  const i = 3,\n        n = \"workbox-background-sync\",\n        a = \"requests\",\n        r = \"queueName\";\n\n  class c {\n    constructor(t) {\n      this.t = t, this.s = new s.DBWrapper(n, i, {\n        onupgradeneeded: this.i\n      });\n    }\n\n    async pushEntry(t) {\n      delete t.id, t.queueName = this.t, await this.s.add(a, t);\n    }\n\n    async unshiftEntry(t) {\n      const [e] = await this.s.getAllMatching(a, {\n        count: 1\n      });\n      e ? t.id = e.id - 1 : delete t.id, t.queueName = this.t, await this.s.add(a, t);\n    }\n\n    async popEntry() {\n      return this.h({\n        direction: \"prev\"\n      });\n    }\n\n    async shiftEntry() {\n      return this.h({\n        direction: \"next\"\n      });\n    }\n\n    async getAll() {\n      return await this.s.getAllMatching(a, {\n        index: r,\n        query: IDBKeyRange.only(this.t)\n      });\n    }\n\n    async deleteEntry(t) {\n      await this.s.delete(a, t);\n    }\n\n    async h({\n      direction: t\n    }) {\n      const [e] = await this.s.getAllMatching(a, {\n        direction: t,\n        index: r,\n        query: IDBKeyRange.only(this.t),\n        count: 1\n      });\n      if (e) return await this.deleteEntry(e.id), e;\n    }\n\n    i(t) {\n      const e = t.target.result;\n      t.oldVersion > 0 && t.oldVersion < i && e.objectStoreNames.contains(a) && e.deleteObjectStore(a), e.createObjectStore(a, {\n        autoIncrement: !0,\n        keyPath: \"id\"\n      }).createIndex(r, r, {\n        unique: !1\n      });\n    }\n\n  }\n\n  const h = [\"method\", \"referrer\", \"referrerPolicy\", \"mode\", \"credentials\", \"cache\", \"redirect\", \"integrity\", \"keepalive\"];\n\n  class o {\n    static async fromRequest(t) {\n      const e = {\n        url: t.url,\n        headers: {}\n      };\n      \"GET\" !== t.method && (e.body = await t.clone().arrayBuffer());\n\n      for (const [s, i] of t.headers.entries()) e.headers[s] = i;\n\n      for (const s of h) void 0 !== t[s] && (e[s] = t[s]);\n\n      return new o(e);\n    }\n\n    constructor(t) {\n      \"navigate\" === t.mode && (t.mode = \"same-origin\"), this.o = t;\n    }\n\n    toObject() {\n      const t = Object.assign({}, this.o);\n      return t.headers = Object.assign({}, this.o.headers), t.body && (t.body = t.body.slice(0)), t;\n    }\n\n    toRequest() {\n      return new Request(this.o.url, this.o);\n    }\n\n    clone() {\n      return new o(this.toObject());\n    }\n\n  }\n\n  const u = \"workbox-background-sync\",\n        y = 10080,\n        w = new Set();\n\n  class d {\n    constructor(t, {\n      onSync: s,\n      maxRetentionTime: i\n    } = {}) {\n      if (w.has(t)) throw new e.WorkboxError(\"duplicate-queue-name\", {\n        name: t\n      });\n      w.add(t), this.u = t, this.l = s || this.replayRequests, this.q = i || y, this.m = new c(this.u), this.p();\n    }\n\n    get name() {\n      return this.u;\n    }\n\n    async pushRequest(t) {\n      await this.g(t, \"push\");\n    }\n\n    async unshiftRequest(t) {\n      await this.g(t, \"unshift\");\n    }\n\n    async popRequest() {\n      return this.R(\"pop\");\n    }\n\n    async shiftRequest() {\n      return this.R(\"shift\");\n    }\n\n    async getAll() {\n      const t = await this.m.getAll(),\n            e = Date.now(),\n            s = [];\n\n      for (const i of t) {\n        const t = 60 * this.q * 1e3;\n        e - i.timestamp > t ? await this.m.deleteEntry(i.id) : s.push(f(i));\n      }\n\n      return s;\n    }\n\n    async g({\n      request: t,\n      metadata: e,\n      timestamp: s = Date.now()\n    }, i) {\n      const n = {\n        requestData: (await o.fromRequest(t.clone())).toObject(),\n        timestamp: s\n      };\n      e && (n.metadata = e), await this.m[`${i}Entry`](n), this.k ? this.D = !0 : await this.registerSync();\n    }\n\n    async R(t) {\n      const e = Date.now(),\n            s = await this.m[`${t}Entry`]();\n\n      if (s) {\n        const i = 60 * this.q * 1e3;\n        return e - s.timestamp > i ? this.R(t) : f(s);\n      }\n    }\n\n    async replayRequests() {\n      let t;\n\n      for (; t = await this.shiftRequest();) try {\n        await fetch(t.request.clone());\n      } catch (s) {\n        throw await this.unshiftRequest(t), new e.WorkboxError(\"queue-replay-failed\", {\n          name: this.u\n        });\n      }\n    }\n\n    async registerSync() {\n      if (\"sync\" in registration) try {\n        await registration.sync.register(`${u}:${this.u}`);\n      } catch (t) {}\n    }\n\n    p() {\n      \"sync\" in registration ? self.addEventListener(\"sync\", t => {\n        if (t.tag === `${u}:${this.u}`) {\n          const e = async () => {\n            let e;\n            this.k = !0;\n\n            try {\n              await this.l({\n                queue: this\n              });\n            } catch (t) {\n              throw e = t;\n            } finally {\n              !this.D || e && !t.lastChance || (await this.registerSync()), this.k = !1, this.D = !1;\n            }\n          };\n\n          t.waitUntil(e());\n        }\n      }) : this.l({\n        queue: this\n      });\n    }\n\n    static get _() {\n      return w;\n    }\n\n  }\n\n  const f = t => {\n    const e = {\n      request: new o(t.requestData).toRequest(),\n      timestamp: t.timestamp\n    };\n    return t.metadata && (e.metadata = t.metadata), e;\n  };\n\n  return t.Queue = d, t.Plugin = class {\n    constructor(...t) {\n      this.v = new d(...t), this.fetchDidFail = this.fetchDidFail.bind(this);\n    }\n\n    async fetchDidFail({\n      request: t\n    }) {\n      await this.v.pushRequest({\n        request: t\n      });\n    }\n\n  }, t;\n}({}, workbox.core._private, workbox.core._private);","map":{"version":3,"sources":["../_version.mjs","../lib/QueueStore.mjs","../lib/StorableRequest.mjs","../Queue.mjs","../Plugin.mjs"],"names":["self","_","e","DB_VERSION","DB_NAME","OBJECT_STORE_NAME","INDEXED_PROP","QueueStore","constructor","queueName","_queueName","_db","DBWrapper","onupgradeneeded","this","_upgradeDb","entry","id","add","firstEntry","getAllMatching","count","_removeEntry","direction","index","query","IDBKeyRange","only","delete","deleteEntry","event","db","target","result","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","keyPath","createIndex","unique","serializableProperties","StorableRequest","request","requestData","url","headers","method","body","clone","arrayBuffer","key","value","entries","prop","undefined","mode","_requestData","toObject","Object","assign","slice","toRequest","Request","TAG_PREFIX","MAX_RETENTION_TIME","queueNames","Set","Queue","name","onSync","maxRetentionTime","has","WorkboxError","_name","_onSync","replayRequests","_maxRetentionTime","_queueStore","_addSyncListener","_addRequest","_removeRequest","allEntries","getAll","now","Date","unexpiredEntries","maxRetentionTimeInMs","timestamp","push","convertEntry","metadata","operation","fromRequest","_syncInProgress","_requestsAddedDuringSync","registerSync","shiftRequest","fetch","error","unshiftRequest","registration","sync","register","err","addEventListener","tag","syncComplete","async","syncError","queue","lastChance","waitUntil","queueStoreEntry","queueEntry","queueArgs","_queue","fetchDidFail","bind","pushRequest"],"mappings":"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","sourcesContent":["try{self['workbox:background-sync:4.3.1']&&_()}catch(e){}// eslint-disable-line","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {DBWrapper} from 'workbox-core/_private/DBWrapper.mjs';\nimport '../_version.mjs';\n\n\nconst DB_VERSION = 3;\nconst DB_NAME = 'workbox-background-sync';\nconst OBJECT_STORE_NAME = 'requests';\nconst INDEXED_PROP = 'queueName';\n\n/**\n * A class to manage storing requests from a Queue in IndexedbDB,\n * indexed by their queue name for easier access.\n *\n * @private\n */\nexport class QueueStore {\n  /**\n   * Associates this instance with a Queue instance, so entries added can be\n   * identified by their queue name.\n   *\n   * @param {string} queueName\n   * @private\n   */\n  constructor(queueName) {\n    this._queueName = queueName;\n    this._db = new DBWrapper(DB_NAME, DB_VERSION, {\n      onupgradeneeded: this._upgradeDb,\n    });\n  }\n\n  /**\n   * Append an entry last in the queue.\n   *\n   * @param {Object} entry\n   * @param {Object} entry.requestData\n   * @param {number} [entry.timestamp]\n   * @param {Object} [entry.metadata]\n   * @private\n   */\n  async pushEntry(entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(entry, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'QueueStore',\n        funcName: 'pushEntry',\n        paramName: 'entry',\n      });\n      assert.isType(entry.requestData, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'QueueStore',\n        funcName: 'pushEntry',\n        paramName: 'entry.requestData',\n      });\n    }\n\n    // Don't specify an ID since one is automatically generated.\n    delete entry.id;\n    entry.queueName = this._queueName;\n\n    await this._db.add(OBJECT_STORE_NAME, entry);\n  }\n\n  /**\n   * Preppend an entry first in the queue.\n   *\n   * @param {Object} entry\n   * @param {Object} entry.requestData\n   * @param {number} [entry.timestamp]\n   * @param {Object} [entry.metadata]\n   * @private\n   */\n  async unshiftEntry(entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(entry, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'QueueStore',\n        funcName: 'unshiftEntry',\n        paramName: 'entry',\n      });\n      assert.isType(entry.requestData, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'QueueStore',\n        funcName: 'unshiftEntry',\n        paramName: 'entry.requestData',\n      });\n    }\n\n    const [firstEntry] = await this._db.getAllMatching(OBJECT_STORE_NAME, {\n      count: 1,\n    });\n\n    if (firstEntry) {\n      // Pick an ID one less than the lowest ID in the object store.\n      entry.id = firstEntry.id - 1;\n    } else {\n      // Otherwise let the auto-incrementor assign the ID.\n      delete entry.id;\n    }\n    entry.queueName = this._queueName;\n\n    await this._db.add(OBJECT_STORE_NAME, entry);\n  }\n\n  /**\n   * Removes and returns the last entry in the queue matching the `queueName`.\n   *\n   * @return {Promise<Object>}\n   * @private\n   */\n  async popEntry() {\n    return this._removeEntry({direction: 'prev'});\n  }\n\n  /**\n   * Removes and returns the first entry in the queue matching the `queueName`.\n   *\n   * @return {Promise<Object>}\n   * @private\n   */\n  async shiftEntry() {\n    return this._removeEntry({direction: 'next'});\n  }\n\n  /**\n   * Returns all entries in the store matching the `queueName`.\n   *\n   * @param {Object} options See workbox.backgroundSync.Queue~getAll}\n   * @return {Promise<Array<Object>>}\n   * @private\n   */\n  async getAll() {\n    return await this._db.getAllMatching(OBJECT_STORE_NAME, {\n      index: INDEXED_PROP,\n      query: IDBKeyRange.only(this._queueName),\n    });\n  }\n\n  /**\n   * Deletes the entry for the given ID.\n   *\n   * WARNING: this method does not ensure the deleted enry belongs to this\n   * queue (i.e. matches the `queueName`). But this limitation is acceptable\n   * as this class is not publicly exposed. An additional check would make\n   * this method slower than it needs to be.\n   *\n   * @private\n   * @param {number} id\n   */\n  async deleteEntry(id) {\n    await this._db.delete(OBJECT_STORE_NAME, id);\n  }\n\n  /**\n   * Removes and returns the first or last entry in the queue (based on the\n   * `direction` argument) matching the `queueName`.\n   *\n   * @return {Promise<Object>}\n   * @private\n   */\n  async _removeEntry({direction}) {\n    const [entry] = await this._db.getAllMatching(OBJECT_STORE_NAME, {\n      direction,\n      index: INDEXED_PROP,\n      query: IDBKeyRange.only(this._queueName),\n      count: 1,\n    });\n\n    if (entry) {\n      await this.deleteEntry(entry.id);\n      return entry;\n    }\n  }\n\n  /**\n   * Upgrades the database given an `upgradeneeded` event.\n   *\n   * @param {Event} event\n   * @private\n   */\n  _upgradeDb(event) {\n    const db = event.target.result;\n\n    if (event.oldVersion > 0 && event.oldVersion < DB_VERSION) {\n      if (db.objectStoreNames.contains(OBJECT_STORE_NAME)) {\n        db.deleteObjectStore(OBJECT_STORE_NAME);\n      }\n    }\n\n    const objStore = db.createObjectStore(OBJECT_STORE_NAME, {\n      autoIncrement: true,\n      keyPath: 'id',\n    });\n    objStore.createIndex(INDEXED_PROP, INDEXED_PROP, {unique: false});\n  }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport '../_version.mjs';\n\n\nconst serializableProperties = [\n  'method',\n  'referrer',\n  'referrerPolicy',\n  'mode',\n  'credentials',\n  'cache',\n  'redirect',\n  'integrity',\n  'keepalive',\n];\n\n\n/**\n * A class to make it easier to serialize and de-serialize requests so they\n * can be stored in IndexedDB.\n *\n * @private\n */\nclass StorableRequest {\n  /**\n   * Converts a Request object to a plain object that can be structured\n   * cloned or JSON-stringified.\n   *\n   * @param {Request} request\n   * @return {Promise<StorableRequest>}\n   *\n   * @private\n   */\n  static async fromRequest(request) {\n    const requestData = {\n      url: request.url,\n      headers: {},\n    };\n\n    // Set the body if present.\n    if (request.method !== 'GET') {\n      // Use ArrayBuffer to support non-text request bodies.\n      // NOTE: we can't use Blobs becuse Safari doesn't support storing\n      // Blobs in IndexedDB in some cases:\n      // https://github.com/dfahlander/Dexie.js/issues/618#issuecomment-398348457\n      requestData.body = await request.clone().arrayBuffer();\n    }\n\n    // Convert the headers from an iterable to an object.\n    for (const [key, value] of request.headers.entries()) {\n      requestData.headers[key] = value;\n    }\n\n    // Add all other serializable request properties\n    for (const prop of serializableProperties) {\n      if (request[prop] !== undefined) {\n        requestData[prop] = request[prop];\n      }\n    }\n\n    return new StorableRequest(requestData);\n  }\n\n  /**\n   * Accepts an object of request data that can be used to construct a\n   * `Request` but can also be stored in IndexedDB.\n   *\n   * @param {Object} requestData An object of request data that includes the\n   *     `url` plus any relevant properties of\n   *     [requestInit]{@link https://fetch.spec.whatwg.org/#requestinit}.\n   * @private\n   */\n  constructor(requestData) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(requestData, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'StorableRequest',\n        funcName: 'constructor',\n        paramName: 'requestData',\n      });\n      assert.isType(requestData.url, 'string', {\n        moduleName: 'workbox-background-sync',\n        className: 'StorableRequest',\n        funcName: 'constructor',\n        paramName: 'requestData.url',\n      });\n    }\n\n    // If the request's mode is `navigate`, convert it to `same-origin` since\n    // navigation requests can't be constructed via script.\n    if (requestData.mode === 'navigate') {\n      requestData.mode = 'same-origin';\n    }\n\n    this._requestData = requestData;\n  }\n\n  /**\n   * Returns a deep clone of the instances `_requestData` object.\n   *\n   * @return {Object}\n   *\n   * @private\n   */\n  toObject() {\n    const requestData = Object.assign({}, this._requestData);\n    requestData.headers = Object.assign({}, this._requestData.headers);\n    if (requestData.body) {\n      requestData.body = requestData.body.slice(0);\n    }\n\n    return requestData;\n  }\n\n  /**\n   * Converts this instance to a Request.\n   *\n   * @return {Request}\n   *\n   * @private\n   */\n  toRequest() {\n    return new Request(this._requestData.url, this._requestData);\n  }\n\n  /**\n   * Creates and returns a deep clone of the instance.\n   *\n   * @return {StorableRequest}\n   *\n   * @private\n   */\n  clone() {\n    return new StorableRequest(this.toObject());\n  }\n}\n\nexport {StorableRequest};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {getFriendlyURL} from 'workbox-core/_private/getFriendlyURL.mjs';\nimport {QueueStore} from './lib/QueueStore.mjs';\nimport {StorableRequest} from './lib/StorableRequest.mjs';\nimport './_version.mjs';\n\n\nconst TAG_PREFIX = 'workbox-background-sync';\nconst MAX_RETENTION_TIME = 60 * 24 * 7; // 7 days in minutes\n\nconst queueNames = new Set();\n\n/**\n * A class to manage storing failed requests in IndexedDB and retrying them\n * later. All parts of the storing and replaying process are observable via\n * callbacks.\n *\n * @memberof workbox.backgroundSync\n */\nclass Queue {\n  /**\n   * Creates an instance of Queue with the given options\n   *\n   * @param {string} name The unique name for this queue. This name must be\n   *     unique as it's used to register sync events and store requests\n   *     in IndexedDB specific to this instance. An error will be thrown if\n   *     a duplicate name is detected.\n   * @param {Object} [options]\n   * @param {Function} [options.onSync] A function that gets invoked whenever\n   *     the 'sync' event fires. The function is invoked with an object\n   *     containing the `queue` property (referencing this instance), and you\n   *     can use the callback to customize the replay behavior of the queue.\n   *     When not set the `replayRequests()` method is called.\n   *     Note: if the replay fails after a sync event, make sure you throw an\n   *     error, so the browser knows to retry the sync event later.\n   * @param {number} [options.maxRetentionTime=7 days] The amount of time (in\n   *     minutes) a request may be retried. After this amount of time has\n   *     passed, the request will be deleted from the queue.\n   */\n  constructor(name, {onSync, maxRetentionTime} = {}) {\n    // Ensure the store name is not already being used\n    if (queueNames.has(name)) {\n      throw new WorkboxError('duplicate-queue-name', {name});\n    } else {\n      queueNames.add(name);\n    }\n\n    this._name = name;\n    this._onSync = onSync || this.replayRequests;\n    this._maxRetentionTime = maxRetentionTime || MAX_RETENTION_TIME;\n    this._queueStore = new QueueStore(this._name);\n\n    this._addSyncListener();\n  }\n\n  /**\n   * @return {string}\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Stores the passed request in IndexedDB (with its timestamp and any\n   * metadata) at the end of the queue.\n   *\n   * @param {Object} entry\n   * @param {Request} entry.request The request to store in the queue.\n   * @param {Object} [entry.metadata] Any metadata you want associated with the\n   *     stored request. When requests are replayed you'll have access to this\n   *     metadata object in case you need to modify the request beforehand.\n   * @param {number} [entry.timestamp] The timestamp (Epoch time in\n   *     milliseconds) when the request was first added to the queue. This is\n   *     used along with `maxRetentionTime` to remove outdated requests. In\n   *     general you don't need to set this value, as it's automatically set\n   *     for you (defaulting to `Date.now()`), but you can update it if you\n   *     don't want particular requests to expire.\n   */\n  async pushRequest(entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(entry, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'Queue',\n        funcName: 'pushRequest',\n        paramName: 'entry',\n      });\n      assert.isInstance(entry.request, Request, {\n        moduleName: 'workbox-background-sync',\n        className: 'Queue',\n        funcName: 'pushRequest',\n        paramName: 'entry.request',\n      });\n    }\n\n    await this._addRequest(entry, 'push');\n  }\n\n  /**\n   * Stores the passed request in IndexedDB (with its timestamp and any\n   * metadata) at the beginning of the queue.\n   *\n   * @param {Object} entry\n   * @param {Request} entry.request The request to store in the queue.\n   * @param {Object} [entry.metadata] Any metadata you want associated with the\n   *     stored request. When requests are replayed you'll have access to this\n   *     metadata object in case you need to modify the request beforehand.\n   * @param {number} [entry.timestamp] The timestamp (Epoch time in\n   *     milliseconds) when the request was first added to the queue. This is\n   *     used along with `maxRetentionTime` to remove outdated requests. In\n   *     general you don't need to set this value, as it's automatically set\n   *     for you (defaulting to `Date.now()`), but you can update it if you\n   *     don't want particular requests to expire.\n   */\n  async unshiftRequest(entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(entry, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'Queue',\n        funcName: 'unshiftRequest',\n        paramName: 'entry',\n      });\n      assert.isInstance(entry.request, Request, {\n        moduleName: 'workbox-background-sync',\n        className: 'Queue',\n        funcName: 'unshiftRequest',\n        paramName: 'entry.request',\n      });\n    }\n\n    await this._addRequest(entry, 'unshift');\n  }\n\n  /**\n   * Removes and returns the last request in the queue (along with its\n   * timestamp and any metadata). The returned object takes the form:\n   * `{request, timestamp, metadata}`.\n   *\n   * @return {Promise<Object>}\n   */\n  async popRequest() {\n    return this._removeRequest('pop');\n  }\n\n  /**\n   * Removes and returns the first request in the queue (along with its\n   * timestamp and any metadata). The returned object takes the form:\n   * `{request, timestamp, metadata}`.\n   *\n   * @return {Promise<Object>}\n   */\n  async shiftRequest() {\n    return this._removeRequest('shift');\n  }\n\n  /**\n   * Returns all the entries that have not expired (per `maxRetentionTime`).\n   * Any expired entries are removed from the queue.\n   *\n   * @return {Promise<Array<Object>>}\n   */\n  async getAll() {\n    const allEntries = await this._queueStore.getAll();\n    const now = Date.now();\n\n    const unexpiredEntries = [];\n    for (const entry of allEntries) {\n      // Ignore requests older than maxRetentionTime. Call this function\n      // recursively until an unexpired request is found.\n      const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n      if (now - entry.timestamp > maxRetentionTimeInMs) {\n        await this._queueStore.deleteEntry(entry.id);\n      } else {\n        unexpiredEntries.push(convertEntry(entry));\n      }\n    }\n\n    return unexpiredEntries;\n  }\n\n\n  /**\n   * Adds the entry to the QueueStore and registers for a sync event.\n   *\n   * @param {Object} entry\n   * @param {Request} entry.request\n   * @param {Object} [entry.metadata]\n   * @param {number} [entry.timestamp=Date.now()]\n   * @param {string} operation ('push' or 'unshift')\n   * @private\n   */\n  async _addRequest(\n      {request, metadata, timestamp = Date.now()}, operation) {\n    const storableRequest = await StorableRequest.fromRequest(request.clone());\n    const entry = {\n      requestData: storableRequest.toObject(),\n      timestamp,\n    };\n\n    // Only include metadata if it's present.\n    if (metadata) {\n      entry.metadata = metadata;\n    }\n\n    await this._queueStore[`${operation}Entry`](entry);\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log(`Request for '${getFriendlyURL(request.url)}' has ` +\n          `been added to background sync queue '${this._name}'.`);\n    }\n\n    // Don't register for a sync if we're in the middle of a sync. Instead,\n    // we wait until the sync is complete and call register if\n    // `this._requestsAddedDuringSync` is true.\n    if (this._syncInProgress) {\n      this._requestsAddedDuringSync = true;\n    } else {\n      await this.registerSync();\n    }\n  }\n\n  /**\n   * Removes and returns the first or last (depending on `operation`) entry\n   * from the QueueStore that's not older than the `maxRetentionTime`.\n   *\n   * @param {string} operation ('pop' or 'shift')\n   * @return {Object|undefined}\n   * @private\n   */\n  async _removeRequest(operation) {\n    const now = Date.now();\n    const entry = await this._queueStore[`${operation}Entry`]();\n\n    if (entry) {\n      // Ignore requests older than maxRetentionTime. Call this function\n      // recursively until an unexpired request is found.\n      const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n      if (now - entry.timestamp > maxRetentionTimeInMs) {\n        return this._removeRequest(operation);\n      }\n\n      return convertEntry(entry);\n    }\n  }\n\n  /**\n   * Loops through each request in the queue and attempts to re-fetch it.\n   * If any request fails to re-fetch, it's put back in the same position in\n   * the queue (which registers a retry for the next sync event).\n   */\n  async replayRequests() {\n    let entry;\n    while (entry = await this.shiftRequest()) {\n      try {\n        await fetch(entry.request.clone());\n\n        if (process.env.NODE_ENV !== 'production') {\n          logger.log(`Request for '${getFriendlyURL(entry.request.url)}'` +\n             `has been replayed in queue '${this._name}'`);\n        }\n      } catch (error) {\n        await this.unshiftRequest(entry);\n\n        if (process.env.NODE_ENV !== 'production') {\n          logger.log(`Request for '${getFriendlyURL(entry.request.url)}'` +\n             `failed to replay, putting it back in queue '${this._name}'`);\n        }\n        throw new WorkboxError('queue-replay-failed', {name: this._name});\n      }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log(`All requests in queue '${this.name}' have successfully ` +\n          `replayed; the queue is now empty!`);\n    }\n  }\n\n  /**\n   * Registers a sync event with a tag unique to this instance.\n   */\n  async registerSync() {\n    if ('sync' in registration) {\n      try {\n        await registration.sync.register(`${TAG_PREFIX}:${this._name}`);\n      } catch (err) {\n        // This means the registration failed for some reason, possibly due to\n        // the user disabling it.\n        if (process.env.NODE_ENV !== 'production') {\n          logger.warn(\n              `Unable to register sync event for '${this._name}'.`, err);\n        }\n      }\n    }\n  }\n\n  /**\n   * In sync-supporting browsers, this adds a listener for the sync event.\n   * In non-sync-supporting browsers, this will retry the queue on service\n   * worker startup.\n   *\n   * @private\n   */\n  _addSyncListener() {\n    if ('sync' in registration) {\n      self.addEventListener('sync', (event) => {\n        if (event.tag === `${TAG_PREFIX}:${this._name}`) {\n          if (process.env.NODE_ENV !== 'production') {\n            logger.log(`Background sync for tag '${event.tag}'` +\n                `has been received`);\n          }\n\n          const syncComplete = async () => {\n            this._syncInProgress = true;\n\n            let syncError;\n            try {\n              await this._onSync({queue: this});\n            } catch (error) {\n              syncError = error;\n\n              // Rethrow the error. Note: the logic in the finally clause\n              // will run before this gets rethrown.\n              throw syncError;\n            } finally {\n              // New items may have been added to the queue during the sync,\n              // so we need to register for a new sync if that's happened...\n              // Unless there was an error during the sync, in which\n              // case the browser will automatically retry later, as long\n              // as `event.lastChance` is not true.\n              if (this._requestsAddedDuringSync &&\n                  !(syncError && !event.lastChance)) {\n                await this.registerSync();\n              }\n\n              this._syncInProgress = false;\n              this._requestsAddedDuringSync = false;\n            }\n          };\n          event.waitUntil(syncComplete());\n        }\n      });\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.log(`Background sync replaying without background sync event`);\n      }\n      // If the browser doesn't support background sync, retry\n      // every time the service worker starts up as a fallback.\n      this._onSync({queue: this});\n    }\n  }\n\n  /**\n   * Returns the set of queue names. This is primarily used to reset the list\n   * of queue names in tests.\n   *\n   * @return {Set}\n   *\n   * @private\n   */\n  static get _queueNames() {\n    return queueNames;\n  }\n}\n\n\n/**\n * Converts a QueueStore entry into the format exposed by Queue. This entails\n * converting the request data into a real request and omitting the `id` and\n * `queueName` properties.\n *\n * @param {Object} queueStoreEntry\n * @return {Object}\n * @private\n */\nconst convertEntry = (queueStoreEntry) => {\n  const queueEntry = {\n    request: new StorableRequest(queueStoreEntry.requestData).toRequest(),\n    timestamp: queueStoreEntry.timestamp,\n  };\n  if (queueStoreEntry.metadata) {\n    queueEntry.metadata = queueStoreEntry.metadata;\n  }\n  return queueEntry;\n};\n\nexport {Queue};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {Queue} from './Queue.mjs';\nimport './_version.mjs';\n\n/**\n * A class implementing the `fetchDidFail` lifecycle callback. This makes it\n * easier to add failed requests to a background sync Queue.\n *\n * @memberof workbox.backgroundSync\n */\nclass Plugin {\n  /**\n   * @param {...*} queueArgs Args to forward to the composed Queue instance.\n   *    See the [Queue]{@link workbox.backgroundSync.Queue} documentation for\n   *    parameter details.\n   */\n  constructor(...queueArgs) {\n    this._queue = new Queue(...queueArgs);\n    this.fetchDidFail = this.fetchDidFail.bind(this);\n  }\n\n  /**\n   * @param {Object} options\n   * @param {Request} options.request\n   * @private\n   */\n  async fetchDidFail({request}) {\n    await this._queue.pushRequest({request});\n  }\n}\n\nexport {Plugin};\n"]},"metadata":{},"sourceType":"script"}