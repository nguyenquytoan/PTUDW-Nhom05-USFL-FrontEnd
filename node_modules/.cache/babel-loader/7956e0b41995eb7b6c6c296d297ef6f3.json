{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst which = require('which');\n\nconst pathKey = require('path-key')();\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n  const cwd = process.cwd();\n  const hasCustomCwd = parsed.options.cwd != null; // Worker threads do not have process.chdir()\n\n  const shouldSwitchCwd = hasCustomCwd && process.chdir !== undefined; // If a custom `cwd` was specified, we need to change the process cwd\n  // because `which` will do stat calls but does not support a custom cwd\n\n  if (shouldSwitchCwd) {\n    try {\n      process.chdir(parsed.options.cwd);\n    } catch (err) {\n      /* Empty */\n    }\n  }\n\n  let resolved;\n\n  try {\n    resolved = which.sync(parsed.command, {\n      path: (parsed.options.env || process.env)[pathKey],\n      pathExt: withoutPathExt ? path.delimiter : undefined\n    });\n  } catch (e) {\n    /* Empty */\n  } finally {\n    if (shouldSwitchCwd) {\n      process.chdir(cwd);\n    }\n  } // If we successfully resolved, ensure that an absolute path is returned\n  // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it\n\n\n  if (resolved) {\n    resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);\n  }\n\n  return resolved;\n}\n\nfunction resolveCommand(parsed) {\n  return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);\n}\n\nmodule.exports = resolveCommand;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/react-dev-utils/node_modules/cross-spawn/lib/util/resolveCommand.js"],"names":["path","require","which","pathKey","resolveCommandAttempt","parsed","withoutPathExt","cwd","process","hasCustomCwd","options","shouldSwitchCwd","chdir","undefined","err","resolved","sync","command","env","pathExt","delimiter","e","resolve","resolveCommand","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAP,EAAhB;;AAEA,SAASG,qBAAT,CAA+BC,MAA/B,EAAuCC,cAAvC,EAAuD;AACnD,QAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,EAAZ;AACA,QAAME,YAAY,GAAGJ,MAAM,CAACK,OAAP,CAAeH,GAAf,IAAsB,IAA3C,CAFmD,CAGnD;;AACA,QAAMI,eAAe,GAAGF,YAAY,IAAID,OAAO,CAACI,KAAR,KAAkBC,SAA1D,CAJmD,CAMnD;AACA;;AACA,MAAIF,eAAJ,EAAqB;AACjB,QAAI;AACAH,MAAAA,OAAO,CAACI,KAAR,CAAcP,MAAM,CAACK,OAAP,CAAeH,GAA7B;AACH,KAFD,CAEE,OAAOO,GAAP,EAAY;AACV;AACH;AACJ;;AAED,MAAIC,QAAJ;;AAEA,MAAI;AACAA,IAAAA,QAAQ,GAAGb,KAAK,CAACc,IAAN,CAAWX,MAAM,CAACY,OAAlB,EAA2B;AAClCjB,MAAAA,IAAI,EAAE,CAACK,MAAM,CAACK,OAAP,CAAeQ,GAAf,IAAsBV,OAAO,CAACU,GAA/B,EAAoCf,OAApC,CAD4B;AAElCgB,MAAAA,OAAO,EAAEb,cAAc,GAAGN,IAAI,CAACoB,SAAR,GAAoBP;AAFT,KAA3B,CAAX;AAIH,GALD,CAKE,OAAOQ,CAAP,EAAU;AACR;AACH,GAPD,SAOU;AACN,QAAIV,eAAJ,EAAqB;AACjBH,MAAAA,OAAO,CAACI,KAAR,CAAcL,GAAd;AACH;AACJ,GA7BkD,CA+BnD;AACA;;;AACA,MAAIQ,QAAJ,EAAc;AACVA,IAAAA,QAAQ,GAAGf,IAAI,CAACsB,OAAL,CAAab,YAAY,GAAGJ,MAAM,CAACK,OAAP,CAAeH,GAAlB,GAAwB,EAAjD,EAAqDQ,QAArD,CAAX;AACH;;AAED,SAAOA,QAAP;AACH;;AAED,SAASQ,cAAT,CAAwBlB,MAAxB,EAAgC;AAC5B,SAAOD,qBAAqB,CAACC,MAAD,CAArB,IAAiCD,qBAAqB,CAACC,MAAD,EAAS,IAAT,CAA7D;AACH;;AAEDmB,MAAM,CAACC,OAAP,GAAiBF,cAAjB","sourcesContent":["'use strict';\n\nconst path = require('path');\nconst which = require('which');\nconst pathKey = require('path-key')();\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n    const cwd = process.cwd();\n    const hasCustomCwd = parsed.options.cwd != null;\n    // Worker threads do not have process.chdir()\n    const shouldSwitchCwd = hasCustomCwd && process.chdir !== undefined;\n\n    // If a custom `cwd` was specified, we need to change the process cwd\n    // because `which` will do stat calls but does not support a custom cwd\n    if (shouldSwitchCwd) {\n        try {\n            process.chdir(parsed.options.cwd);\n        } catch (err) {\n            /* Empty */\n        }\n    }\n\n    let resolved;\n\n    try {\n        resolved = which.sync(parsed.command, {\n            path: (parsed.options.env || process.env)[pathKey],\n            pathExt: withoutPathExt ? path.delimiter : undefined,\n        });\n    } catch (e) {\n        /* Empty */\n    } finally {\n        if (shouldSwitchCwd) {\n            process.chdir(cwd);\n        }\n    }\n\n    // If we successfully resolved, ensure that an absolute path is returned\n    // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it\n    if (resolved) {\n        resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);\n    }\n\n    return resolved;\n}\n\nfunction resolveCommand(parsed) {\n    return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);\n}\n\nmodule.exports = resolveCommand;\n"]},"metadata":{},"sourceType":"script"}