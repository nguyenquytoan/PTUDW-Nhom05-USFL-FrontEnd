{"ast":null,"code":"/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nvar path = require('path'),\n    convert = require('convert-source-map'),\n    rework = require('rework'),\n    visit = require('rework-visit');\n\nvar fileProtocol = require('../file-protocol');\n/**\n * Process the given CSS content into reworked CSS content.\n *\n * @param {string} sourceFile The absolute path of the file being processed\n * @param {string} sourceContent CSS content without source-map\n * @param {{outputSourceMap: boolean, transformDeclaration:function, absSourceMap:object,\n *        sourceMapConsumer:object}} params Named parameters\n * @return {{content: string, map: object}} Reworked CSS and optional source-map\n */\n\n\nfunction process(sourceFile, sourceContent, params) {\n  // embed source-map in css\n  //  prepend file protocol to all sources to avoid problems with source map\n  var contentWithMap = sourceContent + (params.absSourceMap ? convert.fromObject(fileProtocol.prepend(params.absSourceMap)).toComment({\n    multiline: true\n  }) : ''); // need to prepend file protocol to source as well to avoid problems with source map\n\n  var reworked = rework(contentWithMap, {\n    source: fileProtocol.prepend(sourceFile)\n  }).use(reworkPlugin).toString({\n    sourcemap: params.outputSourceMap,\n    sourcemapAsObject: params.outputSourceMap\n  }); // complete with source-map\n\n  if (params.outputSourceMap) {\n    return {\n      content: reworked.code,\n      map: fileProtocol.remove(reworked.map)\n    };\n  } // complete without source-map\n  else {\n      return {\n        content: reworked,\n        map: null\n      };\n    }\n  /**\n   * Plugin for css rework that follows SASS transpilation.\n   *\n   * @param {object} stylesheet AST for the CSS output from SASS\n   */\n\n\n  function reworkPlugin(stylesheet) {\n    // visit each node (selector) in the stylesheet recursively using the official utility method\n    //  each node may have multiple declarations\n    visit(stylesheet, function visitor(declarations) {\n      if (declarations) {\n        declarations.forEach(eachDeclaration);\n      }\n    });\n    /**\n     * Process a declaration from the syntax tree.\n     * @param declaration\n     */\n\n    function eachDeclaration(declaration) {\n      var isValid = declaration.value && declaration.value.indexOf('url') >= 0;\n\n      if (isValid) {\n        // reverse the original source-map to find the original source file before transpilation\n        var startPosApparent = declaration.position.start,\n            startPosOriginal = params.sourceMapConsumer && params.sourceMapConsumer.originalPositionFor(startPosApparent); // we require a valid directory for the specified file\n\n        var directory = startPosOriginal && startPosOriginal.source && fileProtocol.remove(path.dirname(startPosOriginal.source));\n\n        if (directory) {\n          declaration.value = params.transformDeclaration(declaration.value, directory);\n        } // source-map present but invalid entry\n        else if (params.sourceMapConsumer) {\n            throw new Error('source-map information is not available at url() declaration');\n          }\n      }\n    }\n  }\n}\n\nmodule.exports = process;","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/resolve-url-loader/lib/engine/rework.js"],"names":["path","require","convert","rework","visit","fileProtocol","process","sourceFile","sourceContent","params","contentWithMap","absSourceMap","fromObject","prepend","toComment","multiline","reworked","source","use","reworkPlugin","toString","sourcemap","outputSourceMap","sourcemapAsObject","content","code","map","remove","stylesheet","visitor","declarations","forEach","eachDeclaration","declaration","isValid","value","indexOf","startPosApparent","position","start","startPosOriginal","sourceMapConsumer","originalPositionFor","directory","dirname","transformDeclaration","Error","module","exports"],"mappings":"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","sourcesContent":["/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nvar path    = require('path'),\n    convert = require('convert-source-map'),\n    rework  = require('rework'),\n    visit   = require('rework-visit');\n\nvar fileProtocol = require('../file-protocol');\n\n/**\n * Process the given CSS content into reworked CSS content.\n *\n * @param {string} sourceFile The absolute path of the file being processed\n * @param {string} sourceContent CSS content without source-map\n * @param {{outputSourceMap: boolean, transformDeclaration:function, absSourceMap:object,\n *        sourceMapConsumer:object}} params Named parameters\n * @return {{content: string, map: object}} Reworked CSS and optional source-map\n */\nfunction process(sourceFile, sourceContent, params) {\n\n  // embed source-map in css\n  //  prepend file protocol to all sources to avoid problems with source map\n  var contentWithMap = sourceContent + (\n    params.absSourceMap ?\n      convert.fromObject(fileProtocol.prepend(params.absSourceMap)).toComment({multiline: true}) :\n      ''\n  );\n\n  // need to prepend file protocol to source as well to avoid problems with source map\n  var reworked = rework(contentWithMap, {source: fileProtocol.prepend(sourceFile)})\n    .use(reworkPlugin)\n    .toString({\n      sourcemap        : params.outputSourceMap,\n      sourcemapAsObject: params.outputSourceMap\n    });\n\n  // complete with source-map\n  if (params.outputSourceMap) {\n    return {\n      content: reworked.code,\n      map    : fileProtocol.remove(reworked.map)\n    };\n  }\n  // complete without source-map\n  else {\n    return {\n      content: reworked,\n      map    : null\n    };\n  }\n\n  /**\n   * Plugin for css rework that follows SASS transpilation.\n   *\n   * @param {object} stylesheet AST for the CSS output from SASS\n   */\n  function reworkPlugin(stylesheet) {\n\n    // visit each node (selector) in the stylesheet recursively using the official utility method\n    //  each node may have multiple declarations\n    visit(stylesheet, function visitor(declarations) {\n      if (declarations) {\n        declarations.forEach(eachDeclaration);\n      }\n    });\n\n    /**\n     * Process a declaration from the syntax tree.\n     * @param declaration\n     */\n    function eachDeclaration(declaration) {\n      var isValid = declaration.value && (declaration.value.indexOf('url') >= 0);\n      if (isValid) {\n\n        // reverse the original source-map to find the original source file before transpilation\n        var startPosApparent = declaration.position.start,\n            startPosOriginal = params.sourceMapConsumer &&\n              params.sourceMapConsumer.originalPositionFor(startPosApparent);\n\n        // we require a valid directory for the specified file\n        var directory =\n          startPosOriginal &&\n          startPosOriginal.source &&\n          fileProtocol.remove(path.dirname(startPosOriginal.source));\n        if (directory) {\n          declaration.value = params.transformDeclaration(declaration.value, directory);\n        }\n        // source-map present but invalid entry\n        else if (params.sourceMapConsumer) {\n          throw new Error('source-map information is not available at url() declaration');\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = process;\n"]},"metadata":{},"sourceType":"script"}