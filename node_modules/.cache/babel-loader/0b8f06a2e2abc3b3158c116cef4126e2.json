{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Observable,_Subscription,_SubscriptionLoggable,_util_applyMixins PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\nvar ColdObservable = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ColdObservable, _super);\n\n  function ColdObservable(messages, scheduler) {\n    var _this = _super.call(this, function (subscriber) {\n      var observable = this;\n      var index = observable.logSubscribedFrame();\n      var subscription = new Subscription();\n      subscription.add(new Subscription(function () {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscription;\n    }) || this;\n\n    _this.messages = messages;\n    _this.subscriptions = [];\n    _this.scheduler = scheduler;\n    return _this;\n  }\n\n  ColdObservable.prototype.scheduleMessages = function (subscriber) {\n    var messagesLength = this.messages.length;\n\n    for (var i = 0; i < messagesLength; i++) {\n      var message = this.messages[i];\n      subscriber.add(this.scheduler.schedule(function (_a) {\n        var message = _a.message,\n            subscriber = _a.subscriber;\n        message.notification.observe(subscriber);\n      }, message.frame, {\n        message: message,\n        subscriber: subscriber\n      }));\n    }\n  };\n\n  return ColdObservable;\n}(Observable);\n\nexport { ColdObservable };\n/*@__PURE__*/\n\napplyMixins(ColdObservable, [SubscriptionLoggable]);","map":{"version":3,"sources":["../../../src/internal/testing/ColdObservable.ts"],"names":[],"mappings":";AAAA,OAAO,KAAE,OAAT,MAAqB,OAArB;AACA,SAAS,UAAT,QAAuB,eAAvB;AAIA,SAAS,YAAT,QAA6B,iBAA7B;AACA,SAAS,oBAAT,QAA4B,wBAA5B;AAQA,SAAA,WAAA,QAAA,qBAAA;;IAAuC,cAAA,GAAA,aAAA,UAAa,MAAb,EAAa;AAMlD,EAAA,OAAA,CAAA,SAAA,CAAA,cAAA,EACY,MADZ;;AAAA,WAAA,cAAA,CAEE,QAFF,EAEQ,SAFR,EAEuC;QACnC,KAAM,GAAA,MAAU,CAAA,IAAV,CAAgC,IAAhC,EAA4C,UAAA,UAAA,EAAA;AAClD,UAAM,UAAQ,GAAA,IAAd;AACA,UAAM,KAAA,GAAA,UAAe,CAAI,kBAAnB,EAAN;AACA,UAAA,YAAgB,GAAC,IAAI,YAAJ,EAAjB;AACE,MAAA,YAAA,CAAA,GAAA,CAAW,IAAA,YAAA,CAAA,YAA4B;AACrC,QAAA,UAAA,CAAA,oBAAA,CAAA,KAAA;AACJ,OAFa,CAAX;AAGF,MAAA,UAAO,CAAA,gBAAP,CAAoB,UAApB;AACA,aAEH,YAFG;AAXe,KAGT,KAHS,I;;AALZ,IAAA,KAAA,CAAA,QAAA,GAAA,QAAA;AAiBL,IAAA,KAAI,CAAC,aAAL,GAAiB,EAAjB;;AACD,WAAA,KAAA;AAED;;AACE,EAAA,cAAM,CAAA,SAAN,CAAuB,gBAAvB,GAAqC,UAAO,UAAP,EAAO;AAC5C,QAAA,cAAiB,GAAG,KAAA,QAAA,CAAc,MAAlC;;AACE,SAAA,IAAM,CAAA,GAAA,CAAN,EAAa,CAAA,GAAG,cAAhB,EAAiC,CAAA,EAAjC,EAAiC;AACjC,UAAA,OAAW,GAAG,KACR,QADQ,CACP,CADO,CAAd;AAC6B,MAAA,UAAA,CAAA,GAAA,CAAA,KAAA,SAAA,CAAS,QAAT,CAAS,UAAA,EAAA,EAAA;AAAmB,YAAA,OAAQ,GAAA,EAAA,CAAA,OAAR;AAAA,YAAqB,UAAQ,GAAU,EAAE,CAAA,UAAzC;AACrD,QAAA,OAAQ,CAAA,YAAR,CACE,OADF,CACS,UADT;AAGL,OAJ8B,EAI9B,OAAA,CAAA,KAJ8B,EAI9B;AAAA,QAAA,OAAA,EAAA,OAAA;AAAA,QAAA,UAAA,EAAA;AAAA,OAJ8B,CAAA;AAKhC;AACH,GAVI;;AAtBmC,SAAA,cAAA;CAAA,C,UAAA,C;;AAiCvC,SAAA,cAAA","sourcesContent":["/** PURE_IMPORTS_START tslib,_Observable,_Subscription,_SubscriptionLoggable,_util_applyMixins PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nvar ColdObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ColdObservable, _super);\n    function ColdObservable(messages, scheduler) {\n        var _this = _super.call(this, function (subscriber) {\n            var observable = this;\n            var index = observable.logSubscribedFrame();\n            var subscription = new Subscription();\n            subscription.add(new Subscription(function () {\n                observable.logUnsubscribedFrame(index);\n            }));\n            observable.scheduleMessages(subscriber);\n            return subscription;\n        }) || this;\n        _this.messages = messages;\n        _this.subscriptions = [];\n        _this.scheduler = scheduler;\n        return _this;\n    }\n    ColdObservable.prototype.scheduleMessages = function (subscriber) {\n        var messagesLength = this.messages.length;\n        for (var i = 0; i < messagesLength; i++) {\n            var message = this.messages[i];\n            subscriber.add(this.scheduler.schedule(function (_a) {\n                var message = _a.message, subscriber = _a.subscriber;\n                message.notification.observe(subscriber);\n            }, message.frame, { message: message, subscriber: subscriber }));\n        }\n    };\n    return ColdObservable;\n}(Observable));\nexport { ColdObservable };\n/*@__PURE__*/ applyMixins(ColdObservable, [SubscriptionLoggable]);\n//# sourceMappingURL=ColdObservable.js.map\n"]},"metadata":{},"sourceType":"module"}