{"ast":null,"code":"/**\n * @fileoverview Rule to disalow whitespace that is not a tab or space, whitespace inside strings and comments are allowed\n * @author Jonathan Kingston\n * @author Christophe Porteneuve\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\n\nconst ALL_IRREGULARS = /[\\f\\v\\u0085\\ufeff\\u00a0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u202f\\u205f\\u3000\\u2028\\u2029]/u;\nconst IRREGULAR_WHITESPACE = /[\\f\\v\\u0085\\ufeff\\u00a0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u202f\\u205f\\u3000]+/mgu;\nconst IRREGULAR_LINE_TERMINATORS = /[\\u2028\\u2029]/mgu;\nconst LINE_BREAK = astUtils.createGlobalLinebreakMatcher(); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow irregular whitespace\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-irregular-whitespace\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        skipComments: {\n          type: \"boolean\",\n          default: false\n        },\n        skipStrings: {\n          type: \"boolean\",\n          default: true\n        },\n        skipTemplates: {\n          type: \"boolean\",\n          default: false\n        },\n        skipRegExps: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n\n  create(context) {\n    // Module store of errors that we have found\n    let errors = []; // Lookup the `skipComments` option, which defaults to `false`.\n\n    const options = context.options[0] || {};\n    const skipComments = !!options.skipComments;\n    const skipStrings = options.skipStrings !== false;\n    const skipRegExps = !!options.skipRegExps;\n    const skipTemplates = !!options.skipTemplates;\n    const sourceCode = context.getSourceCode();\n    const commentNodes = sourceCode.getAllComments();\n    /**\n     * Removes errors that occur inside a string node\n     * @param {ASTNode} node to check for matching errors.\n     * @returns {void}\n     * @private\n     */\n\n    function removeWhitespaceError(node) {\n      const locStart = node.loc.start;\n      const locEnd = node.loc.end;\n      errors = errors.filter(({\n        loc: errorLoc\n      }) => {\n        if (errorLoc.line >= locStart.line && errorLoc.line <= locEnd.line) {\n          if (errorLoc.column >= locStart.column && (errorLoc.column <= locEnd.column || errorLoc.line < locEnd.line)) {\n            return false;\n          }\n        }\n\n        return true;\n      });\n    }\n    /**\n     * Checks identifier or literal nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors\n     * @param {ASTNode} node to check for matching errors.\n     * @returns {void}\n     * @private\n     */\n\n\n    function removeInvalidNodeErrorsInIdentifierOrLiteral(node) {\n      const shouldCheckStrings = skipStrings && typeof node.value === \"string\";\n      const shouldCheckRegExps = skipRegExps && Boolean(node.regex);\n\n      if (shouldCheckStrings || shouldCheckRegExps) {\n        // If we have irregular characters remove them from the errors list\n        if (ALL_IRREGULARS.test(node.raw)) {\n          removeWhitespaceError(node);\n        }\n      }\n    }\n    /**\n     * Checks template string literal nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors\n     * @param {ASTNode} node to check for matching errors.\n     * @returns {void}\n     * @private\n     */\n\n\n    function removeInvalidNodeErrorsInTemplateLiteral(node) {\n      if (typeof node.value.raw === \"string\") {\n        if (ALL_IRREGULARS.test(node.value.raw)) {\n          removeWhitespaceError(node);\n        }\n      }\n    }\n    /**\n     * Checks comment nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors\n     * @param {ASTNode} node to check for matching errors.\n     * @returns {void}\n     * @private\n     */\n\n\n    function removeInvalidNodeErrorsInComment(node) {\n      if (ALL_IRREGULARS.test(node.value)) {\n        removeWhitespaceError(node);\n      }\n    }\n    /**\n     * Checks the program source for irregular whitespace\n     * @param {ASTNode} node The program node\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkForIrregularWhitespace(node) {\n      const sourceLines = sourceCode.lines;\n      sourceLines.forEach((sourceLine, lineIndex) => {\n        const lineNumber = lineIndex + 1;\n        let match;\n\n        while ((match = IRREGULAR_WHITESPACE.exec(sourceLine)) !== null) {\n          const location = {\n            line: lineNumber,\n            column: match.index\n          };\n          errors.push({\n            node,\n            message: \"Irregular whitespace not allowed.\",\n            loc: location\n          });\n        }\n      });\n    }\n    /**\n     * Checks the program source for irregular line terminators\n     * @param {ASTNode} node The program node\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkForIrregularLineTerminators(node) {\n      const source = sourceCode.getText(),\n            sourceLines = sourceCode.lines,\n            linebreaks = source.match(LINE_BREAK);\n      let lastLineIndex = -1,\n          match;\n\n      while ((match = IRREGULAR_LINE_TERMINATORS.exec(source)) !== null) {\n        const lineIndex = linebreaks.indexOf(match[0], lastLineIndex + 1) || 0;\n        const location = {\n          line: lineIndex + 1,\n          column: sourceLines[lineIndex].length\n        };\n        errors.push({\n          node,\n          message: \"Irregular whitespace not allowed.\",\n          loc: location\n        });\n        lastLineIndex = lineIndex;\n      }\n    }\n    /**\n     * A no-op function to act as placeholder for comment accumulation when the `skipComments` option is `false`.\n     * @returns {void}\n     * @private\n     */\n\n\n    function noop() {}\n\n    const nodes = {};\n\n    if (ALL_IRREGULARS.test(sourceCode.getText())) {\n      nodes.Program = function (node) {\n        /*\n         * As we can easily fire warnings for all white space issues with\n         * all the source its simpler to fire them here.\n         * This means we can check all the application code without having\n         * to worry about issues caused in the parser tokens.\n         * When writing this code also evaluating per node was missing out\n         * connecting tokens in some cases.\n         * We can later filter the errors when they are found to be not an\n         * issue in nodes we don't care about.\n         */\n        checkForIrregularWhitespace(node);\n        checkForIrregularLineTerminators(node);\n      };\n\n      nodes.Identifier = removeInvalidNodeErrorsInIdentifierOrLiteral;\n      nodes.Literal = removeInvalidNodeErrorsInIdentifierOrLiteral;\n      nodes.TemplateElement = skipTemplates ? removeInvalidNodeErrorsInTemplateLiteral : noop;\n\n      nodes[\"Program:exit\"] = function () {\n        if (skipComments) {\n          // First strip errors occurring in comment nodes.\n          commentNodes.forEach(removeInvalidNodeErrorsInComment);\n        } // If we have any errors remaining report on them\n\n\n        errors.forEach(error => context.report(error));\n      };\n    } else {\n      nodes.Program = noop;\n    }\n\n    return nodes;\n  }\n\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/eslint/lib/rules/no-irregular-whitespace.js"],"names":["astUtils","require","ALL_IRREGULARS","IRREGULAR_WHITESPACE","IRREGULAR_LINE_TERMINATORS","LINE_BREAK","createGlobalLinebreakMatcher","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","skipComments","default","skipStrings","skipTemplates","skipRegExps","additionalProperties","create","context","errors","options","sourceCode","getSourceCode","commentNodes","getAllComments","removeWhitespaceError","node","locStart","loc","start","locEnd","end","filter","errorLoc","line","column","removeInvalidNodeErrorsInIdentifierOrLiteral","shouldCheckStrings","value","shouldCheckRegExps","Boolean","regex","test","raw","removeInvalidNodeErrorsInTemplateLiteral","removeInvalidNodeErrorsInComment","checkForIrregularWhitespace","sourceLines","lines","forEach","sourceLine","lineIndex","lineNumber","match","exec","location","index","push","message","checkForIrregularLineTerminators","source","getText","linebreaks","lastLineIndex","indexOf","length","noop","nodes","Program","Identifier","Literal","TemplateElement","error","report"],"mappings":"AAAA;;;;;AAMA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEA,MAAMC,cAAc,GAAG,6IAAvB;AACA,MAAMC,oBAAoB,GAAG,oIAA7B;AACA,MAAMC,0BAA0B,GAAG,mBAAnC;AACA,MAAMC,UAAU,GAAGL,QAAQ,CAACM,4BAAT,EAAnB,C,CAEA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,SADJ;AAGFC,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,+BADX;AAEFC,MAAAA,QAAQ,EAAE,iBAFR;AAGFC,MAAAA,WAAW,EAAE,IAHX;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAHJ;AAUFC,IAAAA,MAAM,EAAE,CACJ;AACIN,MAAAA,IAAI,EAAE,QADV;AAEIO,MAAAA,UAAU,EAAE;AACRC,QAAAA,YAAY,EAAE;AACVR,UAAAA,IAAI,EAAE,SADI;AAEVS,UAAAA,OAAO,EAAE;AAFC,SADN;AAKRC,QAAAA,WAAW,EAAE;AACTV,UAAAA,IAAI,EAAE,SADG;AAETS,UAAAA,OAAO,EAAE;AAFA,SALL;AASRE,QAAAA,aAAa,EAAE;AACXX,UAAAA,IAAI,EAAE,SADK;AAEXS,UAAAA,OAAO,EAAE;AAFE,SATP;AAaRG,QAAAA,WAAW,EAAE;AACTZ,UAAAA,IAAI,EAAE,SADG;AAETS,UAAAA,OAAO,EAAE;AAFA;AAbL,OAFhB;AAoBII,MAAAA,oBAAoB,EAAE;AApB1B,KADI;AAVN,GADO;;AAqCbC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAEZ;AACA,QAAIC,MAAM,GAAG,EAAb,CAHY,CAKZ;;AACA,UAAMC,OAAO,GAAGF,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,EAAtC;AACA,UAAMT,YAAY,GAAG,CAAC,CAACS,OAAO,CAACT,YAA/B;AACA,UAAME,WAAW,GAAGO,OAAO,CAACP,WAAR,KAAwB,KAA5C;AACA,UAAME,WAAW,GAAG,CAAC,CAACK,OAAO,CAACL,WAA9B;AACA,UAAMD,aAAa,GAAG,CAAC,CAACM,OAAO,CAACN,aAAhC;AAEA,UAAMO,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB;AACA,UAAMC,YAAY,GAAGF,UAAU,CAACG,cAAX,EAArB;AAEA;;;;;;;AAMA,aAASC,qBAAT,CAA+BC,IAA/B,EAAqC;AACjC,YAAMC,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAASC,KAA1B;AACA,YAAMC,MAAM,GAAGJ,IAAI,CAACE,GAAL,CAASG,GAAxB;AAEAZ,MAAAA,MAAM,GAAGA,MAAM,CAACa,MAAP,CAAc,CAAC;AAAEJ,QAAAA,GAAG,EAAEK;AAAP,OAAD,KAAuB;AAC1C,YAAIA,QAAQ,CAACC,IAAT,IAAiBP,QAAQ,CAACO,IAA1B,IAAkCD,QAAQ,CAACC,IAAT,IAAiBJ,MAAM,CAACI,IAA9D,EAAoE;AAChE,cAAID,QAAQ,CAACE,MAAT,IAAmBR,QAAQ,CAACQ,MAA5B,KAAuCF,QAAQ,CAACE,MAAT,IAAmBL,MAAM,CAACK,MAA1B,IAAoCF,QAAQ,CAACC,IAAT,GAAgBJ,MAAM,CAACI,IAAlG,CAAJ,EAA6G;AACzG,mBAAO,KAAP;AACH;AACJ;;AACD,eAAO,IAAP;AACH,OAPQ,CAAT;AAQH;AAED;;;;;;;;AAMA,aAASE,4CAAT,CAAsDV,IAAtD,EAA4D;AACxD,YAAMW,kBAAkB,GAAGxB,WAAW,IAAK,OAAOa,IAAI,CAACY,KAAZ,KAAsB,QAAjE;AACA,YAAMC,kBAAkB,GAAGxB,WAAW,IAAIyB,OAAO,CAACd,IAAI,CAACe,KAAN,CAAjD;;AAEA,UAAIJ,kBAAkB,IAAIE,kBAA1B,EAA8C;AAE1C;AACA,YAAI5C,cAAc,CAAC+C,IAAf,CAAoBhB,IAAI,CAACiB,GAAzB,CAAJ,EAAmC;AAC/BlB,UAAAA,qBAAqB,CAACC,IAAD,CAArB;AACH;AACJ;AACJ;AAED;;;;;;;;AAMA,aAASkB,wCAAT,CAAkDlB,IAAlD,EAAwD;AACpD,UAAI,OAAOA,IAAI,CAACY,KAAL,CAAWK,GAAlB,KAA0B,QAA9B,EAAwC;AACpC,YAAIhD,cAAc,CAAC+C,IAAf,CAAoBhB,IAAI,CAACY,KAAL,CAAWK,GAA/B,CAAJ,EAAyC;AACrClB,UAAAA,qBAAqB,CAACC,IAAD,CAArB;AACH;AACJ;AACJ;AAED;;;;;;;;AAMA,aAASmB,gCAAT,CAA0CnB,IAA1C,EAAgD;AAC5C,UAAI/B,cAAc,CAAC+C,IAAf,CAAoBhB,IAAI,CAACY,KAAzB,CAAJ,EAAqC;AACjCb,QAAAA,qBAAqB,CAACC,IAAD,CAArB;AACH;AACJ;AAED;;;;;;;;AAMA,aAASoB,2BAAT,CAAqCpB,IAArC,EAA2C;AACvC,YAAMqB,WAAW,GAAG1B,UAAU,CAAC2B,KAA/B;AAEAD,MAAAA,WAAW,CAACE,OAAZ,CAAoB,CAACC,UAAD,EAAaC,SAAb,KAA2B;AAC3C,cAAMC,UAAU,GAAGD,SAAS,GAAG,CAA/B;AACA,YAAIE,KAAJ;;AAEA,eAAO,CAACA,KAAK,GAAGzD,oBAAoB,CAAC0D,IAArB,CAA0BJ,UAA1B,CAAT,MAAoD,IAA3D,EAAiE;AAC7D,gBAAMK,QAAQ,GAAG;AACbrB,YAAAA,IAAI,EAAEkB,UADO;AAEbjB,YAAAA,MAAM,EAAEkB,KAAK,CAACG;AAFD,WAAjB;AAKArC,UAAAA,MAAM,CAACsC,IAAP,CAAY;AAAE/B,YAAAA,IAAF;AAAQgC,YAAAA,OAAO,EAAE,mCAAjB;AAAsD9B,YAAAA,GAAG,EAAE2B;AAA3D,WAAZ;AACH;AACJ,OAZD;AAaH;AAED;;;;;;;;AAMA,aAASI,gCAAT,CAA0CjC,IAA1C,EAAgD;AAC5C,YAAMkC,MAAM,GAAGvC,UAAU,CAACwC,OAAX,EAAf;AAAA,YACId,WAAW,GAAG1B,UAAU,CAAC2B,KAD7B;AAAA,YAEIc,UAAU,GAAGF,MAAM,CAACP,KAAP,CAAavD,UAAb,CAFjB;AAGA,UAAIiE,aAAa,GAAG,CAAC,CAArB;AAAA,UACIV,KADJ;;AAGA,aAAO,CAACA,KAAK,GAAGxD,0BAA0B,CAACyD,IAA3B,CAAgCM,MAAhC,CAAT,MAAsD,IAA7D,EAAmE;AAC/D,cAAMT,SAAS,GAAGW,UAAU,CAACE,OAAX,CAAmBX,KAAK,CAAC,CAAD,CAAxB,EAA6BU,aAAa,GAAG,CAA7C,KAAmD,CAArE;AACA,cAAMR,QAAQ,GAAG;AACbrB,UAAAA,IAAI,EAAEiB,SAAS,GAAG,CADL;AAEbhB,UAAAA,MAAM,EAAEY,WAAW,CAACI,SAAD,CAAX,CAAuBc;AAFlB,SAAjB;AAKA9C,QAAAA,MAAM,CAACsC,IAAP,CAAY;AAAE/B,UAAAA,IAAF;AAAQgC,UAAAA,OAAO,EAAE,mCAAjB;AAAsD9B,UAAAA,GAAG,EAAE2B;AAA3D,SAAZ;AACAQ,QAAAA,aAAa,GAAGZ,SAAhB;AACH;AACJ;AAED;;;;;;;AAKA,aAASe,IAAT,GAAgB,CAAE;;AAElB,UAAMC,KAAK,GAAG,EAAd;;AAEA,QAAIxE,cAAc,CAAC+C,IAAf,CAAoBrB,UAAU,CAACwC,OAAX,EAApB,CAAJ,EAA+C;AAC3CM,MAAAA,KAAK,CAACC,OAAN,GAAgB,UAAS1C,IAAT,EAAe;AAE3B;;;;;;;;;;AAUAoB,QAAAA,2BAA2B,CAACpB,IAAD,CAA3B;AACAiC,QAAAA,gCAAgC,CAACjC,IAAD,CAAhC;AACH,OAdD;;AAgBAyC,MAAAA,KAAK,CAACE,UAAN,GAAmBjC,4CAAnB;AACA+B,MAAAA,KAAK,CAACG,OAAN,GAAgBlC,4CAAhB;AACA+B,MAAAA,KAAK,CAACI,eAAN,GAAwBzD,aAAa,GAAG8B,wCAAH,GAA8CsB,IAAnF;;AACAC,MAAAA,KAAK,CAAC,cAAD,CAAL,GAAwB,YAAW;AAC/B,YAAIxD,YAAJ,EAAkB;AAEd;AACAY,UAAAA,YAAY,CAAC0B,OAAb,CAAqBJ,gCAArB;AACH,SAL8B,CAO/B;;;AACA1B,QAAAA,MAAM,CAAC8B,OAAP,CAAeuB,KAAK,IAAItD,OAAO,CAACuD,MAAR,CAAeD,KAAf,CAAxB;AACH,OATD;AAUH,KA9BD,MA8BO;AACHL,MAAAA,KAAK,CAACC,OAAN,GAAgBF,IAAhB;AACH;;AAED,WAAOC,KAAP;AACH;;AAlNY,CAAjB","sourcesContent":["/**\n * @fileoverview Rule to disalow whitespace that is not a tab or space, whitespace inside strings and comments are allowed\n * @author Jonathan Kingston\n * @author Christophe Porteneuve\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nconst ALL_IRREGULARS = /[\\f\\v\\u0085\\ufeff\\u00a0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u202f\\u205f\\u3000\\u2028\\u2029]/u;\nconst IRREGULAR_WHITESPACE = /[\\f\\v\\u0085\\ufeff\\u00a0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u202f\\u205f\\u3000]+/mgu;\nconst IRREGULAR_LINE_TERMINATORS = /[\\u2028\\u2029]/mgu;\nconst LINE_BREAK = astUtils.createGlobalLinebreakMatcher();\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow irregular whitespace\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-irregular-whitespace\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    skipComments: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    skipStrings: {\n                        type: \"boolean\",\n                        default: true\n                    },\n                    skipTemplates: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    skipRegExps: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create(context) {\n\n        // Module store of errors that we have found\n        let errors = [];\n\n        // Lookup the `skipComments` option, which defaults to `false`.\n        const options = context.options[0] || {};\n        const skipComments = !!options.skipComments;\n        const skipStrings = options.skipStrings !== false;\n        const skipRegExps = !!options.skipRegExps;\n        const skipTemplates = !!options.skipTemplates;\n\n        const sourceCode = context.getSourceCode();\n        const commentNodes = sourceCode.getAllComments();\n\n        /**\n         * Removes errors that occur inside a string node\n         * @param {ASTNode} node to check for matching errors.\n         * @returns {void}\n         * @private\n         */\n        function removeWhitespaceError(node) {\n            const locStart = node.loc.start;\n            const locEnd = node.loc.end;\n\n            errors = errors.filter(({ loc: errorLoc }) => {\n                if (errorLoc.line >= locStart.line && errorLoc.line <= locEnd.line) {\n                    if (errorLoc.column >= locStart.column && (errorLoc.column <= locEnd.column || errorLoc.line < locEnd.line)) {\n                        return false;\n                    }\n                }\n                return true;\n            });\n        }\n\n        /**\n         * Checks identifier or literal nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors\n         * @param {ASTNode} node to check for matching errors.\n         * @returns {void}\n         * @private\n         */\n        function removeInvalidNodeErrorsInIdentifierOrLiteral(node) {\n            const shouldCheckStrings = skipStrings && (typeof node.value === \"string\");\n            const shouldCheckRegExps = skipRegExps && Boolean(node.regex);\n\n            if (shouldCheckStrings || shouldCheckRegExps) {\n\n                // If we have irregular characters remove them from the errors list\n                if (ALL_IRREGULARS.test(node.raw)) {\n                    removeWhitespaceError(node);\n                }\n            }\n        }\n\n        /**\n         * Checks template string literal nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors\n         * @param {ASTNode} node to check for matching errors.\n         * @returns {void}\n         * @private\n         */\n        function removeInvalidNodeErrorsInTemplateLiteral(node) {\n            if (typeof node.value.raw === \"string\") {\n                if (ALL_IRREGULARS.test(node.value.raw)) {\n                    removeWhitespaceError(node);\n                }\n            }\n        }\n\n        /**\n         * Checks comment nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors\n         * @param {ASTNode} node to check for matching errors.\n         * @returns {void}\n         * @private\n         */\n        function removeInvalidNodeErrorsInComment(node) {\n            if (ALL_IRREGULARS.test(node.value)) {\n                removeWhitespaceError(node);\n            }\n        }\n\n        /**\n         * Checks the program source for irregular whitespace\n         * @param {ASTNode} node The program node\n         * @returns {void}\n         * @private\n         */\n        function checkForIrregularWhitespace(node) {\n            const sourceLines = sourceCode.lines;\n\n            sourceLines.forEach((sourceLine, lineIndex) => {\n                const lineNumber = lineIndex + 1;\n                let match;\n\n                while ((match = IRREGULAR_WHITESPACE.exec(sourceLine)) !== null) {\n                    const location = {\n                        line: lineNumber,\n                        column: match.index\n                    };\n\n                    errors.push({ node, message: \"Irregular whitespace not allowed.\", loc: location });\n                }\n            });\n        }\n\n        /**\n         * Checks the program source for irregular line terminators\n         * @param {ASTNode} node The program node\n         * @returns {void}\n         * @private\n         */\n        function checkForIrregularLineTerminators(node) {\n            const source = sourceCode.getText(),\n                sourceLines = sourceCode.lines,\n                linebreaks = source.match(LINE_BREAK);\n            let lastLineIndex = -1,\n                match;\n\n            while ((match = IRREGULAR_LINE_TERMINATORS.exec(source)) !== null) {\n                const lineIndex = linebreaks.indexOf(match[0], lastLineIndex + 1) || 0;\n                const location = {\n                    line: lineIndex + 1,\n                    column: sourceLines[lineIndex].length\n                };\n\n                errors.push({ node, message: \"Irregular whitespace not allowed.\", loc: location });\n                lastLineIndex = lineIndex;\n            }\n        }\n\n        /**\n         * A no-op function to act as placeholder for comment accumulation when the `skipComments` option is `false`.\n         * @returns {void}\n         * @private\n         */\n        function noop() {}\n\n        const nodes = {};\n\n        if (ALL_IRREGULARS.test(sourceCode.getText())) {\n            nodes.Program = function(node) {\n\n                /*\n                 * As we can easily fire warnings for all white space issues with\n                 * all the source its simpler to fire them here.\n                 * This means we can check all the application code without having\n                 * to worry about issues caused in the parser tokens.\n                 * When writing this code also evaluating per node was missing out\n                 * connecting tokens in some cases.\n                 * We can later filter the errors when they are found to be not an\n                 * issue in nodes we don't care about.\n                 */\n                checkForIrregularWhitespace(node);\n                checkForIrregularLineTerminators(node);\n            };\n\n            nodes.Identifier = removeInvalidNodeErrorsInIdentifierOrLiteral;\n            nodes.Literal = removeInvalidNodeErrorsInIdentifierOrLiteral;\n            nodes.TemplateElement = skipTemplates ? removeInvalidNodeErrorsInTemplateLiteral : noop;\n            nodes[\"Program:exit\"] = function() {\n                if (skipComments) {\n\n                    // First strip errors occurring in comment nodes.\n                    commentNodes.forEach(removeInvalidNodeErrorsInComment);\n                }\n\n                // If we have any errors remaining report on them\n                errors.forEach(error => context.report(error));\n            };\n        } else {\n            nodes.Program = noop;\n        }\n\n        return nodes;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}