{"ast":null,"code":"var walk = require('css-tree').walk;\n\nvar utils = require('./utils');\n\nfunction processRule(node, item, list) {\n  var selectors = node.prelude.children;\n  var declarations = node.block.children;\n  list.prevUntil(item.prev, function (prev) {\n    // skip non-ruleset node if safe\n    if (prev.type !== 'Rule') {\n      return utils.unsafeToSkipNode.call(selectors, prev);\n    }\n\n    var prevSelectors = prev.prelude.children;\n    var prevDeclarations = prev.block.children; // try to join rulesets with equal pseudo signature\n\n    if (node.pseudoSignature === prev.pseudoSignature) {\n      // try to join by selectors\n      if (utils.isEqualSelectors(prevSelectors, selectors)) {\n        prevDeclarations.appendList(declarations);\n        list.remove(item);\n        return true;\n      } // try to join by declarations\n\n\n      if (utils.isEqualDeclarations(declarations, prevDeclarations)) {\n        utils.addSelectors(prevSelectors, selectors);\n        list.remove(item);\n        return true;\n      }\n    } // go to prev ruleset if has no selector similarities\n\n\n    return utils.hasSimilarSelectors(selectors, prevSelectors);\n  });\n} // NOTE: direction should be left to right, since rulesets merge to left\n// ruleset. When direction right to left unmerged rulesets may prevent lookup\n// TODO: remove initial merge\n\n\nmodule.exports = function initialMergeRule(ast) {\n  walk(ast, {\n    visit: 'Rule',\n    enter: processRule\n  });\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/csso/lib/restructure/2-initialMergeRuleset.js"],"names":["walk","require","utils","processRule","node","item","list","selectors","prelude","children","declarations","block","prevUntil","prev","type","unsafeToSkipNode","call","prevSelectors","prevDeclarations","pseudoSignature","isEqualSelectors","appendList","remove","isEqualDeclarations","addSelectors","hasSimilarSelectors","module","exports","initialMergeRule","ast","visit","enter"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoBD,IAA/B;;AACA,IAAIE,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB;;AAEA,SAASE,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,IAAjC,EAAuC;AACnC,MAAIC,SAAS,GAAGH,IAAI,CAACI,OAAL,CAAaC,QAA7B;AACA,MAAIC,YAAY,GAAGN,IAAI,CAACO,KAAL,CAAWF,QAA9B;AAEAH,EAAAA,IAAI,CAACM,SAAL,CAAeP,IAAI,CAACQ,IAApB,EAA0B,UAASA,IAAT,EAAe;AACrC;AACA,QAAIA,IAAI,CAACC,IAAL,KAAc,MAAlB,EAA0B;AACtB,aAAOZ,KAAK,CAACa,gBAAN,CAAuBC,IAAvB,CAA4BT,SAA5B,EAAuCM,IAAvC,CAAP;AACH;;AAED,QAAII,aAAa,GAAGJ,IAAI,CAACL,OAAL,CAAaC,QAAjC;AACA,QAAIS,gBAAgB,GAAGL,IAAI,CAACF,KAAL,CAAWF,QAAlC,CAPqC,CASrC;;AACA,QAAIL,IAAI,CAACe,eAAL,KAAyBN,IAAI,CAACM,eAAlC,EAAmD;AAC/C;AACA,UAAIjB,KAAK,CAACkB,gBAAN,CAAuBH,aAAvB,EAAsCV,SAAtC,CAAJ,EAAsD;AAClDW,QAAAA,gBAAgB,CAACG,UAAjB,CAA4BX,YAA5B;AACAJ,QAAAA,IAAI,CAACgB,MAAL,CAAYjB,IAAZ;AACA,eAAO,IAAP;AACH,OAN8C,CAQ/C;;;AACA,UAAIH,KAAK,CAACqB,mBAAN,CAA0Bb,YAA1B,EAAwCQ,gBAAxC,CAAJ,EAA+D;AAC3DhB,QAAAA,KAAK,CAACsB,YAAN,CAAmBP,aAAnB,EAAkCV,SAAlC;AACAD,QAAAA,IAAI,CAACgB,MAAL,CAAYjB,IAAZ;AACA,eAAO,IAAP;AACH;AACJ,KAxBoC,CA0BrC;;;AACA,WAAOH,KAAK,CAACuB,mBAAN,CAA0BlB,SAA1B,EAAqCU,aAArC,CAAP;AACH,GA5BD;AA6BH,C,CAED;AACA;AACA;;;AACAS,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC5C7B,EAAAA,IAAI,CAAC6B,GAAD,EAAM;AACNC,IAAAA,KAAK,EAAE,MADD;AAENC,IAAAA,KAAK,EAAE5B;AAFD,GAAN,CAAJ;AAIH,CALD","sourcesContent":["var walk = require('css-tree').walk;\nvar utils = require('./utils');\n\nfunction processRule(node, item, list) {\n    var selectors = node.prelude.children;\n    var declarations = node.block.children;\n\n    list.prevUntil(item.prev, function(prev) {\n        // skip non-ruleset node if safe\n        if (prev.type !== 'Rule') {\n            return utils.unsafeToSkipNode.call(selectors, prev);\n        }\n\n        var prevSelectors = prev.prelude.children;\n        var prevDeclarations = prev.block.children;\n\n        // try to join rulesets with equal pseudo signature\n        if (node.pseudoSignature === prev.pseudoSignature) {\n            // try to join by selectors\n            if (utils.isEqualSelectors(prevSelectors, selectors)) {\n                prevDeclarations.appendList(declarations);\n                list.remove(item);\n                return true;\n            }\n\n            // try to join by declarations\n            if (utils.isEqualDeclarations(declarations, prevDeclarations)) {\n                utils.addSelectors(prevSelectors, selectors);\n                list.remove(item);\n                return true;\n            }\n        }\n\n        // go to prev ruleset if has no selector similarities\n        return utils.hasSimilarSelectors(selectors, prevSelectors);\n    });\n}\n\n// NOTE: direction should be left to right, since rulesets merge to left\n// ruleset. When direction right to left unmerged rulesets may prevent lookup\n// TODO: remove initial merge\nmodule.exports = function initialMergeRule(ast) {\n    walk(ast, {\n        visit: 'Rule',\n        enter: processRule\n    });\n};\n"]},"metadata":{},"sourceType":"script"}