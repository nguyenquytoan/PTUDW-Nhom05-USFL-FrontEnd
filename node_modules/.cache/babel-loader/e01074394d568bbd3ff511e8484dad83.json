{"ast":null,"code":"/** @license URI.js v4.2.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */\n!function (e, r) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? r(exports) : \"function\" == typeof define && define.amd ? define([\"exports\"], r) : r(e.URI = e.URI || {});\n}(this, function (e) {\n  \"use strict\";\n\n  function r() {\n    for (var e = arguments.length, r = Array(e), n = 0; n < e; n++) r[n] = arguments[n];\n\n    if (r.length > 1) {\n      r[0] = r[0].slice(0, -1);\n\n      for (var t = r.length - 1, o = 1; o < t; ++o) r[o] = r[o].slice(1, -1);\n\n      return r[t] = r[t].slice(1), r.join(\"\");\n    }\n\n    return r[0];\n  }\n\n  function n(e) {\n    return \"(?:\" + e + \")\";\n  }\n\n  function t(e) {\n    return e === undefined ? \"undefined\" : null === e ? \"null\" : Object.prototype.toString.call(e).split(\" \").pop().split(\"]\").shift().toLowerCase();\n  }\n\n  function o(e) {\n    return e.toUpperCase();\n  }\n\n  function a(e) {\n    return e !== undefined && null !== e ? e instanceof Array ? e : \"number\" != typeof e.length || e.split || e.setInterval || e.call ? [e] : Array.prototype.slice.call(e) : [];\n  }\n\n  function i(e, r) {\n    var n = e;\n    if (r) for (var t in r) n[t] = r[t];\n    return n;\n  }\n\n  function u(e) {\n    var t = r(\"[0-9]\", \"[A-Fa-f]\"),\n        o = n(n(\"%[EFef]\" + t + \"%\" + t + t + \"%\" + t + t) + \"|\" + n(\"%[89A-Fa-f]\" + t + \"%\" + t + t) + \"|\" + n(\"%\" + t + t)),\n        a = \"[\\\\!\\\\$\\\\&\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\=]\",\n        i = r(\"[\\\\:\\\\/\\\\?\\\\#\\\\[\\\\]\\\\@]\", a),\n        u = e ? \"[\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]\" : \"[]\",\n        s = e ? \"[\\\\uE000-\\\\uF8FF]\" : \"[]\",\n        f = r(\"[A-Za-z]\", \"[0-9]\", \"[\\\\-\\\\.\\\\_\\\\~]\", u),\n        c = n(n(\"25[0-5]\") + \"|\" + n(\"2[0-4][0-9]\") + \"|\" + n(\"1[0-9][0-9]\") + \"|\" + n(\"0?[1-9][0-9]\") + \"|0?0?[0-9]\"),\n        p = n(c + \"\\\\.\" + c + \"\\\\.\" + c + \"\\\\.\" + c),\n        h = n(t + \"{1,4}\"),\n        d = n(n(h + \"\\\\:\" + h) + \"|\" + p),\n        l = n(n(h + \"\\\\:\") + \"{6}\" + d),\n        g = n(\"\\\\:\\\\:\" + n(h + \"\\\\:\") + \"{5}\" + d),\n        v = n(n(h) + \"?\\\\:\\\\:\" + n(h + \"\\\\:\") + \"{4}\" + d),\n        m = n(n(n(h + \"\\\\:\") + \"{0,1}\" + h) + \"?\\\\:\\\\:\" + n(h + \"\\\\:\") + \"{3}\" + d),\n        E = n(n(n(h + \"\\\\:\") + \"{0,2}\" + h) + \"?\\\\:\\\\:\" + n(h + \"\\\\:\") + \"{2}\" + d),\n        C = n(n(n(h + \"\\\\:\") + \"{0,3}\" + h) + \"?\\\\:\\\\:\" + h + \"\\\\:\" + d),\n        y = n(n(n(h + \"\\\\:\") + \"{0,4}\" + h) + \"?\\\\:\\\\:\" + d),\n        S = n(n(n(h + \"\\\\:\") + \"{0,5}\" + h) + \"?\\\\:\\\\:\" + h),\n        A = n(n(n(h + \"\\\\:\") + \"{0,6}\" + h) + \"?\\\\:\\\\:\"),\n        D = n([l, g, v, m, E, C, y, S, A].join(\"|\")),\n        w = n(n(f + \"|\" + o) + \"+\");\n    return {\n      NOT_SCHEME: new RegExp(r(\"[^]\", \"[A-Za-z]\", \"[0-9]\", \"[\\\\+\\\\-\\\\.]\"), \"g\"),\n      NOT_USERINFO: new RegExp(r(\"[^\\\\%\\\\:]\", f, a), \"g\"),\n      NOT_HOST: new RegExp(r(\"[^\\\\%\\\\[\\\\]\\\\:]\", f, a), \"g\"),\n      NOT_PATH: new RegExp(r(\"[^\\\\%\\\\/\\\\:\\\\@]\", f, a), \"g\"),\n      NOT_PATH_NOSCHEME: new RegExp(r(\"[^\\\\%\\\\/\\\\@]\", f, a), \"g\"),\n      NOT_QUERY: new RegExp(r(\"[^\\\\%]\", f, a, \"[\\\\:\\\\@\\\\/\\\\?]\", s), \"g\"),\n      NOT_FRAGMENT: new RegExp(r(\"[^\\\\%]\", f, a, \"[\\\\:\\\\@\\\\/\\\\?]\"), \"g\"),\n      ESCAPE: new RegExp(r(\"[^]\", f, a), \"g\"),\n      UNRESERVED: new RegExp(f, \"g\"),\n      OTHER_CHARS: new RegExp(r(\"[^\\\\%]\", f, i), \"g\"),\n      PCT_ENCODED: new RegExp(o, \"g\"),\n      IPV4ADDRESS: new RegExp(\"^(\" + p + \")$\"),\n      IPV6ADDRESS: new RegExp(\"^\\\\[?(\" + D + \")\" + n(n(\"\\\\%25|\\\\%(?!\" + t + \"{2})\") + \"(\" + w + \")\") + \"?\\\\]?$\")\n    };\n  }\n\n  function s(e) {\n    throw new RangeError(q[e]);\n  }\n\n  function f(e, r) {\n    for (var n = [], t = e.length; t--;) n[t] = r(e[t]);\n\n    return n;\n  }\n\n  function c(e, r) {\n    var n = e.split(\"@\"),\n        t = \"\";\n    return n.length > 1 && (t = n[0] + \"@\", e = n[1]), e = e.replace(j, \".\"), t + f(e.split(\".\"), r).join(\".\");\n  }\n\n  function p(e) {\n    for (var r = [], n = 0, t = e.length; n < t;) {\n      var o = e.charCodeAt(n++);\n\n      if (o >= 55296 && o <= 56319 && n < t) {\n        var a = e.charCodeAt(n++);\n        56320 == (64512 & a) ? r.push(((1023 & o) << 10) + (1023 & a) + 65536) : (r.push(o), n--);\n      } else r.push(o);\n    }\n\n    return r;\n  }\n\n  function h(e) {\n    var r = e.charCodeAt(0);\n    return r < 16 ? \"%0\" + r.toString(16).toUpperCase() : r < 128 ? \"%\" + r.toString(16).toUpperCase() : r < 2048 ? \"%\" + (r >> 6 | 192).toString(16).toUpperCase() + \"%\" + (63 & r | 128).toString(16).toUpperCase() : \"%\" + (r >> 12 | 224).toString(16).toUpperCase() + \"%\" + (r >> 6 & 63 | 128).toString(16).toUpperCase() + \"%\" + (63 & r | 128).toString(16).toUpperCase();\n  }\n\n  function d(e) {\n    for (var r = \"\", n = 0, t = e.length; n < t;) {\n      var o = parseInt(e.substr(n + 1, 2), 16);\n      if (o < 128) r += String.fromCharCode(o), n += 3;else if (o >= 194 && o < 224) {\n        if (t - n >= 6) {\n          var a = parseInt(e.substr(n + 4, 2), 16);\n          r += String.fromCharCode((31 & o) << 6 | 63 & a);\n        } else r += e.substr(n, 6);\n\n        n += 6;\n      } else if (o >= 224) {\n        if (t - n >= 9) {\n          var i = parseInt(e.substr(n + 4, 2), 16),\n              u = parseInt(e.substr(n + 7, 2), 16);\n          r += String.fromCharCode((15 & o) << 12 | (63 & i) << 6 | 63 & u);\n        } else r += e.substr(n, 9);\n\n        n += 9;\n      } else r += e.substr(n, 3), n += 3;\n    }\n\n    return r;\n  }\n\n  function l(e, r) {\n    function n(e) {\n      var n = d(e);\n      return n.match(r.UNRESERVED) ? n : e;\n    }\n\n    return e.scheme && (e.scheme = String(e.scheme).replace(r.PCT_ENCODED, n).toLowerCase().replace(r.NOT_SCHEME, \"\")), e.userinfo !== undefined && (e.userinfo = String(e.userinfo).replace(r.PCT_ENCODED, n).replace(r.NOT_USERINFO, h).replace(r.PCT_ENCODED, o)), e.host !== undefined && (e.host = String(e.host).replace(r.PCT_ENCODED, n).toLowerCase().replace(r.NOT_HOST, h).replace(r.PCT_ENCODED, o)), e.path !== undefined && (e.path = String(e.path).replace(r.PCT_ENCODED, n).replace(e.scheme ? r.NOT_PATH : r.NOT_PATH_NOSCHEME, h).replace(r.PCT_ENCODED, o)), e.query !== undefined && (e.query = String(e.query).replace(r.PCT_ENCODED, n).replace(r.NOT_QUERY, h).replace(r.PCT_ENCODED, o)), e.fragment !== undefined && (e.fragment = String(e.fragment).replace(r.PCT_ENCODED, n).replace(r.NOT_FRAGMENT, h).replace(r.PCT_ENCODED, o)), e;\n  }\n\n  function g(e) {\n    return e.replace(/^0*(.*)/, \"$1\") || \"0\";\n  }\n\n  function v(e, r) {\n    var n = e.match(r.IPV4ADDRESS) || [],\n        t = R(n, 2),\n        o = t[1];\n    return o ? o.split(\".\").map(g).join(\".\") : e;\n  }\n\n  function m(e, r) {\n    var n = e.match(r.IPV6ADDRESS) || [],\n        t = R(n, 3),\n        o = t[1],\n        a = t[2];\n\n    if (o) {\n      for (var i = o.toLowerCase().split(\"::\").reverse(), u = R(i, 2), s = u[0], f = u[1], c = f ? f.split(\":\").map(g) : [], p = s.split(\":\").map(g), h = r.IPV4ADDRESS.test(p[p.length - 1]), d = h ? 7 : 8, l = p.length - d, m = Array(d), E = 0; E < d; ++E) m[E] = c[E] || p[l + E] || \"\";\n\n      h && (m[d - 1] = v(m[d - 1], r));\n      var C = m.reduce(function (e, r, n) {\n        if (!r || \"0\" === r) {\n          var t = e[e.length - 1];\n          t && t.index + t.length === n ? t.length++ : e.push({\n            index: n,\n            length: 1\n          });\n        }\n\n        return e;\n      }, []),\n          y = C.sort(function (e, r) {\n        return r.length - e.length;\n      })[0],\n          S = void 0;\n\n      if (y && y.length > 1) {\n        var A = m.slice(0, y.index),\n            D = m.slice(y.index + y.length);\n        S = A.join(\":\") + \"::\" + D.join(\":\");\n      } else S = m.join(\":\");\n\n      return a && (S += \"%\" + a), S;\n    }\n\n    return e;\n  }\n\n  function E(e) {\n    var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        n = {},\n        t = !1 !== r.iri ? N : F;\n    \"suffix\" === r.reference && (e = (r.scheme ? r.scheme + \":\" : \"\") + \"//\" + e);\n    var o = e.match(J);\n\n    if (o) {\n      K ? (n.scheme = o[1], n.userinfo = o[3], n.host = o[4], n.port = parseInt(o[5], 10), n.path = o[6] || \"\", n.query = o[7], n.fragment = o[8], isNaN(n.port) && (n.port = o[5])) : (n.scheme = o[1] || undefined, n.userinfo = -1 !== e.indexOf(\"@\") ? o[3] : undefined, n.host = -1 !== e.indexOf(\"//\") ? o[4] : undefined, n.port = parseInt(o[5], 10), n.path = o[6] || \"\", n.query = -1 !== e.indexOf(\"?\") ? o[7] : undefined, n.fragment = -1 !== e.indexOf(\"#\") ? o[8] : undefined, isNaN(n.port) && (n.port = e.match(/\\/\\/(?:.|\\n)*\\:(?:\\/|\\?|\\#|$)/) ? o[4] : undefined)), n.host && (n.host = m(v(n.host, t), t)), n.scheme !== undefined || n.userinfo !== undefined || n.host !== undefined || n.port !== undefined || n.path || n.query !== undefined ? n.scheme === undefined ? n.reference = \"relative\" : n.fragment === undefined ? n.reference = \"absolute\" : n.reference = \"uri\" : n.reference = \"same-document\", r.reference && \"suffix\" !== r.reference && r.reference !== n.reference && (n.error = n.error || \"URI is not a \" + r.reference + \" reference.\");\n      var a = B[(r.scheme || n.scheme || \"\").toLowerCase()];\n      if (r.unicodeSupport || a && a.unicodeSupport) l(n, t);else {\n        if (n.host && (r.domainHost || a && a.domainHost)) try {\n          n.host = Y.toASCII(n.host.replace(t.PCT_ENCODED, d).toLowerCase());\n        } catch (i) {\n          n.error = n.error || \"Host's domain name can not be converted to ASCII via punycode: \" + i;\n        }\n        l(n, F);\n      }\n      a && a.parse && a.parse(n, r);\n    } else n.error = n.error || \"URI can not be parsed.\";\n\n    return n;\n  }\n\n  function C(e, r) {\n    var n = !1 !== r.iri ? N : F,\n        t = [];\n    return e.userinfo !== undefined && (t.push(e.userinfo), t.push(\"@\")), e.host !== undefined && t.push(m(v(String(e.host), n), n).replace(n.IPV6ADDRESS, function (e, r, n) {\n      return \"[\" + r + (n ? \"%25\" + n : \"\") + \"]\";\n    })), \"number\" == typeof e.port && (t.push(\":\"), t.push(e.port.toString(10))), t.length ? t.join(\"\") : undefined;\n  }\n\n  function y(e) {\n    for (var r = []; e.length;) if (e.match(W)) e = e.replace(W, \"\");else if (e.match(X)) e = e.replace(X, \"/\");else if (e.match(ee)) e = e.replace(ee, \"/\"), r.pop();else if (\".\" === e || \"..\" === e) e = \"\";else {\n      var n = e.match(re);\n      if (!n) throw new Error(\"Unexpected dot segment condition\");\n      var t = n[0];\n      e = e.slice(t.length), r.push(t);\n    }\n\n    return r.join(\"\");\n  }\n\n  function S(e) {\n    var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        n = r.iri ? N : F,\n        t = [],\n        o = B[(r.scheme || e.scheme || \"\").toLowerCase()];\n    if (o && o.serialize && o.serialize(e, r), e.host) if (n.IPV6ADDRESS.test(e.host)) ;else if (r.domainHost || o && o.domainHost) try {\n      e.host = r.iri ? Y.toUnicode(e.host) : Y.toASCII(e.host.replace(n.PCT_ENCODED, d).toLowerCase());\n    } catch (u) {\n      e.error = e.error || \"Host's domain name can not be converted to \" + (r.iri ? \"Unicode\" : \"ASCII\") + \" via punycode: \" + u;\n    }\n    l(e, n), \"suffix\" !== r.reference && e.scheme && (t.push(e.scheme), t.push(\":\"));\n    var a = C(e, r);\n\n    if (a !== undefined && (\"suffix\" !== r.reference && t.push(\"//\"), t.push(a), e.path && \"/\" !== e.path.charAt(0) && t.push(\"/\")), e.path !== undefined) {\n      var i = e.path;\n      r.absolutePath || o && o.absolutePath || (i = y(i)), a === undefined && (i = i.replace(/^\\/\\//, \"/%2F\")), t.push(i);\n    }\n\n    return e.query !== undefined && (t.push(\"?\"), t.push(e.query)), e.fragment !== undefined && (t.push(\"#\"), t.push(e.fragment)), t.join(\"\");\n  }\n\n  function A(e, r) {\n    var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        t = arguments[3],\n        o = {};\n    return t || (e = E(S(e, n), n), r = E(S(r, n), n)), n = n || {}, !n.tolerant && r.scheme ? (o.scheme = r.scheme, o.userinfo = r.userinfo, o.host = r.host, o.port = r.port, o.path = y(r.path || \"\"), o.query = r.query) : (r.userinfo !== undefined || r.host !== undefined || r.port !== undefined ? (o.userinfo = r.userinfo, o.host = r.host, o.port = r.port, o.path = y(r.path || \"\"), o.query = r.query) : (r.path ? (\"/\" === r.path.charAt(0) ? o.path = y(r.path) : (e.userinfo === undefined && e.host === undefined && e.port === undefined || e.path ? e.path ? o.path = e.path.slice(0, e.path.lastIndexOf(\"/\") + 1) + r.path : o.path = r.path : o.path = \"/\" + r.path, o.path = y(o.path)), o.query = r.query) : (o.path = e.path, r.query !== undefined ? o.query = r.query : o.query = e.query), o.userinfo = e.userinfo, o.host = e.host, o.port = e.port), o.scheme = e.scheme), o.fragment = r.fragment, o;\n  }\n\n  function D(e, r, n) {\n    var t = i({\n      scheme: \"null\"\n    }, n);\n    return S(A(E(e, t), E(r, t), t, !0), t);\n  }\n\n  function w(e, r) {\n    return \"string\" == typeof e ? e = S(E(e, r), r) : \"object\" === t(e) && (e = E(S(e, r), r)), e;\n  }\n\n  function b(e, r, n) {\n    return \"string\" == typeof e ? e = S(E(e, n), n) : \"object\" === t(e) && (e = S(e, n)), \"string\" == typeof r ? r = S(E(r, n), n) : \"object\" === t(r) && (r = S(r, n)), e === r;\n  }\n\n  function x(e, r) {\n    return e && e.toString().replace(r && r.iri ? N.ESCAPE : F.ESCAPE, h);\n  }\n\n  function O(e, r) {\n    return e && e.toString().replace(r && r.iri ? N.PCT_ENCODED : F.PCT_ENCODED, d);\n  }\n\n  function I(e) {\n    var r = d(e);\n    return r.match(fe) ? r : e;\n  }\n\n  var F = u(!1),\n      N = u(!0),\n      R = function () {\n    function e(e, r) {\n      var n = [],\n          t = !0,\n          o = !1,\n          a = undefined;\n\n      try {\n        for (var i, u = e[Symbol.iterator](); !(t = (i = u.next()).done) && (n.push(i.value), !r || n.length !== r); t = !0);\n      } catch (s) {\n        o = !0, a = s;\n      } finally {\n        try {\n          !t && u[\"return\"] && u[\"return\"]();\n        } finally {\n          if (o) throw a;\n        }\n      }\n\n      return n;\n    }\n\n    return function (r, n) {\n      if (Array.isArray(r)) return r;\n      if (Symbol.iterator in Object(r)) return e(r, n);\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    };\n  }(),\n      T = function (e) {\n    if (Array.isArray(e)) {\n      for (var r = 0, n = Array(e.length); r < e.length; r++) n[r] = e[r];\n\n      return n;\n    }\n\n    return Array.from(e);\n  },\n      _ = 2147483647,\n      P = /^xn--/,\n      U = /[^\\0-\\x7E]/,\n      j = /[\\x2E\\u3002\\uFF0E\\uFF61]/g,\n      q = {\n    overflow: \"Overflow: input needs wider integers to process\",\n    \"not-basic\": \"Illegal input >= 0x80 (not a basic code point)\",\n    \"invalid-input\": \"Invalid input\"\n  },\n      H = Math.floor,\n      z = String.fromCharCode,\n      L = function (e) {\n    return String.fromCodePoint.apply(String, T(e));\n  },\n      $ = function (e) {\n    return e - 48 < 10 ? e - 22 : e - 65 < 26 ? e - 65 : e - 97 < 26 ? e - 97 : 36;\n  },\n      M = function (e, r) {\n    return e + 22 + 75 * (e < 26) - ((0 != r) << 5);\n  },\n      V = function (e, r, n) {\n    var t = 0;\n\n    for (e = n ? H(e / 700) : e >> 1, e += H(e / r); e > 455; t += 36) e = H(e / 35);\n\n    return H(t + 36 * e / (e + 38));\n  },\n      k = function (e) {\n    var r = [],\n        n = e.length,\n        t = 0,\n        o = 128,\n        a = 72,\n        i = e.lastIndexOf(\"-\");\n    i < 0 && (i = 0);\n\n    for (var u = 0; u < i; ++u) e.charCodeAt(u) >= 128 && s(\"not-basic\"), r.push(e.charCodeAt(u));\n\n    for (var f = i > 0 ? i + 1 : 0; f < n;) {\n      for (var c = t, p = 1, h = 36;; h += 36) {\n        f >= n && s(\"invalid-input\");\n        var d = $(e.charCodeAt(f++));\n        (d >= 36 || d > H((_ - t) / p)) && s(\"overflow\"), t += d * p;\n        var l = h <= a ? 1 : h >= a + 26 ? 26 : h - a;\n        if (d < l) break;\n        var g = 36 - l;\n        p > H(_ / g) && s(\"overflow\"), p *= g;\n      }\n\n      var v = r.length + 1;\n      a = V(t - c, v, 0 == c), H(t / v) > _ - o && s(\"overflow\"), o += H(t / v), t %= v, r.splice(t++, 0, o);\n    }\n\n    return String.fromCodePoint.apply(String, r);\n  },\n      Z = function (e) {\n    var r = [];\n    e = p(e);\n    var n = e.length,\n        t = 128,\n        o = 0,\n        a = 72,\n        i = !0,\n        u = !1,\n        f = undefined;\n\n    try {\n      for (var c, h = e[Symbol.iterator](); !(i = (c = h.next()).done); i = !0) {\n        var d = c.value;\n        d < 128 && r.push(z(d));\n      }\n    } catch (j) {\n      u = !0, f = j;\n    } finally {\n      try {\n        !i && h[\"return\"] && h[\"return\"]();\n      } finally {\n        if (u) throw f;\n      }\n    }\n\n    var l = r.length,\n        g = l;\n\n    for (l && r.push(\"-\"); g < n;) {\n      var v = _,\n          m = !0,\n          E = !1,\n          C = undefined;\n\n      try {\n        for (var y, S = e[Symbol.iterator](); !(m = (y = S.next()).done); m = !0) {\n          var A = y.value;\n          A >= t && A < v && (v = A);\n        }\n      } catch (j) {\n        E = !0, C = j;\n      } finally {\n        try {\n          !m && S[\"return\"] && S[\"return\"]();\n        } finally {\n          if (E) throw C;\n        }\n      }\n\n      var D = g + 1;\n      v - t > H((_ - o) / D) && s(\"overflow\"), o += (v - t) * D, t = v;\n      var w = !0,\n          b = !1,\n          x = undefined;\n\n      try {\n        for (var O, I = e[Symbol.iterator](); !(w = (O = I.next()).done); w = !0) {\n          var F = O.value;\n\n          if (F < t && ++o > _ && s(\"overflow\"), F == t) {\n            for (var N = o, R = 36;; R += 36) {\n              var T = R <= a ? 1 : R >= a + 26 ? 26 : R - a;\n              if (N < T) break;\n              var P = N - T,\n                  U = 36 - T;\n              r.push(z(M(T + P % U, 0))), N = H(P / U);\n            }\n\n            r.push(z(M(N, 0))), a = V(o, D, g == l), o = 0, ++g;\n          }\n        }\n      } catch (j) {\n        b = !0, x = j;\n      } finally {\n        try {\n          !w && I[\"return\"] && I[\"return\"]();\n        } finally {\n          if (b) throw x;\n        }\n      }\n\n      ++o, ++t;\n    }\n\n    return r.join(\"\");\n  },\n      G = function (e) {\n    return c(e, function (e) {\n      return P.test(e) ? k(e.slice(4).toLowerCase()) : e;\n    });\n  },\n      Q = function (e) {\n    return c(e, function (e) {\n      return U.test(e) ? \"xn--\" + Z(e) : e;\n    });\n  },\n      Y = {\n    version: \"2.1.0\",\n    ucs2: {\n      decode: p,\n      encode: L\n    },\n    decode: k,\n    encode: Z,\n    toASCII: Q,\n    toUnicode: G\n  },\n      B = {},\n      J = /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:([^\\/?#@]*)@)?(\\[[^\\/?#\\]]+\\]|[^\\/?#:]*)(?:\\:(\\d*))?))?([^?#]*)(?:\\?([^#]*))?(?:#((?:.|\\n|\\r)*))?/i,\n      K = \"\".match(/(){0}/)[1] === undefined,\n      W = /^\\.\\.?\\//,\n      X = /^\\/\\.(\\/|$)/,\n      ee = /^\\/\\.\\.(\\/|$)/,\n      re = /^\\/?(?:.|\\n)*?(?=\\/|$)/,\n      ne = {\n    scheme: \"http\",\n    domainHost: !0,\n    parse: function (e, r) {\n      return e.host || (e.error = e.error || \"HTTP URIs must have a host.\"), e;\n    },\n    serialize: function (e, r) {\n      return e.port !== (\"https\" !== String(e.scheme).toLowerCase() ? 80 : 443) && \"\" !== e.port || (e.port = undefined), e.path || (e.path = \"/\"), e;\n    }\n  },\n      te = {\n    scheme: \"https\",\n    domainHost: ne.domainHost,\n    parse: ne.parse,\n    serialize: ne.serialize\n  },\n      oe = {},\n      ae = \"[A-Za-z0-9\\\\-\\\\.\\\\_\\\\~\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]\",\n      ie = \"[0-9A-Fa-f]\",\n      ue = n(n(\"%[EFef][0-9A-Fa-f]%\" + ie + ie + \"%\" + ie + ie) + \"|\" + n(\"%[89A-Fa-f][0-9A-Fa-f]%\" + ie + ie) + \"|\" + n(\"%\" + ie + ie)),\n      se = r(\"[\\\\!\\\\$\\\\%\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.0-9\\\\<\\\\>A-Z\\\\x5E-\\\\x7E]\", '[\\\\\"\\\\\\\\]'),\n      fe = new RegExp(ae, \"g\"),\n      ce = new RegExp(ue, \"g\"),\n      pe = new RegExp(r(\"[^]\", \"[A-Za-z0-9\\\\!\\\\$\\\\%\\\\'\\\\*\\\\+\\\\-\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\", \"[\\\\.]\", '[\\\\\"]', se), \"g\"),\n      he = new RegExp(r(\"[^]\", ae, \"[\\\\!\\\\$\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\:\\\\@]\"), \"g\"),\n      de = he,\n      le = {\n    scheme: \"mailto\",\n    parse: function (e, r) {\n      var n = e,\n          t = n.to = n.path ? n.path.split(\",\") : [];\n\n      if (n.path = undefined, n.query) {\n        for (var o = !1, a = {}, i = n.query.split(\"&\"), u = 0, s = i.length; u < s; ++u) {\n          var f = i[u].split(\"=\");\n\n          switch (f[0]) {\n            case \"to\":\n              for (var c = f[1].split(\",\"), p = 0, h = c.length; p < h; ++p) t.push(c[p]);\n\n              break;\n\n            case \"subject\":\n              n.subject = O(f[1], r);\n              break;\n\n            case \"body\":\n              n.body = O(f[1], r);\n              break;\n\n            default:\n              o = !0, a[O(f[0], r)] = O(f[1], r);\n          }\n        }\n\n        o && (n.headers = a);\n      }\n\n      n.query = undefined;\n\n      for (var d = 0, l = t.length; d < l; ++d) {\n        var g = t[d].split(\"@\");\n        if (g[0] = O(g[0]), r.unicodeSupport) g[1] = O(g[1], r).toLowerCase();else try {\n          g[1] = Y.toASCII(O(g[1], r).toLowerCase());\n        } catch (v) {\n          n.error = n.error || \"Email address's domain name can not be converted to ASCII via punycode: \" + v;\n        }\n        t[d] = g.join(\"@\");\n      }\n\n      return n;\n    },\n    serialize: function (e, r) {\n      var n = e,\n          t = a(e.to);\n\n      if (t) {\n        for (var i = 0, u = t.length; i < u; ++i) {\n          var s = String(t[i]),\n              f = s.lastIndexOf(\"@\"),\n              c = s.slice(0, f).replace(ce, I).replace(ce, o).replace(pe, h),\n              p = s.slice(f + 1);\n\n          try {\n            p = r.iri ? Y.toUnicode(p) : Y.toASCII(O(p, r).toLowerCase());\n          } catch (v) {\n            n.error = n.error || \"Email address's domain name can not be converted to \" + (r.iri ? \"Unicode\" : \"ASCII\") + \" via punycode: \" + v;\n          }\n\n          t[i] = c + \"@\" + p;\n        }\n\n        n.path = t.join(\",\");\n      }\n\n      var d = e.headers = e.headers || {};\n      e.subject && (d.subject = e.subject), e.body && (d.body = e.body);\n      var l = [];\n\n      for (var g in d) d[g] !== oe[g] && l.push(g.replace(ce, I).replace(ce, o).replace(he, h) + \"=\" + d[g].replace(ce, I).replace(ce, o).replace(de, h));\n\n      return l.length && (n.query = l.join(\"&\")), n;\n    }\n  },\n      ge = /^([^\\:]+)\\:(.*)/,\n      ve = {\n    scheme: \"urn\",\n    parse: function (e, r) {\n      var n = e.path && e.path.match(ge),\n          t = e;\n\n      if (n) {\n        var o = r.scheme || t.scheme || \"urn\",\n            a = n[1].toLowerCase(),\n            i = n[2],\n            u = o + \":\" + (r.nid || a),\n            s = B[u];\n        t.nid = a, t.nss = i, t.path = undefined, s && (t = s.parse(t, r));\n      } else t.error = t.error || \"URN can not be parsed.\";\n\n      return t;\n    },\n    serialize: function (e, r) {\n      var n = r.scheme || e.scheme || \"urn\",\n          t = e.nid,\n          o = n + \":\" + (r.nid || t),\n          a = B[o];\n      a && (e = a.serialize(e, r));\n      var i = e,\n          u = e.nss;\n      return i.path = (t || r.nid) + \":\" + u, i;\n    }\n  },\n      me = /^[0-9A-Fa-f]{8}(?:\\-[0-9A-Fa-f]{4}){3}\\-[0-9A-Fa-f]{12}$/,\n      Ee = {\n    scheme: \"urn:uuid\",\n    parse: function (e, r) {\n      var n = e;\n      return n.uuid = n.nss, n.nss = undefined, r.tolerant || n.uuid && n.uuid.match(me) || (n.error = n.error || \"UUID is not valid.\"), n;\n    },\n    serialize: function (e, r) {\n      var n = e;\n      return n.nss = (e.uuid || \"\").toLowerCase(), n;\n    }\n  };\n\n  B[ne.scheme] = ne, B[te.scheme] = te, B[le.scheme] = le, B[ve.scheme] = ve, B[Ee.scheme] = Ee, e.SCHEMES = B, e.pctEncChar = h, e.pctDecChars = d, e.parse = E, e.removeDotSegments = y, e.serialize = S, e.resolveComponents = A, e.resolve = D, e.normalize = w, e.equal = b, e.escapeComponent = x, e.unescapeComponent = O, Object.defineProperty(e, \"__esModule\", {\n    value: !0\n  });\n});","map":{"version":3,"sources":["../../src/util.ts","../../src/regexps-uri.ts","../../node_modules/punycode/punycode.es6.js","../../src/uri.ts","../../src/schemes/mailto.ts","../../src/regexps-iri.ts","../../src/schemes/http.ts","../../src/schemes/https.ts","../../src/schemes/urn.ts","../../src/schemes/urn-uuid.ts","../../src/index.ts"],"names":["sets","length","slice","xl","x","join","str","o","undefined","Object","prototype","toString","call","split","pop","shift","toLowerCase","toUpperCase","obj","Array","setInterval","target","source","key","isIRI","HEXDIG$$","merge","PCT_ENCODED$","subexp","SUB_DELIMS$$","RESERVED$$","UCSCHAR$$","DEC_OCTET_RELAXED$","H16$","LS32$","IPV4ADDRESS$","IPV6ADDRESS1$","IPV6ADDRESS2$","IPV6ADDRESS3$","IPV6ADDRESS4$","IPV6ADDRESS5$","IPV6ADDRESS6$","IPV6ADDRESS7$","IPV6ADDRESS8$","IPV6ADDRESS9$","ZONEID$","UNRESERVED$$","RegExp","IPRIVATE$$","IPV6ADDRESS$","buildExps","maxInt","regexPunycode","regexNonASCII","regexSeparators","errors","base","floor","Math","stringFromCharCode","String","fromCharCode","error","type","RangeError","map","array","fn","result","mapDomain","string","parts","replace","ucs2decode","output","counter","value","charCodeAt","extra","push","ucs2encode","fromCodePoint","basicToDigit","codePoint","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","baseMinusTMin","decode","input","inputLength","i","n","bias","basic","lastIndexOf","j","index","oldi","w","t","baseMinusT","out","splice","encode","_step","currentValue","basicLength","handledCPCount","m","_step2","handledCPCountPlusOne","_step3","q","qMinusT","toUnicode","test","toASCII","punycode","SCHEMES","chr","c","newStr","il","parseInt","substr","c2","c3","components","protocol","decodeUnreserved","decStr","pctDecChars","match","UNRESERVED","scheme","PCT_ENCODED","NOT_SCHEME","userinfo","NOT_USERINFO","pctEncChar","host","NOT_HOST","path","NOT_PATH","NOT_PATH_NOSCHEME","query","NOT_QUERY","fragment","NOT_FRAGMENT","matches","IPV4ADDRESS","address","_stripLeadingZeros","IPV6ADDRESS","zone","last","first","reverse","firstFields","lastFields","isLastFieldIPv4Address","fieldCount","lastFieldsStart","fields","_normalizeIPv4","allZeroFields","reduce","acc","field","lastLongest","longestZeroFields","sort","a","b","newHost","newFirst","newLast","URI_PARSE","NO_MATCH_IS_UNDEFINED","uriString","options","iri","IRI_PROTOCOL","URI_PROTOCOL","reference","port","isNaN","indexOf","_normalizeIPv6","schemeHandler","unicodeSupport","domainHost","e","parse","uriTokens","_","$1","$2","RDS1","RDS2","RDS3","RDS5","im","s","Error","serialize","authority","_recomposeAuthority","charAt","absolutePath","removeDotSegments","relative","skipNormalization","tolerant","baseURI","relativeURI","schemelessOptions","assign","resolveComponents","uri","typeOf","uriA","uriB","ESCAPE","O","VCHAR$$","NOT_LOCAL_PART","NOT_HFNAME","NOT_HFVALUE","handler","mailtoComponents","to","unknownHeaders","headers","hfields","hfield","toAddrs","subject","unescapeComponent","body","addr","toArray","toAddr","atIdx","localPart","domain","name","http","URN_PARSE","urnComponents","nid","nss","urnScheme","uriComponents","UUID","uuidComponents","uuid","https","mailto","urn"],"mappings":"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","sourcesContent":["export function merge(...sets:Array<string>):string {\n\tif (sets.length > 1) {\n\t\tsets[0] = sets[0].slice(0, -1);\n\t\tconst xl = sets.length - 1;\n\t\tfor (let x = 1; x < xl; ++x) {\n\t\t\tsets[x] = sets[x].slice(1, -1);\n\t\t}\n\t\tsets[xl] = sets[xl].slice(1);\n\t\treturn sets.join('');\n\t} else {\n\t\treturn sets[0];\n\t}\n}\n\nexport function subexp(str:string):string {\n\treturn \"(?:\" + str + \")\";\n}\n\nexport function typeOf(o:any):string {\n\treturn o === undefined ? \"undefined\" : (o === null ? \"null\" : Object.prototype.toString.call(o).split(\" \").pop().split(\"]\").shift().toLowerCase());\n}\n\nexport function toUpperCase(str:string):string {\n\treturn str.toUpperCase();\n}\n\nexport function toArray(obj:any):Array<any> {\n\treturn obj !== undefined && obj !== null ? (obj instanceof Array ? obj : (typeof obj.length !== \"number\" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj))) : [];\n}\n\n\nexport function assign(target: object, source: any): any {\n\tconst obj = target as any;\n\tif (source) {\n\t\tfor (const key in source) {\n\t\t\tobj[key] = source[key];\n\t\t}\n\t}\n\treturn obj;\n}","import { URIRegExps } from \"./uri\";\nimport { merge, subexp } from \"./util\";\n\nexport function buildExps(isIRI:boolean):URIRegExps {\n\tconst\n\t\tALPHA$$ = \"[A-Za-z]\",\n\t\tCR$ = \"[\\\\x0D]\",\n\t\tDIGIT$$ = \"[0-9]\",\n\t\tDQUOTE$$ = \"[\\\\x22]\",\n\t\tHEXDIG$$ = merge(DIGIT$$, \"[A-Fa-f]\"),  //case-insensitive\n\t\tLF$$ = \"[\\\\x0A]\",\n\t\tSP$$ = \"[\\\\x20]\",\n\t\tPCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)),  //expanded\n\t\tGEN_DELIMS$$ = \"[\\\\:\\\\/\\\\?\\\\#\\\\[\\\\]\\\\@]\",\n\t\tSUB_DELIMS$$ = \"[\\\\!\\\\$\\\\&\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\=]\",\n\t\tRESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),\n\t\tUCSCHAR$$ = isIRI ? \"[\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]\" : \"[]\",  //subset, excludes bidi control characters\n\t\tIPRIVATE$$ = isIRI ? \"[\\\\uE000-\\\\uF8FF]\" : \"[]\",  //subset\n\t\tUNRESERVED$$ = merge(ALPHA$$, DIGIT$$, \"[\\\\-\\\\.\\\\_\\\\~]\", UCSCHAR$$),\n\t\tSCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\") + \"*\"),\n\t\tUSERINFO$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\")) + \"*\"),\n\t\tDEC_OCTET$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"[1-9]\" + DIGIT$$) + \"|\" + DIGIT$$),\n\t\tDEC_OCTET_RELAXED$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"0?[1-9]\" + DIGIT$$) + \"|0?0?\" + DIGIT$$),  //relaxed parsing rules\n\t\tIPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$),\n\t\tH16$ = subexp(HEXDIG$$ + \"{1,4}\"),\n\t\tLS32$ = subexp(subexp(H16$ + \"\\\\:\" + H16$) + \"|\" + IPV4ADDRESS$),\n\t\tIPV6ADDRESS1$ = subexp(                                                            subexp(H16$ + \"\\\\:\") + \"{6}\" + LS32$), //                           6( h16 \":\" ) ls32\n\t\tIPV6ADDRESS2$ = subexp(                                                 \"\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{5}\" + LS32$), //                      \"::\" 5( h16 \":\" ) ls32\n\t\tIPV6ADDRESS3$ = subexp(subexp(                                 H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{4}\" + LS32$), //[               h16 ] \"::\" 4( h16 \":\" ) ls32\n\t\tIPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,1}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{3}\" + LS32$), //[ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n\t\tIPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,2}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{2}\" + LS32$), //[ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n\t\tIPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,3}\" + H16$) + \"?\\\\:\\\\:\" +        H16$ + \"\\\\:\"          + LS32$), //[ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n\t\tIPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,4}\" + H16$) + \"?\\\\:\\\\:\"                                + LS32$), //[ *4( h16 \":\" ) h16 ] \"::\"              ls32\n\t\tIPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,5}\" + H16$) + \"?\\\\:\\\\:\"                                + H16$ ), //[ *5( h16 \":\" ) h16 ] \"::\"              h16\n\t\tIPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,6}\" + H16$) + \"?\\\\:\\\\:\"                                       ), //[ *6( h16 \":\" ) h16 ] \"::\"\n\t\tIPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join(\"|\")),\n\t\tZONEID$ = subexp(subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$) + \"+\"),  //RFC 6874\n\t\tIPV6ADDRZ$ = subexp(IPV6ADDRESS$ + \"\\\\%25\" + ZONEID$),  //RFC 6874\n\t\tIPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + ZONEID$),  //RFC 6874, with relaxed parsing rules\n\t\tIPVFUTURE$ = subexp(\"[vV]\" + HEXDIG$$ + \"+\\\\.\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\") + \"+\"),\n\t\tIP_LITERAL$ = subexp(\"\\\\[\" + subexp(IPV6ADDRZ_RELAXED$ + \"|\" + IPV6ADDRESS$ + \"|\" + IPVFUTURE$) + \"\\\\]\"),  //RFC 6874\n\t\tREG_NAME$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$)) + \"*\"),\n\t\tHOST$ = subexp(IP_LITERAL$ + \"|\" + IPV4ADDRESS$ + \"(?!\" + REG_NAME$ + \")\" + \"|\" + REG_NAME$),\n\t\tPORT$ = subexp(DIGIT$$ + \"*\"),\n\t\tAUTHORITY$ = subexp(subexp(USERINFO$ + \"@\") + \"?\" + HOST$ + subexp(\"\\\\:\" + PORT$) + \"?\"),\n\t\tPCHAR$ = subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@]\")),\n\t\tSEGMENT$ = subexp(PCHAR$ + \"*\"),\n\t\tSEGMENT_NZ$ = subexp(PCHAR$ + \"+\"),\n\t\tSEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\@]\")) + \"+\"),\n\t\tPATH_ABEMPTY$ = subexp(subexp(\"\\\\/\" + SEGMENT$) + \"*\"),\n\t\tPATH_ABSOLUTE$ = subexp(\"\\\\/\" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + \"?\"),  //simplified\n\t\tPATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),  //simplified\n\t\tPATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),  //simplified\n\t\tPATH_EMPTY$ = \"(?!\" + PCHAR$ + \")\",\n\t\tPATH$ = subexp(PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n\t\tQUERY$ = subexp(subexp(PCHAR$ + \"|\" + merge(\"[\\\\/\\\\?]\", IPRIVATE$$)) + \"*\"),\n\t\tFRAGMENT$ = subexp(subexp(PCHAR$ + \"|[\\\\/\\\\?]\") + \"*\"),\n\t\tHIER_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n\t\tURI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n\t\tRELATIVE_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$),\n\t\tRELATIVE$ = subexp(RELATIVE_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n\t\tURI_REFERENCE$ = subexp(URI$ + \"|\" + RELATIVE$),\n\t\tABSOLUTE_URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\"),\n\n\t\tGENERIC_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tRELATIVE_REF$ = \"^(){0}\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tABSOLUTE_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?$\",\n\t\tSAMEDOC_REF$ = \"^\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tAUTHORITY_REF$ = \"^\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?$\"\n\t;\n\n\treturn {\n\t\tNOT_SCHEME : new RegExp(merge(\"[^]\", ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\"), \"g\"),\n\t\tNOT_USERINFO : new RegExp(merge(\"[^\\\\%\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_HOST : new RegExp(merge(\"[^\\\\%\\\\[\\\\]\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_PATH : new RegExp(merge(\"[^\\\\%\\\\/\\\\:\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_PATH_NOSCHEME : new RegExp(merge(\"[^\\\\%\\\\/\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_QUERY : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\", IPRIVATE$$), \"g\"),\n\t\tNOT_FRAGMENT : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\"), \"g\"),\n\t\tESCAPE : new RegExp(merge(\"[^]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tUNRESERVED : new RegExp(UNRESERVED$$, \"g\"),\n\t\tOTHER_CHARS : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, RESERVED$$), \"g\"),\n\t\tPCT_ENCODED : new RegExp(PCT_ENCODED$, \"g\"),\n\t\tIPV4ADDRESS : new RegExp(\"^(\" + IPV4ADDRESS$ + \")$\"),\n\t\tIPV6ADDRESS : new RegExp(\"^\\\\[?(\" + IPV6ADDRESS$ + \")\" + subexp(subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + \"(\" + ZONEID$ + \")\") + \"?\\\\]?$\")  //RFC 6874, with relaxed parsing rules\n\t};\n}\n\nexport default buildExps(false);\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tconst parts = string.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tconst labels = string.split('.');\n\tconst encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = array => String.fromCodePoint(...array);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tlet oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tlet inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tlet basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue == n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.1.0',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport default punycode;\n","/**\n * URI.js\n *\n * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/uri-js\n */\n\n/**\n * Copyright 2011 Gary Court. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are\n * permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice, this list of\n *       conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above copyright notice, this list\n *       of conditions and the following disclaimer in the documentation and/or other materials\n *       provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation are those of the\n * authors and should not be interpreted as representing official policies, either expressed\n * or implied, of Gary Court.\n */\n\nimport URI_PROTOCOL from \"./regexps-uri\";\nimport IRI_PROTOCOL from \"./regexps-iri\";\nimport punycode from \"punycode\";\nimport { toUpperCase, typeOf, assign } from \"./util\";\n\nexport interface URIComponents {\n\tscheme?:string;\n\tuserinfo?:string;\n\thost?:string;\n\tport?:number|string;\n\tpath?:string;\n\tquery?:string;\n\tfragment?:string;\n\treference?:string;\n\terror?:string;\n}\n\nexport interface URIOptions {\n\tscheme?:string;\n\treference?:string;\n\ttolerant?:boolean;\n\tabsolutePath?:boolean;\n\tiri?:boolean;\n\tunicodeSupport?:boolean;\n\tdomainHost?:boolean;\n}\n\nexport interface URISchemeHandler<Components extends URIComponents = URIComponents, Options extends URIOptions = URIOptions, ParentComponents extends URIComponents = URIComponents> {\n\tscheme:string;\n\tparse(components:ParentComponents, options:Options):Components;\n\tserialize(components:Components, options:Options):ParentComponents;\n\tunicodeSupport?:boolean;\n\tdomainHost?:boolean;\n\tabsolutePath?:boolean;\n}\n\nexport interface URIRegExps {\n\tNOT_SCHEME : RegExp,\n\tNOT_USERINFO : RegExp,\n\tNOT_HOST : RegExp,\n\tNOT_PATH : RegExp,\n\tNOT_PATH_NOSCHEME : RegExp,\n\tNOT_QUERY : RegExp,\n\tNOT_FRAGMENT : RegExp,\n\tESCAPE : RegExp,\n\tUNRESERVED : RegExp,\n\tOTHER_CHARS : RegExp,\n\tPCT_ENCODED : RegExp,\n\tIPV4ADDRESS : RegExp,\n\tIPV6ADDRESS : RegExp,\n}\n\nexport const SCHEMES:{[scheme:string]:URISchemeHandler} = {};\n\nexport function pctEncChar(chr:string):string {\n\tconst c = chr.charCodeAt(0);\n\tlet e:string;\n\n\tif (c < 16) e = \"%0\" + c.toString(16).toUpperCase();\n\telse if (c < 128) e = \"%\" + c.toString(16).toUpperCase();\n\telse if (c < 2048) e = \"%\" + ((c >> 6) | 192).toString(16).toUpperCase() + \"%\" + ((c & 63) | 128).toString(16).toUpperCase();\n\telse e = \"%\" + ((c >> 12) | 224).toString(16).toUpperCase() + \"%\" + (((c >> 6) & 63) | 128).toString(16).toUpperCase() + \"%\" + ((c & 63) | 128).toString(16).toUpperCase();\n\n\treturn e;\n}\n\nexport function pctDecChars(str:string):string {\n\tlet newStr = \"\";\n\tlet i = 0;\n\tconst il = str.length;\n\n\twhile (i < il) {\n\t\tconst c = parseInt(str.substr(i + 1, 2), 16);\n\n\t\tif (c < 128) {\n\t\t\tnewStr += String.fromCharCode(c);\n\t\t\ti += 3;\n\t\t}\n\t\telse if (c >= 194 && c < 224) {\n\t\t\tif ((il - i) >= 6) {\n\t\t\t\tconst c2 = parseInt(str.substr(i + 4, 2), 16);\n\t\t\t\tnewStr += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n\t\t\t} else {\n\t\t\t\tnewStr += str.substr(i, 6);\n\t\t\t}\n\t\t\ti += 6;\n\t\t}\n\t\telse if (c >= 224) {\n\t\t\tif ((il - i) >= 9) {\n\t\t\t\tconst c2 = parseInt(str.substr(i + 4, 2), 16);\n\t\t\t\tconst c3 = parseInt(str.substr(i + 7, 2), 16);\n\t\t\t\tnewStr += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\t\t\t} else {\n\t\t\t\tnewStr += str.substr(i, 9);\n\t\t\t}\n\t\t\ti += 9;\n\t\t}\n\t\telse {\n\t\t\tnewStr += str.substr(i, 3);\n\t\t\ti += 3;\n\t\t}\n\t}\n\n\treturn newStr;\n}\n\nfunction _normalizeComponentEncoding(components:URIComponents, protocol:URIRegExps) {\n\tfunction decodeUnreserved(str:string):string {\n\t\tconst decStr = pctDecChars(str);\n\t\treturn (!decStr.match(protocol.UNRESERVED) ? str : decStr);\n\t}\n\n\tif (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, \"\");\n\tif (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace((components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME), pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\n\treturn components;\n};\n\nfunction _stripLeadingZeros(str:string):string {\n\treturn str.replace(/^0*(.*)/, \"$1\") || \"0\";\n}\n\nfunction _normalizeIPv4(host:string, protocol:URIRegExps):string {\n\tconst matches = host.match(protocol.IPV4ADDRESS) || [];\n\tconst [, address] = matches;\n\t\n\tif (address) {\n\t\treturn address.split(\".\").map(_stripLeadingZeros).join(\".\");\n\t} else {\n\t\treturn host;\n\t}\n}\n\nfunction _normalizeIPv6(host:string, protocol:URIRegExps):string {\n\tconst matches = host.match(protocol.IPV6ADDRESS) || [];\n\tconst [, address, zone] = matches;\n\n\tif (address) {\n\t\tconst [last, first] = address.toLowerCase().split('::').reverse();\n\t\tconst firstFields = first ? first.split(\":\").map(_stripLeadingZeros) : [];\n\t\tconst lastFields = last.split(\":\").map(_stripLeadingZeros);\n\t\tconst isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);\n\t\tconst fieldCount = isLastFieldIPv4Address ? 7 : 8;\n\t\tconst lastFieldsStart = lastFields.length - fieldCount;\n\t\tconst fields = Array<string>(fieldCount);\n\n\t\tfor (let x = 0; x < fieldCount; ++x) {\n\t\t\tfields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';\n\t\t}\n\n\t\tif (isLastFieldIPv4Address) {\n\t\t\tfields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);\n\t\t}\n\n\t\tconst allZeroFields = fields.reduce<Array<{index:number,length:number}>>((acc, field, index) => {\n\t\t\tif (!field || field === \"0\") {\n\t\t\t\tconst lastLongest = acc[acc.length - 1];\n\t\t\t\tif (lastLongest && lastLongest.index + lastLongest.length === index) {\n\t\t\t\t\tlastLongest.length++;\n\t\t\t\t} else {\n\t\t\t\t\tacc.push({ index, length : 1 });\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, []);\n\n\t\tconst longestZeroFields = allZeroFields.sort((a, b) => b.length - a.length)[0];\n\n\t\tlet newHost:string;\n\t\tif (longestZeroFields && longestZeroFields.length > 1) {\n\t\t\tconst newFirst = fields.slice(0, longestZeroFields.index) ;\n\t\t\tconst newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);\n\t\t\tnewHost = newFirst.join(\":\") + \"::\" + newLast.join(\":\");\n\t\t} else {\n\t\t\tnewHost = fields.join(\":\");\n\t\t}\n\n\t\tif (zone) {\n\t\t\tnewHost += \"%\" + zone;\n\t\t}\n\n\t\treturn newHost;\n\t} else {\n\t\treturn host;\n\t}\n}\n\nconst URI_PARSE = /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:([^\\/?#@]*)@)?(\\[[^\\/?#\\]]+\\]|[^\\/?#:]*)(?:\\:(\\d*))?))?([^?#]*)(?:\\?([^#]*))?(?:#((?:.|\\n|\\r)*))?/i;\nconst NO_MATCH_IS_UNDEFINED = (<RegExpMatchArray>(\"\").match(/(){0}/))[1] === undefined;\n\nexport function parse(uriString:string, options:URIOptions = {}):URIComponents {\n\tconst components:URIComponents = {};\n\tconst protocol = (options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL);\n\n\tif (options.reference === \"suffix\") uriString = (options.scheme ? options.scheme + \":\" : \"\") + \"//\" + uriString;\n\n\tconst matches = uriString.match(URI_PARSE);\n\n\tif (matches) {\n\t\tif (NO_MATCH_IS_UNDEFINED) {\n\t\t\t//store each component\n\t\t\tcomponents.scheme = matches[1];\n\t\t\tcomponents.userinfo = matches[3];\n\t\t\tcomponents.host = matches[4];\n\t\t\tcomponents.port = parseInt(matches[5], 10);\n\t\t\tcomponents.path = matches[6] || \"\";\n\t\t\tcomponents.query = matches[7];\n\t\t\tcomponents.fragment = matches[8];\n\n\t\t\t//fix port number\n\t\t\tif (isNaN(components.port)) {\n\t\t\t\tcomponents.port = matches[5];\n\t\t\t}\n\t\t} else {  //IE FIX for improper RegExp matching\n\t\t\t//store each component\n\t\t\tcomponents.scheme = matches[1] || undefined;\n\t\t\tcomponents.userinfo = (uriString.indexOf(\"@\") !== -1 ? matches[3] : undefined);\n\t\t\tcomponents.host = (uriString.indexOf(\"//\") !== -1 ? matches[4] : undefined);\n\t\t\tcomponents.port = parseInt(matches[5], 10);\n\t\t\tcomponents.path = matches[6] || \"\";\n\t\t\tcomponents.query = (uriString.indexOf(\"?\") !== -1 ? matches[7] : undefined);\n\t\t\tcomponents.fragment = (uriString.indexOf(\"#\") !== -1 ? matches[8] : undefined);\n\n\t\t\t//fix port number\n\t\t\tif (isNaN(components.port)) {\n\t\t\t\tcomponents.port = (uriString.match(/\\/\\/(?:.|\\n)*\\:(?:\\/|\\?|\\#|$)/) ? matches[4] : undefined);\n\t\t\t}\n\t\t}\n\n\t\tif (components.host) {\n\t\t\t//normalize IP hosts\n\t\t\tcomponents.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);\n\t\t}\n\n\t\t//determine reference type\n\t\tif (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {\n\t\t\tcomponents.reference = \"same-document\";\n\t\t} else if (components.scheme === undefined) {\n\t\t\tcomponents.reference = \"relative\";\n\t\t} else if (components.fragment === undefined) {\n\t\t\tcomponents.reference = \"absolute\";\n\t\t} else {\n\t\t\tcomponents.reference = \"uri\";\n\t\t}\n\n\t\t//check for reference errors\n\t\tif (options.reference && options.reference !== \"suffix\" && options.reference !== components.reference) {\n\t\t\tcomponents.error = components.error || \"URI is not a \" + options.reference + \" reference.\";\n\t\t}\n\n\t\t//find scheme handler\n\t\tconst schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n\n\t\t//check if scheme can't handle IRIs\n\t\tif (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n\t\t\t//if host component is a domain name\n\t\t\tif (components.host && (options.domainHost || (schemeHandler && schemeHandler.domainHost))) {\n\t\t\t\t//convert Unicode IDN -> ASCII IDN\n\t\t\t\ttry {\n\t\t\t\t\tcomponents.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcomponents.error = components.error || \"Host's domain name can not be converted to ASCII via punycode: \" + e;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//convert IRI -> URI\n\t\t\t_normalizeComponentEncoding(components, URI_PROTOCOL);\n\t\t} else {\n\t\t\t//normalize encodings\n\t\t\t_normalizeComponentEncoding(components, protocol);\n\t\t}\n\n\t\t//perform scheme specific parsing\n\t\tif (schemeHandler && schemeHandler.parse) {\n\t\t\tschemeHandler.parse(components, options);\n\t\t}\n\t} else {\n\t\tcomponents.error = components.error || \"URI can not be parsed.\";\n\t}\n\n\treturn components;\n};\n\nfunction _recomposeAuthority(components:URIComponents, options:URIOptions):string|undefined {\n\tconst protocol = (options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL);\n\tconst uriTokens:Array<string> = [];\n\n\tif (components.userinfo !== undefined) {\n\t\turiTokens.push(components.userinfo);\n\t\turiTokens.push(\"@\");\n\t}\n\n\tif (components.host !== undefined) {\n\t\t//normalize IP hosts, add brackets and escape zone separator for IPv6\n\t\turiTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, (_, $1, $2) => \"[\" + $1 + ($2 ? \"%25\" + $2 : \"\") + \"]\"));\n\t}\n\n\tif (typeof components.port === \"number\") {\n\t\turiTokens.push(\":\");\n\t\turiTokens.push(components.port.toString(10));\n\t}\n\n\treturn uriTokens.length ? uriTokens.join(\"\") : undefined;\n};\n\nconst RDS1 = /^\\.\\.?\\//;\nconst RDS2 = /^\\/\\.(\\/|$)/;\nconst RDS3 = /^\\/\\.\\.(\\/|$)/;\nconst RDS4 = /^\\.\\.?$/;\nconst RDS5 = /^\\/?(?:.|\\n)*?(?=\\/|$)/;\n\nexport function removeDotSegments(input:string):string {\n\tconst output:Array<string> = [];\n\n\twhile (input.length) {\n\t\tif (input.match(RDS1)) {\n\t\t\tinput = input.replace(RDS1, \"\");\n\t\t} else if (input.match(RDS2)) {\n\t\t\tinput = input.replace(RDS2, \"/\");\n\t\t} else if (input.match(RDS3)) {\n\t\t\tinput = input.replace(RDS3, \"/\");\n\t\t\toutput.pop();\n\t\t} else if (input === \".\" || input === \"..\") {\n\t\t\tinput = \"\";\n\t\t} else {\n\t\t\tconst im = input.match(RDS5);\n\t\t\tif (im) {\n\t\t\t\tconst s = im[0];\n\t\t\t\tinput = input.slice(s.length);\n\t\t\t\toutput.push(s);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unexpected dot segment condition\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn output.join(\"\");\n};\n\nexport function serialize(components:URIComponents, options:URIOptions = {}):string {\n\tconst protocol = (options.iri ? IRI_PROTOCOL : URI_PROTOCOL);\n\tconst uriTokens:Array<string> = [];\n\n\t//find scheme handler\n\tconst schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n\n\t//perform scheme specific serialization\n\tif (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);\n\n\tif (components.host) {\n\t\t//if host component is an IPv6 address\n\t\tif (protocol.IPV6ADDRESS.test(components.host)) {\n\t\t\t//TODO: normalize IPv6 address as per RFC 5952\n\t\t}\n\n\t\t//if host component is a domain name\n\t\telse if (options.domainHost || (schemeHandler && schemeHandler.domainHost)) {\n\t\t\t//convert IDN via punycode\n\t\t\ttry {\n\t\t\t\tcomponents.host = (!options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host));\n\t\t\t} catch (e) {\n\t\t\t\tcomponents.error = components.error || \"Host's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n\t\t\t}\n\t\t}\n\t}\n\n\t//normalize encoding\n\t_normalizeComponentEncoding(components, protocol);\n\n\tif (options.reference !== \"suffix\" && components.scheme) {\n\t\turiTokens.push(components.scheme);\n\t\turiTokens.push(\":\");\n\t}\n\n\tconst authority = _recomposeAuthority(components, options);\n\tif (authority !== undefined) {\n\t\tif (options.reference !== \"suffix\") {\n\t\t\turiTokens.push(\"//\");\n\t\t}\n\n\t\turiTokens.push(authority);\n\n\t\tif (components.path && components.path.charAt(0) !== \"/\") {\n\t\t\turiTokens.push(\"/\");\n\t\t}\n\t}\n\n\tif (components.path !== undefined) {\n\t\tlet s = components.path;\n\n\t\tif (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n\t\t\ts = removeDotSegments(s);\n\t\t}\n\n\t\tif (authority === undefined) {\n\t\t\ts = s.replace(/^\\/\\//, \"/%2F\");  //don't allow the path to start with \"//\"\n\t\t}\n\n\t\turiTokens.push(s);\n\t}\n\n\tif (components.query !== undefined) {\n\t\turiTokens.push(\"?\");\n\t\turiTokens.push(components.query);\n\t}\n\n\tif (components.fragment !== undefined) {\n\t\turiTokens.push(\"#\");\n\t\turiTokens.push(components.fragment);\n\t}\n\n\treturn uriTokens.join(\"\");  //merge tokens into a string\n};\n\nexport function resolveComponents(base:URIComponents, relative:URIComponents, options:URIOptions = {}, skipNormalization?:boolean):URIComponents {\n\tconst target:URIComponents = {};\n\n\tif (!skipNormalization) {\n\t\tbase = parse(serialize(base, options), options);  //normalize base components\n\t\trelative = parse(serialize(relative, options), options);  //normalize relative components\n\t}\n\toptions = options || {};\n\n\tif (!options.tolerant && relative.scheme) {\n\t\ttarget.scheme = relative.scheme;\n\t\t//target.authority = relative.authority;\n\t\ttarget.userinfo = relative.userinfo;\n\t\ttarget.host = relative.host;\n\t\ttarget.port = relative.port;\n\t\ttarget.path = removeDotSegments(relative.path || \"\");\n\t\ttarget.query = relative.query;\n\t} else {\n\t\tif (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n\t\t\t//target.authority = relative.authority;\n\t\t\ttarget.userinfo = relative.userinfo;\n\t\t\ttarget.host = relative.host;\n\t\t\ttarget.port = relative.port;\n\t\t\ttarget.path = removeDotSegments(relative.path || \"\");\n\t\t\ttarget.query = relative.query;\n\t\t} else {\n\t\t\tif (!relative.path) {\n\t\t\t\ttarget.path = base.path;\n\t\t\t\tif (relative.query !== undefined) {\n\t\t\t\t\ttarget.query = relative.query;\n\t\t\t\t} else {\n\t\t\t\t\ttarget.query = base.query;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (relative.path.charAt(0) === \"/\") {\n\t\t\t\t\ttarget.path = removeDotSegments(relative.path);\n\t\t\t\t} else {\n\t\t\t\t\tif ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {\n\t\t\t\t\t\ttarget.path = \"/\" + relative.path;\n\t\t\t\t\t} else if (!base.path) {\n\t\t\t\t\t\ttarget.path = relative.path;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget.path = base.path.slice(0, base.path.lastIndexOf(\"/\") + 1) + relative.path;\n\t\t\t\t\t}\n\t\t\t\t\ttarget.path = removeDotSegments(target.path);\n\t\t\t\t}\n\t\t\t\ttarget.query = relative.query;\n\t\t\t}\n\t\t\t//target.authority = base.authority;\n\t\t\ttarget.userinfo = base.userinfo;\n\t\t\ttarget.host = base.host;\n\t\t\ttarget.port = base.port;\n\t\t}\n\t\ttarget.scheme = base.scheme;\n\t}\n\n\ttarget.fragment = relative.fragment;\n\n\treturn target;\n};\n\nexport function resolve(baseURI:string, relativeURI:string, options?:URIOptions):string {\n\tconst schemelessOptions = assign({ scheme : 'null' }, options);\n\treturn serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);\n};\n\nexport function normalize(uri:string, options?:URIOptions):string;\nexport function normalize(uri:URIComponents, options?:URIOptions):URIComponents;\nexport function normalize(uri:any, options?:URIOptions):any {\n\tif (typeof uri === \"string\") {\n\t\turi = serialize(parse(uri, options), options);\n\t} else if (typeOf(uri) === \"object\") {\n\t\turi = parse(serialize(<URIComponents>uri, options), options);\n\t}\n\n\treturn uri;\n};\n\nexport function equal(uriA:string, uriB:string, options?: URIOptions):boolean;\nexport function equal(uriA:URIComponents, uriB:URIComponents, options?:URIOptions):boolean;\nexport function equal(uriA:any, uriB:any, options?:URIOptions):boolean {\n\tif (typeof uriA === \"string\") {\n\t\turiA = serialize(parse(uriA, options), options);\n\t} else if (typeOf(uriA) === \"object\") {\n\t\turiA = serialize(<URIComponents>uriA, options);\n\t}\n\n\tif (typeof uriB === \"string\") {\n\t\turiB = serialize(parse(uriB, options), options);\n\t} else if (typeOf(uriB) === \"object\") {\n\t\turiB = serialize(<URIComponents>uriB, options);\n\t}\n\n\treturn uriA === uriB;\n};\n\nexport function escapeComponent(str:string, options?:URIOptions):string {\n\treturn str && str.toString().replace((!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE), pctEncChar);\n};\n\nexport function unescapeComponent(str:string, options?:URIOptions):string {\n\treturn str && str.toString().replace((!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED), pctDecChars);\n};\n","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { pctEncChar, pctDecChars, unescapeComponent } from \"../uri\";\nimport punycode from \"punycode\";\nimport { merge, subexp, toUpperCase, toArray } from \"../util\";\n\nexport interface MailtoHeaders {\n\t[hfname:string]:string\n}\n\nexport interface MailtoComponents extends URIComponents {\n\tto:Array<string>,\n\theaders?:MailtoHeaders,\n\tsubject?:string,\n\tbody?:string\n}\n\nconst O:MailtoHeaders = {};\nconst isIRI = true;\n\n//RFC 3986\nconst UNRESERVED$$ = \"[A-Za-z0-9\\\\-\\\\.\\\\_\\\\~\" + (isIRI ? \"\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF\" : \"\") + \"]\";\nconst HEXDIG$$ = \"[0-9A-Fa-f]\";  //case-insensitive\nconst PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$));  //expanded\n\n//RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =\n//const ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\#\\\\$\\\\%\\\\&\\\\'\\\\*\\\\+\\\\-\\\\/\\\\=\\\\?\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QTEXT$$ = \"[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x7F]\";  //(%d1-8 / %d11-12 / %d14-31 / %d127)\n//const QTEXT$$ = merge(\"[\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E]\", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext\n//const VCHAR$$ = \"[\\\\x21-\\\\x7E]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QP$ = subexp(\"\\\\\\\\\" + merge(\"[\\\\x00\\\\x0D\\\\x0A]\", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext\n//const FWS$ = subexp(subexp(WSP$$ + \"*\" + \"\\\\x0D\\\\x0A\") + \"?\" + WSP$$ + \"+\");\n//const QUOTED_PAIR$ = subexp(subexp(\"\\\\\\\\\" + subexp(VCHAR$$ + \"|\" + WSP$$)) + \"|\" + OBS_QP$);\n//const QUOTED_STRING$ = subexp('\\\\\"' + subexp(FWS$ + \"?\" + QCONTENT$) + \"*\" + FWS$ + \"?\" + '\\\\\"');\nconst ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\$\\\\%\\\\'\\\\*\\\\+\\\\-\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\nconst QTEXT$$ = \"[\\\\!\\\\$\\\\%\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.0-9\\\\<\\\\>A-Z\\\\x5E-\\\\x7E]\";\nconst VCHAR$$ = merge(QTEXT$$, \"[\\\\\\\"\\\\\\\\]\");\nconst DOT_ATOM_TEXT$ = subexp(ATEXT$$ + \"+\" + subexp(\"\\\\.\" + ATEXT$$ + \"+\") + \"*\");\nconst QUOTED_PAIR$ = subexp(\"\\\\\\\\\" + VCHAR$$);\nconst QCONTENT$ = subexp(QTEXT$$ + \"|\" + QUOTED_PAIR$);\nconst QUOTED_STRING$ = subexp('\\\\\"' + QCONTENT$ + \"*\" + '\\\\\"');\n\n//RFC 6068\nconst DTEXT_NO_OBS$$ = \"[\\\\x21-\\\\x5A\\\\x5E-\\\\x7E]\";  //%d33-90 / %d94-126\nconst SOME_DELIMS$$ = \"[\\\\!\\\\$\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\:\\\\@]\";\nconst QCHAR$ = subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$ + \"|\" + SOME_DELIMS$$);\nconst DOMAIN$ = subexp(DOT_ATOM_TEXT$ + \"|\" + \"\\\\[\" + DTEXT_NO_OBS$$ + \"*\" + \"\\\\]\");\nconst LOCAL_PART$ = subexp(DOT_ATOM_TEXT$ + \"|\" + QUOTED_STRING$);\nconst ADDR_SPEC$ = subexp(LOCAL_PART$ + \"\\\\@\" + DOMAIN$);\nconst TO$ = subexp(ADDR_SPEC$ + subexp(\"\\\\,\" + ADDR_SPEC$) + \"*\");\nconst HFNAME$ = subexp(QCHAR$ + \"*\");\nconst HFVALUE$ = HFNAME$;\nconst HFIELD$ = subexp(HFNAME$ + \"\\\\=\" + HFVALUE$);\nconst HFIELDS2$ = subexp(HFIELD$ + subexp(\"\\\\&\" + HFIELD$) + \"*\");\nconst HFIELDS$ = subexp(\"\\\\?\" + HFIELDS2$);\nconst MAILTO_URI = new RegExp(\"^mailto\\\\:\" + TO$ + \"?\" + HFIELDS$ + \"?$\");\n\nconst UNRESERVED = new RegExp(UNRESERVED$$, \"g\");\nconst PCT_ENCODED = new RegExp(PCT_ENCODED$, \"g\");\nconst NOT_LOCAL_PART = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", '[\\\\\"]', VCHAR$$), \"g\");\nconst NOT_DOMAIN = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", \"[\\\\[]\", DTEXT_NO_OBS$$, \"[\\\\]]\"), \"g\");\nconst NOT_HFNAME = new RegExp(merge(\"[^]\", UNRESERVED$$, SOME_DELIMS$$), \"g\");\nconst NOT_HFVALUE = NOT_HFNAME;\nconst TO = new RegExp(\"^\" + TO$ + \"$\");\nconst HFIELDS = new RegExp(\"^\" + HFIELDS2$ + \"$\");\n\nfunction decodeUnreserved(str:string):string {\n\tconst decStr = pctDecChars(str);\n\treturn (!decStr.match(UNRESERVED) ? str : decStr);\n}\n\nconst handler:URISchemeHandler<MailtoComponents> =  {\n\tscheme : \"mailto\",\n\n\tparse : function (components:URIComponents, options:URIOptions):MailtoComponents {\n\t\tconst mailtoComponents = components as MailtoComponents;\n\t\tconst to = mailtoComponents.to = (mailtoComponents.path ? mailtoComponents.path.split(\",\") : []);\n\t\tmailtoComponents.path = undefined;\n\n\t\tif (mailtoComponents.query) {\n\t\t\tlet unknownHeaders = false\n\t\t\tconst headers:MailtoHeaders = {};\n\t\t\tconst hfields = mailtoComponents.query.split(\"&\");\n\n\t\t\tfor (let x = 0, xl = hfields.length; x < xl; ++x) {\n\t\t\t\tconst hfield = hfields[x].split(\"=\");\n\n\t\t\t\tswitch (hfield[0]) {\n\t\t\t\t\tcase \"to\":\n\t\t\t\t\t\tconst toAddrs = hfield[1].split(\",\");\n\t\t\t\t\t\tfor (let x = 0, xl = toAddrs.length; x < xl; ++x) {\n\t\t\t\t\t\t\tto.push(toAddrs[x]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"subject\":\n\t\t\t\t\t\tmailtoComponents.subject = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"body\":\n\t\t\t\t\t\tmailtoComponents.body = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tunknownHeaders = true;\n\t\t\t\t\t\theaders[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (unknownHeaders) mailtoComponents.headers = headers;\n\t\t}\n\n\t\tmailtoComponents.query = undefined;\n\n\t\tfor (let x = 0, xl = to.length; x < xl; ++x) {\n\t\t\tconst addr = to[x].split(\"@\");\n\n\t\t\taddr[0] = unescapeComponent(addr[0]);\n\n\t\t\tif (!options.unicodeSupport) {\n\t\t\t\t//convert Unicode IDN -> ASCII IDN\n\t\t\t\ttry {\n\t\t\t\t\taddr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tmailtoComponents.error = mailtoComponents.error || \"Email address's domain name can not be converted to ASCII via punycode: \" + e;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\taddr[1] = unescapeComponent(addr[1], options).toLowerCase();\n\t\t\t}\n\n\t\t\tto[x] = addr.join(\"@\");\n\t\t}\n\n\t\treturn mailtoComponents;\n\t},\n\n\tserialize : function (mailtoComponents:MailtoComponents, options:URIOptions):URIComponents {\n\t\tconst components = mailtoComponents as URIComponents;\n\t\tconst to = toArray(mailtoComponents.to);\n\t\tif (to) {\n\t\t\tfor (let x = 0, xl = to.length; x < xl; ++x) {\n\t\t\t\tconst toAddr = String(to[x]);\n\t\t\t\tconst atIdx = toAddr.lastIndexOf(\"@\");\n\t\t\t\tconst localPart = (toAddr.slice(0, atIdx)).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);\n\t\t\t\tlet domain = toAddr.slice(atIdx + 1);\n\n\t\t\t\t//convert IDN via punycode\n\t\t\t\ttry {\n\t\t\t\t\tdomain = (!options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcomponents.error = components.error || \"Email address's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n\t\t\t\t}\n\n\t\t\t\tto[x] = localPart + \"@\" + domain;\n\t\t\t}\n\n\t\t\tcomponents.path = to.join(\",\");\n\t\t}\n\n\t\tconst headers = mailtoComponents.headers = mailtoComponents.headers || {};\n\n\t\tif (mailtoComponents.subject) headers[\"subject\"] = mailtoComponents.subject;\n\t\tif (mailtoComponents.body) headers[\"body\"] = mailtoComponents.body;\n\n\t\tconst fields = [];\n\t\tfor (const name in headers) {\n\t\t\tif (headers[name] !== O[name]) {\n\t\t\t\tfields.push(\n\t\t\t\t\tname.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) +\n\t\t\t\t\t\"=\" +\n\t\t\t\t\theaders[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (fields.length) {\n\t\t\tcomponents.query = fields.join(\"&\");\n\t\t}\n\n\t\treturn components;\n\t}\n}\n\nexport default handler;","import { URIRegExps } from \"./uri\";\nimport { buildExps } from \"./regexps-uri\";\n\nexport default buildExps(true);\n","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"http\",\n\n\tdomainHost : true,\n\n\tparse : function (components:URIComponents, options:URIOptions):URIComponents {\n\t\t//report missing host\n\t\tif (!components.host) {\n\t\t\tcomponents.error = components.error || \"HTTP URIs must have a host.\";\n\t\t}\n\n\t\treturn components;\n\t},\n\n\tserialize : function (components:URIComponents, options:URIOptions):URIComponents {\n\t\t//normalize the default port\n\t\tif (components.port === (String(components.scheme).toLowerCase() !== \"https\" ? 80 : 443) || components.port === \"\") {\n\t\t\tcomponents.port = undefined;\n\t\t}\n\t\t\n\t\t//normalize the empty path\n\t\tif (!components.path) {\n\t\t\tcomponents.path = \"/\";\n\t\t}\n\n\t\t//NOTE: We do not parse query strings for HTTP URIs\n\t\t//as WWW Form Url Encoded query strings are part of the HTML4+ spec,\n\t\t//and not the HTTP spec.\n\n\t\treturn components;\n\t}\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport http from \"./http\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"https\",\n\tdomainHost : http.domainHost,\n\tparse : http.parse,\n\tserialize : http.serialize\n}\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { pctEncChar, SCHEMES } from \"../uri\";\n\nexport interface URNComponents extends URIComponents {\n\tnid?:string;\n\tnss?:string;\n}\n\nexport interface URNOptions extends URIOptions {\n\tnid?:string;\n}\n\nconst NID$ = \"(?:[0-9A-Za-z][0-9A-Za-z\\\\-]{1,31})\";\nconst PCT_ENCODED$ = \"(?:\\\\%[0-9A-Fa-f]{2})\";\nconst TRANS$$ = \"[0-9A-Za-z\\\\(\\\\)\\\\+\\\\,\\\\-\\\\.\\\\:\\\\=\\\\@\\\\;\\\\$\\\\_\\\\!\\\\*\\\\'\\\\/\\\\?\\\\#]\";\nconst NSS$ = \"(?:(?:\" + PCT_ENCODED$ + \"|\" + TRANS$$ + \")+)\";\nconst URN_SCHEME = new RegExp(\"^urn\\\\:(\" + NID$ + \")$\");\nconst URN_PATH = new RegExp(\"^(\" + NID$ + \")\\\\:(\" + NSS$ + \")$\");\nconst URN_PARSE = /^([^\\:]+)\\:(.*)/;\nconst URN_EXCLUDED = /[\\x00-\\x20\\\\\\\"\\&\\<\\>\\[\\]\\^\\`\\{\\|\\}\\~\\x7F-\\xFF]/g;\n\n//RFC 2141\nconst handler:URISchemeHandler<URNComponents,URNOptions> = {\n\tscheme : \"urn\",\n\n\tparse : function (components:URIComponents, options:URNOptions):URNComponents {\n\t\tconst matches = components.path && components.path.match(URN_PARSE);\n\t\tlet urnComponents = components as URNComponents;\n\n\t\tif (matches) {\n\t\t\tconst scheme = options.scheme || urnComponents.scheme || \"urn\";\n\t\t\tconst nid = matches[1].toLowerCase();\n\t\t\tconst nss = matches[2];\n\t\t\tconst urnScheme = `${scheme}:${options.nid || nid}`;\n\t\t\tconst schemeHandler = SCHEMES[urnScheme];\n\n\t\t\turnComponents.nid = nid;\n\t\t\turnComponents.nss = nss;\n\t\t\turnComponents.path = undefined;\n\n\t\t\tif (schemeHandler) {\n\t\t\t\turnComponents = schemeHandler.parse(urnComponents, options) as URNComponents;\n\t\t\t}\n\t\t} else {\n\t\t\turnComponents.error = urnComponents.error || \"URN can not be parsed.\";\n\t\t}\n\n\t\treturn urnComponents;\n\t},\n\n\tserialize : function (urnComponents:URNComponents, options:URNOptions):URIComponents {\n\t\tconst scheme = options.scheme || urnComponents.scheme || \"urn\";\n\t\tconst nid = urnComponents.nid;\n\t\tconst urnScheme = `${scheme}:${options.nid || nid}`;\n\t\tconst schemeHandler = SCHEMES[urnScheme];\n\n\t\tif (schemeHandler) {\n\t\t\turnComponents = schemeHandler.serialize(urnComponents, options) as URNComponents;\n\t\t}\n\n\t\tconst uriComponents = urnComponents as URIComponents;\n\t\tconst nss = urnComponents.nss;\n\t\turiComponents.path = `${nid || options.nid}:${nss}`;\n\n\t\treturn uriComponents;\n\t},\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { URNComponents } from \"./urn\";\nimport { SCHEMES } from \"../uri\";\n\nexport interface UUIDComponents extends URNComponents {\n\tuuid?: string;\n}\n\nconst UUID = /^[0-9A-Fa-f]{8}(?:\\-[0-9A-Fa-f]{4}){3}\\-[0-9A-Fa-f]{12}$/;\nconst UUID_PARSE = /^[0-9A-Fa-f\\-]{36}/;\n\n//RFC 4122\nconst handler:URISchemeHandler<UUIDComponents, URIOptions, URNComponents> = {\n\tscheme : \"urn:uuid\",\n\n\tparse : function (urnComponents:URNComponents, options:URIOptions):UUIDComponents {\n\t\tconst uuidComponents = urnComponents as UUIDComponents;\n\t\tuuidComponents.uuid = uuidComponents.nss;\n\t\tuuidComponents.nss = undefined;\n\n\t\tif (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {\n\t\t\tuuidComponents.error = uuidComponents.error || \"UUID is not valid.\";\n\t\t}\n\n\t\treturn uuidComponents;\n\t},\n\n\tserialize : function (uuidComponents:UUIDComponents, options:URIOptions):URNComponents {\n\t\tconst urnComponents = uuidComponents as URNComponents;\n\t\t//normalize UUID\n\t\turnComponents.nss = (uuidComponents.uuid || \"\").toLowerCase();\n\t\treturn urnComponents;\n\t},\n};\n\nexport default handler;","import { SCHEMES } from \"./uri\";\n\nimport http from \"./schemes/http\";\nSCHEMES[http.scheme] = http;\n\nimport https from \"./schemes/https\";\nSCHEMES[https.scheme] = https;\n\nimport mailto from \"./schemes/mailto\";\nSCHEMES[mailto.scheme] = mailto;\n\nimport urn from \"./schemes/urn\";\nSCHEMES[urn.scheme] = urn;\n\nimport uuid from \"./schemes/urn-uuid\";\nSCHEMES[uuid.scheme] = uuid;\n\nexport * from \"./uri\";\n"]},"metadata":{},"sourceType":"script"}