{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst assert = require('assert');\n\nconst path = require('path');\n\nconst errors = require('./errors');\n\nconst filterFiles = require('./filter-files');\n\nconst getCompositeDetails = require('./get-composite-details');\n\nconst getFileDetails = require('./get-file-details');\n\nconst getStringDetails = require('./get-string-details');\n\nmodule.exports = async ({\n  dontCacheBustURLsMatching,\n  globDirectory,\n  globFollow,\n  globIgnores,\n  globPatterns,\n  globStrict,\n  manifestTransforms,\n  maximumFileSizeToCacheInBytes,\n  modifyURLPrefix,\n  swDest,\n  templatedURLs\n}) => {\n  const warnings = []; // Initialize to an empty array so that we can still pass something to\n  // filterFiles() and get a normalized output.\n\n  let fileDetails = [];\n  const fileSet = new Set();\n\n  if (globDirectory) {\n    if (swDest) {\n      // Ensure that we ignore the SW file we're eventually writing to disk.\n      globIgnores.push(`**/${path.basename(swDest)}`);\n    }\n\n    try {\n      fileDetails = globPatterns.reduce((accumulated, globPattern) => {\n        const globbedFileDetails = getFileDetails({\n          globDirectory,\n          globFollow,\n          globIgnores,\n          globPattern,\n          globStrict\n        });\n        globbedFileDetails.forEach(fileDetails => {\n          if (fileSet.has(fileDetails.file)) {\n            return;\n          }\n\n          fileSet.add(fileDetails.file);\n          accumulated.push(fileDetails);\n        });\n        return accumulated;\n      }, []);\n    } catch (error) {\n      // If there's an exception thrown while globbing, then report\n      // it back as a warning, and don't consider it fatal.\n      warnings.push(error.message);\n    }\n  }\n\n  if (templatedURLs) {\n    for (let url of Object.keys(templatedURLs)) {\n      assert(!fileSet.has(url), errors['templated-url-matches-glob']);\n      const dependencies = templatedURLs[url];\n\n      if (Array.isArray(dependencies)) {\n        const details = dependencies.reduce((previous, globPattern) => {\n          try {\n            const globbedFileDetails = getFileDetails({\n              globDirectory,\n              globFollow,\n              globIgnores,\n              globPattern,\n              globStrict\n            });\n            return previous.concat(globbedFileDetails);\n          } catch (error) {\n            const debugObj = {};\n            debugObj[url] = dependencies;\n            throw new Error(`${errors['bad-template-urls-asset']} ` + `'${globPattern}' from '${JSON.stringify(debugObj)}':\\n` + error);\n          }\n        }, []);\n        fileDetails.push(getCompositeDetails(url, details));\n      } else if (typeof dependencies === 'string') {\n        fileDetails.push(getStringDetails(url, dependencies));\n      }\n    }\n  }\n\n  const filteredFiles = filterFiles({\n    fileDetails,\n    maximumFileSizeToCacheInBytes,\n    modifyURLPrefix,\n    dontCacheBustURLsMatching,\n    manifestTransforms\n  });\n\n  if (warnings.length > 0) {\n    filteredFiles.warnings.push(...warnings);\n  }\n\n  return filteredFiles;\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-build/src/lib/get-file-manifest-entries.js"],"names":["assert","require","path","errors","filterFiles","getCompositeDetails","getFileDetails","getStringDetails","module","exports","dontCacheBustURLsMatching","globDirectory","globFollow","globIgnores","globPatterns","globStrict","manifestTransforms","maximumFileSizeToCacheInBytes","modifyURLPrefix","swDest","templatedURLs","warnings","fileDetails","fileSet","Set","push","basename","reduce","accumulated","globPattern","globbedFileDetails","forEach","has","file","add","error","message","url","Object","keys","dependencies","Array","isArray","details","previous","concat","debugObj","Error","JSON","stringify","filteredFiles","length"],"mappings":"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","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst assert = require('assert');\nconst path = require('path');\n\nconst errors = require('./errors');\nconst filterFiles = require('./filter-files');\nconst getCompositeDetails = require('./get-composite-details');\nconst getFileDetails = require('./get-file-details');\nconst getStringDetails = require('./get-string-details');\n\nmodule.exports = async ({\n  dontCacheBustURLsMatching,\n  globDirectory,\n  globFollow,\n  globIgnores,\n  globPatterns,\n  globStrict,\n  manifestTransforms,\n  maximumFileSizeToCacheInBytes,\n  modifyURLPrefix,\n  swDest,\n  templatedURLs,\n}) => {\n  const warnings = [];\n  // Initialize to an empty array so that we can still pass something to\n  // filterFiles() and get a normalized output.\n  let fileDetails = [];\n  const fileSet = new Set();\n\n  if (globDirectory) {\n    if (swDest) {\n      // Ensure that we ignore the SW file we're eventually writing to disk.\n      globIgnores.push(`**/${path.basename(swDest)}`);\n    }\n\n    try {\n      fileDetails = globPatterns.reduce((accumulated, globPattern) => {\n        const globbedFileDetails = getFileDetails({\n          globDirectory,\n          globFollow,\n          globIgnores,\n          globPattern,\n          globStrict,\n        });\n\n        globbedFileDetails.forEach((fileDetails) => {\n          if (fileSet.has(fileDetails.file)) {\n            return;\n          }\n\n          fileSet.add(fileDetails.file);\n          accumulated.push(fileDetails);\n        });\n        return accumulated;\n      }, []);\n    } catch (error) {\n      // If there's an exception thrown while globbing, then report\n      // it back as a warning, and don't consider it fatal.\n      warnings.push(error.message);\n    }\n  }\n\n  if (templatedURLs) {\n    for (let url of Object.keys(templatedURLs)) {\n      assert(!fileSet.has(url), errors['templated-url-matches-glob']);\n\n      const dependencies = templatedURLs[url];\n      if (Array.isArray(dependencies)) {\n        const details = dependencies.reduce((previous, globPattern) => {\n          try {\n            const globbedFileDetails = getFileDetails({\n              globDirectory,\n              globFollow,\n              globIgnores,\n              globPattern,\n              globStrict,\n            });\n            return previous.concat(globbedFileDetails);\n          } catch (error) {\n            const debugObj = {};\n            debugObj[url] = dependencies;\n            throw new Error(`${errors['bad-template-urls-asset']} ` +\n              `'${globPattern}' from '${JSON.stringify(debugObj)}':\\n` +\n              error);\n          }\n        }, []);\n        fileDetails.push(getCompositeDetails(url, details));\n      } else if (typeof dependencies === 'string') {\n        fileDetails.push(getStringDetails(url, dependencies));\n      }\n    }\n  }\n\n  const filteredFiles = filterFiles({fileDetails,\n    maximumFileSizeToCacheInBytes, modifyURLPrefix, dontCacheBustURLsMatching,\n    manifestTransforms});\n\n  if (warnings.length > 0) {\n    filteredFiles.warnings.push(...warnings);\n  }\n\n  return filteredFiles;\n};\n"]},"metadata":{},"sourceType":"script"}