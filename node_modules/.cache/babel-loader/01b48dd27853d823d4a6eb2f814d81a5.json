{"ast":null,"code":"// Generated by LiveScript 1.4.0\n(function () {\n  var ref$,\n      any,\n      all,\n      isItNaN,\n      types,\n      defaultType,\n      customTypes,\n      toString$ = {}.toString;\n  ref$ = require('prelude-ls'), any = ref$.any, all = ref$.all, isItNaN = ref$.isItNaN;\n  types = {\n    Number: {\n      typeOf: 'Number',\n      validate: function (it) {\n        return !isItNaN(it);\n      }\n    },\n    NaN: {\n      typeOf: 'Number',\n      validate: isItNaN\n    },\n    Int: {\n      typeOf: 'Number',\n      validate: function (it) {\n        return !isItNaN(it) && it % 1 === 0;\n      }\n    },\n    Float: {\n      typeOf: 'Number',\n      validate: function (it) {\n        return !isItNaN(it);\n      }\n    },\n    Date: {\n      typeOf: 'Date',\n      validate: function (it) {\n        return !isItNaN(it.getTime());\n      }\n    }\n  };\n  defaultType = {\n    array: 'Array',\n    tuple: 'Array'\n  };\n\n  function checkArray(input, type) {\n    return all(function (it) {\n      return checkMultiple(it, type.of);\n    }, input);\n  }\n\n  function checkTuple(input, type) {\n    var i, i$, ref$, len$, types;\n    i = 0;\n\n    for (i$ = 0, len$ = (ref$ = type.of).length; i$ < len$; ++i$) {\n      types = ref$[i$];\n\n      if (!checkMultiple(input[i], types)) {\n        return false;\n      }\n\n      i++;\n    }\n\n    return input.length <= i;\n  }\n\n  function checkFields(input, type) {\n    var inputKeys, numInputKeys, k, numOfKeys, key, ref$, types;\n    inputKeys = {};\n    numInputKeys = 0;\n\n    for (k in input) {\n      inputKeys[k] = true;\n      numInputKeys++;\n    }\n\n    numOfKeys = 0;\n\n    for (key in ref$ = type.of) {\n      types = ref$[key];\n\n      if (!checkMultiple(input[key], types)) {\n        return false;\n      }\n\n      if (inputKeys[key]) {\n        numOfKeys++;\n      }\n    }\n\n    return type.subset || numInputKeys === numOfKeys;\n  }\n\n  function checkStructure(input, type) {\n    if (!(input instanceof Object)) {\n      return false;\n    }\n\n    switch (type.structure) {\n      case 'fields':\n        return checkFields(input, type);\n\n      case 'array':\n        return checkArray(input, type);\n\n      case 'tuple':\n        return checkTuple(input, type);\n    }\n  }\n\n  function check(input, typeObj) {\n    var type, structure, setting, that;\n    type = typeObj.type, structure = typeObj.structure;\n\n    if (type) {\n      if (type === '*') {\n        return true;\n      }\n\n      setting = customTypes[type] || types[type];\n\n      if (setting) {\n        return setting.typeOf === toString$.call(input).slice(8, -1) && setting.validate(input);\n      } else {\n        return type === toString$.call(input).slice(8, -1) && (!structure || checkStructure(input, typeObj));\n      }\n    } else if (structure) {\n      if (that = defaultType[structure]) {\n        if (that !== toString$.call(input).slice(8, -1)) {\n          return false;\n        }\n      }\n\n      return checkStructure(input, typeObj);\n    } else {\n      throw new Error(\"No type defined. Input: \" + input + \".\");\n    }\n  }\n\n  function checkMultiple(input, types) {\n    if (toString$.call(types).slice(8, -1) !== 'Array') {\n      throw new Error(\"Types must be in an array. Input: \" + input + \".\");\n    }\n\n    return any(function (it) {\n      return check(input, it);\n    }, types);\n  }\n\n  module.exports = function (parsedType, input, options) {\n    options == null && (options = {});\n    customTypes = options.customTypes || {};\n    return checkMultiple(input, parsedType);\n  };\n}).call(this);","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/type-check/lib/check.js"],"names":["ref$","any","all","isItNaN","types","defaultType","customTypes","toString$","toString","require","Number","typeOf","validate","it","NaN","Int","Float","Date","getTime","array","tuple","checkArray","input","type","checkMultiple","of","checkTuple","i","i$","len$","length","checkFields","inputKeys","numInputKeys","k","numOfKeys","key","subset","checkStructure","Object","structure","check","typeObj","setting","that","call","slice","Error","module","exports","parsedType","options"],"mappings":"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","sourcesContent":["// Generated by LiveScript 1.4.0\n(function(){\n  var ref$, any, all, isItNaN, types, defaultType, customTypes, toString$ = {}.toString;\n  ref$ = require('prelude-ls'), any = ref$.any, all = ref$.all, isItNaN = ref$.isItNaN;\n  types = {\n    Number: {\n      typeOf: 'Number',\n      validate: function(it){\n        return !isItNaN(it);\n      }\n    },\n    NaN: {\n      typeOf: 'Number',\n      validate: isItNaN\n    },\n    Int: {\n      typeOf: 'Number',\n      validate: function(it){\n        return !isItNaN(it) && it % 1 === 0;\n      }\n    },\n    Float: {\n      typeOf: 'Number',\n      validate: function(it){\n        return !isItNaN(it);\n      }\n    },\n    Date: {\n      typeOf: 'Date',\n      validate: function(it){\n        return !isItNaN(it.getTime());\n      }\n    }\n  };\n  defaultType = {\n    array: 'Array',\n    tuple: 'Array'\n  };\n  function checkArray(input, type){\n    return all(function(it){\n      return checkMultiple(it, type.of);\n    }, input);\n  }\n  function checkTuple(input, type){\n    var i, i$, ref$, len$, types;\n    i = 0;\n    for (i$ = 0, len$ = (ref$ = type.of).length; i$ < len$; ++i$) {\n      types = ref$[i$];\n      if (!checkMultiple(input[i], types)) {\n        return false;\n      }\n      i++;\n    }\n    return input.length <= i;\n  }\n  function checkFields(input, type){\n    var inputKeys, numInputKeys, k, numOfKeys, key, ref$, types;\n    inputKeys = {};\n    numInputKeys = 0;\n    for (k in input) {\n      inputKeys[k] = true;\n      numInputKeys++;\n    }\n    numOfKeys = 0;\n    for (key in ref$ = type.of) {\n      types = ref$[key];\n      if (!checkMultiple(input[key], types)) {\n        return false;\n      }\n      if (inputKeys[key]) {\n        numOfKeys++;\n      }\n    }\n    return type.subset || numInputKeys === numOfKeys;\n  }\n  function checkStructure(input, type){\n    if (!(input instanceof Object)) {\n      return false;\n    }\n    switch (type.structure) {\n    case 'fields':\n      return checkFields(input, type);\n    case 'array':\n      return checkArray(input, type);\n    case 'tuple':\n      return checkTuple(input, type);\n    }\n  }\n  function check(input, typeObj){\n    var type, structure, setting, that;\n    type = typeObj.type, structure = typeObj.structure;\n    if (type) {\n      if (type === '*') {\n        return true;\n      }\n      setting = customTypes[type] || types[type];\n      if (setting) {\n        return setting.typeOf === toString$.call(input).slice(8, -1) && setting.validate(input);\n      } else {\n        return type === toString$.call(input).slice(8, -1) && (!structure || checkStructure(input, typeObj));\n      }\n    } else if (structure) {\n      if (that = defaultType[structure]) {\n        if (that !== toString$.call(input).slice(8, -1)) {\n          return false;\n        }\n      }\n      return checkStructure(input, typeObj);\n    } else {\n      throw new Error(\"No type defined. Input: \" + input + \".\");\n    }\n  }\n  function checkMultiple(input, types){\n    if (toString$.call(types).slice(8, -1) !== 'Array') {\n      throw new Error(\"Types must be in an array. Input: \" + input + \".\");\n    }\n    return any(function(it){\n      return check(input, it);\n    }, types);\n  }\n  module.exports = function(parsedType, input, options){\n    options == null && (options = {});\n    customTypes = options.customTypes || {};\n    return checkMultiple(input, parsedType);\n  };\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}