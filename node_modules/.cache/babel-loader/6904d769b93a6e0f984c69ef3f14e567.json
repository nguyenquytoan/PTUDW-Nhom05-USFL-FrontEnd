{"ast":null,"code":"/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nvar path = require('path'),\n    fs = require('fs'),\n    loaderUtils = require('loader-utils'),\n    camelcase = require('camelcase'),\n    SourceMapConsumer = require('source-map').SourceMapConsumer;\n\nvar adjustSourceMap = require('adjust-sourcemap-loader/lib/process');\n\nvar valueProcessor = require('./lib/value-processor');\n\nvar joinFn = require('./lib/join-function');\n\nvar logToTestHarness = require('./lib/log-to-test-harness');\n\nvar PACKAGE_NAME = require('./package.json').name;\n/**\n * A webpack loader that resolves absolute url() paths relative to their original source file.\n * Requires source-maps to do any meaningful work.\n * @param {string} content Css content\n * @param {object} sourceMap The source-map\n * @returns {string|String}\n */\n\n\nfunction resolveUrlLoader(content, sourceMap) {\n  /* jshint validthis:true */\n  // details of the file being processed\n  var loader = this; // a relative loader.context is a problem\n\n  if (/^\\./.test(loader.context)) {\n    return handleAsError('webpack misconfiguration', 'loader.context is relative, expected absolute');\n  } // webpack 1: prefer loader query, else options object\n  // webpack 2: prefer loader options\n  // webpack 3: deprecate loader.options object\n  // webpack 4: loader.options no longer defined\n\n\n  var options = Object.assign({\n    sourceMap: loader.sourceMap,\n    engine: 'postcss',\n    silent: false,\n    absolute: false,\n    keepQuery: false,\n    removeCR: false,\n    root: false,\n    debug: false,\n    join: joinFn.defaultJoin\n  }, !!loader.options && loader.options[camelcase(PACKAGE_NAME)], loaderUtils.getOptions(loader)); // maybe log options for the test harness\n\n  logToTestHarness(options); // defunct options\n\n  if ('attempts' in options) {\n    handleAsWarning('loader misconfiguration', '\"attempts\" option is defunct (consider \"join\" option if search is needed)');\n  }\n\n  if ('includeRoot' in options) {\n    handleAsWarning('loader misconfiguration', '\"includeRoot\" option is defunct (consider \"join\" option if search is needed)');\n  }\n\n  if ('fail' in options) {\n    handleAsWarning('loader misconfiguration', '\"fail\" option is defunct');\n  } // validate join option\n\n\n  if (typeof options.join !== 'function') {\n    return handleAsError('loader misconfiguration', '\"join\" option must be a Function');\n  } else if (options.join.length !== 2) {\n    return handleAsError('loader misconfiguration', '\"join\" Function must take exactly 2 arguments (filename and options hash)');\n  } // validate root option\n\n\n  if (typeof options.root === 'string') {\n    var isValid = options.root === '' || path.isAbsolute(options.root) && fs.existsSync(options.root) && fs.statSync(options.root).isDirectory();\n\n    if (!isValid) {\n      return handleAsError('loader misconfiguration', '\"root\" option must be an empty string or an absolute path to an existing directory');\n    }\n  } else if (options.root !== false) {\n    handleAsWarning('loader misconfiguration', '\"root\" option must be string where used or false where unused');\n  } // loader result is cacheable\n\n\n  loader.cacheable(); // incoming source-map\n\n  var sourceMapConsumer, absSourceMap;\n\n  if (sourceMap) {\n    // support non-standard string encoded source-map (per less-loader)\n    if (typeof sourceMap === 'string') {\n      try {\n        sourceMap = JSON.parse(sourceMap);\n      } catch (exception) {\n        return handleAsError('source-map error', 'cannot parse source-map string (from less-loader?)');\n      }\n    } // leverage adjust-sourcemap-loader's codecs to avoid having to make any assumptions about the sourcemap\n    //  historically this is a regular source of breakage\n\n\n    try {\n      absSourceMap = adjustSourceMap(loader, {\n        format: 'absolute'\n      }, sourceMap);\n    } catch (exception) {\n      return handleAsError('source-map error', exception.message);\n    } // prepare the adjusted sass source-map for later look-ups\n\n\n    sourceMapConsumer = new SourceMapConsumer(absSourceMap);\n  } // choose a CSS engine\n\n\n  var enginePath = /^\\w+$/.test(options.engine) && path.join(__dirname, 'lib', 'engine', options.engine + '.js');\n  var isValidEngine = fs.existsSync(enginePath);\n\n  if (!isValidEngine) {\n    return handleAsError('loader misconfiguration', '\"engine\" option is not valid');\n  } // process async\n\n\n  var callback = loader.async();\n  Promise.resolve(require(enginePath)(loader.resourcePath, content, {\n    outputSourceMap: !!options.sourceMap,\n    transformDeclaration: valueProcessor(loader.resourcePath, options),\n    absSourceMap: absSourceMap,\n    sourceMapConsumer: sourceMapConsumer,\n    removeCR: options.removeCR\n  })).catch(onFailure).then(onSuccess);\n\n  function onFailure(error) {\n    callback(encodeError('CSS error', error));\n  }\n\n  function onSuccess(reworked) {\n    if (reworked) {\n      // complete with source-map\n      //  source-map sources are relative to the file being processed\n      if (options.sourceMap) {\n        var finalMap = adjustSourceMap(loader, {\n          format: 'sourceRelative'\n        }, reworked.map);\n        callback(null, reworked.content, finalMap);\n      } // complete without source-map\n      else {\n          callback(null, reworked.content);\n        }\n    }\n  }\n  /**\n   * Push a warning for the given exception and return the original content.\n   * @param {string} label Summary of the error\n   * @param {string|Error} [exception] Optional extended error details\n   * @returns {string} The original CSS content\n   */\n\n\n  function handleAsWarning(label, exception) {\n    if (!options.silent) {\n      loader.emitWarning(encodeError(label, exception));\n    }\n\n    return content;\n  }\n  /**\n   * Push a warning for the given exception and return the original content.\n   * @param {string} label Summary of the error\n   * @param {string|Error} [exception] Optional extended error details\n   * @returns {string} The original CSS content\n   */\n\n\n  function handleAsError(label, exception) {\n    loader.emitError(encodeError(label, exception));\n    return content;\n  }\n\n  function encodeError(label, exception) {\n    return new Error([PACKAGE_NAME, ': ', [label].concat(typeof exception === 'string' && exception || exception instanceof Error && [exception.message, exception.stack.split('\\n')[1].trim()] || []).filter(Boolean).join('\\n  ')].join(''));\n  }\n}\n\nmodule.exports = Object.assign(resolveUrlLoader, joinFn);","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/resolve-url-loader/index.js"],"names":["path","require","fs","loaderUtils","camelcase","SourceMapConsumer","adjustSourceMap","valueProcessor","joinFn","logToTestHarness","PACKAGE_NAME","name","resolveUrlLoader","content","sourceMap","loader","test","context","handleAsError","options","Object","assign","engine","silent","absolute","keepQuery","removeCR","root","debug","join","defaultJoin","getOptions","handleAsWarning","length","isValid","isAbsolute","existsSync","statSync","isDirectory","cacheable","sourceMapConsumer","absSourceMap","JSON","parse","exception","format","message","enginePath","__dirname","isValidEngine","callback","async","Promise","resolve","resourcePath","outputSourceMap","transformDeclaration","catch","onFailure","then","onSuccess","error","encodeError","reworked","finalMap","map","label","emitWarning","emitError","Error","concat","stack","split","trim","filter","Boolean","module","exports"],"mappings":"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","sourcesContent":["/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nvar path              = require('path'),\n    fs                = require('fs'),\n    loaderUtils       = require('loader-utils'),\n    camelcase         = require('camelcase'),\n    SourceMapConsumer = require('source-map').SourceMapConsumer;\n\nvar adjustSourceMap = require('adjust-sourcemap-loader/lib/process');\n\nvar valueProcessor   = require('./lib/value-processor');\nvar joinFn           = require('./lib/join-function');\nvar logToTestHarness = require('./lib/log-to-test-harness');\n\nvar PACKAGE_NAME = require('./package.json').name;\n\n/**\n * A webpack loader that resolves absolute url() paths relative to their original source file.\n * Requires source-maps to do any meaningful work.\n * @param {string} content Css content\n * @param {object} sourceMap The source-map\n * @returns {string|String}\n */\nfunction resolveUrlLoader(content, sourceMap) {\n  /* jshint validthis:true */\n\n  // details of the file being processed\n  var loader = this;\n\n  // a relative loader.context is a problem\n  if (/^\\./.test(loader.context)) {\n    return handleAsError(\n      'webpack misconfiguration',\n      'loader.context is relative, expected absolute'\n    );\n  }\n\n  // webpack 1: prefer loader query, else options object\n  // webpack 2: prefer loader options\n  // webpack 3: deprecate loader.options object\n  // webpack 4: loader.options no longer defined\n  var options = Object.assign(\n    {\n      sourceMap: loader.sourceMap,\n      engine   : 'postcss',\n      silent   : false,\n      absolute : false,\n      keepQuery: false,\n      removeCR : false,\n      root     : false,\n      debug    : false,\n      join     : joinFn.defaultJoin\n    },\n    !!loader.options && loader.options[camelcase(PACKAGE_NAME)],\n    loaderUtils.getOptions(loader)\n  );\n\n  // maybe log options for the test harness\n  logToTestHarness(options);\n\n  // defunct options\n  if ('attempts' in options) {\n    handleAsWarning(\n      'loader misconfiguration',\n      '\"attempts\" option is defunct (consider \"join\" option if search is needed)'\n    );\n  }\n  if ('includeRoot' in options) {\n    handleAsWarning(\n      'loader misconfiguration',\n      '\"includeRoot\" option is defunct (consider \"join\" option if search is needed)'\n    );\n  }\n  if ('fail' in options) {\n    handleAsWarning(\n      'loader misconfiguration',\n      '\"fail\" option is defunct'\n    );\n  }\n\n  // validate join option\n  if (typeof options.join !== 'function') {\n    return handleAsError(\n      'loader misconfiguration',\n      '\"join\" option must be a Function'\n    );\n  } else if (options.join.length !== 2) {\n    return handleAsError(\n      'loader misconfiguration',\n      '\"join\" Function must take exactly 2 arguments (filename and options hash)'\n    );\n  }\n\n  // validate root option\n  if (typeof options.root === 'string') {\n    var isValid = (options.root === '') ||\n      (path.isAbsolute(options.root) && fs.existsSync(options.root) && fs.statSync(options.root).isDirectory());\n\n    if (!isValid) {\n      return handleAsError(\n        'loader misconfiguration',\n        '\"root\" option must be an empty string or an absolute path to an existing directory'\n      );\n    }\n  } else if (options.root !== false) {\n    handleAsWarning(\n      'loader misconfiguration',\n      '\"root\" option must be string where used or false where unused'\n    );\n  }\n\n  // loader result is cacheable\n  loader.cacheable();\n\n  // incoming source-map\n  var sourceMapConsumer, absSourceMap;\n  if (sourceMap) {\n\n    // support non-standard string encoded source-map (per less-loader)\n    if (typeof sourceMap === 'string') {\n      try {\n        sourceMap = JSON.parse(sourceMap);\n      }\n      catch (exception) {\n        return handleAsError(\n          'source-map error',\n          'cannot parse source-map string (from less-loader?)'\n        );\n      }\n    }\n\n    // leverage adjust-sourcemap-loader's codecs to avoid having to make any assumptions about the sourcemap\n    //  historically this is a regular source of breakage\n    try {\n      absSourceMap = adjustSourceMap(loader, {format: 'absolute'}, sourceMap);\n    }\n    catch (exception) {\n      return handleAsError(\n        'source-map error',\n        exception.message\n      );\n    }\n\n    // prepare the adjusted sass source-map for later look-ups\n    sourceMapConsumer = new SourceMapConsumer(absSourceMap);\n  }\n\n  // choose a CSS engine\n  var enginePath    = /^\\w+$/.test(options.engine) && path.join(__dirname, 'lib', 'engine', options.engine + '.js');\n  var isValidEngine = fs.existsSync(enginePath);\n  if (!isValidEngine) {\n    return handleAsError(\n      'loader misconfiguration',\n      '\"engine\" option is not valid'\n    );\n  }\n\n  // process async\n  var callback = loader.async();\n  Promise\n    .resolve(require(enginePath)(loader.resourcePath, content, {\n      outputSourceMap     : !!options.sourceMap,\n      transformDeclaration: valueProcessor(loader.resourcePath, options),\n      absSourceMap        : absSourceMap,\n      sourceMapConsumer   : sourceMapConsumer,\n      removeCR            : options.removeCR\n    }))\n    .catch(onFailure)\n    .then(onSuccess);\n\n  function onFailure(error) {\n    callback(encodeError('CSS error', error));\n  }\n\n  function onSuccess(reworked) {\n    if (reworked) {\n      // complete with source-map\n      //  source-map sources are relative to the file being processed\n      if (options.sourceMap) {\n        var finalMap = adjustSourceMap(loader, {format: 'sourceRelative'}, reworked.map);\n        callback(null, reworked.content, finalMap);\n      }\n      // complete without source-map\n      else {\n        callback(null, reworked.content);\n      }\n    }\n  }\n\n  /**\n   * Push a warning for the given exception and return the original content.\n   * @param {string} label Summary of the error\n   * @param {string|Error} [exception] Optional extended error details\n   * @returns {string} The original CSS content\n   */\n  function handleAsWarning(label, exception) {\n    if (!options.silent) {\n      loader.emitWarning(encodeError(label, exception));\n    }\n    return content;\n  }\n\n  /**\n   * Push a warning for the given exception and return the original content.\n   * @param {string} label Summary of the error\n   * @param {string|Error} [exception] Optional extended error details\n   * @returns {string} The original CSS content\n   */\n  function handleAsError(label, exception) {\n    loader.emitError(encodeError(label, exception));\n    return content;\n  }\n\n  function encodeError(label, exception) {\n    return new Error(\n      [\n        PACKAGE_NAME,\n        ': ',\n        [label]\n          .concat(\n            (typeof exception === 'string') && exception ||\n            (exception instanceof Error) && [exception.message, exception.stack.split('\\n')[1].trim()] ||\n            []\n          )\n          .filter(Boolean)\n          .join('\\n  ')\n      ].join('')\n    );\n  }\n}\n\nmodule.exports = Object.assign(resolveUrlLoader, joinFn);\n"]},"metadata":{},"sourceType":"script"}