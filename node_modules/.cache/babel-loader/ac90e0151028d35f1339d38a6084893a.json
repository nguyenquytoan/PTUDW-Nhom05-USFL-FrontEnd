{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.mjs';\nimport { defaultMethod, validMethods } from './utils/constants.mjs';\nimport { normalizeHandler } from './utils/normalizeHandler.mjs';\nimport './_version.mjs';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox.routing\n */\n\nclass Route {\n  /**\n   * Constructor for Route class.\n   *\n   * @param {workbox.routing.Route~matchCallback} match\n   * A callback function that determines whether the route matches a given\n   * `fetch` event by returning a non-falsy value.\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resolving to a Response.\n   * @param {string} [method='GET'] The HTTP method to match the Route\n   * against.\n   */\n  constructor(match, handler, method) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(match, 'function', {\n        moduleName: 'workbox-routing',\n        className: 'Route',\n        funcName: 'constructor',\n        paramName: 'match'\n      });\n\n      if (method) {\n        assert.isOneOf(method, validMethods, {\n          paramName: 'method'\n        });\n      }\n    } // These values are referenced directly by Router so cannot be\n    // altered by minifification.\n\n\n    this.handler = normalizeHandler(handler);\n    this.match = match;\n    this.method = method || defaultMethod;\n  }\n\n}\n\nexport { Route };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-routing/Route.mjs"],"names":["assert","defaultMethod","validMethods","normalizeHandler","Route","constructor","match","handler","method","process","env","NODE_ENV","isType","moduleName","className","funcName","paramName","isOneOf"],"mappings":"AAAA;;;;;;;AAQA,SAAQA,MAAR,QAAqB,kCAArB;AAEA,SAAQC,aAAR,EAAuBC,YAAvB,QAA0C,uBAA1C;AACA,SAAQC,gBAAR,QAA+B,8BAA/B;AACA,OAAO,gBAAP;AAEA;;;;;;;;;;AASA,MAAMC,KAAN,CAAY;AACV;;;;;;;;;;;AAWAC,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAAyB;AAClC,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCX,MAAAA,MAAM,CAACY,MAAP,CAAcN,KAAd,EAAqB,UAArB,EAAiC;AAC/BO,QAAAA,UAAU,EAAE,iBADmB;AAE/BC,QAAAA,SAAS,EAAE,OAFoB;AAG/BC,QAAAA,QAAQ,EAAE,aAHqB;AAI/BC,QAAAA,SAAS,EAAE;AAJoB,OAAjC;;AAOA,UAAIR,MAAJ,EAAY;AACVR,QAAAA,MAAM,CAACiB,OAAP,CAAeT,MAAf,EAAuBN,YAAvB,EAAqC;AAACc,UAAAA,SAAS,EAAE;AAAZ,SAArC;AACD;AACF,KAZiC,CAclC;AACA;;;AACA,SAAKT,OAAL,GAAeJ,gBAAgB,CAACI,OAAD,CAA/B;AACA,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKE,MAAL,GAAcA,MAAM,IAAIP,aAAxB;AACD;;AA/BS;;AAkCZ,SAAQG,KAAR","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\n\nimport {defaultMethod, validMethods} from './utils/constants.mjs';\nimport {normalizeHandler} from './utils/normalizeHandler.mjs';\nimport './_version.mjs';\n\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox.routing\n */\nclass Route {\n  /**\n   * Constructor for Route class.\n   *\n   * @param {workbox.routing.Route~matchCallback} match\n   * A callback function that determines whether the route matches a given\n   * `fetch` event by returning a non-falsy value.\n   * @param {workbox.routing.Route~handlerCallback} handler A callback\n   * function that returns a Promise resolving to a Response.\n   * @param {string} [method='GET'] The HTTP method to match the Route\n   * against.\n   */\n  constructor(match, handler, method) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(match, 'function', {\n        moduleName: 'workbox-routing',\n        className: 'Route',\n        funcName: 'constructor',\n        paramName: 'match',\n      });\n\n      if (method) {\n        assert.isOneOf(method, validMethods, {paramName: 'method'});\n      }\n    }\n\n    // These values are referenced directly by Router so cannot be\n    // altered by minifification.\n    this.handler = normalizeHandler(handler);\n    this.match = match;\n    this.method = method || defaultMethod;\n  }\n}\n\nexport {Route};\n"]},"metadata":{},"sourceType":"module"}