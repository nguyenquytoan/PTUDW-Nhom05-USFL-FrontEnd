{"ast":null,"code":"const path = require(`path`);\n\nlet PnpWebpackPlugin = require(`./index`);\n\nfunction makeResolver(resolverPlugins, options = {}) {\n  const {\n    NodeJsInputFileSystem,\n    CachedInputFileSystem,\n    ResolverFactory\n  } = require('enhanced-resolve');\n\n  const resolver = ResolverFactory.createResolver({\n    fileSystem: new CachedInputFileSystem(new NodeJsInputFileSystem(), 4000),\n    extensions: ['.js', '.json'],\n    ...options\n  });\n\n  for (const {\n    apply\n  } of resolverPlugins) apply(resolver);\n\n  return resolver;\n}\n\nfunction makeRequest(resolver, request, issuer) {\n  return new Promise((resolve, reject) => {\n    resolver.resolve({}, issuer, request, {}, (err, filepath) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(filepath);\n      }\n    });\n  });\n}\n\ndescribe(`Regular Plugin`, () => {\n  it(`should correctly resolve a relative require`, async () => {\n    const resolver = makeResolver([PnpWebpackPlugin]);\n    const resolution = await makeRequest(resolver, `./index.js`, __dirname);\n    expect(resolution).toEqual(path.normalize(`${__dirname}/index.js`));\n  });\n  it(`shouldn't prevent the 'extensions' option from working`, async () => {\n    const resolver = makeResolver([PnpWebpackPlugin]);\n    const resolution = await makeRequest(resolver, `./index`, __dirname);\n    expect(resolution).toEqual(path.normalize(`${__dirname}/index.js`));\n  });\n  it(`shouldn't prevent the 'alias' option from working`, async () => {\n    const resolver = makeResolver([PnpWebpackPlugin], {\n      alias: {\n        [`foo`]: `./fixtures/index.js`\n      }\n    });\n    const resolution = await makeRequest(resolver, `foo`, __dirname);\n    expect(resolution).toEqual(path.normalize(`${__dirname}/fixtures/index.js`));\n  });\n  it(`shouldn't prevent the 'modules' option from working`, async () => {\n    const resolver = makeResolver([PnpWebpackPlugin], {\n      modules: [`./fixtures`]\n    });\n    const resolution = await makeRequest(resolver, `file`, __dirname);\n    expect(resolution).toEqual(path.normalize(`${__dirname}/fixtures/file.js`));\n  });\n});","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/pnp-webpack-plugin/index.test.js"],"names":["path","require","PnpWebpackPlugin","makeResolver","resolverPlugins","options","NodeJsInputFileSystem","CachedInputFileSystem","ResolverFactory","resolver","createResolver","fileSystem","extensions","apply","makeRequest","request","issuer","Promise","resolve","reject","err","filepath","describe","it","resolution","__dirname","expect","toEqual","normalize","alias","modules"],"mappings":"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","sourcesContent":["const path = require(`path`);\nlet PnpWebpackPlugin = require(`./index`);\n\nfunction makeResolver(resolverPlugins, options = {}) {\n  const {\n    NodeJsInputFileSystem,\n    CachedInputFileSystem,\n    ResolverFactory\n  } = require('enhanced-resolve');\n\n  const resolver = ResolverFactory.createResolver({\n    fileSystem: new CachedInputFileSystem(new NodeJsInputFileSystem(), 4000),\n    extensions: ['.js', '.json'],\n    ... options,\n  });\n\n  for (const {apply} of resolverPlugins)\n    apply(resolver);\n\n  return resolver;\n}\n\nfunction makeRequest(resolver, request, issuer) {\n  return new Promise((resolve, reject) => {\n    resolver.resolve({}, issuer, request, {}, (err, filepath) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(filepath);\n      }\n    });\n  });\n}\n\ndescribe(`Regular Plugin`, () => {\n  it(`should correctly resolve a relative require`, async () => {\n    const resolver = makeResolver([PnpWebpackPlugin]);\n    const resolution = await makeRequest(resolver, `./index.js`, __dirname);\n\n    expect(resolution).toEqual(path.normalize(`${__dirname}/index.js`));\n  });\n\n  it(`shouldn't prevent the 'extensions' option from working`, async () => {\n    const resolver = makeResolver([PnpWebpackPlugin]);\n    const resolution = await makeRequest(resolver, `./index`, __dirname);\n\n    expect(resolution).toEqual(path.normalize(`${__dirname}/index.js`));\n  });\n\n  it(`shouldn't prevent the 'alias' option from working`, async () => {\n    const resolver = makeResolver([PnpWebpackPlugin], {alias: {[`foo`]: `./fixtures/index.js`}});\n    const resolution = await makeRequest(resolver, `foo`, __dirname);\n\n    expect(resolution).toEqual(path.normalize(`${__dirname}/fixtures/index.js`));\n  });\n\n  it(`shouldn't prevent the 'modules' option from working`, async () => {\n    const resolver = makeResolver([PnpWebpackPlugin], {modules: [`./fixtures`]});\n    const resolution = await makeRequest(resolver, `file`, __dirname);\n\n    expect(resolution).toEqual(path.normalize(`${__dirname}/fixtures/file.js`));\n  });\n});\n"]},"metadata":{},"sourceType":"script"}