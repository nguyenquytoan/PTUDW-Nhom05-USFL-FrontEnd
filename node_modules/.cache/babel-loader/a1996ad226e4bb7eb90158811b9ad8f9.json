{"ast":null,"code":"/* Convert between RGB and Hue\n/* ========================================================================== */\nexport function rgb2hue(rgbR, rgbG, rgbB, fallbackhue = 0) {\n  const value = rgb2value(rgbR, rgbG, rgbB);\n  const whiteness = rgb2whiteness(rgbR, rgbG, rgbB);\n  const delta = value - whiteness;\n\n  if (delta) {\n    // calculate segment\n    const segment = value === rgbR ? (rgbG - rgbB) / delta : value === rgbG ? (rgbB - rgbR) / delta : (rgbR - rgbG) / delta; // calculate shift\n\n    const shift = value === rgbR ? segment < 0 ? 360 / 60 : 0 / 60 : value === rgbG ? 120 / 60 : 240 / 60; // calculate hue\n\n    const hue = (segment + shift) * 60;\n    return hue;\n  } else {\n    // otherwise return the fallback hue\n    return fallbackhue;\n  }\n}\nexport function hue2rgb(t1, t2, hue) {\n  // calculate the ranged hue\n  const rhue = hue < 0 ? hue + 360 : hue > 360 ? hue - 360 : hue; // calculate the rgb value\n\n  const rgb = rhue * 6 < 360 ? t1 + (t2 - t1) * rhue / 60 : rhue * 2 < 360 ? t2 : rhue * 3 < 720 ? t1 + (t2 - t1) * (240 - rhue) / 60 : t1;\n  return rgb;\n}\n/* RGB tooling\n/* ========================================================================== */\n\nexport function rgb2value(rgbR, rgbG, rgbB) {\n  const value = Math.max(rgbR, rgbG, rgbB);\n  return value;\n}\nexport function rgb2whiteness(rgbR, rgbG, rgbB) {\n  const whiteness = Math.min(rgbR, rgbG, rgbB);\n  return whiteness;\n}\n/* Math matrix\n/* ========================================================================== */\n\nexport function matrix(params, mats) {\n  return mats.map(mat => mat.reduce((acc, value, index) => acc + params[index] * value, 0));\n}\n/* D50 reference white\n/* ========================================================================== */\n\nexport const [wd50X, wd50Y, wd50Z] = [96.42, 100, 82.49];\n/* Epsilon\n/* ========================================================================== */\n\nexport const epsilon = Math.pow(6, 3) / Math.pow(29, 3);\n/* Kappa\n/* ========================================================================== */\n\nexport const kappa = Math.pow(29, 3) / Math.pow(3, 3);","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/@csstools/convert-colors/lib/util.js"],"names":["rgb2hue","rgbR","rgbG","rgbB","fallbackhue","value","rgb2value","whiteness","rgb2whiteness","delta","segment","shift","hue","hue2rgb","t1","t2","rhue","rgb","Math","max","min","matrix","params","mats","map","mat","reduce","acc","index","wd50X","wd50Y","wd50Z","epsilon","pow","kappa"],"mappings":"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","sourcesContent":["/* Convert between RGB and Hue\n/* ========================================================================== */\n\nexport function rgb2hue(rgbR, rgbG, rgbB, fallbackhue = 0) {\n\tconst value     = rgb2value(rgbR, rgbG, rgbB);\n\tconst whiteness = rgb2whiteness(rgbR, rgbG, rgbB);\n\tconst delta     = value - whiteness;\n\n\tif (delta) {\n\t\t// calculate segment\n\t\tconst segment = value === rgbR\n\t\t\t? (rgbG - rgbB) / delta\n\t\t: value === rgbG\n\t\t\t? (rgbB - rgbR) / delta\n\t\t: (rgbR - rgbG) / delta;\n\n\t\t// calculate shift\n\t\tconst shift = value === rgbR\n\t\t\t? segment < 0\n\t\t\t\t? 360 / 60\n\t\t\t\t: 0 / 60\n\t\t: value === rgbG\n\t\t\t? 120 / 60\n\t\t: 240 / 60;\n\n\t\t// calculate hue\n\t\tconst hue = (segment + shift) * 60;\n\n\t\treturn hue;\n\t} else {\n\t\t// otherwise return the fallback hue\n\t\treturn fallbackhue;\n\t}\n}\n\nexport function hue2rgb(t1, t2, hue) {\n\t// calculate the ranged hue\n\tconst rhue = hue < 0 ? hue + 360 : hue > 360 ? hue - 360 : hue;\n\n\t// calculate the rgb value\n\tconst rgb = rhue * 6 < 360\n\t\t? t1 + (t2 - t1) * rhue / 60\n\t: rhue * 2 < 360\n\t\t? t2\n\t: rhue * 3 < 720\n\t\t? t1 + (t2 - t1) * (240 - rhue) / 60\n\t: t1;\n\n\treturn rgb;\n}\n\n/* RGB tooling\n/* ========================================================================== */\n\nexport function rgb2value(rgbR, rgbG, rgbB) {\n\tconst value = Math.max(rgbR, rgbG, rgbB);\n\n\treturn value;\n}\n\nexport function rgb2whiteness(rgbR, rgbG, rgbB) {\n\tconst whiteness = Math.min(rgbR, rgbG, rgbB);\n\n\treturn whiteness;\n}\n\n/* Math matrix\n/* ========================================================================== */\n\nexport function matrix(params, mats) {\n\treturn mats.map(mat => mat.reduce((acc, value, index) => acc + params[index] * value, 0));\n}\n\n/* D50 reference white\n/* ========================================================================== */\n\nexport const [ wd50X, wd50Y, wd50Z ] = [ 96.42, 100, 82.49 ];\n\n/* Epsilon\n/* ========================================================================== */\n\nexport const epsilon = Math.pow(6, 3) / Math.pow(29, 3);\n\n/* Kappa\n/* ========================================================================== */\n\nexport const kappa = Math.pow(29, 3) / Math.pow(3, 3);\n"]},"metadata":{},"sourceType":"module"}