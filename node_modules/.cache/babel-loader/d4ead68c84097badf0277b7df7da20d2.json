{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n/**\n * Helper method that sanitizes the config based on what\n * workbox-build.getManifest() expects.\n *\n * @param {Object} originalConfig\n * @return {Object} Sanitized config.\n * @private\n */\n\nfunction forGetManifest(originalConfig) {\n  const propertiesToRemove = ['chunks', 'exclude', 'excludeChunks', 'importScripts', 'importWorkboxFrom', 'importsDirectory', 'include', 'precacheManifestFilename', 'swDest', 'swSrc', 'test'];\n  return sanitizeConfig(originalConfig, propertiesToRemove);\n}\n/**\n * Helper method that sanitizes the config based on what\n * workbox-build.generateSWString() expects.\n *\n * @param {Object} originalConfig\n * @return {Object} Sanitized config.\n * @private\n */\n\n\nfunction forGenerateSWString(originalConfig) {\n  const propertiesToRemove = ['chunks', 'exclude', 'excludeChunks', 'importWorkboxFrom', 'importsDirectory', 'include', 'precacheManifestFilename', 'swDest', 'test'];\n  return sanitizeConfig(originalConfig, propertiesToRemove);\n}\n/**\n * Given a config object, make a shallow copy via Object.assign(), and remove\n * the properties from the copy that we know are webpack-plugin\n * specific, so that the remaining properties can be passed through to the\n * appropriate workbox-build method.\n *\n * @param {Object} originalConfig\n * @param {Array<string>} propertiesToRemove\n * @return {Object} A copy of config, sanitized.\n *\n * @private\n */\n\n\nfunction sanitizeConfig(originalConfig, propertiesToRemove) {\n  const config = Object.assign({}, originalConfig);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = propertiesToRemove[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      const property = _step.value;\n      delete config[property];\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return config;\n}\n\nmodule.exports = {\n  forGetManifest,\n  forGenerateSWString\n};","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-webpack-plugin/build/lib/sanitize-config.js"],"names":["forGetManifest","originalConfig","propertiesToRemove","sanitizeConfig","forGenerateSWString","config","Object","assign","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","property","value","err","return","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;AAQA;;;;;;;;;AAQA,SAASA,cAAT,CAAwBC,cAAxB,EAAwC;AACtC,QAAMC,kBAAkB,GAAG,CAAC,QAAD,EAAW,SAAX,EAAsB,eAAtB,EAAuC,eAAvC,EAAwD,mBAAxD,EAA6E,kBAA7E,EAAiG,SAAjG,EAA4G,0BAA5G,EAAwI,QAAxI,EAAkJ,OAAlJ,EAA2J,MAA3J,CAA3B;AACA,SAAOC,cAAc,CAACF,cAAD,EAAiBC,kBAAjB,CAArB;AACD;AACD;;;;;;;;;;AAUA,SAASE,mBAAT,CAA6BH,cAA7B,EAA6C;AAC3C,QAAMC,kBAAkB,GAAG,CAAC,QAAD,EAAW,SAAX,EAAsB,eAAtB,EAAuC,mBAAvC,EAA4D,kBAA5D,EAAgF,SAAhF,EAA2F,0BAA3F,EAAuH,QAAvH,EAAiI,MAAjI,CAA3B;AACA,SAAOC,cAAc,CAACF,cAAD,EAAiBC,kBAAjB,CAArB;AACD;AACD;;;;;;;;;;;;;;AAcA,SAASC,cAAT,CAAwBF,cAAxB,EAAwCC,kBAAxC,EAA4D;AAC1D,QAAMG,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,cAAlB,CAAf;AACA,MAAIO,yBAAyB,GAAG,IAAhC;AACA,MAAIC,iBAAiB,GAAG,KAAxB;AACA,MAAIC,cAAc,GAAGC,SAArB;;AAEA,MAAI;AACF,SAAK,IAAIC,SAAS,GAAGV,kBAAkB,CAACW,MAAM,CAACC,QAAR,CAAlB,EAAhB,EAAuDC,KAA5D,EAAmE,EAAEP,yBAAyB,GAAG,CAACO,KAAK,GAAGH,SAAS,CAACI,IAAV,EAAT,EAA2BC,IAAzD,CAAnE,EAAmIT,yBAAyB,GAAG,IAA/J,EAAqK;AACnK,YAAMU,QAAQ,GAAGH,KAAK,CAACI,KAAvB;AACA,aAAOd,MAAM,CAACa,QAAD,CAAb;AACD;AACF,GALD,CAKE,OAAOE,GAAP,EAAY;AACZX,IAAAA,iBAAiB,GAAG,IAApB;AACAC,IAAAA,cAAc,GAAGU,GAAjB;AACD,GARD,SAQU;AACR,QAAI;AACF,UAAI,CAACZ,yBAAD,IAA8BI,SAAS,CAACS,MAAV,IAAoB,IAAtD,EAA4D;AAC1DT,QAAAA,SAAS,CAACS,MAAV;AACD;AACF,KAJD,SAIU;AACR,UAAIZ,iBAAJ,EAAuB;AACrB,cAAMC,cAAN;AACD;AACF;AACF;;AAED,SAAOL,MAAP;AACD;;AAEDiB,MAAM,CAACC,OAAP,GAAiB;AACfvB,EAAAA,cADe;AAEfI,EAAAA;AAFe,CAAjB","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n/**\n * Helper method that sanitizes the config based on what\n * workbox-build.getManifest() expects.\n *\n * @param {Object} originalConfig\n * @return {Object} Sanitized config.\n * @private\n */\nfunction forGetManifest(originalConfig) {\n  const propertiesToRemove = ['chunks', 'exclude', 'excludeChunks', 'importScripts', 'importWorkboxFrom', 'importsDirectory', 'include', 'precacheManifestFilename', 'swDest', 'swSrc', 'test'];\n  return sanitizeConfig(originalConfig, propertiesToRemove);\n}\n/**\n * Helper method that sanitizes the config based on what\n * workbox-build.generateSWString() expects.\n *\n * @param {Object} originalConfig\n * @return {Object} Sanitized config.\n * @private\n */\n\n\nfunction forGenerateSWString(originalConfig) {\n  const propertiesToRemove = ['chunks', 'exclude', 'excludeChunks', 'importWorkboxFrom', 'importsDirectory', 'include', 'precacheManifestFilename', 'swDest', 'test'];\n  return sanitizeConfig(originalConfig, propertiesToRemove);\n}\n/**\n * Given a config object, make a shallow copy via Object.assign(), and remove\n * the properties from the copy that we know are webpack-plugin\n * specific, so that the remaining properties can be passed through to the\n * appropriate workbox-build method.\n *\n * @param {Object} originalConfig\n * @param {Array<string>} propertiesToRemove\n * @return {Object} A copy of config, sanitized.\n *\n * @private\n */\n\n\nfunction sanitizeConfig(originalConfig, propertiesToRemove) {\n  const config = Object.assign({}, originalConfig);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = propertiesToRemove[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      const property = _step.value;\n      delete config[property];\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return config;\n}\n\nmodule.exports = {\n  forGetManifest,\n  forGenerateSWString\n};"]},"metadata":{},"sourceType":"script"}