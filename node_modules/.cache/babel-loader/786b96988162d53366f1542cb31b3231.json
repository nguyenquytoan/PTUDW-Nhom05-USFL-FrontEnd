{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.mjs';\nimport '../_version.mjs';\n/*\n * This method returns true if the current context is a service worker.\n */\n\nconst isSWEnv = moduleName => {\n  if (!('ServiceWorkerGlobalScope' in self)) {\n    throw new WorkboxError('not-in-sw', {\n      moduleName\n    });\n  }\n};\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\n\n\nconst isArray = (value, {\n  moduleName,\n  className,\n  funcName,\n  paramName\n}) => {\n  if (!Array.isArray(value)) {\n    throw new WorkboxError('not-an-array', {\n      moduleName,\n      className,\n      funcName,\n      paramName\n    });\n  }\n};\n\nconst hasMethod = (object, expectedMethod, {\n  moduleName,\n  className,\n  funcName,\n  paramName\n}) => {\n  const type = typeof object[expectedMethod];\n\n  if (type !== 'function') {\n    throw new WorkboxError('missing-a-method', {\n      paramName,\n      expectedMethod,\n      moduleName,\n      className,\n      funcName\n    });\n  }\n};\n\nconst isType = (object, expectedType, {\n  moduleName,\n  className,\n  funcName,\n  paramName\n}) => {\n  if (typeof object !== expectedType) {\n    throw new WorkboxError('incorrect-type', {\n      paramName,\n      expectedType,\n      moduleName,\n      className,\n      funcName\n    });\n  }\n};\n\nconst isInstance = (object, expectedClass, {\n  moduleName,\n  className,\n  funcName,\n  paramName,\n  isReturnValueProblem\n}) => {\n  if (!(object instanceof expectedClass)) {\n    throw new WorkboxError('incorrect-class', {\n      paramName,\n      expectedClass,\n      moduleName,\n      className,\n      funcName,\n      isReturnValueProblem\n    });\n  }\n};\n\nconst isOneOf = (value, validValues, {\n  paramName\n}) => {\n  if (!validValues.includes(value)) {\n    throw new WorkboxError('invalid-value', {\n      paramName,\n      value,\n      validValueDescription: `Valid values are ${JSON.stringify(validValues)}.`\n    });\n  }\n};\n\nconst isArrayOfClass = (value, expectedClass, {\n  moduleName,\n  className,\n  funcName,\n  paramName\n}) => {\n  const error = new WorkboxError('not-array-of-class', {\n    value,\n    expectedClass,\n    moduleName,\n    className,\n    funcName,\n    paramName\n  });\n\n  if (!Array.isArray(value)) {\n    throw error;\n  }\n\n  for (let item of value) {\n    if (!(item instanceof expectedClass)) {\n      throw error;\n    }\n  }\n};\n\nconst finalAssertExports = process.env.NODE_ENV === 'production' ? null : {\n  hasMethod,\n  isArray,\n  isInstance,\n  isOneOf,\n  isSWEnv,\n  isType,\n  isArrayOfClass\n};\nexport { finalAssertExports as assert };","map":{"version":3,"sources":["/Users/nguyenquytoan/Desktop/PTUDW-17TN-Nhom05-USFL/react-usfl/PTUDW-17TN-Nhom05/node_modules/workbox-core/_private/assert.mjs"],"names":["WorkboxError","isSWEnv","moduleName","self","isArray","value","className","funcName","paramName","Array","hasMethod","object","expectedMethod","type","isType","expectedType","isInstance","expectedClass","isReturnValueProblem","isOneOf","validValues","includes","validValueDescription","JSON","stringify","isArrayOfClass","error","item","finalAssertExports","process","env","NODE_ENV","assert"],"mappings":"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","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {WorkboxError} from '../_private/WorkboxError.mjs';\nimport '../_version.mjs';\n\n/*\n * This method returns true if the current context is a service worker.\n */\nconst isSWEnv = (moduleName) => {\n  if (!('ServiceWorkerGlobalScope' in self)) {\n    throw new WorkboxError('not-in-sw', {moduleName});\n  }\n};\n\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, {moduleName, className, funcName, paramName}) => {\n  if (!Array.isArray(value)) {\n    throw new WorkboxError('not-an-array', {\n      moduleName,\n      className,\n      funcName,\n      paramName,\n    });\n  }\n};\n\nconst hasMethod = (object, expectedMethod,\n    {moduleName, className, funcName, paramName}) => {\n  const type = typeof object[expectedMethod];\n  if (type !== 'function') {\n    throw new WorkboxError('missing-a-method', {paramName, expectedMethod,\n      moduleName, className, funcName});\n  }\n};\n\nconst isType = (object, expectedType,\n    {moduleName, className, funcName, paramName}) => {\n  if (typeof object !== expectedType) {\n    throw new WorkboxError('incorrect-type', {paramName, expectedType,\n      moduleName, className, funcName});\n  }\n};\n\nconst isInstance = (object, expectedClass,\n    {moduleName, className, funcName,\n      paramName, isReturnValueProblem}) => {\n  if (!(object instanceof expectedClass)) {\n    throw new WorkboxError('incorrect-class', {paramName, expectedClass,\n      moduleName, className, funcName, isReturnValueProblem});\n  }\n};\n\nconst isOneOf = (value, validValues, {paramName}) => {\n  if (!validValues.includes(value)) {\n    throw new WorkboxError('invalid-value', {\n      paramName,\n      value,\n      validValueDescription: `Valid values are ${JSON.stringify(validValues)}.`,\n    });\n  }\n};\n\nconst isArrayOfClass = (value, expectedClass,\n    {moduleName, className, funcName, paramName}) => {\n  const error = new WorkboxError('not-array-of-class', {\n    value, expectedClass,\n    moduleName, className, funcName, paramName,\n  });\n  if (!Array.isArray(value)) {\n    throw error;\n  }\n\n  for (let item of value) {\n    if (!(item instanceof expectedClass)) {\n      throw error;\n    }\n  }\n};\n\nconst finalAssertExports = process.env.NODE_ENV === 'production' ? null : {\n  hasMethod,\n  isArray,\n  isInstance,\n  isOneOf,\n  isSWEnv,\n  isType,\n  isArrayOfClass,\n};\n\nexport {finalAssertExports as assert};\n"]},"metadata":{},"sourceType":"module"}